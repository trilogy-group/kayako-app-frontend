{"version":3,"sources":["blanket-reporter.js","blanket-require.js"],"sourcesContent":["/*global blanket */\r\n(function() {\r\n  //TODO: Refactor/cleanup\r\n  blanket.customReporter = function(coverageData) {\r\n    var fileCoverage = [];\r\n    // This joy brought to you by pushing addl properties onto array elements\r\n    for (var x in coverageData.files) {\r\n      var fileData = coverageData.files[x];\r\n      fileCoverage.push({\r\n        fileName: x,\r\n        lines: fileData,\r\n        // source: fileData.source,  // currently not included - post request will be too large for most projects\r\n        branchData: fileData.branchData\r\n      });\r\n    }\r\n    // Create our own data structure to insulate from blanket's internals\r\n    window._$blanket_coverageData = {\r\n      fileData: fileCoverage,\r\n      stats: coverageData.stats\r\n    };\r\n    // Call the standard reporter well to get inline data (assuming you're running in browser)\r\n    blanket.defaultReporter(coverageData);\r\n  };\r\n\r\n})();\r\n","/* globals QUnit, blanket, requirejs, require:true, moduleLoaderFinish:true */\r\n\r\n// This could be a documented capability and move it out of blanket-loader\r\n// it works, can't put it in test-helper b/c it loads too late\r\nvar savedRequire = requirejs;\r\n\r\nblanket.options('enableCoverage',window.location.search.indexOf('coverage') > -1);\r\n\r\nvar blanketLoader = function(moduleName) {\r\n    blanket.requiringFile(moduleName);\r\n\r\n    var module = requirejs.entries[moduleName];\r\n\r\n    var dependencies = \"[\";\r\n    if (module.deps.length > 0) {\r\n        module.deps.forEach(function (dep) {\r\n            dependencies = dependencies + \"\\\"\" + dep + \"\\\", \";\r\n        });\r\n\r\n        dependencies = dependencies.substr(0, dependencies.length - 2);\r\n    }\r\n    dependencies = dependencies + \"]\";\r\n\r\n    var content =\r\n        \"define(\\\"\" + moduleName + \"\\\", \\n  \" +\r\n        dependencies + \", \\n\" +\r\n        module.callback.toString() +\r\n        \");//# sourceURL=\" + moduleName + \".js\";\r\n\r\n    blanket.utils.processFile(\r\n        content,\r\n        moduleName,\r\n        function newLoader() {\r\n            require(moduleName);\r\n        },\r\n        function oldLoader() {\r\n            require(moduleName);\r\n        }\r\n    );\r\n};\r\n\r\n// Defer the start of the test run until a call to QUnit.start() this\r\n// allows the modules to be loaded/instrumented prior to the test run\r\nif (typeof(QUnit) === 'object') {\r\n    QUnit.config.autostart = false;\r\n}\r\n\r\nvar shouldExclude = function(moduleName) {\r\n    if (moduleName.indexOf(blanket.options('modulePrefix')) === -1) {\r\n      return true;\r\n    }\r\n\r\n    // Loader exclusions are no longer necessary to fix conflicts with addon modules\r\n    // but may still be used to remove data coverage for specific files (e.g. config/environment).\r\n    var exclude = false;\r\n    if (blanket.options('loaderExclusions')) {\r\n        blanket.options('loaderExclusions').forEach(function (loaderExclusion) {\r\n            if (moduleName.indexOf(loaderExclusion) > -1) {\r\n                exclude = true;\r\n            }\r\n        });\r\n    }\r\n    return exclude;\r\n};\r\n\r\nvar seen = {};\r\n\r\n// proxy require to give us a chance to blanket required files\r\nif (blanket.options('enableCoverage')) {\r\n    require  = function(name) {\r\n        if (typeof(seen[name]) === 'undefined') {\r\n            seen[name] = true;\r\n            if (!shouldExclude(name)) {\r\n                blanketLoader(name);\r\n            }\r\n        }\r\n        return savedRequire(name);\r\n    };\r\n    blanket.options('reporter', blanket.customReporter);\r\n\r\n}\r\n\r\n/*\r\n * After running all the tests we'll loop over all matching requirejs\r\n * entries and annotate them so blanket will indicate their non-coverage\r\n */\r\nmoduleLoaderFinish = function() {\r\n  if (blanket.options('enableCoverage')) {\r\n    for (var moduleName in requirejs.entries) {\r\n      if (typeof(seen[moduleName]) === 'undefined') {\r\n        seen[moduleName] = true;\r\n        if (!shouldExclude(moduleName)) {\r\n          try {\r\n            blanketLoader(moduleName);\r\n          } catch (err) {\r\n            console.log(err);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxfile":"blanket-loader.js"}