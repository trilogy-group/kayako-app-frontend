"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('frontend-cp/acceptance-tests/sinon', ['exports', 'ember-sinon/acceptance-tests/sinon'], function (exports, _emberSinonAcceptanceTestsSinon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberSinonAcceptanceTestsSinon['default'];
    }
  });
});
define('frontend-cp/adapters/access-log', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'accesslogs';
    }
  });
});
define('frontend-cp/adapters/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, _ember, _emberData, _npmLodash) {

  var get = _ember['default'].get;

  //TODO: override handleResponse and not create/find/update/delete/.../../.. for error handling

  exports['default'] = _emberData['default'].RESTAdapter.extend({
    namespace: 'api/v1',
    primaryRecordKey: 'data',
    sessionService: _ember['default'].inject.service('session'),
    errorHandler: _ember['default'].inject.service('error-handler'),
    notificationHandler: _ember['default'].inject.service('error-handler/notification-strategy'),

    /*
     * Each time we findAll on a model, we check to see if we've
     * loaded it - we don't reload the model once this has happened.
     * (all new models will be pushed to the store via pusher)
     */
    foundAllHash: null,
    initFoundAllHash: _ember['default'].on('init', function () {
      this.set('foundAllHash', {});
    }),

    headers: _ember['default'].computed('sessionService.sessionId', function () {
      var headers = {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };
      var sessionId = this.get('sessionService.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    handleResponse: function handleResponse(status, headers, payload) {
      if (this.isSuccess(status, headers, payload)) {
        return payload;
      } else {
        var errors = this.normalizeErrorResponse(status, headers, payload);
        if (this.isInvalid(status, headers, payload)) {
          return new _emberData['default'].InvalidError(errors);
        } else {
          return new _emberData['default'].AdapterError(errors);
        }
      }
    },

    normalizeErrorResponse: function normalizeErrorResponse(status, headers) {
      var payload = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var errors = payload.errors || [];

      // Sneaks the auth token into auth-related errors
      if (payload.auth_token) {
        errors.filter(function (e) {
          return ['CREDENTIAL_EXPIRED', 'OTP_EXPECTED'].includes(e.code);
        }).forEach(function (error) {
          return error.authToken = payload.auth_token;
        });
      }

      // Since we can only return array, we have to merge notifications
      // into errors and assign NOTIFICATION code to tell them apart
      var notifications = payload.notifications || [];
      notifications.forEach(function (n) {
        n.code = 'NOTIFICATION';
      });

      return errors.concat(notifications);
    },

    handleErrors: function handleErrors(promise) {
      var _this = this;

      return promise.then(function (data) {
        _this.get('notificationHandler').processAll(data.notifications);
        return data;
      })['catch'](function (e) {
        return _this.get('errorHandler').process(e);
      });
    },

    createRecord: function createRecord() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    updateRecord: function updateRecord() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    deleteRecord: function deleteRecord() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findAll: function findAll() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findBelongsTo: function findBelongsTo() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findMany: function findMany() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findRecord: function findRecord() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    queryRecord: function queryRecord(store, type, query) {
      var url = this.buildURL(type.modelName, null, null, 'queryRecord', query);

      if (this.sortQueryParams) {
        query = this.sortQueryParams(query);
      }

      return this.handleErrors(this.ajax(url, 'GET', { data: query }));
    },

    buildURL: function buildURL() {
      var url = [];
      var prefix = this.getURLPrefix();
      if (prefix) {
        url.push(prefix);
      }
      url.push(this.buildURLFragment.apply(this, arguments));
      url = url.join('/');

      var host = get(this, 'host');
      if (!host && url && url.charAt(0) !== '/') {
        url = '/' + url;
      }

      return url;
    },

    buildURLFragment: function buildURLFragment(type, id, snapshot, requestType, query) {
      var url = [];
      var inverseRelationship = undefined;
      var store = get(this, 'store');
      var typeObject = store.modelFor(type);
      var parentSnapshot = undefined;

      typeObject.eachRelationship(function (name, relationship) {
        if (relationship.options.parent) {
          // Entity representing the parent
          if (snapshot) {
            parentSnapshot = snapshot.belongsTo(name);
          } else if (query && query.parent) {
            parentSnapshot = query.parent._createSnapshot();
            Reflect.deleteProperty(query, 'parent');
          }
          // The inverse relationship (parent-child)
          inverseRelationship = typeObject.inverseFor(name, store);
        }
      });

      if (parentSnapshot) {
        // Adapter for the parent entity
        var adapter = store.adapterFor(parentSnapshot.modelName);
        // Build the URL for the parent entity
        url.push(adapter.buildURLFragment(parentSnapshot.modelName, parentSnapshot.id, parentSnapshot, requestType, query));
        // Options hash for the inverse relationship
        var relationshipMeta = parentSnapshot.type.metaForProperty(inverseRelationship.name);
        url.push(relationshipMeta.options.url || this.pathForType(type));
      } else {
        url.push(this.pathForType(type));
      }

      if (id) {
        url.push(encodeURIComponent(id));
      }

      return url.join('/');
    },

    urlPrefix: function urlPrefix(path, parentURL) {
      var host = get(this, 'host');
      var url = [];

      // Protocol relative url
      if (/^\/\//.test(path)) {// eslint-disable-line no-empty
        // Do nothing, the full host is already included. This branch
        // avoids the absolute path logic and the relative path logic.

        // Absolute path
      } else if (path.charAt(0) === '/') {
          if (host) {
            path = path.slice(1);
            url.push(host);
          }
          // Relative path
        } else if (!/^http(s)?:\/\//.test(path)) {
            url.push(parentURL);
          }
      url.push(path);

      return url.join('/');
    },

    getURLPrefix: function getURLPrefix() {
      var url = [];
      var host = this.get('host');
      var namespace = this.get('namespace');
      if (host) {
        url.push(host);
      }
      if (namespace) {
        url.push(namespace);
      }

      return url.join('/');
    },

    // If the items fetched via hasMany relationship refer to the related entity
    // as their parent (via "parent" property in options), a property with the
    // parent's ID will be added to every child.
    // Ideally it's a job of a serializer, but this is the only place where we can
    // get access the relationship object.
    findHasMany: function findHasMany(store, snapshot, url, relationship) {
      var _this2 = this;

      return this.handleErrors(this._super.apply(this, arguments).then(function (payload) {
        var inverse = snapshot.type.inverseFor(relationship.key, store);
        if (inverse && payload[_this2.primaryRecordKey]) {
          payload[_this2.primaryRecordKey].forEach(function (entry) {
            if (!entry[inverse]) {
              entry[inverse] = {
                id: snapshot.id,
                type: snapshot.type
              };
            }
          });
        }
        return payload;
      }));
    },

    pathForType: function pathForType(type) {
      var dasherized = _ember['default'].String.dasherize(type);
      return _ember['default'].String.pluralize(dasherized);
    },

    query: function query(store, type, _query) {
      var url = this.buildURL(type.modelName, null, null, 'query', _query);

      if (this.sortQueryParams) {
        _query = this.sortQueryParams(_query);
      }

      return this.handleErrors(this.ajax(url, 'GET', { data: _query }));
    },

    isInvalid: function isInvalid(status, header, payload) {
      var isValidationError = function isValidationError(responseError) {
        return ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'].includes(responseError.code);
      };

      var hasValidationErrors = function hasValidationErrors(responseErrors) {
        return _npmLodash['default'].some(responseErrors, isValidationError);
      };

      return status === 422 || hasValidationErrors(payload.errors);
    },

    /*
     * If we've already requested a resource, we will never
     * need to update it (pusher will handle all the things)
     *
     * We're never background reloading.
     */

    shouldReloadAll: function shouldReloadAll(store, snapshotRecordArray) {
      if (this.get('foundAllHash.' + snapshotRecordArray.type.modelName)) {
        return false;
      }
      this.set('foundAllHash.' + snapshotRecordArray.type.modelName, true);
      return true;
    },

    shouldBackgroundReloadAll: function shouldBackgroundReloadAll() {
      return false;
    },

    /* TODO: Remove when Ember 2.0 is relased (just for deprecation warnings) */
    shouldReloadRecord: function shouldReloadRecord() {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return true;
    }
  });
});
define('frontend-cp/adapters/business-hour', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'businesshours';
    }
  });
});
define('frontend-cp/adapters/case-field-type', ['exports', 'frontend-cp/adapters/static-model'], function (exports, _frontendCpAdaptersStaticModel) {
  exports['default'] = _frontendCpAdaptersStaticModel['default'].extend({});
});
define('frontend-cp/adapters/case-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/fields';
    }
  });
});
define('frontend-cp/adapters/case-form', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/forms';
    }
  });
});
define('frontend-cp/adapters/case-message', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'messages';
    }
  });
});
define('frontend-cp/adapters/case-note', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    }
  });
});
define('frontend-cp/adapters/case-priority', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/priorities';
    }
  });
});
define('frontend-cp/adapters/case-reply', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'reply';
    }
  });
});
define('frontend-cp/adapters/case-status', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/statuses';
    }
  });
});
define('frontend-cp/adapters/case-type', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/types';
    }
  });
});
define('frontend-cp/adapters/case', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    /*
     * Pusher will keep this record up to date
     */
    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    }
  });
});
define('frontend-cp/adapters/channel', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/channels';
    }
  });
});
define('frontend-cp/adapters/column', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/columns';
    }
  });
});
define('frontend-cp/adapters/credential', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    headers: {
      Accept: 'application/json',
      'X-Options': 'flat',
      'X-Requested-With': 'XMLHttpRequest'
    }
  });
});
define('frontend-cp/adapters/definition', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/definition';
    }
  });
});
define('frontend-cp/adapters/facebook-account', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'facebook/accounts';
    }
  });
});
define('frontend-cp/adapters/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].LSAdapter.extend({
    namespace: 'novo'
  });
});
define('frontend-cp/adapters/identity-autocomplete-email', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'autocomplete/emails';
    }
  });
});
define('frontend-cp/adapters/identity-domain', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/domains';
    }
  });
});
define('frontend-cp/adapters/identity-email', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/emails';
    }
  });
});
define('frontend-cp/adapters/identity-facebook', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/facebook';
    }
  });
});
define('frontend-cp/adapters/identity-phone', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/phones';
    }
  });
});
define('frontend-cp/adapters/identity-twitter', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/twitter';
    }
  });
});
define('frontend-cp/adapters/intl', ['exports', 'ember-intl/adapters/-intl-adapter', 'frontend-cp/locales/new-locale'], function (exports, _emberIntlAdaptersIntlAdapter, _frontendCpLocalesNewLocale) {
  exports['default'] = _emberIntlAdaptersIntlAdapter['default'].extend({
    locales: {},

    findLanguage: function findLanguage(locale) {
      if (locale instanceof _frontendCpLocalesNewLocale['default']) {
        return locale;
      }

      if (typeof locale === 'string') {
        if (!this.locales[locale]) {
          this.locales[locale] = new (_frontendCpLocalesNewLocale['default'].extend({
            locale: locale
          }))();
        }
        return this.locales[locale];
      }
    }
  });
});
define('frontend-cp/adapters/locale-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'locale/fields';
    }
  });
});
define('frontend-cp/adapters/locale', ['exports', 'frontend-cp/adapters/application', 'ember'], function (exports, _frontendCpAdaptersApplication, _ember) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    headers: _ember['default'].computed('sessionService.sessionId', function () {
      return {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };
    })
  });
});
define('frontend-cp/adapters/macro', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/macros';
    }
  });
});
define('frontend-cp/adapters/metric', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/metrics';
    }
  });
});
define('frontend-cp/adapters/oauth-link', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    buildURLFragment: function buildURLFragment() {
      return 'twitter/account/link.json';
    }
  });
});
define('frontend-cp/adapters/organization-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'organizations/fields';
    }
  });
});
define('frontend-cp/adapters/organization-note', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    },

    query: function query(store, type, _query) {
      var _this = this;

      var organization = _query.parent;

      return this._super.apply(this, arguments).then(function (payload) {
        payload[_this.primaryRecordKey].forEach(function (entry) {
          entry.parent = {
            id: organization.get('id'),
            type: 'organization'
          };
        });

        // Need to unload posts for the current organization when we request new organization notes
        // because currently the API gives us notes, and we don't have the same API as in
        // case posts to draw the Profile Timeline. To reuse the current Timeline code
        // we have to push a "post" model. So when we request organization-notes, we
        // actually create a post model and we don't push the organization-note into the store.
        // @see serializers/organization-note
        store.peekAll('post').forEach(function (post) {
          if (parseInt(organization.get('id')) === parseInt(post.get('original.parent.id'))) {
            store.unloadRecord(post);
          }
        });

        return payload;
      });
    }
  });
});
define('frontend-cp/adapters/plan', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'plan';
    }
  });
});
define('frontend-cp/adapters/rating', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/recent';
    }
  });
});
define('frontend-cp/adapters/search-result-group', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'search/all';
    }
  });
});
define('frontend-cp/adapters/session', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, _ember, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    namespace: 'api/v1',

    buildURLFragment: function buildURLFragment() {
      return 'session';
    },

    b64EncodeUnicode: function b64EncodeUnicode(str) {
      return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
        return String.fromCharCode('0x' + p1);
      }));
    },

    headers: _ember['default'].computed('sessionService.{email,password,sessionId}', function () {
      var sessionId = this.get('sessionService.sessionId');
      var email = this.get('sessionService.email');
      var password = this.get('sessionService.password');
      var authorizationHeader = 'Basic ' + this.b64EncodeUnicode(email + ':' + password);
      var withPassword = email && password;

      var headers = {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };

      if (withPassword) {
        headers.Authorization = authorizationHeader;
      } else {
        headers['X-Session-ID'] = sessionId;
      }

      return headers;
    })
  });
});
define('frontend-cp/adapters/static-model', ['exports', 'ember-data', 'npm:lodash'], function (exports, _emberData, _npmLodash) {
  /*
   * Static model adapter
   *
   * Records will never be loaded or persisted the backend
   * Initialize any models in initializers
   * See case-field-type for implementation example
   */

  exports['default'] = _emberData['default'].Adapter.extend({
    findAll: function findAll(store, typeClass) {
      return store.peekAll(typeClass);
    },

    find: function find(store, typeClass, id) {
      var records = this.findAll(store, typeClass);

      var matchingRecords = _npmLodash['default'].select(records, function (record) {
        return record.id === id;
      });

      if (matchingRecords.length) {
        return matchingRecords.firstObject;
      }
    }
  });
});
define('frontend-cp/adapters/tag', ['exports', 'frontend-cp/adapters/application', 'ember'], function (exports, _frontendCpAdaptersApplication, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({

    buildURL: function buildURL(modelName, id, snapshot, requestType, query) {
      var url = [];
      var prefix = this.getURLPrefix();
      if (prefix) {
        url.push(prefix);
      }

      if (requestType === 'query') {
        if (query.caseId) {
          url.push('cases/' + query.caseId + '/tags');
          Reflect.deleteProperty(query, 'caseId');
        } else if (query.userId) {
          url.push('users/' + query.userId + '/tags');
          Reflect.deleteProperty(query, 'userId');
        } else if (query.organizationId) {
          url.push('organizations/' + query.organizationId + '/tags');
          Reflect.deleteProperty(query, 'organizationId');
        } else {
          url.push('autocomplete/tags');
        }
      } else {
        url.push(this.buildURLFragment.apply(this, arguments));
      }
      url = url.join('/');

      var host = get(this, 'host');
      if (!host && url && url.charAt(0) !== '/') {
        url = '/' + url;
      }

      return url;
    }
  });
});
define('frontend-cp/adapters/twitter-account-callback', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/account/callback';
    }
  });
});
define('frontend-cp/adapters/twitter-account', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/accounts';
    }
  });
});
define('frontend-cp/adapters/user-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'users/fields';
    }
  });
});
define('frontend-cp/adapters/user-note', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    },

    query: function query(store, type, _query) {
      var _this = this;

      var user = _query.parent;

      return this._super.apply(this, arguments).then(function (payload) {
        payload[_this.primaryRecordKey].forEach(function (entry) {
          entry.parent = {
            id: user.get('id'),
            type: 'user'
          };
        });

        // Need to unload posts for current user when we request new user notes
        // because currently API gives us notes, and don't have same API as in
        // case posts to draw Profile Timeline. To reuse current Timeline code
        // we have to push "post" model. So when we request user-notes, we
        // actually create post model and don't push user-note into the store.
        // @see serializers/user-note
        store.peekAll('post').forEach(function (post) {
          if (parseInt(user.get('id')) === parseInt(post.get('original.parent.id'))) {
            store.unloadRecord(post);
          }
        });

        return payload;
      });
    }
  });
});
define('frontend-cp/adapters/user', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    buildURLFragment: function buildURLFragment(modelName, id, snapshot, requestType, query) {
      if (query && query.name) {
        return 'autocomplete/users';
      } else {
        return this._super.apply(this, arguments);
      }
    }
  });
});
define('frontend-cp/adapters/view-count', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/counts';
    }
  });
});
define('frontend-cp/app', ['exports', 'ember', 'frontend-cp/resolver', 'ember/load-initializers', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpResolver, _emberLoadInitializers, _frontendCpConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _frontendCpConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _frontendCpConfigEnvironment['default'].podModulePrefix,
    Resolver: _frontendCpResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _frontendCpConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('frontend-cp/application/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    urlService: _ember['default'].inject.service('url'),
    notificationService: _ember['default'].inject.service('notification'),

    currentPathDidChange: _ember['default'].observer('currentPath', function () {
      this.get('urlService').set('currentPath', this.get('currentPath'));
    }),

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: _ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    actions: {
      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });
});
define('frontend-cp/application/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    session: _ember['default'].inject.service(),
    locale: _ember['default'].inject.service(),
    featureFlags: _ember['default'].inject.service('feature-flags'),
    errorHandler: _ember['default'].inject.service('error-handler'),

    beforeModel: function beforeModel() {
      var _this = this;

      // we suppress errors before locale strings are loaded
      this.get('errorHandler').set('enabled', false);

      return new _ember['default'].RSVP.Promise(function (resolve) {
        var logout = function logout() {
          _this.get('session').logout();
          resolve();
        };
        _this.get('session').getSession().then(function () {
          _this._finalizeSetup(resolve, logout);
        }, function () {
          _this._finalizeSetup(logout, logout);
        });
      });
    },

    _finalizeSetup: function _finalizeSetup(success, failure) {
      var _this2 = this;

      _ember['default'].RSVP.all([this.get('featureFlags').setup(), this.get('locale').setup()]).then(function () {
        _this2.get('errorHandler').set('enabled', true);
        return success();
      }, function () {
        _this2.get('errorHandler').set('enabled', true);
        return failure();
      });
    }
  });
});
define("frontend-cp/application/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/application/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-toast", [], ["type", ["subexpr", "@mut", [["get", "notification.type", ["loc", [null, [6, 9], [6, 26]]]]], [], []], "dismissable", ["subexpr", "@mut", [["get", "notification.dismissable", ["loc", [null, [7, 16], [7, 40]]]]], [], []], "autodismiss", ["subexpr", "@mut", [["get", "notification.autodismiss", ["loc", [null, [8, 16], [8, 40]]]]], [], []], "title", ["subexpr", "@mut", [["get", "notification.title", ["loc", [null, [9, 10], [9, 28]]]]], [], []], "body", ["subexpr", "@mut", [["get", "notification.body", ["loc", [null, [10, 9], [10, 26]]]]], [], []], "close", ["subexpr", "action", ["onNotificationClosed", ["get", "notification", ["loc", [null, [11, 41], [11, 53]]]]], [], ["loc", [null, [11, 10], [11, 54]]]]], ["loc", [null, [5, 4], [12, 6]]]]],
        locals: ["notification"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/application/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "application__notifications");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]], ["inline", "outlet", ["modals"], [], ["loc", [null, [2, 0], [2, 19]]]], ["block", "each", [["get", "notifications", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [13, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/blueprints/page-object-component', ['exports', 'ember-cli-page-object/blueprints/page-object-component'], function (exports, _emberCliPageObjectBlueprintsPageObjectComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObjectComponent['default'];
    }
  });
});
define('frontend-cp/blueprints/page-object-helper', ['exports', 'ember-cli-page-object/blueprints/page-object-helper'], function (exports, _emberCliPageObjectBlueprintsPageObjectHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObjectHelper['default'];
    }
  });
});
define('frontend-cp/blueprints/page-object', ['exports', 'ember-cli-page-object/blueprints/page-object'], function (exports, _emberCliPageObjectBlueprintsPageObject) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObject['default'];
    }
  });
});
define("frontend-cp/cldrs/en-001", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-001", "parentLocale": "en" };
});
define("frontend-cp/cldrs/en-gb", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-GB", "parentLocale": "en-001" };
});
define("frontend-cp/cldrs/en-us", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-US", "parentLocale": "en" };
});
define("frontend-cp/cldrs/en", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
      var s = String(n).split("."),
          v0 = !s[1],
          t0 = Number(s[0]) == n,
          n10 = t0 && s[0].slice(-1),
          n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "Hour", "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "minute": { "displayName": "Minute", "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } } } };
});
define('frontend-cp/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'frontend-cp/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _frontendCpConfigEnvironment) {

  var name = _frontendCpConfigEnvironment['default'].APP.name;
  var version = _frontendCpConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('frontend-cp/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _emberBasicDropdownComponentsBasicDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdown['default'];
    }
  });
});
define('frontend-cp/components/copy-button', ['exports', 'ember-cli-clipboard/components/copy-button'], function (exports, _emberCliClipboardComponentsCopyButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliClipboardComponentsCopyButton['default'];
    }
  });
});
define('frontend-cp/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('frontend-cp/components/ko-admin/case-fields/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    caseField: null,
    title: null,
    onOptionAddition: null,
    onOptionRemoval: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,
    agentCaseSettings: false,

    isApiFieldKeyAvailable: _ember['default'].computed('caseField.id', function () {
      return !this.get('caseField.id');
    }),
    isStatusKeyAvailable: true,
    isCustomerEditAvailable: true,

    isStatusOrApiFieldAvailable: _ember['default'].computed('isApiFieldKeyAvailable', 'isStatusKeyAvailable', function () {
      return this.get('isApiFieldKeyAvailable') || this.get('isStatusKeyAvailable');
    }),

    optionsList: _ember['default'].computed('caseField.options', 'caseField.options.[]', 'caseField.options.@each.markedForDeletion', function () {
      return this.get('caseField.options').filterBy('markedForDeletion', false);
    }),

    getAdminComponentForFieldType: function getAdminComponentForFieldType(fieldType) {
      switch (fieldType) {
        case 'REGEX':
          return 'ko-admin/case-fields/edit/regex';
        case 'PRIORITY':
          return 'ko-admin/case-fields/edit/priorities';
        case 'STATUS':
          return 'ko-admin/case-fields/edit/statuses';
        case 'TYPE':
          return 'ko-admin/case-fields/edit/types';
      }
    },

    onCustomerEditableChange: _ember['default'].observer('caseField.isCustomerEditable', function () {
      if (!this.get('caseField.isCustomerEditable')) {
        this.set('caseField.isRequiredForCustomers', false);
      }
    }),

    disabledString: function disabledString(isEditable) {
      return isEditable ? '' : 'disabled';
    },

    isTitleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isRequiredWhenCreatingEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerVisibleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerFieldTitleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'MESSAGE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerEditableEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerRequiredEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
        case 'STATUS':
          return false;
        default:
          return true;
      }
    }),

    isCustomerDescriptionsVisible: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    })
  });
});
define('frontend-cp/components/ko-admin/case-fields/edit/options/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    options: [],

    orderedOptionList: _ember['default'].computed('options', 'options.@each.sortOrder', function () {
      return this.get('options').sortBy('sortOrder');
    }),

    actions: {
      reorderList: function reorderList(list) {
        var order = 1;
        list.forEach(function (option) {
          option.set('sortOrder', order);
          order++;
        });
      },

      createOption: function createOption() {
        this.sendAction('onOptionAddition');
      },
      removeOption: function removeOption(option) {
        this.sendAction('onOptionRemoval', option);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout layout--flush");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout__item u-11/20");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ko-admin_case-fields_edit_options__actions");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout__item u-9/20");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element1, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element1, 5, 5);
          morphs[3] = dom.createMorphAt(element2, 1, 1);
          morphs[4] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "input-text", "value", ["subexpr", "@mut", [["get", "option.value", ["loc", [null, [9, 51], [9, 63]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.casefields.type.checkbox.field_options.title"], [], ["loc", [null, [9, 76], [9, 132]]]]], ["loc", [null, [9, 6], [9, 134]]]], ["inline", "ko-admin/inline-locale-edit", [], ["localeFields", ["subexpr", "@mut", [["get", "option.values", ["loc", [null, [11, 51], [11, 64]]]]], [], []], "field", "label"], ["loc", [null, [11, 8], [11, 80]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "option.errors.value", ["loc", [null, [13, 36], [13, 55]]]]], [], []]], ["loc", [null, [13, 6], [13, 57]]]], ["inline", "input", [], ["type", "text", "class", "input-text", "value", ["subexpr", "@mut", [["get", "option.tag", ["loc", [null, [16, 51], [16, 61]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.casefields.type.checkbox.field_options.tag"], [], ["loc", [null, [16, 74], [16, 128]]]]], ["loc", [null, [16, 6], [16, 130]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "option.errors.tag", ["loc", [null, [17, 36], [17, 53]]]]], [], []]], ["loc", [null, [17, 6], [17, 55]]]]],
        locals: ["option"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-reorderable-crud-list", [], ["removeItemAction", "removeOption", "createItemAction", "createOption", "reorderListAction", "reorderList", "items", ["subexpr", "@mut", [["get", "orderedOptionList", ["loc", [null, [5, 8], [5, 25]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [20, 29]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/priorities/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedPriority: null,
    sorter: _ember['default'].inject.service('sorter'),
    intl: _ember['default'].inject.service('intl'),

    priorities: _ember['default'].computed('caseField.priorities.@each.level', function () {
      return this.get('caseField.priorities').sortBy('level');
    }),

    actions: {
      reorderList: function reorderList(casePriorities) {
        this.get('sorter').sort(casePriorities);
      },

      createPriority: function createPriority() {
        if (this.get('editedPriority.isNew')) {
          return;
        }

        this.send('cancelEditing');

        var priority = this.get('caseField.priorities').createRecord({
          level: this.get('caseField.priorities.length') + 1
        });

        this.set('editedPriority', priority);
      },

      removePriority: function removePriority(priority, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          priority.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedPriority').save().then(function () {
          _this.set('editedPriority', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedPriority')) {
          return;
        }

        if (this.get('editedPriority.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedPriority.isNew')) {
              this.get('editedPriority').destroyRecord();
            } else {
              this.get('editedPriority').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedPriority', null);
      },

      startEditing: function startEditing(priority) {
        this.send('cancelEditing');
        this.set('editedPriority', priority);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/priorities/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.label.priorities"], [], ["loc", [null, [5, 4], [5, 50]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-2/3 t-right");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "type", "button");
                dom.setAttribute(el3, "class", "button t-small qa-custom-priority-cancel");
                dom.setAttribute(el3, "name", "cancel");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "type", "button");
                dom.setAttribute(el3, "class", "button button--primary qa-custom-priority-save");
                dom.setAttribute(el3, "name", "submit");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(element4, [3]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
                morphs[1] = dom.createAttrMorph(element6, 'onclick');
                morphs[2] = dom.createMorphAt(element6, 0, 0);
                morphs[3] = dom.createAttrMorph(element7, 'onclick');
                morphs[4] = dom.createMorphAt(element7, 0, 0);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-priority-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "priority.label", ["loc", [null, [16, 109], [16, 123]]]]], [], []]], ["loc", [null, [16, 12], [16, 125]]]], ["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [19, 105], [19, 131]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [19, 132], [19, 154]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [20, 111], [20, 134]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [20, 135], [20, 155]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold qa-custom-priority-label");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-2/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "class", "qa-custom-priority-edit");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              | ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "class", "qa-custom-priority-delete");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3, 1]);
                var element2 = dom.childAt(element1, [1]);
                var element3 = dom.childAt(element1, [3]);
                var morphs = new Array(6);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                morphs[2] = dom.createAttrMorph(element2, 'onclick');
                morphs[3] = dom.createMorphAt(element2, 0, 0);
                morphs[4] = dom.createAttrMorph(element3, 'onclick');
                morphs[5] = dom.createMorphAt(element3, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["startEditing", ["get", "priority", ["loc", [null, [24, 67], [24, 75]]]]], [], ["loc", [null, [24, 43], [24, 77]]]], ["content", "priority.label", ["loc", [null, [26, 58], [26, 76]]]], ["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "priority", ["loc", [null, [30, 49], [30, 57]]]]], [], ["loc", [null, [30, 25], [30, 59]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [30, 92], [30, 112]]]], ["attribute", "onclick", ["subexpr", "action", ["removePriority", ["get", "priority", ["loc", [null, [31, 53], [31, 61]]]]], [], ["loc", [null, [31, 27], [31, 63]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [31, 98], [31, 120]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "priority", ["loc", [null, [13, 16], [13, 24]]]], ["get", "editedPriority", ["loc", [null, [13, 25], [13, 39]]]]], [], ["loc", [null, [13, 12], [13, 40]]]]], [], 0, 1, ["loc", [null, [13, 6], [35, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["class", "u-pointer"], 0, null, ["loc", [null, [12, 4], [36, 27]]]]],
          locals: ["priority"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "priorities__add-priority-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element8 = dom.childAt(fragment, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createAttrMorph(element8, 'onclick');
          morphs[4] = dom.createMorphAt(element8, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.priorities"], [], ["loc", [null, [2, 46], [2, 94]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderList", "items", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [10, 10], [10, 20]]]]], [], []]], 1, null, ["loc", [null, [8, 2], [37, 26]]]], ["attribute", "onclick", ["subexpr", "action", ["createPriority"], [], ["loc", [null, [39, 110], [39, 137]]]]], ["inline", "t", ["admin.casefields.edit.add_new_priority"], [], ["loc", [null, [40, 4], [40, 50]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [42, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/regex/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    caseField: null
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/regex/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 4,
                  "column": 62
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["admin.casefields.help.regex"], [], ["loc", [null, [4, 27], [4, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["class", "input input-text", "name", "regex", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.regularExpression", ["loc", [null, [3, 68], [3, 95]]]]], [], []]], ["loc", [null, [3, 4], [3, 97]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 4], [4, 85]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [2, 2], [5, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.regex"], [], ["loc", [null, [1, 31], [1, 72]]]]], 0, null, ["loc", [null, [1, 0], [6, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/statuses/component', ['exports', 'ember'], function (exports, _ember) {

  var OPEN_STATUS_TYPES = ['NEW', 'OPEN', 'PENDING'];
  var CLOSED_STATUS_TYPES = ['CLOSED', 'COMPLETED'];

  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedStatus: null,
    sorter: _ember['default'].inject.service('sorter'),
    intl: _ember['default'].inject.service('intl'),

    openStatuses: _ember['default'].computed('caseField.statuses.[]', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    closedStatuses: _ember['default'].computed('caseField.statuses.[]', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    customStatuses: _ember['default'].computed('caseField.statuses.@each.sortOrder', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) === -1 && CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) === -1;
      }).sortBy('sortOrder');
    }),

    actions: {
      reorderList: function reorderList(caseStatuses) {
        this.get('sorter').sort(caseStatuses);
      },

      createStatus: function createStatus() {
        if (this.get('editedStatus.isNew')) {
          return;
        }

        this.send('cancelEditing');
        var status = this.get('caseField.statuses').createRecord({
          statusType: 'CUSTOM',
          sortOrder: this.get('customStatuses.lastObject.sortOrder') + 1
        });
        this.set('editedStatus', status);
      },

      removeStatus: function removeStatus(status, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          status.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedStatus').save().then(function () {
          _this.set('editedStatus', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedStatus')) {
          return;
        }

        if (this.get('editedStatus.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedStatus.isNew')) {
              this.get('editedStatus').destroyRecord();
            } else {
              this.get('editedStatus').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedStatus', null);
      },

      startEditing: function startEditing(status) {
        this.send('cancelEditing');
        this.set('editedStatus', status);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/statuses/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.statuses.1"], [], ["loc", [null, [5, 4], [5, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.statuses.2"], [], ["loc", [null, [9, 4], [9, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 22,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout layout--middle");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-bold");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-caption");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n     ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-2/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-caption");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var element9 = dom.childAt(element8, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element9, [3]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]), 0, 0);
              return morphs;
            },
            statements: [["content", "status.label", ["loc", [null, [16, 31], [16, 47]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [16, 79], [16, 115]]]], ["inline", "if", [["get", "status.isSlaActive", ["loc", [null, [19, 39], [19, 57]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [19, 58], [19, 114]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [19, 115], [19, 173]]]]], [], ["loc", [null, [19, 34], [19, 175]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["content", ["subexpr", "@mut", [["get", "status", ["loc", [null, [13, 34], [13, 40]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [13, 4], [22, 27]]]]],
          locals: ["status"],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 8
                    },
                    "end": {
                      "line": 48,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout layout--middle");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "statuses__is-sla-active");
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3 t-right");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "type", "button");
                  dom.setAttribute(el3, "class", "button t-small qa-custom-status-cancel");
                  dom.setAttribute(el3, "name", "cancel");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("button");
                  dom.setAttribute(el3, "type", "button");
                  dom.setAttribute(el3, "class", "button button--primary qa-custom-status-save");
                  dom.setAttribute(el3, "name", "submit");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var element5 = dom.childAt(element4, [5]);
                  var element6 = dom.childAt(element5, [1]);
                  var element7 = dom.childAt(element5, [3]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(dom.childAt(element4, [3, 1]), 1, 1);
                  morphs[2] = dom.createAttrMorph(element6, 'onclick');
                  morphs[3] = dom.createMorphAt(element6, 0, 0);
                  morphs[4] = dom.createAttrMorph(element7, 'onclick');
                  morphs[5] = dom.createMorphAt(element7, 0, 0);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-status-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "status.label", ["loc", [null, [33, 109], [33, 121]]]]], [], []]], ["loc", [null, [33, 14], [33, 123]]]], ["inline", "ko-toggle", [], ["class", "qa-custom-status-sla-toggle", "activated", ["subexpr", "@mut", [["get", "status.isSlaActive", ["loc", [null, [39, 28], [39, 46]]]]], [], []], "label", ["subexpr", "if", [["get", "status.isSlaActive", ["loc", [null, [40, 28], [40, 46]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [40, 47], [40, 103]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [40, 104], [40, 162]]]]], [], ["loc", [null, [40, 24], [40, 163]]]]], ["loc", [null, [37, 16], [40, 165]]]], ["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [44, 105], [44, 131]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [44, 132], [44, 154]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [45, 111], [45, 134]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [45, 135], [45, 155]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 48,
                      "column": 8
                    },
                    "end": {
                      "line": 65,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout layout--middle");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-bold qa-custom-status-label");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption qa-custom-status-sla-active");
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4, "class", "qa-custom-status-edit");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                | ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4, "class", "qa-custom-status-delete");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [5, 1]);
                  var element2 = dom.childAt(element1, [1]);
                  var element3 = dom.childAt(element1, [3]);
                  var morphs = new Array(7);
                  morphs[0] = dom.createElementMorph(element0);
                  morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[2] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
                  morphs[3] = dom.createAttrMorph(element2, 'onclick');
                  morphs[4] = dom.createMorphAt(element2, 0, 0);
                  morphs[5] = dom.createAttrMorph(element3, 'onclick');
                  morphs[6] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["element", "action", ["startEditing", ["get", "status", ["loc", [null, [49, 69], [49, 75]]]]], [], ["loc", [null, [49, 45], [49, 77]]]], ["content", "status.label", ["loc", [null, [51, 58], [51, 74]]]], ["inline", "if", [["get", "status.isSlaActive", ["loc", [null, [55, 23], [55, 41]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [55, 42], [55, 98]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [55, 99], [55, 157]]]]], [], ["loc", [null, [55, 18], [55, 159]]]], ["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "status", ["loc", [null, [60, 51], [60, 57]]]]], [], ["loc", [null, [60, 27], [60, 59]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [60, 90], [60, 110]]]], ["attribute", "onclick", ["subexpr", "action", ["removeStatus", ["get", "status", ["loc", [null, [61, 53], [61, 59]]]]], [], ["loc", [null, [61, 29], [61, 61]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [61, 94], [61, 116]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 6
                  },
                  "end": {
                    "line": 66,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "status", ["loc", [null, [30, 18], [30, 24]]]], ["get", "editedStatus", ["loc", [null, [30, 25], [30, 37]]]]], [], ["loc", [null, [30, 14], [30, 38]]]]], [], 0, 1, ["loc", [null, [30, 8], [65, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 67,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["class", "u-pointer"], 0, null, ["loc", [null, [29, 6], [66, 29]]]]],
            locals: ["status"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderList", "items", ["subexpr", "@mut", [["get", "customStatuses", ["loc", [null, [28, 12], [28, 26]]]]], [], []]], 0, null, ["loc", [null, [26, 4], [67, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 73,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-bold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "status.label", ["loc", [null, [72, 27], [72, 43]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [72, 75], [72, 111]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 70,
                "column": 2
              },
              "end": {
                "line": 74,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["content", ["subexpr", "@mut", [["get", "status", ["loc", [null, [71, 34], [71, 40]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [71, 4], [73, 27]]]]],
          locals: ["status"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 79,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "statuses__add-status-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [13]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createAttrMorph(element10, 'onclick');
          morphs[7] = dom.createMorphAt(element10, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.statuses"], [], ["loc", [null, [2, 46], [2, 92]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [8, 2], [10, 25]]]], ["block", "each", [["get", "openStatuses", ["loc", [null, [12, 10], [12, 22]]]]], [], 2, null, ["loc", [null, [12, 2], [23, 11]]]], ["block", "if", [["get", "customStatuses.length", ["loc", [null, [25, 8], [25, 29]]]]], [], 3, null, ["loc", [null, [25, 2], [68, 9]]]], ["block", "each", [["get", "closedStatuses", ["loc", [null, [70, 10], [70, 24]]]]], [], 4, null, ["loc", [null, [70, 2], [74, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["createStatus"], [], ["loc", [null, [76, 106], [76, 131]]]]], ["inline", "t", ["admin.casefields.edit.add_new_status"], [], ["loc", [null, [77, 4], [77, 48]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [79, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-admin/case-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 8
                    },
                    "end": {
                      "line": 15,
                      "column": 79
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.label.field_title"], [], ["loc", [null, [15, 32], [15, 79]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 77
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.help.field_title"], [], ["loc", [null, [18, 31], [18, 77]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [15, 8], [15, 103]]]], ["inline", "input", [], ["type", "text", "class", "input-text u-1/1", "name", "title", "value", ["subexpr", "@mut", [["get", "caseField.title", ["loc", [null, [16, 72], [16, 87]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [16, 112], [16, 126]]]], ["get", "isTitleEditable", ["loc", [null, [16, 127], [16, 142]]]]], [], ["loc", [null, [16, 101], [16, 143]]]], ["get", "isSubmitting", ["loc", [null, [16, 144], [16, 156]]]]], [], ["loc", [null, [16, 97], [16, 157]]]]], ["loc", [null, [16, 8], [16, 159]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.title", ["loc", [null, [17, 38], [17, 60]]]]], [], []]], ["loc", [null, [17, 8], [17, 62]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [18, 8], [18, 100]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 23,
                        "column": 10
                      },
                      "end": {
                        "line": 23,
                        "column": 92
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.label.is_required_for_agents"], [], ["loc", [null, [23, 34], [23, 92]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 25,
                        "column": 10
                      },
                      "end": {
                        "line": 32,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_agents_when_updating_case"], [], ["loc", [null, [27, 20], [27, 95]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredForAgents", ["loc", [null, [28, 22], [28, 51]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [29, 38], [29, 52]]]], ["get", "isRequiredWhenCreatingEditable", ["loc", [null, [29, 53], [29, 83]]]]], [], ["loc", [null, [29, 27], [29, 84]]]], ["get", "isSubmitting", ["loc", [null, [29, 85], [29, 97]]]]], [], ["loc", [null, [29, 23], [29, 98]]]]], ["loc", [null, [26, 12], [30, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredForAgents", ["loc", [null, [31, 42], [31, 78]]]]], [], []]], ["loc", [null, [31, 12], [31, 80]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 34,
                        "column": 10
                      },
                      "end": {
                        "line": 41,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_agents_when_resolving_case"], [], ["loc", [null, [36, 20], [36, 96]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredOnResolution", ["loc", [null, [37, 22], [37, 54]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [38, 38], [38, 52]]]], ["get", "isRequiredWhenCreatingEditable", ["loc", [null, [38, 53], [38, 83]]]]], [], ["loc", [null, [38, 27], [38, 84]]]], ["get", "isSubmitting", ["loc", [null, [38, 85], [38, 97]]]]], [], ["loc", [null, [38, 23], [38, 98]]]]], ["loc", [null, [35, 12], [39, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredOnResolution", ["loc", [null, [40, 42], [40, 81]]]]], [], []]], ["loc", [null, [40, 12], [40, 83]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 42,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [23, 10], [23, 116]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [25, 10], [32, 28]]]], ["block", "ko-form/field", [], ["nogap", true], 2, null, ["loc", [null, [34, 10], [41, 28]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [22, 23], [22, 42]]]], "STATUS"], [], ["loc", [null, [22, 19], [22, 52]]]]], [], ["loc", [null, [22, 14], [22, 53]]]]], [], 0, null, ["loc", [null, [22, 8], [42, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [14, 6], [19, 24]]]], ["block", "if", [["get", "agentCaseSettings", ["loc", [null, [21, 12], [21, 29]]]]], [], 1, null, ["loc", [null, [21, 6], [43, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.agent_settings"], [], ["loc", [null, [13, 35], [13, 85]]]]], 0, null, ["loc", [null, [13, 4], [45, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_visible_to_customers"], [], ["loc", [null, [52, 16], [52, 73]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isVisibleToCustomers", ["loc", [null, [53, 18], [53, 48]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [54, 34], [54, 48]]]], ["get", "isCustomerVisibleEditable", ["loc", [null, [54, 49], [54, 74]]]]], [], ["loc", [null, [54, 23], [54, 75]]]], ["get", "isSubmitting", ["loc", [null, [54, 76], [54, 88]]]]], [], ["loc", [null, [54, 19], [54, 89]]]]], ["loc", [null, [51, 8], [55, 10]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isCustomerVisibleEditable", ["loc", [null, [56, 38], [56, 80]]]]], [], []]], ["loc", [null, [56, 8], [56, 82]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [50, 6], [57, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 62,
                      "column": 8
                    },
                    "end": {
                      "line": 62,
                      "column": 88
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.label.customer_field_title"], [], ["loc", [null, [62, 32], [62, 88]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 61,
                    "column": 6
                  },
                  "end": {
                    "line": 66,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [62, 8], [62, 112]]]], ["inline", "input", [], ["class", "input input-text", "name", "customerTitle", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.customerTitle", ["loc", [null, [63, 80], [63, 103]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [63, 128], [63, 142]]]], ["get", "isCustomerFieldTitleEditable", ["loc", [null, [63, 143], [63, 171]]]]], [], ["loc", [null, [63, 117], [63, 172]]]], ["get", "isSubmitting", ["loc", [null, [63, 173], [63, 185]]]]], [], ["loc", [null, [63, 113], [63, 186]]]]], ["loc", [null, [63, 8], [63, 188]]]], ["inline", "ko-admin/inline-locale-edit", [], ["localeFields", ["subexpr", "@mut", [["get", "caseField.customerTitles", ["loc", [null, [64, 51], [64, 75]]]]], [], []], "field", "title"], ["loc", [null, [64, 8], [64, 91]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.customerTitle", ["loc", [null, [65, 38], [65, 68]]]]], [], []]], ["loc", [null, [65, 8], [65, 70]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 70,
                        "column": 10
                      },
                      "end": {
                        "line": 70,
                        "column": 96
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.label.customer_field_description"], [], ["loc", [null, [70, 34], [70, 96]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 79,
                        "column": 10
                      },
                      "end": {
                        "line": 79,
                        "column": 79
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.help.field_title"], [], ["loc", [null, [79, 33], [79, 79]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 69,
                      "column": 8
                    },
                    "end": {
                      "line": 80,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "input input-text-area-wrapper");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [3]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(element1, 1, 1);
                  morphs[2] = dom.createMorphAt(element1, 3, 3);
                  morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                  return morphs;
                },
                statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [70, 10], [70, 120]]]], ["inline", "textarea", [], ["class", "input-text", "name", "description", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.description", ["loc", [null, [72, 79], [72, 100]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [72, 110], [72, 122]]]]], [], []]], ["loc", [null, [72, 12], [72, 124]]]], ["inline", "ko-admin/inline-locale-edit", [], ["localeFields", ["subexpr", "@mut", [["get", "caseField.descriptions", ["loc", [null, [74, 27], [74, 49]]]]], [], []], "field", "description", "inputType", "textArea"], ["loc", [null, [73, 12], [76, 36]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.description", ["loc", [null, [78, 40], [78, 68]]]]], [], []]], ["loc", [null, [78, 10], [78, 70]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [79, 10], [79, 102]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 68,
                    "column": 6
                  },
                  "end": {
                    "line": 81,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [69, 8], [80, 26]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 91,
                        "column": 10
                      },
                      "end": {
                        "line": 91,
                        "column": 92
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.help.is_editable_by_customers"], [], ["loc", [null, [91, 33], [91, 92]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 84,
                      "column": 8
                    },
                    "end": {
                      "line": 92,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_editable_by_customers"], [], ["loc", [null, [86, 18], [86, 76]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isCustomerEditable", ["loc", [null, [87, 20], [87, 48]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [88, 36], [88, 50]]]], ["get", "isCustomerEditableEditable", ["loc", [null, [88, 51], [88, 77]]]]], [], ["loc", [null, [88, 25], [88, 78]]]], ["get", "isSubmitting", ["loc", [null, [88, 79], [88, 91]]]]], [], ["loc", [null, [88, 21], [88, 92]]]]], ["loc", [null, [85, 10], [89, 12]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isCustomerEditable", ["loc", [null, [90, 40], [90, 75]]]]], [], []]], ["loc", [null, [90, 10], [90, 77]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [91, 10], [91, 115]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.13",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 102,
                          "column": 12
                        },
                        "end": {
                          "line": 102,
                          "column": 95
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.is_required_for_customers"], [], ["loc", [null, [102, 35], [102, 95]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 95,
                        "column": 10
                      },
                      "end": {
                        "line": 103,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_customers"], [], ["loc", [null, [97, 20], [97, 79]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredForCustomers", ["loc", [null, [98, 22], [98, 54]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [99, 38], [99, 52]]]], ["get", "isCustomerRequiredEditable", ["loc", [null, [99, 53], [99, 79]]]]], [], ["loc", [null, [99, 27], [99, 80]]]], ["get", "isSubmitting", ["loc", [null, [99, 81], [99, 93]]]]], [], ["loc", [null, [99, 23], [99, 94]]]]], ["loc", [null, [96, 12], [100, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredForCustomers", ["loc", [null, [101, 42], [101, 81]]]]], [], []]], ["loc", [null, [101, 12], [101, 83]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [102, 12], [102, 118]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 94,
                      "column": 8
                    },
                    "end": {
                      "line": 104,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [95, 10], [103, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 6
                  },
                  "end": {
                    "line": 105,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [84, 8], [92, 26]]]], ["block", "if", [["get", "caseField.isCustomerEditable", ["loc", [null, [94, 14], [94, 42]]]]], [], 1, null, ["loc", [null, [94, 8], [104, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 107,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [61, 6], [66, 24]]]], ["block", "if", [["get", "isCustomerDescriptionsVisible", ["loc", [null, [68, 12], [68, 41]]]]], [], 1, null, ["loc", [null, [68, 6], [81, 13]]]], ["block", "if", [["subexpr", "and", [["get", "isCustomerEditAvailable", ["loc", [null, [83, 17], [83, 40]]]], ["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [83, 50], [83, 69]]]], "MESSAGE"], [], ["loc", [null, [83, 46], [83, 80]]]]], [], ["loc", [null, [83, 41], [83, 81]]]]], [], ["loc", [null, [83, 12], [83, 82]]]]], [], 2, null, ["loc", [null, [83, 6], [105, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 108,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [49, 19], [49, 38]]]], "MESSAGE"], [], ["loc", [null, [49, 15], [49, 49]]]]], [], ["loc", [null, [49, 10], [49, 50]]]]], [], 0, null, ["loc", [null, [49, 4], [58, 11]]]], ["block", "if", [["get", "caseField.isVisibleToCustomers", ["loc", [null, [60, 10], [60, 40]]]]], [], 1, null, ["loc", [null, [60, 4], [107, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 2
              },
              "end": {
                "line": 112,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "getAdminComponentForFieldType", ["loc", [null, [111, 27], [111, 56]]]], ["get", "caseField.fieldType", ["loc", [null, [111, 57], [111, 76]]]]], [], ["loc", [null, [111, 16], [111, 77]]]]], ["caseField", ["subexpr", "@mut", [["get", "caseField", ["loc", [null, [111, 88], [111, 97]]]]], [], []], "options", ["subexpr", "@mut", [["get", "caseField.options", ["loc", [null, [111, 106], [111, 123]]]]], [], []], "onOptionAddition", ["subexpr", "@mut", [["get", "onOptionAddition", ["loc", [null, [111, 141], [111, 157]]]]], [], []], "onOptionRemoval", ["subexpr", "@mut", [["get", "onOptionRemoval", ["loc", [null, [111, 174], [111, 189]]]]], [], []]], ["loc", [null, [111, 4], [111, 191]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 116,
                    "column": 6
                  },
                  "end": {
                    "line": 116,
                    "column": 78
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.casefields.edit.label.field_options"], [], ["loc", [null, [116, 29], [116, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 118,
                    "column": 6
                  },
                  "end": {
                    "line": 120,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-admin/case-fields/edit/options", [], ["options", ["subexpr", "@mut", [["get", "optionsList", ["loc", [null, [119, 52], [119, 63]]]]], [], []], "onOptionAddition", ["subexpr", "@mut", [["get", "onOptionAddition", ["loc", [null, [119, 81], [119, 97]]]]], [], []], "onOptionRemoval", ["subexpr", "@mut", [["get", "onOptionRemoval", ["loc", [null, [119, 114], [119, 129]]]]], [], []]], ["loc", [null, [119, 8], [119, 131]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 120,
                    "column": 6
                  },
                  "end": {
                    "line": 124,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "class", "u-pointer");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["get", "onOptionAddition", ["loc", [null, [121, 21], [121, 37]]]]], ["inline", "t", ["admin.fields.type.field_options.add_option"], [], ["loc", [null, [122, 10], [122, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 115,
                  "column": 4
                },
                "end": {
                  "line": 125,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [116, 6], [116, 101]]]], ["block", "if", [["get", "optionsList", ["loc", [null, [118, 12], [118, 23]]]]], [], 1, 2, ["loc", [null, [118, 6], [124, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 114,
                "column": 2
              },
              "end": {
                "line": 126,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.field_options"], [], ["loc", [null, [115, 35], [115, 84]]]]], 0, null, ["loc", [null, [115, 4], [125, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.13",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 140,
                          "column": 12
                        },
                        "end": {
                          "line": 140,
                          "column": 80
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.is_enabled"], [], ["loc", [null, [140, 35], [140, 80]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 134,
                        "column": 10
                      },
                      "end": {
                        "line": 141,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "caseField.isEnabled", ["loc", [null, [136, 24], [136, 43]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "caseField.isEnabled", ["loc", [null, [137, 27], [137, 46]]]], "admin.casefields.edit.description_on.is_enabled", "admin.casefields.edit.description_off.is_enabled"], [], ["loc", [null, [137, 23], [137, 148]]]]], [], ["loc", [null, [137, 20], [137, 149]]]]], ["loc", [null, [135, 12], [138, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isEnabled", ["loc", [null, [139, 42], [139, 68]]]]], [], []]], ["loc", [null, [139, 12], [139, 70]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [140, 12], [140, 103]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 133,
                      "column": 8
                    },
                    "end": {
                      "line": 142,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [134, 10], [141, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.13",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 148,
                          "column": 12
                        },
                        "end": {
                          "line": 148,
                          "column": 79
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.label.api_key"], [], ["loc", [null, [148, 36], [148, 79]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@1.13.13",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 155,
                          "column": 12
                        },
                        "end": {
                          "line": 155,
                          "column": 77
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.api_key"], [], ["loc", [null, [155, 35], [155, 77]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 147,
                        "column": 10
                      },
                      "end": {
                        "line": 156,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(4);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                    return morphs;
                  },
                  statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [148, 12], [148, 103]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input-text", ["subexpr", "qa-cls", [" qa-admin_case-fields_edit__api-key"], [], ["loc", [null, [150, 41], [150, 87]]]]], [], ["loc", [null, [150, 20], [150, 88]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.key", ["loc", [null, [152, 20], [152, 33]]]]], [], []], "disabled", true], ["loc", [null, [149, 12], [153, 29]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.key", ["loc", [null, [154, 42], [154, 62]]]]], [], []]], ["loc", [null, [154, 12], [154, 64]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [155, 12], [155, 100]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 144,
                      "column": 8
                    },
                    "end": {
                      "line": 157,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [147, 10], [156, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 131,
                    "column": 6
                  },
                  "end": {
                    "line": 159,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["block", "if", [["get", "isStatusKeyAvailable", ["loc", [null, [133, 14], [133, 34]]]]], [], 0, null, ["loc", [null, [133, 8], [142, 15]]]], ["block", "if", [["subexpr", "not", [["get", "isApiFieldKeyAvailable", ["loc", [null, [144, 19], [144, 41]]]]], [], ["loc", [null, [144, 14], [144, 42]]]]], [], 1, null, ["loc", [null, [144, 8], [157, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 130,
                  "column": 4
                },
                "end": {
                  "line": 160,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.field_settings"], [], ["loc", [null, [131, 37], [131, 87]]]]], 0, null, ["loc", [null, [131, 6], [159, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 129,
                "column": 2
              },
              "end": {
                "line": 161,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStatusOrApiFieldAvailable", ["loc", [null, [130, 10], [130, 37]]]]], [], 0, null, ["loc", [null, [130, 4], [160, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 164,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 17], [8, 35]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [9, 15], [9, 23]]]]], [], []]], ["loc", [null, [6, 2], [10, 4]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [12, 17], [12, 36]]]], "MESSAGE"], [], ["loc", [null, [12, 13], [12, 47]]]]], [], ["loc", [null, [12, 8], [12, 48]]]]], [], 0, null, ["loc", [null, [12, 2], [46, 9]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.customer_settings"], [], ["loc", [null, [48, 33], [48, 86]]]]], 1, null, ["loc", [null, [48, 2], [108, 27]]]], ["block", "if", [["subexpr", "ko-helper", [["get", "getAdminComponentForFieldType", ["loc", [null, [110, 19], [110, 48]]]], ["get", "caseField.fieldType", ["loc", [null, [110, 49], [110, 68]]]]], [], ["loc", [null, [110, 8], [110, 69]]]]], [], 2, null, ["loc", [null, [110, 2], [112, 9]]]], ["block", "if", [["get", "caseField.isChoiceField", ["loc", [null, [114, 8], [114, 31]]]]], [], 3, null, ["loc", [null, [114, 2], [126, 9]]]], ["block", "if", [["subexpr", "not", [["get", "caseField.isSystem", ["loc", [null, [129, 13], [129, 31]]]]], [], ["loc", [null, [129, 8], [129, 32]]]]], [], 4, null, ["loc", [null, [129, 2], [161, 9]]]], ["inline", "ko-admin/page-footer", [], ["buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [163, 36], [163, 54]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [163, 64], [163, 72]]]]], [], []]], ["loc", [null, [163, 2], [163, 74]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 165,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [2, 11], [2, 17]]]]], [], []], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [164, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/types/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedType: null,

    intl: _ember['default'].inject.service('intl'),

    systemTypes: _ember['default'].computed('caseField.types.[]', function () {
      return this.get('caseField.types').rejectBy('type', 'CUSTOM');
    }),

    customTypes: _ember['default'].computed('caseField.types.[]', function () {
      return this.get('caseField.types').filterBy('type', 'CUSTOM');
    }),

    actions: {
      createType: function createType() {
        if (this.get('editedType.isNew')) {
          return;
        }

        this.send('cancelEditing');
        var type = this.get('caseField.types').createRecord({ type: 'CUSTOM' });
        this.set('editedType', type);
      },

      removeType: function removeType(type, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          type.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedType').save().then(function () {
          _this.set('editedType', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedType')) {
          return;
        }

        if (this.get('editedType.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedType.isNew')) {
              this.get('editedType').destroyRecord();
            } else {
              this.get('editedType').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedType', null);
      },

      startEditing: function startEditing(type) {
        this.send('cancelEditing');
        this.set('editedType', type);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/types/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.types"], [], ["loc", [null, [5, 4], [5, 44]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout layout--middle");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-bold");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-caption");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element8, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "type.label", ["loc", [null, [12, 31], [12, 45]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [12, 77], [12, 113]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["content", ["subexpr", "@mut", [["get", "type", ["loc", [null, [9, 34], [9, 38]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [9, 4], [15, 27]]]]],
          locals: ["type"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-2/3 t-right");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "type", "button");
                dom.setAttribute(el3, "class", "button t-small qa-custom-type-cancel");
                dom.setAttribute(el3, "name", "cancel");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("button");
                dom.setAttribute(el3, "type", "button");
                dom.setAttribute(el3, "class", "button button--primary qa-custom-type-save");
                dom.setAttribute(el3, "name", "submit");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(element4, [3]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
                morphs[1] = dom.createAttrMorph(element6, 'onclick');
                morphs[2] = dom.createMorphAt(element6, 0, 0);
                morphs[3] = dom.createAttrMorph(element7, 'onclick');
                morphs[4] = dom.createMorphAt(element7, 0, 0);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-type-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "type.label", ["loc", [null, [23, 105], [23, 115]]]]], [], []]], ["loc", [null, [23, 12], [23, 117]]]], ["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [26, 101], [26, 127]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [26, 128], [26, 150]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [27, 107], [27, 130]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [27, 131], [27, 151]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 42,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold qa-custom-type-label");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-2/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "class", "qa-custom-type-edit");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n              | ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4, "class", "qa-custom-type-delete");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3, 1]);
                var element2 = dom.childAt(element1, [1]);
                var element3 = dom.childAt(element1, [3]);
                var morphs = new Array(6);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                morphs[2] = dom.createAttrMorph(element2, 'onclick');
                morphs[3] = dom.createMorphAt(element2, 0, 0);
                morphs[4] = dom.createAttrMorph(element3, 'onclick');
                morphs[5] = dom.createMorphAt(element3, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["startEditing", ["get", "type", ["loc", [null, [31, 67], [31, 71]]]]], [], ["loc", [null, [31, 43], [31, 73]]]], ["content", "type.label", ["loc", [null, [33, 54], [33, 68]]]], ["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "type", ["loc", [null, [37, 49], [37, 53]]]]], [], ["loc", [null, [37, 25], [37, 55]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [37, 84], [37, 104]]]], ["attribute", "onclick", ["subexpr", "action", ["removeType", ["get", "type", ["loc", [null, [38, 49], [38, 53]]]]], [], ["loc", [null, [38, 27], [38, 55]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [38, 86], [38, 108]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "type", ["loc", [null, [20, 16], [20, 20]]]], ["get", "editedType", ["loc", [null, [20, 21], [20, 31]]]]], [], ["loc", [null, [20, 12], [20, 32]]]]], [], 0, 1, ["loc", [null, [20, 6], [42, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 44,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["class", "u-pointer"], 0, null, ["loc", [null, [19, 4], [43, 27]]]]],
          locals: ["type"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "types__add-type-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [9]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createAttrMorph(element9, 'onclick');
          morphs[5] = dom.createMorphAt(element9, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.types"], [], ["loc", [null, [2, 46], [2, 89]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "each", [["get", "systemTypes", ["loc", [null, [8, 10], [8, 21]]]]], [], 1, null, ["loc", [null, [8, 2], [16, 11]]]], ["block", "each", [["get", "customTypes", ["loc", [null, [18, 10], [18, 21]]]]], [], 2, null, ["loc", [null, [18, 2], [44, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["createType"], [], ["loc", [null, [46, 101], [46, 124]]]]], ["inline", "t", ["admin.casefields.edit.add_new_type"], [], ["loc", [null, [47, 4], [47, 46]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [49, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/index/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    model: null,

    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),

    systemfields: _ember['default'].computed('model.@each.isSystem', function () {
      return this.get('model').filter(function (field) {
        return field.get('isSystem');
      });
    }),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      toggleEnabledStatus: function toggleEnabledStatus(casefield, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(casefield).then(function () {
          var notificationMessage = undefined;
          if (casefield.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.casefields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.casefields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin Case Fields State Changed',
          category: 'Admin Case Fields',
          action: casefield.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
        return false;
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin Case Field Remove',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.casefields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.container.lookup('router:main').transitionTo('session.admin.manage.case-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin Case Field Reorder',
          category: 'Admin Case Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 28,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-caption");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "flag flag--small");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__img");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__body");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5, "class", "t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element14 = dom.childAt(fragment, [1]);
                var element15 = dom.childAt(element14, [1]);
                var element16 = dom.childAt(element14, [3, 1]);
                var element17 = dom.childAt(element16, [1, 1]);
                var element18 = dom.childAt(element14, [5, 1, 1]);
                var morphs = new Array(6);
                morphs[0] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element15, [3]), 0, 0);
                morphs[2] = dom.createAttrMorph(element17, 'class');
                morphs[3] = dom.createMorphAt(dom.childAt(element16, [3, 1]), 0, 0);
                morphs[4] = dom.createAttrMorph(element18, 'onclick');
                morphs[5] = dom.createMorphAt(element18, 0, 0);
                return morphs;
              },
              statements: [["content", "systemfield.title", ["loc", [null, [10, 41], [10, 62]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [10, 94], [10, 130]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [15, 93], [15, 125]]]], ["get", "systemfield.fieldType", ["loc", [null, [15, 126], [15, 147]]]]], [], ["loc", [null, [15, 81], [15, 149]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [18, 64], [18, 100]]]], ["get", "systemfield.fieldType", ["loc", [null, [18, 101], [18, 122]]]]], [], ["loc", [null, [18, 53], [18, 123]]]]], [], ["loc", [null, [18, 49], [18, 125]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "systemfield", ["loc", [null, [24, 52], [24, 63]]]]], [], ["loc", [null, [24, 31], [24, 65]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [24, 66], [24, 86]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "systemfield", ["loc", [null, [7, 57], [7, 68]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [7, 8], [28, 31]]]]],
            locals: ["systemfield"],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 8
                  },
                  "end": {
                    "line": 55,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout layout--middle");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold qa-custom-case-field-label");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "flag flag--small");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__img");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__body");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5, "class", "t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]), 0, 0);
                morphs[3] = dom.createAttrMorph(element11, 'onclick');
                morphs[4] = dom.createMorphAt(element11, 0, 0);
                morphs[5] = dom.createAttrMorph(element12, 'onclick');
                morphs[6] = dom.createMorphAt(element12, 0, 0);
                morphs[7] = dom.createAttrMorph(element13, 'onclick');
                morphs[8] = dom.createMorphAt(element13, 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [35, 68], [35, 89]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [40, 93], [40, 125]]]], ["get", "customfield.fieldType", ["loc", [null, [40, 126], [40, 147]]]]], [], ["loc", [null, [40, 81], [40, 149]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [43, 64], [43, 100]]]], ["get", "customfield.fieldType", ["loc", [null, [43, 101], [43, 122]]]]], [], ["loc", [null, [43, 53], [43, 123]]]]], [], ["loc", [null, [43, 49], [43, 125]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [49, 52], [49, 63]]]]], [], ["loc", [null, [49, 31], [49, 65]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [49, 66], [49, 86]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [50, 62], [50, 73]]]]], [], ["loc", [null, [50, 31], [50, 75]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [50, 76], [50, 99]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [51, 65], [51, 76]]]]], [], ["loc", [null, [51, 31], [51, 78]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [51, 79], [51, 101]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "customfield", ["loc", [null, [32, 57], [32, 68]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [32, 8], [55, 31]]]]],
            locals: ["customfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 57,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [4, 8], [4, 31]]]], ["block", "each", [["get", "systemfields", ["loc", [null, [6, 14], [6, 26]]]]], [], 0, null, ["loc", [null, [6, 6], [29, 15]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderCustomFields", "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [31, 77], [31, 89]]]]], [], []]], 1, null, ["loc", [null, [31, 6], [56, 30]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 65,
                      "column": 10
                    },
                    "end": {
                      "line": 88,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "flag flag--small");
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__img");
                  var el5 = dom.createTextNode("\n                          ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__body");
                  var el5 = dom.createTextNode("\n                          ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5, "class", "u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
                  morphs[3] = dom.createAttrMorph(element4, 'onclick');
                  morphs[4] = dom.createMorphAt(element4, 0, 0);
                  morphs[5] = dom.createAttrMorph(element5, 'onclick');
                  morphs[6] = dom.createMorphAt(element5, 0, 0);
                  morphs[7] = dom.createAttrMorph(element6, 'onclick');
                  morphs[8] = dom.createMorphAt(element6, 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [68, 53], [68, 76]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [73, 95], [73, 127]]]], ["get", "disabledfield.fieldType", ["loc", [null, [73, 128], [73, 151]]]]], [], ["loc", [null, [73, 83], [73, 153]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [76, 69], [76, 105]]]], ["get", "disabledfield.fieldType", ["loc", [null, [76, 106], [76, 129]]]]], [], ["loc", [null, [76, 58], [76, 130]]]]], [], ["loc", [null, [76, 54], [76, 132]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [82, 54], [82, 67]]]]], [], ["loc", [null, [82, 33], [82, 69]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [82, 70], [82, 90]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [83, 64], [83, 77]]]]], [], ["loc", [null, [83, 33], [83, 79]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [83, 80], [83, 102]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [84, 67], [84, 80]]]]], [], ["loc", [null, [84, 33], [84, 82]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [84, 83], [84, 105]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 64,
                    "column": 8
                  },
                  "end": {
                    "line": 89,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "disabledfield", ["loc", [null, [65, 59], [65, 72]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [65, 10], [88, 33]]]]],
              locals: ["disabledfield"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [62, 10], [62, 34]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [64, 16], [64, 30]]]]], [], 0, null, ["loc", [null, [64, 8], [89, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 2
              },
              "end": {
                "line": 91,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [60, 4], [90, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 92,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [2, 2], [57, 21]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [59, 8], [59, 29]]]]], [], 1, null, ["loc", [null, [59, 2], [91, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [1, 0], [92, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/select-type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    customFieldsTypes: _ember['default'].inject.service('custom-fields/types'),

    availableTypes: _ember['default'].computed.alias('customFieldsTypes.availableTypes'),

    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.attrs.onFieldTypeSelect(caseFieldType);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_case-fields_select-type");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "flag flag--small");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "flag__img");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "flag__body");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "t-bold u-mb--");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          dom.setAttribute(el4, "class", "t-caption");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-admin_case-fields_select-type__action");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "i-chevron-large-right i-color-grey");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1, 1]);
          var element3 = dom.childAt(element1, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["setCaseFieldType", ["get", "availableType.name", ["loc", [null, [2, 84], [2, 102]]]]], [], ["loc", [null, [2, 56], [2, 104]]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["get", "availableType.name", ["loc", [null, [5, 67], [5, 85]]]]]]], ["inline", "t", [["get", "availableType.nameIntlKey", ["loc", [null, [8, 37], [8, 62]]]]], [], ["loc", [null, [8, 33], [8, 64]]]], ["inline", "t", [["get", "availableType.descriptionIntlKey", ["loc", [null, [9, 33], [9, 65]]]]], [], ["loc", [null, [9, 29], [9, 67]]]]],
        locals: ["availableType"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "availableTypes", ["loc", [null, [1, 8], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [16, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/type-icon/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    fieldType: null,

    iconClass: _ember['default'].computed.readOnly('fieldType'),
    classNameBindings: [':ko-admin_case-fields_type-icon', 'iconClass']
  });
});
define("frontend-cp/components/ko-admin/case-fields/type-icon/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/type-icon/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-admin/case-forms/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    caseForm: null,
    title: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},

    fields: null,

    initFields: _ember['default'].on('init', function () {
      this.set('fields', _ember['default'].Object.create({
        case_field_ids: {}
      }));
    }),

    actions: {
      addCaseFieldToForm: function addCaseFieldToForm(caseField) {
        this.get('caseForm.fields').pushObject(caseField);
      },

      removeCaseFieldFromForm: function removeCaseFieldFromForm(caseField) {
        this.get('caseForm.fields').removeObject(caseField);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('caseForm').save().then(function () {
          _this.get('caseForm').cacheRelationships();
        });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/components/ko-admin/case-forms/edit/fields/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    caseFields: [],
    onCaseFieldAddition: function onCaseFieldAddition() {},
    onCaseFieldRemoval: function onCaseFieldRemoval() {},

    store: _ember['default'].inject.service(),
    availableCaseFields: [],

    initAvailableCaseFields: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-field').then(function (caseFields) {
        _this.set('availableCaseFields', caseFields);
      });
    }),

    systemCaseFields: _ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return caseField.get('isSystem');
      });
    }),

    customCaseFields: _ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return !caseField.get('isSystem');
      });
    }),

    unusedCaseFields: _ember['default'].computed('customCaseFields', 'availableCaseFields', function () {
      var usedCustomFields = this.get('customCaseFields');

      var availableCustomFields = this.get('availableCaseFields').filter(function (field) {
        return !field.get('isSystem');
      });

      return availableCustomFields.filter(function (customField) {
        return usedCustomFields.indexOf(customField) === -1;
      });
    }),

    actions: {
      reorderFields: function reorderFields(reorderedFields) {
        var sortOrder = this.get('systemCaseFields.length') - 1;

        reorderedFields.forEach(function (reorderedField) {
          reorderedField.set('sortOrder', sortOrder);
          sortOrder++;
        });
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-forms/edit/fields/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "t-bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
            morphs[1] = dom.createMorphAt(element3, 2, 2);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [5, 53], [5, 68]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [5, 76], [5, 112]]]], ["inline", "t", [["subexpr", "ko-intl-key-for-field-type", [["get", "field.fieldType", ["loc", [null, [8, 65], [8, 80]]]]], [], ["loc", [null, [8, 37], [8, 81]]]]], [], ["loc", [null, [8, 33], [8, 83]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-box-row", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit_fields__row"], [], ["loc", [null, [2, 29], [2, 76]]]]], 0, null, ["loc", [null, [2, 2], [11, 24]]]]],
        locals: ["field"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption t-bold");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-admin_case-forms_edit_fields__action");
            var el4 = dom.createTextNode("\n           ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [18, 39], [18, 54]]]], ["inline", "t", [["subexpr", "ko-intl-key-for-field-type", [["get", "field.fieldType", ["loc", [null, [21, 65], [21, 80]]]]], [], ["loc", [null, [21, 37], [21, 81]]]]], [], ["loc", [null, [21, 33], [21, 83]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onCaseFieldRemoval", ["loc", [null, [24, 31], [24, 49]]]], ["get", "field", ["loc", [null, [24, 50], [24, 55]]]]], [], ["loc", [null, [24, 22], [24, 58]]]]], ["inline", "t", ["admin.caseforms.remove_from_form"], [], ["loc", [null, [25, 11], [25, 51]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-box-row", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit_fields__row"], [], ["loc", [null, [15, 29], [15, 76]]]]], 0, null, ["loc", [null, [15, 2], [29, 24]]]]],
        locals: ["field"],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [40, 4], [40, 19]]]]],
          locals: ["field"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", ["subexpr", "qa-cls", [" qa-admin_case-forms_edit_fields__configure-dropdown"], [], ["loc", [null, [34, 91], [34, 154]]]]], [], ["loc", [null, [34, 10], [34, 155]]]], "placeholder", ["subexpr", "t", ["admin.caseforms.label.add_new_field"], [], ["loc", [null, [35, 16], [35, 57]]]], "options", ["subexpr", "@mut", [["get", "unusedCaseFields", ["loc", [null, [36, 12], [36, 28]]]]], [], []], "renderInPlace", true, "searchEnabled", false, "onchange", ["subexpr", "@mut", [["get", "onCaseFieldAddition", ["loc", [null, [39, 13], [39, 32]]]]], [], []]], 0, null, ["loc", [null, [33, 2], [41, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "systemCaseFields", ["loc", [null, [1, 8], [1, 24]]]]], [], 0, null, ["loc", [null, [1, 0], [12, 9]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderFields", "items", ["subexpr", "@mut", [["get", "customCaseFields", ["loc", [null, [14, 65], [14, 81]]]]], [], []]], 1, null, ["loc", [null, [14, 0], [30, 24]]]], ["block", "if", [["get", "unusedCaseFields", ["loc", [null, [32, 6], [32, 22]]]]], [], 2, null, ["loc", [null, [32, 0], [42, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/components/ko-admin/case-forms/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 16,
                    "column": 71
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.caseforms.label.field_title"], [], ["loc", [null, [16, 30], [16, 71]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [16, 6], [16, 95]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms_edit__title-input"], [], ["loc", [null, [17, 47], [17, 96]]]]], [], ["loc", [null, [17, 20], [17, 97]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseForm.title", ["loc", [null, [17, 116], [17, 130]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [17, 140], [17, 152]]]]], [], []]], ["loc", [null, [17, 6], [17, 154]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.title", ["loc", [null, [18, 36], [18, 57]]]]], [], []]], ["loc", [null, [18, 6], [18, 59]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 22,
                    "column": 6
                  },
                  "end": {
                    "line": 28,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "caseForm.isEnabled", ["loc", [null, [24, 20], [24, 38]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "caseForm.isEnabled", ["loc", [null, [25, 23], [25, 41]]]], "admin.caseforms.edit.description_on.is_enabled", "admin.caseforms.edit.description_off.is_enabled"], [], ["loc", [null, [25, 19], [25, 141]]]]], [], ["loc", [null, [25, 16], [25, 142]]]]], ["loc", [null, [23, 8], [26, 10]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.isEnabled", ["loc", [null, [27, 38], [27, 63]]]]], [], []]], ["loc", [null, [27, 8], [27, 65]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [22, 6], [28, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [15, 4], [19, 22]]]], ["block", "if", [["get", "caseForm.canBeDisabled", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [29, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 81
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.caseforms.help.is_visible_to_customers"], [], ["loc", [null, [43, 29], [43, 81]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-checkbox", [], ["checkboxClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__customer-available-checkbox"], [], ["loc", [null, [36, 22], [36, 81]]]], "label", ["subexpr", "t", ["admin.caseforms.label.is_visible_to_customers"], [], ["loc", [null, [37, 14], [37, 65]]]], "checked", ["subexpr", "@mut", [["get", "caseForm.isVisibleToCustomers", ["loc", [null, [38, 16], [38, 45]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [39, 17], [39, 29]]]]], [], []]], ["loc", [null, [35, 6], [40, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.isVisibleToCustomers", ["loc", [null, [42, 36], [42, 72]]]]], [], []]], ["loc", [null, [42, 6], [42, 74]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [43, 6], [43, 104]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 48,
                      "column": 8
                    },
                    "end": {
                      "line": 48,
                      "column": 81
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.caseforms.label.customer_form_title"], [], ["loc", [null, [48, 32], [48, 81]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [48, 8], [48, 105]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms__customer-title"], [], ["loc", [null, [49, 49], [49, 96]]]]], [], ["loc", [null, [49, 22], [49, 97]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseForm.customerTitle", ["loc", [null, [49, 116], [49, 138]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [49, 148], [49, 160]]]]], [], []]], ["loc", [null, [49, 8], [49, 162]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.customerTitle", ["loc", [null, [50, 38], [50, 67]]]]], [], []]], ["loc", [null, [50, 8], [50, 69]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 8
                    },
                    "end": {
                      "line": 54,
                      "column": 87
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.caseforms.label.customer_form_description"], [], ["loc", [null, [54, 32], [54, 87]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [54, 8], [54, 111]]]], ["inline", "textarea", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms__customer-description"], [], ["loc", [null, [55, 52], [55, 105]]]]], [], ["loc", [null, [55, 25], [55, 106]]]], "value", ["subexpr", "@mut", [["get", "caseForm.description", ["loc", [null, [55, 113], [55, 133]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [55, 143], [55, 155]]]]], [], []]], ["loc", [null, [55, 8], [55, 157]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.description", ["loc", [null, [56, 38], [56, 65]]]]], [], []]], ["loc", [null, [56, 8], [56, 67]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [47, 6], [51, 24]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [53, 6], [57, 24]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [34, 4], [44, 22]]]], ["block", "if", [["get", "caseForm.isVisibleToCustomers", ["loc", [null, [46, 10], [46, 39]]]]], [], 1, null, ["loc", [null, [46, 4], [58, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-admin/case-forms/edit/fields", [], ["caseFields", ["subexpr", "@mut", [["get", "caseForm.fields", ["loc", [null, [64, 19], [64, 34]]]]], [], []], "onCaseFieldAddition", ["subexpr", "action", ["addCaseFieldToForm"], [], ["loc", [null, [65, 28], [65, 57]]]], "onCaseFieldRemoval", ["subexpr", "action", ["removeCaseFieldFromForm"], [], ["loc", [null, [66, 27], [66, 61]]]]], ["loc", [null, [63, 6], [67, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 69,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.case_field_ids", ["loc", [null, [62, 27], [62, 48]]]]], [], []]], 0, null, ["loc", [null, [62, 4], [68, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "submitClass", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit__submit-button"], [], ["loc", [null, [9, 16], [9, 66]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__cancel-button"], [], ["loc", [null, [10, 22], [10, 67]]]], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [11, 15], [11, 33]]]]], ["loc", [null, [6, 2], [12, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.agent_settings"], [], ["loc", [null, [14, 33], [14, 77]]]]], 0, null, ["loc", [null, [14, 2], [30, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.customer_settings"], [], ["loc", [null, [33, 33], [33, 80]]]]], 1, null, ["loc", [null, [33, 2], [59, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.configure_form"], [], ["loc", [null, [61, 33], [61, 77]]]]], 2, null, ["loc", [null, [61, 2], [69, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [72, 13], [72, 21]]]]], [], []], "submitClass", "qa-admin_case-forms_edit__submit-button", "cancelButtonClass", "qa-admin_case-forms__cancel-button", "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [75, 15], [75, 33]]]]], ["loc", [null, [71, 2], [76, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [2, 9], [2, 15]]]]], [], []], "onSubmit", ["subexpr", "action", ["saveField"], [], ["loc", [null, [3, 11], [3, 31]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [4, 12], [4, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [77, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/forms/group/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['form-section']
  });
});
define("frontend-cp/components/ko-admin/forms/group/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/4");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("legend");
          dom.setAttribute(el2, "class", "ko-admin-form-group__legend");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-3/4");
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "legend", ["loc", [null, [4, 52], [4, 62]]]], ["content", "yield", ["loc", [null, [7, 5], [7, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [11, 6], [11, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "legend", ["loc", [null, [2, 8], [2, 14]]]]], [], 0, 1, ["loc", [null, [2, 2], [13, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/forms/table/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-admin/forms/table/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/forms/table/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-admin/inline-locale-edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    localeFields: null,
    inputType: 'text',

    // State
    translationEditProxy: null,
    defaultLocale: '',

    // HTML
    tagName: 'span',
    classNameBindings: ['isTextArea:ko-admin_inline-locale-edit--text-area'],

    store: _ember['default'].inject.service(),

    getDefaultLocale: _ember['default'].on('didInitAttrs', function () {
      this.set('translationEditProxy', _ember['default'].Object.create({}));
      this.set('defaultLocale', this.get('store').peekAll('locale').get('firstObject.id'));
    }),

    isVisible: _ember['default'].computed('localeFields', function () {
      return this.get('localeFields').length > 1;
    }),

    isTextArea: _ember['default'].computed.equal('inputType', 'textArea'),

    translationsForField: _ember['default'].computed('localeFields', function () {
      var currentLocale = this.get('store').peekAll('locale').get('firstObject.id');
      var localeFields = this.get('localeFields');

      return localeFields.filter(function (localeField) {
        return localeField.get('locale') !== currentLocale;
      });
    }),

    isEdited: _ember['default'].computed('localeFields.@each.hasDirtyAttributes', 'localeFields.@each.translation', function () {
      var fieldLocales = this.get('translationsForField');
      var populatedFieldLocales = fieldLocales.find(function (fieldLocale) {
        return fieldLocale.get('translation');
      });

      return populatedFieldLocales && fieldLocales.isAny('hasDirtyAttributes', true);
    })
  });
});
define("frontend-cp/components/ko-admin/inline-locale-edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-select");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'class');
            morphs[2] = dom.createMorphAt(element4, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-admin_inline-locale-edit__modal-button ", ["subexpr", "if", [["get", "isEdited", ["loc", [null, [4, 66], [4, 74]]]], "ko-admin_inline-locale-edit__modal-button--is-edited"], [], ["loc", [null, [4, 61], [4, 131]]]]]]], ["attribute", "class", ["concat", [["subexpr", "locale-flag", [["get", "defaultLocale", ["loc", [null, [5, 35], [5, 48]]]]], [], ["loc", [null, [5, 21], [5, 50]]]]]]], ["content", "defaultLocale", ["loc", [null, [5, 52], [5, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 10
                  },
                  "end": {
                    "line": 14,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "class", "ko-admin_inline-locale-edit__text input input-text input-text--full", "value", ["subexpr", "@mut", [["get", "localeField.translation", ["loc", [null, [13, 114], [13, 137]]]]], [], []]], ["loc", [null, [13, 12], [13, 139]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 10
                  },
                  "end": {
                    "line": 17,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "textarea", [], ["type", "text", "class", "ko-admin_inline-locale-edit__text input-text input-text--full", "value", ["subexpr", "@mut", [["get", "localeField.translation", ["loc", [null, [16, 111], [16, 134]]]]], [], []]], ["loc", [null, [16, 12], [16, 136]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "locale-flag", [["get", "localeField.locale", ["loc", [null, [11, 36], [11, 54]]]]], [], ["loc", [null, [11, 22], [11, 56]]]]], ["content", "localeField.locale", ["loc", [null, [11, 57], [11, 79]]]], ["block", "if", [["subexpr", "eq", [["get", "inputType", ["loc", [null, [12, 20], [12, 29]]]], "text"], [], ["loc", [null, [12, 16], [12, 37]]]]], [], 0, null, ["loc", [null, [12, 10], [14, 17]]]], ["block", "if", [["subexpr", "eq", [["get", "inputType", ["loc", [null, [15, 20], [15, 29]]]], "textArea"], [], ["loc", [null, [15, 16], [15, 41]]]]], [], 1, null, ["loc", [null, [15, 10], [17, 17]]]]],
            locals: ["localeField"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin_inline-locale-edit__popover");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/1 t-right");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-admin_inline-locale-edit__item button button--primary");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element1, 1, 1);
            morphs[1] = dom.createAttrMorph(element2, 'onClick');
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "translationsForField", ["loc", [null, [10, 16], [10, 36]]]]], [], 0, null, ["loc", [null, [10, 8], [18, 17]]]], ["attribute", "onClick", ["get", "translationEditProxy.close", ["loc", [null, [21, 90], [21, 116]]]]], ["inline", "t", ["admin.casefields.buttons.complete_locale_edit"], [], ["loc", [null, [22, 12], [22, 65]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_inline-locale-edit__container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "ko-context-modal", [], ["proxy", ["subexpr", "@mut", [["get", "translationEditProxy", ["loc", [null, [3, 30], [3, 50]]]]], [], []], "closeOnClickOutside", true], 0, 1, ["loc", [null, [3, 4], [26, 25]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isVisible", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [28, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/page-container/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // State
    resizeSidebarsRequestID: null,

    resizeSidebarAndContent: _ember['default'].on('willInsertElement', function () {
      var _this = this;

      this.set('resizeSidebarsRequestID', window.requestAnimationFrame(function () {
        var sideBar = _ember['default'].$('.ko-admin-sidebar');
        var content = _ember['default'].$('.ko-admin-content');
        sideBar.css('min-height', content.height());

        _this.resizeSidebarAndContent();
      }));
    }),

    cleanup: _ember['default'].on('willDestroyElement', function () {
      window.cancelAnimationFrame(this.get('resizeSidebarsRequestID'));
    })
  });
});
define("frontend-cp/components/ko-admin/page-container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 5,
              "column": 27
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-admin-index");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-session-admin-index__sidebar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-session-admin-index__content content__main content__main--has-sidebar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ko-admin-content");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["admin.administration"], [], ["loc", [null, [2, 6], [2, 34]]]], ["block", "ko-admin/sidebar", [], [], 0, null, ["loc", [null, [5, 6], [5, 48]]]], ["content", "outlet", ["loc", [null, [9, 8], [9, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/page-footer/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null
  });
});
define("frontend-cp/components/ko-admin/page-footer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-footer/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-form/buttons", [], ["submitLabel", ["subexpr", "@mut", [["get", "buttonText", ["loc", [null, [1, 30], [1, 40]]]]], [], []], "submitClass", ["subexpr", "@mut", [["get", "submitClass", ["loc", [null, [1, 53], [1, 64]]]]], [], []], "cancelLabel", ["subexpr", "@mut", [["get", "cancelButtonText", ["loc", [null, [1, 77], [1, 93]]]]], [], []], "onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [1, 103], [1, 109]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [1, 119], [1, 127]]]]], [], []]], ["loc", [null, [1, 0], [1, 129]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-admin/page-header/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    title: null,
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null,

    titleTrail: _ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(0, title.lastIndexOf('/') + 1);
    }),

    pageTitle: _ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(title.lastIndexOf('/') + 1).trim();
    })
  });
});
define("frontend-cp/components/ko-admin/page-header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-caption");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "titleTrail", ["loc", [null, [6, 34], [6, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-header__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "pageCopy", ["loc", [null, [19, 4], [19, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-header__spacer");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-2/3 u-v-align");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "ko-admin-header__title");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/3 t-right");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "titleTrail", ["loc", [null, [5, 14], [5, 24]]]]], [], 0, null, ["loc", [null, [5, 8], [7, 15]]]], ["content", "pageTitle", ["loc", [null, [8, 8], [8, 21]]]], ["inline", "ko-form/buttons", [], ["submitLabel", ["subexpr", "@mut", [["get", "buttonText", ["loc", [null, [12, 38], [12, 48]]]]], [], []], "submitClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [12, 61], [12, 72]]]]], [], []], "cancelButtonClass", ["subexpr", "@mut", [["get", "cancelButtonClass", ["loc", [null, [12, 91], [12, 108]]]]], [], []], "cancelLabel", ["subexpr", "@mut", [["get", "cancelButtonText", ["loc", [null, [12, 121], [12, 137]]]]], [], []], "onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [12, 147], [12, 153]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [12, 163], [12, 171]]]]], [], []]], ["loc", [null, [12, 8], [12, 173]]]], ["block", "if", [["get", "pageCopy", ["loc", [null, [17, 6], [17, 14]]]]], [], 1, 2, ["loc", [null, [17, 0], [23, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-admin/sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-admin/sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.twitter"], [], ["loc", [null, [8, 6], [8, 27]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_sidebar__group");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "ko-admin_sidebar__header");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["admin.navigation.channels"], [], ["loc", [null, [4, 6], [4, 39]]]], ["block", "link-to", ["session.admin.channels.twitter"], ["class", "t-naked-link ko-admin_sidebar__item"], 0, null, ["loc", [null, [7, 4], [9, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.views"], [], ["loc", [null, [18, 4], [18, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields"], [], ["loc", [null, [22, 4], [22, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.caseforms"], [], ["loc", [null, [26, 4], [26, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.teams"], [], ["loc", [null, [36, 4], [36, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.userfields"], [], ["loc", [null, [40, 4], [40, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.organizationfields"], [], ["loc", [null, [44, 4], [44, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 2
              },
              "end": {
                "line": 55,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.businesshours"], [], ["loc", [null, [54, 4], [54, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_sidebar__group");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "ko-admin_sidebar__header");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "t", ["admin.navigation.automation"], [], ["loc", [null, [51, 4], [51, 39]]]], ["block", "link-to", ["session.admin.automation.businesshours"], ["class", "t-naked-link ko-admin_sidebar__item"], 0, null, ["loc", [null, [53, 2], [55, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 58,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin_sidebar__group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-admin_sidebar__header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin_sidebar__group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-admin_sidebar__header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(element2, 7, 7);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
        morphs[6] = dom.createMorphAt(element3, 3, 3);
        morphs[7] = dom.createMorphAt(element3, 5, 5);
        morphs[8] = dom.createMorphAt(element3, 7, 7);
        morphs[9] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "features.adminTwitter", ["loc", [null, [1, 6], [1, 27]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["inline", "t", ["admin.navigation.manage"], [], ["loc", [null, [15, 4], [15, 35]]]], ["block", "link-to", ["session.admin.manage.views"], ["class", "t-naked-link ko-admin_sidebar__item"], 1, null, ["loc", [null, [17, 2], [19, 14]]]], ["block", "link-to", ["session.admin.manage.case-fields"], ["class", "t-naked-link ko-admin_sidebar__item"], 2, null, ["loc", [null, [21, 2], [23, 14]]]], ["block", "link-to", ["session.admin.manage.case-forms"], ["class", "t-naked-link ko-admin_sidebar__item"], 3, null, ["loc", [null, [25, 2], [27, 14]]]], ["inline", "t", ["admin.navigation.people"], [], ["loc", [null, [33, 4], [33, 35]]]], ["block", "link-to", ["session.admin.people.teams"], ["class", "t-naked-link ko-admin_sidebar__item"], 4, null, ["loc", [null, [35, 2], [37, 14]]]], ["block", "link-to", ["session.admin.people.user-fields"], ["class", "t-naked-link ko-admin_sidebar__item"], 5, null, ["loc", [null, [39, 2], [41, 14]]]], ["block", "link-to", ["session.admin.people.organization-fields"], ["class", "t-naked-link ko-admin_sidebar__item"], 6, null, ["loc", [null, [43, 2], [45, 14]]]], ["block", "if", [["get", "features.adminBusinessHours", ["loc", [null, [48, 6], [48, 33]]]]], [], 7, null, ["loc", [null, [48, 0], [57, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define('frontend-cp/components/ko-admin/team/component', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  var RSVP = _ember['default'].RSVP;
  exports['default'] = _ember['default'].Component.extend({
    title: null,
    team: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},
    injectIntoParent: null,

    intl: inject.service(),
    session: inject.service(),
    errorHandler: inject.service('error-handler'),
    storeCache: inject.service('store-cache'),

    filter: '',
    agents: [],
    membersToAdd: null,
    membersToRemove: null,

    isMembersLoading: true,

    initFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('membersToRemove', []);
      this.set('membersToAdd', []);

      this.get('storeCache').query('user', { role: 'AGENT', limit: 500, is_enabled: true }).then(function (agents) {
        // we filter for isEnabled because /users endpoint do not support is_enabled
        // attribute yet
        _this.set('agents', agents.filter(function (agent) {
          return agent.get('isEnabled');
        }));
        _this.set('isMembersLoading', false);
      });

      this.get('injectIntoParent')(this);
    }),

    nonMembers: computed('agents.[]', 'team.members.[]', function () {
      var _this2 = this;

      return this.get('agents').filter(function (agent) {
        return !_this2.get('team.members').contains(agent);
      });
    }),

    filteredMembers: computed('filter', function () {
      var members = this.get('team.members');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    filteredNonMembers: computed('filter', 'nonMembers', function () {
      var members = this.get('nonMembers');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    userHasChangedModel: function userHasChangedModel() {
      var bufferedChanges = this.get('membersToAdd').length > 0 || this.get('membersToRemove').length > 0;
      if (this.get('team.isDeleted')) {
        return false;
      } else {
        return this.get('team.hasDirtyAttributes') || bufferedChanges;
      }
    },

    matchesFilter: function matchesFilter(text) {
      var regEx = new RegExp(this.get('filter').trim(), 'i');
      return regEx.test(text);
    },

    filterByFullName: function filterByFullName(members) {
      var _this3 = this;

      return members.filter(function (member) {
        return _this3.matchesFilter(member.get('fullName'));
      });
    },

    addMembers: function addMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToAdd').map(function (member) {
        return member.get('id');
      }).join(',');

      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/teams/' + teamId + '/members';

      var options = {
        data: {
          agent_ids: ids
        }
      };

      return adapter.ajax(url, 'POST', options);
    },

    removeMembers: function removeMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToRemove').map(function (member) {
        return member.get('id');
      }).join(',');
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/teams/' + teamId + '/members?agent_ids=' + ids;

      return adapter.ajax(url, 'DELETE');
    },

    getNonMemberSelectedValue: function getNonMemberSelectedValue(agent) {
      return this.get('membersToAdd').contains(agent);
    },

    getMemberSelectedValue: function getMemberSelectedValue(agent) {
      return !this.get('membersToRemove').contains(agent);
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('team').rollbackAttributes();
        this.set('membersToAdd', []);
        this.set('membersToRemove', []);
      },

      saveTeam: function saveTeam() {
        var _this4 = this;

        // Update the model straight away, and then perform
        // the API requests in the background.
        this.get('team.members').pushObjects(this.get('membersToAdd'));
        this.get('team.members').removeObjects(this.get('membersToRemove'));
        return this.get('team').save().then(function () {
          var promises = [];
          if (_this4.get('membersToAdd.length') > 0) {
            promises.push(_this4.addMembers());
          }
          if (_this4.get('membersToRemove.length') > 0) {
            promises.push(_this4.removeMembers());
          }
          return RSVP.all(promises).then(function () {
            _this4.set('membersToAdd', []);
            _this4.set('membersToRemove', []);
          })['catch'](function (e) {
            return _this4.get('errorHandler').process({ errors: e.responseJSON });
          });
        });
      },

      onUserSelected: function onUserSelected(user, isSelected) {
        var membersToAdd = this.get('membersToAdd');
        var membersToRemove = this.get('membersToRemove');
        if (this.get('nonMembers').contains(user)) {
          if (isSelected) {
            membersToAdd.pushObject(user);
          } else {
            membersToAdd.removeObject(user);
          }
        } else {
          if (isSelected) {
            membersToRemove.removeObject(user);
          } else {
            membersToRemove.pushObject(user);
          }
        }
      },

      deleteTeam: function deleteTeam(team) {
        var _this5 = this;

        var msg = this.get('intl').findTranslationByKey('admin.teams.labels.delete_team_confirmation');
        if (confirm(msg)) {
          // eslint-disable-line
          team.destroyRecord().then(function () {
            _this5.attrs.onSuccess();
          });
        }
      }
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-admin/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.teams.labels.edit.name"], [], ["loc", [null, [13, 30], [13, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 90]]]], ["inline", "input", [], ["class", "input-text qa-ko-admin_team__input-title", "type", "text", "value", ["subexpr", "@mut", [["get", "team.title", ["loc", [null, [14, 81], [14, 91]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 101], [14, 113]]]]], [], []]], ["loc", [null, [14, 6], [14, 115]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [12, 4], [15, 22]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "team.errors.title", ["loc", [null, [16, 34], [16, 51]]]]], [], []]], ["loc", [null, [16, 4], [16, 53]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 8
                },
                "end": {
                  "line": 36,
                  "column": 46
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [36, 22], [36, 46]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 4
              },
              "end": {
                "line": 38,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin-card-user__loader");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [36, 8], [36, 60]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 40,
                    "column": 7
                  },
                  "end": {
                    "line": 47,
                    "column": 7
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("         ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout__item u-1/3 ko-admin-card-user--small");
                var el2 = dom.createTextNode("\n           ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n         ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "ko-admin-card-user", [], ["user", ["subexpr", "@mut", [["get", "agent", ["loc", [null, [43, 19], [43, 24]]]]], [], []], "isSelected", ["subexpr", "ko-contextual-helper", [["get", "getMemberSelectedValue", ["loc", [null, [44, 47], [44, 69]]]], ["get", "this", ["loc", [null, [44, 70], [44, 74]]]], ["get", "agent", ["loc", [null, [44, 75], [44, 80]]]]], [], ["loc", [null, [44, 25], [44, 81]]]], "userSelectedAction", "onUserSelected"], ["loc", [null, [42, 11], [45, 51]]]]],
              locals: ["agent"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 48,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "filteredMembers", ["loc", [null, [40, 15], [40, 30]]]]], [], 0, null, ["loc", [null, [40, 7], [47, 16]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("       ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout__item u-1/3 ko-admin-card-user--small");
              var el2 = dom.createTextNode("\n         ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n       ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-admin-card-user", [], ["user", ["subexpr", "@mut", [["get", "agent", ["loc", [null, [52, 17], [52, 22]]]]], [], []], "isSelected", ["subexpr", "ko-contextual-helper", [["get", "getNonMemberSelectedValue", ["loc", [null, [53, 45], [53, 70]]]], ["get", "this", ["loc", [null, [53, 71], [53, 75]]]], ["get", "agent", ["loc", [null, [53, 76], [53, 81]]]]], [], ["loc", [null, [53, 23], [53, 82]]]], "userSelectedAction", "onUserSelected"], ["loc", [null, [51, 9], [54, 49]]]]],
            locals: ["agent"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 4
              },
              "end": {
                "line": 57,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["get", "team.isNew", ["loc", [null, [39, 17], [39, 27]]]]], [], ["loc", [null, [39, 12], [39, 28]]]]], [], 0, null, ["loc", [null, [39, 6], [48, 13]]]], ["block", "each", [["get", "filteredNonMembers", ["loc", [null, [49, 14], [49, 32]]]]], [], 1, null, ["loc", [null, [49, 6], [56, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 64,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "button button--alert qa-ko-admin_team__button-delete");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["deleteTeam", ["get", "team", ["loc", [null, [61, 100], [61, 104]]]]], [], ["loc", [null, [61, 78], [61, 106]]]]], ["inline", "t", ["admin.teams.labels.delete_team"], [], ["loc", [null, [62, 6], [62, 44]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mv");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout u-mb");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout__item u-1/1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "input--search t-right");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-search i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [7, 1, 1]), 1, 1);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
          morphs[6] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [7, 13], [7, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 15], [8, 33]]]]], ["loc", [null, [5, 2], [9, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.teams.legend.edit.details"], [], ["loc", [null, [11, 33], [11, 70]]]]], 0, null, ["loc", [null, [11, 2], [17, 27]]]], ["inline", "t", ["admin.teams.info.title"], [], ["loc", [null, [20, 8], [20, 38]]]], ["inline", "t", ["admin.teams.info.content"], [], ["loc", [null, [21, 7], [21, 39]]]], ["inline", "input", [], ["class", "input-text input-text--search", "type", "text", "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [27, 72], [27, 78]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.teams.labels.filter_agents"], [], ["loc", [null, [27, 91], [27, 129]]]]], ["loc", [null, [27, 8], [27, 131]]]], ["block", "if", [["get", "isMembersLoading", ["loc", [null, [34, 10], [34, 26]]]]], [], 1, 2, ["loc", [null, [34, 4], [57, 11]]]], ["block", "if", [["get", "team.id", ["loc", [null, [60, 8], [60, 15]]]]], [], 3, null, ["loc", [null, [60, 2], [64, 9]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["saveTeam"], [], ["loc", [null, [2, 11], [2, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [65, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/twitter/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    account: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,

    store: _ember['default'].inject.service(),

    brands: [],
    initBrands: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('brand').then(function (brands) {
        _this.set('brands', brands);
      });
    }),

    actions: {
      setBrand: function setBrand(brand) {
        this.set('account.brand', brand);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/twitter/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 63
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.brand"], [], ["loc", [null, [14, 30], [14, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 21,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 1, 1);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["setBrand", ["get", "brand", ["loc", [null, [18, 75], [18, 80]]]]], [], ["loc", [null, [18, 55], [18, 82]]]]], ["content", "brand.name", ["loc", [null, [19, 14], [19, 28]]]]],
                locals: ["brand"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 22,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "brands", ["loc", [null, [16, 16], [16, 22]]]]], [], 0, null, ["loc", [null, [16, 8], [21, 17]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 61
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.help.brand"], [], ["loc", [null, [24, 29], [24, 61]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [14, 6], [14, 87]]]], ["block", "ko-dropdown/select", [], ["label", ["subexpr", "@mut", [["get", "account.brand.name", ["loc", [null, [15, 34], [15, 52]]]]], [], []]], 1, null, ["loc", [null, [15, 6], [22, 29]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.brand", ["loc", [null, [23, 36], [23, 56]]]]], [], []]], ["loc", [null, [23, 6], [23, 58]]]], ["block", "ko-form/field/help", [], [], 2, null, ["loc", [null, [24, 6], [24, 84]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [13, 4], [25, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["admin.twitter.help.capture"], [], ["loc", [null, [30, 6], [30, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 34,
                    "column": 6
                  },
                  "end": {
                    "line": 34,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.mentions"], [], ["loc", [null, [34, 30], [34, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 40,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [34, 6], [34, 90]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeMentions", ["loc", [null, [36, 18], [36, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeMentions", ["loc", [null, [37, 21], [37, 42]]]], "admin.twitter.description_on.mentions", "admin.twitter.description_off.mentions"], [], ["loc", [null, [37, 17], [37, 124]]]]], [], ["loc", [null, [37, 14], [37, 125]]]]], ["loc", [null, [35, 6], [38, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeMentions", ["loc", [null, [39, 36], [39, 64]]]]], [], []]], ["loc", [null, [39, 6], [39, 66]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 73
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.direct_messages"], [], ["loc", [null, [43, 30], [43, 73]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [43, 6], [43, 97]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeMessages", ["loc", [null, [45, 18], [45, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeMessages", ["loc", [null, [46, 21], [46, 42]]]], "admin.twitter.description_on.direct_messages", "admin.twitter.description_off.direct_messages"], [], ["loc", [null, [46, 17], [46, 138]]]]], [], ["loc", [null, [46, 14], [46, 139]]]]], ["loc", [null, [44, 6], [47, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeMessages", ["loc", [null, [48, 36], [48, 64]]]]], [], []]], ["loc", [null, [48, 6], [48, 66]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 52,
                    "column": 6
                  },
                  "end": {
                    "line": 52,
                    "column": 75
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.favourited_tweets"], [], ["loc", [null, [52, 30], [52, 75]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [52, 6], [52, 99]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeFavorites", ["loc", [null, [54, 18], [54, 40]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeFavorites", ["loc", [null, [55, 21], [55, 43]]]], "admin.twitter.description_on.favourited_tweets", "admin.twitter.description_off.favourited_tweets"], [], ["loc", [null, [55, 17], [55, 143]]]]], [], ["loc", [null, [55, 14], [55, 144]]]]], ["loc", [null, [53, 6], [56, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeFavorites", ["loc", [null, [57, 36], [57, 65]]]]], [], []]], ["loc", [null, [57, 6], [57, 67]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [29, 4], [31, 27]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [33, 4], [40, 22]]]], ["block", "ko-form/field", [], [], 2, null, ["loc", [null, [42, 4], [49, 22]]]], ["block", "ko-form/field", [], [], 3, null, ["loc", [null, [51, 4], [58, 22]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 63,
                    "column": 6
                  },
                  "end": {
                    "line": 63,
                    "column": 79
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.display_public_tweets"], [], ["loc", [null, [63, 30], [63, 79]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 6
                  },
                  "end": {
                    "line": 69,
                    "column": 77
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.help.display_public_tweets"], [], ["loc", [null, [69, 29], [69, 77]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [63, 6], [63, 103]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.showInHelpCenter", ["loc", [null, [65, 18], [65, 42]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.showInHelpCenter", ["loc", [null, [66, 21], [66, 45]]]], "admin.twitter.description_on.display_public_tweets", "admin.twitter.description_off.display_public_tweets"], [], ["loc", [null, [66, 17], [66, 153]]]]], [], ["loc", [null, [66, 14], [66, 154]]]]], ["loc", [null, [64, 6], [67, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.showInHelpCenter", ["loc", [null, [68, 36], [68, 67]]]]], [], []]], ["loc", [null, [68, 6], [68, 69]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [69, 6], [69, 100]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 71,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [62, 4], [70, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.twitter.edit.heading"], ["screenName", ["get", "account.screenName", ["loc", [null, [6, 53], [6, 71]]]]], ["loc", [null, [6, 10], [6, 72]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [7, 13], [7, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 15], [8, 33]]]], "pageCopy", null], ["loc", [null, [5, 2], [10, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.account_settings"], [], ["loc", [null, [12, 33], [12, 77]]]]], 0, null, ["loc", [null, [12, 2], [26, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.capture_settings"], [], ["loc", [null, [28, 33], [28, 77]]]]], 1, null, ["loc", [null, [28, 2], [59, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.help_settings"], [], ["loc", [null, [61, 33], [61, 74]]]]], 2, null, ["loc", [null, [61, 2], [71, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [74, 13], [74, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [75, 15], [75, 33]]]]], ["loc", [null, [73, 2], [76, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [2, 11], [2, 17]]]]], [], []], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [77, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/views/edit/columns/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    columns: null,

    store: _ember['default'].inject.service(),
    intlService: _ember['default'].inject.service('intl'),
    availableColumns: [],

    initAvailableColumns: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('column').then(function (columns) {
        _this.set('availableColumns', columns);
      });
    }),

    unusedColumns: _ember['default'].computed('availableColumns.[]', 'columns.[]', function () {
      var usedColumns = this.get('columns');
      if (!usedColumns) {
        return this.get('availableColumns');
      }

      return this.get('availableColumns').filter(function (availableColumn) {
        return !usedColumns.contains(availableColumn);
      });
    }),

    columnTitleTranslation: function columnTitleTranslation(columnName) {
      return this.get('intlService').findTranslationByKey('admin.case_column_title.' + columnName);
    },

    actions: {
      reorderColumns: function reorderColumns(list) {
        var order = 1;
        list.forEach(function (option) {
          option.set('sortOrder', order);
          order++;
        });
      },

      addViewColumn: function addViewColumn(column) {
        this.get('columns').pushObject(column);
      },

      removeColumn: function removeColumn(column) {
        this.get('columns').removeObject(column);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/views/edit/columns/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-contextual-helper", [["get", "columnTitleTranslation", ["loc", [null, [8, 27], [8, 49]]]], ["get", "this", ["loc", [null, [8, 50], [8, 54]]]], ["get", "column.id", ["loc", [null, [8, 55], [8, 64]]]]], [], ["loc", [null, [8, 4], [8, 66]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 1
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-views-column__item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "ko-views-column__content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-views-column__action i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'onclick');
          return morphs;
        },
        statements: [["inline", "ko-contextual-helper", [["get", "columnTitleTranslation", ["loc", [null, [15, 29], [15, 51]]]], ["get", "this", ["loc", [null, [15, 52], [15, 56]]]], ["get", "column.id", ["loc", [null, [15, 57], [15, 66]]]]], [], ["loc", [null, [15, 6], [15, 68]]]], ["attribute", "onclick", ["subexpr", "action", ["removeColumn", ["get", "column", ["loc", [null, [17, 108], [17, 114]]]]], [], ["loc", [null, [17, 84], [17, 116]]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-views-column");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "power-select", [], ["searchEnabled", false, "class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", ["subexpr", "qa-cls", [" qa-configure-column"], [], ["loc", [null, [3, 89], [3, 120]]]], " ko-admin_views_edit_select"], [], ["loc", [null, [3, 8], [3, 151]]]], "dropdownClass", "ko-admin_views_edit_select--dropdown", "options", ["subexpr", "@mut", [["get", "unusedColumns", ["loc", [null, [5, 10], [5, 23]]]]], [], []], "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [6, 14], [6, 46]]]], "onchange", ["subexpr", "action", ["addViewColumn"], [], ["loc", [null, [7, 11], [7, 35]]]]], 0, null, ["loc", [null, [1, 0], [9, 17]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderColumns", "items", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [12, 66], [12, 73]]]]], [], []]], 1, null, ["loc", [null, [12, 0], [19, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/views/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    currentView: null,
    title: null,
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    // state
    teams: null,
    definitions: null,
    sortOrderDirections: null,

    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),

    sharedWithSelf: _ember['default'].computed.equal('currentView.visibilityType', 'SELF'),
    sharedWithAll: _ember['default'].computed.equal('currentView.visibilityType', 'ALL'),
    sharedWithTeam: _ember['default'].computed.equal('currentView.visibilityType', 'TEAM'),

    sortingDirections: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({ id: 'ASC', value: this.get('intl').findTranslationByKey('generic.sort.ASC') }), _ember['default'].Object.create({ id: 'DESC', value: this.get('intl').findTranslationByKey('generic.sort.DESC') })];
    }),

    initFields: _ember['default'].on('init', function () {
      this.set('fields', _ember['default'].Object.create({
        predicate_collections: {}
      }));

      this.set('sortOrderDirections', [{
        label: this.get('intl').findTranslationByKey('generic.sort.ASC'),
        direction: 'ASC'
      }, {
        label: this.get('intl').findTranslationByKey('generic.sort.DESC'),
        direction: 'DESC'
      }]);
    }),

    initDefinitions: _ember['default'].on('init', function () {
      this.set('definitions', this.get('store').findAll('definition'));
    }),

    initTeams: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('team').then(function (teams) {
        _this.set('teams', teams);
      });
    }),

    selectedTeams: _ember['default'].computed.reads('currentView.visibilityToTeams'),
    canDeleteCollection: _ember['default'].computed.gt('currentView.predicateCollections.length', 1),

    orderedColumnList: _ember['default'].computed('currentView.columns', 'currentView.columns.@each.sortOrder', function () {
      return this.get('currentView.columns').sortBy('sortOrder');
    }),

    sortableColumns: _ember['default'].computed('orderedColumnList.[]', function () {
      var _this2 = this;

      var columns = this.get('orderedColumnList');
      var columnList = [];

      columns.forEach(function (column) {
        columnList.push({
          id: column.id,
          label: _this2.get('intl').findTranslationByKey('admin.case_column_title.' + column.id)
        });
      });

      return columnList;
    }),

    selectedSortableColumn: _ember['default'].computed('currentView.orderByColumn', 'currentView.columns.[]', function () {
      var columns = this.get('sortableColumns');
      var selectedColumn = this.get('currentView.orderByColumn');

      return columns.find(function (column) {
        if (column.id === selectedColumn) {
          return column;
        }
      });
    }),

    selectedSortingDirection: _ember['default'].computed('currentView.orderBy', function () {
      var sortOrderDirections = this.get('sortOrderDirections');
      var sortDirection = this.get('currentView.orderBy');

      return sortOrderDirections.find(function (element) {
        if (element.direction === sortDirection) {
          return element;
        }
      });
    }),

    actions: {
      setViewSharingSelf: function setViewSharingSelf() {
        this.set('currentView.visibilityType', 'SELF');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingAll: function setViewSharingAll() {
        this.set('currentView.visibilityType', 'ALL');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingTeam: function setViewSharingTeam() {
        this.set('currentView.visibilityType', 'TEAM');
      },
      addCollection: function addCollection() {
        var newProposition = this.get('store').createFragment('proposition', {});
        var newCollection = this.get('store').createRecord('predicate-collection', { propositions: [newProposition] });

        this.get('currentView.predicateCollections').pushObject(newCollection);
      },

      removeCollection: function removeCollection(collection) {
        this.get('currentView.predicateCollections').removeObject(collection);
      },

      createRuleForCollection: function createRuleForCollection(collection) {
        var newProposition = this.get('store').createFragment('proposition', {});
        collection.get('propositions').pushObject(newProposition);
      },

      removeRuleFromCollection: function removeRuleFromCollection(collection, rule) {
        collection.get('propositions').removeObject(rule);
      },

      selectOrderByColumn: function selectOrderByColumn(column) {
        this.set('currentView.orderByColumn', column.id);
      },

      selectOrderByDirection: function selectOrderByDirection(sortOrder) {
        this.set('currentView.orderBy', sortOrder.direction);
      },

      saveView: function saveView() {
        var currentView = this.get('currentView');
        this.set('currentView.columns', this.get('orderedColumnList'));

        return currentView.save().then(function (view) {
          view.get('predicateCollections').filter(function (predicate) {
            return !predicate.get('id');
          }).forEach(function (predicate) {
            predicate.unloadRecord();
          });

          view.cacheRelationships(); //TODO: this should be done when didUpdate event is fired on the model. But it's not. Work out why
          return view;
        });
      },

      selectTeam: function selectTeam(team) {
        this.set('currentView.visibilityType', 'TEAM');
        this.get('currentView.visibilityToTeams').setObjects(team);
      }
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-admin/views/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.label.view_title"], [], ["loc", [null, [14, 30], [14, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [14, 6], [14, 90]]]], ["inline", "input", [], ["class", "input input-text", "name", "title", "type", "text", "value", ["subexpr", "@mut", [["get", "currentView.title", ["loc", [null, [15, 70], [15, 87]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [15, 97], [15, 109]]]]], [], []]], ["loc", [null, [15, 6], [15, 111]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.title", ["loc", [null, [16, 36], [16, 60]]]]], [], []]], ["loc", [null, [16, 6], [16, 62]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "currentView.isEnabled", ["loc", [null, [21, 18], [21, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "currentView.isEnabled", ["loc", [null, [22, 21], [22, 42]]]], "admin.views.edit.description_on.is_enabled", "admin.views.edit.description_off.is_enabled"], [], ["loc", [null, [22, 17], [22, 134]]]]], [], ["loc", [null, [22, 14], [22, 135]]]]], ["loc", [null, [20, 6], [23, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.isEnabled", ["loc", [null, [24, 36], [24, 64]]]]], [], []]], ["loc", [null, [24, 6], [24, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [13, 4], [17, 22]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [19, 4], [25, 22]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 63
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.label.sharing"], [], ["loc", [null, [30, 30], [30, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 8
                  },
                  "end": {
                    "line": 47,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "team.title", ["loc", [null, [46, 12], [46, 26]]]]],
              locals: ["team"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block ko-admin_views_edit_team-selector");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
              morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [30, 6], [30, 87]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-just-myself"], [], ["loc", [null, [31, 23], [31, 49]]]], "label", ["subexpr", "t", ["admin.views.radio.label.me"], [], ["loc", [null, [31, 56], [31, 88]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithSelf", ["loc", [null, [31, 97], [31, 111]]]]], [], []], "onRadio", "setViewSharingSelf", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [31, 150], [31, 162]]]]], [], []]], ["loc", [null, [31, 6], [31, 164]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-every-agent"], [], ["loc", [null, [32, 23], [32, 49]]]], "label", ["subexpr", "t", ["admin.views.radio.label.all"], [], ["loc", [null, [32, 56], [32, 89]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithAll", ["loc", [null, [32, 98], [32, 111]]]]], [], []], "onRadio", "setViewSharingAll", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [32, 149], [32, 161]]]]], [], []]], ["loc", [null, [32, 6], [32, 163]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-specific-team"], [], ["loc", [null, [35, 25], [35, 53]]]], "label", ["subexpr", "t", ["admin.views.radio.label.specific"], [], ["loc", [null, [35, 60], [35, 98]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithTeam", ["loc", [null, [35, 107], [35, 121]]]]], [], []], "onRadio", "setViewSharingTeam", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [35, 160], [35, 172]]]]], [], []]], ["loc", [null, [35, 8], [35, 174]]]], ["block", "power-select-multiple", [], ["searchEnabled", false, "class", "ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium ko-admin_views_edit_team-selector ko-admin_views_edit_select", "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [41, 22], [41, 54]]]], "options", ["subexpr", "@mut", [["get", "teams", ["loc", [null, [42, 18], [42, 23]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedTeams", ["loc", [null, [43, 19], [43, 32]]]]], [], []], "searchField", "title", "onchange", ["subexpr", "action", ["selectTeam"], [], ["loc", [null, [45, 19], [45, 40]]]]], 1, null, ["loc", [null, [38, 8], [47, 34]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.visibilityType", ["loc", [null, [49, 36], [49, 69]]]]], [], []]], ["loc", [null, [49, 6], [49, 71]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 51,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [29, 4], [50, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 54,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-admin_views_edit_predicate-header");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "format-message", ["admin.views.heading.predicate_builder"], [], ["loc", [null, [55, 56], [55, 114]]]], ["inline", "ko-predicate-builder", [], ["definitions", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [57, 20], [57, 31]]]]], [], []], "collections", ["subexpr", "@mut", [["get", "currentView.predicateCollections", ["loc", [null, [58, 20], [58, 52]]]]], [], []], "onCollectionAddition", ["subexpr", "action", ["addCollection"], [], ["loc", [null, [59, 29], [59, 53]]]], "onCollectionRemoval", ["subexpr", "action", ["removeCollection"], [], ["loc", [null, [60, 28], [60, 55]]]], "onAdditionOfRuleToCollection", ["subexpr", "action", ["createRuleForCollection"], [], ["loc", [null, [61, 37], [61, 71]]]], "onRuleDeletion", ["subexpr", "action", ["removeRuleFromCollection"], [], ["loc", [null, [62, 23], [62, 58]]]], "canDeleteCollection", ["subexpr", "@mut", [["get", "canDeleteCollection", ["loc", [null, [63, 28], [63, 47]]]]], [], []]], ["loc", [null, [56, 6], [64, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "fields.predicate_collections.errors", ["loc", [null, [65, 36], [65, 71]]]]], [], []]], ["loc", [null, [65, 6], [65, 73]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 2
              },
              "end": {
                "line": 67,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [54, 4], [66, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 69,
                "column": 2
              },
              "end": {
                "line": 71,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-admin/views/edit/columns", [], ["columns", ["subexpr", "@mut", [["get", "orderedColumnList", ["loc", [null, [70, 42], [70, 59]]]]], [], []]], ["loc", [null, [70, 4], [70, 61]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 76,
                      "column": 8
                    },
                    "end": {
                      "line": 76,
                      "column": 64
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.views.label.sorting"], [], ["loc", [null, [76, 31], [76, 64]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 78,
                      "column": 10
                    },
                    "end": {
                      "line": 89,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["content", "column.label", ["loc", [null, [87, 16], [87, 32]]]]],
                locals: ["column"],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 94,
                      "column": 10
                    },
                    "end": {
                      "line": 105,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["content", "direction.label", ["loc", [null, [103, 16], [103, 35]]]]],
                locals: ["direction"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 75,
                    "column": 6
                  },
                  "end": {
                    "line": 108,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "u-inline-block");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "u-inline-block");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [3]);
                var element1 = dom.childAt(fragment, [5]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(element1, 1, 1);
                morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                return morphs;
              },
              statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [76, 8], [76, 87]]]], ["block", "power-select", [], ["searchEnabled", false, "class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", ["subexpr", "qa-cls", [" qa-sorted-by"], [], ["loc", [null, [80, 99], [80, 123]]]], " ko-admin_views_edit_select"], [], ["loc", [null, [80, 18], [80, 154]]]], "renderInPlace", true, "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [82, 24], [82, 56]]]], "options", ["subexpr", "@mut", [["get", "sortableColumns", ["loc", [null, [83, 20], [83, 35]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedSortableColumn", ["loc", [null, [84, 21], [84, 43]]]]], [], []], "onchange", ["subexpr", "action", ["selectOrderByColumn"], [], ["loc", [null, [85, 21], [85, 51]]]]], 1, null, ["loc", [null, [78, 10], [89, 27]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.orderByColumn", ["loc", [null, [90, 45], [90, 77]]]]], [], []]], ["loc", [null, [90, 15], [90, 79]]]], ["block", "power-select", [], ["searchEnabled", false, "class", "ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium ko-admin_views_edit_select", "renderInPlace", true, "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [98, 24], [98, 56]]]], "options", ["subexpr", "@mut", [["get", "sortOrderDirections", ["loc", [null, [99, 20], [99, 39]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedSortingDirection", ["loc", [null, [100, 21], [100, 45]]]]], [], []], "onchange", ["subexpr", "action", ["selectOrderByDirection"], [], ["loc", [null, [101, 21], [101, 54]]]]], 2, null, ["loc", [null, [94, 10], [105, 27]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.orderBy", ["loc", [null, [106, 45], [106, 71]]]]], [], []]], ["loc", [null, [106, 15], [106, 73]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 109,
                    "column": 6
                  },
                  "end": {
                    "line": 109,
                    "column": 68
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.description.sorting"], [], ["loc", [null, [109, 29], [109, 68]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 110,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [75, 6], [108, 24]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [109, 6], [109, 91]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 110,
                  "column": 4
                },
                "end": {
                  "line": 112,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["admin.views.edit.select_columns"], [], ["loc", [null, [111, 6], [111, 45]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 113,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "currentView.columns.length", ["loc", [null, [74, 10], [74, 36]]]]], [], 0, 1, ["loc", [null, [74, 4], [112, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 119,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [9, 15], [9, 33]]]]], ["loc", [null, [6, 2], [10, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.view_details"], [], ["loc", [null, [12, 33], [12, 71]]]]], 0, null, ["loc", [null, [12, 2], [26, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.sharing"], [], ["loc", [null, [28, 33], [28, 66]]]]], 1, null, ["loc", [null, [28, 2], [51, 27]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "currentView.viewType", ["loc", [null, [53, 17], [53, 37]]]], "TRASH"], [], ["loc", [null, [53, 13], [53, 46]]]]], [], ["loc", [null, [53, 8], [53, 47]]]]], [], 2, null, ["loc", [null, [53, 2], [67, 9]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.configure_layout"], [], ["loc", [null, [69, 33], [69, 75]]]]], 3, null, ["loc", [null, [69, 2], [71, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.sorting"], [], ["loc", [null, [73, 33], [73, 66]]]]], 4, null, ["loc", [null, [73, 2], [113, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [116, 13], [116, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [117, 15], [117, 33]]]]], ["loc", [null, [115, 2], [118, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 120,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [2, 9], [2, 15]]]]], [], []], "onSubmit", ["subexpr", "action", ["saveView"], [], ["loc", [null, [3, 11], [3, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [4, 12], [4, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [119, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin-card-team/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-admin-card-team'],
    team: null,

    showMembers: false,

    hasMembers: _ember['default'].computed.gt('team.memberCount', 0),
    limitedMembers: _ember['default'].computed('team.members.[]', function () {
      return this.get('team.members').slice(0, 9);
    })
  });
});
define("frontend-cp/components/ko-admin-card-team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-card-team__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2, "class", "ko-admin-card-team__title");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "t-caption");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["content", "team.title", ["loc", [null, [4, 6], [4, 20]]]], ["attribute", "class", ["concat", [["subexpr", "qa-cls", ["qa-admin-card-team__member-count"], [], ["loc", [null, [7, 19], [7, 64]]]]]]], ["content", "team.memberCount", ["loc", [null, [7, 66], [7, 86]]]], ["inline", "t", ["admin.teams.agent"], ["numAgents", ["subexpr", "@mut", [["get", "team.memberCount", ["loc", [null, [7, 128], [7, 144]]]]], [], []]], ["loc", [null, [7, 94], [7, 146]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-admin-card-team-members__item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "member.avatar", ["loc", [null, [16, 72], [16, 85]]]]], [], []]], ["loc", [null, [16, 53], [16, 87]]]]],
          locals: ["member"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-card-team__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "ko-admin-card-team-members");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "limitedMembers", ["loc", [null, [15, 14], [15, 28]]]]], [], 0, null, ["loc", [null, [15, 6], [17, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["session.admin.people.teams.edit", ["get", "team.id", ["loc", [null, [1, 45], [1, 52]]]]], ["class", "t-naked-link"], 0, null, ["loc", [null, [1, 0], [10, 12]]]], ["block", "if", [["subexpr", "and", [["get", "showMembers", ["loc", [null, [12, 11], [12, 22]]]], ["get", "hasMembers", ["loc", [null, [12, 23], [12, 33]]]]], [], ["loc", [null, [12, 6], [12, 34]]]]], [], 1, null, ["loc", [null, [12, 0], [20, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin-card-user/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    userSelectedAction: null,
    isSelected: false,
    actions: {
      onUserSelected: function onUserSelected(user, isSelected) {
        this.sendAction('userSelectedAction', user, isSelected);
      }
    }
  });
});
define("frontend-cp/components/ko-admin-card-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flag flag--auto flag--small");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "flag__img");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "flag__body");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "t-bold");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3, "class", "t-caption");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "user.avatar", ["loc", [null, [4, 25], [4, 36]]]]], [], []]], ["loc", [null, [4, 6], [4, 38]]]], ["content", "user.fullName", ["loc", [null, [8, 8], [8, 25]]]], ["content", "user.role.title", ["loc", [null, [11, 8], [11, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin-selectable-card", [], ["model", ["subexpr", "@mut", [["get", "user", ["loc", [null, [1, 34], [1, 38]]]]], [], []], "isSelected", ["subexpr", "@mut", [["get", "isSelected", ["loc", [null, [1, 50], [1, 60]]]]], [], []], "onSelectedAction", "onUserSelected"], 0, null, ["loc", [null, [1, 0], [15, 29]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin-selectable-card/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    onSelectedAction: null,
    isActive: true,
    isSelected: false,

    classNameBindings: ['isActive::ko-admin-selectable-card--inactive', 'isSelected:ko-admin-selectable-card--selected'],

    click: function click(e) {
      e.preventDefault();
      this.send('onSelected', !this.get('isSelected'));
    },

    actions: {
      onSelected: function onSelected(isSelected) {
        this.toggleProperty('isSelected');
        this.sendAction('onSelectedAction', this.get('model'), isSelected);
      }
    }
  });
});
define("frontend-cp/components/ko-admin-selectable-card/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-selectable-card/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-selectable-card__checkbox");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-selectable-card__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "ko-checkbox", [], ["large", true, "checked", ["subexpr", "@mut", [["get", "isSelected", ["loc", [null, [2, 36], [2, 46]]]]], [], []], "onCheck", "onSelected"], ["loc", [null, [2, 2], [2, 69]]]], ["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var inject = _ember['default'].inject;
  var Component = _ember['default'].Component;
  exports['default'] = Component.extend({
    notification: inject.service(),
    intl: inject.service(),
    routing: inject.service('-routing'),
    classNames: ['ko-agent-dropdown'],
    transitionToRouteAction: 'transitionToRoute',
    navItems: [{ name: 'case', text: 'Case', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/case.svg' }, { name: 'user', text: 'User', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/user.svg' }, { name: 'organization', text: 'Organization', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/organization.svg' }],

    // Actions
    actions: {
      reset: function reset() {
        this.set('selectedNavItem', null);
      },

      onTabCreateComplete: function onTabCreateComplete(route, model) {
        this._createSuccessNotification(route);
        this.get('routing').transitionTo(route, [model]);
      },

      transitionToRoute: function transitionToRoute(dropdown) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        this.sendAction.apply(this, ['transitionToRouteAction'].concat(rest));
        dropdown.actions.close();
      }
    },

    // Methods

    _createSuccessNotification: function _createSuccessNotification(route) {
      var notificationMessage = null;

      switch (route) {
        case 'session.agent.users.user':
          notificationMessage = this.get('intl').findTranslationByKey('users.user.created');
          break;
        case 'session.agent.cases.case':
          // intentionally left blank, because at this step we do not create a Case
          break;
        case 'session.agent.organisations.organisation':
          notificationMessage = this.get('intl').findTranslationByKey('organisation.organisation.created');
          break;
      }

      if (notificationMessage) {
        this.get('notification').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    }
  });
});
define('frontend-cp/components/ko-agent-dropdown/create-case/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus', 'moment'], function (exports, _ember, _frontendCpMixinsAutofocus, _moment) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend(_frontendCpMixinsAutofocus['default'], {
    isDisabled: false,
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),
    fields: null,
    filteredUsers: null,

    // Lifecycle hooks
    init: function init() {
      this._super.apply(this, arguments);
      var intl = this.get('intl');
      var requesterErrorText = intl.findTranslationByKey('generic.create_case_panel.requester_required');
      this.set('fields', _ember['default'].Object.create({
        requester: {
          value: null,
          validator: function validator(value) {
            return value ? null : requesterErrorText;
          }
        }
      }));
      this.set('filteredUsers', null);
    },

    // CPs
    requesterName: computed('fields.requester.value.fullName', {
      get: function get() {
        return this.get('fields.requester.value.fullName');
      },
      set: function set(_, v) {
        return v;
      }
    }),

    // Actions
    actions: {
      searchUsers: function searchUsers(filterString) {
        var _this = this;

        if (this.get('fields.requester.value')) {
          this.set('fields.requester.value', null);
          this.set('requesterName', filterString);
        }

        this.get('store').unloadAll('search-result-group');
        return new _ember['default'].RSVP.Promise(function (resolve) {
          _ember['default'].run.debounce(_this, _this._searchUsers, filterString, resolve, 200);
        });
      },

      selectRequester: function selectRequester(user) {
        this.set('fields.requester.value', user);
        _ember['default'].run.schedule('afterRender', this.$('.button--primary'), 'focus');
      },

      submit: function submit() {
        this.get('onSubmit')('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: this.get('fields.requester.value.id') } });

        this.get('metrics').trackEvent({
          event: 'Case Draft Created',
          category: 'Case',
          action: 'click',
          label: '+ button'
        });
      }
    },

    // Methods
    _searchUsers: function _searchUsers(filterString, resolve) {
      if (filterString.length === 0) {
        return resolve([]);
      }

      return this.get('store').query('user', {
        name: filterString
      }).then(function (results) {
        return resolve(results);
      }, function () {
        return resolve([]);
      });
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-agent-dropdown/create-case/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 79
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.create_case_panel.requester_label"], [], ["loc", [null, [8, 30], [8, 79]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 59
                },
                "end": {
                  "line": 16,
                  "column": 143
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode(", ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "user.organization.name", ["loc", [null, [16, 110], [16, 136]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 23,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown-create-case__dropdown-user");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "flag flag--small flag--auto");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "flag__img");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("img");
            dom.setAttribute(el4, "class", "ko-agent-dropdown-create-case__dropdown-user-image");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "flag__body");
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "t-bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n              ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            dom.setAttribute(el4, "class", "t-caption");
            var el5 = dom.createTextNode("\n                ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n              ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var element1 = dom.childAt(element0, [1, 1]);
            var element2 = dom.childAt(element0, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'src');
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
            morphs[2] = dom.createMorphAt(element2, 2, 2);
            morphs[3] = dom.createMorphAt(dom.childAt(element2, [4]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "user.avatar", ["loc", [null, [13, 85], [13, 96]]]]]]], ["content", "user.fullName", ["loc", [null, [16, 35], [16, 52]]]], ["block", "if", [["get", "user.organization", ["loc", [null, [16, 65], [16, 82]]]]], [], 0, null, ["loc", [null, [16, 59], [16, 150]]]], ["content", "user.primaryEmailAddress", ["loc", [null, [18, 16], [18, 44]]]]],
          locals: ["user"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ember-power-select-option");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["generic.search.no_results"], [], ["loc", [null, [25, 10], [25, 43]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [8, 6], [8, 103]]]], ["block", "power-select-typeahead", [], ["selected", ["subexpr", "@mut", [["get", "requesterName", ["loc", [null, [9, 41], [9, 54]]]]], [], []], "search", ["subexpr", "action", ["searchUsers"], [], ["loc", [null, [9, 62], [9, 84]]]], "onchange", ["subexpr", "action", ["selectRequester"], [], ["loc", [null, [9, 94], [9, 120]]]], "renderInPlace", true], 1, 2, ["loc", [null, [9, 6], [27, 33]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 4
            },
            "end": {
              "line": 29,
              "column": 80
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-agent-dropdown-create-case__loader"], ["loc", [null, [29, 21], [29, 80]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-agent-dropdown-create-case__input");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__footer");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/1 t-right");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button t-small");
        dom.setAttribute(el4, "name", "cancel");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button button--primary");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [5, 1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createMorphAt(element4, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
        morphs[4] = dom.createAttrMorph(element6, 'onclick');
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createAttrMorph(element7, 'disabled');
        morphs[7] = dom.createAttrMorph(element7, 'onclick');
        morphs[8] = dom.createMorphAt(element7, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_case_panel.title"], [], ["loc", [null, [2, 39], [2, 78]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.requester", ["loc", [null, [7, 27], [7, 43]]]]], [], []]], 0, null, ["loc", [null, [7, 4], [28, 22]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [29, 10], [29, 19]]]]], [], 1, null, ["loc", [null, [29, 4], [29, 87]]]], ["inline", "t", ["generic.create_case_panel.info"], [], ["loc", [null, [31, 39], [31, 77]]]], ["attribute", "onclick", ["get", "onCancel", ["loc", [null, [34, 77], [34, 85]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [35, 10], [35, 32]]]], ["attribute", "disabled", ["subexpr", "not", [["get", "fields.requester.value.id", ["loc", [null, [37, 76], [37, 101]]]]], [], ["loc", [null, [37, 70], [37, 103]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [37, 112], [37, 131]]]]], ["inline", "t", ["generic.next"], [], ["loc", [null, [38, 10], [38, 30]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/create-organisation/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},

    store: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    fields: null,
    erroredDomains: null,

    init: function init() {
      var _this = this;

      this._super();
      this.set('erroredDomains', []);
      this.set('organization', this.get('store').createRecord('organization'));

      this.set('fields', _ember['default'].Object.create({
        domains: {
          value: []
        }
      }));

      _ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-organization__name').focus();
      });
    },

    actions: {
      addDomain: function addDomain(domainName) {
        if (!domainName) {
          return;
        }

        if (this.get('fields.domains.value').any(function (addedDomain) {
          return addedDomain.get('domain') === domainName;
        })) {
          return;
        }
        var domain = this.get('store').createRecord('identity-domain', { domain: domainName });
        this.get('fields.domains.value').pushObject(domain);
      },

      removeDomain: function removeDomain(domain) {
        this.get('fields.domains.value').removeObject(domain);

        this.$('.js-tag-input').focus();
        return false;
      },

      submit: function submit() {
        var _this2 = this;

        var organization = this.get('organization');
        var onSubmit = this.get('onSubmit');
        organization.set('domains', this.get('fields.domains.value'));
        if (onSubmit) {
          onSubmit();
        }
        return organization.save().then(function (organization) {
          organization.set('domains', organization.get('domains').filter(function (domain) {
            return domain.get('id');
          }));
          _this2.get('dropdown.actions').close();

          _this2.get('metrics').trackEvent({
            event: 'Organization Created',
            category: 'Organization',
            action: 'click',
            label: '+ button'
          });

          return organization;
        });
      },

      error: function error() {
        this.get('metrics').trackEvent({
          event: 'Organization Creation Failed',
          category: 'Organization',
          action: 'click',
          label: '+ button'
        });
      }
    }
  });
});
define("frontend-cp/components/ko-agent-dropdown/create-organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 13,
                  "column": 82
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_organisation_panel.name_label"], [], ["loc", [null, [13, 30], [13, 82]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 106]]]], ["inline", "input", [], ["type", "text", "tabindex", 1, "class", "ko-agent-dropdown-create-organisation__name input-text u-1/1", "name", "name", "value", ["subexpr", "@mut", [["get", "organization.name", ["loc", [null, [14, 124], [14, 141]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 151], [14, 163]]]]], [], []]], ["loc", [null, [14, 6], [14, 165]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "organization.errors.name", ["loc", [null, [15, 36], [15, 60]]]]], [], []]], ["loc", [null, [15, 6], [15, 62]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 19,
                  "column": 84
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_organisation_panel.domain_label"], [], ["loc", [null, [19, 30], [19, 84]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown-create-organisation__tags-input");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [19, 6], [19, 108]]]], ["inline", "ko-tags", [], ["inputTabindex", 2, "errorTags", ["subexpr", "@mut", [["get", "erroredDomains", ["loc", [null, [23, 20], [23, 34]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "fields.domains.value", ["loc", [null, [24, 23], [24, 43]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addDomain"], [], ["loc", [null, [25, 24], [25, 44]]]], "onTagRemoval", ["subexpr", "action", ["removeDomain"], [], ["loc", [null, [26, 23], [26, 46]]]]], ["loc", [null, [21, 8], [26, 48]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [12, 4], [16, 22]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.domains", ["loc", [null, [18, 27], [18, 41]]]]], [], []]], 1, null, ["loc", [null, [18, 4], [28, 22]]]], ["inline", "t", ["generic.create_organisation_panel.info"], [], ["loc", [null, [30, 41], [30, 87]]]], ["inline", "ko-form/buttons", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [32, 15], [32, 23]]]]], [], []], "submitLabel", ["subexpr", "t", ["generic.create_organisation_panel.submit"], [], ["loc", [null, [33, 18], [33, 64]]]], "cancelLabel", ["subexpr", "t", ["generic.cancel"], [], ["loc", [null, [34, 18], [34, 38]]]]], ["loc", [null, [31, 4], [34, 40]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_organisation_panel.title"], [], ["loc", [null, [2, 39], [2, 86]]]], ["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [7, 11], [7, 17]]]]], [], []], "onSubmit", ["subexpr", "action", ["submit"], [], ["loc", [null, [8, 13], [8, 30]]]], "onError", ["subexpr", "action", ["error"], [], ["loc", [null, [9, 12], [9, 28]]]], "onSuccess", ["subexpr", "@mut", [["get", "onCreate", ["loc", [null, [10, 14], [10, 22]]]]], [], []]], 0, null, ["loc", [null, [6, 2], [35, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/create-user/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpMixinsAutofocus, _frontendCpUtilsFormatValidations) {

  var composeValidators = function composeValidators() {
    for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
      validators[_key] = arguments[_key];
    }

    return function (value) {
      return validators.reduce(function (acc, validator) {
        return acc || validator(value);
      }, null);
    };
  };

  exports['default'] = _ember['default'].Component.extend(_frontendCpMixinsAutofocus['default'], {
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},

    fields: null,

    intlService: _ember['default'].inject.service('intl'),
    notificationService: _ember['default'].inject.service('notification'),
    metrics: _ember['default'].inject.service(),
    store: _ember['default'].inject.service(),

    init: function init() {
      var _this = this;

      this._super();
      var intlService = this.get('intlService');
      var nameRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.name_required');
      var emailRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_required');
      var invalidEmailTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_invalid');

      this.set('fields', _ember['default'].Object.create({
        full_name: {
          value: '',
          validator: function validator(name) {
            return Boolean(name) ? null : nameRequiredTranslation;
          }
        },
        email: {
          value: '',
          validator: composeValidators(function (email) {
            return Boolean(email) ? null : emailRequiredTranslation;
          }, function (email) {
            return (0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email) ? null : invalidEmailTranslation;
          })
        }
      }));

      _ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-user__first-name').focus();
      });
    },

    actions: {
      onError: function onError(error) {
        if (error.errors.findBy('code', 'FIELD_DUPLICATE')) {
          var intlService = this.get('intlService');
          this.get('notificationService').removeAll();
          this.get('notificationService').add({
            type: 'error',
            title: intlService.findTranslationByKey('generic.create_user_panel.user_exists_toast'),
            autodismiss: true,
            dismissable: false
          });
          this.set('fields.email.errors', [{
            message: intlService.findTranslationByKey('generic.create_user_panel.user_exists')
          }]);
        }

        this.get('metrics').trackEvent({
          event: 'User Creation Failed',
          category: 'User',
          action: 'click',
          label: '+ button'
        });
      },

      submit: function submit() {
        var _this2 = this;

        var fields = this.get('fields');
        var store = this.get('store');
        var onSubmit = this.get('onSubmit');
        if (onSubmit) {
          onSubmit();
        }
        var savePromise = store.findRecord('role', 4).then(function (roleModel) {
          var email = store.createRecord('identity-email', {
            isPrimary: true,
            email: fields.get('email.value')
          });
          return store.createRecord('user', {
            role: roleModel,
            fullName: fields.get('full_name.value'),
            emails: [email]
          }).save();
        });

        savePromise.then(function () {
          _this2.get('metrics').trackEvent({
            event: 'User Created',
            category: 'User',
            action: 'click',
            label: '+ button'
          });

          return _this2.get('dropdown.actions').close();
        });

        return savePromise;
      }
    }
  });
});
/* eslint-disable camelcase */
define("frontend-cp/components/ko-agent-dropdown/create-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 13,
                  "column": 74
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_user_panel.name_label"], [], ["loc", [null, [13, 30], [13, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 98]]]], ["inline", "input", [], ["type", "text", "tabindex", 1, "class", "ko-agent-dropdown-create-user__first-name input-text u-1/1", "name", "full_name", "value", ["subexpr", "@mut", [["get", "fields.full_name.value", ["loc", [null, [14, 127], [14, 149]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 159], [14, 171]]]]], [], []]], ["loc", [null, [14, 6], [14, 173]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 75
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_user_panel.email_label"], [], ["loc", [null, [18, 30], [18, 75]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [18, 6], [18, 99]]]], ["inline", "input", [], ["type", "text", "tabindex", 2, "class", "input-text u-1/1", "name", "email", "value", ["subexpr", "@mut", [["get", "fields.email.value", ["loc", [null, [19, 81], [19, 99]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [19, 109], [19, 121]]]]], [], []]], ["loc", [null, [19, 6], [19, 123]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.full_name", ["loc", [null, [12, 27], [12, 43]]]]], [], []]], 0, null, ["loc", [null, [12, 4], [15, 22]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.email", ["loc", [null, [17, 27], [17, 39]]]]], [], []]], 1, null, ["loc", [null, [17, 4], [20, 22]]]], ["inline", "t", ["generic.create_user_panel.info"], [], ["loc", [null, [22, 41], [22, 79]]]], ["inline", "ko-form/buttons", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [24, 15], [24, 23]]]]], [], []], "submitLabel", ["subexpr", "t", ["generic.create_user_panel.submit"], [], ["loc", [null, [25, 18], [25, 56]]]], "cancelLabel", ["subexpr", "t", ["generic.cancel"], [], ["loc", [null, [26, 18], [26, 38]]]]], ["loc", [null, [23, 4], [26, 40]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_user_panel.title"], [], ["loc", [null, [2, 39], [2, 78]]]], ["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [7, 11], [7, 17]]]]], [], []], "onSubmit", ["subexpr", "action", ["submit"], [], ["loc", [null, [8, 13], [8, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onCreate", ["loc", [null, [9, 14], [9, 22]]]]], [], []], "onError", ["subexpr", "action", ["onError"], [], ["loc", [null, [10, 12], [10, 30]]]]], 0, null, ["loc", [null, [6, 2], [27, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-agent-dropdown/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-agent-dropdown/create-user", [], ["dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [5, 17], [5, 25]]]]], [], []], "onCreate", ["subexpr", "action", ["onTabCreateComplete", "session.agent.users.user"], [], ["loc", [null, [6, 17], [6, 74]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [7, 17], [7, 33]]]]], ["loc", [null, [4, 6], [7, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 4
                  },
                  "end": {
                    "line": 12,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-agent-dropdown/create-case", [], ["onSubmit", ["subexpr", "action", ["transitionToRoute", ["get", "dropdown", ["loc", [null, [10, 45], [10, 53]]]]], [], ["loc", [null, [10, 17], [10, 54]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [11, 17], [11, 33]]]]], ["loc", [null, [9, 6], [11, 35]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 4
                    },
                    "end": {
                      "line": 17,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n    ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-agent-dropdown/create-organisation", [], ["dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "onCreate", ["subexpr", "action", ["onTabCreateComplete", "session.agent.organisations.organisation"], [], ["loc", [null, [15, 17], [15, 90]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [16, 17], [16, 33]]]]], ["loc", [null, [13, 6], [16, 35]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 4
                  },
                  "end": {
                    "line": 17,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [12, 18], [12, 38]]]], "organization"], [], ["loc", [null, [12, 14], [12, 54]]]]], [], 0, null, ["loc", [null, [12, 4], [17, 4]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [8, 18], [8, 38]]]], "case"], [], ["loc", [null, [8, 14], [8, 46]]]]], [], 0, 1, ["loc", [null, [8, 4], [17, 4]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [3, 14], [3, 34]]]], "user"], [], ["loc", [null, [3, 10], [3, 42]]]]], [], 0, 1, ["loc", [null, [3, 4], [17, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ko-agent-dropdown__nav-item button-naked");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("img");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "t-center u-mt--");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createAttrMorph(element1, 'src');
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedNavItem", ["loc", [null, [21, 101], [21, 116]]]]], [], ["loc", [null, [21, 96], [21, 117]]]], ["get", "navItem", ["loc", [null, [21, 118], [21, 125]]]]], [], ["loc", [null, [21, 87], [21, 127]]]]], ["attribute", "src", ["concat", [["get", "navItem.icon", ["loc", [null, [22, 22], [22, 34]]]]]]], ["content", "navItem.text", ["loc", [null, [23, 39], [23, 55]]]]],
            locals: ["navItem"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown__nav-items box box--secondary");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "navItems", ["loc", [null, [20, 14], [20, 22]]]]], [], 0, null, ["loc", [null, [20, 6], [25, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "selectedNavItem", ["loc", [null, [2, 8], [2, 23]]]]], [], 0, 1, ["loc", [null, [2, 2], [27, 9]]]]],
        locals: ["dropdown"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__add-icon i-plus i-size-18");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "dropdownClass", "ko-agent-dropdown__drop", "onClose", ["subexpr", "action", ["reset"], [], ["loc", [null, [1, 85], [1, 101]]]], "triggerClass", "ko-agent-dropdown__trigger"], 0, 1, ["loc", [null, [1, 0], [30, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-avatar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    avatar: null,
    size: 'normal', // [small | normal | medium | large]

    avatarSizeCls: _ember['default'].computed('size', function () {
      switch (this.get('size')) {
        case 'small':
          return 'ko-avatar__image--small';
        case 'medium':
          return 'ko-avatar__image--medium';
        case 'large':
          return 'ko-avatar__image--large';
      }
    }),

    // will be used flip between avatar / gravatar etc when we need that functionality!
    imageURL: _ember['default'].computed('avatar', function () {
      return this.get('avatar');
    })
  });
});
define("frontend-cp/components/ko-avatar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-avatar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1, "alt", "");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element0, 'src');
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-avatar__image ", ["get", "avatarSizeCls", ["loc", [null, [1, 31], [1, 44]]]]]]], ["attribute", "src", ["concat", [["get", "imageURL", ["loc", [null, [1, 55], [1, 63]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-breadcrumbs/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-breadcrumbs/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 10
                  },
                  "end": {
                    "line": 8,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "breadcrumb.label", ["loc", [null, [7, 12], [7, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [6, 21], [6, 41]]]], ["subexpr", "hash-to-query-params", [["get", "breadcrumb.queryParams", ["loc", [null, [6, 64], [6, 86]]]]], [], ["loc", [null, [6, 42], [6, 87]]]]], ["class", "breadcrumbs__item", "current-when", ["subexpr", "readonly", [["get", "breadcrumb.routeName", ["loc", [null, [6, 137], [6, 157]]]]], [], ["loc", [null, [6, 127], [6, 158]]]]], 0, null, ["loc", [null, [6, 10], [8, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 10,
                      "column": 10
                    },
                    "end": {
                      "line": 12,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "breadcrumb.label", ["loc", [null, [11, 12], [11, 32]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 8
                  },
                  "end": {
                    "line": 13,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [10, 21], [10, 41]]]], ["get", "breadcrumb.dynamicSegments.firstObject", ["loc", [null, [10, 42], [10, 80]]]], ["subexpr", "hash-to-query-params", [["get", "breadcrumb.queryParams", ["loc", [null, [10, 103], [10, 125]]]]], [], ["loc", [null, [10, 81], [10, 126]]]]], ["class", "breadcrumbs__item", "current-when", ["subexpr", "readonly", [["get", "breadcrumb.routeName", ["loc", [null, [10, 176], [10, 196]]]]], [], ["loc", [null, [10, 166], [10, 197]]]]], 0, null, ["loc", [null, [10, 10], [12, 22]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [9, 22], [9, 55]]]], 1], [], ["loc", [null, [9, 18], [9, 58]]]]], [], 0, null, ["loc", [null, [9, 8], [13, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [5, 18], [5, 51]]]], 0], [], ["loc", [null, [5, 14], [5, 54]]]]], [], 0, 1, ["loc", [null, [5, 8], [13, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 10
                  },
                  "end": {
                    "line": 18,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "breadcrumb.label", ["loc", [null, [17, 12], [17, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [16, 21], [16, 41]]]]], ["class", "breadcrumbs__item"], 0, null, ["loc", [null, [16, 10], [18, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 10
                    },
                    "end": {
                      "line": 22,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "breadcrumb.label", ["loc", [null, [21, 12], [21, 32]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [20, 21], [20, 41]]]], ["get", "breadcrumb.dynamicSegments.firstObject", ["loc", [null, [20, 42], [20, 80]]]]], ["class", "breadcrumbs__item"], 0, null, ["loc", [null, [20, 10], [22, 22]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [19, 22], [19, 55]]]], 1], [], ["loc", [null, [19, 18], [19, 58]]]]], [], 0, null, ["loc", [null, [19, 8], [23, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 24,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [15, 18], [15, 51]]]], 0], [], ["loc", [null, [15, 14], [15, 54]]]]], [], 0, 1, ["loc", [null, [15, 8], [23, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "breadcrumb.queryParams", ["loc", [null, [4, 12], [4, 34]]]]], [], 0, 1, ["loc", [null, [4, 6], [24, 13]]]]],
        locals: ["breadcrumb"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "breadcrumbs");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "breadcrumbs", ["loc", [null, [3, 12], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 4], [25, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case/macro-selector/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var map = _npmLodash['default'].map;
  var groupBy = _npmLodash['default'].groupBy;
  var partition = _npmLodash['default'].partition;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onMacroSelect: null,
    isDisabled: false,
    macros: [],

    // HTML
    classNames: ['ko-case_macro-selector'],

    // build a value list for the option drilldown
    macroValueList: _ember['default'].computed('macros.[]', function () {
      var items = this.get('macros').map(function (macro) {
        return {
          id: _ember['default'].get(macro, 'id'),
          value: _ember['default'].get(macro, 'title').split(/\\/)
        };
      });

      var group = function group(items) {
        return map(groupBy(items, function (item) {
          return item.value[0];
        }), function (items, label) {
          var _partition = partition(items, function (item) {
            return item.value.length > 1;
          });

          var _partition2 = _slicedToArray(_partition, 2);

          var children = _partition2[0];

          var _partition2$1 = _slicedToArray(_partition2[1], 1);

          var current = _partition2$1[0];

          return {
            id: current ? current.id : null,
            value: label,
            children: children.length ? group(children.map(function (item) {
              return {
                id: item.id,
                value: item.value.slice(1)
              };
            })) : null
          };
        });
      };

      return group(items);
    }),

    actions: {
      onMacroSelect: function onMacroSelect(macroId) {
        var selectedMacro = this.get('macros').filter(function (macro) {
          return macro.get('id') === macroId;
        }).get('firstObject');
        this.attrs.onMacroSelect(selectedMacro);
      }
    }
  });
});
define('frontend-cp/components/ko-case/macro-selector/options/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    actions: {
      preserveFocus: function preserveFocus(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
  });
});
define("frontend-cp/components/ko-case/macro-selector/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case/macro-selector/options/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "role", "menuitem");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onmousedown');
          morphs[2] = dom.createAttrMorph(element0, 'onmouseup');
          morphs[3] = dom.createAttrMorph(element0, 'onmousemove');
          morphs[4] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ember-power-select-option ", ["subexpr", "ember-power-select-option-classes", [["get", "opt", ["loc", [null, [3, 73], [3, 76]]]], ["get", "selection", ["loc", [null, [3, 77], [3, 86]]]], ["get", "highlighted", ["loc", [null, [3, 87], [3, 98]]]]], [], ["loc", [null, [3, 37], [3, 100]]]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["preserveFocus"], [], ["loc", [null, [4, 16], [4, 42]]]]], ["attribute", "onmouseup", ["subexpr", "action", [["get", "select.actions.select", ["loc", [null, [5, 23], [5, 44]]]], ["get", "opt", ["loc", [null, [5, 45], [5, 48]]]]], [], ["loc", [null, [5, 14], [5, 50]]]]], ["attribute", "onmousemove", ["subexpr", "action", [["get", "select.actions.highlight", ["loc", [null, [6, 25], [6, 49]]]], ["get", "opt", ["loc", [null, [6, 50], [6, 53]]]]], [], ["loc", [null, [6, 16], [6, 55]]]]], ["inline", "yield", [["get", "opt", ["loc", [null, [9, 12], [9, 15]]]], ["get", "lastSearchedText", ["loc", [null, [9, 16], [9, 32]]]]], [], ["loc", [null, [9, 4], [9, 34]]]]],
        locals: ["opt"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/options/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "options", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-case/macro-selector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/drill-down", [], ["options", ["subexpr", "@mut", [["get", "macroValueList", ["loc", [null, [2, 10], [2, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onValueChange", ["subexpr", "action", ["onMacroSelect"], [], ["loc", [null, [4, 16], [4, 40]]]], "hasEmptyOption", false, "searchPlaceholder", ["subexpr", "t", ["cases.applymacroplaceholder"], [], ["loc", [null, [6, 20], [6, 53]]]], "searchEnabled", true, "triggerComponent", "ko-case/macro-selector/trigger", "optionsComponent", "ko-case/macro-selector/options", "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [10, 13], [10, 23]]]]], [], []], "extra", ["subexpr", "hash", [], ["label", ["subexpr", "t", ["cases.macro"], [], ["loc", [null, [12, 10], [12, 27]]]]], ["loc", [null, [11, 8], [13, 3]]]]], ["loc", [null, [1, 0], [14, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-case/macro-selector/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/select/button", [], ["label", ["subexpr", "@mut", [["get", "extra.label", ["loc", [null, [1, 34], [1, 45]]]]], [], []]], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case/sla-sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    sla: null,
    slaMetrics: null
  });
});
define('frontend-cp/components/ko-case/sla-sidebar/metric/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    intl: _ember['default'].inject.service(),

    metric: null,

    tagName: 'tr',

    statusClassName: _ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');
      return 'ko-case_sla-sidebar__data--' + status.toLowerCase();
    }),

    title: _ember['default'].computed('metric.title', function () {
      var title = this.get('metric.title');
      return this.get('intl').findTranslationByKey('cases.sla.title.' + title);
    }),

    iconClass: _ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state');
      var status = this.get('metric.status');

      var iconClass = this.getIconClassName(state, status);
      return iconClass + ' t-' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });
});
define("frontend-cp/components/ko-case/sla-sidebar/metric/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    -\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "metric.numberOfWholeDaysRemaining", ["loc", [null, [13, 4], [13, 41]]]], ["inline", "t", ["generic.day_abbreviation"], [], ["loc", [null, [13, 41], [13, 73]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "metric.numberOfWholeHoursRemaining", ["loc", [null, [17, 4], [17, 42]]]], ["inline", "t", ["generic.hour_abbreviation"], [], ["loc", [null, [17, 42], [17, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "ko-case_sla-sidebar__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "u-pr- t-right");
        var el2 = dom.createTextNode("\n  in\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [10]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        morphs[5] = dom.createMorphAt(element0, 7, 7);
        morphs[6] = dom.createMorphAt(element0, 8, 8);
        morphs[7] = dom.createAttrMorph(element1, 'class');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [2, 2], [2, 11]]]], ["attribute", "class", ["concat", ["ko-case_sla-sidebar__data ", ["get", "statusClassName", ["loc", [null, [7, 39], [7, 54]]]]]]], ["block", "if", [["get", "metric.isBreached", ["loc", [null, [8, 8], [8, 25]]]]], [], 0, null, ["loc", [null, [8, 2], [10, 9]]]], ["block", "if", [["get", "metric.numberOfWholeDaysRemaining", ["loc", [null, [12, 8], [12, 41]]]]], [], 1, null, ["loc", [null, [12, 2], [14, 9]]]], ["block", "if", [["get", "metric.numberOfWholeHoursRemaining", ["loc", [null, [16, 8], [16, 42]]]]], [], 2, null, ["loc", [null, [16, 2], [18, 9]]]], ["content", "metric.numberOfWholeMinutesRemaining", ["loc", [null, [20, 2], [20, 42]]]], ["inline", "t", ["generic.minute_abbreviation"], [], ["loc", [null, [20, 42], [20, 77]]]], ["attribute", "class", ["concat", [["get", "iconClass", ["loc", [null, [22, 14], [22, 23]]]], " i-size-18 i-after"]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/components/ko-case/sla-sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-case/sla-sidebar/metric", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [5, 40], [5, 46]]]]], [], []]], ["loc", [null, [5, 4], [5, 48]]]]],
        locals: ["metric"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("b");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "ko-case_sla-sidebar");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.SLA"], [], ["loc", [null, [1, 3], [1, 22]]]], ["content", "sla.title", ["loc", [null, [1, 27], [1, 40]]]], ["block", "each", [["get", "slaMetrics", ["loc", [null, [4, 10], [4, 20]]]]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNameBindings: ['menuActive', 'noItems:u-hidden'],
    menuActive: false,

    permissionService: _ember['default'].inject.service('permissions'),
    sessionService: _ember['default'].inject.service('session'),

    noItems: _ember['default'].computed('canTrashCase', function () {
      var _this = this;

      var items = ['canTrashCase'];
      return items.filter(function (item) {
        return _this.get(item);
      }).length === 0;
    }),

    canTrashCase: _ember['default'].computed('caseState', 'sessionService.permissions', function () {
      var permission = this.get('permissionService').has('app.case.trash', this.get('case'));
      return permission && this.get('caseState') !== 'TRASH';
    }),

    actions: {
      onTrashCase: function onTrashCase() {
        this.attrs.onTrashCase();
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-case-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "button button--default button--dropdown");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onTrashCase", ["loc", [null, [16, 60], [16, 71]]]]], [], ["loc", [null, [16, 51], [16, 73]]]]], ["inline", "t", ["cases.trash"], [], ["loc", [null, [17, 10], [17, 29]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentstyle", ["loc", [null, [15, 68], [15, 80]]]]], [], []]], 0, null, ["loc", [null, [15, 6], [19, 27]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canTrashCase", ["loc", [null, [14, 10], [14, 22]]]]], [], 0, null, ["loc", [null, [14, 4], [20, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [8, 12], [8, 16]]]], "button"], [], ["loc", [null, [8, 8], [8, 26]]]]], [], 0, null, ["loc", [null, [8, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [13, 12], [13, 16]]]], "content"], [], ["loc", [null, [13, 8], [13, 27]]]]], [], 1, null, ["loc", [null, [13, 2], [21, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["alignRight", true, "onFocusOut", "hideMenu", "onFocusIn", "showMenu", "hideOnChildFocus", true, "hideOnClick", true], 0, null, ["loc", [null, [1, 0], [22, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/component', ['exports', 'ember', 'jquery', 'npm:lodash'], function (exports, _ember, _jquery, _npmLodash) {
  var _slice = Array.prototype.slice;

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var readOnly = _ember['default'].computed.readOnly;

  var dimensions = {
    pageHeaderHeight: 83
  };

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    'case': null,
    postId: null,
    sortOrder: '',
    filter: '',
    caseFields: null,
    priorities: [],
    statuses: [],
    types: [],
    onTabNameUpdate: null,
    onStateUpdate: null,
    onQueryParamsUpdate: null,
    onCaseCreate: null,

    // State
    suggestedTags: null,
    suggestedPeople: null,
    suggestedPeopleLoading: false,
    suggestedPeopleTotal: 0,
    ccPopupProxy: null,

    // HTML
    classNames: ['ko-case-content'],

    // Services
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    notificationService: _ember['default'].inject.service('notification'),
    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    peopleSuggestionService: _ember['default'].inject.service('suggestion/people'),
    intlService: _ember['default'].inject.service('intl'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    pusherService: _ember['default'].inject.service('pusher'),
    metrics: _ember['default'].inject.service(),
    apiAdapter: _ember['default'].inject.service('api-adapter'),
    permissionService: _ember['default'].inject.service('permissions'),
    caseTab: _ember['default'].inject.service(),
    sessionService: _ember['default'].inject.service('session'),
    tabStoreService: _ember['default'].inject.service('tab-store'),

    // Lifecycle hooks
    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);

      if (!oldAttrs || newAttrs['case'].value !== oldAttrs['case'].value) {
        this.get('caseTab').initState(this.get('tabId'), this.get('case'), this.get('defaultReplyChannel'));

        this.set('suggestedPeople', null);
        this.set('suggestedPeopleLoading', false);
        this.set('suggestedPeopleTotal', 0);
        if (this.get('ccPopupProxy') && this.get('ccPopupProxy').close) {
          this.get('ccPopupProxy').close();
        }

        // TODO where is unsubscribe???
        this.get('pusherService').subscribeTo(this.get('case.realtimeChannel'), 'CHANGE', this.get('caseTab'), this.get('caseTab').updateCaseFromPusher, newAttrs.tabId.value, this.get('case.id'));

        if (this.get('case.isNew')) {
          _ember['default'].run.scheduleOnce('afterRender', function () {
            _ember['default'].$('.ql-editor').focus();
          });
        }
      }

      if (!oldAttrs || newAttrs['case'].value !== oldAttrs['case'].value || newAttrs.sortOrder.value !== oldAttrs.sortOrder.value || newAttrs.filter.value !== oldAttrs.filter.value) {
        this.get('caseTab').loadPosts(this.get('tabId'), {
          caseModel: this.get('case'),
          filter: this.get('filter'),
          sortOrder: this.get('sortOrder'),
          postId: this.get('postId')
        });
      }
    },

    // Initializers
    initCcPopupProxy: _ember['default'].on('init', function () {
      this.set('ccPopupProxy', _ember['default'].Object.create());
    }),

    willInsertElement: function willInsertElement() {
      this._super.apply(this, arguments);
      this.handleScroll = this.handleScroll.bind(this);
      (0, _jquery['default'])(window).on('scroll', this.handleScroll);
    },

    willDestroyElement: function willDestroyElement() {
      this._super.apply(this, arguments);
      (0, _jquery['default'])(window).off('scroll', this.handleScroll);
    },
    // CPs

    // State attributes
    tabState: _ember['default'].computed('tabId', function () {
      return this.get('caseTab').getState(this.get('tabId'));
    }),

    channelId: readOnly('tabState.channelId'),
    postContent: readOnly('tabState.postContent'),
    attachedPostFiles: readOnly('tabState.attachedPostFiles'),
    loadingTop: readOnly('tabState.loadingTop'),
    loadingBottom: readOnly('tabState.loadingBottom'),
    bottomPostsAvailable: readOnly('tabState.bottomPostsAvailable'),
    posts: readOnly('tabState.posts'),
    topPostsAvailable: readOnly('tabState.topPostsAvailable'),
    errorMap: readOnly('tabState.errorMap'),
    isSaving: readOnly('tabState.isSaving'),
    replyOptions: readOnly('tabState.replyOptions'),
    editedTags: readOnly('tabState.editedTags'),
    localCustomFields: readOnly('tabState.localCustomFields'),
    propertiesChangeViaPusher: readOnly('tabState.propertiesChangeViaPusher'),
    editedCase: readOnly('tabState.editedCase'),
    isEditInProgress: readOnly('tabState.isEditInProgress'),

    sortOrderTitle: _ember['default'].computed('sortOrder', function () {
      var option = this.get('sortOptions').findBy('content', this.get('sortOrder'));
      var message = this.get('intlService').findTranslationByKey('cases.sort');

      if (option) {
        message += ': ' + option.label;
      }

      return message;
    }),

    sortFilterTitle: _ember['default'].computed('filter', function () {
      var option = this.get('filterOptions').findBy('content', this.get('filter'));
      var message = this.get('intlService').findTranslationByKey('cases.filter');

      if (option) {
        message += ': ' + option.label;
      }

      return message;
    }),

    isRequesterDisabled: _ember['default'].computed('isCaseDisabled', 'features.canEditRequester', function () {
      return this.get('isCaseDisabled') || !this.get('features.canEditRequester');
    }),

    scroller: _ember['default'].computed(function () {
      return document.querySelector(this.container.lookup('application:main').rootElement);
    }),

    stickyOptions: _ember['default'].computed(function () {
      return {
        topSpacing: dimensions.pageHeaderHeight
      };
    }),

    macros: _ember['default'].computed(function () {
      return this.get('store').peekAll('macro');
    }),

    caseForms: _ember['default'].computed(function () {
      return this.get('store').findAll('case-form');
    }),

    enabledCaseForms: _ember['default'].computed('caseForms.[]', function () {
      return this.get('caseForms').filterBy('isEnabled');
    }),

    sortOptions: _ember['default'].computed(function () {
      var intlService = this.get('intlService');
      return [{ label: intlService.findTranslationByKey('cases.sort_options.newest_first'), content: 'newest' }, { label: intlService.findTranslationByKey('cases.sort_options.oldest_first'), content: 'oldest' }];
    }),

    filterOptions: _ember['default'].computed(function () {
      var intlService = this.get('intlService');
      return [{ label: intlService.findTranslationByKey('cases.filter_options.posts'), content: 'posts' }, { label: intlService.findTranslationByKey('cases.filter_options.all'), content: 'all' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_activities'), content: 'posts,activities' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_events'), content: 'posts,events' }];
    }),

    topPost: _ember['default'].computed('posts.[]', function () {
      return this.get('posts').find(function (post) {
        return post.constructor.modelName === 'post';
      });
    }),

    bottomPost: _ember['default'].computed('posts.[]', function () {
      return _npmLodash['default'].findLast(this.get('posts'), function (post) {
        return post.constructor.modelName === 'post';
      });
    }),

    isPeopleAutoCompleteAvailable: _ember['default'].computed('channel', 'channel.isChannelTypeMailbox', function () {
      return this.get('channel.channelType') !== 'NOTE' && this.get('channel.isChannelTypeMailbox');
    }),

    tags: _ember['default'].computed('case.tags.@each.name', function () {
      return this.get('case.tags').map(function (tag) {
        return tag.get('name');
      });
    }),

    availableChannels: _ember['default'].computed('case.id', 'case.replyChannels', 'case.channels', function () {
      if (!this.get('case.isNew')) {
        return this.get('case.replyChannels');
      } else {
        return this.get('case.channels');
      }
    }),

    availableReplyChannels: _ember['default'].computed('availableChannels', function () {
      return this.get('availableChannels').filter(function (channel) {
        return channel.get('channelType') !== 'NOTE';
      });
    }),

    caseOrFormFields: _ember['default'].computed('caseFields', 'editedCase.form', function () {
      var caseFields = this.get('caseFields');
      var form = this.get('editedCase.form');
      return form ? form.get('fields') : caseFields.sortBy('sortOrder');
    }),

    statusField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'STATUS');
    }),

    typeField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'TYPE');
    }),

    priorityField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'PRIORITY');
    }),

    assigneeField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'ASSIGNEE');
    }),

    hasBrand: _ember['default'].computed('case.brand.companyName', function () {
      return Boolean(this.get('case.brand.companyName'));
    }),

    // TODO: Ideally we should be getting the most recently user valid channel
    // this will require bigger changes.. coming soon
    defaultReplyChannel: _ember['default'].computed('case.sourceChannel', 'availableReplyChannels.firstObject', function () {
      return this.get('availableReplyChannels.firstObject');
    }),

    channel: _ember['default'].computed('channelId', 'availableChannels.[]', function () {
      var channelId = this.get('channelId');
      return this.get('availableChannels').find(function (channel) {
        return channel.get('id') === channelId;
      });
    }),

    hasChannel: _ember['default'].computed('case.sourceChannel.channelType', function () {
      return !!this.get('case.sourceChannel.channelType');
    }),

    isCaseDisabled: _ember['default'].computed('case.state', function () {
      return this.get('case.state') === 'TRASH';
    }),

    caseDates: _ember['default'].computed('case.createdAt', 'case.updatedAt', 'case.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('case.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('case.updatedAt') }];
    }),

    replyType: _ember['default'].computed('channel', function () {
      var channelType = this.get('channel.channelType');
      return channelType === 'NOTE' ? 'NOTE' : 'REPLY';
    }),

    canRestoreCase: _ember['default'].computed('case.state', function () {
      return this.get('permissionService').has('app.case.untrash');
    }),

    isContentEdited: _ember['default'].computed('postContent', function () {
      return this.get('postContent').trim() !== '';
    }),

    isSubjectEdited: _ember['default'].computed('editedCase.subject', 'case.subject', function () {
      return this.get('case.subject') !== this.get('editedCase.subject');
    }),

    isRequesterEdited: _ember['default'].computed('editedCase.requester', 'case.requester', function () {
      return this.get('case.requester') !== this.get('editedCase.requester');
    }),

    isAssigneeEdited: _ember['default'].computed('editedCase.assigneeAgent', 'case.assigneeAgent', 'editedCase.assigneeTeam', 'case.assigneeTeam', function () {
      return this.get('case.assigneeAgent') !== this.get('editedCase.assigneeAgent') || this.get('case.assigneeTeam') !== this.get('editedCase.assigneeTeam');
    }),

    isStatusEdited: _ember['default'].computed('editedCase.status', 'case.status', function () {
      return this.get('case.status') !== this.get('editedCase.status');
    }),

    isTypeEdited: _ember['default'].computed('editedCase.caseType', 'case.caseType', function () {
      return this.get('case.caseType') !== this.get('editedCase.caseType');
    }),

    isPriorityEdited: _ember['default'].computed('editedCase.priority', 'case.priority', function () {
      return this.get('case.priority') !== this.get('editedCase.priority');
    }),

    isTagsFieldEdited: _ember['default'].computed('editedTags.[]', 'case.tags.@each.name', function () {
      var editedTags = this.get('editedTags');
      var tags = this.get('case.tags');
      if (editedTags.get('length') !== tags.get('length')) {
        return true;
      }

      var editedTagNames = editedTags.mapBy('name');
      return tags.any(function (tag) {
        return !editedTagNames.includes(tag.get('name'));
      });
    }),

    isFormEdited: _ember['default'].computed('editedCase.form', 'case.form', function () {
      return this.get('case.form') !== this.get('editedCase.form');
    }),

    localCustomFieldsMap: _ember['default'].computed('localCustomFields.@each.value', function () {
      var map = _ember['default'].Object.create();
      this.get('localCustomFields').forEach(function (field) {
        map.set(field.get('field.id'), field.get('value'));
      });
      return map;
    }),

    editedCustomFields: _ember['default'].computed('case.customFields.@each.value', 'localCustomFields.@each.value', function () {
      var _this = this;

      return this.get('localCustomFields').filter(function (fieldObject) {
        var originalFieldObject = _this.get('case.customFields').find(function (field) {
          return field.get('field.id') === fieldObject.get('field.id');
        });
        if (!originalFieldObject) {
          // we do not consider field to be edited if it was undefined and became an empty string
          return Boolean(fieldObject.get('value'));
        }
        if (fieldObject.get('field.fieldType') === 'CHECKBOX') {
          // Special treatment of checkbox values since 10,12 is the same as 12,10
          var sort = function sort(value) {
            return (value || '').split(',').sort().join(',');
          };
          return sort(originalFieldObject.get('value')) !== sort(fieldObject.get('value'));
        } else {
          return originalFieldObject.get('value') !== fieldObject.get('value');
        }
      }).map(function (fieldObject) {
        return fieldObject.get('field.id');
      });
    }),

    editedCustomFieldsMap: _ember['default'].computed('editedCustomFields.[]', function () {
      var map = _ember['default'].Object.create();
      this.get('editedCustomFields').forEach(function (field) {
        map.set(field, true);
      });
      return map;
    }),

    isCustomFieldsEdited: _ember['default'].computed('editedCustomFields.[]', function () {
      return this.get('editedCustomFields.length') > 0;
    }),

    isEdited: _ember['default'].computed.or('isContentEdited', 'isSubjectEdited', 'isRequesterEdited', 'isAssigneeEdited', 'isStatusEdited', 'isTypeEdited', 'isPriorityEdited', 'isTagsFieldEdited', 'isFormEdited', 'isCustomFieldsEdited'),

    isPristine: _ember['default'].computed.not('isEdited'),

    submitDisabled: _ember['default'].computed.or('isSaving', 'isPristine', 'isCaseDisabled'),

    // Actions
    actions: {
      submit: function submit(tabId, model, channel) {
        var _this2 = this;

        if (this.get('caseTab').isUploadInProgress(tabId)) {
          this.get('notificationService').add({
            type: 'warning',
            title: 'Upload in progress',
            autodismiss: true
          });
          return;
        }

        if (model.get('isNew')) {
          this.get('caseTab').create(tabId, model, channel).then(function () {
            _this2.getCaseSaveNotification('create');
            _this2.attrs.onCaseCreate(model);
          });
        } else {
          (function () {
            var action = _this2.get('caseTab').hasReply(tabId) ? 'reply' : 'update';
            var newestFirst = _this2.get('sortOrder') === 'newest' && !_this2.get('topPostsAvailable');

            _this2.get('caseTab')[action](tabId, model, channel, newestFirst).then(function () {
              _this2.getCaseSaveNotification(action);

              if (action === 'reply') {
                window.document.body.scrollTop = 0;
              }
            });
          })();
        }
      },

      dispatch: function dispatch(method, tabId) {
        var _get;

        (_get = this.get('caseTab'))[method].apply(_get, [tabId].concat(_toConsumableArray([].concat(_slice.call(arguments)).slice(2))));
      },

      textAreaFocusActivate: function textAreaFocusActivate() {
        if (!this.get('isContentEdited')) {
          _ember['default'].run.scheduleOnce('afterRender', function () {
            _ember['default'].$('.ql-editor').focus();
          });
        }
      },

      textEditorFocusStateChange: function textEditorFocusStateChange(tabId, state) {
        if (!state) {
          this.get('caseTab').setEditInProgress(tabId, false);
        }
      },

      beginReply: function beginReply(type, tabId, channels) {
        var _this3 = this;

        this.get('caseTab').setEditInProgress(tabId, true);

        var tab = this.get('caseTab').getState(tabId);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          if (type === 'note') {
            _this3.get('caseTab').setNote(tabId, channels);
          } else {
            _this3.get('caseTab').setChannel(tabId, tab.get('lastChannel'));
          }

          _ember['default'].$('.ql-editor').focus();
        });
      },

      trashCase: function trashCase(caseId) {
        var _this4 = this;

        if (confirm(this.get('intl').findTranslationByKey('cases.confirm.trash'))) {
          // eslint-disable-line
          this.get('apiAdapter').trashCase(caseId).then(function () {
            _this4.get('notificationService').success(_this4.get('intl').findTranslationByKey('cases.trash.success_message'));
          });
        }
      },

      restoreCase: function restoreCase(caseId) {
        var _this5 = this;

        this.get('apiAdapter').restoreCase(caseId).then(function () {
          _this5.get('notificationService').success(_this5.get('intl').findTranslationByKey('cases.trash.restore.success_message'));
        });
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        _ember['default'].run.debounce(this, this.suggestTagsCallback, searchTerm, 300);
      },

      replyWithQuote: function replyWithQuote(tabId, post) {
        var content = post.get('contents').split('\n').map(function (line) {
          return '> ' + line;
        }).join('\n');
        this.get('caseTab').setPostContent(tabId, '\n' + content);

        this.get('caseTab').setEditInProgress(tabId, true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });

        this.get('metrics').trackEvent({
          event: 'Case Reply Quote Added',
          category: 'Case',
          action: 'click',
          label: 'quote icon'
        });
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        var _this6 = this;

        if (!searchTerm) {
          this.set('suggestedPeople', null);
          this.set('suggestedPeopleLoading', false);
          return;
        }

        this.set('suggestedPeopleLoading', true);
        var peopleSuggestionService = this.get('peopleSuggestionService');
        var promise = peopleSuggestionService.suggest(searchTerm, selectedPeople);

        promise.then(function (data) {
          if (peopleSuggestionService.isPromiseDiscarded(searchTerm)) {
            return;
          }

          _this6.set('suggestedPeople', data.mapBy('identity').filter(function (identity) {
            return selectedPeople.indexOf(identity.get('email')) === -1;
          }));
          _this6.set('suggestedPeopleTotal', data.get('meta.total'));

          peopleSuggestionService.flushQueue();

          _this6.set('suggestedPeopleLoading', false);
        });
      },

      filter: function filter(_filter) {
        this.attrs.onQueryParamsUpdate({ filter: _filter.content });

        this.get('metrics').trackEvent({
          event: 'Case Feed Filter Changed',
          category: 'Case Feed',
          action: _filter.content,
          label: 'filter dropdown'
        });
      },

      sort: function sort(_sort) {
        this.attrs.onQueryParamsUpdate({ sort: _sort.content });

        this.get('metrics').trackEvent({
          event: 'Case Feed Sort Changed',
          category: 'Case Feed',
          action: _sort.content,
          label: 'sort dropdown'
        });
      }
    },

    // Methods
    handleScroll: function handleScroll() {
      _ember['default'].run.debounce(this, this.updateQueryParamsAfterScroll, 250);
    },

    updateQueryParamsAfterScroll: function updateQueryParamsAfterScroll() {
      if (!this.element) {
        return null;
      }
      if (this.get('onQueryParamsUpdate')) {
        var $feed = this.$('.ko-feed');

        var _$feed$offset = $feed.offset();

        var left = _$feed$offset.left;
        var _top = _$feed$offset.top;

        var scrollTop = this.get('scroller').scrollTop;
        var topPoint = _top - scrollTop;
        if (topPoint < 350) {
          topPoint = 350;
        }
        var el = document.elementFromPoint(left + 40, topPoint);

        var $item = _ember['default'].$(el).closest('.ko-feed_item');

        if ($item.length <= 0) {
          // if we where unable to find ko-feed_item its possible, that we are on the absolute border
          if (_ember['default'].$(el).hasClass('ko-feed_activity__border')) {
            $item = (0, _jquery['default'])(el).parents('.ko-feed_activity').prevAll('.ko-feed_item:first');
          }
          if ($item.length <= 0) {
            return null;
          }
        }

        var postId = $item.data('id');
        if (this.get('posts.firstObject.id') === String(postId)) {
          this.attrs.onQueryParamsUpdate({ postId: null });
        } else {
          this.attrs.onQueryParamsUpdate({ postId: postId });
        }
      }
    },

    suggestTagsCallback: function suggestTagsCallback(searchTerm) {
      var _this7 = this;

      var tagSuggestionService = this.get('tagSuggestionService');
      tagSuggestionService.suggest(searchTerm).then(function (data) {
        if (tagSuggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        var exclusions = _this7.get('editedTags').mapBy('name');

        _this7.set('suggestedTags', _npmLodash['default'].difference(data.mapBy('name'), exclusions));
        tagSuggestionService.flushQueue();
      });
    },

    getCaseSaveNotification: function getCaseSaveNotification(type) {
      var notificationMessage = null;

      // TODO: update messages later, for now all are the same.
      switch (type) {
        case 'create':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.created');
          break;
        case 'update':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
        case 'note':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
        case 'reply':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
      }

      if (notificationMessage) {
        this.get('notificationService').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    }
  });
});
define('frontend-cp/components/ko-case-content/dropdown/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    label: '',
    onChange: null,
    options: null,
    value: null,

    contentStyle: null,

    currentValueLabel: _ember['default'].computed('value', 'options', function () {
      var content = this.get('value');
      var option = this.get('options').find(function (option) {
        return option.content === content;
      });
      if (option) {
        return option.label;
      } else {
        return '';
      }
    })
  });
});
define("frontend-cp/components/ko-case-content/dropdown/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-case-content_dropdown__label");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(": ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "ko-case-content_dropdown__current-value");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-select");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [2]), 0, 0);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [3, 50], [3, 59]]]], ["content", "currentValueLabel", ["loc", [null, [3, 115], [3, 136]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 6
                  },
                  "end": {
                    "line": 11,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", [["get", "attrs.onChange", ["loc", [null, [8, 60], [8, 74]]]], ["get", "option.content", ["loc", [null, [8, 75], [8, 89]]]]], [], ["loc", [null, [8, 51], [8, 91]]]]], ["content", "option.label", ["loc", [null, [9, 10], [9, 26]]]]],
              locals: ["option"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "options", ["loc", [null, [7, 14], [7, 21]]]]], [], 0, null, ["loc", [null, [7, 6], [11, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], [], 0, null, ["loc", [null, [6, 4], [12, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [5, 12], [5, 16]]]], "content"], [], ["loc", [null, [5, 8], [5, 27]]]]], [], 1, null, ["loc", [null, [5, 2], [13, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["hideOnClick", true, "hideOnChildFocus", true], 0, null, ["loc", [null, [1, 0], [14, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/assignee/component', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    agent: null,
    admin: null,
    field: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // State
    assigneeValues: [],

    // HTML
    tagName: '',

    // Services
    store: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service('store-cache'),

    // Lifecycle hooks
    setAssigneeValues: _ember['default'].on('init', function () {
      var _this = this;

      var assigneeValuePromises = {
        agents: this.get('store').query('user', { role: 'agent', limit: 500 }),
        teams: this.get('storeCache').query('team', { limit: 10000 })
      };

      _ember['default'].RSVP.hash(assigneeValuePromises).then(function (_ref) {
        var teams = _ref.teams;
        var agents = _ref.agents;

        if (_this.get('isDestroyed')) {
          return;
        }

        var assigneeValues = teams.map(function (team) {
          return {
            value: team.get('title'),
            id: team.get('id'),
            children: []
          };
        });

        agents.forEach(function (agent) {
          var teams = agent.get('teams');
          teams.forEach(function (team) {
            var teamObject = assigneeValues.find(function (i) {
              return i.value === team.get('title');
            }).children;
            teamObject.pushObject({
              id: _this.generateTeamAgentId(team.get('id'), agent.get('id')),
              value: agent.get('fullName')
            });
          });
        });
        _this.set('assigneeValues', assigneeValues);
      });
    }),

    // CPs
    currentlySelectedValue: _ember['default'].computed('agent.id', 'team.id', function () {
      return this.generateTeamAgentId(this.get('team.id'), this.get('agent.id'));
    }),

    placeholder: _ember['default'].computed('team.title', 'agent.fullName', function () {
      return this.get('team.title') + ' / ' + this.get('agent.fullName');
    }),

    generateTeamAgentId: function generateTeamAgentId(teamId, agentId) {
      return agentId ? teamId + '-' + agentId : teamId;
    },

    actions: {
      assigneeSelected: function assigneeSelected(agentTeamId) {
        var _agentTeamId$split = agentTeamId.split('-');

        var _agentTeamId$split2 = _slicedToArray(_agentTeamId$split, 2);

        var teamId = _agentTeamId$split2[0];
        var agentId = _agentTeamId$split2[1];

        var team = this.get('store').peekRecord('team', teamId);
        var agent = agentId ? this.get('store').peekRecord('user', agentId) : null;
        this.attrs.onValueChange(team, agent);
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/drill-down", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "options", ["subexpr", "@mut", [["get", "assigneeValues", ["loc", [null, [4, 10], [4, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "currentlySelectedValue", ["loc", [null, [5, 8], [5, 30]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [6, 11], [6, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [8, 12], [8, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "onValueChange", ["subexpr", "action", ["assigneeSelected"], [], ["loc", [null, [10, 16], [10, 43]]]], "emptyLabel", ["subexpr", "t", ["cases.unassigned"], [], ["loc", [null, [11, 13], [11, 35]]]], "hasEmptyOption", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/forms/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',
    // Attributes
    onFormSelected: null,
    selectedForm: null,
    forms: null,
    isEdited: false,
    isErrored: false,
    isDisabled: false
  });
});
define("frontend-cp/components/ko-case-content/field/forms/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/field/forms/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["cases.form-select"], [], ["loc", [null, [3, 10], [3, 33]]]], "class", "ko-case-content_field_forms", "value", ["subexpr", "@mut", [["get", "selectedForm", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "forms", ["loc", [null, [6, 12], [6, 17]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "attrs.onFormSelected", ["loc", [null, [7, 18], [7, 38]]]]], [], []], "labelPath", "title", "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [9, 13], [9, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [10, 19], [10, 33]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [11, 14], [11, 23]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [12, 15], [12, 25]]]]], [], []], "hasEmptyOption", false, "showBottomArrow", true], ["loc", [null, [2, 2], [15, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/forms/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "forms.length", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/post/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    channels: null,
    channel: null,
    replyType: null, // REPLY | NOTE
    addCC: null,
    onPostContentChanged: null,
    postContent: '',
    peopleCCd: null,
    onChannelChange: null,
    ccPopupProxy: null,

    intl: _ember['default'].inject.service(),

    classNameBindings: ['activeModeClass'],

    twitterSendReply: false,

    onTextEditorFocusStateChange: function onTextEditorFocusStateChange() {},
    onTextEditorFocusActivate: function onTextEditorFocusActivate() {},

    isShowingControls: _ember['default'].computed('replyType', 'channel', 'twitterSendReply', function () {
      // TODO: current behaviour, to hide controls, while they are not implemented.
      return false;

      //if (this.get('replyType') === 'REPLY') {
      //  const isTwitter = this.get('channel.channelType') === 'TWITTER';
      //  const isFacebook = this.get('channel.channelType') === 'FACEBOOK';
      //
      //  return !(isTwitter || isFacebook) || this.get('twitterSendReply');
      //}
      //return true;
    }),

    isTimerAvailable: _ember['default'].computed('replyType', 'channel.isChannelTypeMailbox', function () {
      // @TODO: add logic, when timer gets implemented
      return false;
    }),

    placeholderMessage: _ember['default'].computed('replyType', function () {
      // @TODO extending Quill to support MULTIPLE placeholders will be tricky
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder');
      } else {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder');
      }
    }),

    activeModeClass: _ember['default'].computed('replyType', function () {
      return 'ko-text-editor--' + this.get('replyType').toLowerCase();
    }),

    infoMessage: _ember['default'].computed('replyType', function () {
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('generic.texteditor.notes_reminder');
      }
    }),

    textAreaIsSmall: _ember['default'].computed('channel.channelType', 'infoMessage', function () {
      return this.get('channel.channelType') === 'TWITTER' || this.get('infoMessage');
    }),

    actions: {
      setNote: function setNote() {
        this.attrs.onSetNote();
      },

      onAttachFiles: function onAttachFiles(files) {
        this.get('attachedUploads').send('uploadFiles', files);
      },

      setReply: function setReply() {
        this.attrs.onChannelChange();
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/post/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 2
                },
                "end": {
                  "line": 35,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-channel-selector", [], ["class", ["subexpr", "concat", ["ko-text-editor-header-group__item t-base ", ["subexpr", "if", [["subexpr", "eq", ["REPLY", ["get", "replyType", ["loc", [null, [29, 80], [29, 89]]]]], [], ["loc", [null, [29, 68], [29, 90]]]], "ko-text-editor-header-group__item--active", ""], [], ["loc", [null, [29, 64], [29, 138]]]]], [], ["loc", [null, [29, 12], [29, 139]]]], "onclick", ["subexpr", "action", ["setReply"], [], ["loc", [null, [30, 14], [30, 33]]]], "channels", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [31, 15], [31, 23]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [32, 14], [32, 21]]]]], [], []], "onchange", ["subexpr", "@mut", [["get", "onChannelChange", ["loc", [null, [33, 15], [33, 30]]]]], [], []]], ["loc", [null, [28, 4], [34, 6]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 0
              },
              "end": {
                "line": 40,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [2]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createAttrMorph(element1, 'class');
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "channels.length", ["loc", [null, [27, 8], [27, 23]]]]], [], 0, null, ["loc", [null, [27, 2], [35, 9]]]], ["attribute", "class", ["concat", ["ko-text-editor-header-group__item ", ["subexpr", "if", [["subexpr", "not", [["get", "channels.length", ["loc", [null, [37, 58], [37, 73]]]]], [], ["loc", [null, [37, 53], [37, 74]]]], "ko-text-editor-header-group__item--single"], [], ["loc", [null, [37, 48], [37, 120]]]], " t-base ko-text-editor-header-group__item__set-note ", ["subexpr", "if", [["subexpr", "eq", ["NOTE", ["get", "replyType", ["loc", [null, [37, 188], [37, 197]]]]], [], ["loc", [null, [37, 177], [37, 198]]]], "ko-text-editor-header-group__item--active"], [], ["loc", [null, [37, 172], [37, 244]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["setNote"], [], ["loc", [null, [37, 254], [37, 274]]]]], ["inline", "t", ["cases.notes"], [], ["loc", [null, [38, 4], [38, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 2
                },
                "end": {
                  "line": 49,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-case-content_field_post--editor-overlay");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-case-content_field_post--note-reminder");
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "infoMessage", ["loc", [null, [46, 8], [46, 23]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 4
                  },
                  "end": {
                    "line": 64,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-case-content_field_post--editor-overlay");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-case-content_field_post--twitter-message");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "ko-case-content_field_post__icon i-help");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "ko-case-content_field_post__tooltip");
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.setAttribute(el5, "class", "arrow arrow--top");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n            ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element0, 1, 1);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "ko-checkbox", [], ["class", "u-inline-block", "checked", ["subexpr", "@mut", [["get", "twitterSendReply", ["loc", [null, [54, 20], [54, 36]]]]], [], []], "label", ["subexpr", "t", ["cases.reply-twitter-message"], [], ["loc", [null, [55, 18], [55, 51]]]]], ["loc", [null, [53, 10], [55, 53]]]], ["inline", "t", ["cases.reply-twitter-tooltip"], [], ["loc", [null, [58, 14], [58, 49]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 2
                },
                "end": {
                  "line": 65,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "channel.channelType", ["loc", [null, [50, 14], [50, 33]]]], "TWITTER"], [], ["loc", [null, [50, 10], [50, 44]]]]], [], 0, null, ["loc", [null, [50, 4], [64, 11]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 0
              },
              "end": {
                "line": 66,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "infoMessage", ["loc", [null, [43, 8], [43, 19]]]]], [], 0, 1, ["loc", [null, [43, 2], [65, 9]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [26, 6], [26, 21]]]]], [], 0, null, ["loc", [null, [26, 0], [40, 7]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [42, 6], [42, 26]]]]], [], 1, null, ["loc", [null, [42, 0], [66, 7]]]]],
        locals: ["editor"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 72,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [2, 20], [2, 35]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [3, 14], [3, 23]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [4, 25], [4, 45]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [5, 27], [5, 49]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [6, 26], [6, 55]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [7, 25], [7, 41]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "channels", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [10, 13], [10, 21]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [11, 12], [11, 19]]]]], [], []], "onChannelChange", "setChannel", "placeholder", ["subexpr", "@mut", [["get", "placeholderMessage", ["loc", [null, [13, 16], [13, 34]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [14, 14], [14, 23]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [15, 17], [15, 34]]]]], [], []], "textAreaIsSmall", ["subexpr", "@mut", [["get", "textAreaIsSmall", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [17, 21], [17, 32]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [18, 20], [18, 34]]]]], [], []], "onTextChanged", ["subexpr", "@mut", [["get", "attrs.onPostContentChanged", ["loc", [null, [19, 18], [19, 44]]]]], [], []], "value", ["subexpr", "@mut", [["get", "postContent", ["loc", [null, [20, 10], [20, 21]]]]], [], []], "onFocusStateChange", ["subexpr", "@mut", [["get", "onTextEditorFocusStateChange", ["loc", [null, [21, 23], [21, 51]]]]], [], []], "onFocusActivate", ["subexpr", "@mut", [["get", "onTextEditorFocusActivate", ["loc", [null, [22, 20], [22, 45]]]]], [], []], "ccPopupProxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [23, 17], [23, 29]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [68, 19]]]], ["inline", "ko-file-upload", [], ["viewName", "attachedUploads", "uploads", ["subexpr", "@mut", [["get", "attachedFiles", ["loc", [null, [71, 52], [71, 65]]]]], [], []]], ["loc", [null, [71, 0], [71, 67]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/priority/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    value: null,
    field: null,
    priorities: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-case-content/field/priority/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [3, 10], [3, 20]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/requester/component', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var service = _ember['default'].inject.service;
  var PromiseArray = _emberData['default'].PromiseArray;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    requester: null,
    isPusherEdited: false,
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    onValueChange: null,

    // State
    results: [],

    // HTML
    tagName: '',

    // Services
    storeService: service('store'),

    actions: {
      search: function search(searchTerm) {
        var results = PromiseArray.create({
          promise: this.get('storeService').query('users', {
            name: searchTerm
          })
        });

        this.set('results', results);
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/search", [], ["title", ["subexpr", "t", ["cases.field_title.requester"], [], ["loc", [null, [2, 8], [2, 41]]]], "value", ["subexpr", "@mut", [["get", "requester", ["loc", [null, [3, 8], [3, 17]]]]], [], []], "labelPath", "fullName", "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onSearch", ["subexpr", "action", ["search"], [], ["loc", [null, [9, 11], [9, 28]]]], "results", ["subexpr", "@mut", [["get", "results", ["loc", [null, [10, 10], [10, 17]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [11, 16], [11, 29]]]]], [], []]], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/status/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    'case': null,
    value: null,
    field: null,
    statuses: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    // Services
    store: _ember['default'].inject.service(),

    filteredStatuses: _ember['default'].computed('case.id', 'statuses.[]', function () {
      var caseIsPersisted = !this.get('case.isNew');

      return this.get('statuses').filter(function (status) {

        // statuses can only be NEW if they've never been saved
        if (caseIsPersisted && status.get('statusType') === 'NEW') {
          return false;
        }

        return status.get('statusType') !== 'CLOSED';
      });
    })
  });
});
define("frontend-cp/components/ko-case-content/field/status/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "filteredStatuses", ["loc", [null, [3, 10], [3, 26]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label", "hasEmptyOption", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    value: null,
    field: null,
    types: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-case-content/field/type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "types", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-case-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 10
            },
            "end": {
              "line": 29,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "header__subtitle");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["cases.subheader"], ["time", ["subexpr", "@mut", [["get", "case.createdAt", ["loc", [null, [23, 17], [23, 31]]]]], [], []], "channel", ["subexpr", "t", [["subexpr", "concat", ["cases.channelType.", ["subexpr", "or", [["get", "case.sourceChannel.channelType", ["loc", [null, [24, 56], [24, 86]]]], "none"], [], ["loc", [null, [24, 52], [24, 94]]]]], [], ["loc", [null, [24, 23], [24, 95]]]]], [], ["loc", [null, [24, 20], [24, 96]]]], "hasChannel", ["subexpr", "@mut", [["get", "hasChannel", ["loc", [null, [25, 23], [25, 33]]]]], [], []], "hasBrand", ["subexpr", "@mut", [["get", "hasBrand", ["loc", [null, [26, 21], [26, 29]]]]], [], []], "brand", ["subexpr", "@mut", [["get", "case.brand.companyName", ["loc", [null, [27, 18], [27, 40]]]]], [], []]], ["loc", [null, [22, 12], [27, 42]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 47,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "u-v-align-top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["cases.trashed"], [], ["loc", [null, [38, 23], [38, 42]]]], "activeHoverText", ["subexpr", "t", ["cases.untrash"], [], ["loc", [null, [39, 28], [39, 47]]]], "inactiveText", ["subexpr", "t", ["cases.trashed"], [], ["loc", [null, [40, 25], [40, 44]]]], "inactiveHoverText", ["subexpr", "t", ["cases.untrash"], [], ["loc", [null, [41, 30], [41, 49]]]], "isActive", false, "isEnabled", ["subexpr", "@mut", [["get", "canRestoreCase", ["loc", [null, [43, 22], [43, 36]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [44, 22], [44, 30]]]]], [], []], "onClick", ["subexpr", "action", ["restoreCase", ["get", "case.id", ["loc", [null, [45, 42], [45, 49]]]]], [], ["loc", [null, [45, 20], [45, 50]]]]], ["loc", [null, [37, 10], [45, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 14
                },
                "end": {
                  "line": 93,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-case-content__editor");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-case-content/field/post", [], ["channels", ["subexpr", "@mut", [["get", "availableReplyChannels", ["loc", [null, [71, 31], [71, 53]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [72, 30], [72, 37]]]]], [], []], "onChannelChange", ["subexpr", "action", ["dispatch", "setChannel", ["get", "tabId", ["loc", [null, [73, 70], [73, 75]]]]], [], ["loc", [null, [73, 38], [73, 76]]]], "onSetNote", ["subexpr", "action", ["dispatch", "setNote", ["get", "tabId", ["loc", [null, [74, 61], [74, 66]]]], ["get", "availableChannels", ["loc", [null, [74, 67], [74, 84]]]]], [], ["loc", [null, [74, 32], [74, 85]]]], "replyType", ["subexpr", "@mut", [["get", "replyType", ["loc", [null, [75, 32], [75, 41]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.contents", ["loc", [null, [76, 32], [76, 49]]]]], [], []], "suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [77, 38], [77, 53]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "replyOptions.cc", ["loc", [null, [78, 32], [78, 47]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [79, 43], [79, 63]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [80, 45], [80, 67]]]]], [], []], "isPeopleAutoCompleteAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [81, 52], [81, 81]]]]], [], []], "onPeopleSuggestion", ["subexpr", "action", ["onPeopleSuggestion"], [], ["loc", [null, [82, 41], [82, 70]]]], "addCC", ["subexpr", "action", ["dispatch", "addCC", ["get", "tabId", ["loc", [null, [83, 55], [83, 60]]]]], [], ["loc", [null, [83, 28], [83, 61]]]], "removeCC", ["subexpr", "action", ["dispatch", "removeCC", ["get", "tabId", ["loc", [null, [84, 61], [84, 66]]]]], [], ["loc", [null, [84, 31], [84, 67]]]], "postContent", ["subexpr", "@mut", [["get", "postContent", ["loc", [null, [85, 34], [85, 45]]]]], [], []], "onPostContentChanged", ["subexpr", "action", ["dispatch", "setPostContent", ["get", "tabId", ["loc", [null, [86, 79], [86, 84]]]]], [], ["loc", [null, [86, 43], [86, 85]]]], "attachedFiles", ["subexpr", "@mut", [["get", "attachedPostFiles", ["loc", [null, [87, 36], [87, 53]]]]], [], []], "ccPopupProxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [88, 35], [88, 47]]]]], [], []], "onTextEditorFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange", ["get", "tabId", ["loc", [null, [89, 88], [89, 93]]]]], [], ["loc", [null, [89, 51], [89, 94]]]], "onTextEditorFocusActivate", ["subexpr", "action", ["textAreaFocusActivate", ["get", "tabId", ["loc", [null, [90, 80], [90, 85]]]]], [], ["loc", [null, [90, 48], [90, 86]]]]], ["loc", [null, [70, 18], [91, 20]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 93,
                  "column": 14
                },
                "end": {
                  "line": 97,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-case-content__editor-placeholder");
              dom.setAttribute(el1, "style", "background: #FFF; font-size: 14px; font-style: italic; border-bottom: 1px solid #D1D5D7; padding: 20px 15px;");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "style", "text-decoration: underline; cursor: pointer;");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "style", "text-decoration: underline; cursor: pointer;");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("...\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var element5 = dom.childAt(element4, [3]);
              var element6 = dom.childAt(element4, [7]);
              var morphs = new Array(7);
              morphs[0] = dom.createElementMorph(element4);
              morphs[1] = dom.createMorphAt(element4, 1, 1);
              morphs[2] = dom.createElementMorph(element5);
              morphs[3] = dom.createMorphAt(element5, 0, 0);
              morphs[4] = dom.createMorphAt(element4, 5, 5);
              morphs[5] = dom.createElementMorph(element6);
              morphs[6] = dom.createMorphAt(element6, 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["beginReply", "reply", ["get", "tabId", ["loc", [null, [94, 51], [94, 56]]]], ["get", "availableChannels", ["loc", [null, [94, 57], [94, 74]]]]], [], ["loc", [null, [94, 21], [94, 76]]]], ["inline", "t", ["cases.reply.click_to_start"], [], ["loc", [null, [95, 18], [95, 52]]]], ["element", "action", ["beginReply", "reply", ["get", "tabId", ["loc", [null, [95, 89], [95, 94]]]], ["get", "availableChannels", ["loc", [null, [95, 95], [95, 112]]]]], [], ["loc", [null, [95, 59], [95, 114]]]], ["inline", "t", ["cases.reply.reply"], [], ["loc", [null, [95, 168], [95, 193]]]], ["inline", "t", ["cases.reply.or_leave_a"], [], ["loc", [null, [95, 201], [95, 231]]]], ["element", "action", ["beginReply", "note", ["get", "tabId", ["loc", [null, [95, 267], [95, 272]]]], ["get", "availableChannels", ["loc", [null, [95, 273], [95, 290]]]]], [], ["loc", [null, [95, 238], [95, 292]]]], ["inline", "t", ["cases.reply.note"], [], ["loc", [null, [95, 346], [95, 370]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 66,
                "column": 10
              },
              "end": {
                "line": 99,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__editor-container");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "or", [["get", "isEditInProgress", ["loc", [null, [68, 24], [68, 40]]]], ["get", "case.isNew", ["loc", [null, [68, 41], [68, 51]]]]], [], ["loc", [null, [68, 20], [68, 52]]]]], [], 0, 1, ["loc", [null, [68, 14], [97, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 100,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "sticky-container", [], ["options", ["subexpr", "@mut", [["get", "stickyOptions", ["loc", [null, [66, 38], [66, 51]]]]], [], []]], 0, null, ["loc", [null, [66, 10], [99, 31]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 104,
                "column": 14
              },
              "end": {
                "line": 113,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "field.label", ["loc", [null, [112, 20], [112, 35]]]]],
          locals: ["field"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 116,
                "column": 14
              },
              "end": {
                "line": 125,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "field.label", ["loc", [null, [124, 20], [124, 35]]]]],
          locals: ["field"],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 130,
                  "column": 14
                },
                "end": {
                  "line": 132,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [131, 16], [131, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 132,
                  "column": 14
                },
                "end": {
                  "line": 134,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element2, 'onclick');
              morphs[1] = dom.createMorphAt(element2, 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["dispatch", "loadPostsAbove", ["get", "tabId", ["loc", [null, [133, 64], [133, 69]]]], ["subexpr", "hash", [], ["caseModel", ["get", "case", ["loc", [null, [133, 86], [133, 90]]]], "filter", ["get", "filter", ["loc", [null, [133, 98], [133, 104]]]], "sortOrder", ["get", "sortOrder", ["loc", [null, [133, 115], [133, 124]]]], "postId", ["get", "topPost.id", ["loc", [null, [133, 132], [133, 142]]]]], ["loc", [null, [133, 70], [133, 143]]]]], [], ["loc", [null, [133, 27], [133, 145]]]]], ["inline", "t", ["cases.posts.load_more"], [], ["loc", [null, [133, 146], [133, 175]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 128,
                "column": 10
              },
              "end": {
                "line": 136,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__loaderTop");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "loadingTop", ["loc", [null, [130, 20], [130, 30]]]]], [], 0, 1, ["loc", [null, [130, 14], [134, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 139,
                  "column": 14
                },
                "end": {
                  "line": 146,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-feed/item", [], ["event", ["subexpr", "@mut", [["get", "post", ["loc", [null, [141, 24], [141, 28]]]]], [], []], "parent", ["subexpr", "@mut", [["get", "case", ["loc", [null, [142, 25], [142, 29]]]]], [], []], "isReplyDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [143, 34], [143, 48]]]]], [], []], "onReplyWithQuote", ["subexpr", "action", ["replyWithQuote", ["get", "tabId", ["loc", [null, [144, 60], [144, 65]]]], ["get", "post", ["loc", [null, [144, 66], [144, 70]]]]], [], ["loc", [null, [144, 35], [144, 71]]]]], ["loc", [null, [140, 16], [145, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 147,
                  "column": 14
                },
                "end": {
                  "line": 149,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-feed/activity", [], ["activity", ["subexpr", "@mut", [["get", "post", ["loc", [null, [148, 44], [148, 48]]]]], [], []]], ["loc", [null, [148, 16], [148, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 138,
                "column": 12
              },
              "end": {
                "line": 150,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [139, 24], [139, 50]]]], "post"], [], ["loc", [null, [139, 20], [139, 58]]]]], [], 0, null, ["loc", [null, [139, 14], [146, 21]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [147, 28], [147, 54]]]], "activity"], [], ["loc", [null, [147, 24], [147, 66]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [147, 71], [147, 97]]]], "event"], [], ["loc", [null, [147, 67], [147, 106]]]]], [], ["loc", [null, [147, 20], [147, 107]]]]], [], 1, null, ["loc", [null, [147, 14], [149, 21]]]]],
          locals: ["post"],
          templates: [child0, child1]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 154,
                  "column": 14
                },
                "end": {
                  "line": 156,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [155, 16], [155, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 156,
                  "column": 14
                },
                "end": {
                  "line": 158,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'onclick');
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["dispatch", "loadPostsBelow", ["get", "tabId", ["loc", [null, [157, 64], [157, 69]]]], ["subexpr", "hash", [], ["caseModel", ["get", "case", ["loc", [null, [157, 86], [157, 90]]]], "filter", ["get", "filter", ["loc", [null, [157, 98], [157, 104]]]], "sortOrder", ["get", "sortOrder", ["loc", [null, [157, 115], [157, 124]]]], "postId", ["get", "bottomPost.id", ["loc", [null, [157, 132], [157, 145]]]], "including", false], ["loc", [null, [157, 70], [157, 162]]]]], [], ["loc", [null, [157, 27], [157, 164]]]]], ["inline", "t", ["cases.posts.load_more"], [], ["loc", [null, [157, 165], [157, 194]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 152,
                "column": 10
              },
              "end": {
                "line": 160,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__loaderBottom");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "loadingBottom", ["loc", [null, [154, 20], [154, 33]]]]], [], 0, 1, ["loc", [null, [154, 14], [158, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 161,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-case-content__dropdowns");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-case-content__sort-dropdown");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-case-content__filter-dropdown");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-feed");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "power-select", [], ["class", "ember-power-select-wrapper--ko", "placeholder", ["subexpr", "@mut", [["get", "sortOrderTitle", ["loc", [null, [106, 28], [106, 42]]]]], [], []], "value", ["subexpr", "@mut", [["get", "sortOrder", ["loc", [null, [107, 22], [107, 31]]]]], [], []], "options", ["subexpr", "@mut", [["get", "sortOptions", ["loc", [null, [108, 24], [108, 35]]]]], [], []], "renderInPlace", true, "searchEnabled", false, "onchange", ["subexpr", "action", ["sort"], [], ["loc", [null, [111, 25], [111, 40]]]]], 0, null, ["loc", [null, [104, 14], [113, 31]]]], ["block", "power-select", [], ["class", "ember-power-select-wrapper--ko", "placeholder", ["subexpr", "@mut", [["get", "sortFilterTitle", ["loc", [null, [118, 26], [118, 41]]]]], [], []], "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [119, 20], [119, 26]]]]], [], []], "options", ["subexpr", "@mut", [["get", "filterOptions", ["loc", [null, [120, 22], [120, 35]]]]], [], []], "renderInPlace", true, "searchEnabled", false, "onchange", ["subexpr", "action", ["filter"], [], ["loc", [null, [123, 23], [123, 40]]]]], 1, null, ["loc", [null, [116, 14], [125, 31]]]], ["block", "if", [["get", "topPostsAvailable", ["loc", [null, [128, 16], [128, 33]]]]], [], 2, null, ["loc", [null, [128, 10], [136, 17]]]], ["block", "each", [["get", "posts", ["loc", [null, [138, 20], [138, 25]]]]], [], 3, null, ["loc", [null, [138, 12], [150, 21]]]], ["block", "if", [["get", "bottomPostsAvailable", ["loc", [null, [152, 16], [152, 36]]]]], [], 4, null, ["loc", [null, [152, 10], [160, 17]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 167,
                "column": 10
              },
              "end": {
                "line": 169,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-loader", [], ["class", "ko-case-content__button-loading"], ["loc", [null, [168, 12], [168, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 169,
                "column": 10
              },
              "end": {
                "line": 171,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [170, 12], [170, 32]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 183,
                "column": 6
              },
              "end": {
                "line": 194,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case-content/field/assignee", [], ["team", ["subexpr", "@mut", [["get", "editedCase.assigneeTeam", ["loc", [null, [185, 15], [185, 38]]]]], [], []], "agent", ["subexpr", "@mut", [["get", "editedCase.assigneeAgent", ["loc", [null, [186, 16], [186, 40]]]]], [], []], "field", ["subexpr", "@mut", [["get", "assigneeField", ["loc", [null, [187, 16], [187, 29]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setAssignee", ["get", "tabId", ["loc", [null, [188, 57], [188, 62]]]]], [], ["loc", [null, [188, 24], [188, 63]]]], "isEdited", ["subexpr", "@mut", [["get", "isAssigneeEdited", ["loc", [null, [189, 19], [189, 35]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.assignee", ["loc", [null, [190, 25], [190, 59]]]]], [], []], "isErrored", ["subexpr", "or", [["get", "errorMap.assignee_agent_id", ["loc", [null, [191, 24], [191, 50]]]], ["get", "errorMap.assignee_team_id", ["loc", [null, [191, 51], [191, 76]]]]], [], ["loc", [null, [191, 20], [191, 77]]]], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [192, 21], [192, 35]]]]], [], []]], ["loc", [null, [184, 8], [193, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 196,
                "column": 6
              },
              "end": {
                "line": 208,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case-content/field/status", [], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [198, 15], [198, 19]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedCase.status", ["loc", [null, [199, 16], [199, 33]]]]], [], []], "field", ["subexpr", "@mut", [["get", "statusField", ["loc", [null, [200, 16], [200, 27]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [201, 19], [201, 27]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setStatus", ["get", "tabId", ["loc", [null, [202, 55], [202, 60]]]]], [], ["loc", [null, [202, 24], [202, 61]]]], "isEdited", ["subexpr", "@mut", [["get", "isStatusEdited", ["loc", [null, [203, 19], [203, 33]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.status", ["loc", [null, [204, 25], [204, 57]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.status_id", ["loc", [null, [205, 20], [205, 38]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [206, 21], [206, 35]]]]], [], []]], ["loc", [null, [197, 8], [207, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 210,
                "column": 6
              },
              "end": {
                "line": 221,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case-content/field/type", [], ["value", ["subexpr", "@mut", [["get", "editedCase.caseType", ["loc", [null, [212, 16], [212, 35]]]]], [], []], "field", ["subexpr", "@mut", [["get", "typeField", ["loc", [null, [213, 16], [213, 25]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [214, 16], [214, 21]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setType", ["get", "tabId", ["loc", [null, [215, 53], [215, 58]]]]], [], ["loc", [null, [215, 24], [215, 59]]]], "isEdited", ["subexpr", "@mut", [["get", "isTypeEdited", ["loc", [null, [216, 19], [216, 31]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.caseType", ["loc", [null, [217, 25], [217, 59]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.type_id", ["loc", [null, [218, 20], [218, 36]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [219, 21], [219, 35]]]]], [], []]], ["loc", [null, [211, 8], [220, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 223,
                "column": 6
              },
              "end": {
                "line": 234,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case-content/field/priority", [], ["value", ["subexpr", "@mut", [["get", "editedCase.priority", ["loc", [null, [225, 16], [225, 35]]]]], [], []], "field", ["subexpr", "@mut", [["get", "priorityField", ["loc", [null, [226, 16], [226, 29]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [227, 21], [227, 31]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setPriority", ["get", "tabId", ["loc", [null, [228, 57], [228, 62]]]]], [], ["loc", [null, [228, 24], [228, 63]]]], "isEdited", ["subexpr", "@mut", [["get", "isPriorityEdited", ["loc", [null, [229, 19], [229, 35]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.priority", ["loc", [null, [230, 25], [230, 59]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.priority_id", ["loc", [null, [231, 20], [231, 40]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [232, 21], [232, 35]]]]], [], []]], ["loc", [null, [224, 8], [233, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child6 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 263,
                    "column": 10
                  },
                  "end": {
                    "line": 277,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [264, 35], [264, 64]]]], ["get", "field.fieldType", ["loc", [null, [264, 65], [264, 80]]]]], [], ["loc", [null, [264, 24], [264, 81]]]]], ["value", ["subexpr", "get", [["get", "localCustomFieldsMap", ["loc", [null, [265, 25], [265, 45]]]], ["get", "field.id", ["loc", [null, [265, 46], [265, 54]]]]], [], ["loc", [null, [265, 20], [265, 55]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [266, 22], [266, 35]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [267, 20], [267, 31]]]]], [], []], "isEdited", ["subexpr", "get", [["get", "editedCustomFieldsMap", ["loc", [null, [268, 28], [268, 49]]]], ["get", "field.id", ["loc", [null, [268, 50], [268, 58]]]]], [], ["loc", [null, [268, 23], [268, 59]]]], "isPusherEdited", ["subexpr", "get", [["get", "propertiesChangeViaPusher.customFields", ["loc", [null, [269, 34], [269, 72]]]], ["get", "field.id", ["loc", [null, [269, 73], [269, 81]]]]], [], ["loc", [null, [269, 29], [269, 82]]]], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [270, 25], [270, 39]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [271, 29], [271, 37]]]], ["get", "field.key", ["loc", [null, [271, 38], [271, 47]]]]], [], ["loc", [null, [271, 24], [271, 48]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [272, 34], [272, 59]]]]], [], ["loc", [null, [272, 29], [272, 60]]]], "onValueChange", ["subexpr", "action", ["dispatch", "setCustomField", ["get", "tabId", ["loc", [null, [273, 64], [273, 69]]]], ["get", "field", ["loc", [null, [273, 70], [273, 75]]]]], [], ["loc", [null, [273, 28], [273, 76]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [264, 12], [276, 14]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 262,
                  "column": 8
                },
                "end": {
                  "line": 278,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [263, 16], [263, 31]]]]], [], 0, null, ["loc", [null, [263, 10], [277, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 261,
                "column": 6
              },
              "end": {
                "line": 279,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [262, 25], [262, 54]]]], ["get", "field.fieldType", ["loc", [null, [262, 55], [262, 70]]]]], [], ["loc", [null, [262, 14], [262, 71]]]]], [], 0, null, ["loc", [null, [262, 8], [278, 15]]]]],
          locals: ["field"],
          templates: [child0]
        };
      })();
      var child7 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 281,
                "column": 6
              },
              "end": {
                "line": 283,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case/sla-sidebar", [], ["sla", ["subexpr", "@mut", [["get", "case.sla", ["loc", [null, [282, 34], [282, 42]]]]], [], []], "slaMetrics", ["subexpr", "@mut", [["get", "case.slaMetrics", ["loc", [null, [282, 54], [282, 69]]]]], [], []]], ["loc", [null, [282, 8], [282, 71]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 4
            },
            "end": {
              "line": 286,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "info-bar-item");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(13);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[8] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          morphs[9] = dom.createMorphAt(fragment, 15, 15, contextualElement);
          morphs[10] = dom.createMorphAt(fragment, 17, 17, contextualElement);
          morphs[11] = dom.createMorphAt(fragment, 19, 19, contextualElement);
          morphs[12] = dom.createMorphAt(fragment, 21, 21, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [166, 71], [166, 85]]]], "disabled"], [], ["loc", [null, [166, 66], [166, 98]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit", ["get", "tabId", ["loc", [null, [166, 126], [166, 131]]]], ["get", "case", ["loc", [null, [166, 132], [166, 136]]]], ["get", "channel", ["loc", [null, [166, 137], [166, 144]]]]], [], ["loc", [null, [166, 108], [166, 146]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [167, 16], [167, 24]]]]], [], 0, 1, ["loc", [null, [167, 10], [171, 17]]]], ["inline", "ko-case-content/field/requester", [], ["isDisabled", ["subexpr", "@mut", [["get", "isRequesterDisabled", ["loc", [null, [175, 19], [175, 38]]]]], [], []], "requester", ["subexpr", "@mut", [["get", "editedCase.requester", ["loc", [null, [176, 18], [176, 38]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setRequester", ["get", "tabId", ["loc", [null, [177, 56], [177, 61]]]]], [], ["loc", [null, [177, 22], [177, 62]]]], "isEdited", ["subexpr", "@mut", [["get", "isRequesterEdited", ["loc", [null, [178, 17], [178, 34]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.requester", ["loc", [null, [179, 18], [179, 36]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.requester", ["loc", [null, [180, 23], [180, 58]]]]], [], []]], ["loc", [null, [174, 6], [181, 8]]]], ["block", "if", [["get", "assigneeField", ["loc", [null, [183, 12], [183, 25]]]]], [], 2, null, ["loc", [null, [183, 6], [194, 13]]]], ["block", "if", [["get", "statusField", ["loc", [null, [196, 12], [196, 23]]]]], [], 3, null, ["loc", [null, [196, 6], [208, 13]]]], ["block", "if", [["get", "typeField", ["loc", [null, [210, 12], [210, 21]]]]], [], 4, null, ["loc", [null, [210, 6], [221, 13]]]], ["block", "if", [["get", "priorityField", ["loc", [null, [223, 12], [223, 25]]]]], [], 5, null, ["loc", [null, [223, 6], [234, 13]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["cases.tags"], [], ["loc", [null, [237, 14], [237, 30]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [238, 17], [238, 34]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [239, 19], [239, 33]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.tags", ["loc", [null, [240, 18], [240, 31]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.tags", ["loc", [null, [241, 23], [241, 53]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "editedTags", ["loc", [null, [242, 21], [242, 31]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [243, 22], [243, 35]]]]], [], []], "onTagAddition", ["subexpr", "action", ["dispatch", "addTag", ["get", "tabId", ["loc", [null, [244, 50], [244, 55]]]], ["get", "case", ["loc", [null, [244, 56], [244, 60]]]]], [], ["loc", [null, [244, 22], [244, 61]]]], "onTagRemoval", ["subexpr", "action", ["dispatch", "removeTag", ["get", "tabId", ["loc", [null, [245, 52], [245, 57]]]]], [], ["loc", [null, [245, 21], [245, 58]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [246, 24], [246, 46]]]], "newTagText", ["subexpr", "t", ["cases.newtag"], [], ["loc", [null, [247, 19], [247, 37]]]], "addTagText", ["subexpr", "t", ["cases.addtag"], [], ["loc", [null, [248, 19], [248, 37]]]]], ["loc", [null, [236, 6], [249, 8]]]], ["inline", "ko-case-content/field/forms", [], ["selectedForm", ["subexpr", "@mut", [["get", "editedCase.form", ["loc", [null, [252, 21], [252, 36]]]]], [], []], "forms", ["subexpr", "@mut", [["get", "enabledCaseForms", ["loc", [null, [253, 14], [253, 30]]]]], [], []], "onFormSelected", ["subexpr", "action", ["dispatch", "setForm", ["get", "tabId", ["loc", [null, [254, 52], [254, 57]]]]], [], ["loc", [null, [254, 23], [254, 58]]]], "isEdited", ["subexpr", "@mut", [["get", "isFormEdited", ["loc", [null, [255, 17], [255, 29]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.form", ["loc", [null, [256, 23], [256, 53]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.form_id", ["loc", [null, [257, 18], [257, 34]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [258, 19], [258, 33]]]]], [], []]], ["loc", [null, [251, 6], [259, 8]]]], ["block", "each", [["get", "caseOrFormFields", ["loc", [null, [261, 14], [261, 30]]]]], [], 6, null, ["loc", [null, [261, 6], [279, 15]]]], ["block", "if", [["get", "case.id", ["loc", [null, [281, 12], [281, 19]]]]], [], 7, null, ["loc", [null, [281, 6], [283, 13]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "caseDates", ["loc", [null, [285, 34], [285, 43]]]]], [], []]], ["loc", [null, [285, 6], [285, 45]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5, child6, child7]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 289,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-case-content__columns");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-case-content__left");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "alt", "");
        dom.setAttribute(el6, "class", "header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__body");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6, "class", "header__title ko-case-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-case-content__right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "list-inline t-right");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-case-content__main u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-case-content__main__content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1, 1]);
        var element10 = dom.childAt(element9, [1, 1]);
        var element11 = dom.childAt(element9, [3]);
        var element12 = dom.childAt(element8, [3, 1]);
        var element13 = dom.childAt(element7, [3]);
        var element14 = dom.childAt(element13, [1, 1]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element10, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element11, 3, 3);
        morphs[3] = dom.createMorphAt(element12, 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        morphs[5] = dom.createMorphAt(dom.childAt(element12, [5]), 1, 1);
        morphs[6] = dom.createAttrMorph(element14, 'class');
        morphs[7] = dom.createMorphAt(element14, 1, 1);
        morphs[8] = dom.createMorphAt(element14, 2, 2);
        morphs[9] = dom.createMorphAt(element13, 3, 3);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["get", "editedCase.requester.avatar", ["loc", [null, [6, 22], [6, 49]]]]]]], ["inline", "ko-editable-text", [], ["value", ["subexpr", "@mut", [["get", "editedCase.subject", ["loc", [null, [11, 22], [11, 40]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isSubjectEdited", ["loc", [null, [12, 25], [12, 40]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.subject", ["loc", [null, [13, 31], [13, 64]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setSubject", ["get", "tabId", ["loc", [null, [14, 62], [14, 67]]]]], [], ["loc", [null, [14, 30], [14, 68]]]], "isErrored", ["subexpr", "@mut", [["get", "errorMap.subject", ["loc", [null, [15, 26], [15, 42]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [16, 27], [16, 41]]]]], [], []], "placeholder", ["subexpr", "t", ["cases.new_case_subject_placeholder"], [], ["loc", [null, [17, 28], [17, 68]]]]], ["loc", [null, [10, 12], [18, 14]]]], ["block", "if", [["get", "case.id", ["loc", [null, [20, 16], [20, 23]]]]], [], 0, null, ["loc", [null, [20, 10], [29, 17]]]], ["block", "if", [["subexpr", "eq", [["get", "case.state", ["loc", [null, [35, 18], [35, 28]]]], "TRASH"], [], ["loc", [null, [35, 14], [35, 37]]]]], [], 1, null, ["loc", [null, [35, 8], [47, 15]]]], ["inline", "ko-case/macro-selector", [], ["macros", ["subexpr", "@mut", [["get", "macros", ["loc", [null, [49, 42], [49, 48]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [50, 23], [50, 37]]]]], [], []], "onMacroSelect", ["subexpr", "action", ["dispatch", "applyMacro", ["get", "tabId", ["loc", [null, [51, 58], [51, 63]]]], ["get", "sessionService.user", ["loc", [null, [51, 64], [51, 83]]]]], [], ["loc", [null, [51, 26], [51, 84]]]]], ["loc", [null, [49, 10], [51, 86]]]], ["inline", "ko-case-action-menu", [], ["caseState", ["subexpr", "@mut", [["get", "case.state", ["loc", [null, [55, 22], [55, 32]]]]], [], []], "onTrashCase", ["subexpr", "action", ["trashCase", ["get", "case.id", ["loc", [null, [56, 44], [56, 51]]]]], [], ["loc", [null, [56, 24], [56, 52]]]]], ["loc", [null, [54, 10], [57, 12]]]], ["attribute", "class", ["concat", ["content__main content__main--has-infobar ", ["subexpr", "if", [["get", "case.isNew", ["loc", [null, [64, 64], [64, 74]]]], "ko-case-content__main--new"], [], ["loc", [null, [64, 59], [64, 105]]]]]]], ["block", "if", [["subexpr", "not", [["get", "isCaseDisabled", ["loc", [null, [65, 19], [65, 33]]]]], [], ["loc", [null, [65, 14], [65, 34]]]]], [], 2, null, ["loc", [null, [65, 8], [100, 15]]]], ["block", "unless", [["get", "case.isNew", ["loc", [null, [101, 18], [101, 28]]]]], [], 3, null, ["loc", [null, [101, 8], [161, 19]]]], ["block", "ko-info-bar", [], [], 4, null, ["loc", [null, [164, 4], [286, 20]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/assigneeagentid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/assigneeagentid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeAgent.fullName", ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/assigneeteamid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/assigneeteamid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeTeam.title", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/brandid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/brandid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.brand.name", ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/case-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.form.title", ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/caseid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 11
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/caseid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.id", ["loc", [null, [1, 0], [1, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/casepriorityid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casepriorityid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.priority.label", ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/casestatusid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casestatusid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.status.label", ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/casetypeid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casetypeid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.caseType.label", ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/channeltype/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/channeltype/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.sourceChannel.channelType", ["loc", [null, [1, 0], [1, 34]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/createdat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/createdat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["concat", [["get", "case.createdAt", ["loc", [null, [1, 15], [1, 29]]]]]]], ["inline", "moment-from-now", [["get", "case.createdAt", ["loc", [null, [2, 20], [2, 34]]]]], [], ["loc", [null, [2, 2], [2, 36]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/first-reply-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'FIRST_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/first-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/lastcompletedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/lastcompletedat/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["concat", [["get", "case.lastCompletedAt", ["loc", [null, [2, 17], [2, 37]]]]]]], ["inline", "moment-from-now", [["get", "case.lastCompletedAt", ["loc", [null, [3, 22], [3, 42]]]]], [], ["loc", [null, [3, 4], [3, 44]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/lastcompletedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "case.lastCompletedAt", ["loc", [null, [1, 6], [1, 26]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/next-breach/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/next-reply-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'NEXT_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/next-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/organization/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 36
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.organization.name", ["loc", [null, [1, 0], [1, 36]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/requester-language/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.locale", ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/requesterid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requesterid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.fullName", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/resolution-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'RESOLUTION_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/resolution-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/sla-name/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.sla.title", ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/subject/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Can't have parent div or ellipsis will break
    tagName: ''
  });
});
define("frontend-cp/components/ko-cases-list/column/subject/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-cases-list__table-column--text");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-avatar", [], ["class", "u-mr-", "avatar", ["subexpr", "@mut", [["get", "case.creator.avatar", ["loc", [null, [1, 33], [1, 52]]]]], [], []]], ["loc", [null, [1, 0], [1, 54]]]], ["content", "case.subject", ["loc", [null, [3, 2], [3, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeTeam.title", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/updatedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/updatedat/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["concat", [["get", "case.updatedAt", ["loc", [null, [2, 17], [2, 31]]]]]]], ["inline", "moment-from-now", [["get", "case.updatedAt", ["loc", [null, [3, 22], [3, 36]]]]], [], ["loc", [null, [3, 4], [3, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/updatedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "case.updatedAt", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-cases-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    cases: [],
    onCaseListSort: null,
    columns: [],

    classForHeader: function classForHeader(column) {
      return 'ko-cases-list__table-th ko-cases-list__header--' + _ember['default'].String.dasherize(column.get('name'));
    },

    classForColumn: function classForColumn(column) {
      var classes = ['ko-cases-list__table-column'];

      classes.push('ko-cases-list__table-column--' + _ember['default'].String.dasherize(column.get('name')));

      if (this.isFixed(column)) {
        classes.push('ko-table_cell--fixed ko-cases-list__table-column--fixed');
      }

      return classes.join(' ');
    },

    componentForHeader: function componentForHeader(column) {
      return 'ko-cases-list/header/' + _ember['default'].String.dasherize(column.get('name'));
    },

    componentForColumn: function componentForColumn(column) {
      return 'ko-cases-list/column/' + _ember['default'].String.dasherize(column.get('name'));
    },

    isFixed: function isFixed(column) {
      return column.get('name') === 'subject';
    },

    actions: {
      tableSorted: function tableSorted(column, order) {
        this.sendAction('onCaseListSort', column, order);
      }
    }
  });
});
define("frontend-cp/components/ko-cases-list/header/assigneeagentid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/assigneeagentid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.assignee.agent"], [], ["loc", [null, [1, 0], [1, 28]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/assigneeteamid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/assigneeteamid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.assignee.team"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/brandid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/brandid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.brand"], [], ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/case-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.form-select"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/caseid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/caseid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.ticketid"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casepriorityid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casepriorityid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.priority"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casestatusid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 20
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casestatusid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.status"], [], ["loc", [null, [1, 0], [1, 20]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casetypeid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casetypeid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.type"], [], ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/channeltype/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/channeltype/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.channeltype"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/createdat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/createdat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.created"], [], ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/first-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 30
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.first-reply-time"], [], ["loc", [null, [1, 0], [1, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 35
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-a-user"], [], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 37
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-assignee"], [], ["loc", [null, [1, 0], [1, 37]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 38
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-requester"], [], ["loc", [null, [1, 0], [1, 38]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/lastcompletedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/lastcompletedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last_completed_at"], [], ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/next-breach/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.next-breach"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/next-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 29
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.next-reply-time"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.oldest-update-by-requester"], [], ["loc", [null, [1, 0], [1, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/organization/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "t", ["cases.organization"], [], ["loc", [null, [1, 0], [1, 26]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/requester-language/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.requester-language"], [], ["loc", [null, [1, 0], [1, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/requesterid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requesterid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.requester"], [], ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/resolution-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 29
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.resolution-time"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/sla-name/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.sla-name"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/subject/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.subject"], [], ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.team"], [], ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/updatedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/updatedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "componentForHeader", ["loc", [null, [23, 31], [23, 49]]]], ["get", "column", ["loc", [null, [23, 50], [23, 56]]]]], [], ["loc", [null, [23, 20], [23, 57]]]]], ["tagName", "span"], ["loc", [null, [23, 8], [23, 74]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/column", [], ["column", ["subexpr", "@mut", [["get", "column", ["loc", [null, [17, 15], [17, 21]]]]], [], []], "class", ["subexpr", "ko-helper", [["get", "classForHeader", ["loc", [null, [18, 25], [18, 39]]]], ["get", "column", ["loc", [null, [18, 40], [18, 46]]]]], [], ["loc", [null, [18, 14], [18, 47]]]], "sortable", true, "onSort", "tableSorted", "orderBy", ["subexpr", "@mut", [["get", "orderBy", ["loc", [null, [21, 16], [21, 23]]]]], [], []], "orderByColumn", ["subexpr", "@mut", [["get", "orderByColumn", ["loc", [null, [22, 22], [22, 35]]]]], [], []]], 0, null, ["loc", [null, [16, 6], [24, 26]]]]],
            locals: ["column"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "columns", ["loc", [null, [15, 12], [15, 19]]]]], [], 0, null, ["loc", [null, [15, 4], [25, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 31,
                        "column": 10
                      },
                      "end": {
                        "line": 33,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "componentForColumn", ["loc", [null, [32, 35], [32, 53]]]], ["get", "column", ["loc", [null, [32, 54], [32, 60]]]]], [], ["loc", [null, [32, 24], [32, 61]]]]], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [32, 67], [32, 71]]]]], [], []]], ["loc", [null, [32, 12], [32, 73]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 8
                    },
                    "end": {
                      "line": 34,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-table/cell", [], ["class", ["subexpr", "ko-contextual-helper", [["get", "classForColumn", ["loc", [null, [31, 55], [31, 69]]]], ["get", "this", ["loc", [null, [31, 70], [31, 74]]]], ["get", "column", ["loc", [null, [31, 75], [31, 81]]]]], [], ["loc", [null, [31, 33], [31, 82]]]]], 0, null, ["loc", [null, [31, 10], [33, 28]]]]],
                locals: ["column"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "columns", ["loc", [null, [30, 16], [30, 23]]]]], [], 0, null, ["loc", [null, [30, 8], [34, 17]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/row", [], ["class", "ko-cases-list__row", "table", ["subexpr", "@mut", [["get", "table", ["loc", [null, [29, 55], [29, 60]]]]], [], []], "clickable", true, "rowContext", ["subexpr", "@mut", [["get", "case", ["loc", [null, [29, 87], [29, 91]]]]], [], []], "onClick", ["subexpr", "@mut", [["get", "onClick", ["loc", [null, [29, 100], [29, 107]]]]], [], []]], 0, null, ["loc", [null, [29, 6], [35, 23]]]]],
            locals: ["case"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "cases", ["loc", [null, [28, 12], [28, 17]]]]], [], 0, null, ["loc", [null, [28, 4], [36, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/header", [], ["class", "ko-cases-list__table-header"], 0, null, ["loc", [null, [14, 2], [26, 22]]]], ["block", "ko-table/body", [], [], 1, null, ["loc", [null, [27, 2], [37, 20]]]]],
        locals: ["table"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mt");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["cases.list.casesnotfound"], [], ["loc", [null, [41, 2], [41, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout u-mv");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-2/3");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ko-cases-list__title heading");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "i-chevron-large-down i-color-grey--dark");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/3 t-right");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [4, 6], [4, 15]]]], ["block", "ko-table", [], ["selectable", false], 0, null, ["loc", [null, [13, 0], [38, 13]]]], ["block", "if", [["subexpr", "not", [["get", "cases", ["loc", [null, [39, 11], [39, 16]]]]], [], ["loc", [null, [39, 6], [39, 17]]]]], [], 1, null, ["loc", [null, [39, 0], [43, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-center/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-center']
  });
});
define("frontend-cp/components/ko-center/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 48
          }
        },
        "moduleName": "frontend-cp/components/ko-center/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-center__contents");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 33], [1, 42]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-channel-selector/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    disabled: _ember['default'].computed('channel.channelType', function () {
      return this.get('channel.channelType') === 'NOTE';
    }),

    mouseDown: function mouseDown(e) {
      if (this.get('disabled')) {
        e.stopPropagation();
        this.attrs.onclick();
      }
    }
  });
});
define('frontend-cp/components/ko-channel-selector/selected-channel/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-channel-selector/selected-channel/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-selector/selected-channel/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1, "class", "i-select");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["attribute", "class", ["get", "selected.iconClass", ["loc", [null, [1, 11], [1, 29]]]]], ["content", "selected.label", ["loc", [null, [2, 0], [2, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-channel-selector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-channel-selector/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "channel.iconClass", ["loc", [null, [2, 13], [2, 30]]]]], ["content", "channel.label", ["loc", [null, [2, 38], [2, 55]]]]],
        locals: ["channel"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 17
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-selector/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [1, 25], [1, 33]]]]], [], []], "options", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [1, 42], [1, 50]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [1, 60], [1, 67]]]]], [], []], "renderInPlace", true, "searchEnabled", false, "onchange", ["subexpr", "@mut", [["get", "onchange", ["loc", [null, [1, 116], [1, 124]]]]], [], []], "triggerComponent", "ko-channel-selector/selected-channel"], 0, null, ["loc", [null, [1, 0], [3, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-checkbox/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    disabled: false,
    large: false,
    checked: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',
    classNames: ['ko-checkbox'],

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleCheckbox');
      }
      return false;
    },

    click: function click() {
      return false;
    },

    actions: {
      toggleCheckbox: function toggleCheckbox() {
        if (!this.disabled) {
          if (this.get('onCheck')) {
            this.sendAction('onCheck', !this.get('checked'));
          } else {
            this.toggleProperty('checked');
          }
        }
      }
    }
  });
});
define("frontend-cp/components/ko-checkbox/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-checkbox__tick i-tick ", ["subexpr", "if", [["get", "large", ["loc", [null, [3, 44], [3, 49]]]], "ko-checkbox__tick--large"], [], ["loc", [null, [3, 39], [3, 78]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-checkbox__label ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [7, 40], [7, 48]]]], "ko-checkbox__label--disabled"], [], ["loc", [null, [7, 35], [7, 81]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [7, 90], [7, 99]]]], "-checkbox"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleCheckbox"], [], ["loc", [null, [7, 120], [7, 147]]]]], ["content", "label", ["loc", [null, [7, 148], [7, 157]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "checkbox");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createAttrMorph(element2, 'onclick');
        morphs[7] = dom.createMorphAt(element2, 1, 1);
        morphs[8] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-checkbox__checkbox ", ["get", "checkboxClass", ["loc", [null, [1, 36], [1, 49]]]], " ", ["subexpr", "if", [["get", "large", ["loc", [null, [1, 57], [1, 62]]]], "ko-checkbox__checkbox--large"], [], ["loc", [null, [1, 52], [1, 95]]]], " ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 101], [1, 109]]]], "ko-checkbox__checkbox--disabled"], [], ["loc", [null, [1, 96], [1, 145]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "checked", ["loc", [null, [1, 179], [1, 186]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 202], [1, 210]]]]]]], ["attribute", "aria-disabled", ["concat", [["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 234], [1, 242]]]], "true", "false"], [], ["loc", [null, [1, 229], [1, 259]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 274], [1, 282]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 292], [1, 301]]]], "-checkbox"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleCheckbox"], [], ["loc", [null, [1, 322], [1, 349]]]]], ["block", "if", [["get", "checked", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["get", "label", ["loc", [null, [6, 6], [6, 11]]]]], [], 1, null, ["loc", [null, [6, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-context-modal/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  var htmlSafe = _ember['default'].String.htmlSafe;

  var POSITION_MARGIN = 18; // Padding around window bounds to apply if modal's natural position is outside the bounds and it gets moved inside.
  var ARROW_OFFSET = 3; // Distance between the originating element and the modal
  var ARROW_SIZE = 9; // Size of the arrow in pixels (can be confirmed in _arrow.scss)

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    closeOnClickOutside: false,
    proxy: null,

    target: null,
    title: null,
    visible: false,

    $modal: null,

    globalX: null,
    globalY: null,
    localX: null,
    localY: null,
    buttonWidth: null,
    buttonHeight: null,
    windowWidth: null,
    windowHeight: null,
    documentWidth: null,
    documentHeight: null,
    modalWidth: null,
    naturalModalHeight: null,
    modalVisible: false,

    didReceiveAttrs: function didReceiveAttrs() {
      var _this = this;

      var proxy = this.get('proxy');
      proxy.open = function () {
        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }

        return Reflect.apply(_this.open, _this, rest);
      };
      proxy.close = function () {
        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          rest[_key2] = arguments[_key2];
        }

        return Reflect.apply(_this.close, _this, rest);
      };
      proxy.reposition = function () {
        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          rest[_key3] = arguments[_key3];
        }

        return Reflect.apply(_this.reposition, _this, rest);
      };
    },

    willInsertElement: function willInsertElement() {
      var _this2 = this;

      this.set('$modal', this.$().find('.ko-context-modal__container'));
      (0, _jquery['default'])(window).on('resize.contextModal', function () {
        _this2.set('modalVisible', false);
        _ember['default'].run.next(_this2, _this2.updatePositionInputs);
      });
    },

    willDestroyElement: function willDestroyElement() {
      (0, _jquery['default'])(window).off('resize.contextModal');
    },

    close: function close() {
      this.setProperties({
        visible: false
      });
    },

    open: function open(target, options) {
      this.setProperties({
        target: this.$('.ko-context-modal__trigger').get(0),
        visible: true
      });
      this.reposition();
    },

    // Ask for the modal window to be repositioned.
    // Useful in auto completes, when you need to use full vertical
    // space between different queries and data responses.
    reposition: function reposition() {
      _ember['default'].run.scheduleOnce('afterRender', this, this.updatePositionInputs);
    },

    updatePositionInputs: function updatePositionInputs() {
      var _this3 = this;

      var target = this.get('target');

      if (typeof target === 'undefined' || target === null) {
        return;
      }

      var $modal = this.get('$modal');

      var targetPosition = this.getPosition(target);
      _ember['default'].run(function () {
        _this3.set('isResetting', true);
      });
      _ember['default'].run(function () {
        _this3.set('globalX', targetPosition.globalX);
        _this3.set('globalY', targetPosition.globalY);
        _this3.set('localX', targetPosition.localX);
        _this3.set('localY', targetPosition.localY);
        _this3.set('buttonHeight', (0, _jquery['default'])(target).outerHeight());
        _this3.set('buttonWidth', (0, _jquery['default'])(target).width());
        _this3.set('windowWidth', (0, _jquery['default'])(window).width());
        _this3.set('windowHeight', (0, _jquery['default'])(window).height());
        _this3.set('documentWidth', (0, _jquery['default'])(document).width());
        _this3.set('documentHeight', (0, _jquery['default'])(document).height());
        _this3.set('modalWidth', $modal.outerWidth(true));
        _this3.set('naturalModalHeight', $modal.outerHeight());
        _this3.set('modalVisible', true);
        _this3.set('isResetting', false);
      });
    },

    /**
     * Calculates the x position of the arrow, relative to the left of the modal.
     * Limits to the bounds of the width of the modal
     * @return {Number} Arrow x Position
     */
    arrowX: _ember['default'].computed('modalWidth', 'boundingOffsetX', function () {
      var pos = this.get('modalWidth') / 2 + this.get('boundingOffsetX') - ARROW_SIZE / 2;

      return Math.max(2, Math.min(pos, this.get('modalWidth') - Math.sqrt(ARROW_SIZE * ARROW_SIZE + ARROW_SIZE * ARROW_SIZE)) - 2);
    }),

    /**
     * Based on the vertical position of the modal, set the arrow to appear on the top or bottom of the modal
     * @return {[type]} [description]
     */
    arrowClass: _ember['default'].computed('isArrowUnderneath', function () {
      //if title is empty arrow should be grey
      var title = this.get('title');
      var arrowUnderneath = this.get('isArrowUnderneath');
      if (!title && !arrowUnderneath) {
        return 'arrow--top arrow--no-title arrow';
      }
      return 'arrow--' + (this.get('isArrowUnderneath') ? 'bottom' : 'top') + ' arrow';
    }),

    targetModalOriginX: _ember['default'].computed('localX', 'buttonWidth', 'modalWidth', function () {
      return this.get('localX') - this.get('modalWidth') / 2 + this.get('buttonWidth') / 2; // Move the modal 50% of its width to the left of the centre of element clicked
    }),

    globalVsLocalXDisplacement: _ember['default'].computed('globalX', 'localX', function () {
      return this.get('globalX') - this.get('localX');
    }),

    positionX: _ember['default'].computed('targetModalOriginX', 'windowWidth', 'modalWidth', 'globalVsLocalXDisplacement', function () {
      var min = POSITION_MARGIN;
      var max = this.get('windowWidth') - this.get('modalWidth') - POSITION_MARGIN;
      var gvl = this.get('globalVsLocalXDisplacement');

      return Math.max(min - gvl, Math.min(this.get('targetModalOriginX'), max - gvl));
    }),

    positionY: _ember['default'].computed('isModalBelowClickedElement', 'localY', 'buttonHeight', 'naturalModalHeight', function () {
      var y = this.get('localY');
      if (this.get('isModalBelowClickedElement')) {
        return y + this.get('buttonHeight') + ARROW_OFFSET + ARROW_SIZE;
      } else {
        return y - this.get('naturalModalHeight') - ARROW_OFFSET - ARROW_SIZE;
      }
    }),

    isArrowUnderneath: _ember['default'].computed.not('isModalBelowClickedElement'),

    /**
     * Will place the modal above if there is enough space and there is more space above than below
     * @return {Boolean} [description]
     */
    isModalBelowClickedElement: _ember['default'].computed('spaceAbove', 'spaceBelow', 'naturalModalHeight', function () {
      return !(this.get('spaceAbove') > this.get('spaceBelow') && this.get('naturalModalHeight') < this.get('spaceAbove'));
    }),

    spaceAbove: _ember['default'].computed('globalY', function () {
      return this.get('globalY') - POSITION_MARGIN - ARROW_SIZE;
    }),

    spaceBelow: _ember['default'].computed('windowHeight', 'globalY', 'buttonHeight', function () {
      return this.get('windowHeight') - this.get('globalY') - this.get('buttonHeight') - POSITION_MARGIN - ARROW_SIZE;
    }),

    /**
     * Distance between where we want to put the modal, and where the bounding logic has moved it
     * @return {Number} X Distance in px between bounded and unbounded modal position
     */
    boundingOffsetX: _ember['default'].computed('targetModalOriginX', 'positionX', function () {
      return this.get('targetModalOriginX') - this.get('positionX');
    }),

    /**
     * Returns the x and y coordinates of the element passed in.
     * For a detailed breakdown and analysis of what is going on and why, please see:
     * http://www.kirupa.com/html5/get_element_position_using_javascript.htm
     *
     * @param {{HTMLElement}} element - DOM node to base positioning off of.
     * @returns {{x: number, y: number}}
     */
    getPosition: function getPosition(element) {
      if (!element) {
        throw new Error('No element found, cannot calculate coordinates');
      }

      var globalX = 0;
      var globalY = 0;
      var localX = element.offsetLeft;
      var localY = element.offsetTop;

      while (element) {
        globalX += element.offsetLeft - element.scrollLeft + element.clientLeft;
        globalY += element.offsetTop - element.scrollTop + element.clientTop;
        element = element.offsetParent;
      }
      return { globalX: globalX, globalY: globalY, localX: localX, localY: localY };
    },

    /**
     * Need to SafeString all bound style attributes
     */

    overlayStyle: _ember['default'].computed('globalX', 'globalY', 'documentWidth', 'documentHeight', function () {
      return htmlSafe('position:absolute; top:' + -this.get('globalY') + 'px; left:' + -this.get('globalX') + 'px; width:' + this.get('documentWidth') + 'px; height:' + this.get('documentHeight') + 'px;');
    }),

    containerStyle: _ember['default'].computed('positionY', 'positionX', 'modalVisible', function () {
      return htmlSafe('top: ' + this.get('positionY') + 'px; left: ' + this.get('positionX') + 'px; ' + (this.get('modalVisible') ? '' : 'visibility: hidden;'));
    }),

    arrowStyle: _ember['default'].computed('arrowX', function () {
      return htmlSafe('left: ' + this.get('arrowX') + 'px;');
    })
  });
});
define("frontend-cp/components/ko-context-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-context-modal__overlay");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'style');
          morphs[1] = dom.createAttrMorph(element2, 'onclick');
          return morphs;
        },
        statements: [["attribute", "style", ["get", "overlayStyle", ["loc", [null, [4, 51], [4, 63]]]]], ["attribute", "onclick", ["get", "proxy.close", ["loc", [null, [4, 76], [4, 87]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box box--secondary ko-context-modal__header-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          dom.setAttribute(el2, "class", "ko-context-modal__header");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "ko-context-modal__action");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createAttrMorph(element1, 'onclick');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [9, 45], [9, 54]]]], ["attribute", "onclick", ["get", "proxy.close", ["loc", [null, [10, 54], [10, 65]]]]], ["inline", "t", ["generic.close"], [], ["loc", [null, [10, 68], [10, 89]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-context-modal__trigger");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-context-modal__container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "box box--context-modal ko-context-modal__content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element5, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element3, 'onclick');
        morphs[1] = dom.createMorphAt(element3, 0, 0);
        morphs[2] = dom.createAttrMorph(element4, 'class');
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createAttrMorph(element5, 'style');
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createAttrMorph(element6, 'style');
        return morphs;
      },
      statements: [["attribute", "onclick", ["get", "proxy.open", ["loc", [null, [1, 49], [1, 59]]]]], ["content", "yield", ["loc", [null, [1, 62], [1, 71]]]], ["attribute", "class", ["concat", ["ko-context-modal__dropdown overlay ", ["subexpr", "if", [["get", "visible", ["loc", [null, [2, 52], [2, 59]]]], "u-visible"], [], ["loc", [null, [2, 47], [2, 73]]]]]]], ["block", "if", [["get", "closeOnClickOutside", ["loc", [null, [3, 8], [3, 27]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 9]]]], ["attribute", "style", ["get", "containerStyle", ["loc", [null, [6, 51], [6, 65]]]]], ["block", "if", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], 1, null, ["loc", [null, [7, 4], [12, 11]]]], ["inline", "yield", [], ["to", "inverse"], ["loc", [null, [14, 6], [14, 28]]]], ["attribute", "class", ["concat", [["get", "arrowClass", ["loc", [null, [16, 18], [16, 28]]]]]]], ["attribute", "style", ["get", "arrowStyle", ["loc", [null, [16, 40], [16, 50]]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-date-select/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-date-select'],
    value: null,
    placeholder: null,
    onChange: null
  });
});
define("frontend-cp/components/ko-date-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-datepicker", [], ["date", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 23], [7, 28]]]]], [], []], "onDateChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [7, 42], [7, 50]]]]], [], []], "onClose", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [7, 59], [7, 81]]]]], [], []]], ["loc", [null, [7, 2], [7, 83]]]]],
        locals: ["dropdown"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "format-date", [["get", "value", ["loc", [null, [10, 18], [10, 23]]]]], ["format", "full"], ["loc", [null, [10, 4], [10, 39]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "or", [["get", "placeholder", ["loc", [null, [12, 9], [12, 20]]]], ["subexpr", "t", ["generic.dateselect.placeholder"], [], ["loc", [null, [12, 21], [12, 57]]]]], [], ["loc", [null, [12, 4], [12, 59]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "ko-date-select__trigger-icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "value", ["loc", [null, [9, 8], [9, 13]]]]], [], 0, 1, ["loc", [null, [9, 2], [13, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["class", "ko-date-select__dropdown", "triggerClass", "ko-date-select__trigger", "dropdownClass", "ko-date-select__content", "renderInPlace", true, "matchTriggerWidth", true], 0, 1, ["loc", [null, [1, 0], [16, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-datepicker/component', ['exports', 'ember', 'npm:lodash', 'moment', 'frontend-cp/config/environment', 'frontend-cp/lib/keycodes'], function (exports, _ember, _npmLodash, _moment, _frontendCpConfigEnvironment, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onDateChange: null,
    onClose: null,
    date: (0, _moment['default'])(''),

    // State
    today: (0, _moment['default'])(),
    shownDate: null,
    assetRoot: _frontendCpConfigEnvironment['default'].assetRoot,

    // HTML
    attributeBindings: ['tabindex'],
    tabindex: '-1',

    onDateParamChange: _ember['default'].on('init', _ember['default'].observer('momentDate', function () {
      this.set('shownDate', (0, _moment['default'])(this.get('momentDate').isValid() ? this.get('momentDate') : this.get('today')).toDate());
    })),

    momentDate: _ember['default'].computed('date', function () {
      return (0, _moment['default'])(this.get('date'));
    }),

    month: _ember['default'].computed('shownDate', function () {
      return (0, _moment['default'])(this.get('shownDate')).month();
    }),

    year: _ember['default'].computed('shownDate', function () {
      return (0, _moment['default'])(this.get('shownDate')).year();
    }),

    weekdays: _ember['default'].computed(function () {
      var weekdays = _moment['default'].weekdaysShort();
      var firstDayOfWeek = _moment['default'].localeData().firstDayOfWeek();
      _npmLodash['default'].times(firstDayOfWeek, function () {
        return weekdays.push(weekdays.shift());
      });
      return weekdays;
    }),

    days: _ember['default'].computed('year', 'month', 'today', 'momentDate', function () {
      var date = (0, _moment['default'])({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).startOf('week');

      var end = (0, _moment['default'])({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).add(1, 'month').endOf('week');

      var dates = [];
      while (date.isBefore(end, 'day') || date.isSame(end, 'day')) {
        dates.push({
          date: date.date(),
          currentMonth: date.month() === this.get('month'),
          today: this.get('today').isSame(date, 'day'),
          selected: date.isSame(this.get('momentDate'), 'day')
        });
        date.add(1, 'day');
      }
      return dates;
    }),

    jumpDateBy: function jumpDateBy(method, range) {
      if (this.get('momentDate').isValid()) {
        this.setDate((0, _moment['default'])(this.get('momentDate'))[method](1, range));
      }
      return false;
    },

    setDate: function setDate(date) {
      this.attrs.onDateChange(date ? date.toDate() : null);
    },

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case _frontendCpLibKeycodes.up:
          {
            return this.jumpDateBy('subtract', 'week');
          }
        case _frontendCpLibKeycodes.down:
          {
            return this.jumpDateBy('add', 'week');
          }
        case _frontendCpLibKeycodes.left:
          {
            return this.jumpDateBy('subtract', 'day');
          }
        case _frontendCpLibKeycodes.right:
          {
            return this.jumpDateBy('add', 'day');
          }
      }
    },

    actions: {
      previousMonth: function previousMonth() {
        this.set('shownDate', (0, _moment['default'])(this.get('shownDate')).subtract(1, 'month').toDate());
      },

      nextMonth: function nextMonth() {
        this.set('shownDate', (0, _moment['default'])(this.get('shownDate')).add(1, 'month').toDate());
      },

      selectDate: function selectDate(date) {
        this.setDate((0, _moment['default'])({
          year: this.get('year'),
          month: this.get('month'),
          day: date.date
        }));
      },

      today: function today() {
        this.setDate((0, _moment['default'])(this.get('today')));
      },

      clear: function clear() {
        this.setDate(null);
      }
    }
  });
});
define("frontend-cp/components/ko-datepicker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-datepicker__weekday");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "weekday", ["loc", [null, [10, 41], [10, 52]]]]],
        locals: ["weekday"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-datepicker__date ", ["subexpr", "if", [["get", "date.currentMonth", ["loc", [null, [13, 42], [13, 59]]]], "ko-datepicker__date--current-month"], [], ["loc", [null, [13, 37], [13, 98]]]], "\n      ", ["subexpr", "if", [["get", "date.today", ["loc", [null, [14, 11], [14, 21]]]], "ko-datepicker__date--today"], [], ["loc", [null, [14, 6], [14, 52]]]], " ", ["subexpr", "if", [["get", "date.selected", ["loc", [null, [14, 58], [14, 71]]]], "ko-datepicker__date--selected"], [], ["loc", [null, [14, 53], [14, 105]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["selectDate", ["get", "date", ["loc", [null, [15, 36], [15, 40]]]]], [], ["loc", [null, [15, 14], [15, 42]]]]], ["content", "date.date", ["loc", [null, [15, 43], [15, 56]]]]],
        locals: ["date"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__month");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__year");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__previous i-chevron-large-left");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__next i-chevron-large-right");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__calendar");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__actions");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-triangle ko-datepicker__icon--today");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-minus ko-datepicker__icon--clear");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-cross-bold ko-datepicker__icon--close");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [5]);
        var element3 = dom.childAt(element1, [7]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(fragment, [4]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3, 1]);
        var element8 = dom.childAt(element5, [5, 1]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[2] = dom.createAttrMorph(element2, 'onclick');
        morphs[3] = dom.createAttrMorph(element3, 'onclick');
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createMorphAt(element4, 2, 2);
        morphs[6] = dom.createAttrMorph(element6, 'onclick');
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        morphs[8] = dom.createAttrMorph(element7, 'onclick');
        morphs[9] = dom.createMorphAt(element7, 3, 3);
        morphs[10] = dom.createAttrMorph(element8, 'onclick');
        morphs[11] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["inline", "format-date", [["get", "shownDate", ["loc", [null, [2, 51], [2, 60]]]]], ["format", "month"], ["loc", [null, [2, 37], [2, 77]]]], ["inline", "format-date", [["get", "shownDate", ["loc", [null, [3, 50], [3, 59]]]]], ["format", "year"], ["loc", [null, [3, 36], [3, 75]]]], ["attribute", "onclick", ["subexpr", "action", ["previousMonth"], [], ["loc", [null, [4, 69], [4, 95]]]]], ["attribute", "onclick", ["subexpr", "action", ["nextMonth"], [], ["loc", [null, [5, 66], [5, 88]]]]], ["block", "each", [["get", "weekdays", ["loc", [null, [9, 10], [9, 18]]]]], [], 0, null, ["loc", [null, [9, 2], [11, 11]]]], ["block", "each", [["get", "days", ["loc", [null, [12, 10], [12, 14]]]]], ["key", "@index"], 1, null, ["loc", [null, [12, 2], [16, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["today"], [], ["loc", [null, [21, 18], [21, 36]]]]], ["inline", "t", ["generic.datepicker.today"], [], ["loc", [null, [23, 6], [23, 38]]]], ["attribute", "onclick", ["subexpr", "action", ["clear"], [], ["loc", [null, [27, 18], [27, 36]]]]], ["inline", "t", ["generic.datepicker.clear"], [], ["loc", [null, [29, 6], [29, 38]]]], ["attribute", "onclick", ["get", "onClose", ["loc", [null, [33, 20], [33, 27]]]]], ["inline", "t", ["generic.datepicker.close"], [], ["loc", [null, [35, 6], [35, 38]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-draggable-dropzone/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    totalSize: 0,
    dragCounter: 0,
    classNames: ['koDraggableDropzone'],
    classNameBindings: ['dragClass:ko-draggable-dropzone--activated:ko-draggable-dropzone--deactivated'],
    dragClass: false,

    dragEnter: function dragEnter(event) {
      event.preventDefault();
      this.incrementProperty('dragCounter');
      this.set('dragClass', true);
    },

    dragOver: function dragOver(event) {
      event.preventDefault();
    },

    dragLeave: function dragLeave(event) {
      event.preventDefault();
      this.decrementProperty('dragCounter');
      if (this.dragCounter === 0) {
        this.set('dragClass', false);
      }
    },

    drop: function drop(event) {
      var _this = this;

      event.preventDefault();
      var file = event.dataTransfer.files[0];
      var reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = function () {
        _this.sendAction('dropped', reader.result);
      };
      this.set('dragClass', false);
    }

  });
});
define("frontend-cp/components/ko-draggable-dropzone/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-draggable-dropzone/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-draggable-dropzone__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-draggable-dropzone__border");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/container/button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-dropdown/container/button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/container/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  var Component = _ember['default'].Component;
  var observer = _ember['default'].observer;
  var run = _ember['default'].run;

  /**
   * Rules:
   *   Always closes when you click outside of it
   *   Always open while it or its children are focussed
   *   hideOnChildFocus will unfocus children if a link
   *
   *   {{#ko-dropdown/container as |name dropdownContext|}}
   *     {{#if (eq name 'button')}}
   *       <div>Button</div>
   *     {{/if}}
   *     {{#if (eq name 'content')}}
   *       Content
   *       <button onclick={{action "hide" target=dropdownContext}}>hideme</button>
   *     {{/if}}
   *   {{/ko-dropdown/container}}
   */

  exports['default'] = Component.extend({
    // Params
    // Set to true if you include links in the content and you want to hide the dropdown when the links are clicked
    hideOnChildFocus: null,
    // Set to true if you want non link clicks to also hide the dropdown
    hideOnClick: null,
    //Allows components that need to signal when the dropdown should close
    hideDropdown: null,
    onFocusChanged: null,

    tabindex: 0,
    isFocussed: null,
    attributeBindings: ['tabindex'],
    classNames: ['ko-dropdown-container'],
    classNameBindings: ['alignRight', 'isFocussed:focused'],

    onHideDropdown: observer('hideDropdown', function () {
      var hideDropdown = this.get('hideDropdown');
      if (hideDropdown) {
        this.send('onContentRequestClose');
      }
    }),

    focusOut: function focusOut(event) {
      var _this = this;

      // Ignore focusOut events that are focusing on another item which is a child of this one
      // Also ignore events where the button itself has been clicked on (event.relatedTarget === context.element)
      if (event.relatedTarget === null || !_jquery['default'].contains(this.get('context.element'), event.relatedTarget) && this.get('context.element') !== event.relatedTarget) {
        run.next(function () {
          if (!_this.get('isDestroyed')) {
            _this.set('isFocussed', false);
            _this.sendAction('onFocusChanged', false);
            _this.sendAction('onFocusOut');
          }
        });
      }
    },

    focusIn: function focusIn() {
      this.set('isFocussed', true);
      this.sendAction('onFocusChanged', true);
      this.sendAction('onFocusIn');
    },

    actions: {
      onContentRequestClose: function onContentRequestClose() {
        this.$().blur();
        this.set('hideDropdown', false);
      },

      hide: function hide() {
        this.get('contentComponent').send('hide');
      }
    }
  });
});
define('frontend-cp/components/ko-dropdown/container/content/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    // hideOnChildFocus is useful because links become focussed when clicked so you can
    // hide the dropdown when someone clicks a link
    hideOnChildFocus: null,
    hideOnClick: null,
    // registerAs allows this component to be registered with its parent so the parent can call actions on it
    registerAs: null,

    role: 'menu',
    attributeBindings: ['role'],
    isFocussed: false,
    focussedObject: null,

    classNames: ['ko-dropdown-container-content'],

    registerOnParent: _ember['default'].on('init', function () {
      this.set('registerAs', this);
    }),

    mouseUp: function mouseUp() {
      if (this.get('hideOnChildFocus') || this.get('hideOnClick')) {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else if (this.get('hideOnClick')) {
          this.sendAction('onClose');
        }
      }
    },

    focusOut: function focusOut() {
      this.set('focussedObject', null);
      this.set('isFocussed', false);
    },

    focusIn: function focusIn(event) {
      this.set('focussedObject', event.target);
      this.set('isFocussed', true);
    },

    actions: {
      hide: function hide() {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else {
          this.sendAction('onClose');
        }
      }
    }
  });
});
define("frontend-cp/components/ko-dropdown/container/content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-dropdown/container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", ["button", ["get", "this", ["loc", [null, [2, 19], [2, 23]]]]], [], ["loc", [null, [2, 2], [2, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", ["content", ["get", "this", ["loc", [null, [7, 22], [7, 26]]]]], [], ["loc", [null, [7, 4], [7, 28]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-dropdown/container/content", [], ["registerAs", ["subexpr", "@mut", [["get", "contentComponent", ["loc", [null, [6, 46], [6, 62]]]]], [], []], "hideOnChildFocus", ["subexpr", "@mut", [["get", "hideOnChildFocus", ["loc", [null, [6, 80], [6, 96]]]]], [], []], "hideOnClick", ["subexpr", "@mut", [["get", "hideOnClick", ["loc", [null, [6, 109], [6, 120]]]]], [], []], "onClose", "onContentRequestClose"], 0, null, ["loc", [null, [6, 2], [8, 36]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container/button", [], [], 0, null, ["loc", [null, [1, 0], [3, 33]]]], ["block", "if", [["get", "isFocussed", ["loc", [null, [5, 6], [5, 16]]]]], [], 1, null, ["loc", [null, [5, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/drill-down/component', ['exports', 'ember', 'npm:lodash', 'ember-sanitize/utils/sanitize'], function (exports, _ember, _npmLodash, _emberSanitizeUtilsSanitize) {
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    options: [],
    value: null,
    onValueChange: null,
    emptyLabel: '',
    hasEmptyOption: true,
    extra: null,
    triggerComponent: null,
    optionsComponent: null,
    searchPlaceholder: null,
    searchEnabled: false,
    isDisabled: false,

    // State
    currentPath: null,
    sanitizedOptions: [],

    resetState: _ember['default'].on('init', 'didReceiveAttrs', function () {
      this.set('currentPath', []);

      var options = this.get('options');

      var sanitizedOptions = options.map(function (option) {
        return { id: option.id, value: (0, _emberSanitizeUtilsSanitize.sanitize)(option.value), children: option.children };
      });

      this.set('sanitizedOptions', sanitizedOptions);
    }),

    // CPs
    currentHierarchyLevel: _ember['default'].computed('sanitizedOptions', 'currentPath.[]', function () {
      var find = function find(_x, _x2, _x3) {
        var _again = true;

        _function: while (_again) {
          var item = _x,
              pathLeft = _x2,
              pathTraversed = _x3;
          _again = false;

          if (pathLeft.length === 0) {
            var children = item.children.map(function (child) {
              return _extends({}, child, {
                value: pathTraversed.concat(child.value).join(' / '),
                levelValue: get(child, 'value')
              });
            });

            if (item.id) {
              return [{
                value: pathTraversed.join(' / '),
                levelValue: item.value,
                id: item.id
              }].concat(_toConsumableArray(children));
            } else {
              return children;
            }
          } else {
            _x = item.children.find(function (option) {
              return get(option, 'value') === pathLeft[0];
            });
            _x2 = pathLeft.slice(1);
            _x3 = [].concat(_toConsumableArray(pathTraversed), [pathLeft[0]]);
            _again = true;
            children = undefined;
            continue _function;
          }
        }
      };

      var items = find({ children: this.get('sanitizedOptions') }, this.get('currentPath'), []);
      if (this.get('hasEmptyOption') && this.get('currentPath').length === 0) {
        items.unshift({
          type: 'empty',
          value: this.get('emptyLabel')
        });
      }

      if (this.get('currentPath').length > 0) {
        items.unshift({
          type: 'back',
          value: 'Back'
        });
      }
      return items;
    }),

    flatOptions: _ember['default'].computed('sanitizedOptions', function () {
      var flatten = function flatten(options) {
        return _npmLodash['default'].flatten(options.map(function (option) {
          var children = flatten(option.children || []).map(function (item) {
            return { id: item.id, value: option.value + ' / ' + item.value };
          });
          if (option.id) {
            return [{ id: option.id, value: option.value }].concat(_toConsumableArray(children));
          } else {
            return children;
          }
        }));
      };

      return flatten(this.get('sanitizedOptions'));
    }),

    // We can't listen for deeply nested changes in a data structure which can go
    // infinitely deep. Thus the implicit contract between this and parent is
    // immutability of `options`.
    formattedValue: _ember['default'].computed('sanitizedOptions', 'value', function () {
      var value = this.get('value');
      if (!value) {
        return this.get('emptyLabel');
      }

      var find = function find(options) {
        var item = options.find(function (option) {
          return get(option, 'id') === value;
        });
        if (item) {
          return [get(item, 'value')];
        } else {
          return options.filter(function (option) {
            return get(option, 'children');
          }).map(function (option) {
            return [get(option, 'value')].concat(_toConsumableArray(find(get(option, 'children'))));
          }).find(function (option) {
            return option.length > 1;
          }) || [];
        }
      };

      return find(this.get('sanitizedOptions')).join(' / ');
    }),

    computedExtra: _ember['default'].computed('extra', 'formattedValue', function () {
      return _extends({}, this.get('extra') || {}, {
        labelPath: 'value',
        formattedValue: this.get('formattedValue')
      });
    }),

    actions: {
      search: function search(term) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _ember['default'].run.debounce(_this, _this._performSearch, term, resolve, reject, 300);
        });
      },

      selectItem: function selectItem(item, dropdown) {
        if (get(item, 'children.length')) {
          this.get('currentPath').pushObject(get(item, 'levelValue'));
        } else if (get(item, 'id')) {
          this.resetState();
          dropdown.actions.close();
          this.get('onValueChange')(get(item, 'id'));
        } else if (get(item, 'type') === 'empty') {
          this.resetState();
          dropdown.actions.close();
          this.get('onValueChange')(null);
        } else if (get(item, 'type') === 'back') {
          this.get('currentPath').popObject();
        }
      }
    },

    _performSearch: function _performSearch(term, resolve) {
      var termLowerCase = term.toLowerCase();
      var matches = function matches(option) {
        return option.value.toLowerCase().indexOf(termLowerCase) !== -1;
      };
      resolve(this.get('flatOptions').filter(matches));
    }
  });
});
define("frontend-cp/components/ko-dropdown/drill-down/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "i-chevron-large-left i-color-grey--dark");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "i-chevron-large-right i-color-grey--dark");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "option.type", ["loc", [null, [16, 12], [16, 23]]]], "back"], [], ["loc", [null, [16, 8], [16, 31]]]]], [], 0, null, ["loc", [null, [16, 2], [18, 9]]]], ["inline", "sanitize-html", [["subexpr", "ko-embolden", [["get", "option.value", ["loc", [null, [19, 31], [19, 43]]]], ["get", "lastSearchedText", ["loc", [null, [19, 44], [19, 60]]]]], [], ["loc", [null, [19, 18], [19, 61]]]], "bold"], [], ["loc", [null, [19, 2], [19, 70]]]], ["block", "if", [["get", "option.children", ["loc", [null, [20, 8], [20, 23]]]]], [], 1, null, ["loc", [null, [20, 2], [22, 9]]]]],
        locals: ["option", "lastSearchedText"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["onchange", ["subexpr", "action", ["selectItem"], [], ["loc", [null, [2, 11], [2, 32]]]], "verticalPosition", "below", "options", ["subexpr", "@mut", [["get", "currentHierarchyLevel", ["loc", [null, [4, 10], [4, 31]]]]], [], []], "tabindex", "-1", "renderInPlace", true, "searchEnabled", ["subexpr", "@mut", [["get", "searchEnabled", ["loc", [null, [7, 16], [7, 29]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 11], [8, 21]]]]], [], []], "triggerComponent", ["subexpr", "@mut", [["get", "triggerComponent", ["loc", [null, [9, 19], [9, 35]]]]], [], []], "optionsComponent", ["subexpr", "@mut", [["get", "optionsComponent", ["loc", [null, [10, 19], [10, 35]]]]], [], []], "searchPlaceholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [11, 20], [11, 37]]]]], [], []], "search", ["subexpr", "action", ["search"], [], ["loc", [null, [12, 9], [12, 26]]]], "extra", ["subexpr", "@mut", [["get", "computedExtra", ["loc", [null, [13, 8], [13, 21]]]]], [], []], "closeOnSelect", false], 0, null, ["loc", [null, [1, 0], [23, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/list/component', ['exports', 'ember'], function (exports, _ember) {

  // Although you can yield any content inside this component, ensure
  // that the options have the class .ko-dropdown_list__item
  //
  // Example:
  //
  //  ```hbs
  //  {{#ko-dropdown/list}}
  //    {{each options as |option|}}
  //      <li class="ko-dropdown_list__item" onclick={{action "myAction" option}}>
  //        {{option}}
  //      </li>
  //    {{/each}}
  //  {{/ko-dropdown/list}}
  //  ```
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    // Allow users of dropdown list to set style directly in template eg:
    // {{#ko-dropdown/list style="width: 1000px;"}}
    //    {{yield}}
    // {{/ko-dropdown/list}}
    attributeBindings: ['style'],

    classNames: ['ko-dropdown-list']
  });
});
define('frontend-cp/components/ko-dropdown/list/group/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-dropdown/list/group/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/group/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-dropdown-list_group__label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-dropdown-list_group__content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [1, 43], [1, 52]]]], ["content", "yield", ["loc", [null, [2, 45], [2, 54]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/list/hr/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-dropdown/list/hr/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/hr/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-dropdown/list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/select/button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    label: '',
    displayIcon: true
  });
});
define("frontend-cp/components/ko-dropdown/select/button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 83
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-dropdown-select__icon i-select");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 90
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [1, 0], [1, 9]]]], ["block", "if", [["get", "displayIcon", ["loc", [null, [1, 15], [1, 26]]]]], [], 0, null, ["loc", [null, [1, 9], [1, 90]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/select/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    hideOnClick: true,

    contentStyle: null,

    actions: {
      onFocusIn: function onFocusIn() {
        this.sendAction('onFocusIn');
      },
      onFocusOut: function onFocusOut() {
        this.sendAction('onFocusOut');
      }
    }
  });
});
define("frontend-cp/components/ko-dropdown/select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-dropdown/select/button", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [3, 38], [3, 43]]]]], [], []]], ["loc", [null, [3, 4], [3, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [7, 6], [7, 15]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [6, 66], [6, 78]]]]], [], []]], 0, null, ["loc", [null, [6, 4], [8, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [5, 12], [5, 16]]]], "content"], [], ["loc", [null, [5, 8], [5, 27]]]]], [], 1, null, ["loc", [null, [5, 2], [9, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["class", ["subexpr", "qa-cls", ["qa-dropdown_select__container"], [], ["loc", [null, [1, 31], [1, 71]]]], "onFocusIn", "onFocusIn", "onFocusOut", "onFocusOut", "hideOnClick", ["subexpr", "@mut", [["get", "hideOnClick", ["loc", [null, [1, 130], [1, 141]]]]], [], []], "hideOnChildFocus", true], 0, null, ["loc", [null, [1, 0], [10, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-editable-text/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    onValueChange: null,
    placeholder: null,
    value: null,
    isErrored: false,
    isPusherEdited: false,
    isDisabled: false,

    classNames: ['editable-text'],
    classNameBindings: ['isErrored:error', 'isEmpty:editable-text--empty'],

    isEditing: false,
    isEdited: false,
    isEmpty: _ember['default'].computed.not('value'),
    valueToSave: null,

    valueDidChange: _ember['default'].observer('value', function () {
      if (this.get('isEditing')) {
        return;
      }
      this.set('valueToSave', this.get('value'));
    }),

    displayText: _ember['default'].computed('value', 'placeholder', function () {
      return this.get('value') ? this.get('value') : this.get('placeholder');
    }),

    stopEditing: function stopEditing() {
      this.set('isEditing', false);

      if (this.get('onValueChange')) {
        this.sendAction('onValueChange', this.get('valueToSave'));
      } else {
        this.set('value', this.get('valueToSave'));
      }
    },

    actions: {
      edit: function edit() {
        if (!this.get('isDisabled')) {
          this.startEditing();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 13) {
          // ENTER
          this.stopEditing();
        }
      }
    },

    focusOut: function focusOut() {
      this.stopEditing();
    },

    startEditing: function startEditing() {
      var _this = this;

      this.set('isEditing', true);
      this.set('valueToSave', this.get('value'));
      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        _this.$().find('.editable-text__input').focus();
      });
    }
  });
});
define("frontend-cp/components/ko-editable-text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editable-text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "class", "editable-text__input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(fragment, [4]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        morphs[3] = dom.createAttrMorph(element1, 'onclick');
        morphs[4] = dom.createAttrMorph(element1, 'class');
        morphs[5] = dom.createAttrMorph(element2, 'class');
        morphs[6] = dom.createAttrMorph(element3, 'value');
        morphs[7] = dom.createAttrMorph(element3, 'oninput');
        morphs[8] = dom.createAttrMorph(element3, 'onkeydown');
        return morphs;
      },
      statements: [["attribute", "onclick", ["subexpr", "action", ["edit"], [], ["loc", [null, [1, 13], [1, 30]]]]], ["attribute", "class", ["concat", ["editable-text__text ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [1, 63], [1, 73]]]], "editable-text__text--disabled"], [], ["loc", [null, [1, 58], [1, 107]]]], " ", ["subexpr", "if", [["get", "isEditing", ["loc", [null, [1, 113], [1, 122]]]], "u-hidden"], [], ["loc", [null, [1, 108], [1, 135]]]], " ", ["subexpr", "if", [["get", "isPusherEdited", ["loc", [null, [1, 141], [1, 155]]]], "editable-text__text--pusher-edited"], [], ["loc", [null, [1, 136], [1, 194]]]], " ", ["subexpr", "if", [["get", "isEdited", ["loc", [null, [1, 201], [1, 209]]]], "editable-text__text--edited"], [], ["loc", [null, [1, 195], [1, 242]]]]]]], ["content", "displayText", ["loc", [null, [1, 244], [1, 259]]]], ["attribute", "onclick", ["subexpr", "action", ["edit"], [], ["loc", [null, [2, 14], [2, 31]]]]], ["attribute", "class", ["concat", ["editable-text__pencil i-pencil i-color-grey i-size-14 u-invisible ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [2, 110], [2, 120]]]], "u-hidden"], [], ["loc", [null, [2, 105], [2, 133]]]], " ", ["subexpr", "if", [["get", "isEditing", ["loc", [null, [2, 139], [2, 148]]]], "u-hidden"], [], ["loc", [null, [2, 134], [2, 161]]]]]]], ["attribute", "class", ["concat", ["editable-text__input-field ", ["subexpr", "unless", [["get", "isEditing", ["loc", [null, [4, 48], [4, 57]]]], "u-hidden"], [], ["loc", [null, [4, 39], [4, 70]]]]]]], ["attribute", "value", ["get", "valueToSave", ["loc", [null, [5, 29], [5, 40]]]]], ["attribute", "oninput", ["subexpr", "action", [["subexpr", "mut", [["get", "valueToSave", ["loc", [null, [5, 65], [5, 76]]]]], [], ["loc", [null, [5, 60], [5, 77]]]]], ["value", "target.value"], ["loc", [null, [5, 51], [5, 100]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [5, 111], [5, 137]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-editor-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    title: null
  });
});
define("frontend-cp/components/ko-editor-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editor-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-editor-modal__overlay");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-editor-modal__modal u-h-center");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ko-editor-modal__title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [5, 39], [5, 48]]]], ["content", "yield", ["loc", [null, [7, 2], [7, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-feed/activity/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //params
    activity: null,

    classNames: ['ko-feed_activity'],

    // body comes from events, plainTextSummary comes from activities
    summary: _ember['default'].computed('activity.body', 'activity.plainTextSummary', function () {
      return this.get('activity.body') || this.get('activity.plainTextSummary');
    })
  });
});
define("frontend-cp/components/ko-feed/activity/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/activity/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_activity__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-feed_activity__contents");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-feed_activity__summary");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" at ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["content", "summary", ["loc", [null, [3, 42], [3, 53]]]], ["inline", "format-relative", [["get", "activity.createdAt", ["loc", [null, [4, 20], [4, 38]]]]], [], ["loc", [null, [4, 2], [4, 40]]]], ["inline", "format-time", [["get", "activity.createdAt", ["loc", [null, [4, 58], [4, 76]]]]], ["format", "time"], ["loc", [null, [4, 44], [4, 92]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-feed/item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //params
    event: null,
    parent: null,
    isReplyDisabled: false,
    sessionService: _ember['default'].inject.service('session'),

    classNames: ['ko-feed_item'],
    classNameBindings: ['isNote:ko-feed_item--note:ko-feed_item--post'],
    attributeBindings: ['event.id:data-id'],

    isNote: _ember['default'].computed.equal('event.original.postType', 'note'),

    isCarbonCopyCollapsed: true,

    showMenu: false,

    mouseEnter: function mouseEnter() {
      this.set('showMenu', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('showMenu', false);
    },

    ccRecipients: _ember['default'].computed('event.original.recipients.[]', function () {
      var recipients = this.get('event.original.recipients') || [];
      return recipients.filterBy('isCC').mapBy('identity.email').join(', ');
    }),

    actions: {
      expandCarbonCopy: function expandCarbonCopy() {
        this.toggleProperty('isCarbonCopyCollapsed');
      }
    }
  });
});
define('frontend-cp/components/ko-feed/item/link-to/component', ['exports', 'ember'], function (exports, _ember) {
  var on = _ember['default'].on;
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-link-to-message'],
    attributeBindings: ['path:href'],

    model: null,
    parent: null,

    tagName: computed('path', function () {
      if (this.get('path')) {
        return 'a';
      } else {
        return 'span';
      }
    }),

    path: computed('model.id', 'parent.id', function () {
      var model = this.get('model');
      var parent = this.get('parent');

      // there is detailed mesage only for email, so we don't need to show popup for notes.
      var isMessage = ['message'].indexOf(model.get('original.postType')) > -1;

      if (model && parent && isMessage) {
        var modelName = parent.constructor.modelName;

        switch (modelName) {
          case 'case':
            return '/case/display/render/' + parent.get('id') + '/' + model.get('id');
        }
      }

      return null;
    }),

    openPopup: on('click', function (e) {
      e.preventDefault();

      if (this.get('path')) {
        window.open(this.get('path'), '', 'width=800, height=500');
      }
    })
  });
});
define("frontend-cp/components/ko-feed/item/link-to/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/link-to/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-feed/item/menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onReplyWithQuote: null,
    showMenu: false,

    // HTML
    classNameBindings: ['showMenu::u-hidden'],
    tagName: 'ul',
    classNames: ['list-inline', 'ko-feed_item_menu']
  });
});
define("frontend-cp/components/ko-feed/item/menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-feed-item_menu__item i-quote i-color-grey--dark");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        return morphs;
      },
      statements: [["attribute", "onclick", ["get", "onReplyWithQuote", ["loc", [null, [1, 14], [1, 30]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-feed/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-feed_item__image");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "event.creator.avatar", ["loc", [null, [4, 54], [4, 74]]]]], [], []], "size", "medium"], ["loc", [null, [4, 35], [4, 90]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 13,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "moment-from-now", [["get", "event.createdAt", ["loc", [null, [12, 24], [12, 39]]]]], [], ["loc", [null, [12, 6], [12, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("From:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element4, 'title');
            morphs[1] = dom.createMorphAt(element4, 2, 2);
            return morphs;
          },
          statements: [["attribute", "title", ["get", "event.original.mailbox.address", ["loc", [null, [21, 20], [21, 50]]]]], ["content", "event.original.mailbox.address", ["loc", [null, [21, 66], [21, 100]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("CC:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'title');
            morphs[1] = dom.createElementMorph(element3);
            morphs[2] = dom.createMorphAt(element3, 2, 2);
            return morphs;
          },
          statements: [["attribute", "title", ["get", "ccRecipients", ["loc", [null, [25, 50], [25, 62]]]]], ["element", "action", ["expandCarbonCopy"], [], ["loc", [null, [25, 12], [25, 41]]]], ["content", "ccRecipients", ["loc", [null, [25, 76], [25, 92]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          morphs[2] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-feed_item__cc ", ["subexpr", "if", [["get", "isCarbonCopyCollapsed", ["loc", [null, [19, 36], [19, 57]]]], "ko-feed_item__cc--collapsed"], [], ["loc", [null, [19, 31], [19, 89]]]]]]], ["block", "if", [["get", "event.original.mailbox.address", ["loc", [null, [20, 10], [20, 40]]]]], [], 0, null, ["loc", [null, [20, 4], [22, 11]]]], ["block", "if", [["get", "ccRecipients", ["loc", [null, [24, 10], [24, 22]]]]], [], 1, null, ["loc", [null, [24, 4], [26, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-feed_item__attachment");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("img");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("br");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-feed_item__attachment-name");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-feed_item__attachment-size");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'src');
            morphs[1] = dom.createAttrMorph(element2, 'href');
            morphs[2] = dom.createMorphAt(element2, 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "attachment.thumbnails.firstObject.url", ["loc", [null, [36, 16], [36, 53]]]], "&_session_id=", ["get", "sessionService.sessionId", ["loc", [null, [36, 70], [36, 94]]]]]]], ["attribute", "href", ["concat", [["get", "attachment.urlDownload", ["loc", [null, [38, 17], [38, 39]]]], "?_session_id=", ["get", "sessionService.sessionId", ["loc", [null, [38, 56], [38, 80]]]]]]], ["content", "attachment.name", ["loc", [null, [38, 84], [38, 103]]]], ["inline", "ko-file-size", [], ["size", ["subexpr", "@mut", [["get", "attachment.size", ["loc", [null, [40, 67], [40, 82]]]]], [], []]], ["loc", [null, [40, 47], [40, 84]]]]],
          locals: ["attachment"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "event.attachments", ["loc", [null, [34, 10], [34, 27]]]]], [], 0, null, ["loc", [null, [34, 2], [42, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-feed/item/menu", [], ["showMenu", ["subexpr", "@mut", [["get", "showMenu", ["loc", [null, [45, 31], [45, 39]]]]], [], []], "onReplyWithQuote", ["subexpr", "action", [["get", "onReplyWithQuote", ["loc", [null, [45, 65], [45, 81]]]], ["get", "event", ["loc", [null, [45, 82], [45, 87]]]]], [], ["loc", [null, [45, 57], [45, 88]]]]], ["loc", [null, [45, 2], [45, 90]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 47,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__title");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-feed_item__title--small");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ko-feed_item__time-ago");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [4]);
        var element7 = dom.childAt(element6, [2]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element6, 0, 0);
        morphs[2] = dom.createMorphAt(element7, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 11, 11, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "event.creator.avatar", ["loc", [null, [3, 6], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 7]]]], ["content", "event.creator.fullName", ["loc", [null, [7, 33], [7, 59]]]], ["inline", "if", [["get", "isNote", ["loc", [null, [9, 9], [9, 15]]]], ["subexpr", "t", ["feed.added"], [], ["loc", [null, [9, 16], [9, 32]]]], ["subexpr", "t", ["feed.replied"], [], ["loc", [null, [9, 33], [9, 51]]]]], [], ["loc", [null, [9, 4], [9, 53]]]], ["block", "ko-feed/item/link-to", [], ["class", "ko-feed_item__title--small", "model", ["subexpr", "@mut", [["get", "event", ["loc", [null, [11, 69], [11, 74]]]]], [], []], "parent", ["subexpr", "@mut", [["get", "parent", ["loc", [null, [11, 82], [11, 88]]]]], [], []]], 1, null, ["loc", [null, [11, 4], [13, 29]]]], ["block", "if", [["subexpr", "or", [["get", "event.original.mailbox.address", ["loc", [null, [18, 10], [18, 40]]]], ["get", "ccRecipients", ["loc", [null, [18, 41], [18, 53]]]]], [], ["loc", [null, [18, 6], [18, 54]]]]], [], 2, null, ["loc", [null, [18, 0], [28, 7]]]], ["inline", "ko-breaklines", [["subexpr", "linkify", [["get", "event.contents", ["loc", [null, [31, 27], [31, 41]]]], "_blank"], [], ["loc", [null, [31, 18], [31, 51]]]]], [], ["loc", [null, [31, 2], [31, 53]]]], ["block", "if", [["get", "event.attachments", ["loc", [null, [33, 6], [33, 23]]]]], [], 3, null, ["loc", [null, [33, 0], [43, 7]]]], ["block", "if", [["subexpr", "not", [["get", "isReplyDisabled", ["loc", [null, [44, 11], [44, 26]]]]], [], ["loc", [null, [44, 6], [44, 27]]]]], [], 4, null, ["loc", [null, [44, 0], [46, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/components/ko-feedback/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['info-bar-item', 'info-bar-item--no-hover', 'u-no-bottom-border']
  });
});
define("frontend-cp/components/ko-feedback/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-feedback__metric t-good i-happy-outline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-feedback__metric t-bad i-sad-outline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-feedback__caption");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "feedbackItem.score", ["loc", [null, [6, 16], [6, 34]]]], "GOOD"], [], ["loc", [null, [6, 12], [6, 42]]]]], [], 0, 1, ["loc", [null, [6, 6], [10, 13]]]], ["inline", "ago", [["get", "feedbackItem.createdAt", ["loc", [null, [11, 46], [11, 68]]]]], [], ["loc", [null, [11, 40], [11, 70]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/3");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.case", ["get", "feedbackItem.case", ["loc", [null, [5, 42], [5, 59]]]]], [], 0, null, ["loc", [null, [5, 4], [12, 16]]]]],
        locals: ["feedbackItem"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["users.no_feedback_available"], [], ["loc", [null, [17, 2], [17, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 31], [1, 40]]]], ["block", "each", [["get", "feedback", ["loc", [null, [4, 10], [4, 18]]]]], [], 0, null, ["loc", [null, [4, 2], [13, 17]]]], ["block", "if", [["subexpr", "not", [["get", "feedback.length", ["loc", [null, [16, 11], [16, 26]]]]], [], ["loc", [null, [16, 6], [16, 27]]]]], [], 1, null, ["loc", [null, [16, 0], [18, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-file-field/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'input',
    attributeBindings: ['type', 'multiple', 'disabled'],
    type: 'file',
    multiple: true,
    change: function change() {
      var files = this.element.files;
      this.sendAction('on-change', files);
      this.element.value = null;
    }
  });
});
define("frontend-cp/components/ko-file-field/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-file-size/component', ['exports', 'ember'], function (exports, _ember) {

  function readableFilesize(bytes, intl) {
    // this is correct for kilo, 1024 is for kibi
    var thresh = 1000;

    if (Math.abs(bytes) < thresh) {
      return {
        size: String(bytes),
        unit: intl.findTranslationByKey('generic.units.B')
      };
    }
    var units = [intl.findTranslationByKey('generic.units.kB'), intl.findTranslationByKey('generic.units.MB'), intl.findTranslationByKey('generic.units.GB')];
    var u = -1;
    do {
      bytes /= thresh;
      ++u;
    } while (Math.abs(bytes) >= thresh && u < units.length - 1);
    return {
      size: String(bytes.toFixed(2)),
      unit: units[u]
    };
  }

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    size: null,
    intl: _ember['default'].inject.service(),

    options: _ember['default'].computed('size', function () {
      return readableFilesize(this.get('size'), this.get('intl'));
    })
  });
});
define("frontend-cp/components/ko-file-size/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 60
          }
        },
        "moduleName": "frontend-cp/components/ko-file-size/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["generic.filesize"], ["size", ["subexpr", "@mut", [["get", "options.size", ["loc", [null, [1, 28], [1, 40]]]]], [], []], "unit", ["subexpr", "@mut", [["get", "options.unit", ["loc", [null, [1, 46], [1, 58]]]]], [], []]], ["loc", [null, [1, 0], [1, 60]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-file-upload/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    uploadService: _ember['default'].inject.service('fileUpload'),
    intlService: _ember['default'].inject.service('intl'),
    notificationService: _ember['default'].inject.service('notification'),
    uploads: null,
    previousErrorCount: 0,

    classNameBindings: ['empty:u-hidden'],
    empty: _ember['default'].computed.empty('uploads'),

    uploadStatus: _ember['default'].observer('uploads.@each.status', function () {
      var errorCount = this.get('uploads').filterBy('status', 'ERROR').length;
      if (errorCount > this.get('previousErrorCount')) {
        this.get('notificationService').add({
          type: 'error',
          title: this.get('intlService').findTranslationByKey('generic.uploads.failed'),
          autodismiss: true,
          dismissable: false
        });
      }
      this.set('previousErrorCount', errorCount);
    }),

    uploadFile: function uploadFile(file) {
      var upload = this.get('uploadService').uploadFile(file);
      this.get('uploads').pushObject(upload);
    },

    actions: {
      uploadFiles: function uploadFiles(files) {
        var _this = this;

        files.forEach(function (file) {
          return _this.uploadFile(file);
        });
      },
      onCancel: function onCancel() {
        this.set('uploads', this.get('uploads').filter(function (u) {
          return u.get('status') !== 'CANCELLED';
        }));
      }
    }
  });
});
define("frontend-cp/components/ko-file-upload/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-file-upload/upload-item", [], ["upload", ["subexpr", "@mut", [["get", "upload", ["loc", [null, [4, 42], [4, 48]]]]], [], []], "onCancel", "onCancel"], ["loc", [null, [4, 6], [4, 70]]]]],
        locals: ["upload"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("output");
        dom.setAttribute(el1, "class", "files-list");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "list-bare");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "uploads", ["loc", [null, [3, 12], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-file-upload/upload-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    sessionService: _ember['default'].inject.service('session'),
    tagName: 'li',
    classNames: ['upload-item'],
    classNameBindings: ['success', 'inProgress', 'error', 'cancelled:u-hidden'],
    upload: null,

    inProgress: _ember['default'].computed.equal('upload.status', 'PROGRESS'),
    success: _ember['default'].computed.equal('upload.status', 'SUCCESS'),
    cancelled: _ember['default'].computed.equal('upload.status', 'CANCELLED'),
    error: _ember['default'].computed.equal('upload.status', 'ERROR'),

    uploadProgress: _ember['default'].computed('upload.progress', function () {
      return Math.round(this.get('upload.progress'));
    }),

    uploadUrl: _ember['default'].computed('upload.contentUrl', function () {
      return this.get('upload.contentUrl') + '?_session_id=' + this.get('sessionService.sessionId');
    }),

    actions: {
      cancel: function cancel() {
        this.get('upload').cancel();
        this.sendAction('onCancel', this.get('upload'));
      }
    }
  });
});
define("frontend-cp/components/ko-file-upload/upload-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "upload.name", ["loc", [null, [4, 4], [4, 19]]]], ["inline", "t", ["generic.uploads.toolarge"], [], ["loc", [null, [5, 4], [5, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "upload.name", ["loc", [null, [7, 4], [7, 19]]]], ["inline", "t", ["generic.uploads.unknown"], [], ["loc", [null, [8, 4], [8, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "upload.error", ["loc", [null, [3, 12], [3, 24]]]], "TOO_LARGE"], [], ["loc", [null, [3, 8], [3, 37]]]]], [], 0, 1, ["loc", [null, [3, 2], [9, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "upload-item__name upload-item__name--is-progressing");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-good");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element2, 'onclick');
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [14, 57], [14, 76]]]]], ["content", "upload.name", ["loc", [null, [15, 68], [15, 83]]]], ["content", "uploadProgress", ["loc", [null, [16, 23], [16, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "upload-item__name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "upload-item__size");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [20, 57], [20, 76]]]]], ["attribute", "href", ["concat", [["get", "uploadUrl", ["loc", [null, [21, 39], [21, 48]]]]]]], ["content", "upload.name", ["loc", [null, [21, 52], [21, 67]]]], ["inline", "ko-file-size", [], ["size", ["subexpr", "@mut", [["get", "upload.size", ["loc", [null, [22, 54], [22, 65]]]]], [], []]], ["loc", [null, [22, 34], [22, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [1, 10], [1, 23]]]], "ERROR"], [], ["loc", [null, [1, 6], [1, 32]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [13, 10], [13, 23]]]], "PROGRESS"], [], ["loc", [null, [13, 6], [13, 35]]]]], [], 1, null, ["loc", [null, [13, 0], [17, 7]]]], ["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [19, 10], [19, 23]]]], "SUCCESS"], [], ["loc", [null, [19, 6], [19, 34]]]]], [], 2, null, ["loc", [null, [19, 0], [23, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-form/buttons/component', ['exports', 'ember', 'frontend-cp/components/ko-form/component'], function (exports, _ember, _frontendCpComponentsKoFormComponent) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    submitLabel: null,
    cancelLabel: null,
    onCancel: null,
    onSubmit: null,

    koForm: _ember['default'].computed(function () {
      return this.nearestOfType(_frontendCpComponentsKoFormComponent['default']);
    }),

    isSubmitting: _ember['default'].computed.oneWay('koForm.isSubmitting')
  });
});
define("frontend-cp/components/ko-form/buttons/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-form_buttons__loader"], ["loc", [null, [4, 6], [4, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "name", "cancel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createAttrMorph(element1, 'onclick');
            morphs[2] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["button t-small ", ["get", "cancelButtonClass", ["loc", [null, [7, 54], [7, 71]]]]]]], ["attribute", "onclick", ["get", "onCancel", ["loc", [null, [7, 99], [7, 107]]]]], ["content", "cancelLabel", ["loc", [null, [7, 110], [7, 125]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "onCancel", ["loc", [null, [6, 12], [6, 20]]]]], [], 0, null, ["loc", [null, [6, 6], [8, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'type');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "type", ["subexpr", "if", [["get", "onSubmit", ["loc", [null, [11, 24], [11, 32]]]], "button", "submit"], [], ["loc", [null, [11, 19], [11, 52]]]]], ["attribute", "class", ["concat", ["button button--primary ", ["get", "submitClass", ["loc", [null, [11, 85], [11, 96]]]]]]], ["attribute", "onclick", ["get", "onSubmit", ["loc", [null, [11, 124], [11, 132]]]]], ["content", "submitLabel", ["loc", [null, [11, 135], [11, 150]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1 t-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        return morphs;
      },
      statements: [["block", "if", [["get", "isSubmitting", ["loc", [null, [3, 10], [3, 22]]]]], [], 0, 1, ["loc", [null, [3, 4], [9, 11]]]], ["block", "if", [["get", "submitLabel", ["loc", [null, [10, 10], [10, 21]]]]], [], 2, null, ["loc", [null, [10, 4], [12, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-form/component', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  var set = _ember['default'].set;
  exports['default'] = _ember['default'].Component.extend({
    // Params
    fields: _ember['default'].Object.create({}), // it's ok for this to be in the class definition since this object
    // is never mutated
    onSubmit: function onSubmit() {},
    onError: function onError() {},
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    isSubmitting: false,

    notificationService: _ember['default'].inject.service('notification'),
    intlService: _ember['default'].inject.service('intl'),

    tagName: 'form',
    classNameBindings: ['isValid:ko-form--is-valid', 'isSubmitting:ko-form--is-submitting'],

    fieldsArray: _ember['default'].computed('fields.[]', function () {
      var fields = this.get('fields');
      return Object.keys(fields).map(function (key) {
        return fields[key];
      });
    }),

    fieldValuesArray: _ember['default'].computed('fieldsArray.@each.value', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.value;
      });
    }),

    fieldValidatorsArray: _ember['default'].computed('fieldsArray.@each.validator', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.validator;
      });
    }),

    isFormValid: _ember['default'].computed('fieldValuesArray.[]', 'fieldValidatorsArray.[]', function () {
      // TODO: Fix flaky Ember watching
      this.get('fieldValuesArray');
      this.get('fieldValidatorsArray');

      var fields = this.get('fields');
      return getAreFieldsValid(fields);

      function getAreFieldsValid(fields) {
        return Object.keys(fields).every(function (key) {
          var field = fields[key];
          return isFieldValid(field.value, field.validator);
        });
      }

      function isFieldValid(value, validator) {
        if (!validator || !value) {
          return true;
        }
        var errors = validator(value);
        var hasErrors = errors && (typeof errors === 'string' || Array.isArray(errors) && errors.length > 0);
        return !hasErrors;
      }
    }),

    isSubmitDisabled: _ember['default'].computed('isFormValid', 'isSubmitting', function () {
      return !this.get('isFormValid') || this.get('isSubmitting');
    }),

    submit: function submit(e) {
      var _this = this;

      e.preventDefault();
      e.stopPropagation();
      if (!this.get('isFormValid')) {
        return false;
      }
      if (this.get('isSubmitting')) {
        return false;
      }
      var fields = this.get('fields');

      var fieldValues = Object.keys(fields).reduce(function (fieldValues, key) {
        fieldValues[key] = fields[key].value;
        return fieldValues;
      }, {});
      this.set('isSubmitting', true);
      return this.attrs.onSubmit(fieldValues).then(function (response) {
        if (_this.attrs.onSuccess) {
          _this.attrs.onSuccess(response);
        }
        return response;
      })['catch'](function (error) {
        Object.keys(fields).forEach(function (field) {
          set(get(fields, field), 'errors', []);
        });
        if (error && error.errors && error.errors.length) {
          error.errors.filter(function (errorData) {
            return Boolean(errorData.parameter);
          }).forEach(function (errorData) {
            var fieldName = errorData.parameter;
            var relatedField = get(fields, fieldName);
            if (relatedField) {
              relatedField.errors.pushObject(_ember['default'].Object.create({
                message: errorData.message
              }));
            }
          });
        }
        if (_this.attrs.onError) {
          _this.attrs.onError(error);
        }
      })['finally'](function () {
        _this.set('isSubmitting', false);
      });
    },

    actions: {
      cancel: function cancel() {
        this.attrs.onCancel();
      }
    }
  });
});
define('frontend-cp/components/ko-form/field/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    field: null,
    nogap: false,

    classNameBindings: ['nogap::ko-form_field--gap'],

    tagName: 'label',

    shouldShowValidationErrors: false,

    validationErrors: _ember['default'].computed('field.value', 'field.validator', function () {
      var value = this.get('field.value');
      var validator = this.get('field.validator');
      if (!validator || !value) {
        return null;
      }
      var errors = validator(value);
      if (errors && !Array.isArray(errors)) {
        errors = [errors];
      }
      return errors;
    }),

    focusOut: function focusOut(event) {
      var isFocusStillInsideElement = _ember['default'].$.contains(this.$()[0], event.relatedTarget);
      if (isFocusStillInsideElement) {
        return;
      }
      this.set('shouldShowValidationErrors', true);
    }
  });
});
define('frontend-cp/components/ko-form/field/errors/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    errors: null
  });
});
define("frontend-cp/components/ko-form/field/errors/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-form_field_errors__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [2, 39], [2, 56]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "errors", ["loc", [null, [1, 8], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-form/field/help/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'p'
  });
});
define("frontend-cp/components/ko-form/field/help/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/help/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-form/field/label/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-form/field/label/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/label/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-form/field/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "ko-form_field__error");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error", ["loc", [null, [3, 71], [3, 80]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "each", [["get", "validationErrors", ["loc", [null, [3, 10], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 2], [3, 93]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 86
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-form_field__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [5, 65], [5, 82]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 95
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]], ["block", "if", [["get", "shouldShowValidationErrors", ["loc", [null, [2, 6], [2, 32]]]]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]], ["block", "each", [["get", "field.errors", ["loc", [null, [5, 8], [5, 20]]]]], [], 1, null, ["loc", [null, [5, 0], [5, 95]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("frontend-cp/components/ko-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "frontend-cp/components/ko-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isFormValid", ["loc", [null, [1, 8], [1, 19]]]], ["get", "isSubmitting", ["loc", [null, [1, 20], [1, 32]]]]], [], ["loc", [null, [1, 0], [1, 34]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-identities/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  var dasherize = _ember['default'].String.dasherize;
  exports['default'] = _ember['default'].Component.extend({
    store: service(),
    intl: service(),
    notification: service('error-handler/notification-strategy'),
    notificationService: service('notification'),

    // CPs
    emailIdentities: computed.filterBy('parent.emails', 'isNew', false),
    twitterIdentities: computed.filterBy('parent.twitter', 'isNew', false),
    phoneIdentities: computed.filterBy('parent.phones', 'isNew', false),
    facebookIdentities: computed.filterBy('parent.facebook', 'isNew', false),

    // Actions
    actions: {
      makePrimaryIdentity: function makePrimaryIdentity(identity, dropdown) {
        var _this = this;

        var identities = undefined;
        if (identity.constructor.modelName === 'identity-email') {
          identities = this.get('parent.emails');
        } else if (identity.constructor.modelName === 'identity-twitter') {
          identities = this.get('parent.twitter');
        } else if (identity.constructor.modelName === 'identity-phone') {
          identities = this.get('parent.phones');
        } else if (identity.constructor.modelName === 'identity-facebook') {
          identities = this.get('parent.facebook');
        }

        identity.set('isPrimary', true);
        dropdown.actions.close();
        identity.save().then(function (identity) {
          return _this._handleMarkAsPrimaryResponse(identities, identity);
        })['catch'](function () {
          return dropdown.actions.open();
        });
      },

      validateIdentity: function validateIdentity(identity, dropdown) {
        var _this2 = this;

        dropdown.actions.close();
        if (identity.constructor.modelName === 'identity-email') {
          var adapter = this.container.lookup('adapter:application');
          var url = adapter.namespace + '/identities/emails/' + identity.get('id') + '/send_verification_email';
          adapter.ajax(url, 'PUT').then(function (data) {
            _this2.get('notification').processAll(data.notifications);
          })['catch'](function () {
            return dropdown.actions.open();
          });
        }
      },

      // sendValidationEmail(identity, dropdown) {
      //   dropdown.actions.close();
      //   const adapter = this.container.lookup('adapter:application');
      //   adapter.ajax(`${adapter.namespace}/identities/emails/${identity.get('id')}/send_validation_email`, 'POST').catch(() => dropdown.actions.open());
      // },

      removeIdentity: function removeIdentity(identity, dropdown) {
        var _this3 = this;

        dropdown.actions.close();
        var message = this.get('intl').findTranslationByKey('generic.identities.confirm_remove');
        if (identity.get('isNew') || confirm(message)) {
          identity.destroyRecord().then(function () {
            _this3.get('notificationService').success(_this3.get('intl').findTranslationByKey('generic.identities.removed.success_message'));
          })['catch'](function () {
            return dropdown.actions.open();
          });
        }
      },

      addEmail: function addEmail(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-email'));
      },

      addTwitter: function addTwitter(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-twitter'));
      },

      addPhone: function addPhone(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-phone'));
      },

      saveIdentity: function saveIdentity(identity) {
        var _this4 = this;

        identity.set(this.get('parent').constructor.modelName, this.get('parent'));
        return identity.save().then(function () {
          _this4.get('notificationService').success(_this4.get('intl').findTranslationByKey('generic.identities.added.success_message'));
          return _this4.set('newIdentity', null);
        }, function (e) {
          identity.set('parent', null);
          throw e;
        });
      },

      removeNewIdentity: function removeNewIdentity() {
        var identity = this.get('newIdentity');
        this.send('removeIdentity', identity);
        this.set('newIdentity', null);
      }
    },

    // Marking an identity as primary means that all other identities of the same type for the same
    // user have to me marked as non primary.
    //
    // Presumably, the backend already takes care of that, but the payload only returns the data of
    // the identity being modified, so the changes in other identities are implicit.
    //
    // Due to this, we need to push to the store the updates in the other identitities. That way
    // those identies are modified without making them as dirty for ember-data.
    //
    _handleMarkAsPrimaryResponse: function _handleMarkAsPrimaryResponse(identities, updatedIdentity) {
      var store = this.get('store');

      identities.forEach(function (identity) {
        if (updatedIdentity !== identity) {
          var nonPrimaryPayload = {
            status: 200,
            data: {
              id: identity.get('id'),
              type: dasherize(updatedIdentity.constructor.modelName),
              attributes: {
                isPrimary: false
              }
            }
          };

          store.push(nonPrimaryPayload);
        }
      });
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/components/ko-identities/form/component', ['exports', 'ember', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpUtilsFormatValidations) {
  var computed = _ember['default'].computed;
  var isBlank = _ember['default'].isBlank;
  var inject = _ember['default'].inject;

  var placeholders = {
    'identity-email': 'generic.identities.placeholders.email',
    'identity-twitter': 'generic.identities.placeholders.twitter',
    'identity-phone': 'generic.identities.placeholders.phone'
  };
  var inputTypes = {
    'identity-email': 'email',
    'identity-twitter': 'text',
    'identity-phone': 'tel'
  };

  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-identities_form'],
    intl: inject.service(),
    // CPs
    placeholder: computed('identity', function () {
      return placeholders[this.get('identity.constructor.modelName')];
    }),

    inputType: computed('identity', function () {
      return inputTypes[this.get('identity.constructor.modelName')];
    }),

    didInsertElement: function didInsertElement() {
      this.$('input').focus();
    },

    // Actions
    actions: {
      save: function save() {
        var identity = this.get('identity');
        identity.get('errors').clear();
        if (identity.constructor.modelName === 'identity-email') {
          return this.saveEmail(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-twitter') {
          return this.saveTwitter(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-phone') {
          return this.savePhone(this.get('mainField').trim());
        }
      },

      cancel: function cancel(e) {
        e.preventDefault();
        this.attrs.cancel();
      }
    },

    // Methods
    saveEmail: function saveEmail(email) {
      var identity = this.get('identity');
      if ((0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email)) {
        identity.set('email', email);
        return this.attrs.save(identity);
      } else {
        var message = this.get('intl').findTranslationByKey('generic.identities.errors.invalid_email_format');
        identity.get('errors').add('email', message);
        return _ember['default'].RSVP.Promise.reject();
      }
    },

    saveTwitter: function saveTwitter(screenName) {
      var identity = this.get('identity');
      if (screenName.indexOf('@') !== 0) {
        screenName = '@' + screenName; // Add @sign for validation
      }
      if ((0, _frontendCpUtilsFormatValidations.validateTwitterHandleFormat)(screenName)) {
        identity.set('screenName', screenName.slice(1)); // Remove @ before save
        return this.attrs.save(identity);
      } else {
        var message = this.get('intl').findTranslationByKey('generic.identities.errors.invalid_twitter_handle_format');
        identity.get('errors').add('screenName', message);
        return _ember['default'].RSVP.Promise.reject();
      }
    },

    savePhone: function savePhone(number) {
      var sanitizedNumber = number.replace(/[^0-9+]/g, '');
      if (isBlank(sanitizedNumber)) {
        return _ember['default'].RSVP.Promise.reject();
      }
      var identity = this.get('identity');
      identity.set('number', sanitizedNumber);
      return this.attrs.save(identity);
    }
  });
});
define("frontend-cp/components/ko-identities/form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "u-mt-");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "submit");
          dom.setAttribute(el2, "class", "button button--default");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "button-naked t-bad");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createAttrMorph(element1, 'disabled');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element0, 3, 3);
          morphs[5] = dom.createAttrMorph(element2, 'onclick');
          morphs[6] = dom.createAttrMorph(element2, 'disabled');
          morphs[7] = dom.createMorphAt(element2, 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "inputType", ["loc", [null, [2, 15], [2, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "mainField", ["loc", [null, [2, 31], [2, 40]]]]], [], []], "placeholder", ["subexpr", "t", [["get", "placeholder", ["loc", [null, [2, 56], [2, 67]]]]], [], ["loc", [null, [2, 53], [2, 68]]]], "disabled", ["subexpr", "@mut", [["get", "identity.isSaving", ["loc", [null, [2, 78], [2, 95]]]]], [], []], "class", "input-text--full"], ["loc", [null, [2, 2], [2, 122]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "identity.errors", ["loc", [null, [3, 32], [3, 47]]]]], [], []]], ["loc", [null, [3, 2], [3, 49]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [5, 68], [5, 78]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [6, 6], [6, 26]]]], ["inline", "t", ["generic.or"], [], ["loc", [null, [8, 4], [8, 22]]]], ["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [9, 34], [9, 53]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [9, 92], [9, 102]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [10, 6], [10, 28]]]]],
        locals: ["_", "isDisabled"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["save"], [], ["loc", [null, [1, 20], [1, 35]]]]], 0, null, ["loc", [null, [1, 0], [13, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-identities/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 16
                  },
                  "end": {
                    "line": 15,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element17 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element17, 'onclick');
                morphs[1] = dom.createMorphAt(element17, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "emailIdentity", ["loc", [null, [12, 89], [12, 102]]]], ["get", "dropdown", ["loc", [null, [12, 103], [12, 111]]]]], [], ["loc", [null, [12, 63], [12, 113]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [13, 20], [13, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 16
                  },
                  "end": {
                    "line": 20,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element16 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element16, 'onclick');
                morphs[1] = dom.createMorphAt(element16, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "emailIdentity", ["loc", [null, [17, 94], [17, 107]]]], ["get", "dropdown", ["loc", [null, [17, 108], [17, 116]]]]], [], ["loc", [null, [17, 63], [17, 118]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [18, 20], [18, 59]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 16
                  },
                  "end": {
                    "line": 30,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element15 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element15, 'onclick');
                morphs[1] = dom.createMorphAt(element15, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["validateIdentity", ["get", "emailIdentity", ["loc", [null, [22, 91], [22, 104]]]], ["get", "dropdown", ["loc", [null, [22, 105], [22, 113]]]]], [], ["loc", [null, [22, 63], [22, 115]]]]], ["inline", "t", ["generic.identities.validate_identity"], [], ["loc", [null, [23, 20], [23, 64]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 16
                  },
                  "end": {
                    "line": 33,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [32, 18], [32, 58]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 14
                },
                "end": {
                  "line": 34,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "emailIdentity.canBeRemoved", ["loc", [null, [11, 22], [11, 48]]]]], [], 0, null, ["loc", [null, [11, 16], [15, 23]]]], ["block", "if", [["get", "emailIdentity.canBePrimarized", ["loc", [null, [16, 22], [16, 51]]]]], [], 1, null, ["loc", [null, [16, 16], [20, 23]]]], ["block", "if", [["get", "emailIdentity.canBeValidated", ["loc", [null, [21, 22], [21, 50]]]]], [], 2, null, ["loc", [null, [21, 16], [30, 23]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "emailIdentity.email", ["loc", [null, [31, 91], [31, 110]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [31, 119], [31, 141]]]]], [], []]], 3, null, ["loc", [null, [31, 16], [33, 32]]]]],
            locals: ["dropdown"],
            templates: [child0, child1, child2, child3]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 18
                  },
                  "end": {
                    "line": 39,
                    "column": 80
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "i-caution");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 14
                },
                "end": {
                  "line": 42,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-identities__list-item");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1]);
              var element14 = dom.childAt(element13, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element14, 'title');
              morphs[1] = dom.createMorphAt(element14, 1, 1);
              morphs[2] = dom.createMorphAt(element14, 3, 3);
              morphs[3] = dom.createMorphAt(element13, 3, 3);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["get", "emailIdentity.email", ["loc", [null, [36, 65], [36, 84]]]]]]], ["content", "emailIdentity.email", ["loc", [null, [37, 20], [37, 43]]]], ["inline", "if", [["get", "emailIdentity.isPrimary", ["loc", [null, [37, 49], [37, 72]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [37, 73], [37, 113]]]]], [], ["loc", [null, [37, 44], [37, 115]]]], ["block", "unless", [["get", "emailIdentity.isValidated", ["loc", [null, [39, 28], [39, 53]]]]], [], 0, null, ["loc", [null, [39, 18], [39, 91]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 10
              },
              "end": {
                "line": 44,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [10, 14], [42, 33]]]]],
          locals: ["emailIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--emails");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.email_identities_title"], [], ["loc", [null, [6, 11], [6, 60]]]], ["block", "each", [["get", "emailIdentities", ["loc", [null, [8, 18], [8, 33]]]]], [], 0, null, ["loc", [null, [8, 10], [44, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 18
                  },
                  "end": {
                    "line": 55,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element11, 'onclick');
                morphs[1] = dom.createMorphAt(element11, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "twitterIdentity", ["loc", [null, [54, 91], [54, 106]]]], ["get", "dropdown", ["loc", [null, [54, 107], [54, 115]]]]], [], ["loc", [null, [54, 65], [54, 117]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [54, 118], [54, 160]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 18
                  },
                  "end": {
                    "line": 58,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element10, 'onclick');
                morphs[1] = dom.createMorphAt(element10, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "twitterIdentity", ["loc", [null, [57, 96], [57, 111]]]], ["get", "dropdown", ["loc", [null, [57, 112], [57, 120]]]]], [], ["loc", [null, [57, 65], [57, 122]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [57, 123], [57, 162]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 62,
                    "column": 18
                  },
                  "end": {
                    "line": 64,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [63, 20], [63, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 14
                },
                "end": {
                  "line": 65,
                  "column": 16
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "identities-dropdown_item");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "taget", "_blank");
              var el3 = dom.createTextNode("See profile");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [3, 1]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createAttrMorph(element12, 'href');
              morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "twitterIdentity.canBeRemoved", ["loc", [null, [53, 24], [53, 52]]]]], [], 0, null, ["loc", [null, [53, 18], [55, 25]]]], ["block", "if", [["get", "twitterIdentity.canBePrimarized", ["loc", [null, [56, 24], [56, 55]]]]], [], 1, null, ["loc", [null, [56, 18], [58, 25]]]], ["attribute", "href", ["concat", ["https://twitter.com/", ["get", "twitterIdentity.screenName", ["loc", [null, [60, 51], [60, 77]]]]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "twitterIdentity.screenName", ["loc", [null, [62, 93], [62, 119]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [62, 128], [62, 150]]]]], [], []]], 2, null, ["loc", [null, [62, 18], [64, 34]]]]],
            locals: ["dropdown"],
            templates: [child0, child1, child2]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 16
                },
                "end": {
                  "line": 72,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-identities__list-item");
              var el3 = dom.createTextNode("\n                      @");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element9, 'title');
              morphs[1] = dom.createMorphAt(element9, 1, 1);
              morphs[2] = dom.createMorphAt(element9, 3, 3);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", ["@", ["get", "twitterIdentity.screenName", ["loc", [null, [67, 68], [67, 94]]]]]]], ["content", "twitterIdentity.screenName", ["loc", [null, [68, 23], [68, 53]]]], ["inline", "if", [["get", "twitterIdentity.isPrimary", ["loc", [null, [68, 59], [68, 84]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [68, 85], [68, 125]]]]], [], ["loc", [null, [68, 54], [68, 127]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 10
              },
              "end": {
                "line": 74,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [52, 14], [72, 33]]]]],
          locals: ["twitterIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--twitters");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.twitter_identities_title"], [], ["loc", [null, [48, 11], [48, 62]]]], ["block", "each", [["get", "twitterIdentities", ["loc", [null, [50, 18], [50, 35]]]]], [], 0, null, ["loc", [null, [50, 10], [74, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 84,
                      "column": 18
                    },
                    "end": {
                      "line": 86,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element8 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element8, 'onclick');
                  morphs[1] = dom.createMorphAt(element8, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "phoneIdentity", ["loc", [null, [85, 91], [85, 104]]]], ["get", "dropdown", ["loc", [null, [85, 105], [85, 113]]]]], [], ["loc", [null, [85, 65], [85, 115]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [85, 116], [85, 158]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 87,
                      "column": 18
                    },
                    "end": {
                      "line": 89,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element7, 'onclick');
                  morphs[1] = dom.createMorphAt(element7, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "phoneIdentity", ["loc", [null, [88, 96], [88, 109]]]], ["get", "dropdown", ["loc", [null, [88, 110], [88, 118]]]]], [], ["loc", [null, [88, 65], [88, 120]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [88, 121], [88, 160]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 90,
                      "column": 18
                    },
                    "end": {
                      "line": 92,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [91, 20], [91, 60]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 16
                  },
                  "end": {
                    "line": 93,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "phoneIdentity.canBeRemoved", ["loc", [null, [84, 24], [84, 50]]]]], [], 0, null, ["loc", [null, [84, 18], [86, 25]]]], ["block", "if", [["get", "phoneIdentity.canBePrimarized", ["loc", [null, [87, 24], [87, 53]]]]], [], 1, null, ["loc", [null, [87, 18], [89, 25]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "phoneIdentity.number", ["loc", [null, [90, 93], [90, 113]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [90, 122], [90, 144]]]]], [], []]], 2, null, ["loc", [null, [90, 18], [92, 34]]]]],
              locals: ["dropdown"],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 93,
                    "column": 16
                  },
                  "end": {
                    "line": 100,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-identities__list-item");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element6, 'title');
                morphs[1] = dom.createMorphAt(element6, 1, 1);
                morphs[2] = dom.createMorphAt(element6, 3, 3);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["get", "phoneIdentity.number", ["loc", [null, [95, 67], [95, 87]]]]]]], ["content", "phoneIdentity.number", ["loc", [null, [96, 22], [96, 46]]]], ["inline", "if", [["get", "phoneIdentity.isPrimary", ["loc", [null, [96, 52], [96, 75]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [96, 76], [96, 116]]]]], [], ["loc", [null, [96, 47], [96, 118]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 82,
                  "column": 14
                },
                "end": {
                  "line": 101,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [83, 16], [100, 35]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 101,
                  "column": 14
                },
                "end": {
                  "line": 103,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["content", "phoneIdentity.number", ["loc", [null, [102, 16], [102, 40]]]], ["inline", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [102, 41], [102, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 10
              },
              "end": {
                "line": 105,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "phoneIdentity.canBeModified", ["loc", [null, [82, 20], [82, 47]]]]], [], 0, 1, ["loc", [null, [82, 14], [103, 21]]]]],
          locals: ["phoneIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 107,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--phones");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.phones_identities_title"], [], ["loc", [null, [78, 11], [78, 61]]]], ["block", "each", [["get", "phoneIdentities", ["loc", [null, [80, 18], [80, 33]]]]], [], 0, null, ["loc", [null, [80, 10], [105, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 115,
                      "column": 18
                    },
                    "end": {
                      "line": 117,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element5, 'onclick');
                  morphs[1] = dom.createMorphAt(element5, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "facebookIdentity", ["loc", [null, [116, 91], [116, 107]]]], ["get", "dropdown", ["loc", [null, [116, 108], [116, 116]]]]], [], ["loc", [null, [116, 65], [116, 118]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [116, 119], [116, 161]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 118,
                      "column": 18
                    },
                    "end": {
                      "line": 120,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element4, 'onclick');
                  morphs[1] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "facebookIdentity", ["loc", [null, [119, 96], [119, 112]]]], ["get", "dropdown", ["loc", [null, [119, 113], [119, 121]]]]], [], ["loc", [null, [119, 65], [119, 123]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [119, 124], [119, 163]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 121,
                      "column": 18
                    },
                    "end": {
                      "line": 123,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [122, 20], [122, 60]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 114,
                    "column": 16
                  },
                  "end": {
                    "line": 124,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "facebookIdentity.canBeRemoved", ["loc", [null, [115, 24], [115, 53]]]]], [], 0, null, ["loc", [null, [115, 18], [117, 25]]]], ["block", "if", [["get", "facebookIdentity.canBePrimarized", ["loc", [null, [118, 24], [118, 56]]]]], [], 1, null, ["loc", [null, [118, 18], [120, 25]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "facebookIdentity.userName", ["loc", [null, [121, 93], [121, 118]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [121, 127], [121, 149]]]]], [], []]], 2, null, ["loc", [null, [121, 18], [123, 34]]]]],
              locals: ["dropdown"],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 124,
                    "column": 16
                  },
                  "end": {
                    "line": 131,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-identities__list-item");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element3, 'title');
                morphs[1] = dom.createMorphAt(element3, 1, 1);
                morphs[2] = dom.createMorphAt(element3, 3, 3);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["get", "facebookIdentity.userName", ["loc", [null, [126, 67], [126, 92]]]]]]], ["content", "facebookIdentity.userName", ["loc", [null, [127, 22], [127, 51]]]], ["inline", "if", [["get", "facebookIdentity.isPrimary", ["loc", [null, [127, 57], [127, 83]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [127, 84], [127, 124]]]]], [], ["loc", [null, [127, 52], [127, 126]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 113,
                  "column": 14
                },
                "end": {
                  "line": 132,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [114, 16], [131, 35]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 132,
                  "column": 14
                },
                "end": {
                  "line": 134,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["content", "facebookIdentity.userName", ["loc", [null, [133, 16], [133, 45]]]], ["inline", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [133, 46], [133, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 111,
                "column": 10
              },
              "end": {
                "line": 136,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "facebookIdentity.canBeModified", ["loc", [null, [113, 20], [113, 50]]]]], [], 0, 1, ["loc", [null, [113, 14], [134, 21]]]]],
          locals: ["facebookIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--facebooks");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.facebook_identities_title"], [], ["loc", [null, [109, 11], [109, 63]]]], ["block", "each", [["get", "facebookIdentities", ["loc", [null, [111, 18], [111, 36]]]]], [], 0, null, ["loc", [null, [111, 10], [136, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 140,
                "column": 8
              },
              "end": {
                "line": 144,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 0, 0);
            morphs[4] = dom.createAttrMorph(element2, 'onclick');
            morphs[5] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["addEmail", ["get", "dropdown", ["loc", [null, [141, 75], [141, 83]]]]], [], ["loc", [null, [141, 55], [141, 85]]]]], ["inline", "t", ["generic.identities.add_email_identity"], [], ["loc", [null, [141, 86], [141, 131]]]], ["attribute", "onclick", ["subexpr", "action", ["addPhone", ["get", "dropdown", ["loc", [null, [142, 75], [142, 83]]]]], [], ["loc", [null, [142, 55], [142, 85]]]]], ["inline", "t", ["generic.identities.add_phone_identity"], [], ["loc", [null, [142, 86], [142, 131]]]], ["attribute", "onclick", ["subexpr", "action", ["addTwitter", ["get", "dropdown", ["loc", [null, [143, 77], [143, 85]]]]], [], ["loc", [null, [143, 55], [143, 87]]]]], ["inline", "t", ["generic.identities.add_twitter_identity"], [], ["loc", [null, [143, 88], [143, 135]]]]],
          locals: ["dropdown"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 144,
                "column": 8
              },
              "end": {
                "line": 151,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-identities__list-item");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-dropdown__item-chevron i-chevron-large-down");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["generic.identities.add_new"], [], ["loc", [null, [147, 14], [147, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container ko-identities__create-dropdown"], 0, 1, ["loc", [null, [140, 8], [151, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-identities/form", [], ["identity", ["subexpr", "@mut", [["get", "newIdentity", ["loc", [null, [154, 34], [154, 45]]]]], [], []], "save", ["subexpr", "action", ["saveIdentity"], [], ["loc", [null, [154, 51], [154, 74]]]], "cancel", ["subexpr", "action", ["removeNewIdentity"], [], ["loc", [null, [154, 82], [154, 110]]]]], ["loc", [null, [154, 4], [154, 112]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 157,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "info-bar-item info-bar-item--no-hover");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "info-bar__heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element18, 3, 3);
        morphs[2] = dom.createMorphAt(element18, 4, 4);
        morphs[3] = dom.createMorphAt(element18, 5, 5);
        morphs[4] = dom.createMorphAt(element18, 6, 6);
        morphs[5] = dom.createMorphAt(element18, 7, 7);
        morphs[6] = dom.createMorphAt(element18, 8, 8);
        return morphs;
      },
      statements: [["inline", "t", ["generic.identities.component_title"], [], ["loc", [null, [3, 4], [3, 46]]]], ["block", "if", [["get", "emailIdentities.length", ["loc", [null, [5, 12], [5, 34]]]]], [], 0, null, ["loc", [null, [5, 6], [46, 13]]]], ["block", "if", [["get", "twitterIdentities.length", ["loc", [null, [47, 12], [47, 36]]]]], [], 1, null, ["loc", [null, [47, 6], [76, 13]]]], ["block", "if", [["get", "phoneIdentities.length", ["loc", [null, [77, 12], [77, 34]]]]], [], 2, null, ["loc", [null, [77, 6], [107, 13]]]], ["block", "if", [["get", "facebookIdentities.length", ["loc", [null, [108, 12], [108, 37]]]]], [], 3, null, ["loc", [null, [108, 6], [138, 13]]]], ["block", "unless", [["get", "newIdentity", ["loc", [null, [139, 16], [139, 27]]]]], [], 4, null, ["loc", [null, [139, 6], [152, 17]]]], ["block", "if", [["get", "newIdentity", ["loc", [null, [153, 8], [153, 19]]]]], [], 5, null, ["loc", [null, [153, 2], [155, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['list-bare']
  });
});
define('frontend-cp/components/ko-info-bar/field/cascadingselect/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var map = _npmLodash['default'].map;
  var groupBy = _npmLodash['default'].groupBy;
  var partition = _npmLodash['default'].partition;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    tree: _ember['default'].computed('options', function () {
      var items = this.get('options').filter(function (option) {
        return option && _ember['default'].get(option, 'value');
      }).map(function (option) {
        return {
          id: _ember['default'].get(option, 'id'),
          value: _ember['default'].get(option, 'value').split(' / ')
        };
      });

      var group = function group(items) {
        return map(groupBy(items, function (item) {
          return item.value[0];
        }), function (items, label) {
          var _partition = partition(items, function (item) {
            return item.value.length > 1;
          });

          var _partition2 = _slicedToArray(_partition, 2);

          var children = _partition2[0];

          var _partition2$1 = _slicedToArray(_partition2[1], 1);

          var current = _partition2$1[0];

          return {
            id: current ? current.id : null,
            value: label,
            children: children ? group(children.map(function (item) {
              return {
                id: item.id,
                value: item.value.slice(1)
              };
            })) : null
          };
        });
      };

      return group(items);
    })
  });
});
define("frontend-cp/components/ko-info-bar/field/cascadingselect/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/cascadingselect/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/drill-down", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "tree", ["loc", [null, [3, 10], [3, 14]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "hasEmptyOption", ["subexpr", "@mut", [["get", "hasEmptyOption", ["loc", [null, [10, 17], [10, 31]]]]], [], []]], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/checkbox/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {

  var valueToArray = function valueToArray(value) {
    return (value || '').split(',').filter(function (v) {
      return v !== '';
    });
  };

  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    options: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: null,
    onValueChange: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isDisabled:info-bar-item--disabled'],

    isChecked: function isChecked(value, id) {
      return _npmLodash['default'].contains(valueToArray(value), id.toString());
    },

    actions: {
      valueChanged: function valueChanged(id, checked) {
        var value = valueToArray(_npmLodash['default'].clone(this.get('value')));
        if (checked) {
          value.push(id.toString());
        } else {
          value.splice(value.indexOf(id.toString()), 1);
        }
        value.sort();
        this.sendAction('onValueChange', value.toString());
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/checkbox/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/checkbox/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-checkbox", [], ["checked", ["subexpr", "ko-helper", [["get", "isChecked", ["loc", [null, [3, 35], [3, 44]]]], ["get", "value", ["loc", [null, [3, 45], [3, 50]]]], ["get", "option.id", ["loc", [null, [3, 51], [3, 60]]]]], [], ["loc", [null, [3, 24], [3, 61]]]], "label", ["subexpr", "@mut", [["get", "option.value", ["loc", [null, [4, 10], [4, 22]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], []], "onCheck", ["subexpr", "action", ["valueChanged", ["get", "option.id", ["loc", [null, [6, 35], [6, 44]]]]], [], ["loc", [null, [6, 12], [6, 45]]]]], ["loc", [null, [3, 2], [6, 47]]]]],
        locals: ["option"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 36], [1, 45]]]], ["block", "each", [["get", "options", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 0], [7, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/date/component', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    value: null,
    onValueChange: null,

    // State
    isFocused: false,
    isCalendarShown: false,

    // HTML
    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isCalendarShown:info-bar-item--active', 'isDisabled:info-bar-item--disabled'],
    attributeBindings: ['role'],
    role: 'menuitem',

    mouseDown: function mouseDown(e) {
      if (!this.get('isDisabled') && !this.get('isCalendarShown')) {
        e.preventDefault();
        this.$('.ko-info-bar_field_date__focus').focus();
      }
    },

    actions: {
      focus: function focus() {
        this.set('isCalendarShown', true);
      },

      blur: function blur() {
        this.set('isCalendarShown', false);
      },

      hide: function hide() {
        this.set('isCalendarShown', false);
      },

      preserveFocus: function preserveFocus(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      dateChange: function dateChange(value) {
        var date = value ? (0, _moment['default'])(value).format('YYYY-MM-DDTHH:mm:ss') + 'Z' : '';
        this.attrs.onValueChange(date);
        this.set('isCalendarShown', false);
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/date/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "format-date", [["get", "value", ["loc", [null, [10, 16], [10, 21]]]]], ["format", "full"], ["loc", [null, [10, 2], [10, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'onmousedown');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["preserveFocus"], [], ["loc", [null, [13, 53], [13, 79]]]]], ["inline", "ko-datepicker", [], ["date", ["subexpr", "@mut", [["get", "value", ["loc", [null, [14, 25], [14, 30]]]]], [], []], "onDateChange", ["subexpr", "action", ["dateChange"], [], ["loc", [null, [14, 44], [14, 65]]]], "onClose", ["subexpr", "action", ["hide"], [], ["loc", [null, [14, 74], [14, 89]]]]], ["loc", [null, [14, 4], [14, 91]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.setAttribute(el1, "class", "ko-info-bar_field_date__icon i-select");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_field_date__focus");
        dom.setAttribute(el1, "tabindex", "0");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'onfocus');
        morphs[1] = dom.createAttrMorph(element1, 'onblur');
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [5, 10], [5, 28]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [6, 9], [6, 26]]]]], ["content", "title", ["loc", [null, [8, 36], [8, 45]]]], ["block", "if", [["get", "value", ["loc", [null, [9, 6], [9, 11]]]]], [], 0, null, ["loc", [null, [9, 0], [11, 7]]]], ["block", "if", [["get", "isCalendarShown", ["loc", [null, [12, 6], [12, 21]]]]], [], 1, null, ["loc", [null, [12, 0], [16, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/decimal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/decimal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/decimal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/drill-down/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: null,
    placeholder: null,
    options: [],
    value: null,
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,
    hasEmptyOption: true,
    emptyLabel: '-',

    // HTML
    tagName: 'li'
  });
});
define('frontend-cp/components/ko-info-bar/field/drill-down/options/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    attributeBindings: ['role'],
    role: 'menu',

    actions: {
      preserveFocus: function preserveFocus(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/drill-down/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/options/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "role", "menuitem");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onmousedown');
          morphs[2] = dom.createAttrMorph(element0, 'onmouseup');
          morphs[3] = dom.createAttrMorph(element0, 'onmousemove');
          morphs[4] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ember-power-select-option ", ["subexpr", "ember-power-select-option-classes", [["get", "opt", ["loc", [null, [3, 73], [3, 76]]]], ["get", "selection", ["loc", [null, [3, 77], [3, 86]]]], ["get", "highlighted", ["loc", [null, [3, 87], [3, 98]]]]], [], ["loc", [null, [3, 37], [3, 100]]]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["preserveFocus"], [], ["loc", [null, [4, 16], [4, 42]]]]], ["attribute", "onmouseup", ["subexpr", "action", [["get", "select.actions.select", ["loc", [null, [5, 23], [5, 44]]]], ["get", "opt", ["loc", [null, [5, 45], [5, 48]]]]], [], ["loc", [null, [5, 14], [5, 50]]]]], ["attribute", "onmousemove", ["subexpr", "action", [["get", "select.actions.highlight", ["loc", [null, [6, 25], [6, 49]]]], ["get", "opt", ["loc", [null, [6, 50], [6, 53]]]]], [], ["loc", [null, [6, 16], [6, 55]]]]], ["inline", "yield", [["get", "opt", ["loc", [null, [9, 12], [9, 15]]]], ["get", "lastSearchedText", ["loc", [null, [9, 16], [9, 32]]]]], [], ["loc", [null, [9, 4], [9, 34]]]]],
        locals: ["opt"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/options/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "options", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-info-bar/field/drill-down/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/drill-down", [], ["options", ["subexpr", "@mut", [["get", "options", ["loc", [null, [2, 10], [2, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [4, 16], [4, 29]]]]], [], []], "emptyLabel", ["subexpr", "@mut", [["get", "emptyLabel", ["loc", [null, [5, 13], [5, 23]]]]], [], []], "hasEmptyOption", ["subexpr", "@mut", [["get", "hasEmptyOption", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "triggerComponent", "ko-info-bar/field/drill-down/trigger", "optionsComponent", "ko-info-bar/field/drill-down/options", "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "extra", ["subexpr", "hash", [], ["title", ["get", "title", ["loc", [null, [11, 10], [11, 15]]]], "placeholder", ["get", "placeholder", ["loc", [null, [12, 16], [12, 27]]]], "isEdited", ["get", "isEdited", ["loc", [null, [13, 13], [13, 21]]]], "isPusherEdited", ["get", "isPusherEdited", ["loc", [null, [14, 19], [14, 33]]]], "isErrored", ["get", "isErrored", ["loc", [null, [15, 14], [15, 23]]]]], ["loc", [null, [10, 8], [16, 3]]]]], ["loc", [null, [1, 0], [17, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/drill-down/trigger/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var run = _ember['default'].run;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    extra: null,
    select: null,

    // HTML
    classNames: ['info-bar-item'],
    classNameBindings: ['extra.isEdited:info-bar-item--edited', 'extra.isPusherEdited:info-bar-item--pusher-edited', 'extra.isErrored:info-bar-item--error', 'select.isOpen:info-bar-item--active'],

    didUpdateAttrs: function didUpdateAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (!oldAttrs.select.isOpen && newAttrs.select.isOpen) {
        run.schedule('afterRender', this, function () {
          this.element.querySelector('input').focus();
        });
      } else if (oldAttrs.select.isOpen && !newAttrs.select.isOpen) {
        newAttrs.select.actions.search('');
      }
    },

    value: computed('select.isOpen', 'extra.formattedValue', function () {
      if (this.get('select.isOpen')) {
        return '';
      } else {
        return this.get('extra.formattedValue');
      }
    }),

    actions: {
      handleMouseDown: function handleMouseDown(e) {
        if (this.get('select.isOpen')) {
          e.stopPropagation();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        var select = this.get('select');
        if (e.keyCode === 13 && select.isOpen) {
          select.actions.choose(this.get('highlighted'), e);
          e.stopPropagation();
        }
        if (!this.get('select.isOpen') && e.keyCode !== 9 && e.keyCode !== 13) {
          e.preventDefault();
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/drill-down/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-info-bar_field_drill-down__placeholder");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "extra.placeholder", ["loc", [null, [19, 60], [19, 81]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-info-bar_field_drill-down__placeholder");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "not", [["get", "value", ["loc", [null, [18, 13], [18, 18]]]]], [], ["loc", [null, [18, 8], [18, 19]]]]], [], 0, null, ["loc", [null, [18, 2], [20, 9]]]], ["content", "value", ["loc", [null, [21, 58], [21, 67]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "text");
        dom.setAttribute(el1, "autocomplete", "off");
        dom.setAttribute(el1, "autocorrect", "off");
        dom.setAttribute(el1, "autocapitalize", "off");
        dom.setAttribute(el1, "spellcheck", "false");
        dom.setAttribute(el1, "role", "textbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createAttrMorph(element1, 'value');
        morphs[4] = dom.createAttrMorph(element1, 'onmousedown');
        morphs[5] = dom.createAttrMorph(element1, 'onkeydown');
        morphs[6] = dom.createAttrMorph(element1, 'onfocus');
        morphs[7] = dom.createAttrMorph(element1, 'oninput');
        morphs[8] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-info-bar_field_drill-down_trigger__icon ", ["subexpr", "if", [["get", "select.isOpen", ["loc", [null, [1, 58], [1, 71]]]], "i-search", "i-select"], [], ["loc", [null, [1, 53], [1, 95]]]]]]], ["content", "extra.title", ["loc", [null, [2, 36], [2, 51]]]], ["attribute", "class", ["concat", ["ko-info-bar_field_drill-down_trigger__input ", ["subexpr", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [10, 63], [10, 76]]]]], [], ["loc", [null, [10, 58], [10, 77]]]], "ko-info-bar_field_drill-down_trigger__input--hidden"], [], ["loc", [null, [10, 53], [10, 133]]]]]]], ["attribute", "value", ["get", "value", ["loc", [null, [11, 10], [11, 15]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["handleMouseDown"], [], ["loc", [null, [12, 14], [12, 42]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [13, 12], [13, 38]]]]], ["attribute", "onfocus", ["get", "select.actions.open", ["loc", [null, [14, 12], [14, 31]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "select.actions.search", ["loc", [null, [15, 19], [15, 40]]]]], ["value", "target.value"], ["loc", [null, [15, 10], [15, 63]]]]], ["block", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [17, 11], [17, 24]]]]], [], ["loc", [null, [17, 6], [17, 25]]]]], [], 0, null, ["loc", [null, [17, 0], [22, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/file/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: '',
    onValueChange: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isDisabled:info-bar-item--disabled']
  });
});
define("frontend-cp/components/ko-info-bar/field/file/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/file/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 36], [1, 45]]]], ["inline", "ko-file-field", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 24], [3, 29]]]]], [], []], "on-change", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [4, 14], [4, 27]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], []]], ["loc", [null, [3, 2], [5, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/multiline-text/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: '',
    onValueChange: null,

    // State
    isActive: false,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isActive:info-bar-item--active', 'isDisabled:info-bar-item--disabled'],

    click: function click() {
      this.$('textarea').focus();
    },

    actions: {
      focus: function focus() {
        this.set('isActive', true);
      },

      blur: function blur(textarea) {
        this.set('isActive', false);
        textarea.scrollTop = 0;
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/multiline-text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/multiline-text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("textarea");
        dom.setAttribute(el2, "class", "ko-field-text__multiline-text");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'value');
        morphs[2] = dom.createAttrMorph(element0, 'oninput');
        morphs[3] = dom.createAttrMorph(element0, 'onfocus');
        morphs[4] = dom.createAttrMorph(element0, 'onblur');
        morphs[5] = dom.createAttrMorph(element0, 'disabled');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 36], [1, 45]]]], ["attribute", "value", ["get", "value", ["loc", [null, [5, 12], [5, 17]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [6, 21], [6, 34]]]]], ["value", "target.value"], ["loc", [null, [6, 12], [6, 57]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [7, 12], [7, 30]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], ["value", "target"], ["loc", [null, [8, 11], [8, 43]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [9, 15], [9, 25]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/numeric/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/numeric/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/numeric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/radio/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/radio/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "options", ["loc", [null, [3, 10], [3, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "idPath", "id", "labelPath", "value", "hasEmptyOption", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/regex/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/regex/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/search/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    onSearch: null,
    results: [],
    value: null,
    labelPath: null,
    onValueChange: null,
    isPusherEdited: false,
    isErrored: false,
    isEdited: false,
    isDisabled: false,

    // State
    isDropdownShown: false,
    searchTerm: '',
    currentResults: [],
    selectedIndex: 0,

    // HTML
    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isDropdownShown:info-bar-item--active', 'isDisabled:info-bar-item--disabled'],
    attributeBindings: ['role'],
    role: 'menuitem',

    currentLabel: _ember['default'].computed('value', 'labelPath', function () {
      var value = this.get('value');
      var labelPath = this.get('labelPath');
      if (value) {
        return labelPath ? get(value, labelPath) : value;
      } else {
        return '';
      }
    }),

    inputValue: _ember['default'].computed('currentLabel', 'isDropdownShown', 'searchTerm', function () {
      var currentLabel = this.get('currentLabel');
      var isDropdownShown = this.get('isDropdownShown');
      var searchTerm = this.get('searchTerm');
      return isDropdownShown ? searchTerm : currentLabel;
    }),

    isLoading: _ember['default'].computed('results.isSettled', function () {
      return this.get('results.isSettled') === false;
    }),

    resultsAvailable: _ember['default'].computed('currentResults.length', 'inputValue', function () {
      var inputValue = this.get('inputValue');
      return this.get('currentResults.length') > 0 && inputValue;
    }),

    updateCurrentResults: _ember['default'].observer('results', 'results.isSettled', function () {
      var results = this.get('results');
      var isSettled = this.get('results.isSettled');
      if (isSettled !== false) {
        this.set('currentResults', results);
        this.set('selectedIndex', 0);
      }
    }),

    updateResults: function updateResults() {
      if (this.get('searchTerm')) {
        this.attrs.onSearch(this.get('searchTerm'));
      }
    },

    moveSelectedItem: function moveSelectedItem(direction) {
      var results = this.get('currentResults');
      var selectedIndex = this.get('selectedIndex');
      selectedIndex = selectedIndex + direction;
      if (selectedIndex >= 0 && selectedIndex < _ember['default'].get(results, 'length')) {
        this.set('selectedIndex', selectedIndex);
      }
    },

    // Events
    mouseDown: function mouseDown(e) {
      if (!this.get('isDropdownShown')) {
        e.preventDefault();
        this.$('.ko-info-bar_field_search__input').focus();
      }
    },

    actions: {
      focus: function focus() {
        this.set('isDropdownShown', true);
      },

      blur: function blur() {
        this.set('isDropdownShown', false);
        this.set('searchTerm', '');
        this.set('selectedIndex', 0);
        this.set('currentResults', []);
      },

      keyDown: function keyDown(e) {
        switch (e.keyCode) {
          case _frontendCpLibKeycodes.up:
            {
              this.moveSelectedItem(-1);
              return false;
            }

          case _frontendCpLibKeycodes.down:
            {
              this.moveSelectedItem(1);
              return false;
            }

          case _frontendCpLibKeycodes.escape:
            {
              this.$('.ko-info-bar_field_search__input').blur();
              return false;
            }

          case _frontendCpLibKeycodes.enter:
            {
              var selectedIndex = this.get('selectedIndex');
              var results = this.get('currentResults');
              if (selectedIndex >= 0) {
                this.send('selectItem', results.objectAt(selectedIndex));
              }
              return false;
            }
        }
      },

      highlight: function highlight(index) {
        this.set('selectedIndex', index);
      },

      updateSearchTerm: function updateSearchTerm(searchTerm) {
        this.set('searchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.updateResults, 150);
      },

      listMouseDown: function listMouseDown(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      selectItem: function selectItem(item) {
        this.attrs.onValueChange(item);
        this.$('.ko-info-bar_field_search__input').blur();
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-info-bar_field_search__loader-icon");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "ko-loader", ["loc", [null, [2, 53], [2, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-info-bar_field_search__icon ", ["subexpr", "if", [["get", "isDropdownShown", ["loc", [null, [4, 48], [4, 63]]]], "i-search", "i-select"], [], ["loc", [null, [4, 43], [4, 87]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [3, 15], [3, 25]]]]], [], ["loc", [null, [3, 10], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "role", "menuitemradio");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'onclick');
            morphs[2] = dom.createAttrMorph(element0, 'onmousemove');
            morphs[3] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["dropdown-menu__item ", ["subexpr", "if", [["subexpr", "eq", [["get", "index", ["loc", [null, [22, 44], [22, 49]]]], ["get", "selectedIndex", ["loc", [null, [22, 50], [22, 63]]]]], [], ["loc", [null, [22, 40], [22, 64]]]], "dropdown-menu__item--selected"], [], ["loc", [null, [22, 35], [22, 98]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["selectItem", ["get", "item", ["loc", [null, [23, 38], [23, 42]]]]], [], ["loc", [null, [23, 16], [23, 44]]]]], ["attribute", "onmousemove", ["subexpr", "action", ["highlight", ["get", "index", ["loc", [null, [24, 41], [24, 46]]]]], [], ["loc", [null, [24, 20], [24, 48]]]]], ["inline", "sanitize-html", [["subexpr", "ko-embolden", [["subexpr", "if", [["get", "labelPath", ["loc", [null, [26, 41], [26, 50]]]], ["subexpr", "get", [["get", "item", ["loc", [null, [26, 56], [26, 60]]]], ["get", "labelPath", ["loc", [null, [26, 61], [26, 70]]]]], [], ["loc", [null, [26, 51], [26, 71]]]], ["get", "item", ["loc", [null, [26, 72], [26, 76]]]]], [], ["loc", [null, [26, 37], [26, 77]]]], ["get", "searchTerm", ["loc", [null, [26, 78], [26, 88]]]]], [], ["loc", [null, [26, 24], [26, 89]]]], "bold"], [], ["loc", [null, [26, 8], [26, 98]]]]],
          locals: ["item", "index"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onmousedown');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["listMouseDown"], [], ["loc", [null, [19, 40], [19, 66]]]]], ["block", "each", [["get", "currentResults", ["loc", [null, [20, 12], [20, 26]]]]], [], 0, null, ["loc", [null, [20, 4], [28, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "text");
        dom.setAttribute(el1, "class", "ko-info-bar_field_search__input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        morphs[2] = dom.createAttrMorph(element3, 'value');
        morphs[3] = dom.createAttrMorph(element3, 'onfocus');
        morphs[4] = dom.createAttrMorph(element3, 'onblur');
        morphs[5] = dom.createAttrMorph(element3, 'onkeydown');
        morphs[6] = dom.createAttrMorph(element3, 'oninput');
        morphs[7] = dom.createAttrMorph(element3, 'disabled');
        morphs[8] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]], ["content", "title", ["loc", [null, [6, 36], [6, 45]]]], ["attribute", "value", ["get", "inputValue", ["loc", [null, [10, 10], [10, 20]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [11, 10], [11, 28]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [12, 9], [12, 26]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [13, 12], [13, 32]]]]], ["attribute", "oninput", ["subexpr", "action", ["updateSearchTerm"], ["value", "target.value"], ["loc", [null, [14, 10], [14, 60]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [15, 13], [15, 23]]]]], ["block", "if", [["subexpr", "and", [["get", "isDropdownShown", ["loc", [null, [18, 11], [18, 26]]]], ["get", "resultsAvailable", ["loc", [null, [18, 27], [18, 43]]]]], [], ["loc", [null, [18, 6], [18, 44]]]]], [], 2, null, ["loc", [null, [18, 0], [30, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/select/component', ['exports', 'ember'], function (exports, _ember) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var computed = _ember['default'].computed;
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    value: null,
    options: [],
    onValueChange: null,
    labelPath: null,
    idPath: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    hasEmptyOption: true,
    showBottomArrow: false,

    // HTML
    tagName: 'li',
    attributeBindings: ['role'],
    role: 'menuitem',

    // CPs
    normalizedOptions: computed('hasEmptyOption', 'labelPath', 'options.[]', function () {
      var opts = this.get('options').toArray();
      if (this.get('hasEmptyOption')) {
        var labelPath = this.get('labelPath');
        var emptyOpt = undefined;
        if (labelPath) {
          emptyOpt = _defineProperty({ __id__: '__empty_option__' }, labelPath, '-');
        } else {
          emptyOpt = '-';
        }
        opts.unshift(emptyOpt);
      }
      return opts;
    }),

    normalizedValue: computed('idPath', 'value', 'options.[]', function () {
      var idPath = this.get('idPath');
      var value = this.get('value');
      if (idPath) {
        return this.get('options').findBy(idPath, value);
      } else {
        return value;
      }
    }),

    // Actions
    actions: {
      selectItem: function selectItem(item) {
        this.element.querySelector('input').focus();
        var normalizedItem = item;
        if (this.get('labelPath')) {
          if (!item || item.__id__ === '__empty_option__') {
            normalizedItem = null;
          }
        } else if (item === '-') {
          normalizedItem = null;
        }
        var action = this.get('onValueChange');
        var idPath = this.get('idPath');
        if (idPath) {
          action(normalizedItem && get(normalizedItem, idPath));
        } else {
          action(normalizedItem);
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/select/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "sanitize-html", [["subexpr", "ko-embolden", [["subexpr", "if", [["get", "labelPath", ["loc", [null, [24, 39], [24, 48]]]], ["subexpr", "get", [["get", "option", ["loc", [null, [24, 54], [24, 60]]]], ["get", "labelPath", ["loc", [null, [24, 61], [24, 70]]]]], [], ["loc", [null, [24, 49], [24, 71]]]], ["get", "option", ["loc", [null, [24, 72], [24, 78]]]]], [], ["loc", [null, [24, 35], [24, 79]]]], ["get", "searchTerm", ["loc", [null, [24, 80], [24, 90]]]]], [], ["loc", [null, [24, 22], [24, 91]]]], "bold"], [], ["loc", [null, [24, 6], [24, 100]]]]],
        locals: ["option", "searchTerm"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "showBottomArrow", ["loc", [null, [1, 17], [1, 32]]]], "ko-info-bar_field_select__arrow-inset"], [], ["loc", [null, [1, 12], [1, 74]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "showBottomArrow", ["loc", [null, [2, 19], [2, 34]]]], "ko-info-bar_field_select__arrow"], [], ["loc", [null, [2, 14], [2, 70]]]]]]], ["block", "power-select", [], ["options", ["subexpr", "@mut", [["get", "normalizedOptions", ["loc", [null, [4, 14], [4, 31]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "normalizedValue", ["loc", [null, [5, 15], [5, 30]]]]], [], []], "searchEnabled", false, "search", ["subexpr", "@mut", [["get", "search", ["loc", [null, [7, 13], [7, 19]]]]], [], []], "searchField", ["subexpr", "@mut", [["get", "labelPath", ["loc", [null, [8, 18], [8, 27]]]]], [], []], "verticalPosition", "below", "onchange", ["subexpr", "action", ["selectItem"], [], ["loc", [null, [10, 15], [10, 36]]]], "renderInPlace", true, "tabindex", -1, "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [13, 15], [13, 25]]]]], [], []], "loadingMessage", ["subexpr", "@mut", [["get", "loadingMessage", ["loc", [null, [14, 21], [14, 35]]]]], [], []], "extra", ["subexpr", "hash", [], ["title", ["get", "title", ["loc", [null, [16, 14], [16, 19]]]], "labelPath", ["get", "labelPath", ["loc", [null, [17, 18], [17, 27]]]], "isErrored", ["get", "isErrored", ["loc", [null, [18, 18], [18, 27]]]], "isEdited", ["get", "isEdited", ["loc", [null, [19, 17], [19, 25]]]], "isPusherEdited", ["get", "isPusherEdited", ["loc", [null, [20, 23], [20, 37]]]], "placeholder", ["get", "inputPlaceholder", ["loc", [null, [21, 20], [21, 36]]]]], ["loc", [null, [15, 12], [22, 7]]]], "triggerComponent", "ko-info-bar/field/select/trigger"], 0, null, ["loc", [null, [3, 4], [25, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/select/trigger/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var get = _ember['default'].get;
  var run = _ember['default'].run;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    extra: null,
    select: null,

    // HTML
    classNames: ['info-bar-item'],
    classNameBindings: ['extra.isEdited:info-bar-item--edited', 'extra.isPusherEdited:info-bar-item--pusher-edited', 'extra.isErrored:info-bar-item--error', 'select.isOpen:info-bar-item--active'],

    didUpdateAttrs: function didUpdateAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (!oldAttrs.select.isOpen && newAttrs.select.isOpen) {
        run.schedule('afterRender', this, function () {
          this.element.querySelector('input').focus();
        });
      } else if (oldAttrs.select.isOpen && !newAttrs.select.isOpen) {
        newAttrs.select.actions.search('');
      }
    },

    value: computed('extra.labelPath', 'select.isOpen', 'selected', function () {
      var isOpen = this.get('select.isOpen');
      if (isOpen) {
        return '';
      }
      var selected = this.get('selected');
      if (!selected) {
        return '-';
      }
      var labelPath = this.get('extra.labelPath');
      if (labelPath) {
        return get(selected, labelPath);
      } else {
        return selected;
      }
    }),

    actions: {
      handleMouseDown: function handleMouseDown(e) {
        if (this.get('select.isOpen')) {
          e.stopPropagation();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        var select = this.get('select');
        if (e.keyCode === 13 && select.isOpen) {
          select.actions.choose(this.get('highlighted'), e);
          e.stopPropagation();
        }
        if (!this.get('select.isOpen') && e.keyCode !== 9 && e.keyCode !== 13) {
          e.preventDefault();
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/select/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/select/trigger/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-info-bar_field_select__placeholder");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [15, 54], [15, 63]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/select/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "search");
        dom.setAttribute(el1, "tabindex", "0");
        dom.setAttribute(el1, "autocomplete", "off");
        dom.setAttribute(el1, "autocorrect", "off");
        dom.setAttribute(el1, "autocapitalize", "off");
        dom.setAttribute(el1, "spellcheck", "false");
        dom.setAttribute(el1, "role", "textbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createAttrMorph(element1, 'value');
        morphs[4] = dom.createAttrMorph(element1, 'placeholder');
        morphs[5] = dom.createAttrMorph(element1, 'onmousedown');
        morphs[6] = dom.createAttrMorph(element1, 'oninput');
        morphs[7] = dom.createAttrMorph(element1, 'onfocus');
        morphs[8] = dom.createAttrMorph(element1, 'onkeydown');
        morphs[9] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-info-bar_field_select__icon ", ["subexpr", "if", [["get", "select.isOpen", ["loc", [null, [1, 46], [1, 59]]]], "i-search", "i-select"], [], ["loc", [null, [1, 41], [1, 83]]]]]]], ["content", "extra.title", ["loc", [null, [2, 36], [2, 51]]]], ["attribute", "class", ["concat", ["ko-info-bar_field_select_trigger-input ", ["subexpr", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [4, 58], [4, 71]]]]], [], ["loc", [null, [4, 53], [4, 72]]]], "ko-info-bar_field_select_trigger-input--hidden"], [], ["loc", [null, [4, 48], [4, 123]]]]]]], ["attribute", "value", ["get", "value", ["loc", [null, [8, 10], [8, 15]]]]], ["attribute", "placeholder", ["get", "extra.placeholder", ["loc", [null, [9, 16], [9, 33]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["handleMouseDown"], [], ["loc", [null, [10, 14], [10, 42]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "select.actions.search", ["loc", [null, [11, 19], [11, 40]]]]], ["value", "target.value"], ["loc", [null, [11, 10], [11, 63]]]]], ["attribute", "onfocus", ["get", "select.actions.open", ["loc", [null, [12, 12], [12, 31]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [13, 12], [13, 38]]]]], ["block", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [14, 11], [14, 24]]]]], [], ["loc", [null, [14, 6], [14, 25]]]]], [], 0, null, ["loc", [null, [14, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/tags/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    selectedTags: [],
    errorTags: [],
    suggestedTags: [],
    onTagAddition: null,
    onTagRemoval: null,
    onTagSuggestion: null,
    newTagText: '',
    addTagText: '',
    forceLowerCase: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isDisabled:info-bar-item--disabled']
  });
});
define("frontend-cp/components/ko-info-bar/field/tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 36], [1, 45]]]], ["inline", "ko-tags", [], ["isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [3, 13], [3, 23]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "selectedTags", ["loc", [null, [4, 15], [4, 27]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "errorTags", ["subexpr", "@mut", [["get", "errorTags", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "forceLowerCase", ["subexpr", "@mut", [["get", "forceLowerCase", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "onTagAddition", ["subexpr", "@mut", [["get", "onTagAddition", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "onTagRemoval", ["subexpr", "@mut", [["get", "onTagRemoval", ["loc", [null, [9, 15], [9, 27]]]]], [], []], "onTagSuggestion", ["subexpr", "@mut", [["get", "onTagSuggestion", ["loc", [null, [10, 18], [10, 33]]]]], [], []], "newTagText", ["subexpr", "@mut", [["get", "newTagText", ["loc", [null, [11, 13], [11, 23]]]]], [], []], "addTagText", ["subexpr", "@mut", [["get", "addTagText", ["loc", [null, [12, 13], [12, 23]]]]], [], []]], ["loc", [null, [2, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/text/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    isPusherEdited: false,
    value: '',
    onValueChange: null,

    // State
    isActive: false,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error', 'isActive:info-bar-item--active', 'isDisabled:info-bar-item--disabled'],

    click: function click() {
      this.$('input').focus();
    },

    actions: {
      focus: function focus() {
        this.set('isActive', true);
      },

      blur: function blur() {
        this.set('isActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "class", "ko-field-text__input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'value');
        morphs[2] = dom.createAttrMorph(element0, 'oninput');
        morphs[3] = dom.createAttrMorph(element0, 'onfocus');
        morphs[4] = dom.createAttrMorph(element0, 'onblur');
        morphs[5] = dom.createAttrMorph(element0, 'disabled');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 36], [1, 45]]]], ["attribute", "value", ["get", "value", ["loc", [null, [6, 12], [6, 17]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [7, 21], [7, 34]]]]], ["value", "target.value"], ["loc", [null, [7, 12], [7, 57]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [8, 12], [8, 30]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [9, 11], [9, 28]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [10, 15], [10, 25]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/yesno/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    optionsList: [_ember['default'].Object.create({ id: 'yes', value: 'Yes' }), _ember['default'].Object.create({ id: 'no', value: 'No' })]
  });
});
define("frontend-cp/components/ko-info-bar/field/yesno/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/yesno/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "optionsList", ["loc", [null, [3, 10], [3, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "idPath", "id", "labelPath", "value", "hasEmptyOption", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/metadata/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li'
  });
});
define("frontend-cp/components/ko-info-bar/metadata/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "info-bar-metadata__title layout__item u-1/2");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "info-bar-metadata__value layout__item u-1/2");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "row.title", ["loc", [null, [4, 4], [4, 17]]]], ["inline", "if", [["get", "row.value", ["loc", [null, [7, 17], [7, 26]]]], ["subexpr", "ko-datetime-format", [["get", "row.value", ["loc", [null, [7, 47], [7, 56]]]]], [], ["loc", [null, [7, 27], [7, 57]]]], "-"], [], ["loc", [null, [7, 12], [7, 63]]]]],
        locals: ["row"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "info-bar-metadata layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "rows", ["loc", [null, [2, 8], [2, 12]]]]], [], 0, null, ["loc", [null, [2, 0], [9, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-info-bar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-loader/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    large: false,

    // HTML
    tagName: 'ul',
    classNames: ['ko-loader'],
    classNameBindings: ['large:ko-loader--large']
  });
});
define("frontend-cp/components/ko-loader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 99
          }
        },
        "moduleName": "frontend-cp/components/ko-loader/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-otp/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-otp/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-otp/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "otp-form login-form__wrapper js-otp-form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [2, 30], [2, 33]]]]], [], []], "name", "otp-code", "class", "login__input u-intimate", "placeholder", ["subexpr", "t", ["login.verificationcode"], [], ["loc", [null, [4, 18], [4, 46]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [5, 15], [5, 24]]]]], [], []]], ["loc", [null, [2, 4], [5, 26]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-password/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-password/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-login-password/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "email", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [2, 31], [2, 42]]]]], [], []], "name", "email", "autofocus", "autofocus", "class", "login__input", "placeholder", ["subexpr", "t", ["login.email"], [], ["loc", [null, [2, 111], [2, 128]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [2, 138], [2, 147]]]]], [], []]], ["loc", [null, [2, 4], [2, 149]]]], ["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "model.password", ["loc", [null, [3, 34], [3, 48]]]]], [], []], "name", "password", "class", "login__input", "placeholder", ["subexpr", "t", ["login.password"], [], ["loc", [null, [3, 98], [3, 118]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [3, 128], [3, 137]]]]], [], []]], ["loc", [null, [3, 4], [3, 139]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-reset/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-reset/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-reset/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "reset-password-form login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [2, 34], [2, 46]]]]], [], []], "name", "reset-password", "class", "login__input", "placeholder", ["subexpr", "t", ["login.newpassword"], [], ["loc", [null, [2, 102], [2, 125]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [2, 135], [2, 144]]]]], [], []]], ["loc", [null, [2, 4], [2, 146]]]], ["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [3, 34], [3, 46]]]]], [], []], "name", "reset-password-2", "class", "login__input u-intimate", "placeholder", ["subexpr", "t", ["login.repeatpassword"], [], ["loc", [null, [3, 115], [3, 141]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [3, 151], [3, 160]]]]], [], []]], ["loc", [null, [3, 4], [3, 162]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-modal__overlay");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-modal__content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-notification-badge/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-notification-badge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-notification-badge/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "i-bell");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-organisation-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    organisation: null,
    canDelete: false,

    classNameBindings: ['hasNoOptions:u-hidden'],

    sessionService: _ember['default'].inject.service('session'),
    permissionService: _ember['default'].inject.service('permissions'),
    intlService: _ember['default'].inject.service('intl'),

    hasDeleteOrganisationPermission: _ember['default'].computed('sessionService.permissions', 'organisation', function () {
      return this.get('canDelete') && this.get('permissionService').has('app.organisation.delete', this.get('organisation'));
    }),

    hasNoOptions: _ember['default'].computed('hasDeleteOrganisationPermission', function () {
      return !this.get('hasDeleteOrganisationPermission');
    }),

    actions: {
      deleteOrganisation: function deleteOrganisation() {
        var _this = this;

        if (confirm(this.get('intlService').findTranslationByKey('generic.confirm.delete'))) {
          this.get('organisation').destroyRecord().then(function () {
            _this.get('closeTab')();
          });
        }
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }

  });
});
define("frontend-cp/components/ko-organisation-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "button button--default button--dropdown");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["deleteOrganisation"], [], ["loc", [null, [16, 53], [16, 84]]]]], ["inline", "t", ["organisation.delete_organisation"], [], ["loc", [null, [17, 12], [17, 52]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["changeUserPassword"], [], ["loc", [null, [22, 53], [22, 84]]]]], ["inline", "t", ["users.changepassword"], [], ["loc", [null, [23, 12], [23, 40]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasDeleteOrganisationPermission", ["loc", [null, [15, 12], [15, 43]]]]], [], 0, null, ["loc", [null, [15, 6], [19, 13]]]], ["block", "if", [["get", "hasChangePasswordEmailPermission", ["loc", [null, [21, 12], [21, 44]]]]], [], 1, null, ["loc", [null, [21, 6], [25, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [14, 66], [14, 78]]]]], [], []]], 0, null, ["loc", [null, [14, 4], [26, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [8, 12], [8, 16]]]], "button"], [], ["loc", [null, [8, 8], [8, 26]]]]], [], 0, null, ["loc", [null, [8, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [13, 12], [13, 16]]]], "content"], [], ["loc", [null, [13, 8], [13, 27]]]]], [], 1, null, ["loc", [null, [13, 2], [27, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["alignRight", true, "onFocusOut", "hideMenu", "onFocusIn", "showMenu", "hideOnChildFocus", true, "hideOnClick", true], 0, null, ["loc", [null, [1, 0], [28, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-organisation-content/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-organisation-content'],

    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service('notification'),
    sessionService: _ember['default'].inject.service('session'),
    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    tagService: _ember['default'].inject.service('tags'),
    metrics: _ember['default'].inject.service(),

    suggestedTags: [],
    erroredDomains: [],
    errors: [],
    errorMap: null,

    isDomainEdited: false,
    isSaving: false,
    editedCustomFields: null,
    isOrganisationEdited: false,
    isCaseAccessEdited: false,

    organizationIconPath: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/organization.svg',
    // Params
    canDelete: false,

    isEditInProgress: false,

    replyContent: '',
    notes: [],
    totalNotes: 0,

    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);

      if (!oldAttrs || newAttrs.model.value !== oldAttrs.model.value) {
        this.set('notes', []);
        this.set('totalNotes', 0);

        this.requestOrganizationNotes();
      }
    },

    isContentEdited: _ember['default'].computed('replyContent', function () {
      return this.get('replyContent').trim() !== '';
    }),

    isEdited: _ember['default'].computed('isContentEdited', 'isOrganisationEdited', function () {
      return this.get('isContentEdited') || this.get('isOrganisationEdited');
    }),

    caseAccessList: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('organisation.infobar.cases.shared.true'),
        value: true
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('organisation.infobar.cases.shared.false'),
        value: false
      })];
    }),

    initErrorMap: _ember['default'].on('init', function () {
      this.set('errorMap', _ember['default'].Object.create());
    }),

    initCustomFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('editedCustomFields', new _ember['default'].Object());
      this.get('model.tags').then(function (tags) {
        _this.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    }),

    domains: _ember['default'].computed('model.domains.[]', function () {
      return this.get('model.domains'); //.map(domain => domain.get('domain')).uniq();
    }),

    isTagsFieldEdited: _ember['default'].computed('cachedTags.[]', 'model.tags.@each.id', function () {
      var cachedTagNames = this.get('cachedTags');
      var tags = this.get('model.tags');
      return this.get('tagService').areTagNamesMatchingCache(cachedTagNames, tags);
    }),

    submitDisabled: _ember['default'].computed('isSaving', 'isEdited', function () {
      return this.get('isSaving') || !this.get('isEdited');
    }),

    customFieldValueHash: _ember['default'].computed('model.customFields.@each.value', function () {
      var values = _ember['default'].Object.create();
      this.get('model.customFields').forEach(function (field) {
        values.set(field.get('field.id'), field.get('value'));
      });
      return values;
    }),

    convertErrorsToMap: function convertErrorsToMap(errors) {
      return (errors || []).filter(function (error) {
        return error.parameter;
      }).reduce(function (errorMap, error) {
        errorMap.set(error.parameter, true);
        return errorMap;
      }, _ember['default'].Object.create({}));
    },

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('errorMap', _ember['default'].Object.create());
      this.set('isDomainEdited', false);
      this.set('isNameEdited', false);
      this.set('isDomainErrored', false);
      this.set('isSaving', false);
      this.set('replyContent', '');
      this.set('isEditInProgress', false);

      this.updateDirtyFieldHash();
    },

    refreshTags: function refreshTags() {
      var _this2 = this;

      this.get('tagService').refreshTagsForOrganization(this.get('model')).then(function (tags) {
        _this2.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    },

    organisationDates: _ember['default'].computed('model.createdAt', 'model.updatedAt', 'model.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('model.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('model.updatedAt') }];
    }),

    customFields: _ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    requestOrganizationNotes: function requestOrganizationNotes() {
      var _this3 = this;

      var store = this.get('store');
      var organization = this.get('model');

      // when we request organization notes, we convert them to post models
      // that can be used by ko-feed/item component
      store.query('organization-note', { parent: organization, limit: 20 }).then(function (notes) {
        _this3.set('totalNotes', notes.get('meta.total'));

        var notesList = store.peekAll('post').filter(function (post) {
          return post.get('original.parent.id') === organization.get('id');
        });

        _this3.set('notes', notesList);
      });
    },

    suggestTagsCallback: function suggestTagsCallback() {
      var _this4 = this;

      var searchTerm = this.get('tagSearchTerm');
      var selectedTags = this.get('model.tags');
      var suggestionService = this.get('tagSuggestionService');
      suggestionService.suggest(searchTerm).then(function (data) {
        if (suggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        data = suggestionService.exclude(data, selectedTags.mapBy('name'));

        _this4.set('suggestedTags', data.map(function (tag) {
          return tag.get('name');
        }));
        suggestionService.flushQueue();
      });
    },

    updateDirtyFieldHash: function updateDirtyFieldHash() {
      var _this5 = this;

      var editedCustomFields = this.get('editedCustomFields');
      this.get('model.customFields').forEach(function (customField) {
        var id = customField.get('field.id');
        var changed = Boolean(customField.changedAttributes().value);
        editedCustomFields.set(id, changed);
      });

      var fields = ['isDomainEdited', 'isTagsFieldEdited', 'isNameEdited', 'isCaseAccessEdited'];
      var systemFieldEdited = fields.any(function (field) {
        return _this5.get(field);
      });
      var customEdited = Object.values(editedCustomFields).reduce(function (accum, current) {
        return accum || current;
      }, false);

      this.set('isOrganisationEdited', systemFieldEdited || customEdited);
    },

    actions: {
      textEditorFocusStateChange: function textEditorFocusStateChange(state) {
        if (!state) {
          this.set('isEditInProgress', false);
        }
      },

      beginReply: function beginReply() {
        this.set('isEditInProgress', true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });
      },

      addTag: function addTag(tagName) {
        var newTag = this.get('tagService').getTagByName(tagName);
        newTag.set('isNew', true);
        this.get('model.tags').pushObject(newTag);
        this.set('errorMap.tags', null);
        this.updateDirtyFieldHash();
      },

      removeTag: function removeTag(tag) {
        this.get('model.tags').removeObject(tag);
        this.set('errorMap.tags', null);
        this.updateDirtyFieldHash();
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        this.set('tagSearchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.suggestTagsCallback, 300);
      },

      addDomain: function addDomain(domainName) {
        if (!domainName) {
          return;
        }
        if (this.get('model.domains').any(function (domain) {
          return domain.get('domain') === domainName;
        })) {
          // don't add duplicate domains
          return;
        }
        var domain = this.get('store').createRecord('identityDomain', {
          domain: domainName
        });
        this.get('model.domains').pushObject(domain);
        this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        this.set('errorMap.domains', null);
        this.updateDirtyFieldHash();
      },

      removeDomain: function removeDomain(domain) {
        this.get('model.domains').removeObject(domain);
        this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        this.set('errorMap.domains', null);
        this.updateDirtyFieldHash();
      },

      casesSharedStateSelect: function casesSharedStateSelect(sharedState) {
        this.set('model.isShared', sharedState);
        this.set('isCaseAccessEdited', this.get('model').hasDirtyAttribute('isShared'));
        this.updateDirtyFieldHash();
      },

      setName: function setName(name) {
        this.set('model.name', name);
        this.set('isNameEdited', this.get('model').hasDirtyAttribute('name'));
        this.set('errorMap.name', null);
        this.updateDirtyFieldHash();
      },

      submit: function submit() {
        var _this6 = this;

        this.set('isSaving', true);
        this.get('model').saveWithNote(this.get('replyContent')).then(function (organization) {
          // Get rid of unsaved domains hanging around
          organization.set('domains', organization.get('domains').filter(function (domain) {
            return domain.get('id');
          }));

          _this6.get('notification').add({
            type: 'success',
            title: _this6.get('intl').findTranslationByKey('organisation.organisation.updated'),
            autodismiss: true
          });
          _this6.resetForm();
          _this6.refreshTags();
          _this6.requestOrganizationNotes();

          _this6.get('metrics').trackEvent({
            event: 'Organization Updated',
            category: 'Organization',
            action: 'click',
            label: 'submit button'
          });
        }, function (e) {
          _this6.set('errors', e.errors);
          _this6.set('errorMap', _this6.convertErrorsToMap(e.errors));
          _this6.set('isSaving', false);

          _this6.get('metrics').trackEvent({
            event: 'Organization Update Failed',
            category: 'Organization',
            action: 'click',
            label: 'submit button'
          });
        });
      },

      fieldUpdated: function fieldUpdated(field, value) {
        this.get('errorMap').set(field.get('key'), false);
        var valueObject = this.get('model.customFields').find(function (value) {
          return value.get('field.id') === field.get('id');
        });

        if (!valueObject) {
          valueObject = this.get('model.customFields').createFragment({
            fieldFragment: this.get('store').createFragment('relationship-fragment', {
              relationshipId: field.id,
              relationshipType: field.type
            })
          });
        }
        valueObject.set('value', value);
        this.updateDirtyFieldHash();
      },

      updatePostContent: function updatePostContent(newContent) {
        this.set('replyContent', newContent);
      }
    }
  });
});
define("frontend-cp/components/ko-organisation-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 64,
                    "column": 16
                  },
                  "end": {
                    "line": 68,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-text-editor-header-group__item ko-text-editor-header-group__item--single t-base ko-text-editor-header-group__item__set-note ko-text-editor-header-group__item--active");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "t", ["users.notes"], [], ["loc", [null, [66, 20], [66, 39]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 70,
                    "column": 16
                  },
                  "end": {
                    "line": 76,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-organisation-content_field_post--editor-overlay");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-organisation-content_field_post--note-reminder");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "t", ["generic.texteditor.notes_reminder"], [], ["loc", [null, [73, 22], [73, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 14
                },
                "end": {
                  "line": 77,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [64, 22], [64, 37]]]]], [], 0, null, ["loc", [null, [64, 16], [68, 23]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [70, 22], [70, 42]]]]], [], 1, null, ["loc", [null, [70, 16], [76, 23]]]]],
            locals: ["editor"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 10
              },
              "end": {
                "line": 79,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__editor");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [45, 32], [45, 47]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [46, 26], [46, 35]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [47, 37], [47, 57]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [48, 39], [48, 61]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [49, 38], [49, 67]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [50, 37], [50, 53]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "placeholder", ["subexpr", "t", ["users.add_a_note"], [], ["loc", [null, [53, 28], [53, 50]]]], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [54, 26], [54, 35]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [55, 29], [55, 46]]]]], [], []], "textAreaIsSmall", true, "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [57, 33], [57, 44]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [58, 32], [58, 46]]]]], [], []], "onTextChanged", ["subexpr", "action", ["updatePostContent"], [], ["loc", [null, [59, 30], [59, 58]]]], "value", ["subexpr", "@mut", [["get", "replyContent", ["loc", [null, [60, 22], [60, 34]]]]], [], []], "onFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange"], [], ["loc", [null, [61, 35], [61, 72]]]]], 0, null, ["loc", [null, [44, 14], [77, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 79,
                "column": 10
              },
              "end": {
                "line": 83,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__editor-placeholder");
            dom.setAttribute(el1, "style", "background: #FFF; font-size: 14px; font-style: italic; border-bottom: 1px solid #D1D5D7; padding: 20px 15px;");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "style", "text-decoration: underline; cursor: pointer;");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("...\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createElementMorph(element2);
            morphs[3] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["beginReply"], [], ["loc", [null, [80, 17], [80, 40]]]], ["inline", "t", ["generic.reply.click_to_leave_a"], [], ["loc", [null, [81, 14], [81, 52]]]], ["element", "action", ["beginReply"], [], ["loc", [null, [81, 59], [81, 82]]]], ["inline", "t", ["generic.reply.note"], [], ["loc", [null, [81, 136], [81, 162]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 8
            },
            "end": {
              "line": 84,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isEditInProgress", ["loc", [null, [42, 16], [42, 32]]]]], [], 0, 1, ["loc", [null, [42, 10], [83, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 88,
                "column": 12
              },
              "end": {
                "line": 90,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-feed/item", [], ["event", ["subexpr", "@mut", [["get", "post", ["loc", [null, [89, 35], [89, 39]]]]], [], []], "isReplyDisabled", true], ["loc", [null, [89, 14], [89, 62]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 92,
                "column": 12
              },
              "end": {
                "line": 94,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-feed/activity", [], ["activity", ["subexpr", "@mut", [["get", "post", ["loc", [null, [93, 42], [93, 46]]]]], [], []]], ["loc", [null, [93, 14], [93, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 95,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [88, 26], [88, 52]]]], "post"], [], ["loc", [null, [88, 22], [88, 60]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [88, 65], [88, 91]]]], "organization-note"], [], ["loc", [null, [88, 61], [88, 112]]]]], [], ["loc", [null, [88, 18], [88, 113]]]]], [], 0, null, ["loc", [null, [88, 12], [90, 19]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [92, 26], [92, 52]]]], "activity"], [], ["loc", [null, [92, 22], [92, 64]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [92, 69], [92, 95]]]], "event"], [], ["loc", [null, [92, 65], [92, 104]]]]], [], ["loc", [null, [92, 18], [92, 105]]]]], [], 1, null, ["loc", [null, [92, 12], [94, 19]]]]],
        locals: ["post"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 97,
              "column": 10
            },
            "end": {
              "line": 100,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "font-style: italic; margin: 20px 0 0 0;");
          var el2 = dom.createTextNode("showing last 20 notes out of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "totalNotes", ["loc", [null, [99, 94], [99, 108]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 108,
                "column": 12
              },
              "end": {
                "line": 110,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-loader", [], ["class", "ko-organisation-content__button-loading"], ["loc", [null, [109, 14], [109, 75]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 12
              },
              "end": {
                "line": 112,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [111, 14], [111, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 153,
                    "column": 12
                  },
                  "end": {
                    "line": 165,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [154, 37], [154, 66]]]], ["get", "field.fieldType", ["loc", [null, [154, 67], [154, 82]]]]], [], ["loc", [null, [154, 26], [154, 83]]]]], ["value", ["subexpr", "get", [["get", "customFieldValueHash", ["loc", [null, [155, 27], [155, 47]]]], ["get", "field.id", ["loc", [null, [155, 48], [155, 56]]]]], [], ["loc", [null, [155, 22], [155, 57]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [156, 24], [156, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [157, 22], [157, 33]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [158, 31], [158, 39]]]], ["get", "field.key", ["loc", [null, [158, 40], [158, 49]]]]], [], ["loc", [null, [158, 26], [158, 50]]]], "isEdited", ["subexpr", "get", [["get", "editedCustomFields", ["loc", [null, [159, 30], [159, 48]]]], ["get", "field.id", ["loc", [null, [159, 49], [159, 57]]]]], [], ["loc", [null, [159, 25], [159, 58]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [160, 36], [160, 61]]]]], [], ["loc", [null, [160, 31], [160, 62]]]], "onValueChange", ["subexpr", "action", ["fieldUpdated", ["get", "field", ["loc", [null, [161, 53], [161, 58]]]]], [], ["loc", [null, [161, 30], [161, 59]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [154, 14], [164, 16]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 152,
                  "column": 10
                },
                "end": {
                  "line": 166,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [153, 18], [153, 33]]]]], [], 0, null, ["loc", [null, [153, 12], [165, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 151,
                "column": 8
              },
              "end": {
                "line": 167,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [152, 27], [152, 56]]]], ["get", "field.fieldType", ["loc", [null, [152, 57], [152, 72]]]]], [], ["loc", [null, [152, 16], [152, 73]]]]], [], 0, null, ["loc", [null, [152, 10], [166, 17]]]]],
          locals: ["field"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 105,
              "column": 6
            },
            "end": {
              "line": 170,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "info-bar-item");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [107, 73], [107, 87]]]], "disabled"], [], ["loc", [null, [107, 68], [107, 100]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [107, 110], [107, 129]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [108, 18], [108, 26]]]]], [], 0, 1, ["loc", [null, [108, 12], [112, 19]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.tags"], [], ["loc", [null, [117, 16], [117, 32]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [118, 19], [118, 36]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.tags", ["loc", [null, [119, 20], [119, 33]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.tags", ["loc", [null, [120, 23], [120, 33]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [121, 24], [121, 37]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newtag"], [], ["loc", [null, [122, 21], [122, 39]]]], "addTagText", ["subexpr", "t", ["users.addtag"], [], ["loc", [null, [123, 21], [123, 39]]]], "onTagAddition", ["subexpr", "action", ["addTag"], [], ["loc", [null, [124, 24], [124, 41]]]], "onTagRemoval", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [125, 23], [125, 43]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [126, 26], [126, 48]]]]], ["loc", [null, [116, 8], [127, 10]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["organisation.domains"], [], ["loc", [null, [130, 16], [130, 42]]]], "isEdited", ["subexpr", "@mut", [["get", "isDomainEdited", ["loc", [null, [131, 19], [131, 33]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.domains", ["loc", [null, [132, 20], [132, 36]]]]], [], []], "errorTags", ["subexpr", "@mut", [["get", "erroredDomains", ["loc", [null, [133, 20], [133, 34]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.domains", ["loc", [null, [134, 23], [134, 36]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addDomain"], [], ["loc", [null, [135, 24], [135, 44]]]], "onTagRemoval", ["subexpr", "action", ["removeDomain"], [], ["loc", [null, [136, 23], [136, 46]]]]], ["loc", [null, [129, 8], [137, 10]]]], ["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["organisation.infobar.accesslevel"], [], ["loc", [null, [140, 16], [140, 54]]]], "options", ["subexpr", "@mut", [["get", "caseAccessList", ["loc", [null, [141, 18], [141, 32]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.isShared", ["loc", [null, [142, 16], [142, 30]]]]], [], []], "onValueChange", ["subexpr", "action", ["casesSharedStateSelect"], [], ["loc", [null, [143, 24], [143, 57]]]], "hasEmptyOption", false, "renderInPlace", true, "searchEnabled", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [139, 8], [149, 10]]]], ["block", "each", [["get", "customFields", ["loc", [null, [151, 16], [151, 28]]]]], [], 2, null, ["loc", [null, [151, 8], [167, 17]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "organisationDates", ["loc", [null, [169, 36], [169, 53]]]]], [], []]], ["loc", [null, [169, 8], [169, 55]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 174,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-2/3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "class", "header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__body u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6, "class", "header__title ko-organisation-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/3 u-mt");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "list-inline t-right");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-organization-content__main u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-organization-content__main__content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content__main content__main--has-infobar");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-feed");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-organization-content__main__sidebar");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element3, [3]);
        var element8 = dom.childAt(element7, [1, 1]);
        var element9 = dom.childAt(element8, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element6, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [3, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [3, 1, 5]), 1, 1);
        morphs[3] = dom.createMorphAt(element8, 1, 1);
        morphs[4] = dom.createMorphAt(element9, 1, 1);
        morphs[5] = dom.createMorphAt(element9, 3, 3);
        morphs[6] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["get", "organizationIconPath", ["loc", [null, [6, 22], [6, 42]]]]]]], ["inline", "ko-editable-text", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [11, 22], [11, 32]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isNameEdited", ["loc", [null, [12, 25], [12, 37]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.name", ["loc", [null, [13, 26], [13, 39]]]]], [], []], "onValueChange", "setName", "placeholder", ["subexpr", "t", ["organisation.new_organisation_placeholder"], [], ["loc", [null, [15, 28], [15, 75]]]]], ["loc", [null, [10, 12], [16, 14]]]], ["inline", "ko-organisation-action-menu", [], ["permissions", ["subexpr", "@mut", [["get", "sessionService.permissions", ["loc", [null, [28, 23], [28, 49]]]]], [], []], "canDelete", ["subexpr", "@mut", [["get", "canDelete", ["loc", [null, [29, 21], [29, 30]]]]], [], []], "organisation", ["subexpr", "@mut", [["get", "model", ["loc", [null, [30, 24], [30, 29]]]]], [], []], "closeTab", ["subexpr", "@mut", [["get", "closeTab", ["loc", [null, [31, 20], [31, 28]]]]], [], []]], ["loc", [null, [27, 9], [32, 11]]]], ["block", "if", [["get", "features.organizationNote", ["loc", [null, [41, 14], [41, 39]]]]], [], 0, null, ["loc", [null, [41, 8], [84, 15]]]], ["block", "each", [["get", "notes", ["loc", [null, [87, 18], [87, 23]]]]], [], 1, null, ["loc", [null, [87, 10], [95, 19]]]], ["block", "if", [["subexpr", "gt", [["get", "totalNotes", ["loc", [null, [97, 20], [97, 30]]]], 20], [], ["loc", [null, [97, 16], [97, 34]]]]], [], 2, null, ["loc", [null, [97, 10], [100, 17]]]], ["block", "ko-info-bar", [], [], 3, null, ["loc", [null, [105, 6], [170, 22]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('frontend-cp/components/ko-pagination/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    currentPage: 1,
    loadingPage: null,
    pageCount: 1,

    previousPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') - 1;
    }),

    nextPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') + 1;
    }),

    hasPreviousPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') > 1;
    }),

    hasNextPage: _ember['default'].computed('currentPage', 'pageCount', function () {
      return this.get('currentPage') < this.get('pageCount');
    })
  });
});
define("frontend-cp/components/ko-pagination/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-pagination__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-pagination__pageNumber");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-pagination__pageCount");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element0, [9]);
        var element4 = dom.childAt(element0, [11]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createAttrMorph(element2, 'class');
        morphs[5] = dom.createMorphAt(element2, 1, 1);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(element3, 1, 1);
        morphs[8] = dom.createAttrMorph(element4, 'class');
        morphs[9] = dom.createMorphAt(element4, 1, 1);
        return morphs;
      },
      statements: [["content", "currentPage", ["loc", [null, [2, 42], [2, 57]]]], ["inline", "t", ["generic.paginatorof"], ["number", ["subexpr", "or", [["get", "pageCount", ["loc", [null, [3, 78], [3, 87]]]], 1], [], ["loc", [null, [3, 74], [3, 90]]]]], ["loc", [null, [3, 41], [3, 92]]]], ["attribute", "class", ["concat", ["ko-pagination__first i-chevron-double-up i-center ", ["subexpr", "if", [["get", "hasPreviousPage", ["loc", [null, [4, 69], [4, 84]]]], "ko-pagination__first--available", ""], [], ["loc", [null, [4, 64], [4, 123]]]]]]], ["inline", "yield", [1], [], ["loc", [null, [5, 4], [5, 15]]]], ["attribute", "class", ["concat", ["ko-pagination__previous i-chevron-large-up i-center i-size-18 ", ["subexpr", "if", [["get", "hasPreviousPage", ["loc", [null, [7, 81], [7, 96]]]], "ko-pagination__previous--available", ""], [], ["loc", [null, [7, 76], [7, 138]]]]]]], ["inline", "yield", [["get", "previousPage", ["loc", [null, [8, 12], [8, 24]]]]], [], ["loc", [null, [8, 4], [8, 26]]]], ["attribute", "class", ["concat", ["ko-pagination__next i-chevron-large-down i-center i-size-18 ", ["subexpr", "if", [["get", "hasNextPage", ["loc", [null, [10, 79], [10, 90]]]], "ko-pagination__next--available", ""], [], ["loc", [null, [10, 74], [10, 128]]]]]]], ["inline", "yield", [["get", "nextPage", ["loc", [null, [11, 12], [11, 20]]]]], [], ["loc", [null, [11, 4], [11, 22]]]], ["attribute", "class", ["concat", ["ko-pagination__last i-chevron-double-down i-center ", ["subexpr", "if", [["get", "hasNextPage", ["loc", [null, [13, 70], [13, 81]]]], "ko-pagination__last--available", ""], [], ["loc", [null, [13, 65], [13, 119]]]]]]], ["inline", "yield", [["get", "pageCount", ["loc", [null, [14, 12], [14, 21]]]]], [], ["loc", [null, [14, 4], [14, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-people-popover/component', ['exports', 'ember', 'frontend-cp/lib/keycodes', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpLibKeycodes, _frontendCpUtilsFormatValidations) {

  var debounceQueryTimeout = 150;

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    suggestedPeople: null,
    selectedPeople: null,
    suggestedPeopleTotal: 0,
    isLoading: true,
    filterNotFoundText: '',
    helpText: '',
    inputPlaceholderText: '',
    emailErrorText: '',
    isShowing: false,
    onPeopleSuggestion: null,
    onPersonSelect: null,
    onPersonRemove: null,

    // State
    keyboardIndexPosition: 0,
    searchTerm: null,
    searchTermEmailNotValid: false,

    // HTML
    classNames: ['ko-people-popover'],

    // Services
    intl: _ember['default'].inject.service(),

    searchAttempt: _ember['default'].computed('searchTerm', 'suggestedPeople', function () {
      return Boolean(this.get('searchTerm') && this.get('suggestedPeople') !== null);
    }),

    didShowingChange: _ember['default'].on('init', _ember['default'].observer('isShowing', function () {
      if (this.get('isShowing')) {
        this.$('.input-text').focus();
      }
    })),

    onSearchTerm: _ember['default'].observer('searchTerm', function () {
      _ember['default'].run.debounce(this, this.suggestPeople, debounceQueryTimeout);
    }),

    suggestPeople: function suggestPeople() {
      this.attrs.onPeopleSuggestion(this.get('searchTerm'), this.get('selectedPeople'));
    },

    keyDown: function keyDown(e) {
      var searchTerm = this.get('searchTerm');

      var keyboardIndexPosition = this.get('keyboardIndexPosition');
      var suggestedPeople = this.get('suggestedPeople');
      var suggestedPeopleLength = suggestedPeople ? suggestedPeople.length : 0;
      var suggestionsListSelector = '.ko-people-popover__filtered-list';

      this.set('searchTermEmailNotValid', false);

      switch (e.keyCode) {
        case _frontendCpLibKeycodes.up:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'up', 'keyboardIndexPosition');

          if (keyboardIndexPosition - 1 === 0) {
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          return false;

        case _frontendCpLibKeycodes.down:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'down', 'keyboardIndexPosition');
          return false;

        case _frontendCpLibKeycodes.enter:
          if (keyboardIndexPosition === 0) {
            this.send('addPerson', searchTerm);
          } else {
            this.send('addPersonFromSuggestion', suggestedPeople.objectAt(keyboardIndexPosition - 1));
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          break;
      }
    },

    resetSearchQuery: function resetSearchQuery() {
      this.attrs.onPeopleSuggestion(null);
      this.set('searchTerm', null);
      this.$('input').focus();
    },

    moveSelectedItem: function moveSelectedItem(listLength, ulSelector, direction, positionProperty) {
      var position = this.get(positionProperty);
      switch (direction) {
        case 'down':
          {
            position = ++position;
            if (position <= listLength) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
        case 'up':
          {
            position = --position;
            if (position > 0) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
      }
    },

    actions: {
      addPerson: function addPerson(email) {
        email = email.replace(/\s+/, '');

        if (!email || !(0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email)) {
          this.set('searchTermEmailNotValid', true);
          return;
        }
        this.set('searchTermEmailNotValid', false);

        if (this.get('selectedPeople').indexOf(email) !== -1) {
          this.resetSearchQuery();
          return;
        }

        this.attrs.onPersonSelect(email);
        this.resetSearchQuery();
      },

      addPersonFromSuggestion: function addPersonFromSuggestion(person) {
        this.attrs.onPersonSelect(person.get('email'));
        this.resetSearchQuery();
      }
    }
  });
});
define("frontend-cp/components/ko-people-popover/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-people-popover__input-error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "emailErrorText", ["loc", [null, [17, 48], [17, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 4
              },
              "end": {
                "line": 32,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "ko-people-popover__selected-list");
            dom.setAttribute(el1, "role", "menu");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "ko-people-popover__selected-list-item");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "u-inline-block ko-people-popover__selected-item-name");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "ko-people-popover__cross i-cross-bold i-color-grey--light");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var element5 = dom.childAt(element4, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 1, 1);
            morphs[1] = dom.createAttrMorph(element5, 'onclick');
            return morphs;
          },
          statements: [["content", "email", ["loc", [null, [27, 12], [27, 21]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onPersonRemove", ["loc", [null, [29, 96], [29, 110]]]], ["get", "email", ["loc", [null, [29, 111], [29, 116]]]]], [], ["loc", [null, [29, 87], [29, 118]]]]]],
          locals: ["email"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box ko-people-popover__selected-list-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "selectedPeople", ["loc", [null, [23, 12], [23, 26]]]]], [], 0, null, ["loc", [null, [23, 4], [32, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box ko-people-popover__loader-block");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-people-popover__loader"], ["loc", [null, [38, 4], [38, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 20
                  },
                  "end": {
                    "line": 58,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      , ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "person.user.organization.name", ["loc", [null, [57, 24], [57, 57]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 8
                },
                "end": {
                  "line": 65,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-people-popover__filtered-list-item");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-people-popover__flag flag--small flag--auto");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "flag__img");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "ko-people-popover__flag-body u-1/1 flag__body");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("strong");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4, "class", "ko-people-popover__caption");
              var el5 = dom.createTextNode("\n                  ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "ko-people-popover__org-caption");
              var el6 = dom.createTextNode("\n");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("                  ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                  ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5, "class", "ko-people-popover__email-caption");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [3]);
              var element3 = dom.childAt(element2, [3]);
              var morphs = new Array(6);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createAttrMorph(element0, 'tabindex');
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["addPersonFromSuggestion", ["get", "person", ["loc", [null, [45, 57], [45, 63]]]]], [], ["loc", [null, [45, 22], [45, 65]]]]], ["attribute", "tabindex", ["concat", [["get", "index", ["loc", [null, [46, 26], [46, 31]]]]]]], ["inline", "ko-avatar", [], ["size", "large", "class", "ko-people-popover__image", "avatar", ["subexpr", "@mut", [["get", "person.user.avatar", ["loc", [null, [50, 81], [50, 99]]]]], [], []]], ["loc", [null, [50, 16], [50, 101]]]], ["content", "person.user.fullName", ["loc", [null, [53, 24], [53, 48]]]], ["block", "if", [["get", "person.user.organization.name", ["loc", [null, [56, 26], [56, 55]]]]], [], 0, null, ["loc", [null, [56, 20], [58, 27]]]], ["content", "person.email", ["loc", [null, [60, 65], [60, 81]]]]],
            locals: ["person", "index"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-people-popover__filtered-list-container");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "ko-people-popover__filtered-list");
            dom.setAttribute(el2, "role", "menu");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "suggestedPeople", ["loc", [null, [44, 16], [44, 31]]]]], [], 0, null, ["loc", [null, [44, 8], [65, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 75,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "box header__subtitle ko-people-popover__not-found");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["content", "filterNotFoundText", ["loc", [null, [73, 8], [73, 30]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 70,
                "column": 2
              },
              "end": {
                "line": 76,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "suggestedPeople", ["loc", [null, [71, 14], [71, 29]]]]], [], 0, null, ["loc", [null, [71, 4], [75, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 76,
                "column": 2
              },
              "end": {
                "line": 80,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "box header__subtitle ko-people-popover__subtitle");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "helpText", ["loc", [null, [78, 6], [78, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 0
            },
            "end": {
              "line": 81,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "searchAttempt", ["loc", [null, [41, 8], [41, 21]]]]], [], 0, null, ["loc", [null, [41, 2], [68, 9]]]], ["block", "if", [["get", "searchAttempt", ["loc", [null, [70, 8], [70, 21]]]]], [], 1, 2, ["loc", [null, [70, 2], [80, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 82,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "input i--search-small");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-people-popover__button-space");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button button--default ko-people-popover__button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [4, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element7, 1, 1);
        morphs[1] = dom.createAttrMorph(element8, 'onclick');
        morphs[2] = dom.createMorphAt(element8, 0, 0);
        morphs[3] = dom.createMorphAt(element6, 3, 3);
        morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "ko-people-popover__input input-text u-1/1", "type", "text", "placeholder", ["subexpr", "@mut", [["get", "inputPlaceholderText", ["loc", [null, [5, 18], [5, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "searchTerm", ["loc", [null, [6, 12], [6, 22]]]]], [], []]], ["loc", [null, [3, 6], [7, 8]]]], ["attribute", "onclick", ["subexpr", "action", ["addPerson", ["get", "searchTerm", ["loc", [null, [10, 57], [10, 67]]]]], [], ["loc", [null, [10, 36], [10, 69]]]]], ["inline", "t", ["generic.add"], [], ["loc", [null, [11, 65], [11, 84]]]], ["block", "if", [["get", "searchTermEmailNotValid", ["loc", [null, [16, 8], [16, 31]]]]], [], 0, null, ["loc", [null, [16, 2], [18, 9]]]], ["block", "if", [["get", "selectedPeople", ["loc", [null, [21, 6], [21, 20]]]]], [], 1, null, ["loc", [null, [21, 0], [34, 7]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [36, 6], [36, 15]]]]], [], 2, 3, ["loc", [null, [36, 0], [81, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('frontend-cp/components/ko-predicate-builder/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    definitions: [],
    collections: [],
    onCollectionAddition: null,
    onCollectionRemoval: null,
    onAdditionOfRuleToCollection: null,
    onRuleDeletion: null,
    canDeleteCollection: false
  });
});
define('frontend-cp/components/ko-predicate-builder/rule/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;
  var on = _ember['default'].on;
  exports['default'] = _ember['default'].Component.extend({
    intl: inject.service(),
    store: inject.service(),

    canDeleteRule: false,
    definitions: [],
    onRuleDeletion: null,
    rule: null,

    definition: computed('definitions.@each.id', 'rule.field', function () {
      return this.get('definitions').findBy('id', this.get('rule.field'));
    }),

    definitionInputType: computed('definition.inputType', function () {
      var inputType = this.get('definition.inputType');

      if (inputType) {
        return _ember['default'].String.dasherize(inputType);
      } else {
        return null;
      }
    }),

    value: computed('rule.value', 'definition.values.@each.value', 'definitionInputType', 'autocompleteType', function () {
      var ruleValue = this.get('rule.value');

      switch (this.get('definitionInputType')) {
        case 'options':
          {
            var definitionValues = this.get('definition.values');

            if (definitionValues) {
              return definitionValues.findBy('value', ruleValue);
            } else {
              return null;
            }
          }
        case 'autocomplete':
          {
            if (ruleValue) {
              return this.get('store').findRecord(this.get('autocompleteType'), ruleValue);
            } else {
              return null;
            }
          }
        case 'tags':
          {
            if (ruleValue) {
              return ruleValue.split(',').map(function (t) {
                return _ember['default'].Object.create({ name: t });
              });
            } else {
              return [];
            }
          }
        default:
          return ruleValue;
      }
    }),

    autocompleteType: computed('rule.field', function () {
      switch (this.get('rule.field')) {
        case 'cases.organizationid':
          return 'organization';
        default:
          return 'user';
      }
    }),

    autocompleteQueryOptions: computed('rule.field', function () {
      switch (this.get('rule.field')) {
        case 'cases.assigneeagentid':
          return { 'in': 'ADMINS,AGENTS,COLLABORATORS' };
        default:
          return {};
      }
    }),

    autocompleteOptionLabelPath: computed('autocompleteType', function () {
      switch (this.get('autocompleteType')) {
        case 'user':
          return 'fullName';
        default:
          return 'name';
      }
    }),

    initializeRuleField: observer('definitions.firstObject', on('init', function () {
      if (!this.get('rule.field')) {
        this.set('rule.field', this.get('definitions.firstObject.id'));
      }
    })),

    initializeRuleOperator: observer('rule.field', function () {
      var definitionOperators = this.get('definition.operators');

      if (definitionOperators) {
        if (!definitionOperators.contains(this.get('rule.operator'))) {
          this.set('rule.operator', definitionOperators.get('firstObject'));
        }
      } else {
        this.set('rule.operator', null);
      }
    }),

    initializeRuleValue: observer('rule.field', function () {
      switch (this.get('definitionInputType')) {
        case 'options':
          {
            this.set('rule.value', this.get('definition.values').get('firstObject.value'));
            return;
          }
        case 'date-absolute':
          {
            this.set('rule.value', new Date());
            return;
          }
        case 'tags':
          {
            this.set('rule.value', '');
            return;
          }
        default:
          this.set('rule.value', null);
      }
    }),

    actions: {
      selectDefinition: function selectDefinition(definition) {
        this.set('rule.field', definition.get('id'));
      },

      selectValue: function selectValue(value) {
        this.set('rule.value', value.get('value'));
      },

      selectAutocompleteValue: function selectAutocompleteValue(value) {
        this.set('rule.value', value.get('id'));
      },

      addTagToValue: function addTagToValue(tag) {
        this.set('rule.value', this.get('value').mapBy('name').concat(tag).join(','));
      },

      removeTagFromValue: function removeTagFromValue(tag) {
        this.set('rule.value', _npmLodash['default'].without(this.get('value'), tag).mapBy('name').join(','));
      },

      searchAutocomplete: function searchAutocomplete(text) {
        return this.get('store').query(this.get('autocompleteType'), _npmLodash['default'].extend({}, this.get('autocompleteQueryOptions'), { name: text }));
      }
    }
  });
});
define("frontend-cp/components/ko-predicate-builder/rule/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 17,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "ko-dropdown_list__item");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", [["subexpr", "concat", ["admin.predicate_builder.", ["get", "definition.id", ["loc", [null, [15, 47], [15, 60]]]]], [], ["loc", [null, [15, 12], [15, 61]]]]], [], ["loc", [null, [15, 8], [15, 63]]]]],
        locals: ["definition"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "ko-dropdown_list__item");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", [["subexpr", "concat", ["admin.predicate_builder.operators.", ["subexpr", "or", [["get", "operator", ["loc", [null, [28, 61], [28, 69]]]], "none"], [], ["loc", [null, [28, 57], [28, 77]]]]], [], ["loc", [null, [28, 12], [28, 78]]]]], [], ["loc", [null, [28, 8], [28, 80]]]]],
        locals: ["operator"],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 6
              },
              "end": {
                "line": 45,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n           ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "value.string", ["loc", [null, [43, 11], [43, 27]]]]],
          locals: ["value"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "power-select-multiple", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [35, 97], [35, 133]]]]], [], ["loc", [null, [35, 14], [35, 134]]]], "searchField", "string", "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [37, 17], [37, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.values", ["loc", [null, [38, 16], [38, 33]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "onchange", ["subexpr", "action", ["selectValue"], [], ["loc", [null, [41, 17], [41, 39]]]]], 0, null, ["loc", [null, [34, 6], [45, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 57,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n           ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "get", [["get", "value", ["loc", [null, [55, 17], [55, 22]]]], ["get", "autocompleteOptionLabelPath", ["loc", [null, [55, 23], [55, 50]]]]], [], ["loc", [null, [55, 11], [55, 52]]]]],
            locals: ["value"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 4
              },
              "end": {
                "line": 58,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [48, 97], [48, 133]]]]], [], ["loc", [null, [48, 14], [48, 134]]]], "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [49, 17], [49, 22]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "search", ["subexpr", "action", ["searchAutocomplete"], [], ["loc", [null, [52, 15], [52, 44]]]], "onchange", ["subexpr", "action", ["selectAutocompleteValue"], [], ["loc", [null, [53, 17], [53, 51]]]]], 0, null, ["loc", [null, [47, 6], [57, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 65,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-predicate-builder__tags-input");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-tags", [], ["selectedTags", ["subexpr", "@mut", [["get", "value", ["loc", [null, [61, 23], [61, 28]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addTagToValue"], [], ["loc", [null, [62, 24], [62, 48]]]], "onTagRemoval", ["subexpr", "action", ["removeTagFromValue"], [], ["loc", [null, [63, 23], [63, 52]]]]], ["loc", [null, [60, 8], [63, 54]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 66,
                      "column": 6
                    },
                    "end": {
                      "line": 77,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n           ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["content", "value.string", ["loc", [null, [75, 11], [75, 27]]]]],
                locals: ["value"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 65,
                    "column": 4
                  },
                  "end": {
                    "line": 78,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [67, 97], [67, 133]]]]], [], ["loc", [null, [67, 14], [67, 134]]]], "searchField", "string", "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [69, 17], [69, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.values", ["loc", [null, [70, 16], [70, 33]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "onchange", ["subexpr", "action", ["selectValue"], [], ["loc", [null, [73, 17], [73, 39]]]]], 0, null, ["loc", [null, [66, 6], [77, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 78,
                      "column": 4
                    },
                    "end": {
                      "line": 80,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-date-select", [], ["value", ["subexpr", "@mut", [["get", "rule.value", ["loc", [null, [79, 29], [79, 39]]]]], [], []], "onChange", ["subexpr", "action", [["subexpr", "mut", [["get", "rule.value", ["loc", [null, [79, 62], [79, 72]]]]], [], ["loc", [null, [79, 57], [79, 73]]]]], [], ["loc", [null, [79, 49], [79, 74]]]]], ["loc", [null, [79, 6], [79, 76]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 80,
                      "column": 4
                    },
                    "end": {
                      "line": 82,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n    ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "class", "ko-predicate-builder_rule__input input-text", "value", ["subexpr", "@mut", [["get", "rule.value", ["loc", [null, [81, 84], [81, 94]]]]], [], []]], ["loc", [null, [81, 6], [81, 96]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 78,
                    "column": 4
                  },
                  "end": {
                    "line": 82,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [78, 18], [78, 37]]]], "date-absolute"], [], ["loc", [null, [78, 14], [78, 54]]]]], [], 0, 1, ["loc", [null, [78, 4], [82, 4]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 4
                },
                "end": {
                  "line": 82,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [65, 18], [65, 37]]]], "options"], [], ["loc", [null, [65, 14], [65, 48]]]]], [], 0, 1, ["loc", [null, [65, 4], [82, 4]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 4
              },
              "end": {
                "line": 82,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [58, 18], [58, 37]]]], "tags"], [], ["loc", [null, [58, 14], [58, 45]]]]], [], 0, 1, ["loc", [null, [58, 4], [82, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 82,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [46, 18], [46, 37]]]], "autocomplete"], [], ["loc", [null, [46, 14], [46, 53]]]]], [], 0, 1, ["loc", [null, [46, 4], [82, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 6
            },
            "end": {
              "line": 89,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-predicate-builder_rule__remove");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onRuleDeletion", ["loc", [null, [87, 76], [87, 90]]]], ["get", "rule", ["loc", [null, [87, 91], [87, 95]]]]], [], ["loc", [null, [87, 67], [87, 97]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-predicate-builder_rule__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__actions layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.or"], [], ["loc", [null, [2, 2], [2, 20]]]], ["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--column"], [], ["loc", [null, [8, 95], [8, 129]]]]], [], ["loc", [null, [8, 12], [8, 130]]]], "selected", ["subexpr", "@mut", [["get", "definition", ["loc", [null, [9, 15], [9, 25]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [10, 14], [10, 25]]]]], [], []], "searchEnabled", false, "renderInPlace", true, "onchange", ["subexpr", "action", ["selectDefinition"], [], ["loc", [null, [13, 15], [13, 42]]]]], 0, null, ["loc", [null, [7, 4], [17, 21]]]], ["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium ", ["subexpr", "qa-cls", [" qa-proposition--operator"], [], ["loc", [null, [21, 96], [21, 132]]]]], [], ["loc", [null, [21, 12], [21, 133]]]], "selected", ["subexpr", "@mut", [["get", "rule.operator", ["loc", [null, [22, 15], [22, 28]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.operators", ["loc", [null, [23, 14], [23, 34]]]]], [], []], "searchEnabled", false, "renderInPlace", true, "onchange", ["subexpr", "action", [["subexpr", "mut", [["get", "rule.operator", ["loc", [null, [26, 28], [26, 41]]]]], [], ["loc", [null, [26, 23], [26, 42]]]]], [], ["loc", [null, [26, 15], [26, 43]]]]], 1, null, ["loc", [null, [20, 4], [30, 21]]]], ["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [33, 14], [33, 33]]]], "multiple"], [], ["loc", [null, [33, 10], [33, 45]]]]], [], 2, 3, ["loc", [null, [33, 4], [82, 11]]]], ["block", "if", [["get", "canDeleteRule", ["loc", [null, [85, 12], [85, 25]]]]], [], 4, null, ["loc", [null, [85, 6], [89, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("frontend-cp/components/ko-predicate-builder/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-predicate-builder__remove");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-minus-square");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onCollectionRemoval", ["loc", [null, [5, 63], [5, 82]]]], ["get", "collection", ["loc", [null, [5, 83], [5, 93]]]]], [], ["loc", [null, [5, 54], [5, 95]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-predicate-builder/rule", [], ["class", ["subexpr", "qa-cls", ["qa-predicate-builder--proposition"], [], ["loc", [null, [12, 16], [12, 60]]]], "definitions", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [13, 22], [13, 33]]]]], [], []], "rule", ["subexpr", "@mut", [["get", "proposition", ["loc", [null, [14, 15], [14, 26]]]]], [], []], "canDeleteRule", ["subexpr", "not", [["subexpr", "eq", [["get", "collection.propositions.length", ["loc", [null, [15, 33], [15, 63]]]], 1], [], ["loc", [null, [15, 29], [15, 66]]]]], [], ["loc", [null, [15, 24], [15, 67]]]], "onRuleDeletion", ["subexpr", "action", [["get", "onRuleDeletion", ["loc", [null, [16, 33], [16, 47]]]], ["get", "collection", ["loc", [null, [16, 48], [16, 58]]]]], [], ["loc", [null, [16, 25], [16, 59]]]]], ["loc", [null, [11, 6], [17, 8]]]]],
          locals: ["proposition"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-predicate-builder");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-predicate-builder__label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-predicate-builder__add");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createMorphAt(element1, 5, 5);
          morphs[3] = dom.createAttrMorph(element2, 'onclick');
          morphs[4] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["generic.and"], [], ["loc", [null, [3, 45], [3, 64]]]], ["block", "if", [["get", "canDeleteCollection", ["loc", [null, [4, 10], [4, 29]]]]], [], 0, null, ["loc", [null, [4, 4], [8, 11]]]], ["block", "each", [["get", "collection.propositions", ["loc", [null, [10, 12], [10, 35]]]]], [], 1, null, ["loc", [null, [10, 4], [18, 13]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onAdditionOfRuleToCollection", ["loc", [null, [19, 60], [19, 88]]]], ["get", "collection", ["loc", [null, [19, 89], [19, 99]]]]], [], ["loc", [null, [19, 51], [19, 101]]]]], ["inline", "t", ["admin.predicate_builder.label.addition_of_rule"], [], ["loc", [null, [19, 102], [19, 156]]]]],
        locals: ["collection"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 97
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-predicate-builder__new");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element3, 'onclick');
        morphs[2] = dom.createMorphAt(element3, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "collections", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [21, 9]]]], ["attribute", "onclick", ["get", "onCollectionAddition", ["loc", [null, [23, 49], [23, 69]]]]], ["inline", "t", ["generic.and"], [], ["loc", [null, [23, 72], [23, 91]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-radio/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    disabled: false,
    large: false,

    checked: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    selected: _ember['default'].computed('value', 'checked', function () {
      return this.value === this.checked;
    }),

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.get('disabled')) {
          return;
        }

        if (this.get('onRadio')) {
          this.sendAction('onRadio', true);
        } else {
          this.set('checked', true);
        }
      }
    }

  });
});
define("frontend-cp/components/ko-radio/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-radio__radio ", ["subexpr", "if", [["get", "large", ["loc", [null, [3, 37], [3, 42]]]], "ko-radio__radio--large"], [], ["loc", [null, [3, 32], [3, 69]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-radio__label ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [7, 37], [7, 45]]]], "ko-radio__label--disabled"], [], ["loc", [null, [7, 32], [7, 75]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [7, 84], [7, 93]]]], "-radio"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [7, 111], [7, 135]]]]], ["content", "label", ["loc", [null, [7, 136], [7, 145]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "radio");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createAttrMorph(element2, 'onclick');
        morphs[7] = dom.createMorphAt(element2, 1, 1);
        morphs[8] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-radio__container ", ["subexpr", "if", [["get", "large", ["loc", [null, [1, 37], [1, 42]]]], "ko-radio__container--large"], [], ["loc", [null, [1, 32], [1, 73]]]], " ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 79], [1, 87]]]], "ko-radio__radio--disabled"], [], ["loc", [null, [1, 74], [1, 117]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "checked", ["loc", [null, [1, 148], [1, 155]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 171], [1, 179]]]]]]], ["attribute", "aria-disabled", ["concat", [["get", "disabled", ["loc", [null, [1, 200], [1, 208]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 225], [1, 233]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 243], [1, 252]]]], "-radio"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [1, 270], [1, 294]]]]], ["block", "if", [["get", "checked", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["get", "label", ["loc", [null, [6, 6], [6, 11]]]]], [], 1, null, ["loc", [null, [6, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-recent-cases/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['info-bar-item', 'info-bar-item--no-hover', 'u-no-bottom-border'],

    cases: null,

    last3Cases: _ember['default'].computed('cases', function () {
      return this.get('cases').slice(0, 3);
    })
  });
});
define("frontend-cp/components/ko-recent-cases/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "t-italic t-caption t-small");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(",\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "case.subject", ["loc", [null, [7, 8], [7, 24]]]], ["content", "case.status.label", ["loc", [null, [11, 29], [11, 50]]]], ["inline", "t", ["cases.lastupdated"], ["time", ["subexpr", "moment-from-now", [["get", "case.createdAt", ["loc", [null, [12, 60], [12, 74]]]]], [], ["loc", [null, [12, 43], [12, 75]]]]], ["loc", [null, [12, 14], [12, 77]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["session.agent.cases.case", ["get", "case", ["loc", [null, [5, 42], [5, 46]]]]], ["class", "ko-recent-cases__item"], 0, null, ["loc", [null, [5, 4], [14, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "case.subject", ["loc", [null, [4, 8], [4, 20]]]]], [], 0, null, ["loc", [null, [4, 2], [15, 9]]]]],
        locals: ["case", "i"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-recent-case__missing");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["users.no_recent_cases"], [], ["loc", [null, [18, 4], [18, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 31], [1, 40]]]], ["block", "each", [["get", "last3Cases", ["loc", [null, [3, 8], [3, 18]]]]], [], 0, 1, ["loc", [null, [3, 0], [20, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-reorderable-crud-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    removeItemAction: null,
    createItemAction: null,
    classNames: ['ko-reorderable-crud-list'],
    firstItem: {},

    reorderListAction: null,
    userWantsToSeeNewItemForm: false,

    isShowingNewItemForm: _ember['default'].computed('userWantsToSeeNewItemForm', function () {
      return this.get('userWantsToSeeNewItemForm');
    }),

    actions: {
      removeItem: function removeItem(item) {
        this.sendAction('removeItemAction', item);
      },
      createItem: function createItem() {
        this.sendAction('createItemAction');
      },
      reorderList: function reorderList(itemModels) {
        this.sendAction('reorderListAction', itemModels);
      }
    }
  });
});
define("frontend-cp/components/ko-reorderable-crud-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-reorderable-crud-list__item");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-reorderable-crud-list-actions");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-minus-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-add-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "item", ["loc", [null, [3, 10], [3, 14]]]]], [], ["loc", [null, [3, 2], [3, 16]]]], ["element", "action", ["removeItem", ["get", "item", ["loc", [null, [5, 78], [5, 82]]]]], [], ["loc", [null, [5, 56], [5, 84]]]], ["element", "action", ["createItem", ["get", "item", ["loc", [null, [8, 78], [8, 82]]]]], [], ["loc", [null, [8, 56], [8, 84]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderList", "items", ["subexpr", "@mut", [["get", "items", ["loc", [null, [1, 63], [1, 68]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [13, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-reorderable-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    items: null,

    classNames: ['ko-reorderable-list'],

    actions: {
      reorderItems: function reorderItems(itemModels, draggedModel) {
        this.sendAction('reorderedListAction', itemModels);
      }
    }
  });
});
define("frontend-cp/components/ko-reorderable-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-input-draggable ko-reorderable-list-item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "i-dragstrip ko-reorderable-list_item_handle");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "item", ["loc", [null, [6, 16], [6, 20]]]]], [], ["loc", [null, [6, 8], [6, 22]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "sortable-item", [], ["tagName", "li", "model", ["subexpr", "@mut", [["get", "item", ["loc", [null, [3, 40], [3, 44]]]]], [], []], "group", ["subexpr", "@mut", [["get", "group", ["loc", [null, [3, 51], [3, 56]]]]], [], []], "handle", ".i-dragstrip"], 0, null, ["loc", [null, [3, 4], [8, 22]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "items", ["loc", [null, [2, 10], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 11]]]]],
        locals: ["group"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "sortable-group", [], ["classNames", "ko-reorderable-list", "tagName", "ul", "onChange", "reorderItems"], 0, null, ["loc", [null, [1, 0], [10, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-session-widgets/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    session: _ember['default'].inject.service(),

    user: _ember['default'].computed('session.user', function () {
      return this.get('session.user');
    })
  });
});
define("frontend-cp/components/ko-session-widgets/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "ko-notification-badge", ["loc", [null, [3, 2], [3, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-user-menu", [], ["user", ["subexpr", "@mut", [["get", "user", ["loc", [null, [1, 20], [1, 24]]]]], [], []]], ["loc", [null, [1, 0], [1, 26]]]], ["block", "if", [["get", "features.notificationBadge", ["loc", [null, [2, 6], [2, 32]]]]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    filteredViews: _ember['default'].computed('customViews', function () {
      return this.get('customViews').filter(function (view) {
        return view.get('viewType') !== 'TRASH';
      });
    }),

    trashView: _ember['default'].computed('customViews', function () {
      return this.get('customViews').findBy('viewType', 'TRASH');
    })
  });
});
define('frontend-cp/components/ko-sidebar/item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-sidebar/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["sidebar__icon sidebar__i ", ["get", "icon", ["loc", [null, [4, 39], [4, 43]]]], " i-size-14 i-color-grey--light"]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "sidebar__value");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["inline", "if", [["get", "hasRelativeAccuracy", ["loc", [null, [10, 11], [10, 30]]]], "~"], [], ["loc", [null, [10, 6], [10, 36]]]], ["content", "casesView.viewCount.count", ["loc", [null, [10, 36], [10, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "sidebar__title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [2]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "icon", ["loc", [null, [3, 8], [3, 12]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 9]]]], ["attribute", "title", ["concat", [["get", "casesView.title", ["loc", [null, [7, 39], [7, 54]]]]]]], ["content", "casesView.title", ["loc", [null, [7, 58], [7, 77]]]], ["block", "if", [["subexpr", "and", [["get", "casesView.viewCount.hasKnownAccuracy", ["loc", [null, [8, 13], [8, 49]]]], ["get", "casesView.viewCount.count", ["loc", [null, [8, 50], [8, 75]]]]], [], ["loc", [null, [8, 8], [8, 76]]]]], [], 1, null, ["loc", [null, [8, 2], [12, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["session.agent.cases.index.view", ["get", "casesView", ["loc", [null, [1, 44], [1, 53]]]]], ["class", ["subexpr", "concat", ["sidebar__link sidebar__link--is-default t-naked-link", ["subexpr", "if", [["subexpr", "eq", [["get", "casesView.viewCount.count", ["loc", [null, [2, 79], [2, 104]]]], 0], [], ["loc", [null, [2, 75], [2, 107]]]], " disabled", ""], [], ["loc", [null, [2, 71], [2, 123]]]]], [], ["loc", [null, [2, 8], [2, 124]]]]], 0, null, ["loc", [null, [1, 0], [13, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "casesView", ["loc", [null, [7, 32], [7, 41]]]]], [], []]], ["loc", [null, [7, 4], [7, 43]]]]],
          locals: ["casesView"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.setAttribute(el1, "class", "sidebar__separator");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "filteredViews", ["loc", [null, [6, 10], [6, 23]]]]], [], 0, null, ["loc", [null, [6, 2], [8, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessages.title"], [], ["loc", [null, [14, 2], [14, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "trashView", ["loc", [null, [18, 30], [18, 39]]]]], [], []]], ["loc", [null, [18, 2], [18, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.setAttribute(el1, "class", "sidebar__separator");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "icon", "i-inbox", "class", "sidebar__first-item"], ["loc", [null, [1, 0], [1, 82]]]], ["block", "if", [["get", "customViews.length", ["loc", [null, [3, 6], [3, 24]]]]], [], 0, null, ["loc", [null, [3, 0], [9, 7]]]], ["block", "link-to", ["session.agent.cases.index.suspended-messages"], ["class", "sidebar__link t-naked-link"], 1, null, ["loc", [null, [13, 0], [15, 12]]]], ["block", "if", [["get", "trashView", ["loc", [null, [17, 6], [17, 15]]]]], [], 2, null, ["loc", [null, [17, 0], [19, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-simple-box-row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-simple-box-row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-box-row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-simple-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define('frontend-cp/components/ko-simple-list/row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Parmas
    action: null,
    content: null,

    click: function click(e) {
      if (this.get('action')) {
        this.sendAction('action', this.get('content'), e);
      }
    }
  });
});
define("frontend-cp/components/ko-simple-list/row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-simple-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-sla/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    metric: null,

    classNames: ['ko-sla'],

    statusClassName: _ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');

      return status ? 'ko-sla--' + status.toLowerCase() : '';
    }),

    iconClass: _ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state') || '',
          status = this.get('metric.status') || '';

      if (!state) {
        return '';
      }

      var iconClass = this.getIconClassName(state, status);

      return iconClass + ' t-' + status.toLowerCase() + ' ko-sla__icon--' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });
});
define("frontend-cp/components/ko-sla/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ~");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            return morphs;
          },
          statements: [["content", "metric.numberOfWholeDaysRemaining", ["loc", [null, [12, 9], [12, 46]]]], ["inline", "t", ["generic.day_abbreviation"], [], ["loc", [null, [12, 46], [12, 78]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["content", "metric.numberOfWholeHoursRemaining", ["loc", [null, [15, 10], [15, 48]]]], ["inline", "t", ["generic.hour_abbreviation"], [], ["loc", [null, [15, 48], [15, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["content", "metric.numberOfWholeMinutesRemaining", ["loc", [null, [17, 10], [17, 50]]]], ["inline", "t", ["generic.minute_abbreviation"], [], ["loc", [null, [17, 50], [17, 85]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "metric.numberOfWholeHoursRemaining", ["loc", [null, [14, 14], [14, 48]]]]], [], 0, 1, ["loc", [null, [14, 8], [18, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sla/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-sla__icon");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-sla__metric");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element2, 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-sla__container ", ["get", "statusClassName", ["loc", [null, [2, 34], [2, 49]]]]]]], ["attribute", "class", ["concat", ["ko-sla__i ", ["get", "iconClass", ["loc", [null, [4, 28], [4, 37]]]], " i-size-11"]]], ["block", "if", [["get", "metric.isBreached", ["loc", [null, [7, 12], [7, 29]]]]], [], 0, null, ["loc", [null, [7, 6], [9, 13]]]], ["block", "if", [["get", "metric.numberOfWholeDaysRemaining", ["loc", [null, [11, 12], [11, 45]]]]], [], 1, 2, ["loc", [null, [11, 6], [19, 13]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-sla/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "metric", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, null, ["loc", [null, [1, 0], [22, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-stateful-button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    activeText: null,
    inactiveText: null,
    activeHoverText: null,
    inactiveHoverText: null,
    isLoading: false,

    tagName: 'button',
    classNames: ['button', 'button--highlight'],
    classNameBindings: ['isActive'],
    attributeBindings: ['disabled'],

    buttonText: _ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeText') : this.get('inactiveText');
    }),

    buttonHoverText: _ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeHoverText') : this.get('inactiveHoverText');
    }),

    disabled: _ember['default'].computed('isEnabled', function () {
      return this.get('isEnabled') ? '' : 'disabled';
    }),

    click: function click() {
      this.sendAction('onClick');
    }
  });
});
define("frontend-cp/components/ko-stateful-button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-stateful-button__button-loading"], ["loc", [null, [2, 2], [2, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-stateful-button__button-text");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-stateful-button__button-text--hover");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "buttonText", ["loc", [null, [5, 4], [5, 18]]]], ["content", "buttonHoverText", ["loc", [null, [8, 4], [8, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-suggest/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    searchTerm: null,
    isFocussed: false,
    hideOnClick: true,
    shouldAutoFocus: false,
    displayIcon: true,

    filterResults: _ember['default'].observer('searchTerm', function () {
      this.sendAction('onSearchTermUpdated', this.get('searchTerm'));
    }),

    willRender: function willRender() {
      if (this.get('shouldAutoFocus')) {
        if (this.$('.ko-suggest__input')) {
          this.set('isFocussed', true);
          this.$('.ko-suggest__input').focus();
        }
      }
    },

    actions: {
      onFocusChanged: function onFocusChanged(focusState) {
        this.set('isFocussed', focusState);
      }
    }

  });
});
define("frontend-cp/components/ko-suggest/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "searchTerm", ["loc", [null, [5, 32], [5, 42]]]]], [], []], "class", "input-text ko-suggest__input"], ["loc", [null, [5, 6], [5, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-dropdown/select/button", [], ["label", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [7, 40], [7, 52]]]]], [], []], "displayIcon", ["subexpr", "@mut", [["get", "displayIcon", ["loc", [null, [7, 65], [7, 76]]]]], [], []]], ["loc", [null, [7, 6], [7, 78]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "or", [["get", "isFocussed", ["loc", [null, [4, 14], [4, 24]]]], ["subexpr", "not", [["get", "selectedItem", ["loc", [null, [4, 30], [4, 42]]]]], [], ["loc", [null, [4, 25], [4, 43]]]]], [], ["loc", [null, [4, 10], [4, 44]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [13, 6], [13, 15]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [12, 66], [12, 78]]]]], [], []]], 0, null, ["loc", [null, [12, 4], [14, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [11, 12], [11, 16]]]], "content"], [], ["loc", [null, [11, 8], [11, 27]]]]], [], 1, null, ["loc", [null, [11, 2], [15, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["hideOnClick", ["subexpr", "@mut", [["get", "hideOnClick", ["loc", [null, [1, 37], [1, 48]]]]], [], []], "hideOnChildFocus", true, "onFocusChanged", "onFocusChanged"], 0, null, ["loc", [null, [1, 0], [17, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/body/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tbody'
  });
});
define("frontend-cp/components/ko-table/body/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/body/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-table/cell/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'td'
  });
});
define("frontend-cp/components/ko-table/cell/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/cell/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-table/column/component', ['exports', 'ember'], function (exports, _ember) {
  var htmlSafe = _ember['default'].String.htmlSafe;
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'th',
    column: null,
    orderBy: null,
    orderByColumn: null,
    sortable: false,

    classNames: ['ko-table_column'],
    classNameBindings: ['selected:ko-table_column--selected'],
    attributeBindings: 'style',

    // CPs
    style: _ember['default'].computed('width', function () {
      var width = this.get('width');
      return htmlSafe(width ? 'width: ' + width : '');
    }),

    selected: _ember['default'].computed('orderByColumn', 'column.name', function () {
      return this.get('orderByColumn') === this.get('column.name');
    }),

    // Events
    mouseDown: function mouseDown(e) {
      if (this.get('sortable')) {
        e.preventDefault();
      }
    },

    click: function click() {
      if (!this.get('sortable')) {
        return null;
      }

      var sortOrder = 'asc';
      var sortColumn = this.get('column');

      if (this.get('orderBy') === 'asc') {
        sortOrder = 'desc';
      } else if (this.get('orderBy') === 'desc' && this.get('selected')) {
        /*eslint-disable no-undefined */
        sortColumn = undefined;
        sortOrder = undefined;
        /*eslint-enable no-undefined */
      }

      this.sendAction('onSort', sortColumn, sortOrder);
    }
  });
});
define("frontend-cp/components/ko-table/column/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "i-chevron-small-up");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "i-chevron-small-down");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "orderBy", ["loc", [null, [5, 14], [5, 21]]]], "asc"], [], ["loc", [null, [5, 10], [5, 28]]]]], [], 0, null, ["loc", [null, [5, 4], [7, 11]]]], ["block", "if", [["subexpr", "eq", [["get", "orderBy", ["loc", [null, [9, 14], [9, 21]]]], "desc"], [], ["loc", [null, [9, 10], [9, 29]]]]], [], 1, null, ["loc", [null, [9, 4], [11, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-table_column--wrapper");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]], ["block", "if", [["get", "selected", ["loc", [null, [4, 8], [4, 16]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'table',
    rows: [],
    onSelectionChange: null,

    // Lifecycle hooks
    init: function init() {
      this._super.apply(this, arguments);
      this.set('rows', []);
    },

    // CPs
    rowStatuses: computed.mapBy('rows', 'selected'),
    unselectedRowStatuses: computed.filter('rowStatuses', function (status) {
      return !status;
    }),
    allRowsSelected: computed('rows.@each.selected', function () {
      return this.get('rows.length') > 0 && this.get('rows').every(function (row) {
        return row.get('selected');
      });
    }),

    // Actions
    actions: {
      registerRow: function registerRow(row) {
        this.get('rows').addObject(row);
      },

      unregisterRow: function unregisterRow(row) {
        this.get('rows').removeObject(row);
        if (row.get('selected')) {
          _ember['default'].run.scheduleOnce('actions', this, 'send', 'rowSelectionChanged');
        }
      },

      selectAll: function selectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', true);
        });
        var selectionAction = this.get('onSelectionChange');
        if (selectionAction) {
          var models = this.get('rows').filterBy('selected').mapBy('rowContext');
          selectionAction(models);
        }
      },

      deselectAll: function deselectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', false);
        });
        var selectionAction = this.get('onSelectionChange');
        if (selectionAction) {
          var models = this.get('rows').filterBy('selected').mapBy('rowContext');
          selectionAction(models);
        }
      },

      rowSelectionChanged: function rowSelectionChanged() {
        var selectedItems = this.get('rows').filterBy('selected').mapBy('rowContext');
        var action = this.get('onSelectionChange');
        return action && action(selectedItems);
      }
    }
  });
});
define('frontend-cp/components/ko-table/header/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'thead',
    selectable: _ember['default'].computed.readOnly('parentView.selectable'),

    actions: {
      selectAll: function selectAll(value) {
        this.get('parentView').send(value ? 'selectAll' : 'deselectAll');
      }
    }
  });
});
define("frontend-cp/components/ko-table/header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "parentView.allRowsSelected", ["loc", [null, [4, 28], [4, 54]]]]], [], []], "onCheck", "selectAll"], ["loc", [null, [4, 6], [4, 76]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/column", [], ["class", "ko-table__header__column--selectable"], 0, null, ["loc", [null, [3, 4], [5, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "selectable", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 9]]]], ["content", "yield", ["loc", [null, [8, 2], [8, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr',
    rowContext: null,
    clickable: false,

    // TODO BUG when component is reusing existing dom (via Glimmer), selectable
    // will be undefined
    selectable: _ember['default'].computed.readOnly('parentView.parentView.selectable'),
    selected: false,

    classNameBindings: [':ko-table_row', 'selected:ko-table_row--selected'],

    // Lifecycle hooks
    willInsertElement: function willInsertElement() {
      this._super.apply(this, arguments);
      var action = this.get('table.actions.registerRow');
      if (action) {
        action(this);
      }
    },

    willDestroyElement: function willDestroyElement() {
      var action = this.get('table.actions.unregisterRow');
      if (action) {
        action(this);
      }
      this._super.apply(this, arguments);
    },

    // Event handlers
    click: function click() {
      if (this.get('clickable')) {
        this.attrs.onClick(this.get('rowContext'));
      }
    },

    // Actions
    actions: {
      toggleRow: function toggleRow() {
        this.toggleProperty('selected');
        var action = this.get('onSelectChange');
        if (action) {
          action();
        }
      }
    }
  });
});
define("frontend-cp/components/ko-table/row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [3, 26], [3, 34]]]]], [], []], "onCheck", ["subexpr", "action", ["toggleRow"], [], ["loc", [null, [3, 43], [3, 63]]]]], ["loc", [null, [3, 4], [3, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/cell", [], ["class", "ko-table_cell--selectable"], 0, null, ["loc", [null, [2, 2], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "selectable", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["content", "yield", ["loc", [null, [6, 0], [6, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-table/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-table/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["actions", ["subexpr", "hash", [], ["rowSelectionChanged", ["subexpr", "action", ["rowSelectionChanged"], [], ["loc", [null, [3, 24], [3, 54]]]], "registerRow", ["subexpr", "action", ["registerRow"], [], ["loc", [null, [4, 16], [4, 38]]]], "unregisterRow", ["subexpr", "action", ["unregisterRow"], [], ["loc", [null, [5, 18], [5, 42]]]]], ["loc", [null, [2, 10], [6, 3]]]]], ["loc", [null, [1, 8], [7, 1]]]]], [], ["loc", [null, [1, 0], [7, 3]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-tags/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    suggestionQueryDebounce: 150,

    // Params
    selectedTags: [],
    suggestedTags: [],
    errorTags: [],
    forceLowerCase: true,
    nameField: 'name',
    inputTabindex: 0,
    onTagSuggestion: null,
    onTagAddition: null,
    onTagRemoval: null,
    newTagText: '',
    addTagText: '',
    isDisabled: false,

    // HTML
    classNameBindings: ['showDropdown:active', 'isDisabled:disabled'],
    attributeBindings: ['tabindex', 'role'],
    tabindex: null,
    role: 'menuitem',
    title: 'Tags',

    // State
    searchTerm: '',
    isMouseAccess: false,
    showDropdown: false,
    selection: -1,

    resetSuggestedTagKeyboardPosition: function resetSuggestedTagKeyboardPosition() {
      this.set('selection', -1);
    },

    statusTags: _ember['default'].computed('selectedTags.[]', 'errorTags.[]', function () {
      var statusTags = [];
      var tags = this.get('selectedTags') || [];
      var errors = this.get('errorTags') || [];

      var nameField = this.get('nameField');
      tags.forEach(function (tag) {
        var tagName = nameField ? get(tag, nameField) : tag;
        if (nameField) {
          // if tag is an object and not a string
          tag.set('isError', errors.indexOf(tagName) > -1);
        }
        statusTags.push(tag);
      });
      return statusTags;
    }),

    lastTag: _ember['default'].computed('statusTags.[]', function () {
      return this.get('statusTags.lastObject');
    }),

    isSuggested: _ember['default'].computed('searchTerm', 'suggestedTags', function () {
      var searchTerm = this.get('searchTerm');
      var suggestedTags = this.get('suggestedTags');
      return suggestedTags.contains(searchTerm);
    }),

    isSelected: _ember['default'].computed('searchTerm', 'selectedTags', function () {
      var searchTerm = this.get('searchTerm');
      var selectedTags = this.get('selectedTags');
      return selectedTags.contains(searchTerm);
    }),

    onSearchTermChange: _ember['default'].observer('searchTerm', function () {
      this.resetSuggestedTagKeyboardPosition();
    }),

    didReceiveAttrs: function didReceiveAttrs() {
      this.resetSuggestedTagKeyboardPosition();
    },

    click: function click() {
      this.updateSuggestions();
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn(e) {
      var mouseAccess = this.get('isMouseAccess');
      if (!mouseAccess) {
        this.set('showDropdown', true);
      }
    },

    focusOut: function focusOut() {
      this.set('isMouseAccess', false);
      this.set('showDropdown', false);
      this.send('addTag', this.get('searchTerm'));
    },

    updateSuggestions: function updateSuggestions() {
      _ember['default'].run.debounce(this, this.updateSuggestionsCallback, this.get('suggestionQueryDebounce'));
    },

    updateSuggestionsCallback: function updateSuggestionsCallback() {
      this.sendAction('onTagSuggestion', this.get('searchTerm'), this.get('selectedTags'));
    },

    moveSuggestionsDropdownSelection: function moveSuggestionsDropdownSelection(direction) {
      var suggestedTags = this.get('suggestedTags');
      var position = this.get('selection');
      var nextPosition = position + direction;
      if (nextPosition >= 0 && nextPosition < suggestedTags.length) {
        this.set('selection', nextPosition);
      }
    },

    // Events

    mouseDown: function mouseDown(e) {
      this.$('.ko-tags__input').focus();
    },

    actions: {
      keyDown: function keyDown(e) {
        switch (e.keyCode) {
          case _frontendCpLibKeycodes.up:
            {
              this.moveSuggestionsDropdownSelection(-1);
              return false;
            }

          case _frontendCpLibKeycodes.down:
            {
              this.set('showDropdown', true);
              this.moveSuggestionsDropdownSelection(1);
              return false;
            }

          case _frontendCpLibKeycodes.tab:
            {
              this.set('showDropdown', false);
              break;
            }

          case _frontendCpLibKeycodes.space:
            {
              var searchTerm = this.get('searchTerm');
              this.send('addTag', searchTerm);
              return false;
            }

          case _frontendCpLibKeycodes.enter:
            {
              var searchTerm = this.get('searchTerm');
              var selection = this.get('selection');
              if (selection > -1) {
                var tag = this.get('suggestedTags').objectAt(selection);
                this.send('addTag', tag);
              } else {
                this.send('addTag', searchTerm);
              }
              return false;
            }

          case _frontendCpLibKeycodes.backspace:
            {
              var input = this.$('.ko-tags__input').get(0);
              if (input.selectionStart === 0 && input.selectionEnd === 0) {
                var tag = this.get('lastTag');
                if (tag) {
                  this.sendAction('onTagRemoval', tag);
                  return false;
                }
              }
              break;
            }
        }
      },

      keyUp: function keyUp(e) {
        if (e.keyCode !== _frontendCpLibKeycodes.up && e.keyCode !== _frontendCpLibKeycodes.down && e.keyCode !== _frontendCpLibKeycodes.enter && e.keyCode !== _frontendCpLibKeycodes.tab) {
          this.updateSuggestions();
          this.set('showDropdown', true);
        }
      },

      highlight: function highlight(index) {
        this.set('selection', index);
      },

      removeTag: function removeTag(tag, e) {
        e.stopPropagation();
        this.sendAction('onTagRemoval', tag);
      },

      preventFocusLostOnSuggestionClick: function preventFocusLostOnSuggestionClick(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      addTag: function addTag(tag) {
        if (!tag) {
          return;
        }

        if (this.get('forceLowerCase')) {
          tag = tag.toLowerCase();
        }
        this.set('searchTerm', '');
        this.set('showDropdown', false);

        // We should always compare tags in lower case
        var lowerCasedTags = this.get('selectedTags').map(function (tag) {
          return tag.get('name').toLowerCase();
        });
        if (!lowerCasedTags.contains(tag.toLowerCase())) {
          this.sendAction('onTagAddition', tag);
          this.updateSuggestions();
        }
        this.resetSuggestedTagKeyboardPosition();
      }
    }
  });
});
define("frontend-cp/components/ko-tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-tags/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-tags__action i-cross");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'onclick');
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["removeTag", ["get", "tag", ["loc", [null, [6, 39], [6, 42]]]]], [], ["loc", [null, [6, 18], [6, 44]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "menuitem");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element5, 'title');
          morphs[2] = dom.createMorphAt(element5, 0, 0);
          morphs[3] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-tags__item ", ["subexpr", "if", [["get", "tag.isPusherEdited", ["loc", [null, [3, 32], [3, 50]]]], "ko-tags__item--pusher"], [], ["loc", [null, [3, 27], [3, 76]]]], " ", ["subexpr", "if", [["get", "tag.isNew", ["loc", [null, [3, 82], [3, 91]]]], "ko-tags__item--new"], [], ["loc", [null, [3, 77], [3, 114]]]], " ", ["subexpr", "if", [["get", "tag.isError", ["loc", [null, [3, 120], [3, 131]]]], "ko-tags__item--error"], [], ["loc", [null, [3, 115], [3, 156]]]], " ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [3, 162], [3, 172]]]], "ko-tags__item--disabled"], [], ["loc", [null, [3, 157], [3, 200]]]]]]], ["attribute", "title", ["concat", [["subexpr", "if", [["get", "nameField", ["loc", [null, [4, 24], [4, 33]]]], ["subexpr", "get", [["get", "tag", ["loc", [null, [4, 39], [4, 42]]]], ["get", "nameField", ["loc", [null, [4, 43], [4, 52]]]]], [], ["loc", [null, [4, 34], [4, 53]]]], ["get", "tag", ["loc", [null, [4, 54], [4, 57]]]]], [], ["loc", [null, [4, 19], [4, 59]]]]]]], ["inline", "if", [["get", "nameField", ["loc", [null, [4, 66], [4, 75]]]], ["subexpr", "get", [["get", "tag", ["loc", [null, [4, 81], [4, 84]]]], ["get", "nameField", ["loc", [null, [4, 85], [4, 94]]]]], [], ["loc", [null, [4, 76], [4, 95]]]], ["get", "tag", ["loc", [null, [4, 96], [4, 99]]]]], [], ["loc", [null, [4, 61], [4, 101]]]], ["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], ["loc", [null, [5, 8], [5, 24]]]]], [], 0, null, ["loc", [null, [5, 2], [7, 9]]]]],
        locals: ["tag"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "class", "ko-tags__input js-tag-input");
          dom.setAttribute(el1, "role", "textbox");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element2, 'placeholder');
          morphs[1] = dom.createAttrMorph(element2, 'value');
          morphs[2] = dom.createAttrMorph(element2, 'tabindex');
          morphs[3] = dom.createAttrMorph(element2, 'onkeydown');
          morphs[4] = dom.createAttrMorph(element2, 'onkeyup');
          morphs[5] = dom.createAttrMorph(element2, 'oninput');
          return morphs;
        },
        statements: [["attribute", "placeholder", ["get", "addTagText", ["loc", [null, [13, 18], [13, 28]]]]], ["attribute", "value", ["get", "searchTerm", ["loc", [null, [14, 12], [14, 22]]]]], ["attribute", "tabindex", ["get", "inputTabindex", ["loc", [null, [15, 15], [15, 28]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [17, 14], [17, 34]]]]], ["attribute", "onkeyup", ["subexpr", "action", ["keyUp"], [], ["loc", [null, [18, 12], [18, 30]]]]], ["attribute", "oninput", ["subexpr", "action", [["subexpr", "mut", [["get", "searchTerm", ["loc", [null, [19, 26], [19, 36]]]]], [], ["loc", [null, [19, 21], [19, 37]]]]], ["value", "target.value"], ["loc", [null, [19, 12], [19, 60]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 34,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-tags/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "tabindex", "-1");
            dom.setAttribute(el1, "role", "menuitem");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'onclick');
            morphs[2] = dom.createAttrMorph(element0, 'onmousemove');
            morphs[3] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["dropdown-menu__item ", ["subexpr", "if", [["subexpr", "eq", [["get", "index", ["loc", [null, [28, 44], [28, 49]]]], ["get", "selection", ["loc", [null, [28, 50], [28, 59]]]]], [], ["loc", [null, [28, 40], [28, 60]]]], "dropdown-menu__item--selected"], [], ["loc", [null, [28, 35], [28, 94]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["addTag", ["get", "tag", ["loc", [null, [29, 34], [29, 37]]]]], [], ["loc", [null, [29, 16], [29, 39]]]]], ["attribute", "onmousemove", ["subexpr", "action", ["highlight", ["get", "index", ["loc", [null, [30, 41], [30, 46]]]]], [], ["loc", [null, [30, 20], [30, 48]]]]], ["content", "tag", ["loc", [null, [33, 7], [33, 14]]]]],
          locals: ["tag", "index"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu list-bare");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onmousedown');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["preventFocusLostOnSuggestionClick"], [], ["loc", [null, [25, 18], [25, 64]]]]], ["block", "each", [["get", "suggestedTags", ["loc", [null, [26, 12], [26, 25]]]]], [], 0, null, ["loc", [null, [26, 4], [34, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "ko-tags");
        dom.setAttribute(el1, "role", "menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element6, 1, 1);
        morphs[1] = dom.createMorphAt(element6, 2, 2);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "statusTags", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 0], [9, 9]]]], ["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [10, 11], [10, 21]]]]], [], ["loc", [null, [10, 6], [10, 22]]]]], [], 1, null, ["loc", [null, [10, 0], [21, 7]]]], ["block", "if", [["subexpr", "and", [["get", "onTagSuggestion", ["loc", [null, [24, 11], [24, 26]]]], ["subexpr", "and", [["get", "showDropdown", ["loc", [null, [24, 32], [24, 44]]]], ["get", "suggestedTags.length", ["loc", [null, [24, 45], [24, 65]]]]], [], ["loc", [null, [24, 27], [24, 66]]]]], [], ["loc", [null, [24, 6], [24, 67]]]]], [], 2, null, ["loc", [null, [24, 0], [36, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-text-editor/component', ['exports', 'ember', 'npm:quill'], function (exports, _ember, _npmQuill) {

  // TODO HACK remove when https://github.com/quilljs/quill/issues/471 is resolved
  _npmQuill['default'].themes.snow.prototype.extendToolbar = function () {};

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    suggestedPeople: null,
    peopleCCd: null,
    suggestedPeopleTotal: null,
    suggestedPeopleLoading: null,
    isPeopleIconAvailable: true,
    isTimerIconAvailable: null,
    onPeopleSuggestion: null,
    onAttachFiles: null,
    channels: null,
    channel: null,
    onChannelChange: null,
    placeholder: null,
    isErrored: null,
    showControls: null,
    textAreaIsSmall: null,
    onPersonSelected: null,
    onPersonRemoved: null,
    onTextChanged: null, //optional, fired whenever text changes
    onEditorReady: null, //optional, fired when quill is inserted into DOM
    value: '',

    // State
    quill: null,
    cursor: 0,
    inlineFiles: null,
    totalSize: 0,
    maxFileSize: 5 * 1024 * 1024, // 5 MB
    maxTotalSize: 20 * 1024 * 1024, // 20 MB,
    header: { isHeader: true },
    infomessage: { isInfoMessage: true },
    isFocused: false,
    ccPopupProxy: null,
    tagDictionary: null,

    // HTML
    classNameBindings: ['isErrored'],

    onFocusStateChange: function onFocusStateChange() {},

    // Services
    intl: _ember['default'].inject.service(),

    // Lifecycle hooks
    initFiles: _ember['default'].on('init', function () {
      this.set('inlineFiles', new _ember['default'].A([]));
    }),

    setupFocusEvents: _ember['default'].on('didInsertElement', function () {
      var _this = this;

      this.$(document).on('click.' + this.get('elementId'), function (event) {
        var isPlaceholder = $(event.target).parents('.ko-case-content__editor-placeholder').length || $(event.target).hasClass('ko-case-content__editor-placeholder') || $(event.target).hasClass('ko-feed_item_menu') || $(event.target).parents('.ko-feed_item_menu').length;

        if (isPlaceholder || _ember['default'].$.contains(_this.$()[0], event.target)) {
          return;
        }

        _this.onFocusStateChange(_this.get('showHidePlaceholder'));
      });
    }),

    tearDownFocusEvents: _ember['default'].on('willDestroyElement', function () {
      this.$(document).off('click.' + this.get('elementId'));
    }),

    setupQuill: _ember['default'].on('didInsertElement', function () {
      var _this2 = this;

      var tagDictionary = {
        div: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '', '');
          }
        },
        span: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '', '');
          }
        },
        li: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem);
          }
        },
        ul: {
          markdownable: true,
          process: function process(elem) {
            return _this2.list(elem, 'unordered');
          }
        },
        ol: {
          markdownable: true,
          process: function process(elem) {
            return _this2.list(elem, 'ordered');
          }
        },
        blockquote: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n> ', '\n');
          }
        },
        pre: {
          markdownable: true,
          process: function process(elem) {
            return _this2.code(elem);
          }
        },
        code: {
          markdownable: true,
          process: function process(elem) {
            return _this2.code(elem);
          }
        },
        a: {
          markdownable: true,
          process: function process(elem) {
            return _this2.link(elem);
          }
        },
        hr: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n------', '\n');
          }
        },
        em: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' *', '* ');
          }
        },
        i: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' *', '* ');
          }
        },
        strong: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        b: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        u: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        p: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n', '\n');
          }
        },
        br: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '    \n', '');
          }
        },
        img: {
          markdownable: true,
          process: function process(elem) {
            return _this2.image(elem);
          }
        },
        _text: {
          markdownable: true,
          process: function process(elem) {
            return typeof elem === 'undefined' ? '' : _this2.getTextFromNode(elem);
          }
        }
      };

      this.set('tagDictionary', tagDictionary);

      this.quill = new _npmQuill['default']('.js-editor', {
        modules: {
          'multi-cursor': true,
          toolbar: { container: '.js-toolbar' },
          'link-tooltip': true
          // 'image-tooltip': true
        },
        theme: 'snow',
        styles: {
          '.ql-editor': {
            'font-family': "'Source Sans Pro', Sans-Serif"
          },
          '.ql-editor a': {
            'text-decoration': 'none'
          }
        }
      });

      //update text every time we type so we've got a proper ember variable to observe
      this.quill.on('text-change', function () {
        if (_this2.attrs.onTextChanged) {
          _this2.attrs.onTextChanged(_this2.quill.getText());
        }
      });

      _ember['default'].$('.ql-editor').on('blur', function () {
        if (_this2.quill.getSelection() === null) {
          _this2.set('cursor', 0);
        } else {
          _this2.set('cursor', _this2.quill.getSelection().start);
        }
        _this2.set('isFocused', false);
      });

      _ember['default'].$('.ql-editor').on('focus', function () {
        _this2.set('isFocused', true);
      });

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.quill.setContents([{ 'delete': 999999999 }]);
        _this2.quill.setText(_this2.get('value'));
      });
    }),

    cleanUpQuill: _ember['default'].on('willDestroyElement', function () {
      this.quill.destroy();
    }),

    // Observers
    repositionPopupProxy: _ember['default'].observer('peopleCCd.[]', 'suggestedPeopleLoading', function () {
      if (this.get('ccPopupProxy') && this.get('ccPopupProxy').reposition) {
        this.get('ccPopupProxy').reposition();
      }
    }),

    updateValue: _ember['default'].observer('value', function () {
      if (this.quill && this.quill.getText() !== this.get('value')) {
        // We have to manually clear contents to avoid text collision
        this.quill.setContents([{ 'delete': 999999999 }]);
        this.quill.setText(this.get('value'));
      }
    }),

    // CPs
    showHidePlaceholder: _ember['default'].computed('isFocused', 'value', function () {
      return this.get('isFocused') || this.get('value').trim();
    }),

    fileIsNotTooBig: function fileIsNotTooBig(file) {
      return file.size < this.maxFileSize && this.totalSize < this.maxFileSize;
    },

    fileIsImage: function fileIsImage(file) {
      return file.type.match(/^image\//i);
    },

    process: function process(elem, prefix, postfix) {
      return prefix + this.parseChildren(elem) + postfix;
    },

    link: function link(elem) {
      var result = ' [';
      result += this.parseChildren(elem);
      return result + '](' + elem.getAttribute('href') + ') ';
    },

    list: function list(elem, type) {
      var count = 1;
      var result = '\n';
      var children = elem.getElementsByTagName('li');

      for (var i = 0; i < children.length; ++i) {
        // add the list item
        if (type === 'ordered') {
          result += count + '. ';
          count++;
        } else {
          result += '- ';
        }
        // add the child elements
        result += this.parseChildren(children[i]) + '\n';
      }
      return result + '\n';
    },

    code: function code(elem) {
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (elem.childNodes.length === 1) {
        if (tagName === 'code') {
          return ' `' + this.getTextFromNode(elem, true, true) + '` ';
        }
      }
      return '\n' + ('    ' + this.getTextFromNode(elem, true, true)).replace(/\n/g, '\n    ') + '\n';
    },

    image: function image(elem) {
      var alt = elem.getAttribute('alt');
      var title = elem.getAttribute('title');
      var url = elem.getAttribute('src');
      if (alt === null) {
        alt = url;
      }
      var op = ' ![' + alt + '](' + url;
      if (title !== null) {
        op += ' "' + title + ' "';
      }
      return op + ') ';
    },

    hasClass: function hasClass(elem, klass) {
      return (' ' + elem.className + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + klass + ' ') > -1;
    },

    getTextFromNode: function getTextFromNode(elem, allowNewlines, preserveWhitespace) {
      var txt = elem.innerText || elem.textContent;
      txt = txt.trim();
      if (typeof allowNewlines === 'undefined' || !allowNewlines) {
        txt = txt.replace(/\n/g, ' ');
      }
      if (typeof preserveWhitespace === 'undefined' || !preserveWhitespace) {
        txt = txt.replace(/\s{2,}/g, ' ');
      }
      return txt;
    },

    parseChildren: function parseChildren(elem) {
      var result = '';
      var children = elem.childNodes;

      for (var i = 0; i < children.length; ++i) {
        var node = children[i];
        var nodeType = node.nodeType;
        var tagName = undefined;
        if (nodeType === 3) {
          tagName = '_text';
        } else {
          // No tag name, nothing to convert.
          if (!node.tagName) {
            continue;
          }
          tagName = node.tagName.toLowerCase();
        }
        if (tagName !== '_text') {
          if (!(tagName in this.tagDictionary)) {
            continue;
          }
          if (!this.tagDictionary[tagName].markdownable) {
            continue;
          }
          if (tagName === 'div') {
            if (this.hasClass(node, 'toc')) {
              result += '\n[TOC]\n';
              continue;
            }
          }
        }
        result += this.tagDictionary[tagName].process(node);
      }
      return result;
    },

    getMarkdown: function getMarkdown() {
      var text = this.quill.getText().trim();
      if (text === this.get('placeholder')) {
        return '';
      }

      var elem = this.$('.ql-editor').get(0);
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (!(tagName in this.tagDictionary)) {
        return '';
      }
      return this.tagDictionary[tagName].process(elem).trim();
    },

    actions: {
      insertImage: function insertImage() {
        this.quill.insertEmbed(this.cursor, 'image', 'http://quilljs.com/images/cloud.png');
      },
      imageDropped: function imageDropped(file) {
        this.quill.insertEmbed(this.cursor, 'image', file);
      },
      handleInlineFiles: function handleInlineFiles(files) {
        var _this3 = this;

        for (var i = 0, total = files.length; i < total; i++) {
          var f = files[i];

          if (this.fileIsNotTooBig(f) && this.fileIsImage(f)) {
            (function () {
              _this3.inlineFiles.pushObject(f);
              var reader = new FileReader();
              reader.onload = function () {
                _this3.quill.insertEmbed(_this3.cursor + 1, 'image', reader.result);
              };
              reader.readAsDataURL(f);
            })();
          } else {// eslint-disable-line no-empty
            // TODO: Ask design team where they want file is too big message to appear
          }
        }
      },

      handleAttachmentFiles: function handleAttachmentFiles(files) {
        this.sendAction('onAttachFiles', Array.slice(files));
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });
});
define("frontend-cp/components/ko-text-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 19
                },
                "end": {
                  "line": 51,
                  "column": 123
                }
              },
              "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-text-editor-header-group__item-text");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "peopleCCd.length", ["loc", [null, [51, 96], [51, 116]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 16
              },
              "end": {
                "line": 52,
                "column": 16
              }
            },
            "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createAttrMorph(element2, 'title');
            morphs[2] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["i-users ko-text-editor__right-group-item-icon ", ["subexpr", "if", [["get", "peopleCCd.length", ["loc", [null, [49, 78], [49, 94]]]], "ko-text-editor-header-group__users-item--active"], [], ["loc", [null, [49, 73], [49, 146]]]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.cc"], [], ["loc", [null, [50, 26], [50, 55]]]]], ["block", "if", [["get", "peopleCCd.length", ["loc", [null, [51, 25], [51, 41]]]]], [], 0, null, ["loc", [null, [51, 19], [51, 130]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 16
              },
              "end": {
                "line": 66,
                "column": 16
              }
            },
            "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-people-popover", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [54, 36], [54, 51]]]]], [], []], "inputPlaceholderText", ["subexpr", "t", ["cases.copy-someone-in.input-placeholder"], [], ["loc", [null, [55, 41], [55, 86]]]], "helpText", ["subexpr", "format-html-message", ["cases.copy-someone-in.help-text"], [], ["loc", [null, [56, 29], [56, 84]]]], "filterNotFoundText", ["subexpr", "format-html-message", ["cases.copy-someone-in.not-found"], [], ["loc", [null, [57, 39], [57, 94]]]], "emailErrorText", ["subexpr", "t", ["cases.copy-someone-in.email-error"], [], ["loc", [null, [58, 35], [58, 74]]]], "selectedPeople", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [59, 35], [59, 44]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [60, 41], [60, 61]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [61, 30], [61, 52]]]]], [], []], "onPeopleSuggestion", ["subexpr", "action", ["onPeopleSuggestion"], [], ["loc", [null, [62, 39], [62, 68]]]], "onPersonSelect", ["subexpr", "@mut", [["get", "attrs.onPersonSelected", ["loc", [null, [63, 35], [63, 57]]]]], [], []], "onPersonRemove", ["subexpr", "@mut", [["get", "attrs.onPersonRemoved", ["loc", [null, [64, 35], [64, 56]]]]], [], []]], ["loc", [null, [53, 18], [65, 20]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 12
            },
            "end": {
              "line": 68,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-text-editor__right-group-item");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "ko-context-modal", [], ["proxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [46, 26], [46, 38]]]]], [], []], "title", ["subexpr", "t", ["cases.copy-someone-in.title"], [], ["loc", [null, [47, 26], [47, 59]]]]], 0, 1, ["loc", [null, [45, 16], [66, 37]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 12
            },
            "end": {
              "line": 74,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-text-editor__right-group-item");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-text-editor__right-group-item-icon i-stopwatch");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'title');
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["generic.texteditor.billing"], [], ["loc", [null, [72, 85], [72, 119]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-text-editor__text-area text-area--clean js-editor ", ["subexpr", "if", [["get", "textAreaIsSmall", ["loc", [null, [86, 72], [86, 87]]]], "text-editor--small"], [], ["loc", [null, [86, 67], [86, 110]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-text-editor-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "js-toolbar ql-snow");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout__item u-1/2");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout__item u-1/2 t-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-bold");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-italic");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-bullet-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-number-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item ko-text-editor__image-upload");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "i-camera");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-link");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-quote");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "u-inline-block u-mh");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "ko-text-editor-header__spacer");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor__right-group");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ko-text-editor__right-group-item ko-text-editor__file-upload");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("label");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "ko-text-editor__right-group-item-icon i-clip");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" Create the editor container ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0, 1, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element5, [5]);
        var element9 = dom.childAt(element5, [7]);
        var element10 = dom.childAt(element5, [9]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element11, [1]);
        var element13 = dom.childAt(element5, [11]);
        var element14 = dom.childAt(element5, [13]);
        var element15 = dom.childAt(element4, [5, 1]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(fragment, [4]);
        var element20 = dom.childAt(element19, [1]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 2, 2);
        morphs[1] = dom.createAttrMorph(element5, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element7, 'title');
        morphs[4] = dom.createAttrMorph(element8, 'title');
        morphs[5] = dom.createAttrMorph(element9, 'title');
        morphs[6] = dom.createAttrMorph(element11, 'for');
        morphs[7] = dom.createAttrMorph(element12, 'title');
        morphs[8] = dom.createMorphAt(element10, 3, 3);
        morphs[9] = dom.createAttrMorph(element13, 'title');
        morphs[10] = dom.createAttrMorph(element14, 'title');
        morphs[11] = dom.createAttrMorph(element17, 'for');
        morphs[12] = dom.createAttrMorph(element18, 'title');
        morphs[13] = dom.createMorphAt(element16, 3, 3);
        morphs[14] = dom.createMorphAt(element15, 3, 3);
        morphs[15] = dom.createMorphAt(element15, 5, 5);
        morphs[16] = dom.createAttrMorph(element19, 'class');
        morphs[17] = dom.createAttrMorph(element20, 'class');
        morphs[18] = dom.createMorphAt(element20, 0, 0);
        morphs[19] = dom.createMorphAt(element19, 3, 3);
        morphs[20] = dom.createMorphAt(element19, 5, 5);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "header", ["loc", [null, [7, 18], [7, 24]]]]], [], ["loc", [null, [7, 10], [7, 26]]]], ["attribute", "class", ["concat", ["ko-text-editor-header-group ", ["subexpr", "unless", [["get", "showControls", ["loc", [null, [11, 57], [11, 69]]]], "u-hidden"], [], ["loc", [null, [11, 48], [11, 82]]]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.bold"], [], ["loc", [null, [12, 70], [12, 101]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.italic"], [], ["loc", [null, [13, 72], [13, 105]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.bullet"], [], ["loc", [null, [14, 77], [14, 110]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.list"], [], ["loc", [null, [15, 77], [15, 108]]]]], ["attribute", "for", ["get", "filesInline.elementId", ["loc", [null, [17, 25], [17, 46]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.image"], [], ["loc", [null, [18, 42], [18, 74]]]]], ["inline", "ko-file-field", [], ["viewName", "filesInline", "on-change", "handleInlineFiles"], ["loc", [null, [20, 12], [23, 14]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.link"], [], ["loc", [null, [25, 70], [25, 101]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.authorship"], [], ["loc", [null, [26, 71], [26, 108]]]]], ["attribute", "for", ["get", "attachFile.elementId", ["loc", [null, [34, 27], [34, 47]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.image"], [], ["loc", [null, [35, 80], [35, 112]]]]], ["inline", "ko-file-field", [], ["viewName", "attachFile", "on-change", "handleAttachmentFiles"], ["loc", [null, [37, 14], [40, 16]]]], ["block", "if", [["get", "isPeopleIconAvailable", ["loc", [null, [43, 18], [43, 39]]]]], [], 0, null, ["loc", [null, [43, 12], [68, 19]]]], ["block", "if", [["get", "isTimerIconAvailable", ["loc", [null, [70, 18], [70, 38]]]]], [], 1, null, ["loc", [null, [70, 12], [74, 19]]]], ["attribute", "class", ["concat", ["ko-text-editor__dropzone-and-editor-container ", ["subexpr", "if", [["get", "textAreaIsSmall", ["loc", [null, [83, 63], [83, 78]]]], "ko-text-editor__dropzone-and-editor-container--small"], [], ["loc", [null, [83, 58], [83, 135]]]]]]], ["attribute", "class", ["concat", ["ko-text-editor__placeholder ", ["subexpr", "if", [["get", "showHidePlaceholder", ["loc", [null, [84, 47], [84, 66]]]], "u-hidden"], [], ["loc", [null, [84, 42], [84, 79]]]]]]], ["content", "placeholder", ["loc", [null, [84, 81], [84, 96]]]], ["block", "ko-draggable-dropzone", [], ["dropped", "imageDropped", "click", ["subexpr", "@mut", [["get", "onFocusActivate", ["loc", [null, [85, 56], [85, 71]]]]], [], []]], 2, null, ["loc", [null, [85, 2], [87, 28]]]], ["inline", "yield", [["get", "infomessage", ["loc", [null, [88, 10], [88, 21]]]]], [], ["loc", [null, [88, 2], [88, 23]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-toast/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  var ALERT_TYPE_INFO = 'info';
  var ALERT_TYPE_WARNING = 'warning';
  var ALERT_TYPE_ERROR = 'error';
  var ALERT_TYPE_SUCCESS = 'success';

  var AUTODISMISS_TIMEOUT = _frontendCpConfigEnvironment['default'].APP.autodismissTimeout;

  exports['default'] = _ember['default'].Component.extend({
    type: null,
    dismissable: false,
    autodismiss: false,
    isClosing: false,

    animateIn: _ember['default'].on('willInsertElement', function () {
      var $componentElement = this.$();
      animate($componentElement, 'ko-toast--add');
    }),

    initAutoDismiss: _ember['default'].on('willInsertElement', function () {
      var _this = this;

      var autodismiss = this.get('autodismiss');
      if (!autodismiss) {
        return;
      }
      _ember['default'].run.later(function () {
        _this.animateOut();
      }, AUTODISMISS_TIMEOUT);
    }),

    iconClass: _ember['default'].computed('type', function () {
      switch (this.get('type')) {
        case ALERT_TYPE_INFO:
          return 'i-info';
        case ALERT_TYPE_WARNING:
          return 'i-caution-solid';
        case ALERT_TYPE_ERROR:
          return 'i-danger-solid';
        case ALERT_TYPE_SUCCESS:
          return 'i-tick';
        default:
          return null;
      }
    }),

    click: function click() {
      var autodismiss = this.get('autodismiss');
      if (autodismiss) {
        this.animateOut();
      }
    },

    animateOut: function animateOut() {
      var _this2 = this;

      var isClosing = this.get('isClosing');
      if (isClosing) {
        return;
      }
      this.set('isClosing', true);

      var $componentElement = this.$();
      var componentHeight = $componentElement.outerHeight();
      animate($componentElement, 'ko-toast--remove', {
        clamp: true
      }).then(function () {
        $componentElement.hide();
        _this2.sendAction('close');
      });
      $componentElement.css('margin-bottom', -componentHeight + 'px');
    },

    actions: {
      onCloseClicked: function onCloseClicked() {
        this.animateOut();
      }
    }
  });

  function animate($element, className) {
    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var _ref$clamp = _ref.clamp;
    var clamp = _ref$clamp === undefined ? false : _ref$clamp;

    return new _ember['default'].RSVP.Promise(function (resolve, reject) {
      $element.addClass(className);
      forceRender($element);
      $element.one('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
        if (!clamp) {
          $element.removeClass(className + ' ' + className + '-active');
        }
        resolve();
      });
      $element.addClass(className + '-active');
    });

    function forceRender($element) {
      $element.outerHeight();
      return $element;
    }
  }
});
define("frontend-cp/components/ko-toast/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-toast/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "ko-toast__close button-naked i-cross-bold");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["onCloseClicked"], [], ["loc", [null, [3, 82], [3, 109]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-toast/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-toast__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-toast__body");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-toast__container ko-toast__container--", ["get", "type", ["loc", [null, [1, 56], [1, 60]]]], ["subexpr", "if", [["get", "body", ["loc", [null, [1, 68], [1, 72]]]], " ko-toast__container--multiline"], [], ["loc", [null, [1, 63], [1, 108]]]], ["subexpr", "if", [["get", "dismissable", ["loc", [null, [1, 113], [1, 124]]]], " ko-toast__container--dismissable"], [], ["loc", [null, [1, 108], [1, 162]]]]]]], ["block", "if", [["get", "dismissable", ["loc", [null, [2, 8], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["attribute", "class", ["concat", ["ko-toast__icon ", ["get", "iconClass", ["loc", [null, [5, 33], [5, 42]]]]]]], ["content", "title", ["loc", [null, [6, 29], [6, 40]]]], ["content", "body", ["loc", [null, [7, 30], [7, 40]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-toggle/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    //attributes
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    //state
    activated: null,

    setDefaultState: _ember['default'].on('init', function () {
      if (!this.get('activated')) {
        this.set('activated', false);
      }
    }),

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.onToggle) {
          this.sendAction('onToggle', !this.get('activated'));
        } else {
          this.toggleProperty('activated');
        }
      }
    }

  });
});
define("frontend-cp/components/ko-toggle/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-toggle__label u-v-center ", ["subexpr", "if", [["get", "micro", ["loc", [null, [5, 49], [5, 54]]]], "ko-toggle__label--micro"], [], ["loc", [null, [5, 44], [5, 82]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [5, 91], [5, 100]]]], "-toggle"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [5, 119], [5, 143]]]]], ["content", "label", ["loc", [null, [5, 144], [5, 153]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "radio");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element1, 'tabindex');
        morphs[3] = dom.createAttrMorph(element1, 'aria-live');
        morphs[4] = dom.createAttrMorph(element1, 'id');
        morphs[5] = dom.createAttrMorph(element1, 'onclick');
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-toggle__container ", ["subexpr", "if", [["get", "micro", ["loc", [null, [1, 38], [1, 43]]]], "ko-toggle__container--micro"], [], ["loc", [null, [1, 33], [1, 75]]]], " ", ["subexpr", "if", [["get", "activated", ["loc", [null, [1, 81], [1, 90]]]], "ko-toggle__container--activated"], [], ["loc", [null, [1, 76], [1, 126]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "activated", ["loc", [null, [1, 157], [1, 166]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 182], [1, 190]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 207], [1, 215]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 225], [1, 234]]]], "-toggle"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [1, 253], [1, 277]]]]], ["attribute", "class", ["concat", ["ko-toggle__toggle u-v-center ", ["subexpr", "if", [["get", "micro", ["loc", [null, [2, 48], [2, 53]]]], "ko-toggle__toggle--micro"], [], ["loc", [null, [2, 43], [2, 82]]]], " ", ["subexpr", "if", [["get", "activated", ["loc", [null, [2, 88], [2, 97]]]], "ko-toggle__toggle--activated"], [], ["loc", [null, [2, 83], [2, 130]]]]]]], ["block", "if", [["get", "label", ["loc", [null, [4, 6], [4, 11]]]]], [], 0, null, ["loc", [null, [4, 0], [6, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-universal-search/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    searchResults: null,
    searchQuery: null,
    onLoadSearchRoute: null,
    onSearchChanged: null,

    // State
    highlightedResult: null,
    isLatestSearchPending: false,
    isMouseHighlight: true,

    // Services
    universalSearchService: _ember['default'].inject.service('suggestion/universal'),
    store: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    didChangeSearchingStatus: _ember['default'].on('init', _ember['default'].observer('isSearching', function () {
      this.attrs.onSearchChanged(this.get('isSearching'));
    })),

    onSearchQueryChanged: _ember['default'].observer('searchQuery', function () {
      this.set('isLatestSearchPending', true);
      this.set('highlightedResult', null);
      _ember['default'].run.debounce(this, 'fireSearchAction', 250);
    }),

    isSearching: _ember['default'].computed.bool('searchQuery'),
    isSearchLoading: _ember['default'].computed.and('searchQuery', 'isLatestSearchPending'),

    flattenedResults: _ember['default'].computed('searchResults', function () {
      return this.get('searchResults').reduce(function (results, searchResultGroup) {
        searchResultGroup.results.forEach(function (result) {
          results.pushObject(result);
        });

        return results;
      }, []);
    }),

    adjustScroll: function adjustScroll(highlightIndex) {
      var down = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var rowHeight = 42;
      var highlight = rowHeight * highlightIndex;
      var element = _ember['default'].$('.universal-search__results');

      if (down) {
        var offsetHeight = 9 * rowHeight;
        if (highlight - element.scrollTop() > offsetHeight) {
          element.scrollTop(highlight - offsetHeight);
        }
      } else {
        if (highlight < element.scrollTop()) {
          element.scrollTop(highlight);
        }
      }
    },

    fireSearchAction: function fireSearchAction() {
      var _this = this;

      var query = this.get('searchQuery');

      if (!query) {
        this.set('searchResults', []);
        this.set('isLatestSearchPending', false);
        return;
      }

      var searchService = this.get('universalSearchService');
      var promise = searchService.search(query);

      this.set('isLatestSearchPending', true);
      promise.then(function (response) {
        var results = response.data;
        if (searchService.isPromiseDiscarded(query)) {
          return;
        }

        _this.set('isLatestSearchPending', false);
        _this.set('searchResults', results);
      }, function () {
        _this.set('isLatestSearchPending', false);
      });
    },

    actions: {
      clearSearch: function clearSearch() {
        this.set('searchQuery', '');
        this.set('searchResults', []);
        this.set('highlightedResult', null);
      },

      highlightResult: function highlightResult(highlightedResult) {
        if (this.get('isMouseHighlight')) {
          this.set('highlightedResult', highlightedResult);
        }
        this.set('isMouseHighlight', true);
      },

      selectHighlightedResult: function selectHighlightedResult() {
        var result = this.get('highlightedResult');

        if (result) {
          this.get('metrics').trackEvent({
            event: 'Sitewide Search Record Clicked',
            category: 'Sitewide Search',
            action: 'click',
            label: result.resource
          });
          this.send('clearSearch');

          switch (result.resource) {
            case 'user':
              this.attrs.onLoadSearchRoute('/agent/users/', result.id);
              break;
            case 'case':
              this.attrs.onLoadSearchRoute('/agent/cases/', result.id);
              break;
            case 'organization':
              this.attrs.onLoadSearchRoute('/agent/organisations/', result.id);
              break;
            default:
              break;
          }
        }
      },

      highlightNextResult: function highlightNextResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');

        this.set('isMouseHighlight', false);

        if (!currentlyHighlightedResult) {
          this.set('highlightedResult', results.get('firstObject'));
          return;
        }

        var currentIndex = results.indexOf(currentlyHighlightedResult);
        if (currentIndex < results.length - 1) {
          this.set('highlightedResult', results.objectAt(currentIndex + 1));
          this.adjustScroll(currentIndex + 1, true);
        }
      },

      highlightPreviousResult: function highlightPreviousResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');
        var currentIndex = results.indexOf(currentlyHighlightedResult);

        this.set('isMouseHighlight', false);

        // back to the start if we try to go below the list
        if (currentIndex > 0) {
          this.set('highlightedResult', results.objectAt(currentIndex - 1));
          this.adjustScroll(currentIndex - 1, false);
        } else {
          this.set('highlightedResult', null);
        }
      }
    }
  });
});
define('frontend-cp/components/ko-universal-search/entry/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].TextField.extend({
    onSelectHighlightedResult: null,
    onHighlightNextResult: null,
    onHighlightPreviousResult: null,
    onStopSearch: null,

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case _frontendCpLibKeycodes.down:
          {
            this.attrs.onHighlightNextResult();
            break;
          }
        case _frontendCpLibKeycodes.up:
          {
            this.attrs.onHighlightPreviousResult();
            break;
          }
        case _frontendCpLibKeycodes.enter:
          {
            this.attrs.onSelectHighlightedResult();
            return false;
          }
        case _frontendCpLibKeycodes.escape:
          {
            this.attrs.onStopSearch();
          }
      }
    }
  });
});
define('frontend-cp/components/ko-universal-search/result/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Parmas:
    result: null,
    isHighlighted: false,
    onSelectHighlightedResult: null,
    onHighlight: null,
    onHighlightPreviousResult: null,
    onStopSearch: null,

    tagName: 'li',
    classNameBindings: ['isHighlighted:is-active'],

    iconClass: _ember['default'].computed('result', function () {
      return 'i-' + this.get('result.resource');
    }),

    highlight: _ember['default'].on('mouseEnter', function () {
      this.attrs.onHighlight(this.get('result'));
    }),

    click: function click() {
      this.attrs.onSelectHighlightedResult();
      this.attrs.onStopSearch();
    }

  });
});
define("frontend-cp/components/ko-universal-search/result/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/result/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search_result__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search_result__action");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["universal-search_result__icon ", ["get", "iconClass", ["loc", [null, [1, 42], [1, 51]]]]]]], ["inline", "escape-html", [["get", "result.title", ["loc", [null, [3, 16], [3, 28]]]]], [], ["loc", [null, [3, 2], [3, 30]]]], ["inline", "t", ["generic.search_result_select_instruction"], [], ["loc", [null, [5, 45], [5, 93]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-universal-search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-universal-search__overlay");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [3, 12], [3, 36]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-universal-search__loader"], ["loc", [null, [9, 6], [9, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-search i-size-18 i-color-grey--dark u-inherit-lh");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "universal-search__action");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "i-cross");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [24, 50], [24, 74]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-universal-search/result", [], ["result", ["subexpr", "@mut", [["get", "result", ["loc", [null, [35, 15], [35, 21]]]]], [], []], "isHighlighted", ["subexpr", "eq", [["get", "result", ["loc", [null, [36, 26], [36, 32]]]], ["get", "highlightedResult", ["loc", [null, [36, 33], [36, 50]]]]], [], ["loc", [null, [36, 22], [36, 51]]]], "onHighlight", ["subexpr", "action", ["highlightResult"], [], ["loc", [null, [37, 20], [37, 46]]]], "onSelectHighlightedResult", ["subexpr", "action", ["selectHighlightedResult"], [], ["loc", [null, [38, 34], [38, 68]]]], "onStopSearch", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [39, 21], [39, 43]]]]], ["loc", [null, [34, 6], [40, 8]]]]],
            locals: ["result"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 44,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-bare");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "resultsGroup.results", ["loc", [null, [33, 14], [33, 34]]]]], [], 0, null, ["loc", [null, [33, 6], [41, 15]]]]],
          locals: ["resultsGroup"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 8
                  },
                  "end": {
                    "line": 49,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["search.searching"], [], ["loc", [null, [48, 10], [48, 34]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 49,
                    "column": 8
                  },
                  "end": {
                    "line": 51,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["search.no-results"], [], ["loc", [null, [50, 10], [50, 35]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "u-p");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "isLatestSearchPending", ["loc", [null, [47, 14], [47, 35]]]]], [], 0, 1, ["loc", [null, [47, 8], [51, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 4
              },
              "end": {
                "line": 54,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSearching", ["loc", [null, [45, 10], [45, 21]]]]], [], 0, null, ["loc", [null, [45, 4], [53, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 76,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "universal-search__content");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "universal-search__results");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "searchResults", ["loc", [null, [31, 12], [31, 25]]]]], [], 0, 1, ["loc", [null, [31, 4], [54, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search__input");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "universal-search__icon");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "searchQuery", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, null, ["loc", [null, [1, 0], [4, 7]]]], ["block", "if", [["get", "isSearchLoading", ["loc", [null, [8, 10], [8, 25]]]]], [], 1, 2, ["loc", [null, [8, 4], [12, 11]]]], ["inline", "ko-universal-search/entry", [], ["type", "text", "onSelectHighlightedResult", ["subexpr", "action", ["selectHighlightedResult"], [], ["loc", [null, [16, 30], [16, 64]]]], "onHighlightNextResult", ["subexpr", "action", ["highlightNextResult"], [], ["loc", [null, [17, 26], [17, 56]]]], "onHighlightPreviousResult", ["subexpr", "action", ["highlightPreviousResult"], [], ["loc", [null, [18, 30], [18, 64]]]], "onStopSearch", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [19, 17], [19, 39]]]], "value", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [20, 10], [20, 21]]]]], [], []], "placeholder", ["subexpr", "t", ["search.placeholder"], [], ["loc", [null, [21, 16], [21, 40]]]]], ["loc", [null, [15, 2], [21, 42]]]], ["block", "if", [["get", "searchQuery", ["loc", [null, [23, 8], [23, 19]]]]], [], 3, null, ["loc", [null, [23, 2], [25, 9]]]], ["block", "if", [["get", "searchQuery", ["loc", [null, [28, 6], [28, 17]]]]], [], 4, null, ["loc", [null, [28, 0], [76, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/components/ko-user-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    permissions: null,
    userRoleType: null,
    userModel: null,

    permissionService: _ember['default'].inject.service('permissions'),
    sessionService: _ember['default'].inject.service('session'),

    editSignature: 'editSignature',
    changeUserPassword: 'changeUserPassword',
    deleteUser: 'deleteUser',

    classNameBindings: ['menuActive', 'noItems:u-hidden'],
    menuActive: false,

    noItems: _ember['default'].computed('hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission', function () {
      var _this = this;

      var permissionItems = ['hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission'];
      return permissionItems.filter(function (item) {
        return _this.get(item);
      }).length === 0;
    }),

    hasChangeSignaturePermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.signature.edit', this.get('userModel'));
    }),

    hasChangePasswordEmailPermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.password.change', this.get('userModel'));
    }),

    hasDeletePermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.delete', this.get('userModel'));
    }),

    actions: {
      editSignature: function editSignature() {
        this.sendAction('editSignature');
      },
      deleteUser: function deleteUser() {
        this.sendAction('deleteUser');
      },
      changeUserPassword: function changeUserPassword() {
        this.sendAction('changeUserPassword');
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-user-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "button button--default button--dropdown");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'onclick');
                morphs[1] = dom.createMorphAt(element2, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editSignature"], [], ["loc", [null, [20, 51], [20, 77]]]]], ["inline", "t", ["users.editsignature"], [], ["loc", [null, [21, 10], [21, 37]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["changeUserPassword"], [], ["loc", [null, [26, 51], [26, 82]]]]], ["inline", "t", ["users.changepassword"], [], ["loc", [null, [27, 10], [27, 38]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["deleteUser"], [], ["loc", [null, [32, 51], [32, 74]]]]], ["inline", "t", ["users.deleteuser"], [], ["loc", [null, [33, 10], [33, 34]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(5);
              morphs[0] = dom.createAttrMorph(element3, 'onclick');
              morphs[1] = dom.createMorphAt(element3, 1, 1);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onCreateNewCase", ["loc", [null, [15, 58], [15, 73]]]]], [], ["loc", [null, [15, 49], [15, 75]]]]], ["inline", "t", ["users.create_new_case"], [], ["loc", [null, [16, 8], [16, 37]]]], ["block", "if", [["get", "hasChangeSignaturePermission", ["loc", [null, [19, 12], [19, 40]]]]], [], 0, null, ["loc", [null, [19, 6], [23, 13]]]], ["block", "if", [["get", "hasChangePasswordEmailPermission", ["loc", [null, [25, 12], [25, 44]]]]], [], 1, null, ["loc", [null, [25, 6], [29, 13]]]], ["block", "if", [["get", "hasDeletePermission", ["loc", [null, [31, 12], [31, 31]]]]], [], 2, null, ["loc", [null, [31, 6], [35, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [14, 66], [14, 78]]]]], [], []]], 0, null, ["loc", [null, [14, 4], [36, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [8, 12], [8, 16]]]], "button"], [], ["loc", [null, [8, 8], [8, 26]]]]], [], 0, null, ["loc", [null, [8, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [13, 12], [13, 16]]]], "content"], [], ["loc", [null, [13, 8], [13, 27]]]]], [], 1, null, ["loc", [null, [13, 2], [37, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["alignRight", true, "onFocusOut", "hideMenu", "onFocusIn", "showMenu", "hideOnChildFocus", true, "hideOnClick", true], 0, null, ["loc", [null, [1, 0], [38, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-user-content/component', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-user-content'],

    // Params:
    isFollowingSaving: false,
    isStateSaving: false,

    store: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service('store-cache'),
    sessionService: _ember['default'].inject.service('session'),
    permissionService: _ember['default'].inject.service('permissions'),
    notificationService: _ember['default'].inject.service('notification'),
    errorHandler: _ember['default'].inject.service('error-handler'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    tagService: _ember['default'].inject.service('tags'),
    metrics: _ember['default'].inject.service(),

    intl: _ember['default'].inject.service(),

    errors: [],
    errorMap: null,

    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    organizationSuggestionService: _ember['default'].inject.service('suggestion/organization'),

    teamRecords: [],
    suggestedTeams: [],
    suggestedTags: [],
    editedCustomFields: null,
    editingSignature: null,
    isSaving: false,
    isUserEdited: false,

    signatureModal: false,

    onCreateNewCase: null,

    isEditInProgress: false,

    replyContent: '',
    notes: [],
    totalNotes: 0,

    init: function init() {
      this._super.apply(this, arguments);
      this.set('errorMap', _ember['default'].Object.create());
    },

    initCustomFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('editedCustomFields', new _ember['default'].Object());
      this.get('model.tags').then(function (newTags) {
        _this.set('cachedTags', newTags.map(function (tag) {
          return tag.get('id');
        }));
      });
    }),

    roles: [],
    initRoles: _ember['default'].on('init', function () {
      var _this2 = this;

      this.get('store').findAll('role').then(function (roles) {
        _this2.set('roles', roles);
      });
    }),

    initTeams: _ember['default'].on('init', function () {
      var _this3 = this;

      this.set('teams', []);
      this.get('storeCache').query('team', { limit: 10000 }).then(function (teams) {
        _this3.set('teams', teams.map(function (team) {
          return team.get('title');
        }));
        _this3.set('teamRecords', teams);
      });
    }),

    organizations: [],
    initOrganizations: _ember['default'].on('init', function () {
      this.set('organizations', this.get('model.organization.id') ? [this.get('model.organization')] : []);
    }),

    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);

      if (!oldAttrs || newAttrs.model.value !== oldAttrs.model.value) {
        this.set('notes', []);
        this.set('totalNotes', 0);

        this.requestUserNotes();
      }
    },

    isContentEdited: _ember['default'].computed('replyContent', function () {
      return this.get('replyContent').trim() !== '';
    }),

    isEdited: _ember['default'].computed('isContentEdited', 'isUserEdited', function () {
      return this.get('isContentEdited') || this.get('isUserEdited');
    }),

    submitDisabled: _ember['default'].computed('isSaving', 'isEdited', function () {
      return this.get('isSaving') || !this.get('isEdited');
    }),

    agentAccessLevels: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.inherit'),
        value: 'INHERIT-FROM-ROLE'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.self'),
        value: 'SELF'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.teams'),
        value: 'TEAMS'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.all'),
        value: 'ALL'
      })];
    }),

    organizationAccessLevels: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.organizationaccess.organization'),
        value: 'ORGANIZATION'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.organizationaccess.requested'),
        value: 'REQUESTED'
      })];
    }),

    recentFeedback: [],
    initRecentFeedback: _ember['default'].on('init', function () {
      var _this4 = this;

      this.get('store').query('rating', { user_id: this.get('model.id') }).then(function (ratings) {
        return _this4.set('recentFeedback', ratings);
      });
    }),

    userDates: _ember['default'].computed('model.createdAt', 'model.updatedAt', 'model.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('model.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('model.updatedAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.lastseen'),
        value: this.get('model.visitedAt') }];
    }),

    customFields: _ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    requestUserNotes: function requestUserNotes() {
      var _this5 = this;

      var store = this.get('store');
      var user = this.get('model');

      // when we request user note, we convert them to post model
      // that can be used by ko-feed/item component
      store.query('user-note', { parent: user, limit: 20 }).then(function (notes) {
        if (_this5.get('isDestroyed')) {
          return;
        }

        _this5.set('totalNotes', notes.get('meta.total'));

        var notesList = store.peekAll('post').filter(function (post) {
          return post.get('original.parent.id') === user.get('id');
        });

        _this5.set('notes', notesList);
      });
    },

    convertErrorsToMap: function convertErrorsToMap(errors) {
      return (errors || []).filter(function (error) {
        return error.parameter;
      }).reduce(function (errorMap, error) {
        errorMap.set(error.parameter, true);
        return errorMap;
      }, _ember['default'].Object.create({}));
    },

    updateDirtyFieldHash: function updateDirtyFieldHash() {
      var _this6 = this;

      var editedCustomFields = this.get('editedCustomFields');
      this.get('model.customFields').forEach(function (customField) {
        var id = customField.get('field.id');
        var changed = Boolean(customField.changedAttributes().value);
        if (id) {
          editedCustomFields.set(id, changed);
        }
      });

      var fields = ['isTeamsFieldEdited', 'isTagsFieldEdited', 'isTimezoneEdited', 'isOrganisationEdited', 'isRoleEdited', 'isAccessLevelEdited'];
      var systemFieldEdited = fields.any(function (field) {
        return _this6.get(field);
      });
      var sigEdited = this.get('model').hasDirtyAttribute('signature');
      var customEdited = Object.values(editedCustomFields).reduce(function (accum, current) {
        return accum || current;
      }, false);

      this.set('isUserEdited', systemFieldEdited || sigEdited || customEdited);
    },

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('errorMap', _ember['default'].Object.create());
      this.set('isRoleEdited', false);
      this.set('isOrganisationEdited', false);
      this.set('isTimezoneEdited', false);
      this.set('isTeamsFieldEdited', false);
      this.set('isAccessLevelEdited', false);
      this.set('isFollowingSaving', false);
      this.set('isStateSaving', false);
      this.set('isSaving', false);
      this.set('replyContent', '');
      this.set('isEditInProgress', false);

      this.updateDirtyFieldHash();
    },

    refreshTags: function refreshTags() {
      var _this7 = this;

      this.get('tagService').refreshTagsForUser(this.get('model')).then(function (tags) {
        _this7.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    },

    isTagsFieldEdited: _ember['default'].computed('cachedTags.[]', 'model.tags.@each.id', function () {
      var cachedTagNames = this.get('cachedTags');
      var tags = this.get('model.tags');
      return this.get('tagService').areTagNamesMatchingCache(cachedTagNames, tags);
    }),

    canModifyUserState: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.disable', this.get('model'));
    }),

    canFollowUser: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.follow', this.get('model'));
    }),

    canChangeAgentAccessPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_agent_access_permission', this.get('model'));
    }),

    canChangeOrganizationAccessPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_organization_access_permission', this.get('model'));
    }),

    canChangeUserTeamPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_team_permission', this.get('model'));
    }),

    canViewUserTeamPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.view_team_permission', this.get('model'));
    }),

    canChangeRolePermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_role_permission', this.get('model'));
    }),

    isEnabled: _ember['default'].computed.bool('model.isEnabled'),

    customFieldValueHash: _ember['default'].computed('model.customFields.@each.value', function () {
      var values = _ember['default'].Object.create();
      this.get('model.customFields').forEach(function (field) {
        values.set(field.get('field.id'), field.get('value'));
      });
      return values;
    }),

    suggestTagsCallback: function suggestTagsCallback() {
      var _this8 = this;

      var searchTerm = this.get('tagSearchTerm');
      var selectedTags = this.get('model.tags');
      var suggestionService = this.get('tagSuggestionService');
      suggestionService.suggest(searchTerm).then(function (data) {
        if (suggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        data = suggestionService.exclude(data, selectedTags.mapBy('name'));

        _this8.set('suggestedTags', data.map(function (tag) {
          return tag.get('name');
        }));
        suggestionService.flushQueue();
      });
    },

    processOrganizationPayload: function processOrganizationPayload(payload) {
      var organizationId = get(payload, 'id');
      var organization = null;

      if (organizationId) {
        var data = JSON.parse(JSON.stringify(payload));
        Reflect.deleteProperty(data, 'websites');
        Reflect.deleteProperty(data, 'addresses');
        this.get('store').pushPayload({ data: data });
        organization = this.get('store').peekRecord('organization', organizationId);
      }

      var found = this.get('organizations').filter(function (record) {
        return parseInt(get(record, 'id')) === parseInt(organizationId);
      });

      if (!found.length && organization) {
        this.get('organizations').pushObject(organization);
      }

      return organization;
    },

    actions: {
      textEditorFocusStateChange: function textEditorFocusStateChange(state) {
        if (!state) {
          this.set('isEditInProgress', false);
        }
      },

      beginReply: function beginReply() {
        this.set('isEditInProgress', true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });
      },

      searchOrganization: function searchOrganization(query) {
        var _this9 = this;

        if (!query) {
          return this.get('organizations');
        }

        var searchService = this.get('organizationSuggestionService');

        return searchService.suggest(query).then(function (response) {
          if (searchService.isPromiseDiscarded(query)) {
            return _this9.get('organizations');
          }

          searchService.flushQueue();

          return response.data;
        });
      },

      toggleUserState: function toggleUserState() {
        var _this10 = this;

        this.set('isStateSaving', true);
        this.toggleProperty('model.isEnabled');
        this.get('model').save().then(function () {
          _this10.get('metrics').trackEvent({
            event: 'User State Changed',
            category: 'User',
            action: _this10.get('model.isEnabled') ? 'enabled' : 'disabled',
            label: 'state button'
          });

          return _this10.resetForm();
        });
      },

      editSignature: function editSignature() {
        this.set('signatureModal', true);
        this.set('editingSignature', this.get('model.signature'));
      },

      closeSignatureModal: function closeSignatureModal() {
        this.set('signatureModal', false);
      },

      deleteUser: function deleteUser() {
        var deleteMsg = this.get('intl').findTranslationByKey('users.confirmdelete');

        if (confirm(deleteMsg)) {
          this.get('model').deleteRecord();
          this.get('model').save();
        }
      },

      updateSignature: function updateSignature() {
        this.set('model.signature', this.get('editingSignature'));
        this.set('signatureModal', false);
        this.updateDirtyFieldHash();

        this.get('metrics').trackEvent({
          event: 'User Signature Updated',
          category: 'User',
          action: 'submit',
          label: 'signature modal'
        });
      },

      roleSelect: function roleSelect(role) {
        this.set('model.role', role);
        this.set('isRoleEdited', this.get('model').hasDirtyBelongsToRelationship('role'));
        this.set('errorMap.role_id', null);
        this.updateDirtyFieldHash();
      },

      organizationSelect: function organizationSelect(org) {
        var _this11 = this;

        if (org) {
          this.set('model.organization', this.processOrganizationPayload(org));
        } else {
          this.set('model.organization', null);
        }

        this.set('errorMap.organization_id', null);
        this.get('model').hasDirtyBelongsToRelationship('organization').then(function (relationshipIsDirty) {
          _this11.set('isOrganisationEdited', relationshipIsDirty);
          _this11.updateDirtyFieldHash();
        });
      },

      agentLevelSelect: function agentLevelSelect(level) {
        this.set('model.agentCaseAccess', level);
        this.set('isAccessLevelEdited', this.get('model').hasDirtyBelongsToRelationship('agentCaseAccess'));
        this.updateDirtyFieldHash();
        this.set('errorMap.agent_case_access', null);
      },

      organizationLevelSelect: function organizationLevelSelect(level) {
        this.set('model.organizationCaseAccess', level);
        this.set('isAccessLevelEdited', this.get('model').hasDirtyBelongsToRelationship('organizationCaseAccess'));
        this.updateDirtyFieldHash();
        this.set('errorMap.organization_case_access', null);
      },

      timezoneSelect: function timezoneSelect(timezone) {
        this.set('model.timeZone', timezone);
        this.set('isTimezoneEdited', this.get('model').hasDirtyAttribute('timeZone'));
        this.updateDirtyFieldHash();
        this.set('errorMap.time_zone', null);
      },

      addTeam: function addTeam(teamName) {
        var team = this.get('teamRecords').findBy('title', teamName);
        if (team) {
          team.set('isNew', true);
          this.get('model.teams').pushObject(team);
          this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
          this.updateDirtyFieldHash();
        }
        this.set('errorMap.team_ids', null);
      },

      removeTeam: function removeTeam(team) {
        this.get('model.teams').removeObject(team);
        this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
        this.updateDirtyFieldHash();
        this.set('errorMap.team_ids', null);
      },

      suggestTeams: function suggestTeams(searchTerm, selectedTeams) {
        var _this12 = this;

        if (!searchTerm) {
          this.set('suggestedTeams', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggestFilter(this.get('teamRecords'), searchTerm, 'title').then(function (data) {
          var suggestedTeams = suggestionService.exclude(data, selectedTeams, 'title');
          _this12.set('suggestedTeams', suggestedTeams.map(function (tag) {
            return tag.get('title');
          }));
        });
      },

      addTag: function addTag(tagName) {
        if (!this.get('model.tags').findBy('name', tagName.trim())) {
          var newTag = this.get('tagService').getTagByName(tagName);
          newTag.set('isNew', true);
          this.get('model.tags').pushObject(newTag);
          this.updateDirtyFieldHash();
        }
      },

      removeTag: function removeTag(tag) {
        this.get('model.tags').removeObject(tag);
        this.updateDirtyFieldHash();
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        this.set('tagSearchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.suggestTagsCallback, 300);
      },

      changeUserPassword: function changeUserPassword() {
        var _this13 = this;

        var PAYLOAD = { email: this.get('model.primaryEmailAddress') };
        var adapter = this.container.lookup('adapter:application');

        _ember['default'].$.ajax(adapter.namespace + '/base/password/reset', {
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(PAYLOAD),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function () {
          _this13.get('notificationService').add({
            type: 'success',
            title: _this13.get('intl').findTranslationByKey('users.password_reset_email.success'),
            autodismiss: true
          });

          _this13.get('metrics').trackEvent({
            event: 'User Password Reset',
            category: 'User',
            action: 'click',
            label: 'reset button'
          });
        }, function (response) {
          _this13.get('errorHandler').process(response.responseJSON);

          _this13.get('metrics').trackEvent({
            event: 'User Password Reset Failed',
            category: 'User',
            action: 'click',
            label: 'reset button'
          });
        });
      },

      submit: function submit() {
        var _this14 = this;

        this.set('isSaving', true);

        this.get('model').saveWithNote(this.get('replyContent')).then(function () {
          _this14.get('notificationService').add({
            type: 'success',
            title: _this14.get('intl').findTranslationByKey('users.user.updated'),
            autodismiss: true
          });

          _this14.resetForm();
          _this14.refreshTags();
          _this14.requestUserNotes();

          _this14.get('metrics').trackEvent({
            event: 'User Updated',
            category: 'User',
            action: 'click',
            label: 'submit button'
          });
        }, function (e) {
          e.errors || (e.errors = {});
          _this14.set('errors', e.errors);
          _this14.set('errorMap', _this14.convertErrorsToMap(e.errors));
          _this14.set('isSaving', false);
          _this14.updateDirtyFieldHash();

          _this14.get('metrics').trackEvent({
            event: 'User Update Failed',
            category: 'User',
            action: 'click',
            label: 'submit button'
          });
        });
      },

      fieldUpdated: function fieldUpdated(field, value) {
        this.get('errorMap').set(field.get('key'), false);
        var valueObject = this.get('model.customFields').find(function (value) {
          return value.get('field.id') === field.get('id');
        });

        if (!valueObject) {
          valueObject = this.get('model.customFields').createFragment({
            fieldFragment: this.get('store').createFragment('relationship-fragment', {
              relationshipId: field.id,
              relationshipType: field.type
            })
          });
        }
        valueObject.set('value', value);
        this.updateDirtyFieldHash();
      },

      updatePostContent: function updatePostContent(newContent) {
        this.set('replyContent', newContent);
      }
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/components/ko-user-content/field/timezone-select/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    isEdited: false,
    isErrored: false,
    isPusherEdited: false,
    onChangeTimezone: null,
    timezone: null,

    tagName: '',

    timezones: [{ id: 'Pacific/Niue', text: '(GMT-11:00) Niue' }, { id: 'Pacific/Pago_Pago', text: '(GMT-11:00) Pago Pago' }, { id: 'Pacific/Honolulu', text: '(GMT-10:00) Hawaii Time' }, { id: 'Pacific/Rarotonga', text: '(GMT-10:00) Rarotonga' }, { id: 'Pacific/Tahiti', text: '(GMT-10:00) Tahiti' }, { id: 'Pacific/Marquesas', text: '(GMT-09:30) Marquesas' }, { id: 'America/Anchorage', text: '(GMT-09:00) Alaska Time' }, { id: 'Pacific/Gambier', text: '(GMT-09:00) Gambier' }, { id: 'America/Los_Angeles', text: '(GMT-08:00) Pacific Time' }, { id: 'America/Tijuana', text: '(GMT-08:00) Pacific Time - Tijuana' }, { id: 'America/Vancouver', text: '(GMT-08:00) Pacific Time - Vancouver' }, { id: 'America/Whitehorse', text: '(GMT-08:00) Pacific Time - Whitehorse' }, { id: 'Pacific/Pitcairn', text: '(GMT-08:00) Pitcairn' }, { id: 'America/Dawson_Creek', text: '(GMT-07:00) Mountain Time - Dawson Creek' }, { id: 'America/Denver', text: '(GMT-07:00) Mountain Time' }, { id: 'America/Edmonton', text: '(GMT-07:00) Mountain Time - Edmonton' }, { id: 'America/Hermosillo', text: '(GMT-07:00) Mountain Time - Hermosillo' }, { id: 'America/Mazatlan', text: '(GMT-07:00) Mountain Time - Chihuahua, Mazatlan' }, { id: 'America/Phoenix', text: '(GMT-07:00) Mountain Time - Arizona' }, { id: 'America/Yellowknife', text: '(GMT-07:00) Mountain Time - Yellowknife' }, { id: 'America/Belize', text: '(GMT-06:00) Belize' }, { id: 'America/Chicago', text: '(GMT-06:00) Central Time' }, { id: 'America/Costa_Rica', text: '(GMT-06:00) Costa Rica' }, { id: 'America/El_Salvador', text: '(GMT-06:00) El Salvador' }, { id: 'America/Guatemala', text: '(GMT-06:00) Guatemala' }, { id: 'America/Managua', text: '(GMT-06:00) Managua' }, { id: 'America/Mexico_City', text: '(GMT-06:00) Central Time - Mexico City' }, { id: 'America/Regina', text: '(GMT-06:00) Central Time - Regina' }, { id: 'America/Tegucigalpa', text: '(GMT-06:00) Central Time - Tegucigalpa' }, { id: 'America/Winnipeg', text: '(GMT-06:00) Central Time - Winnipeg' }, { id: 'Pacific/Galapagos', text: '(GMT-06:00) Galapagos' }, { id: 'America/Bogota', text: '(GMT-05:00) Bogota' }, { id: 'America/Cancun', text: '(GMT-05:00) America Cancun' }, { id: 'America/Cayman', text: '(GMT-05:00) Cayman' }, { id: 'America/Guayaquil', text: '(GMT-05:00) Guayaquil' }, { id: 'America/Havana', text: '(GMT-05:00) Havana' }, { id: 'America/Iqaluit', text: '(GMT-05:00) Eastern Time - Iqaluit' }, { id: 'America/Jamaica', text: '(GMT-05:00) Jamaica' }, { id: 'America/Lima', text: '(GMT-05:00) Lima' }, { id: 'America/Nassau', text: '(GMT-05:00) Nassau' }, { id: 'America/New_York', text: '(GMT-05:00) Eastern Time' }, { id: 'America/Panama', text: '(GMT-05:00) Panama' }, { id: 'America/Port-au-Prince', text: '(GMT-05:00) Port-au-Prince' }, { id: 'America/Rio_Branco', text: '(GMT-05:00) Rio Branco' }, { id: 'America/Toronto', text: '(GMT-05:00) Eastern Time - Toronto' }, { id: 'Pacific/Easter', text: '(GMT-05:00) Easter Island' }, { id: 'America/Caracas', text: '(GMT-04:30) Caracas' }, { id: 'America/Asuncion', text: '(GMT-03:00) Asuncion' }, { id: 'America/Barbados', text: '(GMT-04:00) Barbados' }, { id: 'America/Boa_Vista', text: '(GMT-04:00) Boa Vista' }, { id: 'America/Campo_Grande', text: '(GMT-03:00) Campo Grande' }, { id: 'America/Cuiaba', text: '(GMT-03:00) Cuiaba' }, { id: 'America/Curacao', text: '(GMT-04:00) Curacao' }, { id: 'America/Grand_Turk', text: '(GMT-04:00) Grand Turk' }, { id: 'America/Guyana', text: '(GMT-04:00) Guyana' }, { id: 'America/Halifax', text: '(GMT-04:00) Atlantic Time - Halifax' }, { id: 'America/La_Paz', text: '(GMT-04:00) La Paz' }, { id: 'America/Manaus', text: '(GMT-04:00) Manaus' }, { id: 'America/Martinique', text: '(GMT-04:00) Martinique' }, { id: 'America/Port_of_Spain', text: '(GMT-04:00) Port of Spain' }, { id: 'America/Porto_Velho', text: '(GMT-04:00) Porto Velho' }, { id: 'America/Puerto_Rico', text: '(GMT-04:00) Puerto Rico' }, { id: 'America/Santo_Domingo', text: '(GMT-04:00) Santo Domingo' }, { id: 'America/Thule', text: '(GMT-04:00) Thule' }, { id: 'Atlantic/Bermuda', text: '(GMT-04:00) Bermuda' }, { id: 'America/St_Johns', text: '(GMT-03:30) Newfoundland Time - St. Johns' }, { id: 'America/Araguaina', text: '(GMT-03:00) Araguaina' }, { id: 'America/Argentina/Buenos_Aires', text: '(GMT-03:00) Buenos Aires' }, { id: 'America/Bahia', text: '(GMT-03:00) Salvador' }, { id: 'America/Belem', text: '(GMT-03:00) Belem' }, { id: 'America/Cayenne', text: '(GMT-03:00) Cayenne' }, { id: 'America/Fortaleza', text: '(GMT-03:00) Fortaleza' }, { id: 'America/Godthab', text: '(GMT-03:00) Godthab' }, { id: 'America/Maceio', text: '(GMT-03:00) Maceio' }, { id: 'America/Miquelon', text: '(GMT-03:00) Miquelon' }, { id: 'America/Montevideo', text: '(GMT-03:00) Montevideo' }, { id: 'America/Paramaribo', text: '(GMT-03:00) Paramaribo' }, { id: 'America/Recife', text: '(GMT-03:00) Recife' }, { id: 'America/Santiago', text: '(GMT-03:00) Santiago' }, { id: 'America/Sao_Paulo', text: '(GMT-02:00) Sao Paulo' }, { id: 'Antarctica/Palmer', text: '(GMT-03:00) Palmer' }, { id: 'Antarctica/Rothera', text: '(GMT-03:00) Rothera' }, { id: 'Atlantic/Stanley', text: '(GMT-03:00) Stanley' }, { id: 'America/Noronha', text: '(GMT-02:00) Noronha' }, { id: 'Atlantic/South_Georgia', text: '(GMT-02:00) South Georgia' }, { id: 'America/Scoresbysund', text: '(GMT-01:00) Scoresbysund' }, { id: 'Atlantic/Azores', text: '(GMT-01:00) Azores' }, { id: 'Atlantic/Cape_Verde', text: '(GMT-01:00) Cape Verde' }, { id: 'Africa/Abidjan', text: '(GMT+00:00) Abidjan' }, { id: 'Africa/Accra', text: '(GMT+00:00) Accra' }, { id: 'Africa/Bissau', text: '(GMT+00:00) Bissau' }, { id: 'Africa/Casablanca', text: '(GMT+00:00) Casablanca' }, { id: 'Africa/El_Aaiun', text: '(GMT+00:00) El Aaiun' }, { id: 'Africa/Monrovia', text: '(GMT+00:00) Monrovia' }, { id: 'America/Danmarkshavn', text: '(GMT+00:00) Danmarkshavn' }, { id: 'Atlantic/Canary', text: '(GMT+00:00) Canary Islands' }, { id: 'Atlantic/Faroe', text: '(GMT+00:00) Faeroe' }, { id: 'Atlantic/Reykjavik', text: '(GMT+00:00) Reykjavik' }, { id: 'Etc/GMT', text: '(GMT+00:00) GMT (no daylight saving)' }, { id: 'Europe/Dublin', text: '(GMT+00:00) Dublin' }, { id: 'Europe/Lisbon', text: '(GMT+00:00) Lisbon' }, { id: 'Europe/London', text: '(GMT+00:00) London' }, { id: 'Africa/Algiers', text: '(GMT+01:00) Algiers' }, { id: 'Africa/Ceuta', text: '(GMT+01:00) Ceuta' }, { id: 'Africa/Lagos', text: '(GMT+01:00) Lagos' }, { id: 'Africa/Ndjamena', text: '(GMT+01:00) Ndjamena' }, { id: 'Africa/Tunis', text: '(GMT+01:00) Tunis' }, { id: 'Africa/Windhoek', text: '(GMT+02:00) Windhoek' }, { id: 'Europe/Amsterdam', text: '(GMT+01:00) Amsterdam' }, { id: 'Europe/Andorra', text: '(GMT+01:00) Andorra' }, { id: 'Europe/Belgrade', text: '(GMT+01:00) Central European Time - Belgrade' }, { id: 'Europe/Berlin', text: '(GMT+01:00) Berlin' }, { id: 'Europe/Brussels', text: '(GMT+01:00) Brussels' }, { id: 'Europe/Budapest', text: '(GMT+01:00) Budapest' }, { id: 'Europe/Copenhagen', text: '(GMT+01:00) Copenhagen' }, { id: 'Europe/Gibraltar', text: '(GMT+01:00) Gibraltar' }, { id: 'Europe/Luxembourg', text: '(GMT+01:00) Luxembourg' }, { id: 'Europe/Madrid', text: '(GMT+01:00) Madrid' }, { id: 'Europe/Malta', text: '(GMT+01:00) Malta' }, { id: 'Europe/Monaco', text: '(GMT+01:00) Monaco' }, { id: 'Europe/Oslo', text: '(GMT+01:00) Oslo' }, { id: 'Europe/Paris', text: '(GMT+01:00) Paris' }, { id: 'Europe/Prague', text: '(GMT+01:00) Central European Time - Prague' }, { id: 'Europe/Rome', text: '(GMT+01:00) Rome' }, { id: 'Europe/Stockholm', text: '(GMT+01:00) Stockholm' }, { id: 'Europe/Tirane', text: '(GMT+01:00) Tirane' }, { id: 'Europe/Vienna', text: '(GMT+01:00) Vienna' }, { id: 'Europe/Warsaw', text: '(GMT+01:00) Warsaw' }, { id: 'Europe/Zurich', text: '(GMT+01:00) Zurich' }, { id: 'Africa/Cairo', text: '(GMT+02:00) Cairo' }, { id: 'Africa/Johannesburg', text: '(GMT+02:00) Johannesburg' }, { id: 'Africa/Maputo', text: '(GMT+02:00) Maputo' }, { id: 'Africa/Tripoli', text: '(GMT+02:00) Tripoli' }, { id: 'Asia/Amman', text: '(GMT+02:00) Amman' }, { id: 'Asia/Beirut', text: '(GMT+02:00) Beirut' }, { id: 'Asia/Damascus', text: '(GMT+02:00) Damascus' }, { id: 'Asia/Gaza', text: '(GMT+02:00) Gaza' }, { id: 'Asia/Jerusalem', text: '(GMT+02:00) Jerusalem' }, { id: 'Asia/Nicosia', text: '(GMT+02:00) Nicosia' }, { id: 'Europe/Athens', text: '(GMT+02:00) Athens' }, { id: 'Europe/Bucharest', text: '(GMT+02:00) Bucharest' }, { id: 'Europe/Chisinau', text: '(GMT+02:00) Chisinau' }, { id: 'Europe/Helsinki', text: '(GMT+02:00) Helsinki' }, { id: 'Europe/Istanbul', text: '(GMT+02:00) Istanbul' }, { id: 'Europe/Kaliningrad', text: '(GMT+02:00) Moscow-01 - Kaliningrad' }, { id: 'Europe/Kiev', text: '(GMT+02:00) Kiev' }, { id: 'Europe/Riga', text: '(GMT+02:00) Riga' }, { id: 'Europe/Sofia', text: '(GMT+02:00) Sofia' }, { id: 'Europe/Tallinn', text: '(GMT+02:00) Tallinn' }, { id: 'Europe/Vilnius', text: '(GMT+02:00) Vilnius' }, { id: 'Africa/Khartoum', text: '(GMT+03:00) Khartoum' }, { id: 'Africa/Nairobi', text: '(GMT+03:00) Nairobi' }, { id: 'Antarctica/Syowa', text: '(GMT+03:00) Syowa' }, { id: 'Asia/Baghdad', text: '(GMT+03:00) Baghdad' }, { id: 'Asia/Qatar', text: '(GMT+03:00) Qatar' }, { id: 'Asia/Riyadh', text: '(GMT+03:00) Riyadh' }, { id: 'Europe/Minsk', text: '(GMT+03:00) Minsk' }, { id: 'Europe/Moscow', text: '(GMT+03:00) Moscow+00 - Moscow' }, { id: 'Asia/Tehran', text: '(GMT+03:30) Tehran' }, { id: 'Asia/Baku', text: '(GMT+04:00) Baku' }, { id: 'Asia/Dubai', text: '(GMT+04:00) Dubai' }, { id: 'Asia/Tbilisi', text: '(GMT+04:00) Tbilisi' }, { id: 'Asia/Yerevan', text: '(GMT+04:00) Yerevan' }, { id: 'Europe/Samara', text: '(GMT+04:00) Moscow+01 - Samara' }, { id: 'Indian/Mahe', text: '(GMT+04:00) Mahe' }, { id: 'Indian/Mauritius', text: '(GMT+04:00) Mauritius' }, { id: 'Indian/Reunion', text: '(GMT+04:00) Reunion' }, { id: 'Asia/Kabul', text: '(GMT+04:30) Kabul' }, { id: 'Antarctica/Mawson', text: '(GMT+05:00) Mawson' }, { id: 'Asia/Aqtau', text: '(GMT+05:00) Aqtau' }, { id: 'Asia/Aqtobe', text: '(GMT+05:00) Aqtobe' }, { id: 'Asia/Ashgabat', text: '(GMT+05:00) Ashgabat' }, { id: 'Asia/Dushanbe', text: '(GMT+05:00) Dushanbe' }, { id: 'Asia/Karachi', text: '(GMT+05:00) Karachi' }, { id: 'Asia/Tashkent', text: '(GMT+05:00) Tashkent' }, { id: 'Asia/Yekaterinburg', text: '(GMT+05:00) Moscow+02 - Yekaterinburg' }, { id: 'Indian/Kerguelen', text: '(GMT+05:00) Kerguelen' }, { id: 'Indian/Maldives', text: '(GMT+05:00) Maldives' }, { id: 'Asia/Calcutta', text: '(GMT+05:30) India Standard Time' }, { id: 'Asia/Colombo', text: '(GMT+05:30) Colombo' }, { id: 'Asia/Katmandu', text: '(GMT+05:45) Katmandu' }, { id: 'Antarctica/Vostok', text: '(GMT+06:00) Vostok' }, { id: 'Asia/Almaty', text: '(GMT+06:00) Almaty' }, { id: 'Asia/Bishkek', text: '(GMT+06:00) Bishkek' }, { id: 'Asia/Dhaka', text: '(GMT+06:00) Dhaka' }, { id: 'Asia/Omsk', text: '(GMT+06:00) Moscow+03 - Omsk, Novosibirsk' }, { id: 'Asia/Thimphu', text: '(GMT+06:00) Thimphu' }, { id: 'Indian/Chagos', text: '(GMT+06:00) Chagos' }, { id: 'Asia/Rangoon', text: '(GMT+06:30) Rangoon' }, { id: 'Indian/Cocos', text: '(GMT+06:30) Cocos' }, { id: 'Antarctica/Davis', text: '(GMT+07:00) Davis' }, { id: 'Asia/Bangkok', text: '(GMT+07:00) Bangkok' }, { id: 'Asia/Hovd', text: '(GMT+07:00) Hovd' }, { id: 'Asia/Jakarta', text: '(GMT+07:00) Jakarta' }, { id: 'Asia/Krasnoyarsk', text: '(GMT+07:00) Moscow+04 - Krasnoyarsk' }, { id: 'Asia/Saigon', text: '(GMT+07:00) Hanoi' }, { id: 'Indian/Christmas', text: '(GMT+07:00) Christmas' }, { id: 'Antarctica/Casey', text: '(GMT+08:00) Casey' }, { id: 'Asia/Brunei', text: '(GMT+08:00) Brunei' }, { id: 'Asia/Choibalsan', text: '(GMT+08:00) Choibalsan' }, { id: 'Asia/Hong_Kong', text: '(GMT+08:00) Hong Kong' }, { id: 'Asia/Irkutsk', text: '(GMT+08:00) Moscow+05 - Irkutsk' }, { id: 'Asia/Kuala_Lumpur', text: '(GMT+08:00) Kuala Lumpur' }, { id: 'Asia/Macau', text: '(GMT+08:00) Macau' }, { id: 'Asia/Makassar', text: '(GMT+08:00) Makassar' }, { id: 'Asia/Manila', text: '(GMT+08:00) Manila' }, { id: 'Asia/Shanghai', text: '(GMT+08:00) China Time - Beijing' }, { id: 'Asia/Singapore', text: '(GMT+08:00) Singapore' }, { id: 'Asia/Taipei', text: '(GMT+08:00) Taipei' }, { id: 'Asia/Ulaanbaatar', text: '(GMT+08:00) Ulaanbaatar' }, { id: 'Australia/Perth', text: '(GMT+08:00) Western Time - Perth' }, { id: 'Asia/Pyongyang', text: '(GMT+08:30) Pyongyang' }, { id: 'Asia/Dili', text: '(GMT+09:00) Dili' }, { id: 'Asia/Jayapura', text: '(GMT+09:00) Jayapura' }, { id: 'Asia/Seoul', text: '(GMT+09:00) Seoul' }, { id: 'Asia/Tokyo', text: '(GMT+09:00) Tokyo' }, { id: 'Asia/Yakutsk', text: '(GMT+09:00) Moscow+06 - Yakutsk' }, { id: 'Pacific/Palau', text: '(GMT+09:00) Palau' }, { id: 'Australia/Adelaide', text: '(GMT+10:30) Central Time - Adelaide' }, { id: 'Australia/Darwin', text: '(GMT+09:30) Central Time - Darwin' }, { id: 'Antarctica/DumontDUrville', text: '(GMT+10:00) Dumont D\'Urville' }, { id: 'Asia/Magadan', text: '(GMT+10:00) Moscow+08 - Magadan' }, { id: 'Asia/Vladivostok', text: '(GMT+10:00) Moscow+07 - Yuzhno-Sakhalinsk' }, { id: 'Australia/Brisbane', text: '(GMT+10:00) Eastern Time - Brisbane' }, { id: 'Australia/Hobart', text: '(GMT+11:00) Eastern Time - Hobart' }, { id: 'Australia/Sydney', text: '(GMT+11:00) Eastern Time - Melbourne, Sydney' }, { id: 'Pacific/Chuuk', text: '(GMT+10:00) Truk' }, { id: 'Pacific/Guam', text: '(GMT+10:00) Guam' }, { id: 'Pacific/Port_Moresby', text: '(GMT+10:00) Port Moresby' }, { id: 'Pacific/Efate', text: '(GMT+11:00) Efate' }, { id: 'Pacific/Guadalcanal', text: '(GMT+11:00) Guadalcanal' }, { id: 'Pacific/Kosrae', text: '(GMT+11:00) Kosrae' }, { id: 'Pacific/Norfolk', text: '(GMT+11:00) Norfolk' }, { id: 'Pacific/Noumea', text: '(GMT+11:00) Noumea' }, { id: 'Pacific/Pohnpei', text: '(GMT+11:00) Ponape' }, { id: 'Asia/Kamchatka', text: '(GMT+12:00) Moscow+09 - Petropavlovsk-Kamchatskiy' }, { id: 'Pacific/Auckland', text: '(GMT+13:00) Auckland' }, { id: 'Pacific/Fiji', text: '(GMT+12:00) Fiji' }, { id: 'Pacific/Funafuti', text: '(GMT+12:00) Funafuti' }, { id: 'Pacific/Kwajalein', text: '(GMT+12:00) Kwajalein' }, { id: 'Pacific/Majuro', text: '(GMT+12:00) Majuro' }, { id: 'Pacific/Nauru', text: '(GMT+12:00) Nauru' }, { id: 'Pacific/Tarawa', text: '(GMT+12:00) Tarawa' }, { id: 'Pacific/Wake', text: '(GMT+12:00) Wake' }, { id: 'Pacific/Wallis', text: '(GMT+12:00) Wallis' }, { id: 'Pacific/Apia', text: '(GMT+14:00) Apia' }, { id: 'Pacific/Enderbury', text: '(GMT+13:00) Enderbury' }, { id: 'Pacific/Fakaofo', text: '(GMT+13:00) Fakaofo' }, { id: 'Pacific/Tongatapu', text: '(GMT+13:00) Tongatapu' }, { id: 'Pacific/Kiritimati', text: '(GMT+14:00) Kiritimati' }]

  });
});
define("frontend-cp/components/ko-user-content/field/timezone-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-content/field/timezone-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "timezone", ["loc", [null, [2, 8], [2, 16]]]]], [], []], "options", ["subexpr", "@mut", [["get", "timezones", ["loc", [null, [3, 10], [3, 19]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.timezone"], [], ["loc", [null, [4, 8], [4, 36]]]], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onChangeTimezone", ["loc", [null, [8, 24], [8, 40]]]]], [], ["loc", [null, [8, 16], [8, 41]]]], "idPath", "id", "labelPath", "text"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-user-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 77,
                    "column": 16
                  },
                  "end": {
                    "line": 81,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-text-editor-header-group__item ko-text-editor-header-group__item--single t-base ko-text-editor-header-group__item__set-note ko-text-editor-header-group__item--active");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "t", ["users.notes"], [], ["loc", [null, [79, 20], [79, 39]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 16
                  },
                  "end": {
                    "line": 89,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-user-content_field_post--editor-overlay");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-user-content_field_post--note-reminder");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "t", ["generic.texteditor.notes_reminder"], [], ["loc", [null, [86, 22], [86, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 57,
                  "column": 14
                },
                "end": {
                  "line": 91,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [77, 22], [77, 37]]]]], [], 0, null, ["loc", [null, [77, 16], [81, 23]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [83, 22], [83, 42]]]]], [], 1, null, ["loc", [null, [83, 16], [89, 23]]]]],
            locals: ["editor"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 10
              },
              "end": {
                "line": 93,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__editor");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [58, 32], [58, 47]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [59, 26], [59, 35]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [60, 37], [60, 57]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [61, 39], [61, 61]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [62, 38], [62, 67]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [63, 37], [63, 53]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "placeholder", ["subexpr", "t", ["users.add_a_note"], [], ["loc", [null, [66, 28], [66, 50]]]], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [67, 26], [67, 35]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [68, 29], [68, 46]]]]], [], []], "textAreaIsSmall", true, "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [70, 33], [70, 44]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [71, 32], [71, 46]]]]], [], []], "onTextChanged", ["subexpr", "action", ["updatePostContent"], [], ["loc", [null, [72, 30], [72, 58]]]], "value", ["subexpr", "@mut", [["get", "replyContent", ["loc", [null, [73, 22], [73, 34]]]]], [], []], "onFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange"], [], ["loc", [null, [74, 35], [74, 72]]]]], 0, null, ["loc", [null, [57, 14], [91, 33]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 93,
                "column": 10
              },
              "end": {
                "line": 97,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-case-content__editor-placeholder");
            dom.setAttribute(el1, "style", "background: #FFF; font-size: 14px; font-style: italic; border-bottom: 1px solid #D1D5D7; padding: 20px 15px;");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "style", "text-decoration: underline; cursor: pointer;");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("...\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var element6 = dom.childAt(element5, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            morphs[2] = dom.createElementMorph(element6);
            morphs[3] = dom.createMorphAt(element6, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["beginReply"], [], ["loc", [null, [94, 17], [94, 40]]]], ["inline", "t", ["generic.reply.click_to_leave_a"], [], ["loc", [null, [95, 14], [95, 52]]]], ["element", "action", ["beginReply"], [], ["loc", [null, [95, 59], [95, 82]]]], ["inline", "t", ["generic.reply.note"], [], ["loc", [null, [95, 136], [95, 162]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 54,
              "column": 8
            },
            "end": {
              "line": 98,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isEditInProgress", ["loc", [null, [55, 16], [55, 32]]]]], [], 0, 1, ["loc", [null, [55, 10], [97, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 102,
                "column": 12
              },
              "end": {
                "line": 104,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-feed/item", [], ["event", ["subexpr", "@mut", [["get", "post", ["loc", [null, [103, 35], [103, 39]]]]], [], []], "isReplyDisabled", true], ["loc", [null, [103, 14], [103, 62]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 106,
                "column": 12
              },
              "end": {
                "line": 108,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-feed/activity", [], ["activity", ["subexpr", "@mut", [["get", "post", ["loc", [null, [107, 42], [107, 46]]]]], [], []]], ["loc", [null, [107, 14], [107, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 101,
              "column": 10
            },
            "end": {
              "line": 109,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [102, 26], [102, 52]]]], "post"], [], ["loc", [null, [102, 22], [102, 60]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [102, 65], [102, 91]]]], "user-note"], [], ["loc", [null, [102, 61], [102, 104]]]]], [], ["loc", [null, [102, 18], [102, 105]]]]], [], 0, null, ["loc", [null, [102, 12], [104, 19]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [106, 26], [106, 52]]]], "activity"], [], ["loc", [null, [106, 22], [106, 64]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [106, 69], [106, 95]]]], "event"], [], ["loc", [null, [106, 65], [106, 104]]]]], [], ["loc", [null, [106, 18], [106, 105]]]]], [], 1, null, ["loc", [null, [106, 12], [108, 19]]]]],
        locals: ["post"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 111,
              "column": 10
            },
            "end": {
              "line": 114,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "style", "font-style: italic; margin: 20px 0 0 0;");
          var el2 = dom.createTextNode("showing last 20 notes out of ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "totalNotes", ["loc", [null, [113, 94], [113, 108]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 122,
                "column": 12
              },
              "end": {
                "line": 124,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-loader", [], ["class", "ko-user-content__button-loading"], ["loc", [null, [123, 14], [123, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 124,
                "column": 12
              },
              "end": {
                "line": 126,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [125, 14], [125, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 142,
                "column": 8
              },
              "end": {
                "line": 154,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["users.infobar.accesslevel"], [], ["loc", [null, [144, 18], [144, 49]]]], "options", ["subexpr", "@mut", [["get", "agentAccessLevels", ["loc", [null, [145, 20], [145, 37]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isAccessLevelEdited", ["loc", [null, [146, 21], [146, 40]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.agentCaseAccess", ["loc", [null, [147, 18], [147, 39]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.agent_case_access", ["loc", [null, [148, 22], [148, 48]]]]], [], []], "onValueChange", ["subexpr", "action", ["agentLevelSelect"], [], ["loc", [null, [149, 26], [149, 53]]]], "hasEmptyOption", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [143, 10], [153, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 156,
                "column": 8
              },
              "end": {
                "line": 168,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["users.infobar.accesslevel"], [], ["loc", [null, [158, 18], [158, 49]]]], "options", ["subexpr", "@mut", [["get", "organizationAccessLevels", ["loc", [null, [159, 20], [159, 44]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isAccessLevelEdited", ["loc", [null, [160, 21], [160, 40]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.organization_case_access", ["loc", [null, [161, 22], [161, 55]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.organizationCaseAccess", ["loc", [null, [162, 18], [162, 46]]]]], [], []], "onValueChange", ["subexpr", "action", ["organizationLevelSelect"], [], ["loc", [null, [163, 26], [163, 60]]]], "hasEmptyOption", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [157, 10], [167, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 190,
                "column": 8
              },
              "end": {
                "line": 205,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.teams"], [], ["loc", [null, [192, 18], [192, 35]]]], "isEdited", ["subexpr", "@mut", [["get", "isTeamsFieldEdited", ["loc", [null, [193, 21], [193, 39]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.team_ids", ["loc", [null, [194, 22], [194, 39]]]]], [], []], "isDisabled", ["subexpr", "not", [["get", "canChangeUserTeamPermission", ["loc", [null, [195, 28], [195, 55]]]]], [], ["loc", [null, [195, 23], [195, 56]]]], "selectedTags", ["subexpr", "@mut", [["get", "model.teams", ["loc", [null, [196, 25], [196, 36]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTeams", ["loc", [null, [197, 26], [197, 40]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newteam"], [], ["loc", [null, [198, 23], [198, 42]]]], "addTagText", ["subexpr", "t", ["users.addteam"], [], ["loc", [null, [199, 23], [199, 42]]]], "forceLowerCase", false, "onTagAddition", ["subexpr", "action", ["addTeam"], [], ["loc", [null, [201, 26], [201, 44]]]], "onTagRemoval", ["subexpr", "action", ["removeTeam"], [], ["loc", [null, [202, 25], [202, 46]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTeams"], [], ["loc", [null, [203, 28], [203, 51]]]]], ["loc", [null, [191, 10], [204, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child5 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 221,
                    "column": 12
                  },
                  "end": {
                    "line": 233,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [222, 37], [222, 66]]]], ["get", "field.fieldType", ["loc", [null, [222, 67], [222, 82]]]]], [], ["loc", [null, [222, 26], [222, 83]]]]], ["value", ["subexpr", "get", [["get", "customFieldValueHash", ["loc", [null, [223, 27], [223, 47]]]], ["get", "field.id", ["loc", [null, [223, 48], [223, 56]]]]], [], ["loc", [null, [223, 22], [223, 57]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [224, 24], [224, 37]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [225, 22], [225, 33]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [226, 31], [226, 39]]]], ["get", "field.key", ["loc", [null, [226, 40], [226, 49]]]]], [], ["loc", [null, [226, 26], [226, 50]]]], "isEdited", ["subexpr", "get", [["get", "editedCustomFields", ["loc", [null, [227, 30], [227, 48]]]], ["get", "field.id", ["loc", [null, [227, 49], [227, 57]]]]], [], ["loc", [null, [227, 25], [227, 58]]]], "onValueChange", ["subexpr", "action", ["fieldUpdated", ["get", "field", ["loc", [null, [228, 53], [228, 58]]]]], [], ["loc", [null, [228, 30], [228, 59]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [229, 36], [229, 61]]]]], [], ["loc", [null, [229, 31], [229, 62]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [222, 14], [232, 16]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 220,
                  "column": 10
                },
                "end": {
                  "line": 234,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [221, 18], [221, 33]]]]], [], 0, null, ["loc", [null, [221, 12], [233, 19]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 219,
                "column": 8
              },
              "end": {
                "line": 235,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [220, 27], [220, 56]]]], ["get", "field.fieldType", ["loc", [null, [220, 57], [220, 72]]]]], [], ["loc", [null, [220, 16], [220, 73]]]]], [], 0, null, ["loc", [null, [220, 10], [234, 17]]]]],
          locals: ["field"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 6
            },
            "end": {
              "line": 245,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "info-bar-item");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(15);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element4, 'onclick');
          morphs[2] = dom.createMorphAt(element4, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[8] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          morphs[9] = dom.createMorphAt(fragment, 15, 15, contextualElement);
          morphs[10] = dom.createMorphAt(fragment, 17, 17, contextualElement);
          morphs[11] = dom.createMorphAt(fragment, 19, 19, contextualElement);
          morphs[12] = dom.createMorphAt(fragment, 21, 21, contextualElement);
          morphs[13] = dom.createMorphAt(fragment, 23, 23, contextualElement);
          morphs[14] = dom.createMorphAt(fragment, 25, 25, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [121, 73], [121, 87]]]], "disabled"], [], ["loc", [null, [121, 68], [121, 100]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [121, 110], [121, 129]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [122, 18], [122, 26]]]]], [], 0, 1, ["loc", [null, [122, 12], [126, 19]]]], ["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "model.role", ["loc", [null, [131, 16], [131, 26]]]]], [], []], "options", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [132, 18], [132, 23]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.role"], [], ["loc", [null, [133, 16], [133, 40]]]], "isEdited", ["subexpr", "@mut", [["get", "isRoleEdited", ["loc", [null, [134, 19], [134, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.role_id", ["loc", [null, [135, 20], [135, 36]]]]], [], []], "isDisabled", ["subexpr", "not", [["get", "canChangeRolePermission", ["loc", [null, [136, 26], [136, 49]]]]], [], ["loc", [null, [136, 21], [136, 50]]]], "onValueChange", ["subexpr", "action", ["roleSelect"], [], ["loc", [null, [137, 24], [137, 45]]]], "labelPath", "title", "hasEmptyOption", false], ["loc", [null, [130, 8], [140, 10]]]], ["block", "if", [["get", "canChangeAgentAccessPermission", ["loc", [null, [142, 14], [142, 44]]]]], [], 2, null, ["loc", [null, [142, 8], [154, 15]]]], ["block", "if", [["get", "canChangeOrganizationAccessPermission", ["loc", [null, [156, 14], [156, 51]]]]], [], 3, null, ["loc", [null, [156, 8], [168, 15]]]], ["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "model.organization.content", ["loc", [null, [171, 16], [171, 42]]]]], [], []], "options", ["subexpr", "@mut", [["get", "organizations", ["loc", [null, [172, 18], [172, 31]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.organization"], [], ["loc", [null, [173, 16], [173, 48]]]], "search", ["subexpr", "action", ["searchOrganization"], [], ["loc", [null, [174, 17], [174, 46]]]], "inputPlaceholder", ["subexpr", "t", ["generic.search.start_typing_to_search"], [], ["loc", [null, [175, 27], [175, 70]]]], "loadingMessage", ["subexpr", "t", ["generic.search.searching"], [], ["loc", [null, [176, 25], [176, 55]]]], "isEdited", ["subexpr", "@mut", [["get", "isOrganisationEdited", ["loc", [null, [177, 19], [177, 39]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.organization_id", ["loc", [null, [178, 20], [178, 44]]]]], [], []], "onValueChange", ["subexpr", "action", ["organizationSelect"], [], ["loc", [null, [179, 24], [179, 53]]]], "labelPath", "name"], ["loc", [null, [170, 8], [181, 10]]]], ["inline", "ko-user-content/field/timezone-select", [], ["timezone", ["subexpr", "@mut", [["get", "model.timeZone", ["loc", [null, [184, 19], [184, 33]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isTimezoneEdited", ["loc", [null, [185, 19], [185, 35]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.time_zone", ["loc", [null, [186, 20], [186, 38]]]]], [], []], "onChangeTimezone", ["subexpr", "action", ["timezoneSelect"], [], ["loc", [null, [187, 27], [187, 52]]]]], ["loc", [null, [183, 8], [188, 10]]]], ["block", "if", [["get", "canViewUserTeamPermission", ["loc", [null, [190, 14], [190, 39]]]]], [], 4, null, ["loc", [null, [190, 8], [205, 15]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.tags"], [], ["loc", [null, [208, 16], [208, 32]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [209, 19], [209, 36]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.tags", ["loc", [null, [210, 23], [210, 33]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [211, 24], [211, 37]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newtag"], [], ["loc", [null, [212, 21], [212, 39]]]], "addTagText", ["subexpr", "t", ["users.addtag"], [], ["loc", [null, [213, 21], [213, 39]]]], "onTagAddition", ["subexpr", "action", ["addTag"], [], ["loc", [null, [214, 24], [214, 41]]]], "onTagRemoval", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [215, 23], [215, 43]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [216, 26], [216, 48]]]]], ["loc", [null, [207, 8], [217, 10]]]], ["block", "each", [["get", "customFields", ["loc", [null, [219, 16], [219, 28]]]]], [], 5, null, ["loc", [null, [219, 8], [235, 17]]]], ["inline", "ko-identities", [], ["parent", ["subexpr", "@mut", [["get", "model", ["loc", [null, [237, 31], [237, 36]]]]], [], []]], ["loc", [null, [237, 8], [237, 38]]]], ["inline", "ko-recent-cases", [], ["title", ["subexpr", "t", ["users.recent_cases"], [], ["loc", [null, [239, 32], [239, 56]]]], "cases", ["subexpr", "@mut", [["get", "model.recentCases", ["loc", [null, [239, 63], [239, 80]]]]], [], []]], ["loc", [null, [239, 8], [239, 82]]]], ["inline", "ko-feedback", [], ["title", ["subexpr", "t", ["users.recent_feedback"], [], ["loc", [null, [241, 28], [241, 55]]]], "feedback", ["subexpr", "@mut", [["get", "recentFeedback", ["loc", [null, [241, 65], [241, 79]]]]], [], []]], ["loc", [null, [241, 8], [241, 81]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "userDates", ["loc", [null, [243, 36], [243, 45]]]]], [], []]], ["loc", [null, [243, 8], [243, 47]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 251,
                "column": 2
              },
              "end": {
                "line": 266,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "box layout layout--flush");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-editor-modal__submit-message layout__item u-2/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item t-right u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "class", "ko-editor-modal__cancel t-bad");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "class", "button button--primary");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var element1 = dom.childAt(element0, [3]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element1, [3]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'onclick');
            morphs[3] = dom.createMorphAt(element2, 1, 1);
            morphs[4] = dom.createAttrMorph(element3, 'onclick');
            morphs[5] = dom.createMorphAt(element3, 1, 1);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "editingSignature", ["loc", [null, [252, 21], [252, 37]]]]], [], []], "class", "text-area--clean"], ["loc", [null, [252, 4], [252, 64]]]], ["inline", "t", ["users.signaturemessage"], [], ["loc", [null, [255, 8], [255, 38]]]], ["attribute", "onclick", ["subexpr", "action", ["closeSignatureModal"], [], ["loc", [null, [258, 19], [258, 51]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [259, 10], [259, 32]]]], ["attribute", "onclick", ["subexpr", "action", ["updateSignature"], [], ["loc", [null, [261, 55], [261, 83]]]]], ["inline", "t", ["users.update_signature"], [], ["loc", [null, [262, 10], [262, 40]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 250,
              "column": 0
            },
            "end": {
              "line": 267,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-editor-modal", [], ["title", ["subexpr", "t", ["users.editsignature"], [], ["loc", [null, [251, 27], [251, 52]]]]], 0, null, ["loc", [null, [251, 2], [266, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 268,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-2/3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6, "alt", "");
        dom.setAttribute(el6, "class", "header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "flag__body u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6, "class", "header__title ko-user-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/3 u-mt");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4, "class", "list-inline t-right");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top u-hidden");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5, "class", "u-v-align-top");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-user-content__main u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-user-content__main__content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "content__main content__main--has-infobar");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-feed");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-user-content__main__sidebar");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1, 1]);
        var element10 = dom.childAt(element9, [1, 1]);
        var element11 = dom.childAt(element8, [3, 1]);
        var element12 = dom.childAt(element7, [3]);
        var element13 = dom.childAt(element12, [1, 1]);
        var element14 = dom.childAt(element13, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element10, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element11, [5]), 1, 1);
        morphs[5] = dom.createMorphAt(element13, 1, 1);
        morphs[6] = dom.createMorphAt(element14, 1, 1);
        morphs[7] = dom.createMorphAt(element14, 3, 3);
        morphs[8] = dom.createMorphAt(dom.childAt(element12, [3]), 1, 1);
        morphs[9] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "src", ["concat", [["get", "model.avatar", ["loc", [null, [6, 22], [6, 34]]]]]]], ["content", "model.fullName", ["loc", [null, [10, 12], [10, 30]]]], ["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["users.button.following.active.text"], [], ["loc", [null, [20, 22], [20, 62]]]], "activeHoverText", ["subexpr", "t", ["users.button.following.active.hovertext"], [], ["loc", [null, [21, 27], [21, 72]]]], "inactiveText", ["subexpr", "t", ["users.button.following.inactive.text"], [], ["loc", [null, [22, 24], [22, 66]]]], "inactiveHoverText", ["subexpr", "t", ["users.button.following.inactive.hovertext"], [], ["loc", [null, [23, 29], [23, 76]]]], "isActive", false, "isLoading", ["subexpr", "@mut", [["get", "isFollowingSaving", ["loc", [null, [25, 21], [25, 38]]]]], [], []], "isEnabled", ["subexpr", "@mut", [["get", "canFollowUser", ["loc", [null, [26, 21], [26, 34]]]]], [], []]], ["loc", [null, [19, 9], [26, 36]]]], ["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["users.button.user.enabled.text"], [], ["loc", [null, [30, 22], [30, 58]]]], "activeHoverText", ["subexpr", "t", ["users.button.user.enabled.hovertext"], [], ["loc", [null, [31, 27], [31, 68]]]], "inactiveText", ["subexpr", "t", ["users.button.user.disabled.text"], [], ["loc", [null, [32, 24], [32, 61]]]], "inactiveHoverText", ["subexpr", "t", ["users.button.user.disabled.hovertext"], [], ["loc", [null, [33, 29], [33, 71]]]], "isActive", ["subexpr", "@mut", [["get", "model.isEnabled", ["loc", [null, [34, 20], [34, 35]]]]], [], []], "isEnabled", ["subexpr", "@mut", [["get", "canModifyUserState", ["loc", [null, [35, 21], [35, 39]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isStateSaving", ["loc", [null, [36, 21], [36, 34]]]]], [], []], "onClick", "toggleUserState"], ["loc", [null, [29, 9], [37, 38]]]], ["inline", "ko-user-action-menu", [], ["permissions", ["subexpr", "@mut", [["get", "sessionService.permissions", ["loc", [null, [41, 24], [41, 50]]]]], [], []], "userRoleType", ["subexpr", "@mut", [["get", "model.role.roleType", ["loc", [null, [42, 25], [42, 44]]]]], [], []], "userModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [43, 22], [43, 27]]]]], [], []], "onCreateNewCase", ["subexpr", "action", [["get", "onCreateNewCase", ["loc", [null, [44, 36], [44, 51]]]], ["get", "model", ["loc", [null, [44, 52], [44, 57]]]]], [], ["loc", [null, [44, 28], [44, 58]]]]], ["loc", [null, [40, 8], [45, 10]]]], ["block", "if", [["get", "features.userNote", ["loc", [null, [54, 14], [54, 31]]]]], [], 0, null, ["loc", [null, [54, 8], [98, 15]]]], ["block", "each", [["get", "notes", ["loc", [null, [101, 18], [101, 23]]]]], [], 1, null, ["loc", [null, [101, 10], [109, 19]]]], ["block", "if", [["subexpr", "gt", [["get", "totalNotes", ["loc", [null, [111, 20], [111, 30]]]], 20], [], ["loc", [null, [111, 16], [111, 34]]]]], [], 2, null, ["loc", [null, [111, 10], [114, 17]]]], ["block", "ko-info-bar", [], [], 3, null, ["loc", [null, [119, 6], [245, 22]]]], ["block", "if", [["get", "signatureModal", ["loc", [null, [250, 6], [250, 20]]]]], [], 4, null, ["loc", [null, [250, 0], [267, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/components/ko-user-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    session: _ember['default'].inject.service('session'),
    permissions: _ember['default'].inject.service('permissions'),

    isAdmin: _ember['default'].computed('session.permissions', function () {
      return this.get('permissions').has('app.admin.access');
    }),

    actions: {
      logout: function logout() {
        this.get('session').logout(false);
      },
      profile: function profile() {
        this.set('hidden', true);
        this.container.lookup('router:main').transitionTo('session.agent.users.user', this.get('session.user.id'));
      },
      admin: function admin() {
        this.set('hidden', true);
        this.container.lookup('router:main').transitionTo('session.admin');
      }
    }
  });
});
define("frontend-cp/components/ko-user-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "flag flag--small flag--auto");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "flag__img u-reset-lh");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "flag__body");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
            return morphs;
          },
          statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "user.avatar", ["loc", [null, [5, 27], [5, 38]]]]], [], []]], ["loc", [null, [5, 8], [5, 40]]]], ["content", "user.fullName", ["loc", [null, [8, 8], [8, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 22,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["admin"], [], ["loc", [null, [19, 51], [19, 69]]]]], ["inline", "t", ["admin.administration"], [], ["loc", [null, [20, 10], [20, 38]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(fragment, [5]);
              var morphs = new Array(5);
              morphs[0] = dom.createAttrMorph(element1, 'onclick');
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[3] = dom.createAttrMorph(element2, 'onclick');
              morphs[4] = dom.createMorphAt(element2, 1, 1);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["profile"], [], ["loc", [null, [14, 49], [14, 69]]]]], ["inline", "t", ["generic.view_your_profile"], [], ["loc", [null, [15, 8], [15, 41]]]], ["block", "if", [["get", "isAdmin", ["loc", [null, [18, 12], [18, 19]]]]], [], 0, null, ["loc", [null, [18, 6], [22, 13]]]], ["attribute", "onclick", ["subexpr", "action", ["logout"], [], ["loc", [null, [24, 49], [24, 68]]]]], ["inline", "t", ["generic.logout"], [], ["loc", [null, [25, 8], [25, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-user-menu__content"], 0, null, ["loc", [null, [13, 4], [27, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [11, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [12, 12], [12, 16]]]], "content"], [], ["loc", [null, [12, 8], [12, 27]]]]], [], 1, null, ["loc", [null, [12, 2], [28, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["hideOnChildFocus", true, "hideDropdown", ["subexpr", "@mut", [["get", "hidden", ["loc", [null, [1, 60], [1, 66]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [29, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _emberPowerSelectComponentsPowerSelectBeforeOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectBeforeOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _emberPowerSelectComponentsPowerSelectOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select/trigger', ['exports', 'ember-power-select/components/power-select/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple/options', ['exports', 'ember-power-select/components/power-select-multiple/options'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _emberPowerSelectComponentsPowerSelectMultiple) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultiple['default'];
    }
  });
});
define('frontend-cp/components/power-select-typeahead/trigger', ['exports', 'ember-power-select-typeahead/components/power-select-typeahead/trigger'], function (exports, _emberPowerSelectTypeaheadComponentsPowerSelectTypeaheadTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectTypeaheadComponentsPowerSelectTypeaheadTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-typeahead', ['exports', 'ember-power-select-typeahead/components/power-select-typeahead'], function (exports, _emberPowerSelectTypeaheadComponentsPowerSelectTypeahead) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectTypeaheadComponentsPowerSelectTypeahead['default'];
    }
  });
});
define('frontend-cp/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _emberPowerSelectComponentsPowerSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelect['default'];
    }
  });
});
define('frontend-cp/components/sortable-group', ['exports', 'ember-sortable/components/sortable-group'], function (exports, _emberSortableComponentsSortableGroup) {
  exports['default'] = _emberSortableComponentsSortableGroup['default'];
});
define('frontend-cp/components/sortable-item', ['exports', 'ember-sortable/components/sortable-item'], function (exports, _emberSortableComponentsSortableItem) {
  exports['default'] = _emberSortableComponentsSortableItem['default'];
});
define('frontend-cp/components/sticky-container', ['exports', 'ember', 'ember-cli-sticky/components/sticky-container'], function (exports, _ember, _emberCliStickyComponentsStickyContainer) {
  exports['default'] = _emberCliStickyComponentsStickyContainer['default'];
});
define('frontend-cp/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('frontend-cp/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define("frontend-cp/features/-main", ["exports", "ember-feature-flags/features", "frontend-cp/config/environment"], function (exports, _emberFeatureFlagsFeatures, _frontendCpConfigEnvironment) {
  exports["default"] = _emberFeatureFlagsFeatures["default"].extend({

    init: function init() {
      this._super.apply(this, arguments);

      if (this.application && !Ember.isNone(this.application.FEATURES)) {
        Ember.deprecate('[ember-feature-flags] Setting feature flags via `APP.FEATURES` is deprecated and will be removed.');
        this.setup(this.application.FEATURES);
      } else if (_frontendCpConfigEnvironment["default"].featureFlags) {
        this.setup(_frontendCpConfigEnvironment["default"].featureFlags);
      }
    }

  });
});
define('frontend-cp/formats', ['exports'], function (exports) {
  exports['default'] = {
    date: {
      month: {
        month: 'long'
      },
      year: {
        year: 'numeric'
      },
      full: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      }
    },
    number: {
      filesize: {
        style: 'decimal',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    },
    time: {
      time: {
        hour: 'numeric',
        minute: 'numeric'
      }
    }
  };
});
define('frontend-cp/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/ember-power-select-build-selection', ['exports', 'ember-power-select/helpers/ember-power-select-build-selection'], function (exports, _emberPowerSelectHelpersEmberPowerSelectBuildSelection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectBuildSelection', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection.emberPowerSelectBuildSelection;
    }
  });
});
define('frontend-cp/helpers/ember-power-select-option-classes', ['exports', 'ember-power-select/helpers/ember-power-select-option-classes'], function (exports, _emberPowerSelectHelpersEmberPowerSelectOptionClasses) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectOptionClasses['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectOptionClasses', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectOptionClasses.emberPowerSelectOptionClasses;
    }
  });
});
define('frontend-cp/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/escape-html', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return value;
  });
});
define('frontend-cp/helpers/format-date', ['exports', 'ember-intl/helpers/format-date'], function (exports, _emberIntlHelpersFormatDate) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatDate['default'];
    }
  });
});
define('frontend-cp/helpers/format-html-message', ['exports', 'ember-intl/helpers/format-html-message'], function (exports, _emberIntlHelpersFormatHtmlMessage) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatHtmlMessage['default'];
    }
  });
});
define('frontend-cp/helpers/format-message', ['exports', 'ember-intl/helpers/format-message'], function (exports, _emberIntlHelpersFormatMessage) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatMessage['default'];
    }
  });
});
define('frontend-cp/helpers/format-number', ['exports', 'ember-intl/helpers/format-number'], function (exports, _emberIntlHelpersFormatNumber) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatNumber['default'];
    }
  });
});
define('frontend-cp/helpers/format-relative', ['exports', 'ember-intl/helpers/format-relative'], function (exports, _emberIntlHelpersFormatRelative) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatRelative['default'];
    }
  });
});
define('frontend-cp/helpers/format-time', ['exports', 'ember-intl/helpers/format-time'], function (exports, _emberIntlHelpersFormatTime) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatTime['default'];
    }
  });
});
define('frontend-cp/helpers/get', ['exports', 'ember', 'ember-get-helper/helpers/get', 'ember-get-helper/helpers/get-glimmer'], function (exports, _ember, _emberGetHelperHelpersGet, _emberGetHelperHelpersGetGlimmer) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _emberGetHelperHelpersGetGlimmer['default'];
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberGetHelperHelpersGet.getHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/hash-to-query-params', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var qps = _ref2[0];

      var queryParamsHelper = this.container.lookupFactory('helper:query-params');
      return queryParamsHelper([], qps);
    }
  });
});
define('frontend-cp/helpers/hash', ['exports', 'ember-hash-helper-polyfill/helpers/hash'], function (exports, _emberHashHelperPolyfillHelpersHash) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash['default'];
    }
  });
  Object.defineProperty(exports, 'hash', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash.hash;
    }
  });
});
define('frontend-cp/helpers/intl-get', ['exports', 'ember-intl/helpers/intl-get'], function (exports, _emberIntlHelpersIntlGet) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersIntlGet['default'];
    }
  });
});
define('frontend-cp/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/is-last-item-in-list', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var item = _ref2[0];
    var list = _ref2[1];

    var listLength = list.get('length');
    if (listLength === 0) {
      return false;
    }

    return list.objectAt(listLength - 1) === item;
  });
});
define('frontend-cp/helpers/ko-breaklines', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var content = _ref2[0];

    var text = _ember['default'].Handlebars.Utils.escapeExpression(content);
    return new _ember['default'].Handlebars.SafeString(text.replace(/(\r\n|\n|\r)/gm, '<br />'));
  });
});
define('frontend-cp/helpers/ko-contextual-helper', ['exports', 'ember'], function (exports, _ember) {

  /*
   * The same as ko-helper, except one can pass in a context.
   * Use case is a passing the component context through so properties can be
   * got or set
   *
   * See ko-case-content for an example
   *
   * args 0 - the function
   * args 1 - the context
   * args... - arguments to the function
   */
  exports['default'] = _ember['default'].Helper.helper(function (args) {
    return Reflect.apply(args[0], args[1], args.slice(2));
  });
});
define('frontend-cp/helpers/ko-datetime-format', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var dateTime = _ref2[0];

    var date = (0, _moment['default'])(dateTime);

    if (date.isBefore((0, _moment['default'])().subtract('1', 'days'))) {
      return date.format('Do MMMM YYYY hh:mm');
    } else {
      return date.fromNow();
    }
  });
});
define('frontend-cp/helpers/ko-embolden', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var fullString = _ref2[0];
    var emboldenString = _ref2[1];

    if (emboldenString) {
      var regExp = new RegExp(emboldenString.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1'), 'gi');
      return _ember['default'].String.htmlSafe((fullString || '').replace(regExp, '<b>$&</b>'));
    } else {
      return fullString;
    }
  });
});
define('frontend-cp/helpers/ko-helper', ['exports', 'ember'], function (exports, _ember) {
  var _this = this;

  exports['default'] = _ember['default'].Helper.helper(function (args) {
    return Reflect.apply(args[0], _this, args.slice(1));
  });
});
define('frontend-cp/helpers/ko-intl-key-for-field-type', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.helper(function (fieldType) {
    if (fieldType.length) {
      return 'admin.casefields.type.' + fieldType[0].toLowerCase() + '.name';
    }
  });
});
define('frontend-cp/helpers/l', ['exports', 'ember-intl/helpers/l'], function (exports, _emberIntlHelpersL) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersL['default'];
    }
  });
});
define('frontend-cp/helpers/linkify', ['exports', 'ember-linkify/helpers/linkify'], function (exports, _emberLinkifyHelpersLinkify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkifyHelpersLinkify['default'];
    }
  });
  Object.defineProperty(exports, 'linkify', {
    enumerable: true,
    get: function get() {
      return _emberLinkifyHelpersLinkify.linkify;
    }
  });
});
define('frontend-cp/helpers/locale-flag', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var locale = _ref2[0];

    if (!locale) {
      return '';
    }

    var flag = locale;
    if (locale.match('-')) {
      flag = locale.substr(locale.indexOf('-') + 1);
    }

    return 'i-png-flag-' + flag;
  });
});
define('frontend-cp/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('frontend-cp/helpers/moment-format', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalOutputFormat: _ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.outputFormat'),
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/moment-from-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/moment-to-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('frontend-cp/helpers/qa-cls', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var className = _ref2[0];

    if (_ember['default'].testing) {
      return _ember['default'].String.htmlSafe(className);
    }

    return '';
  });
});
define('frontend-cp/helpers/sanitize-html', ['exports', 'ember-sanitize/utils/sanitize', 'ember'], function (exports, _emberSanitizeUtilsSanitize, _ember) {
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(params) {
      var config = undefined,
          configName = params[1];
      if (configName) {
        //lookup the config
        config = this.container.lookup('sanitizer:' + configName);
      }

      var sanitized = (0, _emberSanitizeUtilsSanitize.sanitize)(params[0], config);
      return new _ember['default'].String.htmlSafe(sanitized);
    }
  });
});
define('frontend-cp/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('frontend-cp/helpers/t', ['exports', 'ember-intl/helpers/t', 'ember'], function (exports, _emberIntlHelpersT, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var warn = _ember['default'].warn;
  exports['default'] = _emberIntlHelpersT['default'].extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var key = _ref2[0];

      try {
        return this._super.apply(this, arguments);
      } catch (error) {
        if (error.message === 'format-message helper requires value') {
          warn('Missing translation for \'' + key + '\'. Please ensure it is defined in the translation files.');
          return _ember['default'].String.capitalize(key.split('.').get('lastObject').replace(/_/g, ' '));
        } else {
          throw error;
        }
      }
    }
  });
});
define('frontend-cp/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'frontend-cp/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_frontendCpConfigEnvironment['default'].APP.name, _frontendCpConfigEnvironment['default'].APP.version)
  };
});
define('frontend-cp/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('frontend-cp/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'frontend-cp/config/environment', 'frontend-cp/mirage/config', 'ember-cli-mirage/server'], function (exports, _emberCliMirageUtilsReadModules, _frontendCpConfigEnvironment, _frontendCpMirageConfig, _emberCliMirageServer) {
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }
      var environment = _frontendCpConfigEnvironment['default'].environment;

      if (_shouldUseMirage(environment, _frontendCpConfigEnvironment['default']['ember-cli-mirage'])) {
        var modules = (0, _emberCliMirageUtilsReadModules['default'])(_frontendCpConfigEnvironment['default'].modulePrefix);
        var options = _.assign(modules, { environment: environment, baseConfig: _frontendCpMirageConfig['default'], testConfig: _frontendCpMirageConfig.testConfig });

        new _emberCliMirageServer['default'](options);
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('frontend-cp/initializers/ember-feature-flags', ['exports', 'frontend-cp/config/environment', 'frontend-cp/features/-main'], function (exports, _frontendCpConfigEnvironment, _frontendCpFeaturesMain) {
  exports.initialize = initialize;

  function initialize(registry, application) {
    var serviceName = _frontendCpConfigEnvironment['default'].featureFlagsService || 'features';
    application.register('features:-main', _frontendCpFeaturesMain['default']);
    application.inject('route', serviceName, 'features:-main');
    application.inject('controller', serviceName, 'features:-main');
    application.inject('component', serviceName, 'features:-main');
    application.inject('features:-main', 'application', 'application:main');
  }

  exports['default'] = {
    name: 'ember-feature-flags',
    initialize: initialize
  };
});
define('frontend-cp/initializers/export-application-global', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_frontendCpConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _frontendCpConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_frontendCpConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('frontend-cp/initializers/get-helper', ['exports', 'ember', 'ember-get-helper/utils/register-helper', 'ember-get-helper/helpers/get', 'ember-get-helper/helpers/get-glimmer'], function (exports, _ember, _emberGetHelperUtilsRegisterHelper, _emberGetHelperHelpersGet, _emberGetHelperHelpersGetGlimmer) {
  exports.initialize = initialize;

  function initialize() /* container, application */{
    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberGetHelperUtilsRegisterHelper.registerHelper)('get', _emberGetHelperHelpersGet['default']);
  }

  exports['default'] = {
    name: 'get-helper',
    initialize: initialize
  };
});
define('frontend-cp/initializers/intl', ['exports', 'ember-intl/models/translation'], function (exports, _emberIntlModelsTranslation) {

  _emberIntlModelsTranslation['default'].reopen({
    //TODO: talk to Kirill about how and why the frontendcp.universal is managed, if at all?
    //ANSWER: frontendcp (now frontend) is novo's app name, universal (api) is novo's portal. they are static and will rarely change.
    getValue: function getValue(key) {
      return this['frontend.api.' + key];
    }
  });

  exports['default'] = {
    name: 'intl',
    after: 'store',

    initialize: function initialize(registry) {}
  };
});
define('frontend-cp/initializers/metrics', ['exports', 'frontend-cp/config/environment'], function (exports, _frontendCpConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    var _config$metricsAdapters = _frontendCpConfigEnvironment['default'].metricsAdapters;
    var metricsAdapters = _config$metricsAdapters === undefined ? [] : _config$metricsAdapters;
    var _config$environment = _frontendCpConfigEnvironment['default'].environment;
    var environment = _config$environment === undefined ? 'development' : _config$environment;

    var options = { metricsAdapters: metricsAdapters, environment: environment };

    application.register('config:metrics', options, { instantiate: false });
    application.inject('service:metrics', 'options', 'config:metrics');
  }

  exports['default'] = {
    name: 'metrics',
    initialize: initialize
  };
});
define('frontend-cp/initializers/print-git-info', ['exports', 'frontend-cp/config/environment'], function (exports, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'print-git-info',

    initialize: function initialize() {
      console.log(_frontendCpConfigEnvironment['default'].currentRevision);
    }
  };
});
define('frontend-cp/initializers/setup-sanitizers', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = {
    name: 'ember-sanitize-setup-sanitizers',

    initialize: function initialize(container) {
      if (container.registerOptionsForType) {
        container.registerOptionsForType('sanitizer', { instantiate: false });
      } else {
        // Ember < 2
        container.optionsForType('sanitizer', { instantiate: false });
      }
    }
  };
});
define('frontend-cp/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('frontend-cp/instance-initializers/ember-intl', ['exports', 'ember-intl/utils/add-locale-data', 'frontend-cp/config/environment'], function (exports, _emberIntlUtilsAddLocaleData, _frontendCpConfigEnvironment) {
  exports.instanceInitializer = instanceInitializer;

  function filterBy(env, type) {
    return Object.keys(requirejs._eak_seen).filter(function (key) {
      return key.indexOf(env.modulePrefix + '/' + type + '/') === 0;
    });
  }

  function instanceInitializer(instance) {
    var container = instance.lookup ? instance : instance.container;
    var service = container.lookup('service:intl');

    filterBy(_frontendCpConfigEnvironment['default'], 'cldrs').forEach(function (key) {
      (0, _emberIntlUtilsAddLocaleData['default'])(require(key, null, null, true)['default']);
    });

    filterBy(_frontendCpConfigEnvironment['default'], 'translations').forEach(function (key) {
      var localeSplit = key.split('\/');
      var locale = localeSplit[localeSplit.length - 1];
      service.createLocale(locale, require(key, null, null, true)['default']);
    });
  }

  exports['default'] = {
    name: 'ember-intl',
    initialize: instanceInitializer
  };
});
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
define('frontend-cp/instance-initializers/new-relic', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'new-relic',

    initialize: function initialize() {
      if (!doReporting()) {
        return;
      }

      _ember['default'].onerror = handleError;

      _ember['default'].RSVP.on('error', function (error) {
        if (error.name !== 'TransitionAborted') {
          handleError(error);

          _ember['default'].Logger.assert(false, error);
        }
      });

      _ember['default'].Logger.error = function (message, cause, stack) {
        handleError(generateError(cause, stack));
      };
    }
  };

  function doReporting() {
    return typeof NREUM !== 'undefined' && _frontendCpConfigEnvironment['default'].newRelicErrorReporting;
  }

  function handleError(error) {
    try {
      NREUM.noticeError(error);
    } catch (e) {
      // ignore
    }
    console.error(error.stack);
  }

  function generateError(cause, stack) {
    var error = new Error(cause);
    error.stack = stack;
    return error;
  }
});
/* eslint-disable no-console */
/* eslint-disable no-empty */
/*globals NREUM*/
define('frontend-cp/instance-initializers/pusher', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(instance) {
    var pusher = instance.container.lookup('service:pusher');
    pusher.initialize();
  }
});
define("frontend-cp/lib/keycodes", ["exports"], function (exports) {
  var backspace = 8;
  exports.backspace = backspace;
  var tab = 9;
  exports.tab = tab;
  var enter = 13;
  exports.enter = enter;
  var shift = 16;
  exports.shift = shift;
  var ctrl = 17;
  exports.ctrl = ctrl;
  var alt = 18;
  exports.alt = alt;
  var pause = 19;
  exports.pause = pause;
  var capsLock = 20;
  exports.capsLock = capsLock;
  var escape = 27;
  exports.escape = escape;
  var space = 32;
  exports.space = space;
  var pageUp = 33;
  exports.pageUp = pageUp;
  var pageDown = 34;
  exports.pageDown = pageDown;
  var end = 35;
  exports.end = end;
  var home = 36;
  exports.home = home;
  var left = 37;
  exports.left = left;
  var up = 38;
  exports.up = up;
  var right = 39;
  exports.right = right;
  var down = 40;
  exports.down = down;
  var insert = 45;
  exports.insert = insert;
  var del = 46;
  exports.del = del;
  var zero = 48;
  exports.zero = zero;
  var one = 49;
  exports.one = one;
  var two = 50;
  exports.two = two;
  var three = 51;
  exports.three = three;
  var four = 52;
  exports.four = four;
  var five = 53;
  exports.five = five;
  var six = 54;
  exports.six = six;
  var seven = 55;
  exports.seven = seven;
  var eight = 56;
  exports.eight = eight;
  var nine = 57;
  exports.nine = nine;
  var a = 65;
  exports.a = a;
  var b = 66;
  exports.b = b;
  var c = 67;
  exports.c = c;
  var d = 68;
  exports.d = d;
  var e = 69;
  exports.e = e;
  var f = 70;
  exports.f = f;
  var g = 71;
  exports.g = g;
  var h = 72;
  exports.h = h;
  var i = 73;
  exports.i = i;
  var j = 74;
  exports.j = j;
  var k = 75;
  exports.k = k;
  var l = 76;
  exports.l = l;
  var m = 77;
  exports.m = m;
  var n = 78;
  exports.n = n;
  var o = 79;
  exports.o = o;
  var p = 80;
  exports.p = p;
  var q = 81;
  exports.q = q;
  var r = 82;
  exports.r = r;
  var s = 83;
  exports.s = s;
  var t = 84;
  exports.t = t;
  var u = 85;
  exports.u = u;
  var v = 86;
  exports.v = v;
  var w = 87;
  exports.w = w;
  var x = 88;
  exports.x = x;
  var y = 89;
  exports.y = y;
  var z = 90;
  exports.z = z;
  var leftWindowKey = 91;
  exports.leftWindowKey = leftWindowKey;
  var rightWindowKey = 92;
  exports.rightWindowKey = rightWindowKey;
  var selectKey = 93;
  exports.selectKey = selectKey;
  var numpad0 = 96;
  exports.numpad0 = numpad0;
  var numpad1 = 97;
  exports.numpad1 = numpad1;
  var numpad2 = 98;
  exports.numpad2 = numpad2;
  var numpad3 = 99;
  exports.numpad3 = numpad3;
  var numpad4 = 100;
  exports.numpad4 = numpad4;
  var numpad5 = 101;
  exports.numpad5 = numpad5;
  var numpad6 = 102;
  exports.numpad6 = numpad6;
  var numpad7 = 103;
  exports.numpad7 = numpad7;
  var numpad8 = 104;
  exports.numpad8 = numpad8;
  var numpad9 = 105;
  exports.numpad9 = numpad9;
  var multiply = 106;
  exports.multiply = multiply;
  var add = 107;
  exports.add = add;
  var subtract = 109;
  exports.subtract = subtract;
  var decimalPoint = 110;
  exports.decimalPoint = decimalPoint;
  var divide = 111;
  exports.divide = divide;
  var f1 = 112;
  exports.f1 = f1;
  var f2 = 113;
  exports.f2 = f2;
  var f3 = 114;
  exports.f3 = f3;
  var f4 = 115;
  exports.f4 = f4;
  var f5 = 116;
  exports.f5 = f5;
  var f6 = 117;
  exports.f6 = f6;
  var f7 = 118;
  exports.f7 = f7;
  var f8 = 119;
  exports.f8 = f8;
  var f9 = 120;
  exports.f9 = f9;
  var f10 = 121;
  exports.f10 = f10;
  var f11 = 122;
  exports.f11 = f11;
  var f12 = 123;
  exports.f12 = f12;
  var numLock = 144;
  exports.numLock = numLock;
  var scrollLock = 145;
  exports.scrollLock = scrollLock;
  var semiColon = 186;
  exports.semiColon = semiColon;
  var equalSign = 187;
  exports.equalSign = equalSign;
  var comma = 188;
  exports.comma = comma;
  var dash = 189;
  exports.dash = dash;
  var period = 190;
  exports.period = period;
  var forwardSlash = 191;
  exports.forwardSlash = forwardSlash;
  var graveAccent = 192;
  exports.graveAccent = graveAccent;
  var openBracket = 219;
  exports.openBracket = openBracket;
  var backSlash = 220;
  exports.backSlash = backSlash;
  var closeBracket = 221;
  exports.closeBracket = closeBracket;
  var singleQuote = 222;
  exports.singleQuote = singleQuote;
});
define("frontend-cp/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/locales/en-us/admin", ["exports"], function (exports) {
  exports["default"] = {
    "navigation.apps": "Apps",
    "navigation.manage": "Manage",
    "navigation.people": "People",
    "navigation.channels": "Channels",
    "navigation.automation": "Automation",

    "administration": "Administration",
    "apps": "Apps",
    "endpoints": "Endpoints",

    "views": "Views",
    "views.buttons.add_new": "Add new",
    "views.description": "Ipsum locum dorum somethinum",
    "views.heading.edit": "Case Views / Edit",
    "views.heading.new": "Case Views / New",
    "views.heading.view_details": "View details",
    "views.label.view_title": "View title",
    "views.heading.sharing": "Sharing",
    "views.radio.label.me": "Just myself",
    "views.radio.label.all": "Every agent",
    "views.radio.label.specific": "Specific teams",
    "views.label.sharing": "Make this view available to",
    "views.sharing.ALL": "ALL",
    "views.sharing.SELF": "just myself",
    "views.heading.predicate_builder": "Include cases that match the following in this view",
    "views.heading.configure_layout": "Configure Columns",
    "views.label.configure_layout": "Customize what information is shown in this view by adding, removing and reordering fields below. You can add up to 10 columns in your view",
    "views.heading.sorting": "Sorting",
    "views.label.sorting": "In this view, default to sorting cases by",
    "views.description.sorting": "Descending means largest to smallest, most recent to oldest, highest priority to lowest priority, Z to A.",
    "views.edit.description_on.is_enabled": "View is active",
    "views.edit.description_off.is_enabled": "View is inactive",
    "views.edit.select_columns": "Please specify at least one column in \"Configure Columns\"",
    "views.order_saved.message": "New order of views saved",
    "views.enabled.message": "View enabled successfully",
    "views.disabled.message": "View disabled successfully",
    "views.deleted.message": "View deleted successfully",

    "businesshours": "Business hours",
    "businesshours.headings.index": "Business hours",
    "businesshours.buttons.add": "Add New",

    "teams": "Teams",
    "teams.agent": "{numAgents, plural, =1 {agent} other {agents}}",
    "teams.headings.index": "Teams",
    "teams.headings.edit": "Teams / {title}",
    "teams.headings.new": "Teams / New",
    "teams.buttons.add": "Add New",
    "teams.labels.filter_teams": "Filter teams",
    "teams.labels.filter_agents": "Filter agents",
    "teams.labels.delete_team": "Delete team",
    "teams.labels.delete_team_confirmation": "Are you sure you wish to delete this team?",
    "teams.labels.edit.name": "Team name",
    "teams.legend.edit.details": "Team details",
    "teams.info.title": "Team members",
    "teams.info.content": "Click on agents from the list below to add or remove from the team",

    "fields.type.field_options.add_option": "Add an option",
    "fields.type.field_options.missing_options": "Please provide at least one option",
    "fields.new.heading": "New",
    "fields.edit.heading": "Edit",
    "fields.add_new_field": "Add New Field",

    "organizationfields": "Organization Fields",
    "organizationfields.new.heading": "Organization Fields / New",
    "organizationfields.enabled.success_message": "Organization field enabled successfully",
    "organizationfields.disabled.success_message": "Organization field disabled successfully",
    "organizationfields.delete.success_message": "Organization field deleted successfully",

    "userfields": "User Fields",
    "userfields.buttons.add_new_userfield": "Add New Field",
    "userfields.type.text.name": "Text",
    "userfields.type.text.description": "Capture a small amount of text using a single line text field.",
    "userfields.type.textarea.name": "Multi-line Text",
    "userfields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "userfields.type.regex.name": "Regular expression",
    "userfields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "userfields.type.radio.name": "Radio box (single choice)",
    "userfields.type.radio.description": "Users can select one option from the options you define.",
    "userfields.type.dropdown.name": "Dropdown box (single choice)",
    "userfields.type.dropdown.description": "Users can select one option from the options you define.",
    "userfields.type.numeric.name": "Numeric",
    "userfields.type.numeric.description": "Capture an integer from users using this special text field.",
    "userfields.type.decimal.name": "Decimal",
    "userfields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "userfields.type.file.name": "File",
    "userfields.type.file.description": "Allow users to upload files to this field.",
    "userfields.type.yesno.name": "Yes or no toggle",
    "userfields.type.yesno.description": "Users can select yes or no using a toggle.",
    "userfields.type.date.name": "Date",
    "userfields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "userfields.type.checkbox.name": "Checkbox (multi choice)",
    "userfields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "userfields.type.priority.name": "Priority",
    "userfields.type.team.name": "Team",
    "userfields.type.assignee.name": "Assignee",
    "userfields.type.type.name": "Type",
    "userfields.type.status.name": "Status",
    "userfields.type.subject.name": "Subject",
    "userfields.type.message.name": "Message",
    "userfields.type.select.name": "Select",
    "userfields.type.select.description": "Selecta",
    "userfields.new.heading": "User Fields / New",
    "userfields.edit.heading": "User Fields / Edit",
    "userfields.enabled.success_message": "User field enabled successfully",
    "userfields.disabled.success_message": "User field disabled successfully",
    "userfields.delete.success_message": "User field deleted successfully",

    "caseforms": "Case Forms",
    "caseforms.buttons.add_new_caseform": "Add new form",
    "caseforms.headings.enabled_fields": "Enabled Fields",
    "caseforms.headings.disabled_fields": "Disabled Fields",
    "caseforms.label.system": "(System)",
    "caseforms.heading.customer_settings": "Customers",
    "caseforms.heading.configure_form": "Configure Form",
    "caseforms.new.heading": "Case Forms / New",
    "caseforms.edit.heading": "Case Forms / Edit",
    "caseforms.heading.agent_settings": "Agents",
    "caseforms.label.field_title": "Form title for agents",
    "caseforms.label.is_visible_to_customers": "Customers can see and select this form",
    "caseforms.help.is_visible_to_customers": "When customers can see and select case forms, they will be able to select a case form when submitting a new request in the Help Center. This means that case forms can be used to direct customers to create different types of request and to provide specific pieces of information for that request type.",
    "caseforms.label.customer_form_title": "Form title for customers",
    "caseforms.label.customer_form_description": "Form description for customers",
    "caseforms.help.api_key": "The field key is unique to this form and is used to reference fields using the Kayako API and in search.",
    "caseforms.help.configure_fields": "System fields are included in each case form by default. Add and arrange custom case fields to the case form below. You can manage case fields in the [Case fields] section.",
    "caseforms.label.add_new_field": "Add new field",
    "caseforms.remove_from_form": "Remove from form",
    "caseforms.edit.description_on.is_enabled": "Form is enabled",
    "caseforms.edit.description_off.is_enabled": "Form is disabled",

    "casefields": "Case Fields",
    "casefields.headings.enabled_fields": "Enabled Fields",
    "casefields.headings.disabled_fields": "Disabled Fields",
    "casefields.edit.heading.priorities": "Priorities",
    "casefields.type.text.name": "Text",
    "casefields.type.text.description": "Capture a small amount of text using a single line text field.",
    "casefields.type.textarea.name": "Multi-line Text",
    "casefields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "casefields.type.regex.name": "Regular expression",
    "casefields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "casefields.type.radio.name": "Radio box (single choice)",
    "casefields.type.radio.description": "Users can select one option from the options you define.",
    "casefields.type.dropdown.name": "Dropdown box (single choice)",
    "casefields.type.dropdown.description": "Users can select one option from the options you define.",
    "casefields.type.numeric.name": "Numeric",
    "casefields.type.numeric.description": "Capture an integer from users using this special text field.",
    "casefields.type.decimal.name": "Decimal",
    "casefields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "casefields.type.file.name": "File",
    "casefields.type.file.description": "Allow users to upload files to this field.",
    "casefields.type.yesno.name": "Yes or no toggle",
    "casefields.type.yesno.description": "Users can select yes or no using a toggle.",
    "casefields.type.date.name": "Date",
    "casefields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "casefields.type.checkbox.name": "Checkbox (multi choice)",
    "casefields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "casefields.type.checkbox.field_options.title": "Option title",
    "casefields.type.checkbox.field_options.tag": "Option tag",
    "casefields.type.priority.name": "Priority",
    "casefields.type.team.name": "Team",
    "casefields.type.assignee.name": "Assignee",
    "casefields.type.type.name": "Type",
    "casefields.type.status.name": "Status",
    "casefields.type.subject.name": "Subject",
    "casefields.type.message.name": "Message",
    "casefields.type.select.name": "Select",
    "casefields.type.select.description": "Selecta",
    "casefields.buttons.add_new_casefield": "Add New Field",
    "casefields.buttons.complete_locale_edit": "Done",
    "casefields.description": "Lorem ipsum dolor sit amet, diam appetere facilisis at pri, his vocibus iudicabit te. Te decore feugiat necessitatibus nec, id eos fugit dicunt. Vis ei ubique blandit, in vidit maiestatis disputationi vix, essent perpetua interesset ei mea. Et mea ubique feugait, ne nam unum clita, no his indoctum conclusionemque. Ad pri aperiri definitionem, nec ei dictas blandit.",
    "casefields.new.heading": "Case Fields / New",
    "casefields.edit.heading": "Case Fields / Edit",
    "casefields.type.cascadingselect.name": "Cascading select",
    "casefields.type.cascadingselect.description": "Allow users to drill down through categories to organize a lot of select options.",
    "casefields.edit.label.field_options": "The drop-down field will contain the options specified below.",
    "casefields.edit.help.types": "Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah.",
    "casefields.edit.heading.types": "Types",
    "casefields.edit.add_new_type": "Add a new type",
    "casefields.enabled.success_message": "Case field enabled successfully",
    "casefields.disabled.success_message": "Case field disabled successfully",
    "casefields.delete.success_message": "Case field deleted successfully",

    "casefields.edit.add_new_priority": "Add a priority",

    "case_column_title.caseid": "Case ID",
    "case_column_title.subject": "Subject",
    "case_column_title.assigneeagentid": "Assigned agent",
    "case_column_title.assigneeteamid": "Assigned team",
    "case_column_title.brandid": "Brand",
    "case_column_title.casepriorityid": "Priority",
    "case_column_title.casestatusid": "Status",
    "case_column_title.casetypeid": "Type",
    "case_column_title.channeltype": "Channel type",
    "case_column_title.createdat": "Created at",
    "case_column_title.lastcompletedat": "Completed at",
    "case_column_title.organization": "Organization",
    "case_column_title.requesterid": "Requester",
    "case_column_title.team": "Team",
    "case_column_title.updatedat": "Updated at",

    "casefields.edit.heading.agent_settings": "Agent Settings",
    "casefields.edit.heading.customer_settings": "Customer Settings",
    "casefields.edit.heading.field_options": "Field Options",
    "casefields.edit.heading.field_settings": "Field Settings",
    "casefields.edit.heading.regex": "Regular Expression",

    "casefields.edit.label.is_required_for_agents_when_updating_case": "Creating, replying to or updating a case",
    "casefields.edit.label.is_required_for_agents_when_resolving_case": "Resolving a case",
    "casefields.edit.label.field_title": "Field title",
    "casefields.edit.help.field_title": "This is the title that is displayed to your agents",
    "casefields.edit.label.is_visible_to_customers": "Customers can see this field",
    "casefields.edit.label.is_required_for_agents": "For agents, this field is required when",
    "casefields.edit.label.customer_field_title": "Field title for customers",
    "casefields.edit.label.customer_field_description": "Field description for customers",
    "casefields.edit.help.customer_field_description": "Enter an optional description into this field that will be show to customers in the help center",
    "casefields.edit.label.is_editable_by_customers": "Customers can edit this field",
    "casefields.edit.help.is_editable_by_customers": "Enable this setting to allow your customers to change the value of this field from the Help Center or through the API.",
    "casefields.edit.label.is_required_for_customers": "This field is required for customers",
    "casefields.edit.help.is_required_for_customers": "Enable this setting to require your customers to complete this field when creating or updating a case from the Help Center or through the API.",
    "casefields.edit.label.api_key": "API field key",
    "casefields.edit.help.api_key": "The field key is unique to this field and is used to reference fields using the Kayako API and in search.",
    "casefields.edit.description_on.is_enabled": "Field is enabled",
    "casefields.edit.description_off.is_enabled": "Field is disabled",
    "casefields.edit.help.is_enabled": "Disabled case fields will not be available on cases or case forms, but any existing data will still be searchable and can be referenced in reporting.",
    "casefields.edit.label.priorities": "The order of priorities matter: your priorities should go from highest to lowest. If you remove a priority, all cases using that priority will be set to no priority.",
    "casefields.help.regex": "Enter a regular expression that will be evaluated against your users' input. If the regular expression evaluates to false, the input will be deemed invalid.",
    "casefields.edit.add_new_status": "Add a new custom status",
    "casefields.edit.heading.statuses": "Statuses",
    "casefields.edit.help.statuses.1": "Case statuses typically map to your workflow and how you handle customer requests and conversations. Throughout its life, a case will move through various statuses. There are some default system statuses and you can also create statuses to customize the workflow.",
    "casefields.edit.help.statuses.2": "If SLAs are enabled in Kayako, you can determine whether or not SLA timers will pause on particular statuses. For example, you may not want the time a case spends while set to Pending (while you are waiting for a customer to get back to you) to count towards your SLA targets.",

    "casefields.edit.statuses.label.is_sla_active": "SLA timers active",
    "casefields.edit.statuses.label.is_sla_inactive": "SLA timers inactive",

    "twitter": "Twitter",
    "twitter.description": "Your Twitter accounts are blah. Organize agents into teams for blah. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Vestibulum id ligula porta felis euismod semper. Aenean lacinia bibendum nulla sed.",
    "twitter.headings.index": "Twitter",
    "twitter.edit.heading": "Twitter / @{screenName}",
    "twitter.buttons.create_account": "Connect new account",
    "twitter.heading.account_settings": "Account settings",
    "twitter.heading.capture_settings": "What to capture",
    "twitter.heading.help_settings": "Help Center",
    "twitter.label.brand": "Brand",
    "twitter.help.brand": "Your channel accounts are linked to specific Brands. When you have multiple Brands set up, Kayako will link any cases created as a result of events over this channel account to this Brand.",
    "twitter.help.capture": "Kayako can capture various events (such as messages) through this channel account into cases. Select which kind of events you want Kayako to capture.",
    "twitter.label.mentions": "Mentions",
    "twitter.description_on.mentions": "Capturing @mentions",
    "twitter.description_off.mentions": "Not capturing @mentions",
    "twitter.label.favourited_tweets": "Favorited Tweets",
    "twitter.description_on.favourited_tweets": "Capturing Favorited Tweets",
    "twitter.description_off.favourited_tweets": "Not capturing Favorited Tweets",
    "twitter.label.direct_messages": "Direct Messages",
    "twitter.description_on.direct_messages": "Capturing Direct Messages",
    "twitter.description_off.direct_messages": "Not capturing Direct Messages",
    "twitter.label.display_public_tweets": "Show latest Tweets from this account in the Help Center",
    "twitter.description_on.display_public_tweets": "Showing latest Tweets",
    "twitter.description_off.display_public_tweets": "Not showing latest Tweets",
    "twitter.help.display_public_tweets": "Kayako can display the latest non-@mention Tweets sent from this account in your Help Center. This is useful if you use this account to keep your customers up to date with news and events.",
    "twitter.connection_lost": "connection lost",
    "twitter.reconnect": "Reconnect",

    "predicate_builder.cases.subject": "Case: Subject",
    "predicate_builder.cases.casestatusid": "Case: Status",
    "predicate_builder.cases.casetypeid": "Case: Type",
    "predicate_builder.cases.casepriorityid": "Case: Priority ID",
    "predicate_builder.cases.state": "Case: State",
    "predicate_builder.cases.brandid": "Case: Brand",
    "predicate_builder.cases.assigneeteamid": "Case: Assigned Agent Team",
    "predicate_builder.cases.assigneeagentid": "Case: Assigned Agent",
    "predicate_builder.cases.requesterid": "Case: Requester",
    "predicate_builder.cases.lastcompletedat": "Case: Last Completed",
    "predicate_builder.cases.updatedat": "Case: Updated At",
    "predicate_builder.cases.createdat": "Case: Created At",
    "predicate_builder.caseslametrics.isbreached": "Case: SLA Breached",
    "predicate_builder.label.addition_of_rule": "+ New Criteria",
    "predicate_builder.tags.name": "Case: Tags",
    "predicate_builder.followers.userid": "Case: Following",
    "predicate_builder.users.organizationid": "Case: Organisation",
    "predicate_builder.cases.postcount": "Case: Number of Posts",
    "predicate_builder.operators.none": "string contains",
    "predicate_builder.operators.string_contains": "string contains",
    "predicate_builder.operators.string_does_not_contain": "string does not contain",
    "predicate_builder.operators.comparison_equalto": "is equal to",
    "predicate_builder.operators.comparison_not_equalto": "is not equal to",
    "predicate_builder.operators.comparison_lessthan": "is less than",
    "predicate_builder.operators.comparison_greaterthan": "is greater than",
    "predicate_builder.operators.collection_contains_insensitive": "string contains (case insensitive)",
    "predicate_builder.operators.collection_does_not_contain_insensitive": "string does not contain (case insensitive)",
    "predicate_builder.operators.collection_contains_any_insensitive": "string contains any (case insensitive)",
    "predicate_builder.operators.date_after": "date after",
    "predicate_builder.operators.date_after_or_on": "date after or on",
    "predicate_builder.operators.date_before": "date before",
    "predicate_builder.operators.date_before_or_on": "date before or on",
    "predicate_builder.operators.date_is": "date is",
    "predicate_builder.operators.date_is_not": "date is not"
  };
});
define("frontend-cp/locales/en-us/cases", ["exports"], function (exports) {
  exports["default"] = {
    "activity": "Activity",
    "addparticipant": "Add participant",
    "copy-someone-in.title": "Copy someone in",
    "copy-someone-in.description": "These people will be copied in on your reply.",
    "copy-someone-in.input-placeholder": "Find user or type email address",
    "copy-someone-in.fing-out-more": "Find out more about CC recipients.",
    "copy-someone-in.showing": "Showing {filtered} of {total} users",
    "copy-someone-in.not-found": "No users found.<br/>You could try typing an email address to add it.",
    "copy-someone-in.help-text": "These people will be copied in on your reply. <a href=\"#\">Find out more about CC recipients.</a>",
    "copy-someone-in.email-error": "Please enter a valid email address",
    "contents.placeholder": "Detail the case here...",
    "notes.placeholder": "Type a note...",
    "linkedCasesInline": "Link a case",
    "assignee": "Assignee",
    "assignee.agent": "Assigned agent",
    "assignee.team": "Assigned team",
    "rating": "Rating",
    "assignment-due-at": "Assignment due at",
    "created-at": "Created at",
    "creator": "Creator",
    "team": "Team",
    "brand": "Brand",
    "source": "Source",
    "created": "Created",
    "channeltype": "Channel type",
    "last_completed_at": "Last completed at",

    "case.created": "Case Created",
    "case.updated": "Case Updated",

    "requester-language": "Requester Language",
    "organization": "Organization",
    "last-update": "Last update",
    "last-update-by-a-user": "Last update by a user",
    "last-update-by-requester": "Last update by requester",
    "last-update-by-assignee": "Last update by assignee",
    "oldest-update-by-requester": "Oldest update by requester",
    "completed": "Completed",
    "sla-name": "SLA Name",
    "next-breach": "Next breach",
    "resolution-time": "Resolution time",
    "first-reply-time": "First reply time",
    "next-reply-time": "Next reply time",
    "last-replier": "Last replier",
    "reply-due-at": "Reply due at",
    "reply-twitter-message": "Send reply as link to the Help Center.",
    "reply-twitter-tooltip": "Kayako will send a public Tweet to the requester containing a link to this conversation on the Help Center.",
    "resolution-at": "Resolution at",
    "cases": "Cases",
    "due": "Due",
    "lastreplier": "Last replier",
    "lastupdated": "Last updated {time}",
    "metric.total": "{number, number} Total",
    "metric.unresolved": "Unresolved",
    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",
    "note": "Note",
    "priority": "Priority",
    "requester": "Requester",
    "satisfaction-status": "Satisfaction status",
    "status": "Status",
    "subheader": "{time, date, medium} – {time, time, short} {hasChannel, select,\n    true {created via {channel}}\n    false {}\n  } {hasBrand, select,\n    true {, {brand}}\n    false {}\n  }",
    "subject": "Subject",
    "submit": "Submit",
    "ticketid": "Case ID",
    "type": "Type",
    "macro": "Macro",
    "applymacro": "Apply Macro",
    "applymacroplaceholder": "Type to search macros",
    "channelType.MAILBOX": "email",
    "channelType.TWITTER": "Twitter",
    "channelType.TWITTER_DM": "Twitter",
    "channelType.CHAT": "Chat",
    "channelType.FACEBOOK": "Facebook",
    "channelType.none": "-",
    "channelType.NOTE": "Note",
    "channelType.HELPCENTER": "Helpcenter",
    "new_case": "New case",
    "new_case_subject_placeholder": "Click to set a subject...",
    "new_case_tab_placeholder": "New Case",

    "trash": "Trash case",
    "untrash": "Untrash",
    "trashed": "Trashed",
    "confirm.trash": "Are you sure you want to trash this?",
    "trash.success_message": "Case trashed successfully",
    "trash.restore.success_message": "Case restored successfully",

    "search.request.result_meta": "Showing {numDisplayResults} of {totalResults} users",

    "list.casesnotfound": "There are no cases here.",

    "field_title.requester": "Requester",
    "notes": "Notes",
    "form-select": "Case form",

    "sort": "Sort",
    "filter": "Filter",

    "unassigned": "(Unassigned)",

    "sort_options.newest_first": "Newest first",
    "sort_options.oldest_first": "Oldest first",

    "filter_options.all": "All",
    "filter_options.posts": "Posts",
    "filter_options.posts_activities": "Posts and activities",
    "filter_options.posts_events": "Posts and events",
    "posts.load_more": "Load more",
    "suspendedMessages.title": "Suspended messages",
    "suspendedMessages.confirmDeleteAll": "Are you sure that you want to delete these messages. This action can't be undone.",
    "suspendedMessages.table.from": "From",
    "suspendedMessages.table.subject": "Subject",
    "suspendedMessages.table.createdAt": "Received",
    "suspendedMessages.table.suspensionCode": "Suspension reason",
    "suspendedMessages.emptyList": "No suspended messages",
    "suspendedMessage.title": "Suspended message",
    "suspendedMessage.table.from": "From",
    "suspendedMessage.table.subject": "Subject",
    "suspendedMessage.table.createdAt": "Received at",
    "suspendedMessage.table.suspensionCode": "Suspension reason",
    "suspendedMessage.table.to": "Sent to",
    "suspendedMessage.table.html": "HTML Message",
    "suspendedMessage.table.text": "Text Message",
    "suspendedMessage.actions.cancel": "Cancel",
    "suspendedMessage.actions.permanentlyDelete": "Permanently delete",
    "suspendedMessage.actions.allowThrough": "Allow through",
    "sla.title.RESOLUTION_TIME": "Resolution",
    "sla.title.FIRST_REPLY_TIME": "First reply",
    "sla.title.NEXT_REPLY_TIME": "Next reply",

    "reply.click_to_start": "Click to start a",
    "reply.or_leave_a": "or leave a",
    "reply.note": "Note",
    "reply.reply": "Reply"
  };
});
define("frontend-cp/locales/en-us/feed", ["exports"], function (exports) {
  exports["default"] = {
    "replied": "replied to a case",
    "added": "added a note"
  };
});
define("frontend-cp/locales/en-us/generic", ["exports"], function (exports) {
  exports["default"] = {
    "validation_errors": "Please fill in all required fields",
    "next": "Next",
    "close": "close",
    "remove": "Remove",
    "add": "Add",
    "create_link": "Create Link",
    "datepicker.clear": "Clear",
    "datepicker.close": "Close",
    "datepicker.today": "Today",
    "dateselect.placeholder": "Select a date",
    "filesize": "{size} {unit}",
    "logout": "Logout",
    "view_your_profile": "View your profile",
    "paginatorof": "of {number, number}",
    "popover.next": "next",
    "popover.previous": "previous",
    "search": "Search helpdesk...",
    "texteditor.attachment": "Attachment",
    "texteditor.authorship": "Authorship",
    "texteditor.cc": "CC",
    "texteditor.billing": "Billing",
    "texteditor.bold": "Bold",
    "texteditor.bullet": "Bullet",
    "texteditor.image": "Image",
    "texteditor.italic": "Italic",
    "texteditor.link": "Link",
    "texteditor.list": "List",
    "texteditor.notes_reminder": "This private note will only be seen by agents",
    "users": "Users",
    "enable": "Enable",
    "enabled": "Enabled",
    "disable": "Disable",
    "disabled": "Disabled",
    "delete": "Delete",
    "edit": "Edit",
    "default": "Default",
    "profile.position": "{position}",
    "profile.place": "{place}",
    "profile.openCases": "{number} Open Cases",
    "profile.time": "Currently, {time}",
    "profile.follow": "Follow",
    "profile.unfollow": "Unfollow",
    "profile.viewProfile": "View Profile",
    "make_default": "Make default",
    "save": "Save",
    "cancel": "Cancel",
    "and": "And",
    "or": "Or",
    "also_viewing": "Also viewing",
    "track_time": "Track time",
    "time_spent": "Time spent",
    "hours_abbreviation": "Hrs",
    "day_abbreviation": "d",
    "hour_abbreviation": "h",
    "minute_abbreviation": "m",
    "SLA": "SLA",
    "select_placeholder": "Select...",
    "search_result_select_instruction": "Press enter",
    "search.no_results": "No results found",
    "search.start_typing_to_search": "Start typing to search",
    "search.searching": "Searching...",
    "shared_with": "Shared with",

    "sort.ASC": "Ascending",
    "sort.DESC": "Descending",

    "uploads.toolarge": "is too large.",
    "uploads.unknown": "upload failed. Please contact support",
    "uploads.wrongtype": "is not allowed. Allowed file types: ",
    "uploads.failed": "There was a problem uploading file(s)",

    "confirm.delete": "Are you sure you want to delete this?",
    "confirm.lose_changes": "You have unsaved changes on this page. Are you sure you want to discard these changes?",
    "changes_saved": "Changes saved",

    "create_user_panel.title": "Create a new user",
    "create_user_panel.name_label": "First and last name",
    "create_user_panel.email_label": "Email address",
    "create_user_panel.name_required": "Name is required",
    "create_user_panel.email_required": "Email address is required",
    "create_user_panel.email_invalid": "Invalid email address",
    "create_user_panel.submit": "Add user",
    "create_user_panel.info": "Other identities can be added once the user has been created.",
    "create_user_panel.cancel": "cancel",
    "create_user_panel.user_exists": "This email already in use.",
    "create_user_panel.user_exists_toast": "This email already belongs to someone",

    "create_organisation_panel.title": "Create a new organization",
    "create_organisation_panel.name_label": "Organization Name",
    "create_organisation_panel.domain_label": "Domain(s):",
    "create_organisation_panel.name_required": "Name is required",
    "create_organisation_panel.domain_required": "Email address is required",
    "create_organisation_panel.domain_invalid": "Invalid email address",
    "create_organisation_panel.submit": "Add Organization",
    "create_organisation_panel.info": "Other details can be added once the organization has been created.",

    "user_logged_out": "You have been logged out",
    "session_expired": "Your session has expired",
    "permissions_denied": "Sorry, you don't have access to perform this action. Please ask for permissions from an admin.",
    "user_credential_expired": "The credential (e.g. password) is valid but has expired",
    "resource_not_found": "Resource does not exist or has been removed",
    "generic_error": "A problem occurred and your request wasn't processed",

    "create_case_panel.title": "Create a new case",
    "create_case_panel.requester_label": "Requester/Recipient",
    "create_case_panel.requester_required": "Required",
    "create_case_panel.loading_label": "Loading users…",
    "create_case_panel.filter_label": "Showing {numFilteredUsers, number} of {numUsers, number}",
    "create_case_panel.info": "Other details can be added after continuing.",
    "create_case_panel.submit": "Create case",
    "create_case_panel.cancel": "cancel",

    "identities.component_title": "IDENTITIES",
    "identities.email_identities_title": "Email",
    "identities.twitter_identities_title": "Twitter",
    "identities.phones_identities_title": "Phone",
    "identities.facebook_identities_title": "Facebook",
    "identities.add_new": "Add new",
    "identities.add_email_identity": "Email",
    "identities.add_phone_identity": "Phone",
    "identities.add_twitter_identity": "Twitter",
    "identities.primary_comment": "(primary)",
    "identities.remove_identity": "Remove identity",
    "identities.validate_identity": "Send verification email",
    "identities.copy_identity": "Copy",
    "identities.make_primary": "Make primary",
    "identities.placeholders.email": "Add email address",
    "identities.placeholders.twitter": "Add twitter handle",
    "identities.placeholders.phone": "Add phone number",
    "identities.errors.invalid_email_format": "Email format invalid",
    "identities.errors.invalid_twitter_handle_format": "Twitter handle format invalid",
    "identities.confirm_remove": "Are you sure you want to remove this identity?",
    "identities.added.success_message": "Identity added successfully",
    "identities.removed.success_message": "Identity removed successfully",

    "error.field_required": "This action requires the field to be specified",
    "error.field_duplicate": "The value of the field is already used for another resource",
    "error.field_empty": "The value of the field cannot be empty",
    "error.field_invalid": "The value of the field is invalid",

    "reply.click_to_leave_a": "Click to leave a",
    "reply.note": "Note",

    "units.kB": "kB",
    "units.MB": "MB",
    "units.GB": "GB",
    "units.B": "B"
  };
});
define("frontend-cp/locales/en-us/login", ["exports"], function (exports) {
  exports["default"] = {
    "back": "« Back",
    "email": "Email",
    "forgot": "Forgot password?",
    "login": "Login",
    "newpassword": "New Password",
    "verificationcode": "Verification Code",
    "password": "Password",
    "repeatpassword": "Password (repeat)",
    "resetpassword": "Reset your password",
    "updatepassword": "Change password",
    "welcome": "Welcome to Kayako",

    "error.invalid_email": "Please enter a valid email address",
    "error.email_not_found": "This email doesn't exist"
  };
});
define("frontend-cp/locales/en-us/organisation", ["exports"], function (exports) {
  exports["default"] = {
    "domains": "Email domains",
    "new_organisation_placeholder": "Click to add a name",
    "delete_organisation": "Delete organisation",
    "organisation.created": "Organisation Created",
    "organisation.updated": "Organisation Updated",
    "infobar.cases.shared.true": "Can see each others' cases",
    "infobar.cases.shared.false": "Cannot see each others' cases",
    "infobar.accesslevel": "Case access"
  };
});
define("frontend-cp/locales/en-us/search", ["exports"], function (exports) {
  exports["default"] = {
    "no-results": "No results found",
    "searching": "Searching...",
    "placeholder": "Search..."
  };
});
define("frontend-cp/locales/en-us/users", ["exports"], function (exports) {
  exports["default"] = {
    "addnewuser": "Add New User",
    "button.following.active.text": "Following",
    "button.following.active.hovertext": "Stop Following",
    "button.following.inactive.text": "Not Following",
    "button.following.inactive.hovertext": "Following",
    "button.user.enabled.text": "User Enabled",
    "button.user.enabled.hovertext": "Disable User",
    "button.user.disabled.text": "User Disabled",
    "button.user.disabled.hovertext": "Enable User",
    "infobar.organization": "Organization",
    "infobar.role": "Role",
    "infobar.timezone": "Timezone",

    "newteam": "New Team",
    "addteam": "Add a team...",
    "teams": "Teams",

    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",

    "editsignature": "Edit Signature",
    "create_new_case": "Create New Case",
    "changepassword": "Change password",
    "deleteuser": "Delete user",
    "confirmdelete": "Are you sure you want to delete this user?",

    "user.created": "User Created",
    "user.updated": "User Updated",

    "metadata.created": "Created",
    "metadata.updated": "Updated",
    "metadata.lastseen": "Last seen",
    "infobar.accesslevel": "Case access",

    "infobar.agentaccess.self": "Cases assigned to agent",
    "infobar.agentaccess.teams": "Cases in agent's teams",
    "infobar.agentaccess.inherit": "(Inherit from role)",
    "infobar.agentaccess.all": "All cases",

    "infobar.organizationaccess.organization": "All organization’s cases",
    "infobar.organizationaccess.requested": "Only requested cases",

    "notes": "Notes",
    "add_a_note": "Add a note",
    "password_reset_email.success": "Password reset email has been sent",
    "recent_feedback": "Recent feedback",
    "recent_cases": "Recent cases",
    "no_feedback_available": "No feedback is available from this user",
    "no_recent_cases": "No recent cases from this user",
    "update_signature": "Proceed",
    "signaturemessage": "Please press \"Submit\" on the next page for this to take effect"
  };
});
define('frontend-cp/login/admin/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.admin');
      }, function () {
        _this.controllerFor('login').set('loginType', 'admin');
      });
    }
  });
});
define('frontend-cp/login/agent/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.agent');
      }, function () {
        _this.controllerFor('login').set('loginType', 'agent');
      });
    }
  });
});
define('frontend-cp/login/controller', ['exports', 'ember', 'frontend-cp/config/environment', 'frontend-cp/utils/format-validations', 'frontend-cp/mixins/simple-state'], function (exports, _ember, _frontendCpConfigEnvironment, _frontendCpUtilsFormatValidations, _frontendCpMixinsSimpleState) {
  var htmlSafe = _ember['default'].String.htmlSafe;
  exports['default'] = _ember['default'].Controller.extend(_frontendCpMixinsSimpleState['default'], {
    sessionService: _ember['default'].inject.service('session'),
    notificationService: _ember['default'].inject.service('notification'),
    errorHandler: _ember['default'].inject.service('error-handler'),
    intlService: _ember['default'].inject.service('intl'),
    locale: _ember['default'].inject.service(),

    newPassword1: '',
    otp: '',
    newPassword2: '',
    forgotPasswordMessage: '',
    fieldErrors: [],
    avatarBackground: null,
    validAvatar: false,
    isContentDown: false,
    prevLoginState: null,
    topFormSet: null,
    bottomFormSet: null,
    isAnimatingContent: null,
    authToken: null,

    queryParams: ['redirectTo'],
    redirectTo: null,

    init: function init() {
      this.setState('login.password.input');
      this.set('prevLoginState', this.get('currentState'));
      this._super.apply(this, arguments);
    },

    stateMap: {
      login: {
        password: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        otp: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        resetPassword: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        }
      },
      forgotPassword: {
        input: {},
        loading: {},
        confirmed: {},
        error: {}
      }
    },

    // Observers
    actionButtonText: _ember['default'].computed('currentState', function () {
      if (this.get('currentState') === 'login.resetPassword.input') {
        return this.get('intlService').findTranslationByKey('login.updatepassword');
      } else {
        return this.get('intlService').findTranslationByKey('login.login');
      }
    }),

    flipAvatar: _ember['default'].computed('validAvatar', 'avatarBackground', function () {
      return this.get('validAvatar') && this.get('avatarBackground');
    }),

    emailValidDidChange: _ember['default'].on('render', _ember['default'].observer('emailValid', function () {
      if (this.get('emailValid')) {
        this.requestAvatar(this.get('model.email'));
      }
    })),

    sessionDidClear: _ember['default'].on('init', _ember['default'].observer('sessionService.session.id', function () {
      if (this.get('sessionService.session.id') === null) {
        this.setState('login.password.input');
      }
    })),

    currentStateDidChange: _ember['default'].on('init', _ember['default'].observer('currentState', function () {
      var _this = this;

      var currentState = this.get('currentState');

      // Ignore anything outside the login root state
      if (!this.isInState('login', currentState)) {
        this.set('prevLoginState', currentState);
        return;
      }

      var stateMeta = {
        password: {
          order: 0,
          component: 'ko-login-password'
        },
        otp: {
          order: 1,
          component: 'ko-login-otp'
        },
        resetPassword: {
          order: 2,
          component: 'ko-login-reset'
        }
      };

      var prevState = this.get('prevLoginState');
      var currentSubState = this.getStateAtLevel(1, currentState);
      var prevSubState = this.getStateAtLevel(1, prevState);
      var currentStateMeta = stateMeta[currentSubState];
      var prevStateMeta = stateMeta[prevSubState];
      var isContentDown = null;

      // Only items within login level 0 state should animate up / down
      if (this.getStateAtLevel(0, prevState) === 'login') {

        /**
         * Determine the direction of movement depending on 'order' of item
         * Eg. moving from password to otp will move down,
         * otp to resetPassword will move down again
         * resetPassword to password will move up (once, we don't want to go 'past' otp)
         */

        // This should explicitly do nothing if the orders are equal
        if (currentStateMeta.order > prevStateMeta.order) {
          isContentDown = true;
        } else if (currentStateMeta.order < prevStateMeta.order) {
          isContentDown = false;
        }

        // Place content area in pre-animation state
        _ember['default'].run(function () {
          // Choose where to place the prev and next components
          _this.setProperties({
            topFormSet: isContentDown ? prevStateMeta.component : currentStateMeta.component,
            bottomFormSet: isContentDown ? currentStateMeta.component : prevStateMeta.component
          });

          // Switch off animation
          _this.set('isAnimatingContent', false);

          if (currentSubState !== prevSubState) {
            // Move content to show the previous component
            _this.set('isContentDown', !isContentDown);
          }
        });

        // In next run loop run the animation
        _ember['default'].run.next(function () {
          // Switch on animation
          _this.set('isAnimatingContent', true);
          _this.set('isContentDown', isContentDown);
        });
      }

      // Store prevState for comparison
      this.set('prevLoginState', currentState);
    })),

    // Computed Properties

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: _ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    isLogin: _ember['default'].computed('currentState', 'prevLoginState', function () {
      var currentState = this.get('currentState');
      var prevState = this.get('prevLoginState');
      var isInLogin = this.isInState('login', currentState);
      var wasInLogin = this.isInState('login', prevState);
      if (isInLogin !== wasInLogin) {
        this.clearErrors();
      }
      return isInLogin;
    }),

    isLoading: _ember['default'].computed('currentState', function () {
      return this.endsWithSubState('loading', this.get('currentState'));
    }),

    isOtp: _ember['default'].computed('currentState', function () {
      return this.isInState('login.otp', this.get('currentState'));
    }),

    isPassword: _ember['default'].computed('currentState', function () {
      return this.isInState('login.password', this.get('currentState'));
    }),

    isResetPassword: _ember['default'].computed('currentState', function () {
      return this.isInState('login.resetPassword', this.get('currentState'));
    }),

    isError: _ember['default'].computed('currentState', function () {
      return this.endsWithSubState('error', this.get('currentState'));
    }),

    isForgotPasswordEmailSent: _ember['default'].computed('currentState', function () {
      return this.isInState('forgotPassword.confirmed', this.get('currentState'));
    }),

    emailValid: _ember['default'].computed('model.email', function () {
      return (0, _frontendCpUtilsFormatValidations.validateEmailFormat)(this.get('model.email'));
    }),

    passwordValid: _ember['default'].computed('model.password', function () {
      return this.get('model.password').length > 0;
    }),

    canAttemptLogin: _ember['default'].computed('emailValid', 'passwordValid', function () {
      return this.get('emailValid') && this.get('passwordValid');
    }),

    loginButtonDisabled: _ember['default'].computed('canAttemptLogin', 'isLoading', 'newPasswordValid', 'isResetPassword', function () {
      return !this.get('canAttemptLogin') || this.get('isLoading') || !this.get('newPasswordValid') && this.get('isResetPassword');
    }),

    newPasswordValid: _ember['default'].computed('newPassword1', 'newPassword2', function () {
      var password1 = this.get('newPassword1');
      var password2 = this.get('newPassword2');
      return password1 === password2 && !!password1 && password1.length > 7;
    }),

    hasErrorMessages: _ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').length > 0;
    }),

    errorMessages: _ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').map(this.transformMessages.bind(this));
    }),

    transformMessages: function transformMessages(error) {
      if ((error.code === 'FIELD_REQUIRED' || error.code === 'FIELD_INVALID') && error.parameter === 'email') {
        return this.get('intlService').findTranslationByKey('login.error.invalid_email');
      } else if (error.code === 'ASSOCIATE_NOT_FOUND' && error.parameter === 'email') {
        return this.get('intlService').findTranslationByKey('login.error.email_not_found');
      } else {
        return error.message;
      }
    },

    // Methods

    setErrors: function setErrors(errors) {
      this.set('fieldErrors', new _ember['default'].A(errors));
    },

    clearErrors: function clearErrors() {
      this.set('fieldErrors', []);
    },

    resetRequest: function resetRequest(endpoint, params) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'PUT',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: _ember['default'].$.param(params),
          headers: { 'X-Token': _this2.get('authToken') },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    otpRequest: function otpRequest(endpoint, otp) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'GET',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          headers: { 'X-Token': _this3.get('authToken'), 'X-OTP': otp },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    authRequest: function authRequest(endpoint, params) {
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'POST',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: _ember['default'].$.param(params),
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    requestAvatar: function requestAvatar(email) {
      var _this4 = this;

      //This endpoint is won't work for alpha 1 launch
      _ember['default'].$.ajax({
        type: 'POST',
        url: '/admin/index.php?/Base/Avatar/JSON/0/200',
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        data: _ember['default'].$.param({ email: email }),
        success: function success(response) {
          /**
           * data.is_user dictates whether or not the returned image was gravatars
           * default image or not, if it was, we do not want to flip, treat it as a failed
           * call
           */

          var valid = !!response.data.is_user;

          _this4.set('validAvatar', valid);
          if (valid) {
            _this4.set('avatarBackground', response.data.data);
          }
        },
        error: function error() {
          if (console && console.warn) {
            // eslint-ignore-line
            console.warn('Avatar loading failed'); // eslint-ignore-line
          }
        }
      });
    },

    _onSuccessLogin: function _onSuccessLogin() {
      this.setState('login.password.confirmed');

      if (this.get('redirectTo')) {
        this.transitionToRoute(this.get('redirectTo'));
        return;
      }

      this.transitionToSession();
    },

    login: function login() {
      var _this5 = this;

      var locale = this.get('locale');

      this.setState('login.password.loading');
      this.get('sessionService').requestSession(this.get('model.email'), this.get('model.password')).then(function () {
        var userLocale = _this5.get('sessionService.user.locale');

        if (locale.getLocalLocale() !== userLocale) {
          locale.setup().then(function () {
            locale.persistLocaleToLocalStorage(userLocale);
            _this5._onSuccessLogin();
          });
        } else {
          _this5._onSuccessLogin();
        }
      }, function (error) {
        var errors = error.errors || [];
        var errorCodes = errors.map(function (error) {
          return error.code;
        });

        if (errorCodes.indexOf('AUTHENTICATION_FAILED') > -1) {
          _this5.setState('login.password.input');
        } else if (errorCodes.indexOf('CREDENTIAL_EXPIRED') > -1) {
          var authToken = errors[errorCodes.indexOf('CREDENTIAL_EXPIRED')].authToken;
          _this5.set('authToken', authToken);
          _this5.setState('login.resetPassword.input');
        } else if (errorCodes.indexOf('OTP_EXPECTED') > -1) {
          // User needs to enter one time password for two factor authentication
          var authToken = errors[errorCodes.indexOf('OTP_EXPECTED')].authToken;
          _this5.set('authToken', authToken);
          _this5.setState('login.otp.input');
        } else if (error instanceof _ember['default'].Error) {
          // this should never happen in production, but it might happen
          // on development stage when we have problems with models
          // (or similar)
          _this5.setState('login.password.error');
          _this5.setErrors({ message: 'System error, please contact Customer Support' });
        } else {
          _this5.setState('login.password.error');
        }

        if (console && console.error) {
          console.error(error.message);
        }
      });
    },

    resetPassword: function resetPassword() {
      var _this6 = this;

      this.setState('login.resetPassword.loading');
      this.setErrors([]);

      this.resetRequest('/api/v1/base/profile/password', {
        password: this.get('model.password'),
        new_password: this.get('newPassword1')
      }).then(function (response) {
        _this6.get('notificationService').removeAll();
        if (response.session_id) {
          _this6.set('sessionService.sessionId', response.session_id);
          _this6.transitionToSession();
        } else {
          _this6.setState('login.resetPassword.error');
          _this6.setErrors({ message: 'Session missing' });
        }
      }, function (response) {
        _this6.setState('login.resetPassword.error');
        var data = JSON.parse(response);
        _this6.setErrors(data.notifications);
        _this6.get('errorHandler').accept(data.errors);
        _this6.get('errorHandler').process();
      });
    },

    submitOtp: function submitOtp() {
      var _this7 = this;

      this.setState('login.otp.loading');
      this.setErrors([]);

      this.otpRequest('/api/v1/session', this.get('otp')).then(function (response) {
        _this7.get('notificationService').removeAll();
        if (response.session_id) {
          _this7.setState('login.otp.confirmed');
          _this7.set('sessionService.sessionId', response.session_id);
          _this7.transitionToSession();
        } else {
          _this7.setState('login.otp.error');
          _this7.setErrors([{ message: 'Session missing' }]);
        }
      }, function (response) {
        _this7.setState('login.otp.error');
        var data = JSON.parse(response);
        _this7.setErrors(data.notifications);
        _this7.get('errorHandler').accept(data.errors);
        _this7.get('errorHandler').process();
      });
    },

    transitionToSession: function transitionToSession() {
      var loginType = this.get('loginType');
      this.transitionToRoute('session.' + loginType);
    },

    /**
     * Need to SafeString all bound style attributes
     */

    loginFrontImageStyle: _ember['default'].computed(function () {
      return htmlSafe('background-image: url(\'' + _frontendCpConfigEnvironment['default'].assetRoot + '/images/user/avatar.png\');');
    }),

    loginBackImageStyle: _ember['default'].computed('avatarBackground', function () {
      if (this.get('avatarBackground')) {
        return htmlSafe('background-image: url("' + this.get('avatarBackground') + '");');
      } else {
        return htmlSafe('');
      }
    }),

    actions: {
      login: function login(e) {
        e.preventDefault();
        this.setErrors([]);

        if (!this.isInState('login', this.get('currentState'))) {
          return;
        }

        var funcMap = {
          password: this.login,
          resetPassword: this.resetPassword,
          otp: this.submitOtp
        };

        Reflect.apply(funcMap[this.getStateAtLevel(1)], this, []);
      },

      gotoForgotPassword: function gotoForgotPassword() {
        this.setState('forgotPassword.input');
      },

      gotoLogin: function gotoLogin() {
        this.setState('login.password.input');
      },

      sendForgotPasswordEmail: function sendForgotPasswordEmail(e) {
        var _this8 = this;

        e.preventDefault();
        this.setState('forgotPassword.loading');
        this.setErrors([]);
        this.authRequest('/api/v1/base/password/reset', { email: this.get('model.email') }).then(function () {
          _this8.setState('forgotPassword.confirmed');
          _this8.set('forgotPasswordMessage', 'An email with a reset link has been sent to your inbox');
        }, function (response) {
          var data = JSON.parse(response);
          _this8.setState('forgotPassword.error');
          _this8.setErrors(data.errors);
        });
      },

      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });
});
/* eslint-disable no-console, camelcase */
define('frontend-cp/login/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('login.agent');
    }
  });
});
define('frontend-cp/login/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].Object.create({
        email: '',
        password: ''
      });
    }
  });
});
define("frontend-cp/login/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 23,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h6");
          dom.setAttribute(el2, "class", "t-center t-good");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "forgotPasswordMessage", ["loc", [null, [21, 40], [21, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [28, 12], [28, 23]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1, "class", "t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [27, 20], [27, 33]]]]], [], 0, null, ["loc", [null, [27, 12], [29, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 41,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "submit");
          dom.setAttribute(el2, "class", "button button--primary u-1/1 u-mt");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "email", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [35, 39], [35, 50]]]]], [], []], "name", "forgot-password", "class", "login__input login__input--alone", "placeholder", ["subexpr", "t", ["login.email"], [], ["loc", [null, [35, 127], [35, 144]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [35, 154], [35, 163]]]]], [], []]], ["loc", [null, [35, 12], [35, 165]]]], ["attribute", "disabled", ["get", "isLoading", ["loc", [null, [39, 87], [39, 96]]]]], ["inline", "t", ["login.resetpassword"], [], ["loc", [null, [39, 99], [39, 126]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 12
              },
              "end": {
                "line": 53,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [52, 12], [52, 23]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1, "class", "t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [51, 20], [51, 33]]]]], [], 0, null, ["loc", [null, [51, 12], [53, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 16
            },
            "end": {
              "line": 60,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "topFormSet", ["loc", [null, [59, 28], [59, 38]]]]], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [59, 45], [59, 50]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [59, 61], [59, 70]]]]], [], []], "otp", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [59, 75], [59, 78]]]]], [], []], "newPassword1", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [59, 92], [59, 104]]]]], [], []], "newPassword2", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [59, 118], [59, 130]]]]], [], []]], ["loc", [null, [59, 16], [59, 132]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 16
            },
            "end": {
              "line": 65,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "bottomFormSet", ["loc", [null, [64, 28], [64, 41]]]]], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [64, 48], [64, 53]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [64, 64], [64, 73]]]]], [], []], "otp", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [64, 78], [64, 81]]]]], [], []], "newPassword1", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [64, 95], [64, 107]]]]], [], []], "newPassword2", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [64, 121], [64, 133]]]]], [], []]], ["loc", [null, [64, 16], [64, 135]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper login__actions");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["js-slide ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [75, 36], [75, 45]]]], "u-disable-link"], [], ["loc", [null, [75, 31], [75, 64]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["gotoForgotPassword"], [], ["loc", [null, [75, 74], [75, 105]]]]], ["inline", "t", ["login.forgot"], [], ["loc", [null, [75, 106], [75, 126]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/login/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "login");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "login__box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flipper");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "front");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "back");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "class", "login-form__reset-form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6, "class", "login__header login__header--reset t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__wrapper login__actions");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "class", "login-form__form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6, "class", "login__header t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__mask");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "login-form__fields-container-top");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "login-form__fields-container-bottom");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__wrapper");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "submit");
        dom.setAttribute(el7, "class", "button button--primary u-1/1 u-mt");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element2, [3, 1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [9, 1]);
        var element10 = dom.childAt(element7, [3]);
        var element11 = dom.childAt(element10, [5, 1]);
        var element12 = dom.childAt(element10, [7, 1]);
        var morphs = new Array(21);
        morphs[0] = dom.createAttrMorph(element3, 'class');
        morphs[1] = dom.createAttrMorph(element5, 'style');
        morphs[2] = dom.createAttrMorph(element6, 'style');
        morphs[3] = dom.createAttrMorph(element7, 'class');
        morphs[4] = dom.createAttrMorph(element8, 'onsubmit');
        morphs[5] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[6] = dom.createMorphAt(element8, 3, 3);
        morphs[7] = dom.createMorphAt(element8, 5, 5);
        morphs[8] = dom.createMorphAt(element8, 7, 7);
        morphs[9] = dom.createAttrMorph(element9, 'class');
        morphs[10] = dom.createAttrMorph(element9, 'onclick');
        morphs[11] = dom.createMorphAt(element9, 0, 0);
        morphs[12] = dom.createAttrMorph(element10, 'onsubmit');
        morphs[13] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element10, 3, 3);
        morphs[15] = dom.createAttrMorph(element11, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
        morphs[18] = dom.createAttrMorph(element12, 'disabled');
        morphs[19] = dom.createMorphAt(element12, 0, 0);
        morphs[20] = dom.createMorphAt(element10, 9, 9);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["flip-container ", ["subexpr", "if", [["get", "flipAvatar", ["loc", [null, [3, 36], [3, 46]]]], "flip"], [], ["loc", [null, [3, 31], [3, 55]]]], " ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [3, 61], [3, 70]]]], "a-success"], [], ["loc", [null, [3, 56], [3, 84]]]], " ", ["subexpr", "if", [["get", "isError", ["loc", [null, [3, 90], [3, 97]]]], "a-error"], [], ["loc", [null, [3, 85], [3, 109]]]]]]], ["attribute", "style", ["get", "loginFrontImageStyle", ["loc", [null, [6, 44], [6, 64]]]]], ["attribute", "style", ["get", "loginBackImageStyle", ["loc", [null, [9, 44], [9, 63]]]]], ["attribute", "class", ["concat", ["login-form__container ", ["subexpr", "if", [["get", "isLogin", ["loc", [null, [15, 45], [15, 52]]]], "u-slide"], [], ["loc", [null, [15, 40], [15, 64]]]]]]], ["attribute", "onsubmit", ["subexpr", "action", ["sendForgotPasswordEmail"], [], ["loc", [null, [16, 54], [16, 90]]]]], ["inline", "t", ["login.resetpassword"], [], ["loc", [null, [17, 66], [17, 93]]]], ["block", "if", [["get", "isForgotPasswordEmailSent", ["loc", [null, [19, 16], [19, 41]]]]], [], 0, null, ["loc", [null, [19, 10], [23, 17]]]], ["block", "if", [["get", "hasErrorMessages", ["loc", [null, [25, 16], [25, 32]]]]], [], 1, null, ["loc", [null, [25, 10], [31, 17]]]], ["block", "if", [["subexpr", "not", [["get", "isForgotPasswordEmailSent", ["loc", [null, [33, 21], [33, 46]]]]], [], ["loc", [null, [33, 16], [33, 47]]]]], [], 2, null, ["loc", [null, [33, 10], [41, 17]]]], ["attribute", "class", ["concat", ["js-slide ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [44, 36], [44, 45]]]], "u-disable-link"], [], ["loc", [null, [44, 31], [44, 64]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["gotoLogin"], [], ["loc", [null, [44, 74], [44, 96]]]]], ["inline", "t", ["login.back"], [], ["loc", [null, [44, 97], [44, 115]]]], ["attribute", "onsubmit", ["subexpr", "action", ["login"], [], ["loc", [null, [47, 51], [47, 69]]]]], ["inline", "t", ["login.welcome"], [], ["loc", [null, [48, 45], [48, 66]]]], ["block", "if", [["get", "hasErrorMessages", ["loc", [null, [49, 16], [49, 32]]]]], [], 3, null, ["loc", [null, [49, 10], [54, 17]]]], ["attribute", "class", ["concat", ["login-form__content ", ["subexpr", "if", [["get", "isAnimatingContent", ["loc", [null, [56, 49], [56, 67]]]], "login-form__content--animate"], [], ["loc", [null, [56, 44], [56, 100]]]], " ", ["subexpr", "if", [["get", "isContentDown", ["loc", [null, [56, 106], [56, 119]]]], "login-form__content-down"], [], ["loc", [null, [56, 101], [56, 148]]]]]]], ["block", "if", [["get", "topFormSet", ["loc", [null, [58, 22], [58, 32]]]]], [], 4, null, ["loc", [null, [58, 16], [60, 23]]]], ["block", "if", [["get", "bottomFormSet", ["loc", [null, [63, 22], [63, 35]]]]], [], 5, null, ["loc", [null, [63, 16], [65, 23]]]], ["attribute", "disabled", ["get", "loginButtonDisabled", ["loc", [null, [71, 87], [71, 106]]]]], ["content", "actionButtonText", ["loc", [null, [71, 109], [71, 129]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "currentState", ["loc", [null, [73, 25], [73, 37]]]], "login.resetPassword.input"], [], ["loc", [null, [73, 21], [73, 66]]]]], [], ["loc", [null, [73, 16], [73, 67]]]]], [], 6, null, ["loc", [null, [73, 10], [77, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define('frontend-cp/mail/model', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    from: _emberData['default'].attr('string'),
    to: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    html: _emberData['default'].attr('string'),
    isSuspended: _emberData['default'].attr('boolean'),
    status: _emberData['default'].attr('string'),
    reason: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    suspensionCode: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/metrics-adapters/base', ['exports', 'ember-metrics/metrics-adapters/base'], function (exports, _emberMetricsMetricsAdaptersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersBase['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/google-analytics', ['exports', 'ember-metrics/metrics-adapters/google-analytics'], function (exports, _emberMetricsMetricsAdaptersGoogleAnalytics) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersGoogleAnalytics['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/google-tag-manager', ['exports', 'ember-metrics/metrics-adapters/google-tag-manager'], function (exports, _emberMetricsMetricsAdaptersGoogleTagManager) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersGoogleTagManager['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/mixpanel', ['exports', 'ember-metrics/metrics-adapters/mixpanel'], function (exports, _emberMetricsMetricsAdaptersMixpanel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersMixpanel['default'];
    }
  });
});
define('frontend-cp/mirage/config', ['exports', 'ember-cli-mirage', 'frontend-cp/mirage/fixtures/en-us-strings', 'moment', 'ember'], function (exports, _emberCliMirage, _frontendCpMirageFixturesEnUsStrings, _moment, _ember) {

  // API Inconsistencies
  //
  // Collections are sometimes arrays and are named with a plural sometimes
  // they are objects with numbered keys and are named singularly.
  //
  // businesshour is one word in teams but two in session resource
  //
  // resources in /view takes an array not an object
  //
  // identityDomain in resources the root of views/:id/cases is an object with numbered keys but
  // when it is nested in organization it is an object in an array
  //

  exports['default'] = function () {
    var _this = this;

    // Helper functions
    function arrayToObjectWithNumberedKeys(source) {
      var pos = 1;
      var object = {};

      source.forEach(function (item) {
        object[pos] = item;
        pos++;
      });

      return object;
    }

    this.passthrough('http://api.segment.io/**');

    // Endpoints
    this.get('/api/v1/locales/en-us/strings', function (db) {
      return _frontendCpMirageFixturesEnUsStrings['default'][0];
    });

    this.get('/api/v1/locales/en-us', function () {
      return {
        status: 200,
        data: {
          locale: 'en-us',
          name: 'English (United States)',
          native_name: 'English (United States)',
          region: 'US',
          native_region: 'United States',
          script: '',
          variant: '',
          direction: 'LTR',
          is_enabled: true,
          created_at: '2015-05-28T14:12:59Z',
          updated_at: '2015-05-28T14:12:59Z',
          resource_type: 'locale'
        },
        resource: 'locale'
      };
    });

    this.get('/api/v1/users/:id/events', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var events = db.events;
      if (since) {
        events = events.filter(function (event) {
          return (0, _moment['default'])(event.created_at).isAfter(_moment['default'].unix(since));
        });
      } else if (until) {
        events = events.filter(function (event) {
          return (0, _moment['default'])(event.created_at).isBefore(_moment['default'].unix(until));
        });
      }
      return {
        data: events,
        resource: 'event',
        status: 200,
        total_count: db.events.length
      };
    });

    this.post('/api/v1/users', function (db, req) {
      var data = JSON.parse(req.requestBody);
      data.resource_type = 'user';
      data.tags = [];
      var user = db.users.insert(data);
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: user,
        resource: user.resource_type
      });
    });

    this.post('/api/v1/identities/emails', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');

      data.resource_type = 'identity_email';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-emails'].insert(data);
      db.users.update(user.id, { emails: [identity].concat(user.emails) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/identities/twitter', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');
      data.resource_type = 'identity_twitter';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-twitters'].insert(data);
      db.users.update(user.id, { twitter: [identity].concat(user.twitter) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/identities/phones', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');
      data.resource_type = 'identity_phone';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-phones'].insert(data);
      db.users.update(user.id, { phones: [identity].concat(user.phones) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });

    this.put('/api/v1/identities/emails/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-emails'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_email'
      };
    });

    this.put('/api/v1/identities/emails/:id/send_verification_email', function (db, req) {
      return {
        status: 200,
        notifications: [{
          type: 'INFO',
          message: 'An email has been sent to your email id',
          sticky: false
        }]
      };
    });

    this.post('/api/v1/identities/emails/:id/send_validation_email', function () {
      return { status: 200 };
    });

    this.put('/api/v1/identities/twitter/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-twitters'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_twitter'
      };
    });

    this.put('/api/v1/identities/phones/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-phones'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_phone'
      };
    });

    this.put('/api/v1/identities/facebook/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-facebooks'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_facebook'
      };
    });

    this['delete']('/api/v1/identities/emails/:id', function (db, req) {
      db['identity-emails'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/twitter/:id', function (db, req) {
      db['identity-twitters'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/phones/:id', function (db, req) {
      db['identity-phones'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/facebook/:id', function (db, req) {
      db['identity-facebooks'].remove(req.params.id);
      return { status: 200 };
    });

    this.get('/api/v1/roles', function (db) {
      return {
        status: 200,
        data: db.roles,
        resource: 'role',
        offset: 0,
        limit: 10,
        total_count: db.roles.length
      };
    });

    this.get('/api/v1/roles/:id', function (db, request) {
      return {
        status: 200,
        data: db.roles.find(request.params.id),
        resource: 'role'
      };
    });

    this.get('/api/v1/roles/:id/permissions', function (db) {
      return {
        status: 200,
        data: db.permissions,
        resource: 'permission',
        offset: 0,
        limit: 10,
        total_count: db.permissions.length
      };
    });

    this.post('/admin/index.php', function (db) {
      return {
        status: 200,
        data: {
          is_user: false
        }
      };
    });

    this.get('/api/v1/organizations', function (db) {
      return {
        status: 200,
        data: db.organizations,
        resource: 'organization',
        total_count: db.organizations.length
      };
    });

    this.post('/api/v1/organizations', function (db, req) {
      var data = JSON.parse(req.requestBody);
      data.resource_type = 'organization';
      data.tags = [];
      data.custom_fields = [];
      var domains = [data.domains].map(function (domain) {
        return db['identity-domains'].insert({ domain: domain, resource_type: 'identity_domain', is_primary: true });
      });
      data.domains = domains.mapBy('id');
      var organization = db.organizations.insert(data);
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: organization,
        resource: data.resource_type,
        resources: {
          identity_domain: arrayToObjectWithNumberedKeys(domains)
        }
      });
    });

    this.get('/api/v1/views/:id', function (db, req) {
      var view = db.views.find(req.params.id);

      if (view.columns) {
        view.columns.forEach(function (column) {
          Reflect.deleteProperty(column, 'id');
        });
      }

      return {
        data: view,
        resource: 'view',
        status: 200,
        resources: {
          predicate_collection: arrayToObjectWithNumberedKeys(view.predicate_collections)
        }
      };
    });

    this.get('/api/v1/views', function (db) {
      var views = db.views;

      if (views) {
        views.forEach(function (view) {
          if (view.columns) {
            view.columns.forEach(function (column) {
              Reflect.deleteProperty(column, 'id');
            });
          }
        });
      }

      return {
        data: views,
        limit: 10,
        offset: 0,
        resource: 'view',
        resources: {
          predicate_collection: arrayToObjectWithNumberedKeys(db['predicate-collections'])
        },
        status: 200,
        total_count: db.views.length
      };
    });

    this.post('/api/v1/views', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var columnsResponseData = [];

      requestData.columns = requestData.columns.forEach(function (column) {
        columnsResponseData.push({
          name: column,
          resource_type: 'column'
        });
      });

      requestData.predicate_collections = requestData.predicate_collections.map(function (collection) {
        var id = db['predicate-collections'].insert().id;
        var propositions = [];

        collection.forEach(function (proposition) {
          propositions.push({
            field: proposition.field,
            operator: proposition.operator.key,
            value: proposition.value
          });
        });

        db['predicate-collections'].update(id, {
          uuid: id,
          operator: 'OR',
          propositions: propositions
        });

        return {
          id: id,
          resource_type: 'predicate_collection'
        };
      });

      var responseData = db.views.insert(requestData);

      responseData.resource_type = 'view';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'view',
        resources: {
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          predicate_collection: arrayToObjectWithNumberedKeys(db['predicate-collections']),
          organization_field: arrayToObjectWithNumberedKeys(db['organization-fields']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/credentials', function () {
      return {
        status: 200,
        data: {
          realtime_app_key: null,
          realtime_chat_app_key: null
        },
        resource: 'credential',
        resources: {}
      };
    });

    this.get('/api/v1/views/definition', function (db) {
      return {
        data: db.definitions,
        resource: 'definition',
        status: 200,
        total_count: db.definitions.length
      };
    });

    this.get('/api/v1/views/columns', function (db) {
      return {
        data: db.columns,
        status: 200,
        resource: 'column',
        total_count: db.columns.length
      };
    });

    this.get('/api/v1/views/counts', function (db) {
      return {
        data: [],
        status: 200,
        resource: 'view-count',
        total_count: 0
      };
    });

    this.put('/api/v1/base/profile/password', function (db, request) {
      var split = request.requestBody.split('=');
      var newPassword = split[2];
      var oldPassword = split[1].split('&')[0];

      if (oldPassword === newPassword) {
        return new _emberCliMirage['default'].Response(400, {}, {
          status: 400,
          errors: [{
            code: 'FIELD_INVALID',
            parameter: 'new_password',
            message: 'The value of the field is invalid',
            more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+FIELD_INVALID'
          }],
          notifications: [{
            type: 'ERROR',
            message: 'You cannot reuse an old password, please specify a new password',
            sticky: false
          }]
        });
      }

      var session = db.sessions[0];
      return {
        status: 200,
        session_id: session.id
      };
    });

    this.get('/api/v1/session', function (db, request) {
      // otp@kayako.com : setup
      if (request.requestHeaders.Authorization === 'Basic b3RwQGtheWFrby5jb206c2V0dXA=') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'OTP_EXPECTED',
            message: 'To complete logging in you need to provide the one-time password'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new _emberCliMirage['default'].Response(403, {}, response);
      }

      // reset@kayako.com : longpass
      if (request.requestHeaders.Authorization === 'Basic cmVzZXRAa2F5YWtvLmNvbTpsb25ncGFzcw==') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'CREDENTIAL_EXPIRED',
            message: 'The credential (e.g. password) is valid but has expired'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new _emberCliMirage['default'].Response(403, {}, response);
      }

      var session = db.sessions[0];
      var user = session.user;
      if (request.requestHeaders['X-OTP']) {
        if (request.requestHeaders['X-OTP'] === '666') {
          return new _emberCliMirage['default'].Response(401, {}, {
            status: 401,
            errors: [{
              code: 'AUTHENTICATION_FAILED',
              message: 'Used authentication credentials are invalid or signature verification failed',
              more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+AUTHENTICATION_FAILED'
            }]
          });
        }

        return {
          session_id: session.id,
          status: 200
        };
      }

      return {
        status: 200,
        data: session,
        resource: 'session',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(user.emails),
          identity_phone: arrayToObjectWithNumberedKeys(user.phones),
          identity_twitter: arrayToObjectWithNumberedKeys(user.twitter),
          identity_facebook: arrayToObjectWithNumberedKeys(user.facebook),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(user.teams),
          user: arrayToObjectWithNumberedKeys([user]),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/teams', function (db) {
      return {
        status: 200,
        data: db.teams,
        resource: 'team',
        offset: 0,
        limit: 10,
        total_count: db.teams.length
      };
    });

    this.get('/api/v1/teams/:id/members', function () {
      return {
        status: 200,
        data: [],
        resource: 'user',
        offset: 0,
        limit: 10,
        total_count: 0
      };
    });

    this.get('/api/v1/teams/:id', function (db, req) {
      return {
        status: 200,
        data: db.teams.find(req.params.id),
        resource: 'team'
      };
    });

    this.get('/api/v1/users', function (db, req) {
      var offset = parseInt(req.queryParams.offset, 10);
      var limit = parseInt(req.queryParams.limit, 10);
      var users = db.users.slice(offset, offset + limit);
      return {
        status: 200,
        data: users,
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.emails);
          }, [])),
          identity_twitter: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.twitter);
          }, [])),
          identity_phone: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.phones);
          }, [])),
          identity_facebook: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.facebook);
          }, [])),
          role: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat([u.role]);
          }, [])),
          team: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.teams);
          }, [])),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: users.length
      };
    });

    this.get('/api/v1/users/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db.users.find(id),
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        total_count: db.users.length
      };
    });

    this.get('/api/v1/users/:id/cases', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'case',
        limit: 10,
        offset: 0,
        resources: {},
        total_count: 0
      };
    });

    this.get('/api/v1/users/:id/notes', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'note'
      };
    });

    this['delete']('/api/v1/session', function () {
      return {
        status: 200
      };
    });

    this.post('/api/v1/base/password/reset', function () {
      return {
        status: 200,
        auth_token: 'yh5wFffnVzOi5IyYr1aMwojpcRJw0FGid3S9r5iDumvLsPI0fRWBl4VfTEpPkodWwUvLlQXr3zJkfTxC'
      };
    });

    this.get('/api/v1/cases/forms/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db['case-forms'].find(id),
        resource: 'case_form',
        resources: {}
      };
    });

    this.get('/api/v1/cases/forms', function (db) {
      return {
        data: db['case-forms'],
        resource: 'case_form',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          language: arrayToObjectWithNumberedKeys(db.languages)
        },
        status: 200,
        total_count: db['case-forms'].length
      };
    });

    this.post('/api/v1/cases/forms', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['case-forms'].insert(requestData);
      responseData.is_enabled = true;

      responseData.resource_type = 'case_form';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/cases/forms/default', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var caseForm = db['case-forms'].find(requestData.form_id);
      caseForm.is_default = true;

      var responseData = db['case-forms'].update(requestData.form_id, caseForm);

      responseData.resource_type = 'case_form';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.put('/api/v1/cases/forms/:id', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['case-forms'].update(request.params.id, requestData);

      responseData.resource_type = 'case_form';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this['delete']('/api/v1/cases/forms/:id', function (db, request) {
      db['case-forms'].remove(request.params.id);

      var payload = {
        status: 200
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.get('/api/v1/cases/channels', function (db, request) {
      return {
        status: 200,
        data: db.channels,
        resource: 'channel',
        resources: {
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes)
        }
      };
    });

    this.get('/api/v1/views/:id/cases', function (db, request) {
      var cases = db.cases;
      var _request$queryParams = request.queryParams;
      var orderByColumn = _request$queryParams.order_by_column;
      var orderBy = _request$queryParams.order_by;
      var limit = _request$queryParams.limit;
      var offset = _request$queryParams.offset;

      limit = parseInt(limit || 1000000, 10);
      offset = parseInt(offset || 0, 10);

      if (orderByColumn === 'caseid') {
        orderByColumn = 'id';
      }

      if (orderBy && orderByColumn) {
        if (orderBy === 'asc') {
          cases = cases.sort(function (a, b) {
            return _ember['default'].compare(a[orderByColumn], b[orderByColumn]);
          });
        } else if (orderBy === 'desc') {
          cases = cases.sort(function (a, b) {
            return -_ember['default'].compare(a[orderByColumn], b[orderByColumn]);
          });
        }
      }
      var paginatedCases = cases.slice(offset, offset + limit);

      return {
        status: 200,
        data: paginatedCases,
        resource: 'case',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          language: db.languages,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields'])
        },
        offset: offset,
        limit: limit,
        total_count: db.cases.length
      };
    });

    this.get('/api/v1/cases/:id/posts', function (db) {
      return {
        data: db.posts,
        limit: 10,
        resource: 'post',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          attachments: arrayToObjectWithNumberedKeys(db.attachments),
          case_message: arrayToObjectWithNumberedKeys(db['case-messages']),
          contact_address: arrayToObjectWithNumberedKeys(db['contact-addresses']),
          contact_website: arrayToObjectWithNumberedKeys(db['contact-websites']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_phone: arrayToObjectWithNumberedKeys(db['identity-phones']),
          language: arrayToObjectWithNumberedKeys(db.languages),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          message_recipient: arrayToObjectWithNumberedKeys(db['message-recipients']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          role: arrayToObjectWithNumberedKeys(db.roles),
          user: arrayToObjectWithNumberedKeys(db.users)
        },
        status: 200,
        total_count: db.posts.length
      };
    });

    this.get('/api/v1/cases/:case_id/posts/:post_id', function (db, req) {
      var post = db.posts.find(req.params.post_id);

      return {
        status: 200,
        data: post,
        resource: 'post',
        resources: {}
      };
    });

    this.post('/api/v1/cases', function (db, request) {
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        resource: 'case',
        data: {
          id: 123,
          resource_type: 'case',
          created_at: '2015-09-28T14:12:59Z',
          updated_at: '2015-09-28T14:12:59Z'
        },
        resources: {}
      });
    });

    this.put('/api/v1/cases/:id/trash', function (db, req) {
      return {
        status: 200,
        resource: 'case',
        data: db.cases.update(req.params.id, { state: 'TRASH' })
      };
    });

    this.put('/api/v1/cases/:id/restore', function (db, req) {
      return {
        status: 200,
        resource: 'case',
        data: db.cases.update(req.params.id, { state: 'ACTIVE' })
      };
    });

    this.put('/api/v1/cases/:id', function (db, req) {
      var body = JSON.parse(req.requestBody);
      body.tags = String(body.tags).split(',');

      var targetCase = db.cases.update(req.params.id, body);

      return {
        status: 200,
        resource: 'case',
        data: targetCase
      };
    });

    this.get('/api/v1/cases/:id', function (db, request) {
      if (isNaN(request.params.id)) {
        throw Error('Caught by a wild card!');
      }
      var id = parseInt(request.params.id);
      return {
        status: 200,
        data: db.cases.find(id),
        resource: 'case',
        resources: {
          language: db.languages,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/cases/:id/notes', function (db) {
      return db.casesnotes[0];
    });

    this.post('/api/v1/cases/:id/notes', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var targetCase = db.cases.update(req.params.id, { has_notes: true });
      var post = _this.create('post', {
        contents: data.contents,
        'case': targetCase,
        creator: targetCase.creator
      });
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: {
          post: { id: post.id, resource_type: 'post' },
          'case': { id: targetCase.id, resource_type: 'case' },
          resource_type: 'case_note'
        },
        resource: 'case_note',
        resources: {
          post: arrayToObjectWithNumberedKeys([post]),
          'case': arrayToObjectWithNumberedKeys([targetCase])
        }
      });
    });

    this.get('/api/v1/cases/:id/messages', function (db) {
      return {
        data: [],
        limit: 10,
        offset: 0,
        resource: 'case_message',
        status: 200,
        total_count: 0
      };
    });

    this.get('/api/v1/messages/:id', function (db, req) {
      var message = db.messages.find(req.params.id);
      if (message) {
        return { status: 200, data: message, resource: 'case_message' };
      } else {
        return { status: 404 };
      }
    });

    this.get('/api/v1/cases/:id/activities', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var activities = db.activities;
      if (since) {
        activities = activities.filter(function (activity) {
          return (0, _moment['default'])(activity.created_at).isAfter(_moment['default'].unix(since));
        });
      } else if (until) {
        activities = activities.filter(function (activity) {
          return (0, _moment['default'])(activity.created_at).isBefore(_moment['default'].unix(until));
        });
      }
      return {
        data: activities,
        resource: 'activity',
        status: 200,
        total_count: db.activities.length
      };
    });

    this.get('/api/v1/cases/:id/reply/channels', function (db) {
      return {
        data: db.channels,
        resource: 'channel',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          facebook_account: arrayToObjectWithNumberedKeys(db['facebook-accounts']),
          facebook_page: arrayToObjectWithNumberedKeys(db['facebook-pages']),
          language: db.languages,
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          twitter_account: arrayToObjectWithNumberedKeys(db['twitter-accounts'])
        },
        status: 200,
        total_count: db.channels.length
      };
    });

    this.post('/api/v1/cases/:id/reply', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var targetCase = db.cases.find(req.params.id);

      var newPost = _this.create('post', { contents: data.contents, 'case': targetCase, creator: targetCase.creator });
      var note = {};
      if (JSON.parse(req.requestBody).channel === 'NOTE') {
        newPost.original = { id: 6, resource_type: 'note' };
        note = {
          6: {
            id: 6,
            body_text: 'test',
            color: 'YELLOW',
            attachments: [],
            download_all: null,
            created_at: '2015-11-26T13:52:27Z',
            updated_at: '2015-11-26T13:52:27Z',
            resource_type: 'note',
            resource_url: 'http://novo/api/v1/cases/1/notes/10'
          }
        };
      }

      var posts = [newPost];
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: {
          posts: posts.map(function (p) {
            return { id: p.id, resource_type: 'post' };
          }),
          'case': { id: targetCase.id, resource_type: 'case' },
          resource_type: 'case_reply'
        },
        resource: 'case_reply',
        resources: {
          note: note,
          post: arrayToObjectWithNumberedKeys(posts),
          'case': arrayToObjectWithNumberedKeys([targetCase])
        }
      });
    });

    this.get('/api/v1/cases/priorities', function (db) {
      return {
        data: db['case-priorities'],
        resource: 'case_priority',
        resources: {
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        status: 200,
        total_count: db['case-priorities'].length
      };
    });

    this.post('/api/v1/cases/priorities', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.put('/api/v1/cases/priorities/:id', function (db, request) {
      return {};
    });

    this['delete']('/api/v1/cases/priorities/:id', function () {
      return { status: 200 };
    });

    this.get('/api/v1/cases/types', function (db) {
      return {
        data: db['case-types'],
        resource: 'case_type',
        status: 200,
        total_count: db['case-types'].length
      };
    });

    this.post('/api/v1/cases/statuses', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.get('/api/v1/cases/statuses', function (db) {
      return {
        data: db['case-statuses'],
        resource: 'case_status',
        resources: {
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        status: 200,
        total_count: db['case-statuses'].length
      };
    });

    this.get('/api/v1/cases/statuses/:id', function (db, request) {
      return {
        data: db['case-statuses'].find(request.params.id),
        resource: 'case_status',
        status: 200
      };
    });

    this.put('/api/v1/cases/statuses/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var updatedStatus = db['case-statuses'].update(id, requestData);

      return {
        data: updatedStatus,
        resource: 'case_status',
        status: 200
      };
    });

    this['delete']('/api/v1/cases/statuses/:id', function () {
      return { status: 200 };
    });

    this.put('/api/v1/cases/types/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var updatedType = db['case-types'].update(id, requestData);

      return {
        data: updatedType,
        resource: 'case_type',
        status: 200
      };
    });

    this['delete']('/api/v1/cases/types/:id', function () {
      return { status: 200 };
    });

    this.post('/api/v1/cases/types', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.get('/api/v1/cases/reply/channels', function (db) {
      return db.casesreplychannels[0];
    });

    this.get('/api/v1/cases/:id/channels', function (db) {
      return {
        data: [],
        resource: 'channel',
        status: 200
      };
    });

    this.get('/api/v1/autocomplete/emails', function (db, request) {
      return {
        status: 200,
        data: db['identity-autocomplete-emails'],
        resource: 'identity',
        resources: {
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          organization: arrayToObjectWithNumberedKeys(db.organizations)
        },
        total_count: 10
      };
    });

    this.get('/api/v1/autocomplete/tags', function (db, request) {
      var tagName = request.queryParams.name;
      var tags = db.tags.filter(function (tag) {
        return tag.name.indexOf(tagName) !== -1;
      });
      return {
        status: 200,
        data: tags,
        resource: 'tag',
        total_count: tags.length
      };
    });

    this.get('/api/v1/cases/macros', function (db) {
      return {
        status: 200,
        data: db.macros,
        resource: 'macro',
        resources: {
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: db.macros.length
      };
    });

    this.get('/api/v1/cases/ratings/recent', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'macro',
        total_count: 0
      };
    });

    this.get('/api/v1/autocomplete/users', function (db, request) {
      var queryString = request.queryParams.name.toLowerCase();
      var users = db.users.filter(function (u) {
        return u.full_name.toLowerCase().indexOf(queryString) > -1;
      });

      return {
        status: 200,
        data: users,
        resource: 'user',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.emails);
          }, [])),
          identity_twitter: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.twitter);
          }, [])),
          identity_phone: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.phones);
          }, [])),
          identity_facebook: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.facebook);
          }, [])),
          role: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat([u.role]);
          }, [])),
          team: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.teams);
          }, [])),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: users.length
      };
    });

    this.get('/api/v1/search/all', function (db, request) {
      var queryString = request.queryParams.query.toLowerCase();
      if (request.queryParams['in'] === 'users') {
        var users = db.users.filter(function (u) {
          return u.full_name.toLowerCase().indexOf(queryString) > -1;
        });
        var results = users.map(function (u) {
          return {
            id: u.id,
            title: u.full_name,
            data: { id: u.id, resource_type: 'user' },
            resource: 'user',
            snippet: u.full_name.replace(request.queryParams.query, '<em>' + request.queryParams.query + '</em>')
          };
        });
        return {
          status: 200,
          resource: 'object',
          data: [{ results: results, resource: 'user' }],
          resources: {
            user: arrayToObjectWithNumberedKeys(users),
            identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
              return ary.concat(u.emails);
            }, []))
          }
        };
      } else {
        throw new Error('This search is not implemented in mirage');
      }
    });

    this.get('/api/v1/plan', function (db) {
      return {
        status: 200,
        data: db.plans[0],
        resource: 'plan',
        resources: []
      };
    });

    this.get('/api/v1/plans', function (db) {
      return {
        status: 200,
        data: db.plans,
        resource: 'plan',
        resources: []
      };
    });

    this.get('/api/v1/cases/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    this.get('/api/v1/users/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    this.get('/api/v1/organizations/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    //User Fields
    this.post('/api/v1/users/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['user-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'user_field';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/users/fields', function (db) {
      return {
        status: 200,
        data: db['user-fields'],
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/tags/:id', function (db, req) {
      return {
        status: 200,
        data: db.tags.find(req.params.id),
        resource: 'tag'
      };
    });

    this.put('/api/v1/users/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['user-fields'].update(id, requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'user_field';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/users/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['user-fields'].find(request.params.id),
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/users/fields/:id', function (db, request) {
      var id = request.params.id;

      db['user-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/users/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/users/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/users/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });
    //User Fields End

    //Case Fields
    this.post('/api/v1/cases/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['case-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'case_field';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/cases/fields', function (db) {
      return {
        status: 200,
        data: db['case-fields'],
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.put('/api/v1/cases/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['case-fields'].update(id, requestData);

      Reflect.deleteProperty(responseData, 'priorities');

      responseData.customer_titles.forEach(function (customerTitle) {
        db['locale-fields'].remove(customerTitle.id);
      });
      responseData.descriptions.forEach(function (description) {
        db['locale-fields'].remove(description.id);
      });
      responseData.options.forEach(function (option) {
        //old locale-fields for the values on this option will be orphaned but
        //not referenced here
        db['field-options'].remove(option.id);
      });

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'case_field';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/cases/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['case-fields'].find(request.params.id),
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/cases/fields/:id', function (db, request) {
      var id = request.params.id;

      db['case-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/cases/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/cases/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/cases/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });

    this.put('api/v1/cases/fields/reorder', function () {
      return { status: 200 };
    });
    //Case Fields End

    //Organisation Fields
    this.post('/api/v1/organizations/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['organization-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'organization_field';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/organizations/fields', function (db) {
      return {
        status: 200,
        data: db['organization-fields'],
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.put('/api/v1/organizations/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      var responseData = db['organization-fields'].update(id, requestData);

      responseData.customer_titles.forEach(function (customerTitle) {
        db['locale-fields'].remove(customerTitle.id);
      });
      responseData.descriptions.forEach(function (description) {
        db['locale-fields'].remove(description.id);
      });
      responseData.options.forEach(function (option) {
        //old locale-fields for the values on this option will be orphaned but
        //not referenced here
        db['field-options'].remove(option.id);
      });

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      responseData.resource_type = 'organization_field';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/organizations/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['organization-fields'].find(request.params.id),
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/organizations/fields/:id', function (db, request) {
      var id = request.params.id;

      db['organization-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/organizations/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/organizations/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/organizations/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });
    //Organisation Fields End

    this.get('/api/v1/languages', function (db) {
      return {
        status: 200,
        data: db.languages,
        resource: 'language',
        total_count: db.languages.length
      };
    });

    this.put('/api/v1/locale/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['locale-fields'].update(id, requestData);

      responseData.resource_type = 'locale_field';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'locale_field',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.post('/api/v1/locale/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['locale-fields'].insert(requestData);

      responseData.resource_type = 'locale_field';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'locale_field',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/mails', function (db, req) {
      var _req$queryParams = req.queryParams;
      var limit = _req$queryParams.limit;
      var offset = _req$queryParams.offset;

      limit = parseInt(limit || 1000000, 10);
      offset = parseInt(offset || 0, 10);
      var mails = undefined;

      if (req.queryParams.is_suspended) {
        mails = mails = db.mails.where({ is_suspended: true });
      } else {
        mails = mails = db.mails.where({ is_suspended: false });
      }

      if (req.queryParams.order_by_column) {
        mails = mails.sortBy(req.queryParams.order_by_column);
        if (req.queryParams.order_by === 'desc') {
          mails.reverse();
        }
      }

      var totalCount = mails.length;
      mails = mails.slice(offset, offset + limit);

      return {
        status: 200,
        data: mails,
        resource: 'mail',
        offset: offset,
        limit: limit,
        total_count: totalCount
      };
    });

    this.put('/api/v1/mails/:id', function (db, req) {
      var newState = db.mails.update(req.params.id, JSON.parse(req.requestBody));
      return {
        status: 200,
        data: newState
      };
    });

    this['delete']('/api/v1/mails', function (db, req) {
      db.mails.remove(req.queryParams.ids);
      return { status: 200 };
    });

    this['delete']('/api/v1/mails/:id', function (db, req) {
      db.mails.remove(req.params.id);
      return { status: 200 };
    });

    this.put('/api/v1/cases/statuses/reorder', function (db, req) {
      return { status: 200 };
    });

    this.put('/api/v1/cases/priorities/reorder', function (db, req) {
      return { status: 200 };
    });

    this.post('/api/v1/core/file', function (db) {
      return {
        status: 201,
        data: {
          id: 357070,
          name: 'test-file-name.txt',
          size: 2,
          content_type: 'text/x-php',
          content_url: 'https://support.kayakodev.net/api/v1/files/357070/content',
          created_at: '2016-01-27T13:10:43Z',
          expiry_at: '2016-01-28T01:10:43Z',
          resource_type: 'file',
          resource_url: 'https://support.kayakodev.net/api/v1/files/357070'
        },
        resource: 'file'
      };
    });
  };
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/activity', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    actor: null,
    verb: 'create',
    summary: '<@https://brewfictus.kayako.com/user/1|Phoebe Todd> created <https://brewfictus.kayako.com/case/view/1|Atmosphere Coffee, Inc annual maintenance>',
    actions: [],
    object: null,
    object_actor: null,
    location: null,
    place: null,
    target: null,
    result: null,
    in_reply_to: null,
    participant: null,
    portal: 'API',
    weight: 0.8,
    ip_address: null,
    created_at: _emberCliMirage.faker.date.recent,
    resource_type: 'activity'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/assignee', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    team: {}
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/attachment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    alt: null,
    content_id: null,
    created_at: _emberCliMirage.faker.date.recent,
    height: 494,
    id: function id(i) {
      return i + 1;
    },
    name: function name(i) {
      return 'screenshot_' + (i + 1) + '.png';
    },
    resource_type: 'attachment',
    resource_url: 'http://novo/api/v1/cases/20/messages/33/attachments/3',
    size: 10000 + _emberCliMirage.faker.random.number(10000000),
    thumbnails: [{ url: 'http://fillmurray.com/' + _emberCliMirage.faker.random.arrayElement([100, 200, 300]) + '/' + _emberCliMirage.faker.random.arrayElement([100, 200, 300]) }],
    type: 'image/png',
    url: 'http://fillmurray.com/400/100',
    url_download: 'http://novo/api/v1/cases/20/messages/33/attachments/3/download',
    width: 1220
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/brand', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_enabled: true,
    language: {},
    name: 'Default',
    resource_type: 'brand',
    created_at: '2015-08-05T06:13:59Z',
    resource_url: 'http://novo/api/index.php?/v1/brands/1',
    updated_at: '2015-08-05T06:13:59Z',
    url: null
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/business-hour', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Default Business Hours',
    zones: {
      monday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      tuesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      wednesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      thursday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      friday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      saturday: [],
      sunday: []
    },
    holidays: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'business_hour',
    resource_url: 'http://novo/api/index.php?/v1/businesshours/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-field-value', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: {},
    value: _emberCliMirage.faker.random.title,
    resource_type: 'case_field_value'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: function fielduuid(i) {
      return 'fake-xxx-' + i;
    },
    type: _emberCliMirage.faker.list.cycle('SUBJECT', 'MESSAGE', 'PRIORITY', 'STATUS', 'TYPE', 'TEAM', 'ASSIGNEE', 'TEXT', 'TEXTAREA', 'CHECKBOX', 'RADIO', 'SELECT', 'DATE', 'NUMERIC'),
    key: _emberCliMirage.faker.list.cycle('subject', 'message', 'priority', 'status', 'type', 'team', 'assignee', 'text', 'textarea', 'checkbox', 'radio', 'select', 'date', 'numeric'),
    title: _emberCliMirage.faker.list.cycle('Subject', 'Message', 'Priority', 'Status', 'Type', 'Team', 'Assignee', 'Text', 'Textarea', 'Checkbox', 'Radio', 'Select', 'Date', 'Numeric'),
    is_required_for_agents: true,
    is_required_on_resolution: true,
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_field',
    resource_url: 'http://novo/api/index.php?/v1/cases/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-form', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Internet Related Issue',
    is_visible_to_customers: true,
    customer_title: 'Internet Related Issue',
    description: null,
    is_enabled: true,
    is_default: false,
    sort_order: 1,
    fields: [],
    brand: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_form',
    resource_url: 'http://novo/api/index.php?/v1/cases/forms/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-message', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: function uuid(i) {
      return 'case-message-' + i;
    },
    subject: function subject(i) {
      return 'Subject ' + i;
    },
    bodyText: 'Lorem ipsum dolor sit amet',
    bodyHtml: '<em>Lorem ipsum</em> dolor sit amet',
    recipients: [],
    fullname: 'John Doe',
    email: function email(i) {
      return 'email' + i + '@gmail.com';
    },
    creator: null,
    identity: null,
    mailbox: null,
    attachments: [],
    location: null,

    creationMode: null,
    locale: null,
    responseTime: null,

    // Parent field
    'case': null,

    postType: 'message'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-priority', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('Low', 'Normal', 'High', 'Urgent'),
    level: _emberCliMirage.faker.list.cycle(1, 2, 3, 4),
    color: _emberCliMirage.faker.list.cycle('green', 'yellow', 'orange', 'red'),
    locales: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_priority',
    resource_url: 'http://novo/api/index.php?/v1/cases/priorities/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-status', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('New', 'Open', 'Pending', 'Completed', 'Closed'),
    color: null,
    visibility: 'PUBLIC',
    type: _emberCliMirage.faker.list.cycle('NEW', 'OPEN', 'PENDING', 'COMPLETED', 'CLOSED'),
    locales: [],
    is_sla_active: true,
    is_deleted: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_status',
    resource_url: function resource_url(i) {
      return 'http://novo/api/index.php?/v1/cases/statuses/' + i;
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-type', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('Question', 'Task', 'Problem', 'Incident'),
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_type',
    resource_url: 'http://novo/api/index.php?/v1/cases/types/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    subject: function subject(i) {
      return 'ERS Audit ' + (i + 1);
    },
    mask_id: function mask_id(i) {
      return 'DXX-' + (i + 1) + '-' + _emberCliMirage.faker.random.number();
    },
    portal: null,
    source_channel: {},
    requester: {},
    creator: {},
    identity: {},
    assignee: null,
    brand: null,
    status: {},
    priority: null,
    type: null,
    sla: null,
    sla_metrics: [],
    tags: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    last_replier: null,
    last_replier_identity: null,
    creation_mode: 'WEB',
    state: 'ACTIVE',
    post_count: 3,
    has_notes: false,
    pinned_notes_count: 0,
    has_attachments: false,
    rating: null,
    rating_status: 'UNOFFERED',
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    last_agent_activity_at: null,
    last_assigned_at: null,
    last_closed_at: null,
    last_opened_at: null,
    last_pending_at: null,
    last_customer_activity_at: '2015-07-09T15:36:10Z',
    resource_type: 'case',
    resource_url: 'http://novo/api/index.php?/v1/cases/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/channel', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: _emberCliMirage.faker.random.uuid,
    account: null,
    type: 'MAILBOX',
    resource_type: 'channel'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/column', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: _emberCliMirage.faker.list.cycle('caseid', 'subject', 'casestatusid', 'assigneeteamid', 'requesterid', 'rating', 'sla', 'priority', 'last_replier', 'updatedat', 'lastcreatedat'),
    resource_type: 'column'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/contact-address', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    address1: '30 Avenue',
    address2: '#320',
    city: 'Salinas',
    country: 'US',
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    postal_code: '93905',
    resource_type: 'contact_address',
    resource_url: 'http://novo/api/v1/users/5/contacts/addresses/5',
    state: 'CA',
    type: 'OTHER',
    updated_at: '2015-08-27T11:02:47Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/contact-website', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    resource_type: 'contact_website',
    resource_url: 'http://novo/api/v1/users/5/contacts/websites/5',
    updated_at: '2015-08-27T11:02:47Z',
    url: 'www.brewfictus.com'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/definition', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: _emberCliMirage.faker.list.cycle('cases.subject', 'cases.casestatusid', 'cases.casetypeid'),
    type: function type(i) {
      if (this.field(i) === 'cases.subject') {
        return 'string';
      } else {
        return 'numeric';
      }
    },
    sub_type: function sub_type(i) {
      return this.type(i) === 'string' ? '' : 'integer';
    },
    operators: function operators(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return ['string_contains', 'string_does_not_contain'];
        case 'cases.casestatusid':
          return ['comparison_equalto', 'comparison_not_equalto', 'comparison_lessthan', 'comparison_greaterthan'];
        case 'cases.casetypeid':
          return ['comparison_equalto', 'comparison_not-equalto'];
      }
    },
    values: function values(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return '';
        case 'cases.casestatusid':
          return {
            1: 'New',
            2: 'Open',
            3: 'Pending',
            4: 'Completed',
            5: 'Closed'
          };
        case 'cases.casetypeid':
          return {
            1: 'Question',
            2: 'Task',
            3: 'Problem',
            4: 'Incident'
          };
      }
    },
    resource_type: 'definition'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/event', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: function uuid(i) {
      return 'event-' + (i + 1);
    },
    subject: _emberCliMirage.faker.lorem.sentence,
    body: _emberCliMirage.faker.lorem.sentence,
    channel: 'event',
    participants: [],
    avatar_url: '',
    creator: { id: 5, resource_type: 'user' },
    properties: {},
    attachments: [],
    download_all: null,
    triggered_at: '2015-08-27T11:02:47Z',
    resource_type: 'event',
    contents: _emberCliMirage.faker.lorem.sentence,
    created_at: _emberCliMirage.faker.date.recent
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/facebook-account', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    account_id: _emberCliMirage.faker.random.number,
    is_enabled: true,
    resource_type: 'facebook_account',
    resource_url: 'http://novo/api/index.php?/v1/facebook/account/1',
    title: 'John Mathew',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/facebook-page', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: 'fake-XXXX-default',
    is_enabled: true,
    page_id: _emberCliMirage.faker.random.number,
    resource_type: 'facebook_page',
    resource_url: 'http://novo/api/index.php?/v1/facebook/page/1',
    route_messages: true,
    route_posts: true,
    title: 'HelpDesk Management System',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/feature', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    code: _emberCliMirage.faker.random.number,
    name: 'Collaborators',
    description: 'People who may log in as a team member'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/field-option', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.list.cycle('fake-XXXX-1', 'fake-XXXX-2', 'fake-XXXX-3', 'fake-XXXX-4', 'fake-XXXX-5'),
    values: [],
    tag: _emberCliMirage.faker.list.cycle('internet', 'connectivity', 'yes'),
    sort_order: _emberCliMirage.faker.random.number,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'field_option'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-autocomplete-email', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    identity: {
      id: function id(i) {
        return i + 1;
      },
      resource_type: 'identity_email'
    },
    parent: {
      id: function id(i) {
        return i + 1;
      },
      resource_type: 'user'
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-domain', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_primary: true,
    domain: 'brew.com',
    is_validated: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'identity_domain',
    resource_url: 'http://novo/api/index.php?/v1/identities/domains/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-email', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_primary: false,
    email: _emberCliMirage.faker.internet.email,
    is_notification_enabled: _emberCliMirage.faker.random.boolean,
    is_validated: _emberCliMirage.faker.random.boolean,
    // created_at: '2015-07-23T13:36:12Z',
    // updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'identity_email',
    resource_url: 'http://novo/api/index.php?/v1/identities/emails/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-facebook', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    facebook_id: _emberCliMirage.faker.random.number,
    user_name: _emberCliMirage.faker.internet.userName,
    full_name: _emberCliMirage.faker.name.findName,
    is_validated: true,
    email: function email(i) {
      return 'email' + i + '@example.com';
    },
    bio: 'Lorem ipsum dolor sit amet',
    birth_date: '03/09/1986',
    website: 'http://foo.bar',
    profile_url: function profile_url(i) {
      return 'http://facebook.com/user' + i;
    },
    locale: 'en',
    resource_type: 'identity_facebook'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-phone', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    is_validated: false,
    number: function number(i) {
      return '+44 ' + (4928581320 + i);
    },
    resource_type: 'identity_phone',
    resource_url: 'http://novo/api/v1/identities/phones/4',
    type: 'NONE',
    updated_at: '2015-08-27T11:02:47Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-twitter', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    twitter_id: _emberCliMirage.faker.random.number,
    full_name: 'Robert J Cole',
    screen_name: _emberCliMirage.faker.internet.userName,
    follower_count: 512,
    description: 'WAT',
    url: function url(i) {
      return 'http://twitter.com/twitterhandler' + i;
    },
    location: 'Denver, CO',
    profile_image_url: 'http://www.fillmurray.com/g/250/250',
    locale: 'en',
    resource_type: 'identity_twitter',
    is_validated: true
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/language', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    locale: 'en-us',
    flag_icon: null,
    direction: 'LTR',
    is_enabled: true,
    is_default: false,
    statistics: {
      uptodate: 0,
      outdated: 0,
      missing: 0
    },
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'language',
    resource_url: 'http://novo/api/index.php?/v1/languages/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/limit', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'Collaborators',
    limit: _emberCliMirage.faker.random.number
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/locale-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    locale: _emberCliMirage.faker.list.cycle('en-us', 'de', 'en-gb'),
    translation: 'locale specific text here',
    created_at: _emberCliMirage.faker.date.recent,
    updated_at: _emberCliMirage.faker.date.recent,
    resource_type: 'locale_field',
    resource_url: 'https://brewfictus.kayako.com/api/v1/cases/fields/1/locales/2'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro-assignee', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    type: null,
    team: null,
    agent: null,
    resource_type: 'macro_assignee'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro-property', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    type: null,
    status: null,
    priority_action: null,
    priority: null,
    resource_type: 'macro_property'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro-visibility', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    type: 'ALL',
    team: null,
    resource_type: 'macro_visibility'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: '00 Support \\ 00 Welcome',
    reply_type: null,
    reply_contents: 'Hello, thank you for contacting Kayako.',
    agent: {},
    assignee: {},
    properties: {},
    visibility: {},
    tags: [],
    usage_count: 0,
    last_used_at: null,
    created_at: null,
    updated_at: null,
    resource_type: 'macro',
    resource_url: 'http://support.kayakodev.net/api/v1/cases/macros/499'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/mail', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    from: _emberCliMirage.faker.internet.email,
    to: _emberCliMirage.faker.internet.email,
    sender: null, // is this mandatory?
    subject: _emberCliMirage.faker.lorem.sentence,
    source: null, // I don't know what this field means
    text: _emberCliMirage.faker.lorem.paragraphs,
    html: _emberCliMirage.faker.lorem.paragraphs,
    is_suspended: false,
    status: 'RECEIVED',
    suspension_code: null,
    reason: null, // I don't know what this field means
    message_id: null, // I don't know what this field means
    size: '123', // I don't know that this field means
    mailbox: null, // I don't know that this field means
    'case': null, // I don't know that this field means
    case_post: null, // I don't know that this field means
    time_taken: null, // I don't know that this field means
    completed_at: null, // I don't know that this field means
    created_at: function created_at() {
      return new Date().toISOString();
    },
    resource_type: 'mail'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/mailbox', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: '02a60873-8118-453c-8258-8f44029e657d',
    service: 'STANDARD',
    encryption: 'NONE',
    address: 'support@brewfictus.com',
    prefix: null,
    smtp_type: null,
    host: null,
    port: null,
    username: null,
    preserve_mails: false,
    brand: null, // polymorphic belongsTo
    is_default: false,
    is_enabled: true,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'mailbox',
    resource_url: 'http://novo/api/index.php?/v1/mailboxes/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/message-recipient', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    identity: { id: 2, resource_type: 'identity_email' },
    name: 'Caryn Pryor',
    resource_type: 'message_recipient',
    type: 'TO'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/metadata', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    custom: null,
    system: null,
    resource_type: 'metadata'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/organization-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.random.uuid,
    type: _emberCliMirage.faker.list.cycle('TEXT', 'TEXTAREA', 'CHECKBOX'),
    key: function key(i) {
      return 'key ' + i;
    },
    title: 'title here',
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'organization_field',
    resource_url: 'http://novo/api/index.php?/v1/organization/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/organization', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'Brew',
    is_shared: false,
    domains: [],
    phone: [],
    addresses: [],
    websites: [],
    notes: [],
    pinned_notes_count: 0,
    tags: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'organization',
    resource_url: 'http://novo/api/index.php?/v1/organizations/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/permission', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'admin.random',
    value: true,
    resource_type: 'permission'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/plan', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    seat_count: 15,
    expiry_at: _emberCliMirage.faker.date.future,
    limits: [],
    features: [],
    resource_type: 'plan'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    attachments: [],
    contents: _emberCliMirage.faker.lorem.sentence,
    created_at: _emberCliMirage.faker.date.recent,
    creator: { id: 5, resource_type: 'user' },
    download_all: null,
    identity: { id: 5, resource_type: 'identity_email' },
    original: null,
    resource_type: 'post',
    resource_url: 'http://novo/api/v1/cases/1/posts/1',
    sequence: function sequence(i) {
      return i + 1;
    }, // Sequence needs to be contiguous, used for sorting infinite scroll
    subject: 'Atmosphere Coffee, Inc annual maintenance',
    updated_at: '2015-08-27T11:02:47Z',
    uuid: function uuid(i) {
      return 'post-' + (i + 1);
    },
    'case': null
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/predicate-collection', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    operator: 'OR',
    propositions: [],
    resource_type: 'predicate_collection'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/proposition', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: 'cases.assigneeteamid',
    operator: 'comparison_equalto',
    resource_type: 'proposition',
    value: function value(i) {
      return 'value' + i;
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Administrator',
    type: 'ADMIN', // Can be either ADMIN, AGENT, COLLABORATOR or CUSTOMER.
    ip_restriction: null,
    password_expires_in_days: _emberCliMirage.faker.random.number,
    is_two_factor_required: false,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'role',
    resource_url: 'http://novo/api/index.php?/v1/roles/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/session', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    id: 'pPW6tnOyJG6TmWCVea175d1bfc5dbf073a89ffeb6a2a198c61aae941Aqc7ahmzw8a',
    portal: 'API',
    ip_address: _emberCliMirage.faker.internet.ip,
    user_agent: _emberCliMirage.faker.internet.userAgent,
    user: {},
    status: 'ONLINE',
    created_at: '2015-07-23T16:32:01Z',
    last_activity_at: '2015-07-23T16:32:22Z',
    resource_type: 'session'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/sla-metric', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('FIRST_REPLY_TIME', 'RESOLUTION_TIME', 'NEXT_REPLY_TIME'),
    state: _emberCliMirage.faker.list.cycle('ACTIVE', 'COMPLETED'),
    is_breached: _emberCliMirage.faker.random.boolean,
    target_in_seconds: _emberCliMirage.faker.random.number
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/sla', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Regular support and sales tickets',
    resource_type: 'sla'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: _emberCliMirage.faker.list.cycle('solution', 'status'),
    resource_type: 'tag'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/team', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('Sales', 'Support', 'Finance', 'Human Resources'),
    businesshour: {},
    followers: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'team',
    resource_url: 'http://novo/api/index.php?/v1/teams/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/twitter-account', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    account_id: '3155953718',
    brand: {},
    created_at: '2015-08-05T06:13:59Z',
    is_enabled: true,
    is_public: true,
    resource_type: 'twitter_account',
    resource_url: 'http://novo/api/index.php?/v1/twitter/account/1',
    route_favorites: true,
    route_mentions: true,
    route_messages: true,
    screen_name: 'englisha938',
    updated_at: '2015-08-05T06:13:59Z',
    uuid: 'b63e731d-c88d-4d4a-ab1c-566f5c9edf7d'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/type', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    resource_type: 'case_type'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user-field-value', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: {
      id: _emberCliMirage.faker.random.number,
      resource_type: 'user_field'
    },
    value: '',
    resource_type: 'user_field_value'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.random.uuid,
    type: _emberCliMirage.faker.list.cycle('TEXT', 'TEXTAREA', 'CHECKBOX'),
    key: function key(i) {
      return 'key ' + i;
    },
    title: 'title here',
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'user_field',
    resource_url: 'http://novo/api/index.php?/v1/users/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    full_name: function full_name() {
      return _emberCliMirage.faker.name.firstName() + ' Murray';
    },
    designation: null,
    is_enabled: _emberCliMirage.faker.random.boolean,
    role: null, // Note: This is a mandatory field fo being able to log in with a user
    // avatar: 'http://novo/index.php?/avatar/get/5dadfafe-ef84-5db9-91f5-d617d0f4e58b',
    avatar: 'http://fillmurray.com/100/100',
    teams: [],
    emails: [],
    phones: [],
    twitter: [],
    facebook: [],
    external_identities: [],
    addresses: [],
    websites: [],
    custom_fields: [],
    metadata: {},
    tags: [],
    notes: [],
    pinned_notes_count: 0,
    followers: [],
    locale: 'en-us',
    time_zone: null,
    time_zone_offset: null,
    greeting: null,
    signature: null,
    status_message: null,
    access_level: null,
    password_updated_at: '2015-07-23T12:09:20Z',
    avatar_updated_at: null,
    activity_at: '2015-07-23T16:32:01Z',
    visited_at: '2015-07-23T16:32:01Z',
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T16:32:01Z',
    resource_type: 'user',
    resource_url: 'http://novo/api/index.php?/v1/users/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/view', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    agent: null,
    case_count: -1,
    case_count_accuracy: 'UNKNOWN',
    columns: [],
    created_at: '2015-07-21T14:24:09Z',
    is_default: true,
    is_enabled: true,
    order_by: 'ASC',
    order_by_column: 'id',
    predicate_collections: [],
    resource_type: 'view',
    resource_url: 'http://novo/api/index.php?/v1/views/1',
    title: 'Inbox',
    updated_at: '2015-07-21T14:24:09Z',
    visibility_to_teams: [],
    visibility_type: 'ALL'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/fixtures/en-us-strings', ['exports', 'npm:lodash', 'frontend-cp/locales/en-us/admin', 'frontend-cp/locales/en-us/cases', 'frontend-cp/locales/en-us/feed', 'frontend-cp/locales/en-us/generic', 'frontend-cp/locales/en-us/login', 'frontend-cp/locales/en-us/organisation', 'frontend-cp/locales/en-us/search', 'frontend-cp/locales/en-us/users'], function (exports, _npmLodash, _frontendCpLocalesEnUsAdmin, _frontendCpLocalesEnUsCases, _frontendCpLocalesEnUsFeed, _frontendCpLocalesEnUsGeneric, _frontendCpLocalesEnUsLogin, _frontendCpLocalesEnUsOrganisation, _frontendCpLocalesEnUsSearch, _frontendCpLocalesEnUsUsers) {

  var locales = {
    admin: _frontendCpLocalesEnUsAdmin['default'],
    cases: _frontendCpLocalesEnUsCases['default'],
    feed: _frontendCpLocalesEnUsFeed['default'],
    generic: _frontendCpLocalesEnUsGeneric['default'],
    login: _frontendCpLocalesEnUsLogin['default'],
    organisation: _frontendCpLocalesEnUsOrganisation['default'],
    search: _frontendCpLocalesEnUsSearch['default'],
    users: _frontendCpLocalesEnUsUsers['default']
  };

  exports['default'] = [{
    status: 200,
    data: _npmLodash['default'].flatten(Object.keys(locales).map(function (fileKey) {
      return Object.keys(locales[fileKey]).map(function (stringKey) {
        return {
          id: 'frontend.api.' + fileKey + '.' + stringKey,
          value: locales[fileKey][stringKey],
          resource_type: 'locale_string'
        };
      });
    })),
    resource: 'locale_string'
  }];
});
/* eslint-disable camelcase */
define('frontend-cp/mirage/scenarios/default', ['exports'], function (exports) {
  /*eslint-disable camelcase*/

  exports['default'] = function (server) {
    var businesshour = server.create('business-hour', { title: 'Default Business Hours' });
    var teams = server.createList('team', 4, { businesshour: businesshour });
    var roles = [server.create('role', { title: 'Admin', type: 'ADMIN', id: 1 }), server.create('role', { title: 'Agent', type: 'AGENT', id: 2 }), server.create('role', { title: 'Collaborator', type: 'COLLABORATOR', id: 3 }), server.create('role', { title: 'Customer', type: 'CUSTOMER', id: 4 })];
    var role = roles[0];

    var emails = [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { email: 'altenative@gmail.com', is_validated: true }), server.create('identity-email', { email: 'newemail@example.com', is_validated: false })];
    var phones = [server.create('identity-phone', { is_primary: true }), server.create('identity-phone')];
    var twitter = [server.create('identity-twitter', { is_primary: true }), server.create('identity-twitter')];
    var facebook = [server.create('identity-facebook', { is_primary: true }), server.create('identity-facebook')];
    var custom_fields = server.createList('user-field-value', 3);
    var metadata = server.create('metadata');
    var defaultUser = server.create('user', {
      custom_fields: custom_fields,
      role: role,
      teams: teams,
      emails: emails,
      phones: phones,
      twitter: twitter,
      facebook: facebook,
      metadata: metadata
    });

    server.create('session', { user: defaultUser });

    server.create('permission', { name: 'admin.team.userfields.view' });
    server.create('permission', { name: 'admin.team.view' });

    server.create('user', {
      role: role,
      emails: [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { is_primary: false, is_validated: false })],
      phones: [
        // server.create('identity-phone', { is_primary: true }),
        // server.create('identity-phone')
      ],
      twitter: [
        // server.create('identity-twitter', { is_primary: true }),
        // server.create('identity-twitter')
      ],
      facebook: [
        // server.create('identity-facebook', { is_primary: true }),
        // server.create('identity-facebook')
      ]
    });

    var identityEmail = server.create('identity-email');

    var textFieldTitle = 'text field';
    var textAreaFieldTitle = 'text area field';
    var radioFieldTitle = 'radio field';
    var normalSelectFieldTitle = 'normal select field';
    var checkboxFieldTitle = 'checkbox field';
    var numericFieldTitle = 'numeric field';
    var decimalFieldTitle = 'decimal field';
    var fileFieldTitle = 'file field';
    var yesNoFieldTitle = 'yes no field';
    var cascadingSelectFieldTitle = 'cascading select field';
    var dateFieldTitle = 'date field';
    var regexFieldTitle = 'regex field';

    //CASE FIELDS
    var textCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioCaseOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: radioCaseOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectCaseOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: selectCaseOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxCaseOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxCaseOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectCaseOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectCaseOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //CASE FIELDS END

    //USER FIELDS
    var textCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioUserOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: radioUserOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectUserOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: selectUserOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxUserOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxUserOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectUserOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectUserOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //USER FIELDS END

    //ORGANIZATION FIELDS
    var textCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioOrganizationOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: radioOrganizationOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectOrganizationOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: selectOrganizationOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOrganizationOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxOrganizationOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOrganizationOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectOrganizationOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //ORGANIZATION FIELDS END

    //ids have to match the predicate_collection ids.
    //Current ids are cycling and must match in
    //both predicate_collections and predicate_collection.
    //They are uuids in real life but i have changed them to integers
    //to make things easier.
    var columns = server.createList('column', 5);
    var propositions = server.createList('proposition', 2);
    var predicateCollections = server.createList('predicate-collection', 2, { propositions: propositions });

    server.create('view', {
      is_default: true,
      columns: columns,
      predicate_collections: predicateCollections
    });

    server.createList('definition', 3);

    var sourceChannel = server.create('channel');
    var assigneeAgent = defaultUser;
    var assigneeTeam = teams[0];
    var language = server.create('language', {
      isDefault: true,
      locale: 'en-us'
    });
    server.create('language', {
      locale: 'fr-ca'
    });
    server.create('language', {
      locale: 'de'
    });
    var brand = server.create('brand', { language: language });
    var statuses = server.createList('case-status', 5);
    var status = statuses[0];
    var priority = server.create('case-priority');
    var type = server.create('type');
    var sla = server.create('sla');
    var slaMetrics = server.createList('sla-metric', 3);
    var tags = server.createList('tag', 2);

    var caseFields = server.createList('case-field', 14);

    // TODO make mirage work with relationships embedded into model fragments
    // const customFields = server.createList('case-field-value', 2, { field: caseFields[0], value: '' });
    var customFields = [];
    server.createList('case', 4, {
      source_channel: sourceChannel,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    // Case with a non-default status
    server.create('case', {
      id: 5,
      source_channel: sourceChannel,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: statuses[3],
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    server.createList('case', 1, {
      source_channel: null,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    var mailbox = server.create('mailbox', { brand: brand });
    server.create('channel', {
      uuid: 1,
      account: mailbox
    });
    server.create('channel', {
      uuid: 2,
      type: 'TWITTER',
      account: server.create('mailbox', {
        uuid: 2,
        screen_name: 'testman',
        address: 'twittertest',
        brand: brand,
        account_id: 123
      })
    });
    server.create('channel', {
      uuid: 3,
      type: 'NOTE'
    });

    var identityDomain = server.create('identity-domain');
    server.create('organization', {
      domains: [identityDomain],
      metadata: metadata
    });

    server.createList('identity-email', 10);
    server.createList('case-priority', 3);
    server.createList('case-type', 4, {
      resource_url: function resource_url(i) {
        return 'http://novo/api/index.php?/v1/cases/types/' + ++i;
      }
    });
    server.create('case-form', {
      fields: caseFields,
      brand: brand
    });

    server.create('facebook-account');
    server.create('twitter-account', {
      brand: brand
    });

    // If possible this endpoint should implement pagination (plus limit) in order to behave
    // as it would in the real world app, to be able to use infinite scroll
    server.createList('post', 30, { creator: defaultUser, identity: identityEmail });
    var attachments = [{
      id: 1,
      resource_type: 'attachment'
    }, {
      id: 2,
      resource_type: 'attachment'
    }];
    server.createList('post', 1, { creator: defaultUser, identity: identityEmail, attachments: attachments });

    server.createList('attachment', 3);

    server.createList('event', 5);
    server.createList('activity', 5);

    server.create('contact-address');
    server.create('contact-website');
    server.create('identity-phone');

    server.create('message-recipient', {
      identity: identityEmail
    });

    var userModels = server.createList('user', 20, {
      role: role,
      teams: teams,
      emails: emails,
      custom_fields: custom_fields,
      metadata: metadata
    });

    var identityEmailModels = server.createList('identity-email', 10, {
      email: function email(i) {
        return 'random-email-' + i + '@kayako-unreal.com';
      }
    });

    for (var i = 0; i < 10; i++) {
      server.create('identity-autocomplete-email', {
        identity: {
          id: identityEmailModels[i].id,
          resource_type: 'identity_email'
        },
        parent: {
          id: userModels[i].id,
          resource_type: 'user'
        }
      });
    }

    var limit = server.create('limit', {
      name: 'collaborators',
      limit: 10
    });

    var feature = server.create('feature', {
      code: 3232,
      name: 'collaborators',
      description: 'People who may log in as a team member'
    });

    server.create('plan', {
      limits: [limit],
      features: [feature]
    });

    var macroAssignee = server.create('macro-assignee');
    var macroProperty = server.create('macro-property');
    var macroVisibility = server.create('macro-visibility');

    server.create('macro', {
      agent: defaultUser,
      assignee: macroAssignee,
      properties: macroProperty,
      visibility: macroVisibility
    });

    server.createList('mail', 5, { status: 'RECEIVED' });
    server.createList('mail', 12, { is_suspended: true, status: 'SUSPENDED', suspension_code: 'SPAM' });
  };
});
define('frontend-cp/mixins/autofocus', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    autofocusFirstField: _ember['default'].on('willInsertElement', function () {
      this.$('input,select,textarea,button,[tabindex]').not('[tabindex="-1"],[disabled]').eq(0).focus();
    })
  });
});
define('frontend-cp/mixins/change-aware-model', ['exports', 'ember', 'npm:lodash', 'ember-data'], function (exports, _ember, _npmLodash, _emberData) {

  /*
   * TODO:
   *  - update hasDirtyChanges to use hasDirtyBelongsToRelationship and hasDirtyHasManyRelationship
   *  - hasDirtyHasManyRelationship does not work with async relationships
   *  - create wrapper function for belongTo and hasMany to check the relationship type internally
   *  - Handle recursive checking of fragment arrays
   */

  /*
   * Change Aware Model
   *
   * One place to ask a model if it has changed, or if any of it's relationships have changed
   *
   * public functions:
   *  - cacheRelationships :  used to build a list of relationships whever a model is
   *                          saved/loaded. Normally, you don't have to call this but if
   *                          you make changes to a model but don;t wish to mark it as dirty
   *                          (i.e. setting some defaults), re-calling this function will save
   *                          defaults as initial values
   *
   *  - hasDirtyChanges    :  returns true or false depending on weather or not the model is
   *                          dirty. Includes attributes and relationships and runs recursively down
   *                          through relationships (providing they are have this mixin
   *
   *  - hasDirtyBelongsToRelationship : checks to see if a belongsTo relationship has changed. This is
   *                                    not recursive. If you are checking an async relationship, a promise
   *                                    is returned which resolves to true/false. If it's a synch relationship
   *                                    then true/false is returned immediately
   *
   *  - has DirtyHasManyRelationship  : checks to see if a hasMany relationship has changed. Is fired if any of the
   *                                    relationships are new/deleted/changed. Is not recursive
   *
   *
   *  OPTIONS
   *  Some of our API calls are write only. Some async relationships it doesn't make sense to cache
   *  This can be solved by adding  `noCache: true` to the relationship options definition, e.g.
   *
   *    reply: DS.hasMany('case-reply', { async: true, child: true, noCache: true }),
   */

  exports['default'] = _ember['default'].Mixin.create({
    initialRelationships: {},

    // build an array of all relationships whenever the model is loaded
    // so we can check against them to see if any have been added or removed
    getRelationships: function getRelationships() {
      var _this = this;

      var relationships = {};
      this.eachRelationship(function (name, meta) {
        if (meta.options.noCache) {
          return;
        }
        var relationship = _this.get(name);
        relationships[name] = null;

        if (relationship) {
          if (typeof relationship.forEach === 'function') {
            relationships[name] = [];
            relationship.forEach(function (relatedObject) {
              relationships[name].pushObject(relatedObject);
            });
          } else {
            relationships[name] = relationship;
          }
        }
      });
      return relationships;
    },

    cacheRelationships: function cacheRelationships() {
      this.set('initialRelationships', this.getRelationships());
    },

    getAttrs: function getAttrs() {
      var _this2 = this;

      var attrs = {};
      this.eachAttribute(function (name, meta) {
        attrs[name] = _this2.get(name);
      });
      return attrs;
    },

    cacheAttrs: function cacheAttrs() {
      this.set('initialAttrs', this.getAttrs());
    },

    initialize: _ember['default'].on('ready', function () {
      var _this3 = this;

      _ember['default'].run.next(function () {
        //TODO: Try to discover why this must be in a run loop
        // Without the run.next, the async promise resolves to null
        // With run.next, everything resolves perfectly.
        // there's some private API stuff `_updatingRecordArraysLater: true` which might be something?
        _this3.cacheRelationships();
        _this3.cacheAttrs();
      });
    }),

    reInitialize: _ember['default'].on('didUpdate', function () {
      var _this4 = this;

      _ember['default'].run(function () {
        _this4.cacheRelationships();
      });
    }),

    /*
     * Returns a promise if the relationship is async
     */
    hasDirtyBelongsToRelationship: function hasDirtyBelongsToRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];
      var currentRelationship = this.get(relationshipKey);

      if (currentRelationship && typeof currentRelationship.then === 'function') {
        // relationship is async - get both, wait for them to resolve and then compare
        return _ember['default'].RSVP.hash({
          currentRelationship: currentRelationship,
          initialRelationship: initialRelationship
        }).then(function (relationshipHash) {
          return relationshipHash.initialRelationship !== relationshipHash.currentRelationship;
        });
      }

      // undefined and null are equivalent in terms of dirty tracking
      return initialRelationship != currentRelationship; // eslint-disable-line eqeqeq
    },

    hasDirtyHasManyRelationship: function hasDirtyHasManyRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];

      var currentRelationship = this.get(relationshipKey);

      if (!initialRelationship && currentRelationship) {
        return true;
      }

      if (initialRelationship.length !== currentRelationship.get('length')) {
        return true;
      }

      return currentRelationship.any(function (relationship, index) {
        return relationship !== initialRelationship[index];
      });
    },

    hasDirtyAttribute: function hasDirtyAttribute(attributeName) {
      var changedAttributes = Object.keys(this.changedAttributes());
      return changedAttributes.indexOf(attributeName) !== -1;
    },

    /*
     * Checks model for changed attributes, then
     * checks all model relationships for dirty attributes
     */
    hasDirtyChanges: function hasDirtyChanges() {
      return this.hasChangesToSelf() || this.hasNewOrDirtyRelations() || this.hasDeletedRelationships();
    },

    hasChangesToSelf: function hasChangesToSelf() {
      var _this5 = this;

      var changes = this.changedAttributes();

      // if there is no ID, and the only change is to a sort
      // order, we never want to mark this as dirty
      if (!this.get('id') && changes.sortOrder) {
        Reflect.deleteProperty(changes, 'sortOrder');
      }

      Object.keys(changes).forEach(function (changedAttributeName) {
        var changedAttribute = _this5.get(changedAttributeName);
        var diff = changes[changedAttributeName];

        // Fragment Arrays are not "relationships" so we have to check for equality here
        if (changedAttribute && changedAttribute._isFragment) {
          if (!_this5.get(changedAttributeName).get('hasDirtyAttributes')) {
            Reflect.deleteProperty(changes, changedAttributeName);
            return;
          }
        }

        // undefined/null is equal to "" when editing forms etc.
        if (Array.isArray(diff) && !diff[0] && !diff[1]) {
          Reflect.deleteProperty(changes, changedAttributeName);
          return;
        }
      });

      return !_npmLodash['default'].isEmpty(changes);
    },

    hasNewOrDirtyRelations: function hasNewOrDirtyRelations() {
      var _this6 = this;

      var initialRelationships = this.get('initialRelationships');
      var hasChanges = false;

      this.eachRelationship(function (name, descriptor) {
        if (descriptor.options.noCache) {
          return;
        }
        var relationshipObject = _this6.get(descriptor.key);

        if (descriptor.kind === 'hasMany') {
          relationshipObject.forEach(function (relationshipObj) {
            // only check if the relationship model has the change-aware mixin
            if (relationshipObject && typeof relationshipObj.hasDirtyChanges === 'function' && relationshipObj.hasDirtyChanges()) {
              hasChanges = true;
            }

            //check relation isn't a new addition
            if (initialRelationships[descriptor.key].indexOf(relationshipObj) === -1) {
              hasChanges = true;
            }
          });
        } else if (descriptor.kind === 'belongsTo') {
          var _relationshipObject = _this6.get(descriptor.key);

          // only check if the relationship model has the change-aware mixin
          if (_relationshipObject && typeof _relationshipObject.hasDirtyChanges === 'function') {
            if (_relationshipObject.hasDirtyChanges()) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    },

    hasDeletedRelationships: function hasDeletedRelationships() {
      var _this7 = this;

      var hasChanges = false;
      var initialRelationships = this.get('initialRelationships');

      Object.keys(initialRelationships).forEach(function (relationshipName) {
        if (hasChanges) {
          // we only need one change - exit early if we've found one
          return;
        }

        var currentRelatedObjects = _this7.get(relationshipName);

        if (currentRelatedObjects && typeof currentRelatedObjects.forEach === 'function') {
          // hasMany relationship
          initialRelationships[relationshipName].forEach(function (relatedObject) {
            if (currentRelatedObjects.indexOf(relatedObject) === -1) {
              hasChanges = true;
            }
          });
        } else {
          //belongsTo relationship
          if (currentRelatedObjects instanceof _emberData['default'].PromiseObject) {
            if (currentRelatedObjects.get('content') !== initialRelationships[relationshipName].get('content')) {
              hasChanges = true;
            }
          } else {
            if (currentRelatedObjects !== initialRelationships[relationshipName]) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    }
  });
});
define('frontend-cp/mixins/custom-field-serialization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    serializeCustomFields: function serializeCustomFields(customFields, form) {
      var fieldValues = {};
      var formFields = form ? form.get('fields').map(function (field) {
        return field.get('key');
      }) : [];

      if (!customFields) {
        return fieldValues;
      }

      customFields.forEach(function (customField) {
        if (!form || formFields.indexOf(customField.get('field.key')) > -1) {
          // For some reason its possible for the API to get to a state where
          // the resources of the /api/v1/users contains user_fields that aren't
          // present in /api/v1/users/fields, in that case field.key is undefined
          if (customField.get('field.key')) {
            fieldValues[customField.get('field.key')] = customField.get('value');
          } else {
            /*eslint-disable no-console */
            if (console && console.warn) {
              console.warn('Missing custom field key');
            }
            /*eslint-enable no-console */
          }
        }
      });

      return fieldValues;
    }
  });
});
define('frontend-cp/mixins/simple-state', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    /**
     * An object tree representing all possible
     * states and their parent/child relationships
     * @type {Object}
     */
    stateMap: null,

    /**
     * The current state as a dot separated list
     * representing the state hierarchy
     * @type {String}
     */
    _currentState: '',

    /**
     * Read-only current state property
     * For most use cases use isInState, used mostly as a property
     * in computed properties to observe when state changes
     * @return {String} current state as a dot separated list representing the state hierarchy
     */
    currentState: _ember['default'].computed('_currentState', function () {
      return this.get('_currentState');
    }),

    /**
     * Sets the current state as a dot separated
     * list representing the desired state hierarchy
     * eg. 'root.session.foo'
     * Throws an error if the state is not available
     * in the stateMap object tree
     * @param {String} state Dot separated string of state hierarchy
     */
    setState: function setState(state) {
      if (this.get('stateMap.' + state)) {
        this.set('_currentState', state);
      } else {
        throw new Error('Invalid state: ' + state);
      }
    },

    /**
     * Returns true if you are in the current state, you must specify the currentState
     * in order force a call to this.get('currentState') in computed properties,
     * otherwise the computed property will not be called.
     * or any of its parent states
     * @param  {String}  state Dot separated string of state hierarchy
     * @param  {String}  currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    isInState: function isInState(state, currentState) {
      if (typeof currentState === 'undefined') {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(state) === 0;
    },

    /**
     * Returns true if the last substate in the state string
     * is the leafState/s
     * @param  {String}  subState     Dot separated string of sub-state
     * @param  {String}  currentState currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    endsWithSubState: function endsWithSubState(subState, currentState) {
      if (typeof currentState === 'undefined') {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(subState) === currentState.length - subState.length;
    },

    getStateAtLevel: function getStateAtLevel(level, currentState) {
      currentState = currentState || this.get('_currentState');
      return currentState.split('.')[level];
    }
  });
});
define('frontend-cp/models/access-log', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    user: _emberData['default'].belongsTo('user', { async: true, parent: true }),
    action: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/account', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/action', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    action: _emberData['default'].attr('string'),
    field: _emberData['default'].attr('string'),
    oldValue: _emberData['default'].attr('string'),
    newValue: _emberData['default'].attr('string'),
    oldObject: _emberData['default'].attr(),
    newObject: _emberData['default'].attr()
  });
});
define('frontend-cp/models/activity-location', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    city: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    regionCode: _emberData['default'].attr('string'),
    areaCode: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    netSpeed: _emberData['default'].attr('string'),
    country: _emberData['default'].attr('string'),
    countryCode: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'),
    latitude: _emberData['default'].attr('string'),
    longitude: _emberData['default'].attr('string'),
    metroCode: _emberData['default'].attr('string'),
    isp: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/activity-object', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    prefix: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    fullTitle: _emberData['default'].attr('string'),
    image: _emberData['default'].attr('string'),
    preposition: _emberData['default'].attr('string'),

    // TODO fix when relationship support lands to ember-data.model-fragments
    // original: DS.belongsTo('any', { async: true }),
    originalFragment: _modelFragments['default'].fragment('relationship-fragment'),
    original: _ember['default'].computed('originalFragment.relationshipId', function () {
      return this.store.peekRecord(this.get('originalFragment.relationshipType'), this.get('originalFragment.relationshipId'));
    })
  });
});
define('frontend-cp/models/activity', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    actor: _modelFragments['default'].fragment('activity-object'),
    verb: _emberData['default'].attr('string'),
    summary: _emberData['default'].attr('string'),
    actions: _emberData['default'].hasMany('action'),
    object: _modelFragments['default'].fragment('activity-object'),
    objectActor: _modelFragments['default'].fragment('activity-object'),
    location: _modelFragments['default'].fragment('activity-location'),
    place: _modelFragments['default'].fragment('activity-object'),
    target: _modelFragments['default'].fragment('activity-object'),
    result: _modelFragments['default'].fragment('activity-object'),
    inReplyTo: _modelFragments['default'].fragment('activity-object'),
    participant: _modelFragments['default'].fragment('activity-object'),
    portal: _emberData['default'].attr('string'),
    weight: _emberData['default'].attr('number'),
    ipAddress: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),

    'case': _emberData['default'].belongsTo('case', { async: true, parent: true }),

    plainTextSummary: _ember['default'].computed('summary', function () {
      return this.get('summary').replace(/<.*?\|(.*?)>/g, '$1');
    })
  });
});
define('frontend-cp/models/any', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/app', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    version: _emberData['default'].attr('string'),
    author: _emberData['default'].attr('string'),
    authorEmail: _emberData['default'].attr('string'),
    shortDescription: _emberData['default'].attr('string'),
    longDescription: _emberData['default'].attr('string'),
    visibility: _emberData['default'].attr('string'),
    installable: _emberData['default'].attr('boolean'),
    installed: _emberData['default'].attr('boolean'),
    smallIcon: _emberData['default'].attr('string'),
    largeIcon: _emberData['default'].attr('string'),
    // categories: TODO what they are?
    defaultLocale: _emberData['default'].attr('string'),
    productVersion: _emberData['default'].attr('string')

    // TODO action: install
    // TODO action: upgrade
    // TODO action: uninstall
  });
});
define('frontend-cp/models/attachment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    width: _emberData['default'].attr('number'), // TODO should exist on attachment within posts/:id
    height: _emberData['default'].attr('number'), // TODO should exist on attachment within posts/:id
    type: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    url: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    urlDownload: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    thumbnails: _modelFragments['default'].fragmentArray('thumbnail'),
    createdAt: _emberData['default'].attr('date'), // TODO should exist on attachment within posts/:id

    // Virtual parent field
    message: _emberData['default'].belongsTo('case-message', { async: true, parent: true })
  });
});
define('frontend-cp/models/brand', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    language: _emberData['default'].belongsTo('language', { async: false }),
    isEnabled: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/business-hour', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string', { async: false }),
    zones: _emberData['default'].attr(),
    holidays: _emberData['default'].hasMany('businesshour-holiday', { async: false }),
    teams: _emberData['default'].hasMany('team', { async: false }),
    createdAt: _emberData['default'].attr('date', { async: false }),
    updatedAt: _emberData['default'].attr('date', { async: false })
  });
});
define('frontend-cp/models/businesshour-holiday', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    openHours: _emberData['default'].attr() //array http://stackoverflow.com/a/26107853
  });
});
define('frontend-cp/models/case-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('case-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('case-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/case-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    fielduuid: _emberData['default'].attr('string'),
    fieldType: _emberData['default'].attr('string'),
    key: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    isRequiredForAgents: _emberData['default'].attr('boolean'),
    isRequiredOnResolution: _emberData['default'].attr('boolean'),

    isCustomerEditable: _emberData['default'].attr('boolean'),
    isRequiredForCustomers: _emberData['default'].attr('boolean'),
    isSystem: _emberData['default'].attr('boolean'),
    priorities: _emberData['default'].hasMany('case-priority', { child: true, async: true, url: '/api/v1/cases/priorities', noCache: true }),
    statuses: _emberData['default'].hasMany('case-status', { child: true, async: true, url: '/api/v1/cases/statuses', noCache: true }),
    types: _emberData['default'].hasMany('case-type', { child: true, async: true, url: '/api/v1/cases/types', noCache: true }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/case-form', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model', 'ember'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel, _ember) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    title: _emberData['default'].attr('string'),
    customerTitle: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    isVisibleToCustomers: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean'),
    isDefault: _emberData['default'].attr('boolean'),
    sortOrder: _emberData['default'].attr('number'),
    fields: _emberData['default'].hasMany('case-field', { async: false }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    canBeDisabled: _ember['default'].computed('id', 'isDefault', function () {
      return _ember['default'].isPresent(this.get('id')) && !this.get('isDefault');
    }),

    canBeMadeDefault: _ember['default'].computed.not('isDefault'),
    canBeDeleted: _ember['default'].computed.not('isDefault')
  });
});
define('frontend-cp/models/case-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    recipients: _emberData['default'].hasMany('message-recipient', { async: false }),
    fullname: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    mailbox: _emberData['default'].belongsTo('mailbox', { async: false }),
    attachments: _emberData['default'].hasMany('attachment', { async: false }),
    location: _emberData['default'].belongsTo('location', { async: false }),
    // metadata: DS...
    creationMode: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),
    responseTime: _emberData['default'].attr('number'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    // Parent field
    'case': _emberData['default'].belongsTo('case', { async: true, parent: true }),

    postType: 'message'
  });
});
define('frontend-cp/models/case-note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),
    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    'case': _emberData['default'].belongsTo('case', { async: false, parent: true }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true })
  });
});
define('frontend-cp/models/case-priority', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    level: _emberData['default'].attr('number'),
    color: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/case-reply-options', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    cc: _emberData['default'].attr('array')
  });
});
define('frontend-cp/models/case-reply', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    contents: _emberData['default'].attr('string'),
    channelType: _emberData['default'].attr('string'),
    channel: _emberData['default'].belongsTo('account', { async: false }),
    inReplyToUuid: _emberData['default'].attr('string'),
    options: _modelFragments['default'].fragment('case-reply-options'),
    status: _emberData['default'].belongsTo('case-status', { async: false }),
    priority: _emberData['default'].belongsTo('case-priority', { async: false }),
    caseType: _emberData['default'].belongsTo('case-type', { async: false }),
    assigneeTeam: _emberData['default'].belongsTo('team', { async: false }),
    assigneeAgent: _emberData['default'].belongsTo('user', { async: false }),
    tags: _emberData['default'].attr('string'),
    fieldValues: _modelFragments['default'].fragmentArray('case-field-value'),
    // _filename: DS.belongsTo('?'),

    form: _emberData['default'].belongsTo('case-form', { async: false }),

    attachmentFileIds: _emberData['default'].attr('string'),

    'case': _emberData['default'].belongsTo('case', { async: true, parent: true }),
    posts: _emberData['default'].hasMany('post', { async: true })
  });
});
define('frontend-cp/models/case-status', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    label: _emberData['default'].attr('string'),
    color: _emberData['default'].attr('string'),
    statusType: _emberData['default'].attr('string'),
    visibility: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    sortOrder: _emberData['default'].attr('number'),
    isSlaActive: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/case-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    type: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/case', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    assigneeTeam: _emberData['default'].belongsTo('team', { async: false }),
    assigneeAgent: _emberData['default'].belongsTo('user', { async: false }),
    subject: _emberData['default'].attr('string', { defaultValue: '' }),
    portal: _emberData['default'].attr('string'),
    sourceChannel: _emberData['default'].belongsTo('channel', { async: false }),
    requester: _emberData['default'].belongsTo('user', { async: false }),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { polymorphic: true, async: false }),
    sla: _emberData['default'].belongsTo('sla', { async: false }),
    slaMetrics: _modelFragments['default'].fragmentArray('sla-metric', { defaultValue: [] }),
    lastAssignedBy: _emberData['default'].belongsTo('user', { async: false }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    status: _emberData['default'].belongsTo('case-status', { async: false }),
    priority: _emberData['default'].belongsTo('case-priority', { async: false }),
    caseType: _emberData['default'].belongsTo('case-type', { async: false }),
    form: _emberData['default'].belongsTo('case-form', { async: false }),
    customFields: _modelFragments['default'].fragmentArray('case-field-value', { defaultValue: [] }),
    // metadata // TODO nested json
    lastReplier: _emberData['default'].belongsTo('user', { async: false }),
    lastReplierIdentity: _emberData['default'].belongsTo('identity', { async: false }),
    creationMode: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    hasNotes: _emberData['default'].attr('boolean'),
    hasAttachments: _emberData['default'].attr('boolean'),
    rating: _emberData['default'].attr('number'),
    ratingStatus: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    lastAgentActivityAt: _emberData['default'].attr('date'),
    lastCustomerActivityAt: _emberData['default'].attr('date'),
    lastCompletedAt: _emberData['default'].attr('date'),
    realtimeChannel: _emberData['default'].attr('string'),
    attachmentFileIds: _emberData['default'].attr('string'),

    // Children fields
    messages: _emberData['default'].hasMany('case-message', { async: true, child: true }),
    posts: _emberData['default'].hasMany('post', { async: true, child: true }),
    channels: _emberData['default'].hasMany('channel', { async: true, child: true, url: 'channels' }),
    activities: _emberData['default'].hasMany('activity', { async: true, child: true, url: 'activities' }),
    replyChannels: _emberData['default'].hasMany('channel', { async: true, child: true, url: 'reply/channels' }),
    reply: _emberData['default'].hasMany('case-reply', { async: true, child: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, child: true }),
    //participants: DS.hasMany('user', { async: true, child: true, url: 'participants' }),

    // Parent field
    view: _emberData['default'].belongsTo('view', { async: true, parent: true }),

    // Creation Fields
    contents: _emberData['default'].attr('string'),
    channel: _emberData['default'].attr('string'),
    channelId: _emberData['default'].attr('number'),

    // used in the creation steps
    creationTimestamp: null,

    saveWithPost: function saveWithPost(contents, channel, attachmentIds, replyOptions) {
      var _this = this;

      var account = channel.get('account');
      var channelType = channel.get('channelType');
      var reply = this.get('store').createRecord('case-reply', {
        'case': this,
        channel: account,
        assigneeTeam: this.get('assigneeTeam'),
        assigneeAgent: this.get('assigneeAgent'),
        channelType: channelType,
        contents: contents,
        options: replyOptions.copy(),
        status: this.get('status'),
        caseType: this.get('caseType'),
        priority: this.get('priority'),
        form: this.get('form'),
        fieldValues: [],
        tags: this.get('tags').map(function (tag) {
          return tag.get('name');
        }).join(','),
        attachmentFileIds: attachmentIds
      });

      reply.get('case.customFields').forEach(function (customField) {
        reply.get('fieldValues').createFragment({
          fieldFragment: _this.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value')
        });
      });

      // TODO: Remove saving case after 1 endpoint for case
      // update is implemented

      return this.save().then(function () {
        return reply.save();
      });
    }
  });
});
define('frontend-cp/models/channel', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    channelType: _emberData['default'].attr('string'),
    charaterLimit: _emberData['default'].attr('number'),
    account: _emberData['default'].belongsTo('account', { polymorphic: true, async: false }),

    isChannelTypeMailbox: _ember['default'].computed('channelType', function () {
      return this.get('channelType') === 'MAILBOX';
    }),

    iconClass: _ember['default'].computed('channelType', function () {
      var channelType = this.get('channelType');

      switch (channelType) {
        case 'MAILBOX':
          {
            return 'i-inbox';
          }
        case 'FACEBOOK':
          {
            return 'i-facebook';
          }
        case 'TWITTER':
          {
            return 'i-twitter';
          }
      }
    }),

    handle: _ember['default'].computed('channelType', function () {
      var channelType = this.get('channelType');
      switch (channelType) {
        case 'MAILBOX':
          {
            return this.get('account.address');
          }
        case 'FACEBOOK':
          {
            return this.get('account.title');
          }
        case 'TWITTER':
          {
            return this.get('account.screenName') + ' - Tweet';
          }
        case 'TWITTER_DM':
          {
            return this.get('account.screenName') + ' - DM';
          }
      }
    }),

    message: _ember['default'].computed('channelType', function () {
      var channelType = this.get('channelType');
      var handle = this.get('handle');

      switch (channelType) {
        case 'MAILBOX':
          {
            return 'Reply via Email (' + handle + ')';
          }
        case 'FACEBOOK':
          {
            return 'Reply via Facebook (' + handle + ')';
          }
        case 'TWITTER':
          {
            return 'Reply via Twitter (' + handle + ')';
          }
      }
    }),

    label: _ember['default'].computed('handle', function () {
      return this.get('handle') || 'Reply';
    })
  });
});
define('frontend-cp/models/chat', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    agent: _emberData['default'].belongsTo('user', { async: true }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    creator: _emberData['default'].belongsTo('user', { async: true }),
    email: _emberData['default'].attr('string'),
    isProactive: _emberData['default'].attr('boolean'),
    lastactivityAt: _emberData['default'].attr('date'),
    name: _emberData['default'].attr('string'),
    startedAt: _emberData['default'].attr('date'),
    status: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    team: _emberData['default'].belongsTo('team', { async: true }),
    token: _emberData['default'].attr('string'),
    uuid: _emberData['default'].attr('string'),
    waitTime: _emberData['default'].attr('number')
  });
});
define('frontend-cp/models/column-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/column', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _ember['default'].computed.alias('id')
  });
});
define('frontend-cp/models/contact-address', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean', { defaultValue: false }),
    address1: _emberData['default'].attr('string'),
    address2: _emberData['default'].attr('string'),
    city: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'), // TODO maybe integer?
    country: _emberData['default'].attr('string'), // TODO should be country code
    type: _emberData['default'].attr('string', { defaultValue: 'OTHER' }),

    parent: _emberData['default'].belongsTo('has-addresses', { async: true, polymorphic: true, parent: true })
  });
});
define('frontend-cp/models/contact-website', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean', { defaultValue: false }),
    url: _emberData['default'].attr('string'),

    parent: _emberData['default'].belongsTo('has-websites', { async: true, polymorphic: true, parent: true })
  });
});
define('frontend-cp/models/credential', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    realtimeAppKey: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/definition-value-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    value: _emberData['default'].attr(),
    string: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/definition', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    definitionType: _emberData['default'].attr('string'),
    inputType: _emberData['default'].attr('string'),
    subType: _emberData['default'].attr('string'),
    operators: _emberData['default'].attr('array'),
    values: _modelFragments['default'].fragmentArray('definition-value-fragment') //can be an empty string or an object with keys as value and properties as text
  });
});
define('frontend-cp/models/event', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    subject: _emberData['default'].attr('string'),
    body: _emberData['default'].attr('string'),
    channel: _emberData['default'].attr('string'),
    participants: _emberData['default'].hasMany('users'),
    avatarUrl: _emberData['default'].attr('string'),
    creator: _emberData['default'].belongsTo('user', { parent: true }),
    // properties: [],
    attachments: _emberData['default'].hasMany('attachment'),
    downloadAll: _emberData['default'].attr('string'),
    triggeredAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/facebook-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    accountId: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean', { defaultValue: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/facebook-comment', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookComment'
  });
});
define('frontend-cp/models/facebook-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookMessage'
  });
});
define('frontend-cp/models/facebook-page', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    title: _emberData['default'].attr('string'),
    account: _emberData['default'].belongsTo('facebook-account')
  });
});
define('frontend-cp/models/facebook-post', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookPost'
  });
});
define('frontend-cp/models/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    enabled: _emberData['default'].attr('boolean', { defaultValue: false })
  });
});
define('frontend-cp/models/feature', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    code: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/field-option', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    fielduuid: _emberData['default'].attr('string'),
    values: _emberData['default'].hasMany('locale-field', { async: false }),
    tag: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    parent: _emberData['default'].belongsTo('field', { polymorphic: true, async: true, parent: true, noCache: true }),

    markedForDeletion: _emberData['default'].attr('boolean', { defaultValue: false }),

    value: _ember['default'].computed('values', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var values = this.get('values');

        var valueLocale = values.find(function (v) {
          return v.get('locale') === currentLocale;
        });

        if (valueLocale) {
          return valueLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var values = this.get('values');

        var valueLocale = values.find(function (v) {
          return v.get('locale') === currentLocale;
        });

        if (valueLocale) {
          valueLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/field', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    fielduuid: _emberData['default'].attr('string'),
    fieldType: _emberData['default'].attr('string'),
    key: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string', { defaultValue: '' }),
    customerTitle: _emberData['default'].attr('string', { defaultValue: '' }),
    description: _emberData['default'].attr('string', { defaultValue: '' }),

    isVisibleToCustomers: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean', { defaultValue: true }),
    isRequired: _emberData['default'].attr('boolean'),

    regularExpression: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    isChoiceField: _ember['default'].computed('fieldType', function () {
      switch (this.get('fieldType')) {
        case 'RADIO':
        case 'CHECKBOX':
        case 'CASCADINGSELECT':
        case 'SELECT':
          return true;

        default:
          return false;
      }
    }),

    options: _emberData['default'].hasMany('field-option', { child: true, async: false, url: 'options', inverse: 'parent' })
  });
});
define('frontend-cp/models/has-addresses', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    addresses: _emberData['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' })
  });
});
define('frontend-cp/models/has-websites', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    websites: _emberData['default'].hasMany('contact-website', { async: true })
  });
});
define('frontend-cp/models/identity-autocomplete-email', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    identity: _emberData['default'].belongsTo('identity-email'),

    user: _emberData['default'].belongsTo('user', { async: true })
  });
});
define('frontend-cp/models/identity-domain', ['exports', 'ember-data', 'ember', 'frontend-cp/models/identity'], function (exports, _emberData, _ember, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    domain: _emberData['default'].attr('string'),

    name: _ember['default'].computed.alias('domain'),

    user: _emberData['default'].belongsTo('user', { async: true }),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('frontend-cp/models/identity-email', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    email: _emberData['default'].attr('string'),
    isNotificationEnabled: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true })
  });
});
define('frontend-cp/models/identity-facebook', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    facebookId: _emberData['default'].attr('string'),
    userName: _emberData['default'].attr('string'),
    fullName: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    bio: _emberData['default'].attr('string'),
    birthDate: _emberData['default'].attr('date'),
    website: _emberData['default'].attr('string'),
    profileUrl: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),

    // CPs
    canBeValidated: false
  });
});
define('frontend-cp/models/identity-phone', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    number: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('frontend-cp/models/identity-token', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    token: _emberData['default'].attr('string'),
    lastUsedAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/identity-twitter', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    twitterId: _emberData['default'].attr('string'),
    fullName: _emberData['default'].attr('string'),
    screenName: _emberData['default'].attr('string'),
    followerCount: _emberData['default'].attr('number'),
    description: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    profileImageUrl: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),

    // CPs
    canBeValidated: false
  });
});
define('frontend-cp/models/identity', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var computed = _ember['default'].computed;
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean'),
    isValidated: _emberData['default'].attr('boolean'),

    // CPs
    canBeRemoved: computed.not('isPrimary'),
    canBeValidated: computed.not('isValidated'),
    canBeModified: computed.or('canBeValidated', 'canBeRemoved', 'canBePrimarized'),
    canBePrimarized: computed('isPrimary', 'isValidated', function () {
      return !this.get('isPrimary') && this.get('isValidated');
    })
  });
});
define('frontend-cp/models/language-statistics', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    uptodate: _emberData['default'].attr('number'),
    outdated: _emberData['default'].attr('number'),
    missing: _emberData['default'].attr('number')
  });
});
define('frontend-cp/models/language', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    locale: _emberData['default'].attr('string'),
    flagIcon: _emberData['default'].attr('string'),
    direction: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    statistics: _modelFragments['default'].fragment('language-statistics'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/limit', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    limit: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/link', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    object: _emberData['default'].belongsTo('object', { polymorphic: true, async: false })
  });
});
define('frontend-cp/models/locale-field', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    locale: _emberData['default'].attr('string'),
    translation: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/locale-string', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    value: _emberData['default'].attr('string'),

    locale: _emberData['default'].belongsTo('locale', { async: true, parent: true })
  });
});
define('frontend-cp/models/locale', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    nativeName: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    nativeRegion: _emberData['default'].attr('string'),
    script: _emberData['default'].attr('string'),
    variant: _emberData['default'].attr('string'),
    direction: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    strings: _emberData['default'].hasMany('locale-string', { async: true, child: true, url: 'strings' })
  });
});
define('frontend-cp/models/location', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    city: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    regionCode: _emberData['default'].attr('string'),
    areaCode: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    netSpeed: _emberData['default'].attr('string'),
    country: _emberData['default'].attr('string'),
    countryCode: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'),
    latitude: _emberData['default'].attr('string'),
    longitude: _emberData['default'].attr('string'),
    metroCode: _emberData['default'].attr('string'),
    isp: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/macro-assignee', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    type: _emberData['default'].attr('string'), //UNASSIGNED, CURRENT_AGENT, TEAM, AGENT

    teamFragment: _modelFragments['default'].fragment('relationship-fragment'),
    team: _ember['default'].computed('teamFragment.relationshipId', function () {
      return this.store.peekRecord('team', this.get('teamFragment.relationshipId'));
    }),

    agentFragment: _modelFragments['default'].fragment('relationship-fragment'),
    agent: _ember['default'].computed('agentFragment.relationshipId', function () {
      return this.store.peekRecord('user', this.get('agentFragment.relationshipId'));
    })
  });
});
define('frontend-cp/models/macro-properties', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    typeFragment: _modelFragments['default'].fragment('relationship-fragment'),
    macroType: _ember['default'].computed('typeFragment.relationshipId', function () {
      return this.store.peekRecord('case-type', this.get('typeFragment.relationshipId'));
    }),

    statusFragment: _modelFragments['default'].fragment('relationship-fragment'),
    status: _ember['default'].computed('statusFragment.relationshipId', function () {
      return this.store.peekRecord('case-status', this.get('statusFragment.relationshipId'));
    }),

    priorityFragment: _modelFragments['default'].fragment('relationship-fragment'),
    priority: _ember['default'].computed('priorityFragment.relationshipId', function () {
      return this.store.peekRecord('case-priority', this.get('priorityFragment.relationshipId'));
    }),

    priorityAction: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/macro-tag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/macro-visibility', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    type: _emberData['default'].attr('string'), // ALL, TEAM, PRIVATE
    status: _emberData['default'].belongsTo('status', { async: false }),
    priority: _emberData['default'].belongsTo('priority', { async: false })
  });
});
define('frontend-cp/models/macro', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    replyContents: _emberData['default'].attr('string'),
    replyType: _emberData['default'].attr('string'), // REPLY | NOTE
    agent: _emberData['default'].belongsTo('user', { async: false }),
    tags: _emberData['default'].hasMany('macro-tag', { async: false }),
    assignee: _modelFragments['default'].fragment('macro-assignee'),
    properties: _modelFragments['default'].fragment('macro-properties'),
    visibility: _modelFragments['default'].fragment('macro-visibility')
  });
});
define('frontend-cp/models/mailbox', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    service: _emberData['default'].attr('string'),
    encryption: _emberData['default'].attr('string'),
    address: _emberData['default'].attr('string'),
    prefix: _emberData['default'].attr('string'),
    smtpType: _emberData['default'].attr('string'),
    host: _emberData['default'].attr('string'),
    port: _emberData['default'].attr('number'),
    username: _emberData['default'].attr('string'),
    preserveMails: _emberData['default'].attr('boolean'),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    isDefault: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/message-recipient', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),
    identity: _emberData['default'].belongsTo('identity', { async: false }),

    isCC: _ember['default'].computed.equal('type', 'CC')
  });
});
define('frontend-cp/models/note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    isPinned: _emberData['default'].attr('boolean'),

    user: _emberData['default'].belongsTo('user', { async: false }),
    parent: _emberData['default'].belongsTo('case', { async: true, parent: true, polymorphic: true }),

    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    postType: 'note'
  });
});
define('frontend-cp/models/oauth-link', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/object', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    icon: _emberData['default'].hasMany('attachment', { async: false }),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/organization-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('organization-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('organization-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/organization-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/organization-note', ['exports', 'ember-data', 'frontend-cp/models/postable', 'ember'], function (exports, _emberData, _frontendCpModelsPostable, _ember) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),

    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    organization: _emberData['default'].belongsTo('organization', { async: false, parent: true, inverse: 'notes' }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true }),

    domains: _ember['default'].computed.alias('organization.domains'),

    postType: 'note'
  });
});
define('frontend-cp/models/organization', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model', 'model-fragments'], function (exports, _emberData, _ember, _frontendCpMixinsChangeAwareModel, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], _ember['default'].Evented, {
    name: _emberData['default'].attr('string'),
    isShared: _emberData['default'].attr('boolean'),
    brand: _emberData['default'].belongsTo('brand', { async: true }),
    addresses: _emberData['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' }),
    websites: _emberData['default'].hasMany('contact-website', { async: true, url: 'contacts/websites' }),
    pinned: _emberData['default'].attr('number'),
    customFields: _modelFragments['default'].fragmentArray('organization-field-value'),
    fieldValues: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }), // write only
    followers: _emberData['default'].hasMany('user', { async: true, inverse: null, noCache: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    domains: _emberData['default'].hasMany('identity-domain', { async: true }),
    phones: _emberData['default'].hasMany('identity-phone', { async: true }),

    // Shadow children fields
    notes: _emberData['default'].hasMany('organization-note', { child: true, url: 'notes', async: true, noCache: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, child: true, noCache: true }),

    saveWithNote: function saveWithNote(contents) {
      var _this = this;

      var attachmentIds = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (contents) {
        var _ret = (function () {
          var note = _this.get('store').createRecord('organization-note', {
            contents: contents,
            attachmentFileIds: attachmentIds,
            organization: _this
          });

          return {
            v: _this.save().then(function () {
              return note.save();
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        return this.save();
      }
    }
  });
});
define('frontend-cp/models/permission', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    value: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/plan', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    features: _modelFragments['default'].fragmentArray('feature', { async: false }),
    limits: _modelFragments['default'].fragmentArray('limit', { async: false })
  });
});
define('frontend-cp/models/post', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    uuid: _emberData['default'].attr('string'),
    sequence: _emberData['default'].attr('number'),
    subject: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    attachments: _emberData['default'].hasMany('attachment', { async: true }),
    downloadAll: _emberData['default'].attr('string'),
    original: _emberData['default'].belongsTo('postable', { async: true, polymorphic: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    // Virtual parent field
    'case': _emberData['default'].belongsTo('case', { async: true, parent: true })
  });
});
define('frontend-cp/models/postable', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/predicate-collection', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    operator: _emberData['default'].attr('string', { 'default': 'OR' }),
    propositions: _modelFragments['default'].fragmentArray('proposition')
  });
});
define('frontend-cp/models/proposition', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    field: _emberData['default'].attr('string'),
    operator: _emberData['default'].attr('string'),
    value: _emberData['default'].attr()
  });
});
define('frontend-cp/models/rating', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    score: _emberData['default'].attr('string'),
    comment: _emberData['default'].attr('string'),
    'case': _emberData['default'].belongsTo('case'),
    creator: _emberData['default'].belongsTo('user'),
    createdAt: _emberData['default'].attr('date')

  });
});
define('frontend-cp/models/relationship-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    relationshipId: _emberData['default'].attr('string'),
    relationshipType: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/role', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    roleType: _emberData['default'].attr('string'),
    permissions: _emberData['default'].hasMany('permission', { child: true, async: true, url: 'permissions' })
  });
});
define('frontend-cp/models/search-result-group', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {

  /*
   * We use resource ('case'/'organisation'/'person') as the ID
   */
  exports['default'] = _emberData['default'].Model.extend({
    totalCount: _emberData['default'].attr('number'),
    results: _modelFragments['default'].fragmentArray('search-result')
  });
});
define('frontend-cp/models/search-result', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    objectId: _emberData['default'].attr('number'),
    title: _emberData['default'].attr('string'),
    snippet: _emberData['default'].attr('string'),
    resource: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/session', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    portal: _emberData['default'].attr('string'),
    ipAddress: _emberData['default'].attr('string'),
    userAgent: _emberData['default'].attr('string'),
    user: _emberData['default'].belongsTo('user', { async: false }),
    status: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    lastActivityAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/sla-metric', ['exports', 'ember', 'ember-data', 'moment', 'model-fragments'], function (exports, _ember, _emberData, _moment, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    title: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'), //COMPLETED | PAUSED | ACTIVE
    isBreached: _emberData['default'].attr('boolean'),
    remainingSeconds: _emberData['default'].attr('number'),
    totalSeconds: _emberData['default'].attr('number'),
    timeTakenSeconds: _emberData['default'].attr('number'),

    status: _ember['default'].computed('isBreached', 'isCompleted', 'hasLessThan20PercentRemaining', function () {
      // OK | OPEN | WARNING | BREACHED
      if (this.get('isBreached')) {
        return 'BAD';
      }
      if (this.get('isCompleted')) {
        return 'GOOD';
      }
      if (this.get('hasLessThan20PercentRemaining')) {
        return 'WARNING';
      }
      return 'OPEN';
    }),

    isCompleted: _ember['default'].computed('state', function () {
      return this.get('state') === 'COMPLETED';
    }),

    hasLessThan20PercentRemaining: _ember['default'].computed('remainingSeconds', 'totalSeconds', function () {
      var percentageLeft = 100 * this.get('remainingSeconds') / this.get('totalSeconds');
      return percentageLeft < 20;
    }),

    numberOfWholeDaysRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').days());
    }),

    numberOfWholeHoursRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').hours());
    }),

    numberOfWholeMinutesRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').minutes());
    })
  });
});
define('frontend-cp/models/sla', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/tab', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({

    /**
     * Tab base URL
     * Path to the tab's 'home' page.
     * This is used to check whether a page falls within this tab's remit.
     * @type {[type]}
     */
    baseUrl: null,

    /**
     * Tab URL
     * Path to the page that's currently displayed in the tab.
     * This will either be the `baseUrl` or one of its descendant URLs.
     * @type {string}
     */
    url: null,

    /**
     * Tab label
     * @type {string}
     */
    label: null,

    /**
     * Whether the tab is currently selected
     * @type {boolean}
     */
    selected: false,

    /**
     * UI state object
     * Ember object containing UI state related to this tab
     * @type {Object}
     */
    state: null
  });
});
define('frontend-cp/models/tag', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _ember, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    name: _ember['default'].computed.alias('id'),

    isNew: false
  });
});
define('frontend-cp/models/team', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _ember, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    title: _emberData['default'].attr('string'),
    memberCount: _emberData['default'].attr('number'),
    businesshour: _emberData['default'].belongsTo('business-hour', { async: false }),
    followers: _emberData['default'].hasMany('user', { async: false, noCache: true }),
    members: _emberData['default'].hasMany('user', { async: true, child: true, inverse: 'teams', url: 'members?is_enabled=true&limit=500', noCache: true }),

    isNew: false,

    // team pills component looks for name on the model
    name: _ember['default'].computed.alias('title')
  });
});
define('frontend-cp/models/thumbnail', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    width: _emberData['default'].attr('number'),
    height: _emberData['default'].attr('number'),
    thumbnailType: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/twitter-account-callback', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    oauthToken: _emberData['default'].attr('string'),
    oauthVerifier: _emberData['default'].attr('string'),

    account: _emberData['default'].belongsTo('twitter-account')
  });
});
define('frontend-cp/models/twitter-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    twitterId: _emberData['default'].attr('string'),
    screenName: _emberData['default'].attr('string'),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    routeMentions: _emberData['default'].attr('boolean'),
    routeMessages: _emberData['default'].attr('boolean'),
    routeFavorites: _emberData['default'].attr('boolean'),
    showInHelpCenter: _emberData['default'].attr('boolean'),
    status: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/twitter-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'twitterMessage'
  });
});
define('frontend-cp/models/twitter-tweet', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'twitterTweet'
  });
});
define('frontend-cp/models/user-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('user-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('user-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/user-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    isCustomerEditable: _emberData['default'].attr('boolean'),
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.id');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/user-minimal', ['exports', 'frontend-cp/models/user'], function (exports, _frontendCpModelsUser) {
  exports['default'] = _frontendCpModelsUser['default'].extend();
});
define('frontend-cp/models/user-note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),

    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    user: _emberData['default'].belongsTo('user', { async: false, parent: true, inverse: 'notes' }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true }),

    postType: 'note'
  });
});
define('frontend-cp/models/user', ['exports', 'ember-data', 'model-fragments', 'ember', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _modelFragments, _ember, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    fullName: _emberData['default'].attr('string'),
    designation: _emberData['default'].attr('string'),
    alias: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    role: _emberData['default'].belongsTo('role', { async: false }),
    avatar: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: true }),
    teams: _emberData['default'].hasMany('team', { async: false }),
    addresses: _emberData['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' }),
    websites: _emberData['default'].hasMany('contact-website', { async: true, url: 'contacts/websites' }),
    customFields: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }),
    fieldValues: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }), // write only
    notes: _emberData['default'].hasMany('user-note', { child: true, url: 'notes', async: true, noCache: true }),
    locale: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    timeZoneOffset: _emberData['default'].attr('number'),
    greeting: _emberData['default'].attr('string'),
    signature: _emberData['default'].attr('string'),
    statusMessage: _emberData['default'].attr('string'),
    passwordUpdateAt: _emberData['default'].attr('date'),
    avatarUpdateAt: _emberData['default'].attr('date'),
    activityAt: _emberData['default'].attr('date'),
    visitedAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    agentCaseAccess: _emberData['default'].attr('string', { defaultValue: 'ALL' }),
    organizationCaseAccess: _emberData['default'].attr('string', { defaultValue: 'REQUESTED' }),

    // Shadow children fields
    accesslogs: _emberData['default'].hasMany('access-log', { async: true, child: true, noCache: true }),
    recentCases: _emberData['default'].hasMany('case', { async: true, child: true, inverse: null, noCache: true }),
    events: _emberData['default'].hasMany('event', { async: true, child: true, inverse: 'creator', noCache: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, child: true, noCache: true }),

    emails: _emberData['default'].hasMany('identity-email', { async: false, url: 'identities/emails' }),
    phones: _emberData['default'].hasMany('identity-phone', { async: false, url: 'identities/phones' }),
    twitter: _emberData['default'].hasMany('identity-twitter', { async: false, url: 'identities/twitter' }),
    facebook: _emberData['default'].hasMany('identity-facebook', { async: false, url: 'identities/facebook' }),

    saveWithNote: function saveWithNote(contents) {
      var _this = this;

      var attachmentIds = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (contents) {
        var _ret = (function () {
          var note = _this.get('store').createRecord('user-note', {
            contents: contents,
            attachmentFileIds: attachmentIds,
            user: _this
          });

          return {
            v: _this.save().then(function () {
              return note.save();
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        return this.save();
      }
    },

    save: function save() {
      var _this2 = this;

      this.get('customFields').forEach(function (customField) {
        _this2.get('fieldValues').createFragment({
          fieldFragment: _this2.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value') === '' ? null : customField.get('value')
        });
      });

      return this._super().then(function () {
        _this2.get('teams').forEach(function (team) {
          team.set('isNew', false);
        });
        return _this2;
      });
    },

    primaryEmail: _ember['default'].computed('emails.@each.isPrimary', function () {
      var emails = this.get('emails');
      var primaryEmail = emails.filter(function (email) {
        return email.get('isPrimary');
      }).get('firstObject');

      return primaryEmail ? primaryEmail : emails.get('firstObject');
    }),

    primaryEmailAddress: _ember['default'].computed('primaryEmail', function () {
      return this.get('primaryEmail.email');
    })
  });
});
define('frontend-cp/models/view-count', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var computed = _ember['default'].computed;
  exports['default'] = _emberData['default'].Model.extend({
    view: _emberData['default'].belongsTo('view'),
    count: _emberData['default'].attr('number'),
    countAccuracy: _emberData['default'].attr('string'),
    realtimeChannel: _emberData['default'].attr('string'),

    // CPs
    hasKnownAccuracy: computed('countAccuracy', function () {
      return this.get('countAccuracy') !== 'UNKNOWN';
    }),

    hasRelativeAccuracy: computed.equal('countAccuracy', 'RELATIVE')
  });
});
define('frontend-cp/models/view', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    intl: _ember['default'].inject.service(),

    title: _emberData['default'].attr('string'),
    agent: _emberData['default'].belongsTo('user', { async: false }),
    visibilityType: _emberData['default'].attr('string'), // ALL | TEAM
    visibilityToTeams: _emberData['default'].hasMany('team', { async: false }),
    columns: _emberData['default'].hasMany('column', { async: false }),
    predicateCollections: _emberData['default'].hasMany('predicate-collection', { defaultValue: [], async: false }),
    orderByColumn: _emberData['default'].attr('string', { defaultValue: null }),
    viewCount: _emberData['default'].belongsTo('view-count', { async: true }),
    orderBy: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number'),
    isEnabled: _emberData['default'].attr('boolean'),
    isDefault: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    viewType: _emberData['default'].attr('string'),

    // Children fields
    cases: _emberData['default'].hasMany('case', { async: true, child: true, url: 'cases', noCache: true }),

    visibilityString: _ember['default'].computed('visibilityType', 'visibilityToTeams', function () {
      var trans = 'admin.views.sharing.' + this.get('visibilityType');
      var visibilityString = this.get('intl').findTranslationByKey(trans);
      if (visibilityString) {
        return visibilityString;
      }
      return this.get('visibilityToTeams').map(function (team) {
        return team.get('title');
      }).join(', ');
    })
  });
});
define('frontend-cp/models/vote', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    type: _emberData['default'].attr('string'),
    user: _emberData['default'].belongsTo('user', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/zone', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('frontend-cp/router', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  // Make current URL available in url-service to allow observing changes
  _ember['default'].Router.reopen({
    urlDidChange: _ember['default'].on('didTransition', function () {
      var urlService = this.get('container').lookup('service:url');
      urlService.set('currentUrl', this.get('url'));
    })
  });

  var Router = _ember['default'].Router.extend({
    location: _frontendCpConfigEnvironment['default'].locationType,
    metrics: _ember['default'].inject.service(),

    didTransition: function didTransition() {
      this._super.apply(this, arguments);
      this._trackPage();
    },

    _trackPage: function _trackPage() {
      var _this = this;

      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        var page = document.location.pathname;
        var title = _this.getWithDefault('currentRouteName', 'unknown');

        _ember['default'].get(_this, 'metrics').trackPage({ page: page, title: title });
      });
    }
  });

  Router.map(function () {
    // path has to stay '/' otherwise everything will break — similar path
    // is already defined by the session. Looks like the router doesn't
    // rely on NFA...
    this.route('login', { path: '/' }, function () {
      this.route('agent', { path: '/agent/login' });
      this.route('admin', { path: '/admin/login' });
    });

    this.route('session', { path: '' }, function () {
      this.route('styleguide', { path: '/styleguide' });

      this.route('test', { path: '/test' }, function () {
        this.route('entry', { path: '/:entry_id' });
      });

      this.route('agent', function () {
        this.route('cases', { path: '/cases' }, function () {
          this.route('new', { path: '/new/:timestamp' }, function () {
            this.route('user');
            this.route('organisation');
          });
          this.route('case', { path: '/:case_id' }, function () {
            this.route('notes');
            this.route('organisation');
            this.route('user');
          });

          this.route('index', { path: '' }, function () {
            this.route('view', { path: '/view/:view_id' });
            this.route('suspended-messages', function () {
              this.route('show', { path: ':id' });
            });
          });
        });
        this.route('users', { path: '/users' }, function () {
          this.route('user', { path: '/:user_id' }, function () {
            this.route('organisation');
          });
        });
        this.route('organisations', { path: '/organisations' }, function () {
          this.route('organisation', { path: '/:organisation_id' }, function () {});
        });
      });

      this.route('admin', function () {
        this.route('manage', function () {
          this.route('views', function () {
            this.route('edit', { path: '/:view_id' });
            this.route('new', { path: '/new' });
          });
          this.route('case-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:case_field_id' });
          });

          this.route('case-forms', function () {
            this.route('new');
            this.route('edit', { path: '/:case_form_id' });
          });
        });

        this.route('people', function () {
          this.route('teams', function () {
            this.route('new');
            this.route('edit', { path: '/:team_id' });
          });

          this.route('user-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:user_field_id' });
          });

          this.route('organization-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:organization_field_id' });
          });
        });

        this.route('automation', function () {
          this.route('businesshours', function () {
            this.route('new', { path: '/new' });
            this.route('edit', { path: '/:businesshour_id' });
          });
        });

        this.route('channels', function () {
          this.route('twitter', function () {
            this.route('edit', { path: '/:account_id' });
            this.route('link');
            this.route('reauthorize');
          });
        });
      });
    });
  });

  exports['default'] = Router;
});
define('frontend-cp/routes/abstract/tabbed-route-child', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    // Actions
    actions: {
      // When a child route of a tabbed route is activated it updates the routeName
      // of the tab to point to it.
      didTransition: function didTransition() {
        this.send('subrouteDidRender', this.routeName);
        this.send('restoreScroll');
      }
    }
  });
});
define('frontend-cp/routes/abstract/tabbed-route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    tabStore: _ember['default'].inject.service(),

    setupController: function setupController() {
      this._super.apply(this, arguments);
      this.controller.set('tab', this.tab);
    },

    activate: function activate() {
      this.handleScroll = this.handleScroll.bind(this);
      $(window).on('scroll', this.handleScroll);
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      this.get('tabStore').leave(this.tab);
      $(window).off('scroll', this.handleScroll);
    },

    // Methods
    handleScroll: function handleScroll() {
      _ember['default'].run.debounce(this, this.updateTabStateAfterScroll, 250);
    },

    updateTabStateAfterScroll: function updateTabStateAfterScroll() {
      this.send('updateTabState', { scroll: this.get('scroller').scrollTop });
    },

    // CPs
    scroller: _ember['default'].computed(function () {
      return document.querySelector(this.container.lookup('application:main').rootElement);
    }),

    // Actions
    actions: {
      updateTabName: function updateTabName(label) {
        this.get('tabStore').update(this.tab, { label: label });
      },

      updateTabState: function updateTabState(state) {
        this.get('tabStore').updateState(this.tab, state);
      },

      updateNonPersistedTabState: function updateNonPersistedTabState(state) {
        this.get('tabStore').updateNonPersistedState(this.tab, state);
      },

      subrouteDidRender: function subrouteDidRender(routeName) {
        this.get('tabStore').update(this.tab, { routeName: routeName });
      },

      restoreScroll: function restoreScroll() {
        _ember['default'].run.schedule('afterRender', this, function () {
          if (this.tab.state && typeof this.tab.state.scroll !== 'undefined') {
            this.get('scroller').scrollTop = this.tab.state.scroll;
          }
        });
      }
    }
  });
});
define('frontend-cp/sanitizers/bold', ['exports'], function (exports) {
  exports['default'] = {
    elements: ['b']
  };
});
define('frontend-cp/serializers/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, _ember, _emberData, _npmLodash) {
  var get = _ember['default'].get;
  var merge = _ember['default'].merge;
  var inject = _ember['default'].inject;
  var warn = _ember['default'].warn;
  var pluralize = _ember['default'].String.pluralize;
  exports['default'] = _emberData['default'].RESTSerializer.extend({
    primaryRecordKey: 'data',
    sideloadedRecordsKey: 'resources',

    intlService: inject.service('intl'),

    normalizePayload: function normalizePayload(payload) {
      if (!payload) {
        return {};
      }

      if (_npmLodash['default'].isNumber(payload.status)) {
        Reflect.deleteProperty(payload, 'status');
      }

      if (payload.logs) {
        Reflect.deleteProperty(payload, 'logs');
      }

      var data = payload[this.primaryRecordKey];
      if (data) {
        this.extractData(data, payload);
        Reflect.deleteProperty(payload, this.primaryRecordKey);
      }

      var sideloaded = payload[this.sideloadedRecordsKey];
      if (sideloaded) {
        var relationships = this.extractSideloaded(sideloaded);
        Reflect.deleteProperty(payload, this.sideloadedRecordsKey);
        merge(payload, relationships);
      }

      Reflect.deleteProperty(payload, 'resource');

      return payload;
    },

    extractData: function extractData(data, payload) {
      if (_ember['default'].isArray(data)) {
        this.extractArrayData(data, payload);
      } else {
        this.extractSingleData(data, payload);
      }
    },

    /**
     * Extract top-level "data" containing a single primary data
     *
     * @param {Object[]} data - data
     * @param {Object[]} payload - payload
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[data.resource_type] = data;
      this.extractItem(data, data.resource_type);
    },

    /**
     * @param {Object[]} data - data
     * @param {String} typeKey - type of the item being extracted
     * @return {Object} data — data extracted
     */
    extractItem: function extractItem(data, typeKey) {
      var _this = this;

      if (!this._hasModelFor(typeKey)) {
        _npmLodash['default'].forOwn(data, function (_, key) {
          Reflect.deleteProperty(data, key);
        });
      } else {
        (function () {
          // A list of fields that the API may return as {} but need to be set
          // to undefined. Remove this when API is fixed
          var nullableFields = ['brand', 'creator'];
          nullableFields.forEach(function (field) {
            if (data[field] && !Object.keys(data[field]).length) {
              Reflect.deleteProperty(data, field);
            }
          });

          _this.extractRelationships(data);
          var store = get(_this, 'store');
          var type = store.modelFor(typeKey);
          if (!data.links) {
            data.links = {};
          }

          type.eachRelationship(function (name, relationship) {
            // If relationship is defined as a child...
            if (relationship.options.child) {
              // ...use `url` property to fetch children
              if (relationship.options.url) {
                data.links[name] = relationship.options.url;
                /// ...or in its absence use default path for relationship's model
              } else {
                  var childAdapter = store.adapterFor(relationship.type);
                  data.links[name] = childAdapter.pathForType(relationship.type);
                }
            }
          });

          Reflect.deleteProperty(data, 'resource_type');
        })();
      }

      return data;
    },

    /**
     * Extract top-level "data" containing a single primary data
     *
     * @param {Object[]} data - data
     * @param {Object[]} payload - payload
     */
    extractArrayData: function extractArrayData(data, payload) {
      var _this2 = this;

      data.forEach(function (item) {
        return _this2.extractItem(item, payload.resource);
      });
      payload[payload.resource] = data;
    },

    /**
     * Extract top-level "included" containing associated objects
     *
     * @param {Object} sideloaded - sideloaded
     * @return {Object} An object with the normalized sideloaded records with pluralized keys
     */
    extractSideloaded: function extractSideloaded(sideloaded) {
      var _this3 = this;

      var models = {};

      _npmLodash['default'].each(sideloaded, function (resources, type) {
        var collectionName = pluralize(type);
        models[collectionName] = [];
        _npmLodash['default'].each(resources, function (resource) {
          // TODO remove || type — this is a temporary fix
          type = resource.resource_type || type;
          models[collectionName].push(_this3.extractItem(resource, type));
        });
      });
      return models;
    },

    extractMeta: function extractMeta(store, typeClass, payload) {
      if (!payload.meta) {
        payload.meta = {};
      }
      if (typeof payload.total_count !== 'undefined') {
        payload.meta.total = payload.total_count;
        Reflect.deleteProperty(payload, 'total_count');
      }
      if (typeof payload.next_url !== 'undefined') {
        payload.meta.next = payload.next_url;
        Reflect.deleteProperty(payload, 'next_url');
      }
      if (typeof payload.offset !== 'undefined') {
        payload.meta.offset = payload.offset;
        Reflect.deleteProperty(payload, 'offset');
      }
      if (typeof payload.limit !== 'undefined') {
        payload.meta.limit = payload.limit;
        Reflect.deleteProperty(payload, 'limit');
      }
      this._super.apply(this, arguments);
    },

    extractFindHasMany: function extractFindHasMany() {
      return this._super.apply(this, arguments);
    },

    extractRelationships: function extractRelationships(resource) {
      var _this4 = this;

      _npmLodash['default'].each(resource, function (value, key) {
        if (value && value.id && value.resource_type) {
          if (_this4._hasModelFor(value.resource_type)) {
            resource[key] = {
              id: value.id,
              type: value.resource_type
            };
          } else {
            Reflect.deleteProperty(resource, key);
          }
        } else if (_npmLodash['default'].isArray(value)) {
          resource[key] = _npmLodash['default'].compact(value.map(function (v) {
            if (v.id && v.resource_type) {
              if (_this4._hasModelFor(v.resource_type)) {
                return {
                  id: v.id,
                  type: v.resource_type
                };
              } else {
                return null;
              }
            } else {
              return v;
            }
          }));
        }
      });
    },

    extractErrors: function extractErrors(store, typeClass, payload, id) {
      var _this5 = this;

      var errorCodes = ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'];

      var errorMessages = _npmLodash['default'].zipObject(errorCodes.map(function (error) {
        return [error, 'generic.error.' + error.toLowerCase()];
      }));

      var isValidationError = function isValidationError(error) {
        return errorCodes.includes(error.code);
      };

      var messageForError = function messageForError(error) {
        return _this5.get('intlService').findTranslationByKey(errorMessages[error.code]);
      };

      if (payload && typeof payload === 'object' && payload.errors) {
        var _ret2 = (function () {
          var errors = {};
          payload.errors.forEach(function (error) {
            if (isValidationError(error)) {
              errors[error.parameter] = errors[error.parameter] || [];
              errors[error.parameter].push(messageForError(error));
            }
          });
          _this5.normalizeErrors(typeClass, errors);
          return {
            v: errors
          };
        })();

        if (typeof _ret2 === 'object') return _ret2.v;
      } else {
        return payload;
      }
    },

    keyForAttribute: function keyForAttribute(key /*, method*/) {
      return _ember['default'].String.underscore(key);
    },

    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        return _ember['default'].String.underscore(key) + (relationship === 'belongsTo' ? '_id' : '');
      } else {
        return _ember['default'].String.underscore(key);
      }
    },

    serializeIntoHash: function serializeIntoHash(hash, type, snapshot, options) {
      merge(hash, this.serialize(snapshot, options));
    },

    _hasModelFor: function _hasModelFor(type) {
      var hasModelForType = this.get('store')._hasModelFor(type);

      if (!hasModelForType) {
        warn('Encountered a record of type \'' + type + '\' in the payload, but no corresponding model was found.');
      }

      return hasModelForType;
    }
  });
});
define('frontend-cp/serializers/avatar', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      base64Data: { key: 'data' },
      avatarType: { key: 'type' },
      url: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/case-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/case-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });
});
define('frontend-cp/serializers/case-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      fieldType: { key: 'type' },
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    }
  });
});
define('frontend-cp/serializers/case-form', ['exports', 'ember', 'frontend-cp/serializers/application'], function (exports, _ember, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        if (relationship === 'belongsTo') {
          return _ember['default'].String.underscore(key) + '_id';
        }
        if (relationship === 'hasMany' && key === 'fields') {
          //TODO: make generic and move back into application serializers
          return 'case_field_ids';
        }
      }

      return _ember['default'].String.underscore(key);
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super.apply(this, arguments);

      /*
       * Pull case field ids, ordered by sort order as a comma separated list
       */
      json.case_field_ids = snapshot.hasMany('fields') //eslint-disable-line camelcase
      .sortBy('sortOrder').map(function (field) {
        return field.get('id');
      }).toString();
      return json;
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/case-reply', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      channelType: { key: 'channel' },
      caseType: { key: 'type_id' },
      'case': { serialize: false },
      posts: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      var form = snapshot.get('case.form');
      json.field_values = this.serializeCustomFields(snapshot.attr('fieldValues'), form); //eslint-disable-line camelcase
      json.options.cc = snapshot.attr('options').get('cc') ? snapshot.attr('options').get('cc').toString() : '';

      if (json.channel === 'NOTE') {
        Reflect.deleteProperty(json, 'options');
      }

      return json;
    },

    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      store.peekRecord(payload.data['case'].resource_type, payload.data['case'].id).rollbackAttributes();
      return this._super(store, primaryModelClass, payload, id, requestType);
    }
  });
});
define('frontend-cp/serializers/case-status', ['exports', 'frontend-cp/serializers/application', 'ember'], function (exports, _frontendCpSerializersApplication, _ember) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      statusType: { key: 'type' }
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      var key = relationship.key;
      json[key] = _ember['default'].get(snapshot, key).map(function (obj) {
        return obj.serialize({ includeId: false });
      });

      if (json[key].length === 0) {
        Reflect.deleteProperty(json, key);
      }

      return json;
    }
  });
});
define('frontend-cp/serializers/case', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      caseType: { key: 'type' },
      portal: { serialize: false },
      slaMetrics: { serialize: false },
      creationMode: { serialize: false },
      hasNotes: { serialize: false },
      hasAttachments: { serialize: false },
      rating: { serialize: false },
      ratingStatus: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      lastAgentActivityAt: { serialize: false },
      lastCustomerActivityAt: { serialize: false },
      lastCompletedAt: { serialize: false },
      sourceChannel: { serialize: false },
      view: { serialize: false },
      replyChannels: { serialize: false },
      lastReplier: { serialize: false },
      lastReplierIdentity: { serialize: false },
      brand: { serialize: false },
      lastAssignedBy: { serialize: false },
      sla: { serialize: false },
      identity: { serialize: false },
      realtimeChannel: { serialize: false },
      creator: { serialize: false },
      channels: { serialize: false },
      creationTimestamp: { serialize: false },
      state: { serialize: false }
    },

    _transformRecord: function _transformRecord(data) {
      if (data.assignee) {
        data.assigneeAgent = data.assignee.agent;
        data.assigneeTeam = data.assignee.team;
      }
      Reflect.deleteProperty(data, 'assignee');

      if (data.brand && !Object.keys(data.brand).length) {
        Reflect.deleteProperty(data, 'brand');
      }
    },

    extractArrayData: function extractArrayData(data, payload) {
      var _this = this;

      // TODO: remove this when API will fix response not to return empty objects
      data.forEach(function (record) {
        _this._transformRecord(record);
      });

      this._super.apply(this, arguments);
    },

    extractSingleData: function extractSingleData(data, payload) {
      this._transformRecord(data);

      this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields'), snapshot.get('form')); //eslint-disable-line camelcase
      Reflect.deleteProperty(json, 'custom_fields');

      json.type_id = json.type; // eslint-disable-line camelcase

      // api wait for type_id field
      json.type_id = parseInt(json.type);
      Reflect.deleteProperty(json, 'type');

      // create comma separated list of tag names
      if (snapshot.hasMany('tags')) {
        json.tags = snapshot.hasMany('tags').map(function (tag) {
          return tag.get('name');
        }).join(',');
      }
      return json;
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/channel', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'uuid',
    attrs: {
      channelType: { key: 'type' }
    }
  });
});
define('frontend-cp/serializers/column', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'name'
  });
});
define('frontend-cp/serializers/credential', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({

    normalizePayload: function normalizePayload(payload) {
      payload.data.id = 1;
      payload.data.resource_type = 'credential';

      payload.data = [payload.data];
      return this._super(payload);
    }

  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/definition', ['exports', 'frontend-cp/serializers/application', 'npm:lodash'], function (exports, _frontendCpSerializersApplication, _npmLodash) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'field',
    attrs: {
      definitionType: { key: 'type' }
    },

    // Turning an object of type {key => value} into array [{id: key, value: value}]
    extractItem: function extractItem(data) {
      data = this._super.apply(this, arguments);
      data.values = _npmLodash['default'].map(data.values, function (val, id) {
        return {
          value: id,
          string: val
        };
      });
      return data;
    }
  });
});
define('frontend-cp/serializers/event', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'uuid'
  });
});
define('frontend-cp/serializers/facebook-account', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      accountId: { serialize: false },
      title: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].LSSerializer.extend();
});
define('frontend-cp/serializers/field-option', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      markedForDeletion: { serialize: false },
      values: { embedded: 'always' }
    }
  });
});
define('frontend-cp/serializers/identity-autocomplete-email', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizePayload: function normalizePayload(payload) {
      if (!payload.data) {
        return this._super(payload);
      }

      // set parent model for identity record
      payload.data.forEach(function (record) {
        var type = record.identity.resource_type;
        var id = record.identity.id;

        var item = payload.resources[type][id];

        item.parent = {
          id: record.parent.id,
          resource_type: record.parent.resource_type
        };
      });

      return this._super(payload);
    },

    extractArrayData: function extractArrayData(data, payload) {
      var _this = this;

      var resourceType = 'identity_autocomplete_email';

      data.forEach(function (item) {
        item.id = item.identity.id;
        item.resource_type = resourceType;
      });

      data.forEach(function (item) {
        return _this.extractItem(item, resourceType);
      });
      payload[resourceType] = data;
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/locale', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'locale'
  });
});
define('frontend-cp/serializers/macro-assignee', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      teamFragment: { key: 'team' },
      agentFragment: { key: 'agent' }
    }
  });
});
define('frontend-cp/serializers/macro-properties', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      typeFragment: { key: 'type' },
      statusFragment: { key: 'status' },
      priorityFragment: { key: 'priority' }
    }
  });
});
define('frontend-cp/serializers/note', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      uuid: { serialize: false },
      subject: { serialize: false },
      creator: { serialize: false },
      identity: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      'case': { serialize: false }
    }
  });
});
define('frontend-cp/serializers/oauth-link', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'link',

    /*
     * This isn't a model in a traditional sense, the the model doesn't come with
     * resource_type
     *
     * pull it from the payload instead
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[payload.resource] = data;
      this.extractItem(data, payload.resource);
    }
  });
});
define('frontend-cp/serializers/organization-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/organization-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });
});
define('frontend-cp/serializers/organization-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      fieldType: { key: 'type' },
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    }
  });
});
define('frontend-cp/serializers/organization-note', ['exports', 'frontend-cp/serializers/application', 'ember'], function (exports, _frontendCpSerializersApplication, _ember) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizePayload: function normalizePayload(payload) {
      if (!payload.data || !_ember['default'].isArray(payload.data)) {
        return this._super(payload);
      }

      if (!payload.data[0]) {
        return this._super(payload);
      }

      payload.resources.post = [];
      payload.data.forEach(function (record, i) {
        payload.resources.post.push({
          id: new Date().getTime() + '' + i,
          uuid: new Date().getTime() + '' + i,
          sequence: i,
          contents: record.body_text,
          creator: record.user,
          attachments: record.attachments,
          original: {
            id: record.id,
            resource_type: 'note'
          },
          createdAt: record.created_at,
          updatedAt: record.updated_at,
          resource_type: 'post',
          resource_url: record.resource_url
        });
      });

      return this._super(payload);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/organization', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      emails: { serialize: false },
      phones: { serialize: false },
      twitter: { serialize: false },
      facebook: { serialize: false },
      addresses: { serialize: false },
      websites: { serialize: false },
      notes: { serialize: false },
      customFields: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.domains = snapshot.hasMany('domains').map(function (domain) {
        return domain.get('domain');
      }).uniq().toString();

      json.tags = snapshot.hasMany('tags').getEach('name').toString();
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase

      return json;
    }
  });
});
define('frontend-cp/serializers/predicate-collection', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      id: { key: 'uuid' }
    }
  });
});
define('frontend-cp/serializers/relationship-fragment', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      relationshipId: { key: 'id' },
      relationshipType: { key: 'resource_type' }
    }
  });
});
define('frontend-cp/serializers/role', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      roleType: { key: 'type' }
    }
  });
});
define('frontend-cp/serializers/search-result-group', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({

    primaryKey: 'resource',

    normalizePayload: function normalizePayload(resource) {
      if (resource.resource === 'object') {
        resource.resource = 'search-result-group';
      }

      resource.data.forEach(function (dataItem) {
        dataItem.results.forEach(function (result) {
          Reflect.deleteProperty(result, 'data');
        });
      });

      return this._super(resource);
    }
  });
});
define('frontend-cp/serializers/search-result', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      objectId: { key: 'id' }
    }
  });
});
define('frontend-cp/serializers/tag', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      id: { key: 'name' }
    }
  });
});
define('frontend-cp/serializers/thumbnail', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      thumbnailType: { key: 'type' }
    }
  });
});
define('frontend-cp/serializers/twitter-account-callback', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      account: { serialize: false }
    },

    /*
     * This isn't a model in a traditional sense, the the model doesn't come with
     * resource_type
     *
     * pull it from the payload instead
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[payload.resource] = data;
      this.extractItem(data, payload.resource);
    }
  });
});
define('frontend-cp/serializers/twitter-account', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      twitterId: { serialize: false },
      screenName: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/user-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/user-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });
});
define('frontend-cp/serializers/user-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      fieldType: { key: 'type' },
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    }
  });
});
define('frontend-cp/serializers/user-note', ['exports', 'frontend-cp/serializers/application', 'ember'], function (exports, _frontendCpSerializersApplication, _ember) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizePayload: function normalizePayload(payload) {
      if (!payload.data || !_ember['default'].isArray(payload.data)) {
        return this._super(payload);
      }

      if (!payload.data[0]) {
        return this._super(payload);
      }

      payload.resources.post = [];
      payload.data.forEach(function (record, i) {
        payload.resources.post.push({
          id: new Date().getTime() + '' + i,
          uuid: new Date().getTime() + '' + i,
          sequence: i,
          contents: record.body_text,
          creator: record.user,
          attachments: record.attachments,
          original: {
            id: record.id,
            resource_type: 'note'
          },
          createdAt: record.created_at,
          updatedAt: record.updated_at,
          resource_type: 'post',
          resource_url: record.resource_url
        });
      });

      return this._super(payload);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/user', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      avatar: { serialize: false },
      emails: { serialize: false },
      phones: { serialize: false },
      twitter: { serialize: false },
      facebook: { serialize: false },
      addresses: { serialize: false },
      website: { serialize: false },
      customFields: { serialize: false },
      notes: { serialize: false },
      passwordUpdateAt: { serialize: false },
      avatarUpdateAt: { serialize: false },
      activityAt: { serialize: false },
      visitedAt: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      teams: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.email = getPrimaryEmailAddress(snapshot);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase

      if (Object.keys(json.field_values).length === 0) {
        Reflect.deleteProperty(json, 'field_values');
      }

      // create comma separated list of tag names
      json.tags = snapshot.hasMany('tags').map(function (tag) {
        return tag.get('name');
      }).join(',');

      // The API does not want team_ids if user is a customer...
      if (json.role_id !== '4') {
        json.team_ids = snapshot.hasMany('teams').map(function (team) {
          return team.get('id');
        }).join(',');
      }

      // Set default agent_case_access for non-CUSTOMER
      if (json.role_id !== '4' && !json.agent_case_access) {
        json.agent_case_access = 'INHERIT-FROM-ROLE';
      }

      // Set default organization_case_access for CUSTOMER
      if (json.role_id === '4' && !json.organization_case_access) {
        json.organization_case_access = 'REQUESTED';
      }

      return json;

      function getPrimaryEmailAddress(snapshot) {
        return snapshot.hasMany('emails').filter(function (identityEmail) {
          return identityEmail.get('isPrimary');
        }).map(function (identityEmail) {
          return identityEmail.get('email');
        })[0] || null;
      }
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/view', ['exports', 'ember-data', 'frontend-cp/serializers/application'], function (exports, _emberData, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {

    attrs: {
      updatedAt: { serialize: false },
      createdAt: { serialize: false },
      columns: { embedded: 'always' },
      viewType: { key: 'type' }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.columns = snapshot.hasMany('columns').map(function (column) {
        return column.get('name');
      });

      /* Collections look *nothing* like how they are received */
      json.predicate_collections = snapshot.hasMany('predicateCollections').map(function (collection) {
        // eslint-disable-line camelcase
        return collection.get('propositions').map(function (proposition) {
          return {
            field: proposition.get('field'),
            operator: proposition.get('operator'),
            value: proposition.get('value')
          };
        });
      });

      if (snapshot.get('visibilityType') === 'TEAM') {
        json.team_ids = snapshot.hasMany('visibilityToTeams').map(function (team) {
          return team.get('id');
        });
      }
      return json;
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('frontend-cp/services/analytics', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    metrics: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),

    setup: function setup() {
      var user = this.get('session.session.user');

      this.get('metrics').identify({
        distinctId: user.get('id'),
        name: user.get('fullName'),
        email: user.get('greeting'),
        locale: user.get('locale')
      });

      _ember['default'].set(this, 'metrics.context.userName', user.get('fullName'));
      _ember['default'].set(this, 'metrics.context.userId', user.get('id'));
      _ember['default'].set(this, 'metrics.context.userEmail', user.get('greeting'));
      _ember['default'].set(this, 'metrics.context.userLocale', user.get('locale'));
    }
  });
});
define('frontend-cp/services/api-adapter', ['exports', 'ember'], function (exports, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Service.extend({
    // Services
    store: service('store'),

    trashCase: function trashCase(caseId) {
      var _this = this;

      var adapter = this.container.lookup('adapter:case');
      var url = adapter.namespace + '/cases/' + caseId + '/trash';
      return adapter.ajax(url, 'put').then(function (response) {
        var store = _this.get('store');
        var state = response.data.state;
        store.update('case', { id: caseId, state: state });
      });
    },

    restoreCase: function restoreCase(caseId) {
      var _this2 = this;

      var adapter = this.container.lookup('adapter:case');
      var url = adapter.namespace + '/cases/' + caseId + '/restore';
      return adapter.ajax(url, 'put').then(function (response) {
        var store = _this2.get('store');
        var state = response.data.state;
        store.update('case', { id: caseId, state: state });
      });
    }
  });
});
/**
 * Wrapper for a collection of methods that make requests to the API that
 * cannot be readily modelled in an EmberData way
 */
define('frontend-cp/services/case-tab', ['exports', 'ember', 'npm:lodash', 'frontend-cp/utils/object'], function (exports, _ember, _npmLodash, _frontendCpUtilsObject) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var getProperties = _ember['default'].getProperties;
  var merge = _ember['default'].merge;

  var getEditedTags = function getEditedTags(caseModel) {
    return caseModel.get('tags').map(function (tag) {
      return _ember['default'].Object.create({
        name: tag.get('name'),
        isPusherEdited: false,
        isNew: false
      });
    });
  };

  var getCustomFields = function getCustomFields(caseModel) {
    return caseModel.get('customFields').map(function (field) {
      return _ember['default'].Object.create({
        field: field.get('field'),
        value: field.get('value')
      });
    });
  };

  var copyCase = function copyCase(caseModel) {
    return _ember['default'].Object.create({
      subject: caseModel.get('subject'),
      assigneeTeam: caseModel.get('assigneeTeam'),
      assigneeAgent: caseModel.get('assigneeAgent'),
      requester: caseModel.get('requester'),
      status: caseModel.get('status'),
      caseType: caseModel.get('caseType'),
      priority: caseModel.get('priority'),
      form: caseModel.get('form')
    });
  };

  var convertErrorsToMap = function convertErrorsToMap(errors) {
    return (errors || []).filter(function (error) {
      return error.parameter;
    }).reduce(function (errorMap, error) {
      errorMap.set(error.parameter, true);
      return errorMap;
    }, _ember['default'].Object.create({}));
  };

  var rollbackCase = function rollbackCase(model, original, tags, fields) {
    model.get('errors').clear();
    model.setProperties({
      subject: original.get('subject'),
      assigneeTeam: original.get('assigneeTeam'),
      assigneeAgent: original.get('assigneeAgent'),
      requester: original.get('requester'),
      status: original.get('status'),
      caseType: original.get('caseType'),
      priority: original.get('priority'),
      form: original.get('form'),
      tags: tags,
      customFields: fields
    });
  };

  var includeActivities = function includeActivities(filter) {
    return filter === 'all' || filter === 'posts,activities';
  };

  var includeEvents = function includeEvents(filter) {
    return filter === 'all' || filter === 'posts,events';
  };

  exports['default'] = _ember['default'].Service.extend({
    intl: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),
    timelineCacheService: _ember['default'].inject.service('case-timeline-cache'),
    store: _ember['default'].inject.service(),
    tabStore: _ember['default'].inject.service(),
    tagService: _ember['default'].inject.service('tags'),

    initState: function initState(tabId, model, replyChannel) {
      var existingState = this.getState(tabId);
      // We want to create a new state object only once
      if (existingState.stateLoaded) {
        return;
      }

      var editedCase = copyCase(model);

      var initialState = _ember['default'].Object.create({
        stateLoaded: true,
        channelId: replyChannel ? replyChannel.get('id') : null,
        lastReplyChannelId: replyChannel ? replyChannel.get('id') : null,
        postContent: '',
        attachedPostFiles: [],
        loadingTop: false,
        loadingBottom: false,
        bottomPostsAvailable: true,
        posts: [],
        topPostsAvailable: false,
        errorMap: _ember['default'].Object.create(),
        isSaving: false,
        suggestedPeople: null,
        suggestedPeopleTotal: 0,
        suggestedPeopleLoading: false,
        editedCase: editedCase,
        editedTags: getEditedTags(model),
        localCustomFields: getCustomFields(model),
        replyOptions: this.get('store').createFragment('case-reply-options', {
          cc: []
        }),
        propertiesChangeViaPusher: _ember['default'].Object.create({
          customFields: _ember['default'].Object.create()
        })
      });

      var state = merge(initialState, existingState);
      var caseStatus = state.get('editedCase.status');

      if (!model.get('isNew') && caseStatus.get('statusType') === 'NEW') {
        var statuses = this.get('store').all('case-status');
        var pendingStatus = statuses.find(function (status) {
          return status.get('statusType') === 'OPEN';
        });
        state.set('editedCase.status', pendingStatus);
      }

      this.replaceState(tabId, state);
    },

    replaceState: function replaceState(tabId, state) {
      var tab = this.get('tabStore').getTab(tabId);
      var persistedState = getProperties(state, 'postContent', 'channelId', 'lastReplyChannelId', 'attachedPostFiles', 'isEditInProgress');

      this.get('tabStore').updateNonPersistedState(tab, { 'case': state });
      this.get('tabStore').updateState(tab, { 'case': persistedState });
    },

    getState: function getState(tabId) {
      var tab = this.get('tabStore').getTab(tabId);
      var nonPersistedState = tab.nonPersistedState;

      if (!nonPersistedState['case']) {
        nonPersistedState['case'] = new _ember['default'].Object();
        nonPersistedState['case'].setProperties((0, _frontendCpUtilsObject.jsonToObject)(tab.state['case'] || {}));
      }

      return nonPersistedState['case'];
    },

    resetState: function resetState(tabId) {
      var state = this.getState(tabId);
      state.set('attachedPostFiles', []);
      state.set('propertiesChangeViaPusher', _ember['default'].Object.create({
        customFields: _ember['default'].Object.create()
      }));
      state.set('isSaving', false);
      state.set('postContent', '');
      state.set('replyOptions.cc', []);

      this.persistTabState(tabId);
    },

    loadPosts: function loadPosts(tabId, _ref) {
      var caseModel = _ref.caseModel;
      var filter = _ref.filter;
      var sortOrder = _ref.sortOrder;
      var postId = _ref.postId;

      var state = this.getState(tabId);
      state.set('posts', []);
      state.set('bottomPostsAvailable', true);
      state.set('topPostsAvailable', Boolean(postId));
      this.loadPostsBelow(tabId, { caseModel: caseModel, filter: filter, sortOrder: sortOrder, postId: postId || null, including: true });
    },

    loadPostsAbove: function loadPostsAbove(tabId, _ref2) {
      var caseModel = _ref2.caseModel;
      var filter = _ref2.filter;
      var sortOrder = _ref2.sortOrder;
      var postId = _ref2.postId;

      var state = this.getState(tabId);
      if (state.get('loadingTop')) {
        return;
      }
      if (caseModel.get('isNew')) {
        return;
      }
      state.set('loadingTop', true);
      this.get('timelineCacheService').getPosts(caseModel, postId, {
        direction: sortOrder === 'newest' ? 'newer' : 'older',
        includeActivities: includeActivities(filter),
        includeEvents: includeEvents(filter)
      }).then(function (_ref3) {
        var posts = _ref3.posts;
        var morePostsAvailable = _ref3.morePostsAvailable;

        state.get('posts').unshiftObjects(posts.reverse());
        state.set('loadingTop', false);
        state.set('topPostsAvailable', morePostsAvailable);
      });
    },

    loadPostsBelow: function loadPostsBelow(tabId, _ref4) {
      var caseModel = _ref4.caseModel;
      var filter = _ref4.filter;
      var sortOrder = _ref4.sortOrder;
      var postId = _ref4.postId;
      var including = _ref4.including;

      var state = this.getState(tabId);
      if (state.get('loadingBottom')) {
        return;
      }
      if (caseModel.get('isNew')) {
        return;
      }
      state.set('loadingBottom', true);
      this.get('timelineCacheService').getPosts(caseModel, postId, {
        direction: sortOrder === 'newest' ? 'older' : 'newer',
        including: including,
        includeActivities: includeActivities(filter),
        includeEvents: includeEvents(filter)
      }).then(function (_ref5) {
        var posts = _ref5.posts;
        var morePostsAvailable = _ref5.morePostsAvailable;

        state.get('posts').pushObjects(posts);
        state.set('loadingBottom', false);
        state.set('bottomPostsAvailable', morePostsAvailable);
      });
    },

    refreshTags: function refreshTags(model) {
      // @TODO this is modifying the case under the hood, needs to stop
      this.get('tagService').refreshTagsForCase(model);
    },

    addPostFromReply: function addPostFromReply(tabId, model, post, newestFirst) {
      var state = this.getState(tabId);
      this.get('timelineCacheService').addPost(model, post);

      if (newestFirst) {
        state.get('posts').unshiftObject(post);
      } else {
        state.get('posts').pushObject(post);
      }
    },

    persistTabState: function persistTabState(tabId) {
      this.replaceState(tabId, this.getState(tabId));
    },

    setChannel: function setChannel(tabId, channel) {
      var state = this.getState(tabId);
      var channelId = undefined;
      if (channel && channel.get('id')) {
        channelId = channel.get('id');
      } else {
        var lastReplyChannelId = state.get('lastReplyChannelId');
        channelId = lastReplyChannelId ? lastReplyChannelId : null;
      }

      state.set('channelId', channelId);
      state.set('lastReplyChannelId', channelId);

      this.get('metrics').trackEvent({
        event: 'Case Reply Channel Changed',
        category: 'Case',
        action: 'click',
        label: 'channel dropdown'
      });
      this.persistTabState(tabId);
    },

    setLastChannel: function setLastChannel(tabId, channel) {
      if (channel && channel.get('id')) {
        this.getState(tabId).set('lastChannelId', channel.get('id'));
      }

      this.persistTabState(tabId);
    },

    setNote: function setNote(tabId, channels) {
      this.getState(tabId).set('channelId', channels.findBy('channelType', 'NOTE').get('id'));
      this.persistTabState(tabId);
    },

    setEditInProgress: function setEditInProgress(tabId, state) {
      this.getState(tabId).set('isEditInProgress', state);
      this.persistTabState(tabId);
    },

    addCC: function addCC(tabId, email) {
      this.getState(tabId).get('replyOptions.cc').pushObject(email);
      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'CC Participant Added',
        category: 'Case CC',
        action: 'click',
        label: 'add button'
      });
    },

    removeCC: function removeCC(tabId, email) {
      this.getState(tabId).get('replyOptions.cc').removeObject(email);
      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'CC Participant Removed',
        category: 'Case CC',
        action: 'click',
        label: 'x button'
      });
    },

    getAssigneeFromMacro: function getAssigneeFromMacro(user, macro) {
      switch (macro.get('assignee.type')) {
        case 'UNASSIGNED':
          return [null, null];
        case 'CURRENT_AGENT':
          return [user.get('teams.firstObject'), user];
        case 'TEAM':
          return [macro.get('assignee.team'), macro.get('assignee.agent')];
        case 'AGENT':
          return [macro.get('assignee.team'), macro.get('assignee.agent')];
      }
    },

    applyMacro: function applyMacro(tabId, user, macro) {
      var _this = this;

      var replyType = macro.get('replyType');
      var state = this.getState(tabId);
      if (replyType) {
        if (replyType === 'REPLY') {
          this.setChannel(tabId);
        } else {
          this.setNote(tabId);
        }
      }

      var contentsToAdd = macro.get('replyContents');
      if (contentsToAdd) {
        var postContent = state.get('postContent');
        if (postContent.trim()) {
          state.set('postContent', postContent + '\n' + contentsToAdd);
        } else {
          state.set('postContent', contentsToAdd);
        }

        state.set('isEditInProgress', true);
      }

      var newStatus = macro.get('properties.status');
      if (newStatus) {
        this.setStatus(tabId, newStatus);
      }

      var newPriority = macro.get('properties.priority');
      if (newPriority) {
        this.setPriority(tabId, newPriority);
      }

      var priorityAction = macro.get('properties.priorityAction');
      if (priorityAction) {
        (function () {
          var currentCase = state.get('editedCase');
          var newPriorityLevel = undefined;

          if (priorityAction === 'INCREASE_ONE_LEVEL') {
            newPriorityLevel = currentCase.get('priority.level') + 1;
          } else {
            newPriorityLevel = Math.max(1, currentCase.get('priority.level') - 1);
          }

          var newPriority = _this.get('store').peekAll('case-priority').filter(function (priority) {
            return priority.get('level') === newPriorityLevel;
          }).get('firstObject');

          if (newPriority) {
            _this.setPriority(tabId, newPriority);
          }
        })();
      }

      var newType = macro.get('properties.macroType');
      if (newType) {
        this.setType(tabId, newType);
      }

      var newAssignee = this.getAssigneeFromMacro(user, macro);
      if (newAssignee) {
        this.setAssignee.apply(this, [tabId].concat(_toConsumableArray(newAssignee)));
      }

      var tags = macro.get('tags');
      if (tags.get('length')) {
        tags.forEach(function (tag) {
          if (tag.get('type') === 'ADD') {
            _this.addTag(tabId, tag.get('name'));
          } else {
            _this.removeTag(tabId, tag.get('name'));
          }
        });
      }

      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'Macro Applied',
        category: 'Case',
        action: 'click',
        label: 'macro dropdown'
      });
    },

    addTag: function addTag(tabId, model, tagName) {
      var state = this.getState(tabId);
      var editedTags = state.get('editedTags');
      if (editedTags.find(function (tag) {
        return tag.get('name') === tagName;
      })) {
        return;
      }
      var pusherChangedTags = state.get('propertiesChangeViaPusher.tags');
      var newTag = _ember['default'].Object.create({
        name: tagName,
        isPusherEdited: pusherChangedTags ? pusherChangedTags.get(tagName) : false,
        isNew: !model.get('tags').find(function (tag) {
          return tag.get('name') === tagName;
        })
      });
      editedTags.pushObject(newTag);
      state.set('errorMap.tags', false);
    },

    removeTag: function removeTag(tabId, tag) {
      var state = this.getState(tabId);
      state.get('editedTags').removeObject(tag);
      state.set('errorMap.tags', false);
      this.persistTabState(tabId);
    },

    setPostContent: function setPostContent(tabId, newContent) {
      var state = this.getState(tabId);
      state.set('postContent', newContent);
      state.set('errorMap.contents', false);
      this.persistTabState(tabId);
    },

    setSubject: function setSubject(tabId, subject) {
      var state = this.getState(tabId);
      state.set('editedCase.subject', subject);
      state.set('errorMap.subject', false);
      this.persistTabState(tabId);
    },

    setRequester: function setRequester(tabId, requester) {
      var state = this.getState(tabId);
      state.set('editedCase.requester', requester);
      state.set('errorMap.requester_id', false);
    },

    setAssignee: function setAssignee(tabId, team, agent) {
      var state = this.getState(tabId);
      state.set('editedCase.assigneeAgent', agent);
      state.set('editedCase.assigneeTeam', team);
      state.set('errorMap.assignee_agent_id', false);
      state.set('errorMap.assignee_team_id', false);
      this.persistTabState(tabId);
    },

    setStatus: function setStatus(tabId, status) {
      var state = this.getState(tabId);
      state.set('editedCase.status', status);
      state.set('errorMap.status_id', false);
    },

    setType: function setType(tabId, type) {
      var state = this.getState(tabId);
      state.set('editedCase.caseType', type);
      state.set('errorMap.type_id', false);
      this.persistTabState(tabId);
    },

    setPriority: function setPriority(tabId, priority) {
      var state = this.getState(tabId);
      state.set('editedCase.priority', priority);
      state.set('errorMap.priority_id', false);
    },

    setForm: function setForm(tabId, form) {
      var state = this.getState(tabId);
      state.set('editedCase.form', form);
      state.set('errorMap.form_id', false);
    },

    setCustomField: function setCustomField(tabId, field, value) {
      var state = this.getState(tabId);
      var localCustomFields = state.get('localCustomFields');
      var valueObject = localCustomFields.find(function (value) {
        return value.get('field.id') === field.get('id');
      });
      if (!valueObject) {
        valueObject = _ember['default'].Object.create({ field: field, value: value });
        localCustomFields.pushObject(valueObject);
      }
      valueObject.set('value', value);
      state.get('errorMap').set(field.get('key'), false);
      this.persistTabState(tabId);
    },

    updateModel: function updateModel(model, state) {
      var _this2 = this;

      var editedCase = state.get('editedCase');

      model.setProperties({
        subject: editedCase.get('subject'),
        assigneeTeam: editedCase.get('assigneeTeam'),
        assigneeAgent: editedCase.get('assigneeAgent'),
        requester: editedCase.get('requester'),
        status: editedCase.get('status'),
        caseType: editedCase.get('caseType'),
        priority: editedCase.get('priority'),
        form: editedCase.get('form'),
        tags: state.get('editedTags').map(function (tag) {
          return _this2.get('tagService').getTagByName(tag.get('name'));
        }),
        customFields: state.get('localCustomFields').map(function (customField) {
          return _this2.get('store').createFragment('case-field-value', {
            fieldFragment: _this2.get('store').createFragment('relationship-fragment', {
              relationshipId: customField.get('field.id'),
              relationshipType: customField.get('field.type')
            }),
            value: customField.get('value')
          });
        })
      });
    },

    updateTabTitle: function updateTabTitle(tabId, label) {
      var tab = this.get('tabStore').getTab(tabId);
      this.get('tabStore').update(tab, { label: label });
    },

    update: function update(tabId, model, channel) {
      var _this3 = this;

      // we are just updating the case -- don't create a case-reply
      // UPDATE - No reply
      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var state = this.getState(tabId);

      this.updateModel(model, state);
      state.set('isSaving', true);

      return model.save().then(function () {
        _this3.resetState(tabId); // RESET STATE
        _this3.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        _this3.updateTabTitle(tabId, model.get('subject'));

        _this3.get('metrics').trackEvent({
          event: 'Case Updated',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this3.get('metrics').trackEvent({
          event: 'Case Update Failed',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    create: function create(tabId, model, channel) {
      var _this4 = this;

      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var state = this.getState(tabId);
      var uploads = state.get('attachedPostFiles');
      var attachmentIds = uploads.mapBy('attachmentId').compact();

      this.updateModel(model, state);

      model.set('contents', state.get('postContent'));
      model.set('channel', channel.get('channelType'));
      model.set('channelId', channel.get('account.id'));
      model.set('attachmentFileIds', attachmentIds);

      state.set('isSaving', true);

      return model.save().then(function () {
        _this4.resetState(tabId); // RESET STATE
        _this4.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        _this4.updateTabTitle(tabId, model.get('subject'));

        _this4.get('metrics').trackEvent({
          event: 'Case Updated',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this4.get('metrics').trackEvent({
          event: 'Case Update Failed',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    reply: function reply(tabId, model, channel, newestFirst) {
      var _this5 = this;

      var state = this.getState(tabId);
      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var uploads = state.get('attachedPostFiles');
      var attachmentIds = uploads.mapBy('attachmentId').compact();
      var replyOptions = state.get('replyOptions');
      var post = state.get('postContent').trim();

      state.set('isSaving', true);
      this.updateModel(model, state);

      return model.saveWithPost(post, channel, attachmentIds, replyOptions).then(function (caseReply) {
        caseReply.get('posts').forEach(function (post) {
          _this5.addPostFromReply(tabId, model, post, newestFirst);
        });

        _this5.resetState(tabId); // RESET STATE
        _this5.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        _this5.updateTabTitle(tabId, model.get('subject'));

        _this5.get('metrics').trackEvent({
          event: 'Case Replied' + (channel.get('channelType') === 'NOTE' ? ' (with note)' : ''),
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });

        if (attachmentIds.length) {
          _this5.get('metrics').trackEvent({
            event: 'Case Attachments Added',
            category: 'Case',
            action: 'click',
            label: 'submit button',
            value: attachmentIds.length
          });
        }
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this5.get('metrics').trackEvent({
          event: 'Case Reply Failed' + (channel.get('channelType') === 'NOTE' ? ' (with note)' : ''),
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    hasReply: function hasReply(tabId) {
      var state = this.getState(tabId);
      var attachmentIds = state.get('attachedPostFiles').mapBy('attachmentId').compact();
      return state.get('postContent').trim() !== '' || attachmentIds.length > 0;
    },

    isUploadInProgress: function isUploadInProgress(tabId) {
      // @TODO we need to do something better here, UI wise.
      var uploads = this.getState(tabId).get('attachedPostFiles');
      return uploads.any(function (u) {
        return u.get('status') === 'PROGRESS';
      });
    },

    updateCaseFromPusher: function updateCaseFromPusher(serverData, tabId, caseId) {
      var _this6 = this;

      var state = this.getState(tabId);
      var caseModel = this.get('store').peekRecord('case', caseId);

      var propertiesChangeViaPusher = state.get('propertiesChangeViaPusher');
      var original = copyCase(caseModel);
      var originalTags = caseModel.get('tags').toArray().slice(0);
      var originalCustomFieldsHash = {};
      caseModel.get('customFields').forEach(function (caseField) {
        originalCustomFieldsHash[caseField.get('field.id')] = caseField.get('value');
      });
      var editedCase = state.get('editedCase');
      var localCustomFields = state.get('localCustomFields');
      var errorMap = state.get('errorMap');

      if (caseModel.get('isSaving')) {
        return;
      }

      caseModel.reload().then(function () {
        if (original.get('assigneeTeam') !== caseModel.get('assigneeTeam') || original.get('assigneeAgent') !== caseModel.get('assigneeAgent')) {
          editedCase.set('assigneeTeam', caseModel.get('assigneeTeam'));
          editedCase.set('assigneeAgent', caseModel.get('assigneeAgent'));
          errorMap.set('assignee_agent_id', false);
          errorMap.set('assignee_team_id', false);
          propertiesChangeViaPusher.set('assignee', true);
        }

        var properties = ['subject', 'requester', 'status', 'caseType', 'priority', 'form'];
        properties.forEach(function (property) {
          if (original.get(property) !== caseModel.get(property)) {
            editedCase.set(property, caseModel.get(property));
            errorMap.set(property, false);
            propertiesChangeViaPusher.set(property, true);
          }
        });

        _this6.get('store').peekAll('case-field').forEach(function (field) {
          var fieldPredicate = function fieldPredicate(fieldValue) {
            return fieldValue.get('field.id') === field.get('id');
          };
          var updatedField = caseModel.get('customFields').find(fieldPredicate);
          var userModifiedField = localCustomFields.find(fieldPredicate);

          var originalValue = originalCustomFieldsHash[field.get('id')];
          var updatedValue = updatedField ? updatedField.get('value') : undefined; // eslint-disable-line no-undefined
          var userModifiedValue = userModifiedField ? userModifiedField.get('value') : undefined; // eslint-disable-line no-undefined

          if (originalValue !== updatedValue) {
            // if the missing value was replaced with an empty string or vice versa, we won't mark it
            // as changed via pusher (given that the local value was also falsish)
            var isFalsish = function isFalsish(val) {
              return val === undefined || val === '';
            }; // eslint-disable-line no-undefined
            var sameish = _npmLodash['default'].every([userModifiedValue, originalValue, updatedValue], isFalsish);
            if (!sameish) {
              propertiesChangeViaPusher.get('customFields').set(field.get('id'), true);
            }
            errorMap.set(field.get('key'), false);
            if (updatedField) {
              if (userModifiedField) {
                userModifiedField.set('value', updatedValue);
              } else {
                var value = updatedField.get('value');
                var newField = _ember['default'].Object.create({ field: field, value: value });
                localCustomFields.pushObject(newField);
              }
            } else {
              localCustomFields.removeObject(userModifiedField);
            }
          }
        });

        _this6.get('tagService').refreshTagsForCase(caseModel).then(function (serverTags) {
          var editedTags = state.get('editedTags');

          var serverTagNames = serverTags.map(function (tag) {
            return tag.get('name');
          });
          var originalTagNames = originalTags.map(function (tag) {
            return tag.get('name');
          });
          var tagsWereModified = serverTagNames.length !== originalTagNames.length || _npmLodash['default'].difference(serverTagNames, originalTagNames).length > 0;

          if (tagsWereModified) {
            errorMap.set('tags', false);
            propertiesChangeViaPusher.set('tags', _ember['default'].Object.create());
          }

          // Tags aded by the server
          serverTagNames.forEach(function (tagName) {
            if (originalTagNames.indexOf(tagName) === -1) {
              propertiesChangeViaPusher.get('tags').set(tagName, true);
              var tag = editedTags.find(function (tag) {
                return tag.get('name') === tagName;
              });
              if (!tag) {
                tag = _ember['default'].Object.create({
                  name: tagName
                });
                editedTags.pushObject(tag);
              }
              tag.set('isPusherEdited', true);
              tag.set('isNew', false);
            }
          });

          // Tags removed by the server
          originalTagNames.forEach(function (tagName) {
            if (serverTagNames.indexOf(tagName) === -1) {
              propertiesChangeViaPusher.get('tags').set(tagName, true);
              var tag = editedTags.find(function (tag) {
                return tag.get('name') === tagName;
              });
              if (tag) {
                editedTags.removeObject(tag);
              }
            }
          });

          _this6.persistTabState(tabId);
        });
      });
    }
  });
});
define('frontend-cp/services/case-timeline-cache', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Promise = _ember['default'].RSVP.Promise;
  var defaultPostCount = 10;

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    cache: null,

    initCache: _ember['default'].on('init', function () {
      this.set('cache', {});
    }),

    /**
     * Return cache object for a given case
     *
     * @param {DS.Model} caseModel case
     * @return {*} cache object
     */
    getCaseCache: function getCaseCache(caseModel) {
      var caseCache = this.get('cache')[caseModel.get('id')];
      if (!caseCache) {
        caseCache = this.get('cache')[caseModel.get('id')] = {
          posts: {},
          newestPost: null,
          oldestPost: null,
          total: null,
          activities: [],
          firstActivityTimestamp: null,
          lastActivityTimestamp: null
        };
      }
      return caseCache;
    },

    /**
     * Return the most recent post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @return {Promise} post
     */
    _getNewestPost: function _getNewestPost(caseModel) {
      var caseCache = this.getCaseCache(caseModel);
      return this._fetchPosts(caseModel).then(function () {
        return caseCache.newestPost;
      });
    },

    /**
     * Add post to the cache.
     *
     * @param {DS.Model} caseModel case
     * @param {DS.Model} post post
     */
    addPost: function addPost(caseModel, post) {
      var caseCache = this.getCaseCache(caseModel);
      caseCache.posts[post.get('sequence')] = post;
      caseCache.total += 1;
      var previousPost = caseCache.newestPost;
      if (!previousPost || previousPost.get('sequence') < post.get('sequence')) {
        caseCache.newestPost = post;
      }
    },

    /**
     * Return the oldest post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @return {Promise<DS.Model>} post
     */
    _getOldestPost: function _getOldestPost(caseModel) {
      var caseCache = this.getCaseCache(caseModel);
      if (caseCache.oldestPost) {
        return Promise.resolve(caseCache.oldestPost);
      } else if (caseCache.total === 0) {
        return Promise.resolve(null);
      } else {
        return this._fetchPosts(caseModel, { afterId: 0 }).then(function () {
          return caseCache.oldestPost;
        });
      }
    },

    /**
     * Get a single post.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {DS.Model} postId post id
     * @return {Promise<DS.Model>} post
     */
    _getSinglePost: function _getSinglePost(caseModel, postId) {
      var post = this.get('store').peekRecord('post', postId);
      if (post) {
        if (post.get('isReloading')) {
          return post.reload();
        } else {
          return Promise.resolve(post);
        }
      } else {
        // TODO FIXME the API should allow fetching post without providing case id
        post = this.get('store').createRecord('post', { id: postId });
        post.set('case', caseModel);
        return post.reload();
      }
    },

    /**
     * Return posts for a given case.
     *
     * @param {DS.Model} caseModel case
     * @param {Number} postId reference post id
     * @param {[String]} options.direction whether to request 'older' or 'newer' posts
     * @param {[Number]} options.count post count
     * @param {[Number]} options.including whether to include the post with specified id
     * @return {Promise} posts
     */
    getPosts: function getPosts(caseModel, postId) {
      var _this = this;

      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref$direction = _ref.direction;
      var direction = _ref$direction === undefined ? 'older' : _ref$direction;
      var _ref$count = _ref.count;
      var count = _ref$count === undefined ? defaultPostCount : _ref$count;
      var _ref$includeActivities = _ref.includeActivities;
      var includeActivities = _ref$includeActivities === undefined ? true : _ref$includeActivities;
      var _ref$includeEvents = _ref.includeEvents;
      var includeEvents = _ref$includeEvents === undefined ? true : _ref$includeEvents;
      var _ref$including = _ref.including;
      var including = _ref$including === undefined ? false : _ref$including;

      var post = undefined;

      if (postId) {
        post = this._getSinglePost(caseModel, postId);
      } else {
        post = direction === 'older' ? this._getNewestPost(caseModel) : this._getOldestPost(caseModel);
      }

      return post.then(function (post) {
        if (!post) {
          return { posts: [], morePostsAvailable: false };
        }
        return _this._getPostsRecursive(caseModel, post, direction, including ? count - 1 : count).then(function (posts) {
          return [post].concat(posts);
        })
        // Load activities
        .then(function (posts) {
          return Promise.all([includeActivities ? _this._getActivitiesForPosts(caseModel, posts, direction, 'activity') : [], includeEvents ? _this._getActivitiesForPosts(caseModel, posts, direction, 'event') : [], posts]);
        }).then(function (_ref2) {
          var _ref22 = _slicedToArray(_ref2, 3);

          var activities = _ref22[0];
          var events = _ref22[1];
          var posts = _ref22[2];

          var caseCache = _this.getCaseCache(caseModel);
          var morePostsAvailable = undefined;
          if (direction === 'older') {
            morePostsAvailable = posts.get('lastObject.sequence') !== 1;
          } else {
            morePostsAvailable = posts.get('lastObject.sequence') !== caseCache.total;
          }

          // Merge events, activities and posts
          var all = _this._mergeTwoTimelines(_this._mergeTwoTimelines(activities, events, direction), posts, direction);
          // Finally, remove initial post if it's not required
          all = including ? all : all.filter(function (p) {
            return p !== post;
          });
          return { posts: all, morePostsAvailable: morePostsAvailable };
        });
      });
    },

    /**
     * Perform merge by timestamp.
     * When same-date conflicts occur, the first timeline objects will be
     * considered to be newer.
     *
     * @private
     * @param {Array<DS.Model>} activities 1st timeline
     * @param {Array<DS.Model>} posts 2nd timeline
     * @param {String} direction older or newer
     * @return {Array<DS.Model>} merged timeline
     */
    _mergeTwoTimelines: function _mergeTwoTimelines(activities, posts, direction) {
      var postsWithActivities = [];
      while (posts.length !== 0 || activities.length !== 0) {
        var topPost = posts[0];
        var topActivity = activities[0];

        if (!topPost) {
          postsWithActivities.push(topActivity);
          activities.splice(0, 1);
          continue;
        }

        if (!topActivity) {
          postsWithActivities.push(topPost);
          posts.splice(0, 1);
          continue;
        }

        var postDate = topPost.get('createdAt');
        var activityDate = topActivity.get('createdAt');

        if (direction === 'newer') {
          if (activityDate.getTime() < postDate.getTime()) {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          } else {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          }
        } else if (direction === 'older') {
          if (postDate.getTime() > activityDate.getTime()) {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          } else {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          }
        }
      }
      return postsWithActivities;
    },

    /**
     * Get all activites for a range of posts.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {Array<DS.Model>} posts posts
     * @param {String} direction older or newer
     * @param {String} type activity or event
     * @return {Promise<Array<DS.Model>>} activities
     */
    _getActivitiesForPosts: function _getActivitiesForPosts(caseModel, posts, direction, type) {
      var _this2 = this;

      var cache = this.getCaseCache(caseModel);

      var parseNextUrl = function parseNextUrl(nextUrl) {
        return _npmLodash['default'].zipObject(nextUrl.split('&').map(function (segment) {
          return segment.split('=');
        }));
      };

      // Fetch all activities or events between two points in time (inclusive).
      var fetchActivities = function fetchActivities(timestamps, end, direction) {
        return _this2.get('store').query(type, {
          parent: type === 'activity' ? caseModel : caseModel.get('requester'),
          // since and until are exclusive
          since: timestamps.since,
          until: timestamps.until,
          sort_order: direction === 'newer' ? 'ASC' : 'DESC',
          limit: 10
        }).then(function (result) {
          var isActivityNotCreatedBeforeLastRecord = function isActivityNotCreatedBeforeLastRecord(activity) {
            return activity.get('createdAt').getTime() >= end.getTime();
          };
          var isActivityNotCreatedAfterLastRecord = function isActivityNotCreatedAfterLastRecord(activity) {
            return activity.get('createdAt').getTime() <= end.getTime();
          };
          var filteringFunction = undefined;
          if (!end) {
            filteringFunction = function () {
              return true;
            };
          } else if (direction === 'older') {
            filteringFunction = isActivityNotCreatedBeforeLastRecord;
          } else {
            filteringFunction = isActivityNotCreatedAfterLastRecord;
          }

          var activities = _npmLodash['default'].filter(result.toArray(), filteringFunction);
          if (activities.length < 10) {
            return activities;
          } else {
            var nextUrl = _this2.get('store').metadataFor('activity').next;
            return fetchActivities(parseNextUrl(nextUrl), end, direction).then(function (moreActivities) {
              return activities.concat(moreActivities);
            });
          }
        });
      };

      var getActivitiesBetweenCases = function getActivitiesBetweenCases(from, to, direction) {
        var newer = direction === 'newer';
        var isBounded = !to || (newer ? to.get('sequence') === cache.total : to.get('sequence') === 1);
        var start = new Date(from.get('createdAt').getTime() - (newer ? 0 : 1000));
        var end = !isBounded ? new Date(to.get('createdAt').getTime() - (newer ? 1000 : 0)) : null;
        var timestamps = {
          since: direction === 'newer' ? Math.floor((start.getTime() - 1000) / 1000) : null,
          until: direction === 'older' ? Math.floor((start.getTime() + 1000) / 1000) : null
        };
        return fetchActivities(timestamps, end, direction);
      };

      var from = posts[0];
      var to = posts.length === 1 ? null : posts[posts.length - 1];

      return getActivitiesBetweenCases(from, to, direction);
    },

    /**
     * Recursive function used by getPosts
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {DS.Model} post post
     * @param {DS.Model} direction 'older' or 'newer'
     * @param {[Number]} count count
     * @return {Promise} posts
     */
    _getPostsRecursive: function _getPostsRecursive(caseModel, post, direction) {
      var _this3 = this;

      var count = arguments.length <= 3 || arguments[3] === undefined ? defaultPostCount : arguments[3];

      if (count === 0) {
        return Promise.resolve([]);
      }

      var caseCache = this.getCaseCache(caseModel);

      var nextSequence = post.get('sequence') + (direction === 'older' ? -1 : 1);
      if (caseCache.total !== null && nextSequence === 0) {
        return Promise.resolve([]);
      }

      var nextPost = caseCache.posts[nextSequence];
      var queryParamName = direction === 'older' ? 'beforeId' : 'afterId';

      return (nextPost ? Promise.resolve(nextPost) : this._fetchPosts(caseModel, _defineProperty({}, queryParamName, post.get('id'))).then(function () {
        return caseCache.posts[nextSequence];
      })).then(function (post) {
        if (!post) {
          return [];
        } else {
          return _this3._getPostsRecursive(caseModel, post, direction, count - 1).then(function (posts) {
            return [post].concat(posts);
          });
        }
      });
    },

    /**
     * Retrieves posts from the server. Returns a promise which resolves when
     * fetch is successful
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {[Number]} options.afterId id of the post
     * @param {[Number]} options.beforeId id of the post
     * @return {Promise} promise
     */
    _fetchPosts: function _fetchPosts(caseModel) {
      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$afterId = _ref3.afterId;
      var afterId = _ref3$afterId === undefined ? null : _ref3$afterId;
      var _ref3$beforeId = _ref3.beforeId;
      var beforeId = _ref3$beforeId === undefined ? null : _ref3$beforeId;

      var caseCache = this.getCaseCache(caseModel);
      var params = { parent: caseModel };
      if (afterId !== null) {
        params.after_id = afterId; // eslint-disable-line camelcase
      }
      if (beforeId !== null) {
        params.before_id = beforeId; // eslint-disable-line camelcase
      }

      return this.get('store').query('post', params).then(function (newPosts) {
        caseCache.total = newPosts.get('meta').total;
        newPosts.forEach(function (post) {
          caseCache.posts[post.get('sequence')] = post;
          if (post.get('sequence') === caseCache.total) {
            caseCache.newestPost = post;
          }
          if (post.get('sequence') === 1) {
            caseCache.oldestPost = post;
          }
        });
      });
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/services/custom-fields/list', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    componentFor: function componentFor(fieldType) {
      switch (fieldType) {
        case 'TEXT':
          return 'ko-info-bar/field/text';
        case 'TEXTAREA':
          return 'ko-info-bar/field/multiline-text';
        case 'CHECKBOX':
          return 'ko-info-bar/field/checkbox';
        case 'SELECT':
          return 'ko-info-bar/field/select';
        case 'CASCADINGSELECT':
          return 'ko-info-bar/field/cascadingselect';
        case 'RADIO':
          return 'ko-info-bar/field/radio';
        case 'NUMERIC':
          return 'ko-info-bar/field/numeric';
        case 'DECIMAL':
          return 'ko-info-bar/field/decimal';
        case 'FILE':
          return 'ko-info-bar/field/file';
        case 'YESNO':
          return 'ko-info-bar/field/yesno';
        case 'DATE':
          return 'ko-info-bar/field/date';
        case 'REGEX':
          return 'ko-info-bar/field/regex';
        default:
          return '';
      }
    }
  });
});
define('frontend-cp/services/custom-fields/options', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    optionsToBeDeleted: [],

    save: function save(options) {
      var promises = [];

      options.forEach(function (option) {
        option.get('values').forEach(function (value) {
          promises.push(value.save());
        });
        promises.push(option.save());
      });

      return promises;
    },

    create: function create() {
      var store = this.get('store');
      var languages = store.peekAll('language');

      var newFieldOption = store.createRecord('field-option', {
        sortOrder: 1
      });
      languages.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        newFieldOption.get('values').pushObject(localeField);
      });

      return newFieldOption;
    },

    add: function add(options) {
      var maxSortOrder = Reflect.apply(Math.max, Math, options.map(function (option) {
        return option.get('sortOrder');
      }));

      // maxSortOrder can be +Infinity, if options are empty
      if (maxSortOrder < 0) {
        maxSortOrder = 0;
      }

      var newFieldOption = this.create();
      newFieldOption.set('sortOrder', maxSortOrder + 1);

      options.pushObject(newFieldOption);
    },

    remove: function remove(option) {
      if (option.get('isNew')) {
        option.rollbackAttributes();
      } else if (!option.get('isDeleted')) {
        option.set('markedForDeletion', true);
      }

      this.get('optionsToBeDeleted').pushObject(option);
    },

    clear: function clear(options) {
      var promises = [];
      // saving the model will re-add all the options
      // we have marked for deletion - remove them again
      this.get('optionsToBeDeleted').forEach(function (option) {
        if (!option.get('isDeleted')) {
          option.get('values').forEach(function (value) {
            value.deleteRecord();
          });
          option.deleteRecord();
        }

        option.get('values').forEach(function (value) {
          promises.push(value.save());
        });

        promises.push(option.save());

        options.removeObject(option);
      });

      this.get('optionsToBeDeleted').clear();

      return promises;
    },

    rollbackAttributes: function rollbackAttributes(options) {
      if (!options.get('length')) {
        return;
      }

      options.toArray().forEach(function (option) {
        option.get('values').toArray().forEach(function (value) {
          if (value) {
            value.rollbackAttributes();
          }
        });
        option.rollbackAttributes();
      });
    },

    saveByFieldType: function saveByFieldType(modelPrefix, fieldType) {
      var promises = [];

      switch (fieldType) {
        case 'PRIORITY':
          this.get('store').peekAll(modelPrefix + 'priority').forEach(function (priority) {
            promises.push(priority.save());
          });
          break;

        case 'STATUS':
          this.get('store').peekAll(modelPrefix + 'status').forEach(function (status) {
            if (status.get('statusType') === 'CUSTOM') {
              promises.push(status.save());
            }
          });
          break;

        case 'TYPE':
          this.get('store').peekAll(modelPrefix + 'type').forEach(function (type) {
            promises.push(type.save());
          });
          break;
      }

      return promises;
    }
  });
});
define('frontend-cp/services/custom-fields/types', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    availableTypes: [{ name: 'TEXT', nameIntlKey: 'admin.casefields.type.text.name', descriptionIntlKey: 'admin.casefields.type.text.description' }, { name: 'TEXTAREA', nameIntlKey: 'admin.casefields.type.textarea.name', descriptionIntlKey: 'admin.casefields.type.textarea.description' }, { name: 'RADIO', nameIntlKey: 'admin.casefields.type.radio.name', descriptionIntlKey: 'admin.casefields.type.radio.description' }, { name: 'SELECT', nameIntlKey: 'admin.casefields.type.dropdown.name', descriptionIntlKey: 'admin.casefields.type.dropdown.description' }, { name: 'CHECKBOX', nameIntlKey: 'admin.casefields.type.checkbox.name', descriptionIntlKey: 'admin.casefields.type.checkbox.description' }, { name: 'NUMERIC', nameIntlKey: 'admin.casefields.type.numeric.name', descriptionIntlKey: 'admin.casefields.type.numeric.description' }, { name: 'DECIMAL', nameIntlKey: 'admin.casefields.type.decimal.name', descriptionIntlKey: 'admin.casefields.type.decimal.description' }, { name: 'FILE', nameIntlKey: 'admin.casefields.type.file.name', descriptionIntlKey: 'admin.casefields.type.file.description' }, { name: 'YESNO', nameIntlKey: 'admin.casefields.type.yesno.name', descriptionIntlKey: 'admin.casefields.type.yesno.description' }, { name: 'CASCADINGSELECT', nameIntlKey: 'admin.casefields.type.cascadingselect.name', descriptionIntlKey: 'admin.casefields.type.cascadingselect.description' }, { name: 'DATE', nameIntlKey: 'admin.casefields.type.date.name', descriptionIntlKey: 'admin.casefields.type.date.description' }, { name: 'REGEX', nameIntlKey: 'admin.casefields.type.regex.name', descriptionIntlKey: 'admin.casefields.type.regex.description' }],

    getTypeByName: function getTypeByName(name) {
      var matched = this.get('availableTypes').filter(function (record) {
        return record.name === name;
      });

      return matched.length ? matched[0] : {};
    }
  });
});
define('frontend-cp/services/custom-fields', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    store: _ember['default'].inject.service('store'),
    customFieldsOptions: _ember['default'].inject.service('custom-fields/options'),
    customFieldsTypes: _ember['default'].inject.service('custom-fields/types'),
    sorter: _ember['default'].inject.service('sorter'),

    getTitleBreadcrumbs: function getTitleBreadcrumbs(model) {
      var title = [];
      var type = this.get('customFieldsTypes').getTypeByName(model.get('fieldType'));
      var stateModifier = model.get('isNew') ? 'new' : 'edit';

      title.push(this._getTranslation(this._getTranslationPrefix(model.constructor.modelName)));

      if (model.get('title')) {
        title.push(model.get('title'));
      } else {
        title.push(this._getTranslation(type.nameIntlKey));
        title.push(this._getTranslation('admin.fields.' + stateModifier + '.heading'));
      }

      return title.join(' / ');
    },

    create: function create(model) {
      var store = this.get('store');
      var languages = store.peekAll('language');

      model.set('is_system', false);

      languages.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        model.get('customerTitles').pushObject(localeField);
      });
      languages.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        model.get('descriptions').pushObject(localeField);
      });

      if (model.get('isChoiceField') && model.get('options.length') === 0) {
        var newFieldOption = this.get('customFieldsOptions').create();

        model.get('options').pushObject(newFieldOption);
      }

      return model;
    },

    save: function save(model) {
      var _this = this;

      return model.save().then(function () {
        _this.rollback(model);
        model.cacheRelationships();

        return _ember['default'].RSVP.Promise.resolve();
      });
    },

    rollback: function rollback(model) {
      this.get('customFieldsOptions').rollbackAttributes(model.get('options'));

      model.get('customerTitles').toArray().forEach(function (locale) {
        locale.rollbackAttributes();
      });
      model.get('descriptions').toArray().forEach(function (locale) {
        locale.rollbackAttributes();
      });
      model.rollbackAttributes();
    },

    reorder: function reorder(_, models) {
      this.get('sorter').sort(models);
    },

    _saveReorder: function _saveReorder(url, options) {
      var adapter = this.container.lookup('adapter:application');
      adapter.ajax(url, 'PUT', options);
    },

    toggleEnabled: function toggleEnabled(field) {
      field.toggleProperty('isEnabled');
      return field.save();
    },

    destroyRecord: function destroyRecord(field) {
      return field.destroyRecord();
    },

    addOption: function addOption(model) {
      this.get('customFieldsOptions').add(model.get('options'));
    },

    removeOption: function removeOption(option) {
      this.get('customFieldsOptions').remove(option);
    },

    validateTransition: function validateTransition(controller, transition) {
      var changedAttributes = controller.getChangedAttributes();
      var onlyFieldTypeChanged = Object.keys(changedAttributes).length === 1 && changedAttributes.fieldType;

      if (!onlyFieldTypeChanged) {
        if (controller.userHasChangedModel()) {
          if (confirm(this._getTranslation('generic.confirm.lose_changes'))) {
            // eslint-disable-line
            controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
            return false;
          }
        }
      }

      // edge case - we created an empty model, so don't ask
      // a user to to confirm anything here; it's empty, so
      // just delete it
      if (controller.get('model.isNew')) {
        controller.send('rollBackModel');
      }
    },

    baseTypeKeyForFieldType: function baseTypeKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
        case 'TEXT':
          return 'admin.casefields.type.text.name';

        case 'MESSAGE':
        case 'TEXTAREA':
          return 'admin.casefields.type.textarea.name';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
        case 'SELECT':
        case 'DROPDOWN':
          return 'admin.casefields.type.dropdown.name';

        case 'RADIO':
          return 'admin.casefields.type.radio.name';
        case 'CHECKBOX':
          return 'admin.casefields.type.checkbox.name';
        case 'NUMERIC':
          return 'admin.casefields.type.numeric.name';
        case 'DECIMAL':
          return 'admin.casefields.type.decimal.name';
        case 'FILE':
          return 'admin.casefields.type.file.name';
        case 'YESNO':
          return 'admin.casefields.type.yesno.name';
        case 'CASCADINGSELECT':
          return 'admin.casefields.type.cascadingselect.name';
        case 'DATE':
          return 'admin.casefields.type.date.name';
        case 'REGEX':
          return 'admin.casefields.type.regex.name';
      }
    },

    baseKeyForFieldType: function baseKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
          return 'TEXT';

        case 'MESSAGE':
          return 'TEXTAREA';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
          return 'SELECT';
        default:
          return fieldType;
      }
    },

    _getOptionPromises: function _getOptionPromises(options, typeKey, fieldType) {
      var fieldOptions = this.get('customFieldsOptions');
      var promises = [];

      promises = promises.concat(fieldOptions.clear(options));
      promises = promises.concat(fieldOptions.save(options));
      promises = promises.concat(fieldOptions.saveByFieldType(typeKey, fieldType));

      return promises;
    },

    _addNotification: function _addNotification(translationKey) {
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'error' : arguments[1];

      this.get('notification').add({
        type: type,
        dismissable: true,
        autodismiss: true,
        title: this._getTranslation(translationKey),
        body: null
      });
    },

    _getModelPrefix: function _getModelPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'case-';
      } else if (typeKey === 'user-field') {
        return 'user-';
      } else if (typeKey === 'organization-field') {
        return 'organization-';
      }
    },

    _getUrlPrefix: function _getUrlPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'cases';
      } else if (typeKey === 'user-field') {
        return 'users';
      } else if (typeKey === 'organization-field') {
        return 'organizations';
      }
    },

    _getTranslationPrefix: function _getTranslationPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'admin.casefields';
      } else if (typeKey === 'user-field') {
        return 'admin.userfields';
      } else if (typeKey === 'organization-field') {
        return 'admin.organizationfields';
      }
    },

    _getTranslation: function _getTranslation(key) {
      return this.get('intl').findTranslationByKey(key);
    }
  });
});
define('frontend-cp/services/error-handler/credential-expired-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.user_credential_expired'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/form-invalid-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.validation_errors'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/generic-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.generic_error'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/notification-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    processAll: function processAll(records) {
      this.records = records || [];
      this.process();
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var _this = this;

      var recordsCount = this.records.length;

      if (recordsCount) {
        this.records.forEach(function (notification) {
          _this.get('notification').add({
            type: notification.type.toLowerCase(),
            title: notification.message,
            autodismiss: !notification.sticky,
            dismissable: true
          });
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/permissions-denied-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    intl: _ember['default'].inject.service('intl'),
    notification: _ember['default'].inject.service('notification'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    transitionTo: function transitionTo(path) {
      this.container.lookup('router:main').router.transitionTo(path);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.permissions_denied'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/resource-not-found-strategy', ['exports', 'ember', 'frontend-cp/utils/base-path'], function (exports, _ember, _frontendCpUtilsBasePath) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    transitionTo: function transitionTo(path) {
      this.container.lookup('router:main').router.transitionTo(path);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.resource_not_found'),
          autodismiss: true,
          dismissable: true
        });
        var path = (0, _frontendCpUtilsBasePath.getBasePath)();
        var pathname = location.pathname;
        if (pathname !== path) {
          this.transitionTo(path);
        }

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/session-loading-failed-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service('session'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var _this = this;

      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('session').logout().then(function () {
          _this.get('notification').add({
            type: 'error',
            title: _this.get('intl').findTranslationByKey('generic.user_logged_out'),
            body: _this.get('intl').findTranslationByKey('generic.session_expired'),
            autodismiss: true
          });
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    sessionLoadingFailedStrategy: _ember['default'].inject.service('error-handler/session-loading-failed-strategy'),
    notificationStrategy: _ember['default'].inject.service('error-handler/notification-strategy'),
    permissionDeniedStrategy: _ember['default'].inject.service('error-handler/permissions-denied-strategy'),
    resourceNotFoundStrategy: _ember['default'].inject.service('error-handler/resource-not-found-strategy'),
    credentialExpiredStrategy: _ember['default'].inject.service('error-handler/credential-expired-strategy'),
    formInvalidStrategy: _ember['default'].inject.service('error-handler/form-invalid-strategy'),
    genericStrategy: _ember['default'].inject.service('error-handler/generic-strategy'),

    enabled: true,

    init: function init() {
      this._super.apply(this, arguments);

      var strategies = _ember['default'].Object.create({
        FIELD_INVALID: this.get('formInvalidStrategy'),
        FIELD_REDUNDANT: null,
        FIELD_REQUIRED: this.get('formInvalidStrategy'),
        FIELD_EMPTY: this.get('formInvalidStrategy'),
        AUTHENTICATION_FAILED: null,
        SESSION_LOADING_FAILED: this.get('sessionLoadingFailedStrategy'),
        NOTIFICATION: this.get('notificationStrategy'),
        PERMISSIONS_DENIED: this.get('permissionDeniedStrategy'),
        RESOURCE_NOT_FOUND: this.get('resourceNotFoundStrategy'),
        CREDENTIAL_EXPIRED: this.get('credentialExpiredStrategy'),
        PARAMETERS_INCONSISTENT: this.get('sessionLoadingFailedStrategy'),
        _GENERIC: this.get('genericStrategy')
      });

      this.set('strategies', strategies);
    },

    process: function process(error) {
      var _this = this;

      if (!this.get('enabled')) {
        return false;
      }

      var strategies = this.get('strategies');

      if (error && error.errors) {
        error.errors.forEach(function (record) {
          var strategy = _this.getStrategy('_GENERIC');

          if (_this.hasStrategy(record.code)) {
            strategy = _this.getStrategy(record.code);
          }

          if (strategy) {
            strategy.accept(record);
          }
        });

        Object.keys(strategies).forEach(function (key) {
          _this.processStrategy(key);
        });
      }

      // we have to throw error to reject Promise
      throw error;
    },

    hasStrategy: function hasStrategy(code) {
      var strategies = this.get('strategies');
      return strategies[code] || strategies[code] === null;
    },

    getStrategy: function getStrategy(code) {
      var strategies = this.get('strategies');
      return strategies[code];
    },

    processStrategy: function processStrategy(key) {
      var strategies = this.get('strategies');
      if (strategies[key]) {
        return strategies[key].process();
      }

      return 0;
    }
  });
});
define('frontend-cp/services/feature-flags', ['exports', 'ember'], function (exports, _ember) {

  // TODO: Current problem: when we have any feature disabled in
  // environment, it is persisted into local storage.
  // When after some time, we've decided to enable it,
  // and change it state in environment, this feature won't be
  // enabled for users, because they have locally cached version
  // in local storage wich is disabled.
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    setup: function setup() {
      // TODO improvement required to support changes in config
      // const store = this.get('store');
      // let defaultFlags = this.features._flags;
      //
      // store.findAll('feature-flag').then((savedFeatureFlags) => {
      //   Object.keys(defaultFlags).forEach((defaultFlagName) => {
      //     let savedFeatureFlag = savedFeatureFlags.findBy('name', defaultFlagName);
      //
      //     if (typeof savedFeatureFlag !== 'undefined' && savedFeatureFlag !== null) {
      //       if (savedFeatureFlag.get('enabled')) {
      //         this.features.enable(savedFeatureFlag.get('name'));
      //       } else {
      //         this.features.disable(savedFeatureFlag.get('name'));
      //       }
      //     } else {
      //       store.createRecord('feature-flag', {
      //         name: defaultFlagName, enabled: defaultFlags[defaultFlagName]
      //       }).save();
      //     }
      //   });
      // });
    }
  });
});
define('frontend-cp/services/file-upload', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {

  var UploadFile = _ember['default'].Object.extend({
    progress: 0,
    name: null,
    attachmentId: null,
    contentUrl: null,
    size: null,
    failed: false,
    error: '',
    xhr: null,
    status: 'PROGRESS',

    cancel: function cancel() {
      if (this.get('xhr')) {
        this.get('xhr').abort();
      }
      this.set('status', 'CANCELLED');
      this.set('attachmentId', null);
    }
  });

  exports['default'] = _ember['default'].Service.extend({
    sessionService: _ember['default'].inject.service('session'),

    headers: _ember['default'].computed('sessionService.sessionId', function () {
      var headers = {};
      var sessionId = this.get('sessionService.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    uploadFile: function uploadFile(file) {
      this._super();
      var formData = new FormData();
      var uploadFile = UploadFile.create({ name: file.name, size: file.size });

      formData.append('name', file.name);
      formData.append('content', file);

      _jquery['default'].ajax({
        url: '/api/v1/core/file',
        type: 'POST',
        headers: this.get('headers'),
        //Ajax events
        success: function success(response) {
          uploadFile.set('progress', 100);
          uploadFile.set('status', 'SUCCESS');
          uploadFile.set('contentUrl', response.data.content_url);
          uploadFile.set('size', response.data.size);
          uploadFile.set('attachmentId', response.data.id);
        },
        error: function error(response) {
          uploadFile.set('status', 'ERROR');

          if (response.status === 413) {
            uploadFile.set('error', 'TOO_LARGE');
          }

          if (response.status === 500) {
            uploadFile.set('error', 'UNKNOWN');
          }
        },
        xhr: function xhr(XMLHttpRequest) {
          var xhr = new window.XMLHttpRequest();

          //Upload progress
          xhr.upload.addEventListener('progress', function (evt) {
            uploadFile.set('status', 'PROGRESS');
            uploadFile.set('progress', evt.loaded * 100 / evt.total);
          }, false);

          uploadFile.set('xhr', xhr);

          return xhr;
        },
        // Form data
        data: formData,
        //Options to tell jQuery not to process data or worry about content-type.
        cache: false,
        contentType: false,
        processData: false
      });
      return uploadFile;
    }

  });
});
define('frontend-cp/services/intl', ['exports', 'ember-intl/services/intl'], function (exports, _emberIntlServicesIntl) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlServicesIntl['default'];
    }
  });
});
define('frontend-cp/services/local-store', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    _namespacePrefix: 'ko:',

    /**
     * Setup namespace for service usage
     *
     * @param {String} namespace Namespace
     * @param {String} key Key to concatenate with namespace
     * @returns {string}
     */
    _getKeyWithNamespace: function _getKeyWithNamespace(namespace, key) {
      return this._namespacePrefix + namespace + ':' + key;
    },

    /**
     * Retrieve an item from the store by key
     *
     * Items are stored as JSON strings
     *
     * @param  {string} namespace - Namespace in local storage
     * @param  {string} key - Key to retrieve
     * @param {Boolean} options.persist Use local storage instead of session storage
     * @return {*} Stored object
     */
    getItem: function getItem(namespace, key) {
      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref$persist = _ref.persist;
      var persist = _ref$persist === undefined ? false : _ref$persist;

      key = this._getKeyWithNamespace(namespace, key);

      var store = persist ? localStorage : sessionStorage;
      var item = store.getItem(key);

      // Note: stringified undefined will return 'undefined'
      if (item !== null && item !== 'undefined') {
        return JSON.parse(item);
      } else {
        return null;
      }
    },

    /**
     * Place item in the store as a JSON string.
     *
     * Note: only plain objects can be stored.
     *
     * @param {string}  namespace [description]
     * @param {string}  key       [description]
     * @param {mixed}  item      [description]
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    setItem: function setItem(namespace, key, item) {
      var _ref2 = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

      var _ref2$persist = _ref2.persist;
      var persist = _ref2$persist === undefined ? false : _ref2$persist;

      key = this._getKeyWithNamespace(namespace, key);

      // using typeof for strict undefined check
      if (typeof item !== 'undefined') {
        var store = persist ? localStorage : sessionStorage;
        store.setItem(key, JSON.stringify(item));
      }
    },

    /**
     * Remove item from the store.
     *
     * @param {string}  namespace [description]
     * @param {[type]}  key       key of item to be removed
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    removeItem: function removeItem(namespace, key) {
      var _ref3 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref3$persist = _ref3.persist;
      var persist = _ref3$persist === undefined ? false : _ref3$persist;

      key = this._getKeyWithNamespace(namespace, key);

      var store = persist ? localStorage : sessionStorage;
      store.removeItem(key);
    },

    /**
     * Clear local and session storage by namespace
     *
     * @param {String} namespace Namespace to clear
     */
    clearAllByNamespace: function clearAllByNamespace(namespace) {
      var nsRegexp = new RegExp('^' + this._namespacePrefix + namespace + ':', 'i');

      if (typeof localStorage !== 'undefined') {
        for (var i = 0; i < localStorage.length; i++) {
          var key = localStorage.key(i);

          if (nsRegexp.test(key)) {
            localStorage.removeItem(key);
          }
        }
      }

      if (typeof sessionStorage !== 'undefined') {
        // Session Storage should be wiped out on logout
        sessionStorage.clear();
      }
    },

    /**
     * Clear everything in the store
     */
    clearAll: function clearAll() {
      localStorage.clear();
      sessionStorage.clear();
    }
  });
});
define('frontend-cp/services/locale', ['exports', 'ember', 'moment', 'frontend-cp/config/environment'], function (exports, _ember, _moment, _frontendCpConfigEnvironment) {

  var USER_LOCALE_KEY = 'user-locale';

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),
    localStore: _ember['default'].inject.service(),

    userLocale: _ember['default'].computed('session.user', function () {
      return this.get('session.user.locale');
    }),

    setup: function setup() {
      var _this = this;

      var store = this.get('store');
      this.get('intl').set('adapterType', 'intl');

      return store.findRecord('locale', this.getCurrentLocale())['catch'](function () {
        // we persist default locale for store, to prevent
        // next refresh from requesting wrong locale again
        _this.persistLocaleToLocalStorage(_frontendCpConfigEnvironment['default'].defaultLocale);

        return store.findRecord('locale', _frontendCpConfigEnvironment['default'].defaultLocale);
      }).then(function (locale) {
        return _this._populateTranslations(locale);
      });
    },

    _requestLocaleStrings: function _requestLocaleStrings(locale) {
      var adapter = this.container.lookup('adapter:application');
      return adapter.ajax(adapter.namespace + '/locales/' + locale + '/strings', 'GET');
    },

    _populateTranslations: function _populateTranslations(locale) {
      var intl = this.get('intl');
      var translations = {};

      intl.createLocale(locale.id, {});
      intl.setLocale(locale.id);

      _moment['default'].locale(locale.id);

      return this._requestLocaleStrings(locale.id).then(function (strings) {
        strings.data.forEach(function (string) {
          translations[string.id] = string.value;
        });
        intl.addTranslations(locale.id, translations);
      });
    },

    getCurrentLocale: function getCurrentLocale() {
      var userLocale = this.get('userLocale');

      if (!userLocale) {
        var localLocale = this.getLocalLocale();
        return localLocale ? localLocale : _frontendCpConfigEnvironment['default'].defaultLocale;
      }

      return userLocale;
    },

    getLocalLocale: function getLocalLocale() {
      return this.get('localStore').getItem('locale', USER_LOCALE_KEY, { persist: true });
    },

    persistLocaleToLocalStorage: function persistLocaleToLocalStorage(locale) {
      return this.get('localStore').setItem('locale', USER_LOCALE_KEY, locale, { persist: true });
    }
  });
});
define('frontend-cp/services/macro-fetcher', ['exports', 'ember'], function (exports, _ember) {

  var OFFSET = 0;
  var LIMIT = 250;

  /*
   * Recursively request all macros via pagination
   *
   *  - Fetching 300+ macros is too much work for API
   *  - Querys are not cached via ember data
   *  - Loop through macros 20 at a time, and ensure that we only ever
   *    do this once when we hit the agent root
   */

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    hasRequestedMacros: false,

    fetchMacros: function fetchMacros() {
      if (this.get('hasRequestedMacros')) {
        return;
      }
      this.set('hasRequestedMacros', true);

      this._fetchMacroRange(OFFSET, LIMIT);
    },

    _fetchMacroRange: function _fetchMacroRange(offset, limit) {
      var _this = this;

      this.get('store').query('macro', { offset: offset, limit: limit }).then(function (newMacros) {
        var total = newMacros.meta.total;
        var currentMax = offset + limit;

        if (total && total > currentMax) {
          _this._fetchMacroRange(currentMax, limit);
        }
      });
    }
  });
});
define('frontend-cp/services/metrics', ['exports', 'ember-metrics/services/metrics'], function (exports, _emberMetricsServicesMetrics) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsServicesMetrics['default'];
    }
  });
});
define('frontend-cp/services/moment', ['exports', 'ember', 'moment'], function (exports, _ember, _moment2) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Service.extend({
    _locale: null,
    _timeZone: null,

    locale: computed({
      get: function get() {
        return this.get('_locale');
      },
      set: function set(propertyKey, locale) {
        this.set('_locale', locale);
        return locale;
      }
    }),

    timeZone: computed({
      get: function get() {
        return this.get('_timeZone');
      },
      set: function set(propertyKey, timeZone) {
        if (_moment2['default'].tz) {
          this.set('_timeZone', timeZone);
          return timeZone;
        } else {
          _ember['default'].Logger.warn('[ember-moment] attempted to set timezone, but moment-timezone unavailable.');
        }
      }
    }),

    changeLocale: function changeLocale(locale) {
      this.set('locale', locale);
    },

    changeTimeZone: function changeTimeZone(timeZone) {
      this.set('timeZone', timeZone);
    },

    moment: function moment() {
      var time = _moment2['default'].apply(undefined, arguments);
      var locale = this.get('locale');
      var timeZone = this.get('timeZone');

      if (locale) {
        time = time.locale(locale);
      }

      if (timeZone && time.tz) {
        time = time.tz(timeZone);
      }

      return time;
    }
  });
});
define('frontend-cp/services/notification', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notifications: null,

    init: function init() {
      this._super();
      this.set('notifications', this.get('notifications') || []);
    },

    /**
     * Add a notification
     * @param {object} notification Notification object
     * @param {string} notification.type Notification type (allowed values: 'info', 'warning', 'error', 'success')
     * @param {string} notification.title Notification title text
     * @param {string} [notification.body=null] Notification body text
     * @param {boolean} [notification.dismissable=false] Whether to allow the user to close the notification
     * @param {boolean} [notification.autodismiss=false] Whether to automatically dismiss the message after a timeout
     */
    add: function add(notification) {
      var notifications = this.get('notifications');
      notifications.pushObject(notification);
    },

    success: function success(message) {
      var notifications = this.get('notifications');
      notifications.pushObject({
        type: 'success',
        title: message,
        autodismiss: true
      });
    },

    removeAll: function removeAll() {
      this.get('notifications').clear();
    },

    /**
     * Remove a notification
     * @param {object} notification Notification that has previously been added
     */
    remove: function remove(notification) {
      var notifications = this.get('notifications');
      notifications.removeObject(notification);
    }
  });
});
define('frontend-cp/services/permissions', ['exports', 'ember'], function (exports, _ember) {

  var roleTypes = {
    OWNER: {
      rank: 5,
      permissions: []
    },
    ADMIN: {
      rank: 4,
      permissions: []
    },
    AGENT: {
      rank: 3,
      permissions: []
    },
    COLLABORATOR: {
      rank: 2,
      permissions: []
    },
    CUSTOMER: {
      rank: 1,
      permissions: []
    }
  };

  /**
   * Assign the appropriate actions to each users `permissions` list.
   * permissions Cascade so an AGENT = CUSTOMER + COLLABORATOR + AGENT
   */
  roleTypes.CUSTOMER.permissions = [];

  roleTypes.COLLABORATOR.permissions = roleTypes.CUSTOMER.permissions.concat(['app.user.view_team_permission']);

  roleTypes.AGENT.permissions = roleTypes.COLLABORATOR.permissions.concat(['app.user.disable', 'app.user.signature.edit', 'app.user.password.change', 'app.organisation.delete', 'app.case.trash', 'app.case.untrash']);

  roleTypes.ADMIN.permissions = roleTypes.AGENT.permissions.concat(['app.user.delete', 'app.user.change_agent_access_permission', 'app.user.change_organization_access_permission', 'app.user.change_team_permission', 'app.user.change_role_permission', 'app.admin.access']);

  roleTypes.OWNER.permissions = roleTypes.ADMIN.permissions.concat([]);

  var adminOrAgentToCustomer = function adminOrAgentToCustomer(roleType, targetRoleType) {
    if (roleType.rank === roleTypes.AGENT.rank) {
      return roleTypes.CUSTOMER.rank === targetRoleType.rank;
    }

    return roleType.rank === roleTypes.ADMIN.rank;
  };

  /*
   * A map of system actions to a function that checks if the roleType provided
   * has the ability to carry out this action.
   * The actions should match values in `permissions` list for a given roleType
   *
   * The 1st argument of the function will always be the roleType of the current
   * logged in user. Any other arguments passed to the helper are provided as
   * a list.
   *
   * The function allows us to perform additional checks on top of the existence
   * of the permission e.g. 'app.delete.user' requires that the roleType.rank of
   * the logged in user be greater than that of the user they are trying to
   * delete.
   */
  var applicationActions = {
    'app.user.signature.edit': function appUserSignatureEdit(myRoleType, me, target) {
      var targetRoleType = roleTypes[target.get('role').get('roleType')];

      // I can change my own signature
      if (me && target && me === target) {
        return true;
      }

      // If I'm a higher rank and they are not a CUSTOMER
      return myRoleType.rank > targetRoleType.rank && targetRoleType.rank !== roleTypes.CUSTOMER.rank;
    },
    // ADMIN can disable all, AGENT only CUSTOMER
    'app.user.disable': function appUserDisable(roleType, subject, user) {
      var userRoleType = user.get('role.roleType');

      // I cannot disable myself!
      if (subject && user && subject === user) {
        return false;
      }
      return adminOrAgentToCustomer(roleType, roleTypes[userRoleType]);
    },
    'app.user.password.change': function appUserPasswordChange(roleType, user, target) {
      // I can change my own password:
      if (user && target && user === target) {
        return true;
      }

      var userRoleType = user.get('role.roleType');
      return adminOrAgentToCustomer(roleType, userRoleType) && target.get('emails').toArray().length;
    },
    'app.organisation.delete': function appOrganisationDelete(roleType, user, organisation) {
      return roleType.rank >= roleTypes.AGENT.rank;
    },
    'app.user.delete': function appUserDelete(roleType, user, target) {
      // I can't delete myself
      if (user && target && user === target) {
        return false;
      }
      var targetRoleType = roleTypes[target.get('role').get('roleType')];
      return roleType.rank === roleTypes.ADMIN.rank && (targetRoleType.rank === roleTypes.AGENT.rank || targetRoleType.rank === roleTypes.COLLABORATOR.rank);
    },
    'app.user.change_agent_access_permission': function appUserChange_agent_access_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank === roleTypes.ADMIN.rank;
    },
    'app.user.change_organization_access_permission': function appUserChange_organization_access_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') === 'CUSTOMER' && myRoleType.rank === roleTypes.ADMIN.rank;
    },
    'app.user.change_team_permission': function appUserChange_team_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank >= roleTypes.ADMIN.rank;
    },
    'app.user.view_team_permission': function appUserView_team_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank >= roleTypes.COLLABORATOR.rank;
    },
    'app.user.change_role_permission': function appUserChange_role_permission(myRoleType, me, target) {
      // Cannot change myself
      if (me && target && me === target) {
        return false;
      }
      var myRank = myRoleType.rank;
      var targetRank = roleTypes[target.get('role').get('roleType')].rank;
      return myRank >= roleTypes.ADMIN.rank && myRank >= targetRank;
    },
    'app.admin.access': function appAdminAccess(myRoleType) {
      return myRoleType.rank === roleTypes.ADMIN.rank;
    },
    'app.case.trash': function appCaseTrash(myRoleType) {
      return myRoleType.rank >= roleTypes.AGENT.rank;
    },
    'app.case.untrash': function appCaseUntrash(myRoleType) {
      return myRoleType.rank >= roleTypes.AGENT.rank;
    }
  };

  exports['default'] = _ember['default'].Service.extend({
    sessionService: _ember['default'].inject.service('session'),
    notificationService: _ember['default'].inject.service('notification'),
    intlService: _ember['default'].inject.service('intl'),
    notificationHandler: _ember['default'].inject.service('error-handler/notification-strategy'),

    showError: function showError() {
      this.get('notificationHandler').processAll([{
        type: 'error',
        message: this.get('intlService').findTranslationByKey('generic.permissions_denied'),
        sticky: false
      }]);
    },

    has: function has(action, target) {
      var role = this.get('sessionService.user.role');
      var subjectRoleType = roleTypes[role.get('roleType')];
      var permissions = this.get('sessionService.permissions');

      // First check the permission exists
      if (subjectRoleType && subjectRoleType.permissions.indexOf(action) > -1) {
        // Then allow the permission function to run
        return applicationActions[action](subjectRoleType, this.get('sessionService.user'), target);
      }

      // Check role permissions
      return permissions.filter(function (perm) {
        return perm.get('name') === action && perm.get('value');
      }).length > 0;
    }
  });
});
define('frontend-cp/services/plan', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    features: new _ember['default'].A(),
    limits: new _ember['default'].A(),

    limitFor: function limitFor(name) {
      var limits = this.get('limits');
      var filteredLimits = limits.filterBy('name', name);
      return filteredLimits.length < 1 ? 0 : filteredLimits.get('firstObject').get('limit');
    },

    has: function has(name) {
      var features = this.get('features');
      return features.isAny('name', name);
    },

    fetchPlan: function fetchPlan() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var store = _this.get('store');

        store.unloadAll('plan');
        store.queryRecord('plan', {}).then(function (plan) {
          _this.set('limits', plan.get('limits'));
          _this.set('features', plan.get('features'));
          resolve();
        });
      });
    }
  });
});
define('frontend-cp/services/pusher', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = _ember['default'].Service.extend({
    channelBindings: _ember['default'].Object.create({}),
    options: _frontendCpConfigEnvironment['default'].APP.PUSHER_OPTIONS,

    sessionService: _ember['default'].inject.service('session'),
    tagService: _ember['default'].inject.service('tags'),
    store: _ember['default'].inject.service(),

    initialize: function initialize() {
      if (this.options.logEvents) {
        Pusher.log = function (message) {
          if (window.console && window.console.log) {
            // eslint-disable-line
            window.console.debug(message); // eslint-disable-line
          }
        };
      }

      this.authorize();
    },

    authorize: _ember['default'].observer('sessionService.sessionId', function () {
      var _this = this;

      if (this.options.disabled) {
        // for tests etc, we don't ever want to start pusher
        return;
      }

      this.get('store').findAll('credential').then(function (credentials) {
        if (!_this.get('sessionService.sessionId')) {
          return;
        }

        var key = credentials.get('firstObject.realtimeAppKey');

        if (key) {
          _this.set('pusher', new Pusher(key, {
            encrypted: _this.options.encrypted,
            authEndpoint: _this.options.authEndpoint,
            wsHost: _this.options.wsHost,
            httpHost: _this.options.httpHost,
            auth: {
              headers: {
                'X-Session-ID': _this.get('sessionService.sessionId')
              }
            }
          }));
        }
      });
    }),

    subscribeTo: function subscribeTo(channelName, event, context, func) {
      for (var _len = arguments.length, localData = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        localData[_key - 4] = arguments[_key];
      }

      if (!this.get('pusher')) {
        if (console && console.warn) {
          // eslint-disable-line
          console.warn('Unable to subscribe via pusher - realtime updates will not be available'); // eslint-disable-line
        }
        return;
      }
      if (!channelName) {
        return;
      }
      var channel = this.subscribeToChannel(channelName);
      var handler = function handler(data) {
        Reflect.apply(func, context, [data].concat(localData));
      };
      this.get('channelBindings')[channelName][func] = handler;
      channel.bind(event, handler);
    },

    unsubscribeTo: function unsubscribeTo(channelName, eventName, func) {
      var channelBindings = this.get('channelBindings');
      var channel = channelBindings.get(channelName);
      if (channel) {
        if (func) {
          var handler = channel.channel[func];
          channel.channel.unbind(eventName, handler);
        } else {
          channel.channel.unbind(eventName);
        }
      }
    },

    subscribeToChannel: function subscribeToChannel(channelName) {
      var channelBindings = this.get('channelBindings');

      var channelInfo = channelBindings.get(channelName);
      if (!channelInfo) {
        var channel = this.get('pusher').subscribe(channelName);
        channelBindings.set(channelName, { channel: channel });
        return channel;
      }

      return channelInfo.channel;
    }
  });
});
/* global Pusher */
define('frontend-cp/services/session', ['exports', 'ember', 'frontend-cp/utils/base-path', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpUtilsBasePath, _frontendCpConfigEnvironment) {

  var sessionIdCookieName = _frontendCpConfigEnvironment['default'].sessionIdCookieName;
  var domainParts = window.location.hostname.split('.');
  // Top-level domains, such as novo or localhost, won't work, so we need to set this to the empty string
  var sessionIdCookieDomain = domainParts.length > 1 ? '.' + domainParts.join('.') : '';

  exports['default'] = _ember['default'].Service.extend({

    /**
     * Property for use in computed properties and observers
     * Ember automatically converts this to an ember array.
     * @type {Array}
     */
    session: null,
    user: null,

    permissions: [],

    planService: _ember['default'].inject.service('plan'),
    localStoreService: _ember['default'].inject.service('localStore'),
    store: _ember['default'].inject.service(),
    tabStore: _ember['default'].inject.service(),
    locale: _ember['default'].inject.service(),

    // CPs
    sessionId: _ember['default'].computed({
      get: function get() {
        return this._getSessionIdCookie();
      },
      set: function set(key, v) {
        if (!v) {
          this._removeSessionIdCookie();
        } else {
          this._setSessionIdCookie(v);
        }

        return v;
      }
    }),
    // Methods

    getSession: function getSession() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        // Session exists
        var session = _this.get('session');
        if (session) {
          return resolve(session);
        }
        // sessionId saved in local storage
        if (_this.get('sessionId')) {
          return _this._getSession().then(resolve)['catch'](function (e) {
            _this.set('sessionId', null);
            _this.set('session', null);
            _this.set('user', null);
            return reject(e);
          });
          // No session information available
        } else {
            return reject(new Error('No session ID'));
          }
      });
    },

    getPermissions: function getPermissions() {
      var _this2 = this;

      return this.get('user.role.permissions').then(function (perms) {
        _this2.set('permissions', perms);
        return perms;
      });
    },

    _getSessionIdCookie: function _getSessionIdCookie() {
      var name = sessionIdCookieName + '=';
      var cookies = document.cookie.split(';').map(function (entry) {
        return entry.trim();
      }).filter(function (entry) {
        return entry.startsWith(name);
      });
      if (cookies.length) {
        return cookies[0].substring(name.length);
      }
    },

    _setSessionIdCookie: function _setSessionIdCookie(sessionId) {
      document.cookie = sessionIdCookieName + '=' + sessionId + '; domain=' + sessionIdCookieDomain + '; path=/';
    },

    _removeSessionIdCookie: function _removeSessionIdCookie() {
      document.cookie = sessionIdCookieName + '=; expires=0; domain=' + sessionIdCookieDomain + '; path=/';
    },

    _getSession: function _getSession() {
      var _this3 = this;

      return this.get('store').queryRecord('session', {}).then(function (session) {
        _this3.set('session', session);
        _this3.set('sessionId', session.get('id'));
        _this3.set('user', session.get('user'));
        _this3.getPermissions();
        _this3.get('planService').fetchPlan();
        return _this3.getPermissions();
      });
    },

    /**
     * Removes sessionId from store and from local variable.
     * @param {boolean} Set redirection parameter on logout
     * @return {Promise} Ember.RSVP.Promise resolving when logout is complete
     */
    logout: function logout() {
      var _this4 = this;

      var doRedirect = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // Short circuit if we're on a login page
      if (location.pathname.endsWith('/login')) {
        return _ember['default'].RSVP.resolve();
      }

      var session = this.get('session');
      var transition = this.container.lookup('router:main').get('router.activeTransition');
      var redirect = (0, _frontendCpUtilsBasePath.getLoginPath)();

      if (doRedirect) {
        // We only do this when we have a transition, with a name that is not
        // the first in the sequence (e.g. a page refresh)
        if (transition && transition.targetName && transition.sequence) {
          var path = transition.router.generate(transition.targetName);
          redirect += '?redirectTo=' + path;
        } else {
          redirect += '?redirectTo=' + location.pathname;
        }
      }

      var userLocale = this.get('user.locale');
      if (userLocale) {
        this.get('locale').persistLocaleToLocalStorage(userLocale);
      }

      this.get('tabStore').clearAll();
      this.get('localStoreService').clearAllByNamespace(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace);

      if (!session) {
        this.set('sessionId', null);
        // if we have no session, reset session id
        // so ember knows that we want to show login again
        window.location = redirect;
        return _ember['default'].RSVP.Promise.resolve();
      }

      return session.destroyRecord().then(function () {
        _this4.set('session', null);
        _this4.set('sessionId', null);
        window.location = redirect;
      })['catch'](function () {
        _this4.set('session', null);
        _this4.set('sessionId', null);
        // catch the error - we don't care it it's already deleted etc.
        window.location = redirect;
      });
    },

    /**
     * Sends email and password to backend for authentication.
     * @param  {string} email - email
     * @param  {string} password - password
     * @return {Promise} Ember.RSVP.Promise containing session
     */
    requestSession: function requestSession(email, password) {
      var _this5 = this;

      var unset = function unset() {
        _this5.set('email', null);
        _this5.set('password', null);
      };

      this.set('email', email);
      this.set('password', password);
      return this._getSession().then(unset, function (e) {
        unset();
        throw e;
      });
    }
  });
});
define('frontend-cp/services/sorter', ['exports', 'ember'], function (exports, _ember) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Service = _ember['default'].Service;
  var isEmpty = _ember['default'].isEmpty;
  exports['default'] = Service.extend({
    sort: function sort(models) {
      var _this = this;

      if (isEmpty(models)) {
        return;
      }

      var adapter = this.container.lookup('adapter:application');
      var modelName = models.get('firstObject').constructor.modelName;
      var adapterNamespace = adapter.get('namespace');
      var modelNamespace = this._modelNamespaceFor(modelName);

      models.forEach(function (model, index) {
        model.set(_this._sortingFieldFor(modelName), index);
      });

      adapter.ajax(adapterNamespace + '/' + modelNamespace + '/reorder', 'PUT', {
        data: _defineProperty({}, this._idsKeyFor(modelName), models.mapBy('id').join(','))
      });
    },

    _sortingFieldFor: function _sortingFieldFor(name) {
      switch (name) {
        case 'case-priority':
          return 'level';
        default:
          return 'sortOrder';
      }
    },

    _modelNamespaceFor: function _modelNamespaceFor(name) {
      switch (name) {
        case 'case-priority':
          return 'cases/priorities';
        case 'case-status':
          return 'cases/statuses';
        case 'case-field':
          return 'cases/fields';
        case 'user-field':
          return 'users/fields';
        case 'organization-field':
          return 'organizations/fields';
      }
    },

    _idsKeyFor: function _idsKeyFor(name) {
      switch (name) {
        case 'case-priority':
          return 'priority_ids';
        case 'case-status':
          return 'status_ids';
        case 'case-field':
          return 'field_ids';
        case 'user-field':
          return 'field_ids';
        case 'organization-field':
          return 'field_ids';
      }
    }
  });
});
define('frontend-cp/services/store-cache', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    allCache: null,
    queryCache: null,

    initCache: _ember['default'].on('init', function () {
      this.set('allCache', {});
      this.set('queryCache', {});
    }),

    findAll: function findAll(type) {
      var _this = this;

      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref$reload = _ref.reload;
      var reload = _ref$reload === undefined ? false : _ref$reload;

      if (!reload && this.get('allCache.' + type)) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this.get('allCache.' + type));
        });
      } else {
        return this.get('store').findAll(type).then(function (data) {
          _this.set('allCache.' + type, data);
          return data;
        });
      }
    },

    query: function query(type, _query) {
      var _this2 = this;

      var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref2$reload = _ref2.reload;
      var reload = _ref2$reload === undefined ? false : _ref2$reload;

      var serializedQuery = type + ':' + _npmLodash['default'].map(_query, function (value, key) {
        return key + ':' + value;
      }).sort().join(':');

      if (!reload && this.get('allCache')[serializedQuery]) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this2.get('allCache')[serializedQuery]);
        });
      } else {
        return this.get('store').query(type, _query).then(function (data) {
          _this2.get('allCache')[serializedQuery] = data;
          return data;
        });
      }
    }
  });
});
define('frontend-cp/services/suggestion/organization', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {
  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm) {
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/autocomplete/organizations';
      var options = {
        data: {
          name: searchTerm
        }
      };
      var promise = adapter.ajax(url, 'GET', options);

      this.promiseQueue.push(searchTerm, promise);

      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/suggestion/people', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {

  /**
   * Work with people suggestions via cached service.
   */
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm, exclude) {
      var promise = this.get('store').query('identity-autocomplete-email', {
        address: searchTerm,
        exclude: exclude || []
      });

      this.promiseQueue.push(searchTerm, promise);

      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/suggestion/tag', ['exports', 'ember', 'frontend-cp/utils/exclusion', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsExclusion, _frontendCpUtilsPromiseQueue) {
  var Promise = _ember['default'].RSVP.Promise;
  exports['default'] = _ember['default'].Service.extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm) {
      var promise = this.get('storeCache').query('tag', {
        name: searchTerm
      });

      this.promiseQueue.push(searchTerm, promise);
      return promise;
    },

    suggestFilter: function suggestFilter(records, searchTerm, key) {
      var regexp = new RegExp(searchTerm, 'i');

      return new Promise.resolve(records.filter(function (team) {
        return regexp.test(team.get(key));
      }));
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    },

    exclude: function exclude(data, exclusions) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

      return (0, _frontendCpUtilsExclusion.exclude)(data, exclusions, key);
    }
  });
});
define('frontend-cp/services/suggestion/universal', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {

  /**
   * Work with the universal search via cached service.
   */
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    search: function search(searchTerm) {
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/search/all';
      var options = {
        data: {
          query: searchTerm,
          fields: 'snippet,resource',
          'in': 'users,organizations,cases'
        }
      };
      var promise = adapter.ajax(url, 'GET', options);

      this.promiseQueue.push(searchTerm, promise);
      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/tab-store', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var run = _ember['default'].run;
  var inject = _ember['default'].inject;
  var setProperties = _ember['default'].setProperties;
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Service.extend({
    routing: inject.service('-routing'),
    localStore: inject.service('localStore'),

    // Controls .nav-tab--disabled class, ad-hoc fix for FT-411
    isEnabled: true,

    casesViewId: null,
    caseState: null,

    tabs: computed(function () {
      var tabs = this.get('localStore').getItem(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace, 'tabs') || [];

      tabs.forEach(function (tab) {
        tab.state = tab.state || {};
        tab.nonPersistedState = tab.nonPersistedState || {};
      });

      return tabs;
    }),

    setCasesViewId: function setCasesViewId(viewId) {
      this.set('casesViewId', viewId);
    },

    open: function open(transition, label) {
      var _decomposeTransition = this.decomposeTransition(transition);

      var basePath = _decomposeTransition.basePath;
      var routeName = _decomposeTransition.routeName;
      var dynamicSegments = _decomposeTransition.dynamicSegments;
      var queryParams = _decomposeTransition.queryParams;

      var tabs = this.get('tabs');

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _tab = _step.value;

          if (_tab.basePath === basePath) {
            this.set('activeTab', _tab);
            return _tab;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var tab = { basePath: basePath, routeName: routeName, dynamicSegments: dynamicSegments, queryParams: queryParams, label: label, state: {}, nonPersistedState: {} };
      this.get('tabs').addObject(tab);
      this.set('activeTab', tab);
      run.debounce(this, 'persistTabs', 100);
      return tab;
    },

    getTab: function getTab(basePath) {
      return this.get('tabs').findBy('basePath', basePath);
    },

    close: function close(tab) {
      var routing = this.get('routing');
      var tabs = this.get('tabs');
      if (this.get('activeTab') !== tab) {
        tabs.removeObject(tab);
      } else {
        var index = tabs.indexOf(tab);
        var nextTab = tabs.objectAt(index + (index === 0 ? 1 : -1));
        tabs.removeObject(tab);
        if (nextTab) {
          routing.transitionTo(nextTab.routeName, nextTab.dynamicSegments, nextTab.queryParams);
        } else {
          if (this.get('casesViewId')) {
            routing.transitionTo('session.agent.cases.index.view', [this.get('casesViewId')]);
          } else {
            routing.transitionTo('session.agent.cases.index');
          }
        }
      }
      run.debounce(this, 'persistTabs', 100);
    },

    leave: function leave(tab) {
      if (this.get('activeTab') === tab) {
        this.set('activeTab', null);
      }
    },

    update: function update(tab, changes) {
      setProperties(tab, changes);
      run.debounce(this, 'persistTabs', 100);
    },

    updateNonPersistedState: function updateNonPersistedState(tab, newState) {
      tab.nonPersistedState = Object.assign(tab.nonPersistedState || {}, newState);
    },

    updateState: function updateState(tab, newState) {
      tab.state = Object.assign(tab.state || {}, newState);
      run.debounce(this, 'persistTabs', 100);
    },

    // Methods
    clearAll: function clearAll() {
      this.get('tabs').clear();
      this.persistTabs();
    },

    persistTabs: function persistTabs() {
      var tabs = this.get('tabs') || [];

      this.get('localStore').setItem(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace, 'tabs', tabs.map(this.serializeTab));
    },

    decomposeTransition: function decomposeTransition(transition) {
      var routeName = transition.handlerInfos[transition.resolveIndex].name;
      var queryParams = Object.keys(transition.queryParams).length > 0 ? transition.queryParams : null;
      // The dynamic segments are wrong. It should include all the dynamic segments
      // of all parent routes, not only the ones of this one.
      var dynamicSegments = transition.intent.contexts;
      if (!dynamicSegments) {
        dynamicSegments = Object.keys(transition.params).reduce(function (ary, k) {
          var params = transition.params[k];
          if (Object.keys(params).length > 0) {
            return ary.concat(Object.keys(params).map(function (k) {
              return params[k];
            }));
          } else {
            return ary;
          }
        }, []);
      }
      var url = this.get('routing').generateURL(routeName, dynamicSegments, queryParams || {});

      var _url$split = url.split('?');

      var _url$split2 = _slicedToArray(_url$split, 1);

      var basePath = _url$split2[0];

      return { basePath: basePath, routeName: routeName, dynamicSegments: dynamicSegments, queryParams: queryParams };
    },

    serializeTab: function serializeTab(tab) {
      return {
        basePath: tab.basePath,
        routeName: tab.routeName,
        dynamicSegments: tab.dynamicSegments.map(function (ds) {
          return typeof ds === 'object' ? ds.id : ds;
        }),
        queryParams: tab.queryParams,
        label: tab.label,
        state: tab.state
      };
    }
  });
});
define('frontend-cp/services/tags', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    getTagByName: function getTagByName(tagName) {
      var tag = this.get('store').peekRecord('tag', tagName);
      return tag ? tag : this.get('store').createRecord('tag', { id: tagName });
    },

    refreshTagsForCase: function refreshTagsForCase(updatedCase) {
      return this._refreshTags({ caseId: updatedCase.get('id') }, updatedCase);
    },

    refreshTagsForUser: function refreshTagsForUser(user) {
      return this._refreshTags({ userId: user.get('id') }, user);
    },

    refreshTagsForOrganization: function refreshTagsForOrganization(organization) {
      return this._refreshTags({ organizationId: organization.get('id') }, organization);
    },

    _refreshTags: function _refreshTags(queryParams, parentModel) {
      return this.get('store').query('tag', queryParams).then(function (newTags) {
        newTags.forEach(function (tag) {
          return tag.set('isNew', false);
        });
        parentModel.get('tags').clear();
        parentModel.get('tags').pushObjects(newTags);
        return newTags;
      });
    },

    areTagNamesMatchingCache: function areTagNamesMatchingCache(cachedTagNames, tags) {
      if (!cachedTagNames) {
        //we haven't got tags yet!
        return false;
      }

      if (cachedTagNames.get('length') !== tags.get('length')) {
        return true;
      }

      return tags.any(function (tag) {
        return cachedTagNames.indexOf(tag.get('id')) === -1;
      });
    }

  });
});
define('frontend-cp/services/url', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    currentUrl: null
  });
});
define('frontend-cp/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define('frontend-cp/session/admin/automation/businesshours/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    actions: {
      transitionToAddNewBusinessHour: function transitionToAddNewBusinessHour() {},
      editBusinessHour: function editBusinessHour(businessHour) {},
      makeDefault: function makeDefault(businessHour) {},
      deleteBusinessHour: function deleteBusinessHour(businessHour) {}
    }
  });
});
define('frontend-cp/session/admin/automation/businesshours/index/route', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend({
    storeCache: inject.service('store-cache'),
    store: inject.service(),

    beforeModel: function beforeModel() {},

    model: function model() {
      return this.get('store').query('business-hour', { limit: 10000 });
    }
  });
});
define("frontend-cp/session/admin/automation/businesshours/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-2/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3, 1]);
                var element2 = dom.childAt(element1, [1]);
                var element3 = dom.childAt(element1, [3]);
                var element4 = dom.childAt(element1, [5]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element2, 'onclick');
                morphs[2] = dom.createMorphAt(element2, 0, 0);
                morphs[3] = dom.createAttrMorph(element3, 'onclick');
                morphs[4] = dom.createMorphAt(element3, 0, 0);
                morphs[5] = dom.createAttrMorph(element4, 'onclick');
                morphs[6] = dom.createMorphAt(element4, 0, 0);
                return morphs;
              },
              statements: [["content", "businessHour.title", ["loc", [null, [13, 33], [13, 55]]]], ["attribute", "onclick", ["subexpr", "action", ["makeDefault", ["get", "businessHour", ["loc", [null, [17, 48], [17, 60]]]]], [], ["loc", [null, [17, 25], [17, 62]]]]], ["inline", "t", ["generic.make_default"], [], ["loc", [null, [17, 63], [17, 91]]]], ["attribute", "onclick", ["subexpr", "action", ["editBusinessHour", ["get", "businessHour", ["loc", [null, [18, 53], [18, 65]]]]], [], ["loc", [null, [18, 25], [18, 67]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [18, 68], [18, 88]]]], ["attribute", "onclick", ["subexpr", "action", ["deleteBusinessHour", ["get", "businessHour", ["loc", [null, [19, 55], [19, 67]]]]], [], ["loc", [null, [19, 25], [19, 69]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [19, 70], [19, 92]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editBusinessHour", "content", ["subexpr", "@mut", [["get", "businessHour", ["loc", [null, [10, 62], [10, 74]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [10, 6], [23, 29]]]]],
            locals: ["businessHour"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "model", ["loc", [null, [9, 12], [9, 17]]]]], [], 0, null, ["loc", [null, [9, 4], [24, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [8, 2], [25, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.businesshours.headings.index"], [], ["loc", [null, [2, 8], [2, 48]]]], "buttonText", ["subexpr", "t", ["admin.businesshours.buttons.add"], [], ["loc", [null, [3, 13], [3, 50]]]], "onSave", ["subexpr", "action", ["transitionToAddNewBusinessHour"], [], ["loc", [null, [4, 9], [4, 50]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [7, 0], [26, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/edit/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.channels.twitter.index');
      },

      saveTwitterAccount: function saveTwitterAccount() {
        return this.get('model').save();
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.transitionToRoute('session.admin.channels.twitter.index');
      }
    }
  });
});
define('frontend-cp/session/admin/channels/twitter/edit/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    intlService: _ember['default'].inject.service('intl'),
    model: function model(params) {
      return this.store.findRecord('twitter-account', params.account_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {

          var translatedConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/channels/twitter/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/twitter/edit", [], ["account", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 10], [2, 15]]]]], [], []], "onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [3, 11], [3, 44]]]], "onSave", ["subexpr", "action", ["saveTwitterAccount"], [], ["loc", [null, [4, 9], [4, 38]]]], "onSuccess", ["subexpr", "action", ["success"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    intlService: _ember['default'].inject.service('intl'),

    enabledAccounts: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') === true;
      });
    }),
    disabledAccounts: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') !== true;
      });
    }),

    actions: {
      toggleEnabledProperty: function toggleEnabledProperty(account) {
        account.toggleProperty('isEnabled');
        account.save();
      },
      editAccount: function editAccount(account, event) {
        if (event && _ember['default'].$(event.target).hasClass('js-admin_channels_twitter__delete-button')) {
          return;
        }

        this.transitionToRoute('session.admin.channels.twitter.edit', account);
      },

      showDeleteConfirmation: function showDeleteConfirmation(account) {
        if (confirm(this.get('intlService').findTranslationByKey('generic.confirm.delete'))) {
          account.destroyRecord();
        }
      },
      redirectToTwitterAuthenticationEndpoint: function redirectToTwitterAuthenticationEndpoint() {
        this.store.queryRecord('oauth-link', { callback: '/admin/channels/twitter/link' }).then(function (link) {
          window.location.href = link.get('id');
        });
      },

      redirectToTwitterAuthenticationForReauthorize: function redirectToTwitterAuthenticationForReauthorize() {
        this.store.queryRecord('oauth-link', { callback: '/admin/channels/twitter/reauthorize' }).then(function (link) {
          window.location.href = link.get('id');
        });
      }
    }
  });
});
define('frontend-cp/session/admin/channels/twitter/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.store.findAll('twitter-account');
    }

  });
});
define("frontend-cp/session/admin/channels/twitter/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 21,
                        "column": 66
                      },
                      "end": {
                        "line": 21,
                        "column": 150
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode(" ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-caption");
                    var el2 = dom.createTextNode(" (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(") ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "account.brand.name", ["loc", [null, [21, 119], [21, 141]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 22,
                        "column": 14
                      },
                      "end": {
                        "line": 22,
                        "column": 125
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-bad");
                    var el2 = dom.createTextNode(" (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(") ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.twitter.connection_lost"], [], ["loc", [null, [22, 79], [22, 116]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@1.13.13",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 27,
                        "column": 16
                      },
                      "end": {
                        "line": 27,
                        "column": 94
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["generic.edit"], [], ["loc", [null, [27, 74], [27, 94]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 33,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-2/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-bold");
                  var el4 = dom.createTextNode("@");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4, "class", "js-admin_channels_twitter__delete-button");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var element6 = dom.childAt(element5, [1]);
                  var element7 = dom.childAt(element5, [3, 1]);
                  var element8 = dom.childAt(element7, [1]);
                  var element9 = dom.childAt(element7, [5]);
                  var element10 = dom.childAt(element7, [7]);
                  var morphs = new Array(10);
                  morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(element6, 3, 3);
                  morphs[2] = dom.createMorphAt(element6, 5, 5);
                  morphs[3] = dom.createAttrMorph(element8, 'onclick');
                  morphs[4] = dom.createMorphAt(element8, 0, 0);
                  morphs[5] = dom.createMorphAt(element7, 3, 3);
                  morphs[6] = dom.createAttrMorph(element9, 'onclick');
                  morphs[7] = dom.createMorphAt(element9, 0, 0);
                  morphs[8] = dom.createAttrMorph(element10, 'onclick');
                  morphs[9] = dom.createMorphAt(element10, 0, 0);
                  return morphs;
                },
                statements: [["content", "account.screenName", ["loc", [null, [21, 36], [21, 58]]]], ["block", "if", [["get", "account.brand.name", ["loc", [null, [21, 72], [21, 90]]]]], [], 0, null, ["loc", [null, [21, 66], [21, 157]]]], ["block", "unless", [["subexpr", "eq", [["get", "account.status", ["loc", [null, [22, 28], [22, 42]]]], "AVAILABLE"], [], ["loc", [null, [22, 24], [22, 55]]]]], [], 1, null, ["loc", [null, [22, 14], [22, 136]]]], ["attribute", "onclick", ["subexpr", "action", ["redirectToTwitterAuthenticationForReauthorize", ["get", "account", ["loc", [null, [26, 84], [26, 91]]]]], [], ["loc", [null, [26, 27], [26, 93]]]]], ["inline", "t", ["admin.twitter.reconnect"], [], ["loc", [null, [26, 94], [26, 125]]]], ["block", "link-to", ["session.admin.channels.twitter.edit", ["get", "account", ["loc", [null, [27, 65], [27, 72]]]]], [], 2, null, ["loc", [null, [27, 16], [27, 106]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledProperty", ["get", "account", ["loc", [null, [28, 60], [28, 67]]]]], [], ["loc", [null, [28, 27], [28, 69]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [28, 70], [28, 93]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "account", ["loc", [null, [29, 110], [29, 117]]]]], [], ["loc", [null, [29, 76], [29, 119]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [29, 120], [29, 142]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 6
                  },
                  "end": {
                    "line": 35,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["action", "editAccount", "content", ["subexpr", "@mut", [["get", "account", ["loc", [null, [18, 59], [18, 66]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [18, 8], [33, 31]]]]],
              locals: ["account"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [13, 8], [13, 31]]]], ["block", "each", [["get", "enabledAccounts", ["loc", [null, [17, 14], [17, 29]]]]], [], 0, null, ["loc", [null, [17, 6], [35, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [11, 4], [36, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 46,
                      "column": 8
                    },
                    "end": {
                      "line": 58,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-2/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-bold");
                  var el4 = dom.createTextNode("@");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4, "class", "js-admin_channels_twitter__delete-button");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [1]);
                  var element2 = dom.childAt(element0, [3, 1]);
                  var element3 = dom.childAt(element2, [1]);
                  var element4 = dom.childAt(element2, [3]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                  morphs[2] = dom.createAttrMorph(element3, 'onclick');
                  morphs[3] = dom.createMorphAt(element3, 0, 0);
                  morphs[4] = dom.createAttrMorph(element4, 'onclick');
                  morphs[5] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["content", "account.screenName", ["loc", [null, [49, 36], [49, 58]]]], ["content", "account.brand.title", ["loc", [null, [49, 90], [49, 113]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledProperty", ["get", "account", ["loc", [null, [53, 60], [53, 67]]]]], [], ["loc", [null, [53, 27], [53, 69]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [53, 70], [53, 92]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "account", ["loc", [null, [54, 110], [54, 117]]]]], [], ["loc", [null, [54, 76], [54, 119]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [54, 120], [54, 142]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 45,
                    "column": 6
                  },
                  "end": {
                    "line": 59,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [46, 8], [58, 31]]]]],
              locals: ["account"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 60,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [42, 8], [42, 32]]]], ["block", "each", [["get", "disabledAccounts", ["loc", [null, [45, 14], [45, 30]]]]], [], 0, null, ["loc", [null, [45, 6], [59, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 2
              },
              "end": {
                "line": 61,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [40, 4], [60, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 64,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "enabledAccounts.length", ["loc", [null, [10, 8], [10, 30]]]]], [], 0, null, ["loc", [null, [10, 2], [37, 9]]]], ["block", "if", [["get", "disabledAccounts.length", ["loc", [null, [39, 8], [39, 31]]]]], [], 1, null, ["loc", [null, [39, 2], [61, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.twitter.headings.index"], [], ["loc", [null, [2, 6], [2, 40]]]], "buttonText", ["subexpr", "t", ["admin.twitter.buttons.create_account"], [], ["loc", [null, [3, 11], [3, 53]]]], "onSave", ["subexpr", "action", ["redirectToTwitterAuthenticationEndpoint"], [], ["loc", [null, [4, 7], [4, 57]]]], "pageCopy", ["subexpr", "t", ["admin.twitter.description"], [], ["loc", [null, [5, 9], [5, 40]]]]], ["loc", [null, [1, 0], [6, 2]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [8, 0], [64, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/link/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    queryParams: ['oauth_token', 'oauth_verifier'],

    oauth_token: null,
    oauth_verifier: null,

    updateBackendWithTwitterInfo: function updateBackendWithTwitterInfo() {
      var _this = this;

      if (this.get('oauth_token') && this.get('oauth_verifier')) {
        this.store.createRecord('twitter-account-callback', {
          oauthToken: this.get('oauth_token'),
          oauthVerifier: this.get('oauth_verifier')
        }).save().then(function () {
          _this.get('notification').add({
            type: 'success',
            title: _this.get('intl').findTranslationByKey('generic.changes_saved'),
            autodismiss: true
          });

          _this.transitionToRoute('session.admin.channels.twitter.index');
        })['catch'](function () {
          _this.transitionToRoute('session.admin.channels.twitter.index');
        });
      }
    }

  });
});
/* eslint-disable camelcase */
define('frontend-cp/session/admin/channels/twitter/link/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._super(args);
      this.controller.updateBackendWithTwitterInfo();
    }

  });
});
define('frontend-cp/session/admin/channels/twitter/reauthorize/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    queryParams: ['oauth_token', 'oauth_verifier'],

    oauth_token: null,
    oauth_verifier: null,

    updateBackendWithTwitterInfo: function updateBackendWithTwitterInfo() {
      var _this = this;

      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/twitter/account/reauthorize';

      if (this.get('oauth_token') && this.get('oauth_verifier')) {

        var options = {
          data: {
            oauthToken: this.get('oauth_token'),
            oauthVerifier: this.get('oauth_verifier')
          }
        };

        adapter.ajax(url, 'PUT', options).then(function () {
          _this.get('notification').add({
            type: 'success',
            title: _this.get('intl').findTranslationByKey('generic.changes_saved'),
            autodismiss: true
          });
        })['finally'](function () {
          _this.transitionToRoute('session.admin.channels.twitter.index');
        });
      }
    }

  });
});
/* eslint-disable camelcase */
define('frontend-cp/session/admin/channels/twitter/reauthorize/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._super(args);
      this.controller.updateBackendWithTwitterInfo();
    }

  });
});
define('frontend-cp/session/admin/manage/case-fields/edit/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.manage.case-fields.new',

    model: function model(params) {
      return this.store.findRecord('case-field', params.case_field_id);
    },

    afterModel: function afterModel(model) {
      var fieldType = model.get('fieldType');

      switch (fieldType) {
        case 'PRIORITY':
          return model.get('priorities');
        case 'STATUS':
          return model.get('statuses');
        case 'TYPE':
          return model.get('types');
      }
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["agentCaseSettings", true, "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [5, 19], [5, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [6, 18], [6, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [7, 11], [7, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [8, 9], [8, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [9, 12], [9, 30]]]]], ["loc", [null, [1, 0], [10, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      transitionToNewCaseFieldRoute: function transitionToNewCaseFieldRoute() {
        this.transitionToRoute('session.admin.manage.case-fields.select-type');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.store.findAll('case-field');
    }

  });
});
define("frontend-cp/session/admin/manage/case-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.casefields"], [], ["loc", [null, [2, 8], [2, 30]]]], "buttonText", ["subexpr", "t", ["admin.casefields.buttons.add_new_casefield"], [], ["loc", [null, [3, 13], [3, 61]]]], "onSave", ["subexpr", "action", ["transitionToNewCaseFieldRoute"], [], ["loc", [null, [4, 9], [4, 49]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["inline", "ko-admin/case-fields/index", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 35], [7, 40]]]]], [], []]], ["loc", [null, [7, 0], [7, 42]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),
    customFields: _ember['default'].inject.service('custom-fields'),

    queryParams: ['caseFieldType'],
    caseFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.manage.case-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.set('model.fieldType', caseFieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin Case Field Save Failed',
            category: 'Admin Case Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Fields Edit Canceled',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-fields.index');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Field Created',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Field Updated',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/new/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('case-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["agentCaseSettings", true, "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [5, 19], [5, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [6, 18], [6, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [7, 11], [7, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [8, 9], [8, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [9, 12], [9, 30]]]], "isApiFieldKeyAvailable", false, "isStatusKeyAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.transitionToRoute('session.admin.manage.case-fields.new', caseFieldType);
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Fields Edit Canceled',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/select-type/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("frontend-cp/session/admin/manage/case-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.casefields.new.heading"], [], ["loc", [null, [1, 29], [1, 63]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [1, 73], [1, 92]]]]], ["loc", [null, [1, 0], [1, 94]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setCaseFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [3, 32], [3, 51]]]]], ["loc", [null, [3, 0], [3, 53]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/edit/route', ['exports', 'ember'], function (exports, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Route.extend({
    intl: service(),

    controllerName: 'session.admin.manage.case-forms.new',

    model: function model(params) {
      return this.store.findRecord('case-form', params.case_form_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-forms/edit", [], ["title", ["subexpr", "t", ["admin.caseforms.edit.heading"], [], ["loc", [null, [2, 8], [2, 42]]]], "caseForm", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 11], [3, 16]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    session: _ember['default'].inject.service(),
    intlService: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    enabledForms: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (form) {
        return form.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    disabledForms: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (form) {
        return !form.get('isEnabled');
      });
    }),

    actions: {
      makeDefault: function makeDefault(caseform, e) {
        e.stopPropagation();
        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/cases/forms/default';

        this.store.peekAll('case-form').forEach(function (caseform) {
          caseform.set('isDefault', false);
        });
        caseform.set('isDefault', true);
        //TODO: this model is left dirty - it is not an issue,
        //but ideally we would mark this as clean.

        var options = {
          data: { form_id: caseform.get('id') }
        };

        adapter.ajax(url, 'PUT', options);

        this.get('metrics').trackEvent({
          event: 'Admin Case Form Default Changed',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'default button'
        });
      },

      reorderForms: function reorderForms(orderedForms) {
        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/cases/forms/reorder';

        var startingSortOrderNumber = 1;
        var orderedIds = orderedForms.map(function (form) {
          return form.id;
        });

        var sortOrder = startingSortOrderNumber;
        orderedForms.forEach(function (form) {
          form.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var options = {
          data: { form_ids: orderedIds.toString() }
        };

        adapter.ajax(url, 'PUT', options);

        this.get('metrics').trackEvent({
          event: 'Admin Case Forms Reorder',
          category: 'Admin Case Forms',
          action: 'reorder',
          label: 'reorder icon'
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(caseform, e) {
        e.stopPropagation();
        caseform.toggleProperty('isEnabled');
        caseform.save();

        this.get('metrics').trackEvent({
          event: 'Admin Case Form State Changed',
          category: 'Admin Case Forms',
          action: caseform.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      transitionToNewCaseFormRoute: function transitionToNewCaseFormRoute() {
        this.transitionToRoute('session.admin.manage.case-forms.new');
      },
      editForm: function editForm(form) {
        this.transitionToRoute('session.admin.manage.case-forms.edit', form);
      },

      showDeleteConfirmation: function showDeleteConfirmation(form, e) {
        e.stopPropagation();
        var deleteConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.delete');

        if (confirm(deleteConfirmationMessage)) {
          this.send('deleteField', form);
        }
      },
      deleteField: function deleteField(form) {
        form.destroyRecord();

        this.get('metrics').trackEvent({
          event: 'Admin Case Form Remove',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'delete link'
        });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/admin/manage/case-forms/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll('case-form');
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 52
                    },
                    "end": {
                      "line": 18,
                      "column": 131
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode(" (");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(")");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.default"], [], ["loc", [null, [18, 100], [18, 123]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 23,
                      "column": 12
                    },
                    "end": {
                      "line": 25,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element4, 'onclick');
                  morphs[1] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "form", ["loc", [null, [24, 58], [24, 62]]]]], [], ["loc", [null, [24, 27], [24, 64]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [24, 65], [24, 88]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 26,
                      "column": 12
                    },
                    "end": {
                      "line": 28,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element3, 'onclick');
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makeDefault", ["get", "form", ["loc", [null, [27, 50], [27, 54]]]]], [], ["loc", [null, [27, 27], [27, 56]]]]], ["inline", "t", ["generic.make_default"], [], ["loc", [null, [27, 57], [27, 85]]]]],
                locals: [],
                templates: []
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 29,
                      "column": 12
                    },
                    "end": {
                      "line": 31,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "form", ["loc", [null, [30, 61], [30, 65]]]]], [], ["loc", [null, [30, 27], [30, 67]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [30, 68], [30, 90]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 4
                  },
                  "end": {
                    "line": 35,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/2");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n     ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/2");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions t-right");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3, 1]);
                var element8 = dom.childAt(element7, [1]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(element6, 2, 2);
                morphs[2] = dom.createAttrMorph(element8, 'onclick');
                morphs[3] = dom.createMorphAt(element8, 0, 0);
                morphs[4] = dom.createMorphAt(element7, 3, 3);
                morphs[5] = dom.createMorphAt(element7, 4, 4);
                morphs[6] = dom.createMorphAt(element7, 5, 5);
                return morphs;
              },
              statements: [["content", "form.title", ["loc", [null, [18, 31], [18, 45]]]], ["block", "if", [["get", "form.isDefault", ["loc", [null, [18, 58], [18, 72]]]]], [], 0, null, ["loc", [null, [18, 52], [18, 138]]]], ["attribute", "onclick", ["subexpr", "action", ["editForm", ["get", "form", ["loc", [null, [22, 43], [22, 47]]]]], [], ["loc", [null, [22, 23], [22, 49]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [22, 50], [22, 70]]]], ["block", "if", [["get", "form.canBeDisabled", ["loc", [null, [23, 18], [23, 36]]]]], [], 1, null, ["loc", [null, [23, 12], [25, 19]]]], ["block", "if", [["get", "form.canBeMadeDefault", ["loc", [null, [26, 18], [26, 39]]]]], [], 2, null, ["loc", [null, [26, 12], [28, 19]]]], ["block", "if", [["get", "form.canBeDeleted", ["loc", [null, [29, 18], [29, 35]]]]], [], 3, null, ["loc", [null, [29, 12], [31, 19]]]]],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editForm", "content", ["subexpr", "@mut", [["get", "form", ["loc", [null, [15, 52], [15, 56]]]]], [], []], "class", ["subexpr", "qa-cls", ["qa-admin_case-forms__list-row"], [], ["loc", [null, [15, 63], [15, 103]]]]], 0, null, ["loc", [null, [15, 4], [35, 27]]]]],
            locals: ["form"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 0
              },
              "end": {
                "line": 37,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [12, 4], [12, 27]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderForms", "items", ["subexpr", "@mut", [["get", "enabledForms", ["loc", [null, [14, 66], [14, 78]]]]], [], []]], 0, null, ["loc", [null, [14, 2], [36, 26]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 46,
                      "column": 4
                    },
                    "end": {
                      "line": 57,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/2");
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n     ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/2");
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions t-right");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n          ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1, 1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element1, 'onclick');
                  morphs[2] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["content", "form.title", ["loc", [null, [49, 41], [49, 55]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "form", ["loc", [null, [53, 56], [53, 60]]]]], [], ["loc", [null, [53, 25], [53, 62]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [53, 63], [53, 85]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 45,
                    "column": 2
                  },
                  "end": {
                    "line": 58,
                    "column": 2
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms__list-row"], [], ["loc", [null, [46, 32], [46, 72]]]]], 0, null, ["loc", [null, [46, 4], [57, 27]]]]],
              locals: ["form"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 0
                },
                "end": {
                  "line": 59,
                  "column": 0
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [43, 4], [43, 28]]]], ["block", "each", [["get", "disabledForms", ["loc", [null, [45, 10], [45, 23]]]]], [], 0, null, ["loc", [null, [45, 2], [58, 11]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 0
              },
              "end": {
                "line": 60,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms__disabled-list"], [], ["loc", [null, [41, 24], [41, 69]]]]], 0, null, ["loc", [null, [41, 0], [59, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 61,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms__enabled-list"], [], ["loc", [null, [10, 24], [10, 68]]]]], 0, null, ["loc", [null, [10, 0], [37, 19]]]], ["block", "if", [["get", "disabledForms", ["loc", [null, [40, 6], [40, 19]]]]], [], 1, null, ["loc", [null, [40, 0], [60, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.caseforms"], [], ["loc", [null, [2, 8], [2, 29]]]], "buttonText", ["subexpr", "t", ["admin.caseforms.buttons.add_new_caseform"], [], ["loc", [null, [3, 13], [3, 59]]]], "buttonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__new-button"], [], ["loc", [null, [4, 14], [4, 56]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__cancel-button"], [], ["loc", [null, [5, 20], [5, 65]]]], "onSave", ["subexpr", "action", ["transitionToNewCaseFormRoute"], [], ["loc", [null, [6, 9], [6, 48]]]]], ["loc", [null, [1, 0], [7, 2]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [9, 0], [61, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    wasSaved: false,

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.manage.case-forms.index');
    },

    init: function init() {
      this.set('wasSaved', false);
      this._super.apply(this, arguments);
    },

    actions: {
      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Forms Edit Canceled',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-forms.index');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Form Created',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'save button'
        });

        this.set('wasSaved', true);

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Form Updated',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'save button'
        });

        this.set('wasSaved', true);

        this.successAction();
      },

      rollBackModel: function rollBackModel() {
        // rollbackAttributes() roll backs changes to a model attributes
        // reload() resets relationships from server, and this model will
        // have correct relationships set, even if they are changes on
        // server
        this.get('model').rollbackAttributes();

        if (this.get('model.id') && !this.get('wasSaved')) {
          this.get('model').reload();
        }
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });
});
define('frontend-cp/session/admin/manage/case-forms/new/route', ['exports', 'ember'], function (exports, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Route.extend({
    intl: service(),

    model: function model() {
      var caseForm = this.store.createRecord('case-form');
      this.store.findAll('case-field').then(function (caseFields) {
        caseFields.forEach(function (field) {
          if (field.get('isSystem')) {
            caseForm.get('fields').pushObject(field);
          }
        });
        // rebuild relationship cache
        // because these changes are made by default
        caseForm.cacheRelationships();
      });

      return caseForm;
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-forms/edit", [], ["title", ["subexpr", "t", ["admin.caseforms.new.heading"], [], ["loc", [null, [2, 8], [2, 41]]]], "caseForm", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 11], [3, 16]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/views/edit/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    controllerName: 'session.admin.manage.views.new',
    intl: _ember['default'].inject.service(),

    model: function model(params) {
      return this.store.findRecord('view', params.view_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
          this.controller.send('rollBackModel');
        }
      }
    }
  });
});
define("frontend-cp/session/admin/manage/views/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/views/edit", [], ["currentView", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 14], [2, 19]]]]], [], []], "title", ["subexpr", "t", ["admin.views.heading.edit"], [], ["loc", [null, [3, 8], [3, 38]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [4, 12], [4, 30]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [5, 11], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/views/index/controller', ['exports', 'ember'], function (exports, _ember) {

  var INBOX_VIEW_ID = 1;

  exports['default'] = _ember['default'].Controller.extend({
    intl: _ember['default'].inject.service(),
    sessionService: _ember['default'].inject.service('session'),
    notifications: _ember['default'].inject.service('notification'),
    metrics: _ember['default'].inject.service(),

    inboxView: _ember['default'].computed('model.[]', function () {
      return this.get('model').find(function (caseView) {
        return parseInt(caseView.get('id')) === INBOX_VIEW_ID;
      });
    }),

    enabledViews: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (view) {
        return view.get('isEnabled') && parseInt(view.get('id')) !== INBOX_VIEW_ID;
      }).sortBy('sortOrder');
    }),

    disabledViews: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (view) {
        return !view.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    actions: {
      transitionToNewViewRoute: function transitionToNewViewRoute() {
        this.transitionToRoute('session.admin.manage.views.new');
      },
      editView: function editView(view) {
        this.transitionToRoute('session.admin.manage.views.edit', view);
      },

      reorderViews: function reorderViews(orderedViews) {
        var _this = this;

        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/views/reorder';

        var startingSortOrderNumber = 2; // The inbox is always frst

        var orderedIds = orderedViews.getEach('id');

        var sortOrder = startingSortOrderNumber;
        orderedViews.forEach(function (customView) {
          customView.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var options = {
          data: {
            view_ids: orderedIds.toString() // eslint-disable-line camelcase
          }
        };

        adapter.ajax(url, 'PUT', options).then(function () {
          _this.get('notifications').success(_this.get('intl').findTranslationByKey('admin.views.order_saved.message'));
        });

        this.get('metrics').trackEvent({
          event: 'Admin Views Reorder',
          category: 'Admin Views',
          action: 'reorder',
          label: 'reorder icon'
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(view, e) {
        var _this2 = this;

        e.stopPropagation();
        view.toggleProperty('isEnabled');
        view.save().then(function () {
          var notificationMessage = undefined;
          if (view.get('isEnabled')) {
            notificationMessage = _this2.get('intl').findTranslationByKey('admin.views.enabled.message');
          } else {
            notificationMessage = _this2.get('intl').findTranslationByKey('admin.views.disabled.message');
          }

          _this2.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin View Status Update',
          category: 'Admin Views',
          action: view.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'status link'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(view, e) {
        var _this3 = this;

        e.stopPropagation();
        var locales = this.get('intl.locales');
        var deleteConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.delete', locales);

        if (confirm(deleteConfirmationMessage)) {
          // eslint-disable-line
          view.destroyRecord().then(function () {
            _this3.get('notifications').success(_this3.get('intl').findTranslationByKey('admin.views.deleted.message'));
          });

          this.get('metrics').trackEvent({
            event: 'Admin View Remove',
            category: 'Admin Views',
            action: 'click',
            label: 'delete link'
          });
        }
        return false;
      }
    }
  });
});
define('frontend-cp/session/admin/manage/views/index/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.query('view', { limit: _frontendCpConfigEnvironment['default'].APP.views.maxLimit });
    }
  });
});
define("frontend-cp/session/admin/manage/views/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 27,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-bold");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-1/3 t-caption");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3, "class", "t-caption");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n     ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "ko-simple-list__actions");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element11 = dom.childAt(fragment, [1]);
              var element12 = dom.childAt(element11, [3, 1]);
              var element13 = dom.childAt(element11, [5, 1, 1]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(dom.childAt(element11, [1, 1]), 1, 1);
              morphs[1] = dom.createMorphAt(element12, 1, 1);
              morphs[2] = dom.createMorphAt(element12, 3, 3);
              morphs[3] = dom.createAttrMorph(element13, 'onclick');
              morphs[4] = dom.createMorphAt(element13, 0, 0);
              return morphs;
            },
            statements: [["content", "inboxView.title", ["loc", [null, [13, 12], [13, 31]]]], ["inline", "t", ["generic.shared_with"], [], ["loc", [null, [18, 12], [18, 39]]]], ["content", "inboxView.visibilityString", ["loc", [null, [18, 40], [18, 70]]]], ["attribute", "onclick", ["subexpr", "action", ["editView", ["get", "inboxView", ["loc", [null, [23, 43], [23, 52]]]]], [], ["loc", [null, [23, 23], [23, 54]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [23, 55], [23, 75]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 45,
                      "column": 13
                    },
                    "end": {
                      "line": 50,
                      "column": 13
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("               ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode("|");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n               ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n               ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode("|");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n               ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [3]);
                  var element6 = dom.childAt(fragment, [7]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element5, 'onclick');
                  morphs[1] = dom.createMorphAt(element5, 0, 0);
                  morphs[2] = dom.createAttrMorph(element6, 'onclick');
                  morphs[3] = dom.createMorphAt(element6, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "enabledView", ["loc", [null, [47, 57], [47, 68]]]]], [], ["loc", [null, [47, 26], [47, 70]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [47, 71], [47, 94]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "enabledView", ["loc", [null, [49, 60], [49, 71]]]]], [], ["loc", [null, [49, 26], [49, 74]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [49, 75], [49, 97]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 4
                  },
                  "end": {
                    "line": 54,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3 t-caption");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-caption");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n     ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n           ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n             ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("           ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element7, [5, 1]);
                var element10 = dom.childAt(element9, [1]);
                var morphs = new Array(6);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]), 1, 1);
                morphs[1] = dom.createMorphAt(element8, 1, 1);
                morphs[2] = dom.createMorphAt(element8, 3, 3);
                morphs[3] = dom.createAttrMorph(element10, 'onclick');
                morphs[4] = dom.createMorphAt(element10, 0, 0);
                morphs[5] = dom.createMorphAt(element9, 3, 3);
                return morphs;
              },
              statements: [["content", "enabledView.title", ["loc", [null, [34, 12], [34, 33]]]], ["inline", "t", ["generic.shared_with"], [], ["loc", [null, [39, 12], [39, 39]]]], ["content", "enabledView.visibilityString", ["loc", [null, [39, 40], [39, 72]]]], ["attribute", "onclick", ["subexpr", "action", ["editView", ["get", "enabledView", ["loc", [null, [44, 44], [44, 55]]]]], [], ["loc", [null, [44, 24], [44, 57]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [44, 58], [44, 78]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "enabledView.viewType", ["loc", [null, [45, 28], [45, 48]]]], "TRASH"], [], ["loc", [null, [45, 24], [45, 57]]]]], [], ["loc", [null, [45, 19], [45, 58]]]]], [], 0, null, ["loc", [null, [45, 13], [50, 20]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 2
                },
                "end": {
                  "line": 55,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-view-list-active--title"], [], ["loc", [null, [30, 32], [30, 69]]]], "action", "editView", "content", ["subexpr", "@mut", [["get", "enabledView", ["loc", [null, [30, 96], [30, 107]]]]], [], []]], 0, null, ["loc", [null, [30, 4], [54, 27]]]]],
            locals: ["enabledView"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 56,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [6, 4], [6, 27]]]], ["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-view-list-active--title"], [], ["loc", [null, [9, 30], [9, 67]]]], "action", "editView", "content", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [9, 94], [9, 103]]]]], [], []]], 0, null, ["loc", [null, [9, 2], [27, 25]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderViews", "items", ["subexpr", "@mut", [["get", "enabledViews", ["loc", [null, [29, 66], [29, 78]]]]], [], []]], 1, null, ["loc", [null, [29, 2], [55, 26]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 65,
                      "column": 6
                    },
                    "end": {
                      "line": 80,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-bold t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("span");
                  dom.setAttribute(el4, "class", "t-caption");
                  var el5 = dom.createTextNode("|");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element0, [5, 1]);
                  var element3 = dom.childAt(element2, [1]);
                  var element4 = dom.childAt(element2, [5]);
                  var morphs = new Array(7);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[1] = dom.createMorphAt(element1, 0, 0);
                  morphs[2] = dom.createMorphAt(element1, 2, 2);
                  morphs[3] = dom.createAttrMorph(element3, 'onclick');
                  morphs[4] = dom.createMorphAt(element3, 0, 0);
                  morphs[5] = dom.createAttrMorph(element4, 'onclick');
                  morphs[6] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledView.title", ["loc", [null, [68, 43], [68, 65]]]], ["inline", "t", ["generic.shared_with"], [], ["loc", [null, [71, 36], [71, 63]]]], ["content", "disabledView.visibilityString", ["loc", [null, [71, 64], [71, 97]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledView", ["loc", [null, [75, 56], [75, 68]]]]], [], ["loc", [null, [75, 25], [75, 70]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [75, 71], [75, 93]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledView", ["loc", [null, [76, 92], [76, 104]]]]], [], ["loc", [null, [76, 58], [76, 106]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [76, 107], [76, 129]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 64,
                    "column": 4
                  },
                  "end": {
                    "line": 81,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-view-list-inactive--title"], [], ["loc", [null, [65, 34], [65, 73]]]]], 0, null, ["loc", [null, [65, 6], [80, 29]]]]],
              locals: ["disabledView"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 2
                },
                "end": {
                  "line": 82,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [62, 6], [62, 30]]]], ["block", "each", [["get", "disabledViews", ["loc", [null, [64, 12], [64, 25]]]]], [], 0, null, ["loc", [null, [64, 4], [81, 13]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 0
              },
              "end": {
                "line": 83,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [60, 2], [82, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [4, 0], [56, 19]]]], ["block", "if", [["get", "disabledViews.length", ["loc", [null, [59, 6], [59, 26]]]]], [], 1, null, ["loc", [null, [59, 0], [83, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.views"], [], ["loc", [null, [1, 29], [1, 46]]]], "buttonText", ["subexpr", "t", ["admin.views.buttons.add_new"], [], ["loc", [null, [1, 58], [1, 91]]]], "onSave", ["subexpr", "action", ["transitionToNewViewRoute"], [], ["loc", [null, [1, 99], [1, 134]]]]], ["loc", [null, [1, 0], [1, 136]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [3, 0], [84, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/manage/views/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('model').rollbackAttributes();
      },

      saved: function saved() {
        this.get('notification').success(this.get('intl').findTranslationByKey('generic.changes_saved'));

        this.get('metrics').trackEvent({
          event: 'Admin View Created',
          category: 'Admin Views',
          action: 'click',
          label: 'save button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      },

      updated: function updated() {
        this.get('notification').success(this.get('intl').findTranslationByKey('generic.changes_saved'));

        this.get('metrics').trackEvent({
          event: 'Admin View Updated',
          category: 'Admin Views',
          action: 'click',
          label: 'save button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin View Creation Canceled',
          category: 'Admin Views',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });
});
define('frontend-cp/session/admin/manage/views/new/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    intl: _ember['default'].inject.service(),

    model: function model() {
      var newView = this.store.createRecord('view');

      /* Setup defaults and recache the relationships */
      var firstProposition = this.store.createRecord('proposition', {});
      //let firstCollection = this.store.createRecord('predicate-collection', {
      //  propositions: [firstProposition]
      //});

      newView.get('predicateCollections').createRecord({
        propositions: [firstProposition]
      });

      this.store.findAll('column').then(function (columns) {
        var defaults = ['caseid', 'subject', 'casestatusid', 'assigneeagentid', 'updatedat', 'requesterid'];
        var filtered = columns.filter(function (column) {
          return defaults.indexOf(column.get('id')) > -1;
        });
        newView.get('columns').pushObjects(filtered);
      });

      newView.set('orderBy', 'ASC');
      newView.set('orderByColumn', 'updatedat');

      newView.cacheRelationships();
      return newView;
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });
});
define("frontend-cp/session/admin/manage/views/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/views/edit", [], ["currentView", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 14], [2, 19]]]]], [], []], "title", ["subexpr", "t", ["admin.views.heading.new"], [], ["loc", [null, [3, 8], [3, 37]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["saved"], [], ["loc", [null, [5, 12], [5, 28]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/edit/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.organization-fields.new',

    model: function model(params) {
      return this.store.findRecord('organization-field', params.organization_field_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/organization-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isCustomerEditAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewFieldRoute: function transitionToNewFieldRoute() {
        this.transitionToRoute('session.admin.people.organization-fields.select-type');
      },

      toggleEnabledStatus: function toggleEnabledStatus(field, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(field).then(function () {
          var notificationMessage = undefined;
          if (field.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.organizationfields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.organizationfields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field State Changed',
          category: 'Admin Organization Fields',
          action: field.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Remove',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.organizationfields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.organization-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Reorder',
          category: 'Admin Organization Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    model: function model() {
      return this.store.findAll('organization-field');
    }

  });
});
define("frontend-cp/session/admin/people/organization-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 33,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "flag flag--small");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__img");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__body");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5, "class", "t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]), 0, 0);
                morphs[3] = dom.createAttrMorph(element11, 'onclick');
                morphs[4] = dom.createMorphAt(element11, 0, 0);
                morphs[5] = dom.createAttrMorph(element12, 'onclick');
                morphs[6] = dom.createMorphAt(element12, 0, 0);
                morphs[7] = dom.createAttrMorph(element13, 'onclick');
                morphs[8] = dom.createMorphAt(element13, 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [13, 33], [13, 54]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [18, 89], [18, 121]]]], ["get", "customfield.fieldType", ["loc", [null, [18, 122], [18, 143]]]]], [], ["loc", [null, [18, 77], [18, 145]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [21, 60], [21, 96]]]], ["get", "customfield.fieldType", ["loc", [null, [21, 97], [21, 118]]]]], [], ["loc", [null, [21, 49], [21, 119]]]]], [], ["loc", [null, [21, 45], [21, 121]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [27, 46], [27, 57]]]]], [], ["loc", [null, [27, 25], [27, 59]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [27, 60], [27, 80]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [28, 56], [28, 67]]]]], [], ["loc", [null, [28, 25], [28, 69]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [28, 70], [28, 93]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [29, 59], [29, 70]]]]], [], ["loc", [null, [29, 25], [29, 72]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [29, 73], [29, 95]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "customfield", ["loc", [null, [10, 55], [10, 66]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [10, 6], [33, 29]]]]],
            locals: ["customfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [6, 6], [6, 29]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderCustomFields", "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [9, 75], [9, 87]]]]], [], []]], 0, null, ["loc", [null, [9, 4], [34, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "flag flag--small");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__img");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__body");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5, "class", "u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
                  morphs[3] = dom.createAttrMorph(element4, 'onclick');
                  morphs[4] = dom.createMorphAt(element4, 0, 0);
                  morphs[5] = dom.createAttrMorph(element5, 'onclick');
                  morphs[6] = dom.createMorphAt(element5, 0, 0);
                  morphs[7] = dom.createAttrMorph(element6, 'onclick');
                  morphs[8] = dom.createMorphAt(element6, 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [46, 43], [46, 66]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [51, 85], [51, 117]]]], ["get", "disabledfield.fieldType", ["loc", [null, [51, 118], [51, 141]]]]], [], ["loc", [null, [51, 73], [51, 143]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [54, 59], [54, 95]]]], ["get", "disabledfield.fieldType", ["loc", [null, [54, 96], [54, 119]]]]], [], ["loc", [null, [54, 48], [54, 120]]]]], [], ["loc", [null, [54, 44], [54, 122]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [60, 46], [60, 59]]]]], [], ["loc", [null, [60, 25], [60, 61]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [60, 62], [60, 82]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [61, 56], [61, 69]]]]], [], ["loc", [null, [61, 25], [61, 71]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [61, 72], [61, 94]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [62, 59], [62, 72]]]]], [], ["loc", [null, [62, 25], [62, 74]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [62, 75], [62, 97]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 4
                  },
                  "end": {
                    "line": 67,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "disabledfield", ["loc", [null, [43, 55], [43, 68]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [43, 6], [66, 29]]]]],
              locals: ["disabledfield"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 2
                },
                "end": {
                  "line": 68,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [40, 6], [40, 30]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [42, 12], [42, 26]]]]], [], 0, null, ["loc", [null, [42, 4], [67, 13]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 69,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [38, 2], [68, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [4, 2], [35, 21]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [37, 6], [37, 27]]]]], [], 1, null, ["loc", [null, [37, 0], [69, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.organizationfields"], [], ["loc", [null, [1, 29], [1, 59]]]], "buttonText", ["subexpr", "t", ["admin.fields.add_new_field"], [], ["loc", [null, [1, 71], [1, 103]]]], "onSave", ["subexpr", "action", ["transitionToNewFieldRoute"], [], ["loc", [null, [1, 111], [1, 147]]]]], ["loc", [null, [1, 0], [1, 149]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [3, 0], [70, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    customFields: _ember['default'].inject.service('custom-fields'),
    metrics: _ember['default'].inject.service(),

    queryParams: ['organizationFieldType'],
    organizationFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.organization-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin Organization Field Save Failed',
            category: 'Admin Organization Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Created',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Updated',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Fields Edit Canceled',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.organization-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/new/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('organization-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/organization-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isStatusKeyAvailable", false, "isCustomerEditAvailable", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      setUserFieldType: function setUserFieldType(fieldType) {
        this.transitionToRoute('session.admin.people.organization-fields.new', fieldType);
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Fields Edit Canceled',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.people.organization-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/select-type/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("frontend-cp/session/admin/people/organization-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 67
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.organizationfields.new.heading"], [], ["loc", [null, [1, 29], [1, 71]]]], "onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [1, 81], [1, 114]]]]], ["loc", [null, [1, 0], [1, 116]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setUserFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [3, 32], [3, 65]]]]], ["loc", [null, [3, 0], [3, 67]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/teams/edit/route', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend({
    intl: inject.service(),
    controllerName: 'session.admin.people.teams.new',

    model: function model(params) {
      return this.store.findRecord('team', params.team_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/people/teams/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/team", [], ["title", ["subexpr", "t", ["admin.teams.headings.edit"], ["title", ["get", "model.title", ["loc", [null, [2, 45], [2, 56]]]]], ["loc", [null, [2, 8], [2, 57]]]], "team", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 7], [3, 12]]]]], [], []], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [4, 12], [4, 30]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [5, 11], [5, 30]]]], "injectIntoParent", ["subexpr", "action", [["subexpr", "mut", [["get", "teamComponent", ["loc", [null, [6, 32], [6, 45]]]]], [], ["loc", [null, [6, 27], [6, 46]]]]], [], ["loc", [null, [6, 19], [6, 47]]]]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/teams/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    storeCache: inject.service('store-cache'),

    // prime agents cache - makes loading team pages faster
    primeAgentCache: _ember['default'].on('init', function () {
      this.get('storeCache').query('user', { role: 'AGENT' });
    }),

    filter: '',
    filteredResults: computed('model.[]', 'filter', function () {
      var teams = this.get('model');
      var filter = this.get('filter');
      var regEx = new RegExp(filter, 'i');
      if (filter === '') {
        return teams;
      } else {
        return teams.filter(function (team) {
          return regEx.test(team.get('title'));
        });
      }
    }),

    actions: {
      transitionToAddNewTeam: function transitionToAddNewTeam() {
        this.transitionToRoute('session.admin.people.teams.new');
      }
    }
  });
});
define('frontend-cp/session/admin/people/teams/index/route', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend({
    permissionService: inject.service('permissions'),
    permissionName: 'admin.team.view',

    storeCache: inject.service('store-cache'),
    store: inject.service(),

    beforeModel: function beforeModel() {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.admin');
      }
    },

    model: function model() {
      return this.get('store').query('team', { limit: 10000 });
    }
  });
});
define("frontend-cp/session/admin/people/teams/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 107
            }
          },
          "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["inline", "ko-admin-card-team", [], ["team", ["subexpr", "@mut", [["get", "team", ["loc", [null, [18, 95], [18, 99]]]]], [], []]], ["loc", [null, [18, 69], [18, 101]]]]],
        locals: ["team"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout u-mb");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "input--search t-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-search i-color-grey--light");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.teams.headings.index"], [], ["loc", [null, [2, 8], [2, 40]]]], "buttonText", ["subexpr", "t", ["admin.teams.buttons.add"], [], ["loc", [null, [3, 13], [3, 42]]]], "onSave", ["subexpr", "action", ["transitionToAddNewTeam"], [], ["loc", [null, [4, 9], [4, 42]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["inline", "input", [], ["class", "input-text input-text--search", "type", "text", "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [10, 70], [10, 76]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.teams.labels.filter_teams"], [], ["loc", [null, [10, 89], [10, 126]]]]], ["loc", [null, [10, 6], [10, 128]]]], ["block", "each", [["get", "filteredResults", ["loc", [null, [18, 10], [18, 25]]]]], [], 0, null, ["loc", [null, [18, 2], [18, 116]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/people/teams/new/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    userHasChangedModel: function userHasChangedModel() {
      /*
       * Passing membersToAdd and membersToRemove up from team component as a hack
       * until routable components - we need these variables from transitionTo hook
       */
      var hasMembersToAdd = Boolean(this.get('teamComponent.membersToAdd.length'));
      var hasMembersToRemove = Boolean(this.get('teamComponent.membersToRemove.length'));
      return this.get('model').hasChangesToSelf() || hasMembersToAdd || hasMembersToRemove;
    },

    modelIsNew: function modelIsNew() {
      return !this.get('model.id');
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.teams.index');
    },

    actions: {
      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Created',
          category: 'Admin Teams',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Updated',
          category: 'Admin Teams',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Edit Canceled',
          category: 'Admin Teams',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.teams.index');
      },

      rollbackModel: function rollbackModel() {
        this.get('model').rollbackAttributes();
      }
    }
  });
});
define('frontend-cp/session/admin/people/teams/new/route', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend({
    intl: inject.service(),
    model: function model() {
      return this.store.createRecord('team');
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
            return false;
          }
        } else if (this.controller.modelIsNew()) {
          // new model, without changes - we should get rid of it!
          this.controller.send('rollbackModel');
          return true;
        }
      }
    }
  });
});
/* eslint-disable no-alert */
define("frontend-cp/session/admin/people/teams/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/team", [], ["title", ["subexpr", "t", ["admin.teams.headings.new"], [], ["loc", [null, [2, 8], [2, 38]]]], "team", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 7], [3, 12]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [5, 12], [5, 30]]]], "injectIntoParent", ["subexpr", "action", [["subexpr", "mut", [["get", "teamComponent", ["loc", [null, [6, 32], [6, 45]]]]], [], ["loc", [null, [6, 27], [6, 46]]]]], [], ["loc", [null, [6, 19], [6, 47]]]]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/edit/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.user-fields.new',

    model: function model(params) {
      return this.store.findRecord('user-field', params.user_field_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewUserFieldRoute: function transitionToNewUserFieldRoute() {
        this.transitionToRoute('session.admin.people.user-fields.select-type');
      },

      toggleEnabledStatus: function toggleEnabledStatus(field, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(field).then(function () {
          var notificationMessage = undefined;
          if (field.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.userfields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.userfields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin User Field State Changed',
          category: 'Admin User Fields',
          action: field.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin User Field Remove',
          category: 'Admin User Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.userfields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.user-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin User Fields Reorder',
          category: 'Admin User Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.findAll('user-field');
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 33,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "flag flag--small");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__img");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "flag__body");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5, "class", "t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3, "class", "ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]), 0, 0);
                morphs[3] = dom.createAttrMorph(element11, 'onclick');
                morphs[4] = dom.createMorphAt(element11, 0, 0);
                morphs[5] = dom.createAttrMorph(element12, 'onclick');
                morphs[6] = dom.createMorphAt(element12, 0, 0);
                morphs[7] = dom.createAttrMorph(element13, 'onclick');
                morphs[8] = dom.createMorphAt(element13, 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [13, 33], [13, 54]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [18, 89], [18, 121]]]], ["get", "customfield.fieldType", ["loc", [null, [18, 122], [18, 143]]]]], [], ["loc", [null, [18, 77], [18, 145]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [21, 60], [21, 96]]]], ["get", "customfield.fieldType", ["loc", [null, [21, 97], [21, 118]]]]], [], ["loc", [null, [21, 49], [21, 119]]]]], [], ["loc", [null, [21, 45], [21, 121]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [27, 46], [27, 57]]]]], [], ["loc", [null, [27, 25], [27, 59]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [27, 60], [27, 80]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [28, 56], [28, 67]]]]], [], ["loc", [null, [28, 25], [28, 69]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [28, 70], [28, 93]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [29, 59], [29, 70]]]]], [], ["loc", [null, [29, 25], [29, 72]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [29, 73], [29, 95]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "customfield", ["loc", [null, [10, 55], [10, 66]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [10, 6], [33, 29]]]]],
            locals: ["customfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [6, 6], [6, 29]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderCustomFields", "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [9, 75], [9, 87]]]]], [], []]], 0, null, ["loc", [null, [9, 4], [34, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3, "class", "t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "flag flag--small");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__img");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4, "class", "flag__body");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5, "class", "u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2, "class", "layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3, "class", "ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 0, 0);
                  morphs[3] = dom.createAttrMorph(element4, 'onclick');
                  morphs[4] = dom.createMorphAt(element4, 0, 0);
                  morphs[5] = dom.createAttrMorph(element5, 'onclick');
                  morphs[6] = dom.createMorphAt(element5, 0, 0);
                  morphs[7] = dom.createAttrMorph(element6, 'onclick');
                  morphs[8] = dom.createMorphAt(element6, 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [46, 43], [46, 66]]]], ["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [51, 85], [51, 117]]]], ["get", "disabledfield.fieldType", ["loc", [null, [51, 118], [51, 141]]]]], [], ["loc", [null, [51, 73], [51, 143]]]]]]], ["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [54, 59], [54, 95]]]], ["get", "disabledfield.fieldType", ["loc", [null, [54, 96], [54, 119]]]]], [], ["loc", [null, [54, 48], [54, 120]]]]], [], ["loc", [null, [54, 44], [54, 122]]]], ["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [60, 46], [60, 59]]]]], [], ["loc", [null, [60, 25], [60, 61]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [60, 62], [60, 82]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [61, 56], [61, 69]]]]], [], ["loc", [null, [61, 25], [61, 71]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [61, 72], [61, 94]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [62, 59], [62, 72]]]]], [], ["loc", [null, [62, 25], [62, 74]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [62, 75], [62, 97]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 4
                  },
                  "end": {
                    "line": 67,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], ["action", "editField", "content", ["subexpr", "@mut", [["get", "disabledfield", ["loc", [null, [43, 55], [43, 68]]]]], [], []], "class", "u-pointer"], 0, null, ["loc", [null, [43, 6], [66, 29]]]]],
              locals: ["disabledfield"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 2
                },
                "end": {
                  "line": 68,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [40, 6], [40, 30]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [42, 12], [42, 26]]]]], [], 0, null, ["loc", [null, [42, 4], [67, 13]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 69,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [38, 2], [68, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [4, 2], [35, 21]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [37, 6], [37, 27]]]]], [], 1, null, ["loc", [null, [37, 0], [69, 7]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 71,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", "User Fields", "buttonText", ["subexpr", "t", ["admin.userfields.buttons.add_new_userfield"], [], ["loc", [null, [1, 54], [1, 102]]]], "onSave", ["subexpr", "action", ["transitionToNewUserFieldRoute"], [], ["loc", [null, [1, 110], [1, 150]]]]], ["loc", [null, [1, 0], [1, 152]]]], ["block", "ko-admin/forms/table", [], [], 0, null, ["loc", [null, [3, 0], [70, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    customFields: _ember['default'].inject.service('custom-fields'),
    metrics: _ember['default'].inject.service(),

    queryParams: ['userFieldType'],
    userFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.user-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Edit Canceled',
          category: 'Admin User Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.user-fields.index');
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin User Field Save Failed',
            category: 'Admin User Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Updated',
          category: 'Admin User Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Created',
          category: 'Admin User Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/new/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('user-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isStatusKeyAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      // TODO: make this action to be generic across cases & users.
      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.transitionToRoute('session.admin.people.user-fields.new', fieldType);
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin User Fields Edit Canceled',
          category: 'Admin User Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.people.user-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/select-type/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("frontend-cp/session/admin/people/user-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.userfields.new.heading"], [], ["loc", [null, [1, 29], [1, 63]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [1, 73], [1, 92]]]]], ["loc", [null, [1, 0], [1, 94]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setCaseFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [3, 32], [3, 51]]]]], ["loc", [null, [3, 0], [3, 53]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    active: false,

    permissionName: 'app.admin.access',
    permissionService: _ember['default'].inject.service('permissions'),

    beforeModel: _ember['default'].on('beforeModel', function () {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.agent');
      }
      var store = this.get('store');
      return store.findAll('language');
    }),

    activate: _ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: _ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    actions: {
      didTransition: function didTransition() {
        window.scrollTo(0, 0);
      }
    }
  });
});
define("frontend-cp/session/admin/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "ko-admin/page-container", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    intl: inject.service(),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User>Case
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: computed('model.requester.organization.id', 'model.requester.id', function () {
      var hasOrganisation = this.get('model.requester.organization.id');
      var hasUser = this.get('model.requester.id');

      var caseCrumb = {
        id: 'case',
        label: 'Case ' + this.get('model.id'),
        routeName: 'session.agent.cases.case.index',
        dynamicSegments: []
      };

      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.requester.organization.name'),
          routeName: 'session.agent.cases.case.organisation',
          dynamicSegments: []
        });
      }

      if (hasUser) {
        crumbs.push({
          id: 'user',
          label: this.get('model.requester.fullName'),
          routeName: 'session.agent.cases.case.user',
          dynamicSegments: []
        });
      }

      crumbs.push(caseCrumb);

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/cases/case/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  var getProperties = _ember['default'].getProperties;
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['postId', 'filter', 'sort'],
    filter: 'posts',
    sort: 'newest',
    postId: null,

    // Actions
    actions: {
      updateQueryParams: function updateQueryParams(changes) {
        this.setProperties(changes);
        return true;
      },

      updateTabName: function updateTabName() {
        var _target;

        (_target = this.target).send.apply(_target, ['updateTabName'].concat(_slice.call(arguments)));
      },

      updateTabState: function updateTabState(state) {
        var persistedState = getProperties(state, 'postContent', 'channelId', 'attachedPostFiles');
        this.send('updateNonPersistedTabState', { index: state });
        this.target.send('updateTabState', { index: persistedState });
        this.set('tabState', state);
      }
    }
  });
});
define('frontend-cp/session/agent/cases/case/index/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    tabStore: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service('store-cache'),
    intlService: _ember['default'].inject.service('intl'),

    queryParams: {
      postId: { replace: true },
      filter: { replace: true },
      sort: { replace: true }
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        'case': this.modelFor('session.agent.cases.case'),
        priorities: this.get('storeCache').findAll('case-priority'),
        statuses: this.get('storeCache').findAll('case-status'),
        types: this.get('storeCache').findAll('case-type'),
        caseFields: this.get('storeCache').findAll('case-field')
      }).then(function (model) {
        model.tags = model['case'].get('tags');
        model.replyChannel = model['case'].get('replyChannels');
        return _ember['default'].RSVP.hash(model);
      });
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      var parentController = this.controllerFor('session.agent.cases.case');
      controller.set('tabId', parentController.get('tab.basePath'));

      controller.setProperties(model);
    },

    // Actions
    actions: {
      updateQueryParams: function updateQueryParams(changes) {
        var tabs = this.get('tabStore');
        var activeTab = tabs.get('activeTab');
        var defaultQPs = { postId: null, filter: 'post', sort: 'newest' };
        var newQueryParams = Object.assign({}, defaultQPs, activeTab.queryParams || {}, changes);
        tabs.update(activeTab, { queryParams: newQueryParams });
      }
    }
  });
});
define("frontend-cp/session/agent/cases/case/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-case-content", [], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "postId", ["subexpr", "@mut", [["get", "postId", ["loc", [null, [3, 9], [3, 15]]]]], [], []], "sortOrder", ["subexpr", "@mut", [["get", "sort", ["loc", [null, [4, 12], [4, 16]]]]], [], []], "filter", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [5, 9], [5, 15]]]]], [], []], "caseFields", ["subexpr", "@mut", [["get", "caseFields", ["loc", [null, [6, 13], [6, 23]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [9, 8], [9, 13]]]]], [], []], "onTabNameUpdate", ["subexpr", "action", ["updateTabName"], [], ["loc", [null, [10, 18], [10, 42]]]], "onStateUpdate", ["subexpr", "action", ["updateTabState"], [], ["loc", [null, [11, 16], [11, 41]]]], "onQueryParamsUpdate", ["subexpr", "action", ["updateQueryParams"], [], ["loc", [null, [12, 22], [12, 50]]]], "tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [13, 8], [13, 13]]]]], [], []]], ["loc", [null, [1, 0], [14, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/session/agent/cases/case/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/cases/case/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    cleanUpDeletedOrganizationFromUI: function cleanUpDeletedOrganizationFromUI() {
      this.modelFor('session.agent.cases.case').set('requester.organization', null);
    },

    model: function model(params) {
      this.get('storeCache').findAll('organization-field');
      var parentModel = this.modelFor('session.agent.cases.case').get('requester');
      return parentModel ? parentModel.get('organization') : {};
    },

    activate: function activate() {
      this.modelFor(this.routeName).on('didDelete', this, this.cleanUpDeletedOrganizationFromUI);
    },

    deactivate: function deactivate() {
      this.modelFor(this.routeName).off('didDelete', this, this.cleanUpDeletedOrganizationFromUI);
    }
  });
});
define("frontend-cp/session/agent/cases/case/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route', 'ember'], function (exports, _frontendCpRoutesAbstractTabbedRoute, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    intl: service(),

    model: function model(params) {
      return this.store.findRecord('case', params.case_id);
    },

    beforeModel: function beforeModel() {
      this.get('tabStore').set('isEnabled', false);
      this._super.apply(this, arguments);
    },

    afterModel: function afterModel(model, transition) {
      this.tab = this.get('tabStore').open(transition, model.get('subject'));
      this.get('tabStore').set('isEnabled', true);
      this._super.apply(this, arguments);
    }
  });
});
define("frontend-cp/session/agent/cases/case/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/user/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/case/user/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      this.get('storeCache').findAll('user-field');
      return this.modelFor('session.agent.cases.case').get('requester');
    }
  });
});
define("frontend-cp/session/agent/cases/case/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/index/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      // Redirect to the first view.
      var views = this.modelFor('session.agent.cases.index').views;
      var inbox = views.findBy('isDefault');
      this.transitionTo('session.agent.cases.index.view', inbox.id);
    }
  });
});
define('frontend-cp/session/agent/cases/index/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var run = _ember['default'].run;
  var RSVP = _ember['default'].RSVP;

  var casePageLimit = _frontendCpConfigEnvironment['default'].casesPageSize;
  var caseViewLimit = _frontendCpConfigEnvironment['default'].APP.views.maxLimit;
  var viewsPollingInterval = _frontendCpConfigEnvironment['default'].APP.views.viewsPollingInterval * 1000;
  var isViewsPollingEnabled = _frontendCpConfigEnvironment['default'].APP.views.isPollingEnabled;

  exports['default'] = _ember['default'].Route.extend({
    metrics: _ember['default'].inject.service(),
    pusher: _ember['default'].inject.service(),
    pollingCountsEnabled: false,

    model: function model() {
      return RSVP.hash({
        viewCounts: this.store.findAll('view-count', { reload: true }),
        views: this.store.query('view', { limit: caseViewLimit }, { reload: true })
      });
    },

    setupController: function setupController(controller, _ref) {
      var views = _ref.views;

      var inbox = views.findBy('isDefault');
      controller.setProperties({ inboxView: inbox, childRoutePage: 1 });
      this._super(controller, views.filter(function (v) {
        return v.id !== inbox.id && v.get('isEnabled');
      }));
    },

    activate: function activate() {
      this._super.apply(this, arguments);
      if (isViewsPollingEnabled) {
        this.viewsCountPollingTimer = run.later(this, this._pollCurrentViewCounts, viewsPollingInterval);
      }
      this._subscribeToViewCountUpdates();
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      if (this.viewsCountPollingTimer) {
        run.cancel(this.viewsCountPollingTimer);
      }
      this._unsubscribeToViewCountUpdates();
    },

    actions: {
      willTransition: function willTransition() {
        this.set('pollingCountsEnabled', false);
      },

      updatePagination: function updatePagination(params, meta) {
        this.get('metrics').trackEvent({
          event: 'Case View Page Changed',
          category: 'Case Views',
          action: 'click',
          label: params.page
        });

        this.controller.setProperties({
          childRoutePage: params.page,
          childRouteTotalPages: Math.ceil(meta.total / casePageLimit)
        });
      }
    },

    // Methods
    _pollCurrentViewCounts: function _pollCurrentViewCounts() {
      this.model(this.paramsFor(this.routeName));
      this.viewsCountPollingTimer = run.later(this, this._pollCurrentViewCounts, viewsPollingInterval);
    },

    _subscribeToViewCountUpdates: function _subscribeToViewCountUpdates() {
      var _this = this;

      var viewCounts = this.store.peekAll('view-count');
      var pusher = this.get('pusher');
      viewCounts.forEach(function (viewCount) {
        var realtimeChannel = viewCount.get('realtimeChannel');
        pusher.subscribeTo(realtimeChannel, 'CHANGE', _this, _this._updateCounterHandler);
      });
    },

    _unsubscribeToViewCountUpdates: function _unsubscribeToViewCountUpdates() {
      var viewCounts = this.store.peekAll('view-count');
      var pusher = this.get('pusher');
      viewCounts.forEach(function (viewCount) {
        var realtimeChannel = viewCount.get('realtimeChannel');
        pusher.unsubscribeTo(realtimeChannel, 'CHANGE');
      });
    },

    _updateCounterHandler: function _updateCounterHandler(data) {
      this.store.push({
        id: data.resource_id,
        type: _ember['default'].String.dasherize(data.resource_type),
        attributes: data.changed_properties
      });
    }
  });
});
define('frontend-cp/session/agent/cases/index/suspended-messages/controller', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['page', 'view'],
    page: 1,
    columns: ['from', 'subject', 'createdAt', 'suspensionCode'],
    intl: inject.service(),

    // CPs
    suspendedMails: computed.filterBy('model', 'isSuspended', true),

    // Actions
    actions: {
      showMail: function showMail(mail) {
        this.target.send('showMail', mail);
      },

      permanentlyDeleteSelectedMails: function permanentlyDeleteSelectedMails() {
        var _this = this;

        var message = this.get('intl').findTranslationByKey('cases.suspendedMessages.confirmDeleteAll');
        if (confirm(message)) {
          (function () {
            var mails = _this.get('selectedMails');
            var ids = mails.mapBy('id');
            var adapter = _this.container.lookup('adapter:application');
            var url = adapter.namespace + '/mails?' + _ember['default'].$.param({ ids: ids });
            adapter.ajax(url, 'DELETE').then(function () {
              mails.forEach(function (m) {
                return m.unloadRecord();
              });
              _this.set('selectedMails', []);
            });
          })();
        }
      },

      tableSorted: function tableSorted(column, order) {
        this.setProperties({ orderBy: order, orderByColumn: column });
      }
    }
  });
});
/* eslint-disable no-alert */
define('frontend-cp/session/agent/cases/index/suspended-messages/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  var limit = _frontendCpConfigEnvironment['default'].casesPageSize;

  exports['default'] = _ember['default'].Route.extend({
    queryParams: {
      page: { refreshModel: true }
    },

    model: function model(_ref) {
      var page = _ref.page;

      var offset = (parseInt(page, 10) - 1) * limit;
      return this.store.query('mail', { is_suspended: true, offset: offset, limit: limit });
    },

    setupController: function setupController(controller, mails) {
      this._super.apply(this, arguments);
      this.send('updatePagination', this.paramsFor(this.routeName), mails.get('meta'));
    },

    // Actions
    actions: {
      showMail: function showMail(mail) {
        this.transitionTo('session.agent.cases.index.suspended-messages.show', mail);
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/index/suspended-messages/show/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model(_ref) {
      var id = _ref.id;

      return this.modelFor('session.agent.cases.index.suspended-messages').findBy('id', id);
    },

    renderTemplate: function renderTemplate() {
      this.render({ outlet: 'modals', into: 'application' });
    },

    actions: {
      permanentlyDelete: function permanentlyDelete() {
        var _this = this;

        this.modelFor(this.routeName).destroyRecord().then(function () {
          return _this.transitionTo('session.agent.cases.index.suspended-messages');
        });
      },

      allowThrough: function allowThrough() {
        var _this2 = this;

        var mail = this.modelFor(this.routeName);
        mail.set('isSuspended', false);
        mail.save().then(function () {
          return _this2.transitionTo('session.agent.cases.index.suspended-messages');
        });
      }
    }
  });
});
define("frontend-cp/session/agent/cases/index/suspended-messages/show/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 12
              },
              "end": {
                "line": 33,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.text", ["loc", [null, [32, 14], [32, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 14
                },
                "end": {
                  "line": 36,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "model.source", ["loc", [null, [35, 16], [35, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 14
                },
                "end": {
                  "line": 38,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "model.html", ["loc", [null, [37, 16], [37, 30]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 12
              },
              "end": {
                "line": 39,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.source", ["loc", [null, [34, 20], [34, 32]]]]], [], 0, 1, ["loc", [null, [34, 14], [38, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 4
              },
              "end": {
                "line": 50,
                "column": 108
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["cases.suspendedMessage.actions.cancel"], [], ["loc", [null, [50, 63], [50, 108]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "suspended-message-modal__header-text");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__main");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "class", "suspended-message-modal__table");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "suspended-message-modal__text");
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__footer suspended-message-modal__footer");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "button button--alert suspended-message-modal__button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "button button--primary suspended-message-modal__button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var element3 = dom.childAt(element0, [5]);
          var element4 = dom.childAt(element0, [7]);
          var element5 = dom.childAt(element0, [9]);
          var element6 = dom.childAt(element0, [11]);
          var element7 = dom.childAt(fragment, [5]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element7, [5]);
          var morphs = new Array(18);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 0]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 0]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [1, 0]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element4, [1, 0]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
          morphs[9] = dom.createMorphAt(dom.childAt(element5, [1, 0]), 0, 0);
          morphs[10] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          morphs[11] = dom.createMorphAt(dom.childAt(element6, [1, 0]), 0, 0);
          morphs[12] = dom.createMorphAt(dom.childAt(element6, [3, 1]), 1, 1);
          morphs[13] = dom.createMorphAt(element7, 1, 1);
          morphs[14] = dom.createElementMorph(element8);
          morphs[15] = dom.createMorphAt(element8, 0, 0);
          morphs[16] = dom.createElementMorph(element9);
          morphs[17] = dom.createMorphAt(element9, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessage.title"], [], ["loc", [null, [3, 54], [3, 90]]]], ["inline", "t", ["cases.suspendedMessage.table.from"], [], ["loc", [null, [8, 20], [8, 61]]]], ["content", "model.from", ["loc", [null, [9, 12], [9, 26]]]], ["inline", "t", ["cases.suspendedMessage.table.subject"], [], ["loc", [null, [12, 20], [12, 64]]]], ["content", "model.subject", ["loc", [null, [13, 12], [13, 29]]]], ["inline", "t", ["cases.suspendedMessage.table.suspensionCode"], [], ["loc", [null, [16, 20], [16, 71]]]], ["content", "model.suspensionCode", ["loc", [null, [17, 12], [17, 36]]]], ["inline", "t", ["cases.suspendedMessage.table.createdAt"], [], ["loc", [null, [20, 20], [20, 66]]]], ["content", "model.createdAt", ["loc", [null, [21, 12], [21, 31]]]], ["inline", "t", ["cases.suspendedMessage.table.to"], [], ["loc", [null, [24, 20], [24, 59]]]], ["content", "model.to", ["loc", [null, [25, 12], [25, 24]]]], ["inline", "t", ["cases.suspendedMessage.table.text"], [], ["loc", [null, [28, 20], [28, 61]]]], ["block", "if", [["get", "model.text", ["loc", [null, [31, 18], [31, 28]]]]], [], 0, 1, ["loc", [null, [31, 12], [39, 19]]]], ["block", "link-to", ["session.agent.cases.index.suspended-messages"], [], 2, null, ["loc", [null, [50, 4], [50, 120]]]], ["element", "action", ["permanentlyDelete"], [], ["loc", [null, [51, 73], [51, 103]]]], ["inline", "t", ["cases.suspendedMessage.actions.permanentlyDelete"], [], ["loc", [null, [51, 104], [51, 160]]]], ["element", "action", ["allowThrough"], [], ["loc", [null, [52, 75], [52, 100]]]], ["inline", "t", ["cases.suspendedMessage.actions.allowThrough"], [], ["loc", [null, [52, 101], [52, 152]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 13
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-modal", [], ["class", "suspended-message-modal"], 0, null, ["loc", [null, [1, 0], [54, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/session/agent/cases/index/suspended-messages/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "button button--alert suspended-messages-section__delete-all");
          var el2 = dom.createTextNode("Permanently delete");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["permanentlyDeleteSelectedMails"], [], ["loc", [null, [9, 84], [9, 127]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.from"], [], ["loc", [null, [17, 8], [17, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.subject"], [], ["loc", [null, [20, 8], [20, 53]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 6
                },
                "end": {
                  "line": 24,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.createdAt"], [], ["loc", [null, [23, 8], [23, 55]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.suspensionCode"], [], ["loc", [null, [26, 8], [26, 60]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-table/column", [], ["class", "ko-cases-list__table-column", "column", "from"], 0, null, ["loc", [null, [16, 6], [18, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column", "column", "subject"], 1, null, ["loc", [null, [19, 6], [21, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column", "column", "createdAt"], 2, null, ["loc", [null, [22, 6], [24, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column", "column", "suspensionCode"], 3, null, ["loc", [null, [25, 6], [27, 26]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 34,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "mail.from", ["loc", [null, [33, 12], [33, 25]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "mail.subject", ["loc", [null, [36, 12], [36, 28]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 10
                    },
                    "end": {
                      "line": 40,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "moment-from-now", [["get", "mail.createdAt", ["loc", [null, [39, 30], [39, 44]]]]], [], ["loc", [null, [39, 12], [39, 46]]]]],
                locals: [],
                templates: []
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 43,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "mail.suspensionCode", ["loc", [null, [42, 12], [42, 35]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 8
                  },
                  "end": {
                    "line": 44,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-table/cell", [], ["class", "suspended-messages-section__cell"], 0, null, ["loc", [null, [32, 10], [34, 28]]]], ["block", "ko-table/cell", [], ["class", "suspended-messages-section__cell"], 1, null, ["loc", [null, [35, 10], [37, 28]]]], ["block", "ko-table/cell", [], ["class", "suspended-messages-section__cell"], 2, null, ["loc", [null, [38, 10], [40, 28]]]], ["block", "ko-table/cell", [], ["class", "suspended-messages-section__cell"], 3, null, ["loc", [null, [41, 10], [43, 28]]]]],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/row", [], ["table", ["subexpr", "@mut", [["get", "table", ["loc", [null, [31, 30], [31, 35]]]]], [], []], "clickable", true, "rowContext", ["subexpr", "@mut", [["get", "mail", ["loc", [null, [31, 62], [31, 66]]]]], [], []], "onClick", ["subexpr", "action", ["showMail", ["get", "mail", ["loc", [null, [31, 94], [31, 98]]]]], [], ["loc", [null, [31, 75], [31, 99]]]], "onSelectChange", ["subexpr", "action", [["get", "table.actions.rowSelectionChanged", ["loc", [null, [31, 123], [31, 156]]]]], [], ["loc", [null, [31, 115], [31, 157]]]]], 0, null, ["loc", [null, [31, 8], [44, 25]]]]],
            locals: ["mail"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 46,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "suspendedMails", ["loc", [null, [30, 14], [30, 28]]]]], [], 0, null, ["loc", [null, [30, 6], [45, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/header", [], [], 0, null, ["loc", [null, [15, 4], [28, 24]]]], ["block", "ko-table/body", [], [], 1, null, ["loc", [null, [29, 4], [46, 22]]]]],
        locals: ["table"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mt");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessages.emptyList"], [], ["loc", [null, [51, 6], [51, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "suspended-messages-section u-mh");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout u-mv");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "heading");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "i-chevron-large-down i-color-grey--dark");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        morphs[4] = dom.createMorphAt(element1, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["cases.suspendedMessages.title"], [], ["loc", [null, [5, 8], [5, 45]]]], ["block", "if", [["get", "selectedMails.length", ["loc", [null, [8, 12], [8, 32]]]]], [], 0, null, ["loc", [null, [8, 6], [10, 13]]]], ["block", "ko-table", [], ["selectable", true, "onSelectionChange", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedMails", ["loc", [null, [14, 61], [14, 74]]]]], [], ["loc", [null, [14, 56], [14, 75]]]]], [], ["loc", [null, [14, 48], [14, 76]]]], "class", "suspended-messages-section__table"], 1, null, ["loc", [null, [14, 2], [47, 15]]]], ["block", "unless", [["get", "model.length", ["loc", [null, [49, 12], [49, 24]]]]], [], 2, null, ["loc", [null, [49, 2], [53, 13]]]], ["content", "outlet", ["loc", [null, [55, 2], [55, 12]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/session/agent/cases/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 6
              },
              "end": {
                "line": 10,
                "column": 45
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", [["subexpr", "query-params", [], ["page", ["get", "number", ["loc", [null, [10, 36], [10, 42]]]]], ["loc", [null, [10, 17], [10, 43]]]]], [], 0, null, ["loc", [null, [10, 6], [10, 57]]]]],
        locals: ["number"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-session-agent-cases-index");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-agent-cases-index__sidebar");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-agent-cases-index__content content__main content__main--has-sidebar");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-agent-cases-index__pagination");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "ko-sidebar", [], ["inboxView", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [3, 27], [3, 36]]]]], [], []], "customViews", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 49], [3, 54]]]]], [], []]], ["loc", [null, [3, 4], [3, 56]]]], ["content", "outlet", ["loc", [null, [6, 4], [6, 14]]]], ["block", "ko-pagination", [], ["currentPage", ["subexpr", "@mut", [["get", "childRoutePage", ["loc", [null, [9, 33], [9, 47]]]]], [], []], "loadingPage", ["subexpr", "@mut", [["get", "childRouteLoadingPage", ["loc", [null, [9, 60], [9, 81]]]]], [], []], "pageCount", ["subexpr", "@mut", [["get", "childRouteTotalPages", ["loc", [null, [9, 92], [9, 112]]]]], [], []]], 0, null, ["loc", [null, [9, 4], [11, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/cases/index/view/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['page', 'view', 'orderBy', 'orderByColumn'],
    page: 1,
    metrics: _ember['default'].inject.service(),

    // Actions
    actions: {
      transitionToCase: function transitionToCase(caseContext) {
        this.transitionToRoute('session.agent.cases.case', caseContext);
      },

      sortCaseList: function sortCaseList(column, order) {
        this.get('metrics').trackEvent({
          event: 'Case View Sorted',
          category: 'Case Views',
          action: 'click',
          label: (column && column.get('name')) + '-' + order
        });

        this.setProperties({
          orderBy: order,
          orderByColumn: column && column.get('name')
        });
      }
    }
  });
});
define('frontend-cp/session/agent/cases/index/view/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var run = _ember['default'].run;

  var casesPollingInterval = _frontendCpConfigEnvironment['default'].APP.views.casesPollingInterval * 1000;
  var isCasesPollingEnabled = _frontendCpConfigEnvironment['default'].APP.views.isPollingEnabled;
  var limit = _frontendCpConfigEnvironment['default'].casesPageSize;

  exports['default'] = _ember['default'].Route.extend({
    tabStore: _ember['default'].inject.service(),

    queryParams: {
      page: { refreshModel: true },
      view: { refreshModel: true },
      orderByColumn: { refreshModel: true },
      orderBy: { refreshModel: true }
    },

    model: function model(_ref) {
      var view_id = _ref.view_id;

      var model = this.modelFor('session.agent.cases.index').views.findBy('id', view_id);
      if (!model) {
        this.transitionTo('session.agent.cases.index');
      }
      return model;
    },

    activate: function activate() {
      this._super.apply(this, arguments);
      if (isCasesPollingEnabled) {
        this.pollViewTimer = run.later(this, this._pollView, casesPollingInterval);
      }
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      if (this.pollViewTimer) {
        run.cancel(this.pollViewTimer);
      }
    },

    _pollView: function _pollView() {
      var _this = this;

      var _paramsFor = this.paramsFor(this.routeName);

      var view_id = _paramsFor.view_id;

      var view = this.modelFor('session.agent.cases.index').views.findBy('id', view_id);
      this._refreshCases(view).then(function (cases) {
        _this.controller.set('model', cases);
        _this.send('updatePagination', _this.paramsFor(_this.routeName), cases.get('meta'));
        _this.pollViewTimer = run.later(_this, _this._pollView, casesPollingInterval);
      });
    },

    afterModel: function afterModel(view) {
      var _this2 = this;

      if (view) {
        this.get('tabStore').setCasesViewId(view.get('id'));
      }
      return this._refreshCases(view).then(function (cases) {
        view.set('casesQuery', cases);
      }, function (error) {
        if (error.errors && error.errors.findBy('code', 'PERMISSIONS_DENIED')) {
          _this2.transitionTo('session.agent.cases.index');
        } else {
          console.error(error); // eslint-disable-line
        }
      });
    },

    _refreshCases: function _refreshCases(view) {
      var _paramsFor2 = this.paramsFor(this.routeName);

      var orderBy = _paramsFor2.orderBy;
      var orderByColumn = _paramsFor2.orderByColumn;
      var _paramsFor2$page = _paramsFor2.page;
      var page = _paramsFor2$page === undefined ? 1 : _paramsFor2$page;

      return this.store.query('case', {
        limit: limit,
        parent: view,
        offset: (parseInt(page, 10) - 1) * limit,
        order_by: orderBy,
        order_by_column: orderByColumn
      });
    },

    setupController: function setupController(controller, view) {
      var cases = view.get('casesQuery');
      this._super(controller, cases);
      controller.set('activeView', view);
      this.send('updatePagination', this.paramsFor(this.routeName), cases.get('meta'));
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/session/agent/cases/index/view/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/view/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-cases-list", [], ["cases", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "onCaseListSort", "sortCaseList", "onClick", ["subexpr", "action", ["transitionToCase"], [], ["loc", [null, [4, 10], [4, 37]]]], "columns", ["subexpr", "@mut", [["get", "activeView.columns", ["loc", [null, [5, 10], [5, 28]]]]], [], []], "title", ["subexpr", "@mut", [["get", "activeView.title", ["loc", [null, [6, 8], [6, 24]]]]], [], []], "orderBy", ["subexpr", "@mut", [["get", "orderBy", ["loc", [null, [7, 10], [7, 17]]]]], [], []], "orderByColumn", ["subexpr", "@mut", [["get", "orderByColumn", ["loc", [null, [8, 16], [8, 29]]]]], [], []]], ["loc", [null, [1, 0], [8, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/session/agent/cases/index/view-loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/view-loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/view-loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/session/agent/cases/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/cases/new/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    intl: inject.service(),
    queryParams: ['requester_id'],

    breadcrumbs: computed('model.case.creator.organization.id', 'model.creator.id', function () {
      var hasOrganisation = this.get('model.case.requester.organization.id');
      var hasUser = this.get('model.case.requester.id');

      var caseCrumb = {
        id: 'case',
        label: this.get('intl').findTranslationByKey('cases.new_case'),
        routeName: 'session.agent.cases.new.index',
        dynamicSegments: [],
        queryParams: null
      };

      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.case.requester.organization.name'),
          routeName: 'session.agent.cases.new.organisation',
          dynamicSegments: [],
          queryParams: null
        });
      }

      if (hasUser) {
        crumbs.push({
          id: 'user',
          label: this.get('model.case.requester.fullName'),
          routeName: 'session.agent.cases.new.user',
          dynamicSegments: [],
          queryParams: null
        });
      }

      crumbs.push(caseCrumb);

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/cases/new/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    actions: {
      transitionToNewlyCreatedCase: function transitionToNewlyCreatedCase() {
        var _target;

        (_target = this.target).send.apply(_target, ['transitionToNewlyCreatedCase'].concat(_slice.call(arguments)));
      },

      updateTabName: function updateTabName() {
        var _target2;

        (_target2 = this.target).send.apply(_target2, ['updateTabName'].concat(_slice.call(arguments)));
      },

      updateTabState: function updateTabState(state) {
        this.target.send('updateNonPersistedTabState', { index: state });
        this.set('tabState', state);
      }
    }
  });
});
define('frontend-cp/session/agent/cases/new/index/route', ['exports', 'ember'], function (exports, _ember) {
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports['default'] = _ember['default'].Route.extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      var parentModel = this.modelFor('session.agent.cases.new');

      return _ember['default'].RSVP.hash(_extends({
        priorities: this.get('storeCache').findAll('case-priority'),
        statuses: this.get('storeCache').findAll('case-status'),
        types: this.get('storeCache').findAll('case-type')
      }, parentModel));
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model['case']);
      var parentController = this.controllerFor('session.agent.cases.new');
      controller.set('tabId', parentController.get('tab.basePath'));
      controller.setProperties(model);
    }
  });
});
define("frontend-cp/session/agent/cases/new/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-case-content", [], ["case", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 7], [2, 12]]]]], [], []], "postId", ["subexpr", "@mut", [["get", "postId", ["loc", [null, [3, 9], [3, 15]]]]], [], []], "sortOrder", ["subexpr", "@mut", [["get", "sortOrder", ["loc", [null, [4, 12], [4, 21]]]]], [], []], "onCaseCreate", ["subexpr", "action", ["transitionToNewlyCreatedCase"], [], ["loc", [null, [5, 15], [5, 54]]]], "onStateUpdate", ["subexpr", "action", ["updateTabState"], [], ["loc", [null, [6, 16], [6, 41]]]], "onTabNameUpdate", ["subexpr", "action", ["updateTabName"], [], ["loc", [null, [7, 18], [7, 42]]]], "filter", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [8, 9], [8, 15]]]]], [], []], "caseFields", ["subexpr", "@mut", [["get", "caseFields", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [10, 13], [10, 23]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [11, 11], [11, 19]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [12, 8], [12, 13]]]]], [], []], "tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [13, 8], [13, 13]]]]], [], []]], ["loc", [null, [1, 0], [14, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/organisation/route', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Route.extend({
    model: function model(params) {
      var requester = get(this.modelFor('session.agent.cases.new'), 'case.requester');
      return requester ? requester.get('organization') : {};
    }
  });
});
define("frontend-cp/session/agent/cases/new/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  var RSVP = _ember['default'].RSVP;
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(_ref) {
      var _this = this;

      var requester_id = _ref.requester_id;
      var timestamp = _ref.timestamp;

      var requester = this.store.findRecord('user', requester_id);
      var statuses = this.get('storeCache').findAll('case-status');
      var channels = this.store.query('channel', { user_id: requester_id });
      var sourceChannel = channels.then(function (channelModels) {
        return channelModels.objectAt(0);
      });
      var form = this.store.findAll('case-form').then(function (caseForms) {
        return caseForms.find(function (caseForm) {
          return caseForm.get('isDefault') === true;
        });
      });
      var caseFields = this.get('storeCache').findAll('case-field'); // TODO: This only concerns to the component? Remove it from here?

      return RSVP.hash({ requester: requester, channels: channels, sourceChannel: sourceChannel, statuses: statuses, form: form }).then(function (_ref2) {
        var requester = _ref2.requester;
        var channels = _ref2.channels;
        var sourceChannel = _ref2.sourceChannel;
        var form = _ref2.form;
        var statuses = _ref2.statuses;

        var newCase = _this.store.peekAll('case').findBy('creationTimestamp', timestamp);

        if (newCase) {
          return {
            'case': newCase,
            caseFields: caseFields
          };
        } else {
          return RSVP.hash({
            'case': _this.store.createRecord('case', {
              requester: requester, channels: channels, sourceChannel: sourceChannel, form: form,
              status: _this.store.peekAll('case-status').find(function (model) {
                return model.get('statusType') === 'NEW';
              }),
              creationTimestamp: timestamp
            }), caseFields: caseFields
          });
        }
      });
    },

    afterModel: function afterModel(_, transition) {
      this.tab = this.get('tabStore').open(transition, 'New case');
    },

    actions: {
      transitionToNewlyCreatedCase: function transitionToNewlyCreatedCase(newCase) {
        var tabStore = this.get('tabStore');
        tabStore.leave(this.tab);
        tabStore.close(this.tab);
        this.transitionTo('session.agent.cases.case.index', newCase.get('id'));
      }
    }
  });
});
/* eslint-disable camelcase */
define("frontend-cp/session/agent/cases/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/user/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/new/user/route', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return get(this.modelFor('session.agent.cases.new'), 'case.requester');
    }
  });
});
define("frontend-cp/session/agent/cases/new/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 72
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/organisations/organisation/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    /**
     * Returns a breadcrumb containing the Organisation
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: _ember['default'].computed('model.organization.id', function () {
      return [{
        id: 'organisation',
        label: this.get('model.name'),
        routeName: 'session.agent.organisations.organisation',
        dynamicSegments: []
      }];
    })

  });
});
define('frontend-cp/session/agent/organisations/organisation/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    actions: {
      closeTab: function closeTab() {
        this.target.send('closeTab');
      }
    }
  });
});
define('frontend-cp/session/agent/organisations/organisation/index/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({});
});
define("frontend-cp/session/agent/organisations/organisation/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []], "canDelete", true, "closeTab", ["subexpr", "action", ["closeTab"], [], ["loc", [null, [1, 62], [1, 81]]]]], ["loc", [null, [1, 0], [1, 83]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/organisations/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(params) {
      this.get('storeCache').findAll('organization-field');
      return this.store.findRecord('organization', params.organisation_id);
    },

    afterModel: function afterModel(model, transition) {
      this.tab = this.get('tabStore').open(transition, model.get('name'));
    },

    actions: {
      willTransition: function willTransition() {
        var model = this.modelFor(this.routeName);
        if (model && model.get('isDeleted')) {
          this.get('tabStore').leave(this.tab);
          this.get('tabStore').close(this.tab);
        }
        this._super.apply(this, arguments);
      },

      closeTab: function closeTab() {
        this.get('tabStore').close(this.tab);
      }
    }
  });
});
define("frontend-cp/session/agent/organisations/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    active: false,

    macroFetcher: _ember['default'].inject.service('macro-fetcher'),

    activate: _ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: _ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    afterModel: function afterModel() {
      this.get('macroFetcher').fetchMacros();
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/session/agent/users/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    page: 1,
    limit: 5,
    offset: 0,

    queryParams: {
      page: {
        refreshModel: true
      }
    },

    model: function model(params) {
      if (params.page) {
        var page = params.page;
        this.set('page', isNaN(page) ? 1 : Math.floor(Math.abs(page)));
      }
      this.set('offset', (this.get('page') - 1) * this.get('limit'));

      return this.store.query('user', {
        offset: this.get('offset'),
        limit: this.get('limit')
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('users', model);
      controller.setProperties({
        page: this.get('page'),
        totalPages: Math.ceil(model.get('meta.total') / this.get('limit'))
      });
    }
  });
});
define("frontend-cp/session/agent/users/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 7
              },
              "end": {
                "line": 5,
                "column": 68
              }
            },
            "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "user.fullName", ["loc", [null, [5, 51], [5, 68]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  	");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.users.user", ["get", "user", ["loc", [null, [5, 45], [5, 49]]]]], [], 0, null, ["loc", [null, [5, 7], [5, 80]]]]],
        locals: ["user"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  List of users\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "users", ["loc", [null, [4, 10], [4, 15]]]]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/users/user/controller', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Controller.extend({
    intl: service(),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: computed('model.organization.name', function () {
      var hasOrganisation = this.get('model.organization.name');
      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.organization.name'),
          routeName: 'session.agent.users.user.organisation',
          dynamicSegments: []
        });
      }

      crumbs.push({
        id: 'user',
        label: this.get('model.fullName'),
        routeName: 'session.agent.users.user.index',
        dynamicSegments: []
      });

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/users/user/index/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/users/user/index/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({});
});
define("frontend-cp/session/agent/users/user/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/users/user/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      this.get('storeCache').findAll('organization-field');
      var parentModel = this.modelFor('session.agent.users.user');
      return parentModel ? parentModel.get('organization') : {};
    }
  });
});
define("frontend-cp/session/agent/users/user/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/users/user/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(params) {
      this.get('storeCache').findAll('user-field');
      return this.store.findRecord('user', params.user_id);
    },

    afterModel: function afterModel(model, transition) {
      this.set('tab', this.get('tabStore').open(transition, model.get('fullName')));
    }
  });
});
define("frontend-cp/session/agent/users/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    urlService: _ember['default'].inject.service('url'),
    tabStore: _ember['default'].inject.service(),
    searchResults: null,
    isSearching: false,
    hideSessionWidgets: false,

    /**
     * Add an event listener which will be automatically removed once this controller is destroyed
     * @param {Evented} subject Event emitter
     * @param {string} event Event name to listen to
     * @param {function} handler Listener handler function
     */
    addDisposableListener: function addDisposableListener(subject, event, handler) {
      // Add the listener
      subject.on(event, handler);
      this.get('disposableListeners').push({ subject: subject, event: event, handler: handler });
    },

    /**
     * Array of listeners which will be automatically removed once this controller is destroyed
     * @type {Object[]}
     */
    disposableListeners: null,

    /**
     * Initialise the array of disposable listeners
     */
    initDisposableListeners: _ember['default'].on('init', function () {
      this.set('disposableListeners', []);
    }),

    /**
     * Remove the disposable listeners once the controller is destroyed
     */
    willDestroy: function willDestroy() {
      this._super();
      this.get('disposableListeners').forEach(function (listener) {
        var subject = listener.subject;
        var event = listener.event;
        var handler = listener.handler;

        subject.off(event, handler);
      });
    },

    actions: {
      searchingChanged: function searchingChanged(isSearching) {
        this.set('hideSessionWidgets', isSearching);
      },

      loadSearchRoute: function loadSearchRoute(baseURL, targetObjectId) {
        /* this has to be built as a URL - we have a searchResult object, not a user/case object */
        this.transitionToRoute(baseURL + targetObjectId);
      },

      close: function close(tab, e) {
        e.stopPropagation();
        e.preventDefault();
        this.get('tabStore').close(tab);
      }
    }
  });
});
define('frontend-cp/session/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel(transition) {
      this.transitionTo('session.agent');
    }
  });
});
define("frontend-cp/session/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),
    analyticsService: _ember['default'].inject.service('analytics'),

    beforeModel: function beforeModel(transition) {
      var _this = this;

      return _ember['default'].RSVP.all([this.get('sessionService').getSession()]).then(function () {
        _this.get('analyticsService').setup();
      }, function () {
        transition.abort();
      });
    },

    actions: {
      willTransition: function willTransition() {
        this.controller.set('searchResults', null);
        this.controller.set('searchQuery', null);
      },

      transitionToRoute: function transitionToRoute() {
        this.transitionTo.apply(this, arguments);
      }
    }
  });
});
/**
 * SessionRoute
 *
 * This route is resposible for checking the session exists for all its
 * child routes. Since a parent route loads before all its children, no
 * child route will load if the session id is not available.
 *
 * Note that the application route is not a child of this one so the
 * application route needs to check for the session independently.
 *
 * This route also loads all data shared by all its children
 */
define('frontend-cp/session/styleguide/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    actions: {
      didRender: function didRender() {
        this.send('restoreScroll');
      }
    }
  });
});
define("frontend-cp/session/styleguide/template",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){return {meta:{"revision":"Ember@1.13.13","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":1484,"column":0}},"moduleName":"frontend-cp/session/styleguide/template.hbs"},arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","styleguide container");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-header");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","flag flag--auto");dom.setAttribute(el3,"style","margin: auto;");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","flag__img");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","styleguide-header__img");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","flag__body");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h1");dom.setAttribute(el5,"class","styleguide-header__title");var el6=dom.createTextNode("Kayako 5.0 Styleguide");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Introduction");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");var el4=dom.createTextNode("\n      The CSS approach revolves around three core principles: simplicity, consistency and predictability. In the fewest\n      lines possible we want to create an equilibrium between expressiveness and function.\n\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Inuit");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          We are using ");dom.appendChild(el5,el6);var el6=dom.createElement("a");dom.setAttribute(el6,"href","https://github.com/inuitcss");var el7=dom.createTextNode("InuitCSS");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(". Inuit is a micro-framework that we have used\n          to lay the foundation and structure of our CSS. Namely variable configuration. Your interaction with inuit\n          will be few and far between, it sits quietly in the posterior. The grid will be the thing you use the most\n          (and is documented further down). In the `package.json` you will find a list of all of the packages we use\n          under inuit-*. I will go over those of any significance. Everything else can be forgotten about and merely\n          used to take comfort in the fact there are forces at work, indifferent to you, that transcend you or your proclivity for solipsism.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("h4");dom.setAttribute(el6,"class","styleguide-item__subtitle");var el7=dom.createTextNode("Functions");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("p");var el7=dom.createTextNode("\n            Used rarely, but you may find helpful.\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar {\n  width: quarter(55.5px);\n  width: halve(55.5px);\n  width: double(55.5px);\n  width: quadruple(55.5px);\n  width: round(55.5px);\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("h4");dom.setAttribute(el6,"class","styleguide-item__subtitle");var el7=dom.createTextNode("Lists");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("p");var el7=dom.createTextNode("\n            Self explanatory, helper classes that make a list inline, or remove the default styling list. If you make something inline, it will also inherit bare.\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n./%list-inline\n./%list-bare\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("h4");dom.setAttribute(el6,"class","styleguide-item__subtitle");var el7=dom.createTextNode("Clearfix");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("p");var el7=dom.createTextNode("This should, almost never, ever, ever, ever, ever be used. But no self-respecting framework will come without one.");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n./%clearfix\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Grid");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          We are using the grid that is provided by Inuit. I have used it across several projects of varying sizes and\n          it has yet to falter. It is beautifully predictable, requires you to learn three classes, and in return you\n          are given a very powerful and simple layout system. It is also worth noting that we will using flexbox\n          limitedly. Absolutely not for layout. Things such as tags and tabs are the perfect use cases for flexbox, please use sparingly.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          It essentially boils down to three classes:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.layout\n.layout__item\n.u-1/3 // this has numerous variations, they're all fractions!\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          We are not building a responsive app, and thankfully, a lot of the designs are very friendly to layout,\n          there is little requirement for any extravagant layout solutions, so these three classes will happily carry us to launch.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          The most common thing we want to do is to have two containers side by side.\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          This example may introduce more questions than it answers.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n       ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n         This is the container class for all grids, and must be present. This is essential as the most basic way\n         of building a grid is to give all children a left spacing, then subtract one spacing from the parent to line\n         them up. Without this wrapper, everything breaks. It is also worth noting there are few different flavours that\n         can be tacked on via modifiers, namely `.layout--flush` which will strip all the spacing between the columns.\n       ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n       ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        A few things at play here, firstly the `layout__item` class is again, essential for the grid to work. This\n        is what applies the necessary inline-block and some nice tweaks. Secondly, `u-1/2` is an atomic class that only\n        applies a percentage width. You will almost never require anything outside of u-1/4, u-1/3, u-1/2. If you do,\n        for some reason, smaller fractions can be toggled in the settings file `settings/_layout`. For example, to have\n        a 66%/33% grid, you would need: `u-2/3` and `u-1/3`.\n       ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        Yes the HTML comments between layout__items are an eye soar, and yes they are necessary. This is unfortunate but\n        due to the way whitespace is handled with inline-blocks, if you do not close the space you can sometimes be left\n        with physical gaps between your elements, which can cause incorrect distances but more often than not, will cause your\n        columns totalling 100% to overflow and not fit on one line. This used to be fixable with CSS, but Chrome 38(?) introduced a change and killed that overnight. Thanks Google.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        Occasionally writing a HTML comment does not override the power and simplicity of this grid and is not even remotely close to a worthy reason to not use it.\n       ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Lastly, you may want to ditch the gutters altogether, in which case simply add\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\nlayout layout--flush\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("BEM");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/1");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Block, element, modifier. This is the approach we are taking with regards to naming conventions.\n\n          In conjunction with the aforementioned exception, there is one more: Ember's default active class is,\n          you guessed it: `.active`, for the sake of consistency and ease of use we will occasionally use this class.\n          Other than those, we are using to the T BEM within our stylesheets.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          All ELEMENTS must be their own unique selector (no nesting!). All MODIFIERS must be nested (how annoying!).\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          These are not strictly enforced, but encouraged that for the elements and modifiers you stick to some of our\n          naming standards for consistency, it will be quite rare for you to fall outside of these:\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\nclass___actions\nclass___action\nclass___item\nclass___content\nclass___label\nclass___title\n\nclass--is-selected\nclass--is-disabled\nclass--is-highlighted\nclass--has-actions\nclass--has-{action}\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n& {\n  width: 100%;\n}\n\n.ko-info-bar__item {\n  color: red;\n\n  &--is-active {\n    border: 1px solid $color-primary;\n  }\n}\n\n.ko-info-bar__action {\n  font-size: $font-size-small;\n}\n          ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Component CSS (&)");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("a");dom.setAttribute(el6,"href","https://github.com/ebryn/ember-component-css");var el7=dom.createTextNode("Component CSS — C(CSS)");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(" was introduced about one third\n          of the way through the first beta build, it went through a lot of trial and error, and growing pains, but we believe\n          as it stands to have been implemented in a desirable way. As it is so new, it is wide open to feedback. We're confident\n          in it, but we have not yet seen it survive in the wild yet.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          The power that C(CSS) brings is the encapsulation and scoping of styles. This is done automagically by Ember.\n          All that it requires is in your `ko-component/` folder you have an accompanying `styles.scss` file. All selectors\n          in that file will have a class name generated and prepended to it. This is done by taking the name of the component\n          and adding a unique hash to the end. As a result, whatever you write in this file simply cannot be interfered with\n          outside of that scope. We have found this to be quite powerful, you can work on a style sheet with confidence that your changes\n          here will have a near non-existent ripple effect across the rest of the styles.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          We must strive to put as much CSS as we can feasibly fit into our components, there are some exceptions that are covered\n          later, but they should be few and far between. CSS in the global scope should be the final resort.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Simply put, if you have a component called: `ko-info-bar`, you may write a file like so:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n& {\n  width: 100%;\n}\n\n  .ko-info-bar__item {\n    display: inline-block;\n  }\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          This will generate:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar--4ja84 { width: 100%; }\n.ko-info-bar--4ja84 .ko-info-bar__item { display: inline-block; }\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          As you can see, the selector has been scoped out by requiring a unique, generated hash to access. The first knee-jerk\n          (and mine!) reaction to this approach is almost always the impact on repetition. Firstly, it really is not as big an\n          issue as first thought. Secondly, we have come to find this isolated way of writing CSS to be in the long run,\n          a time save — not sink. At the peak of this project, there may well be a few hundred redundant lines,\n          but that is nothing in contrast to the developers being able to write freely within the styles.scss file without\n          having to give thought to the outside world, nor test the endless implementations of the class they are changing.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n           The ampersand (&) selector is very useful to us as it allows us to select the component's wrapping class, the class\n           that is applied with a generated hash, in this instance: `ko-info-bar--4ja84`.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n       ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          This power comes with some caveats.\n\n          In order to use modifiers, we must break (and this is ");dom.appendChild(el5,el6);var el6=dom.createElement("i");var el7=dom.createTextNode("only");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(" place this should happen) BEM.\n\n          Which can then be used like so:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n& {\n  width: 100%;\n\n    &.has-error {\n      border: 1px solid red;\n    }\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          What happens if you absolutely ");dom.appendChild(el5,el6);var el6=dom.createElement("i");var el7=dom.createTextNode("must");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(" style a component that is dependant on whether or not it is sitting in another component? In this instance you would use a contains selector:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n& {\n  width: 100%;\n\n    & [class*=\"ko-info-bar--\"] {\n      background: red;\n    }\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          This is explicitly reserved for this problem. You may require this due to the cascading nature of CSS and inability\n          to move up the chain. This may force you to have to move upward, to come back down. As in, styling a child component\n          from a parent component. This is discouraged and avoided at all costs, but it has proven to be unavoidable in some cases.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","styleguide-item__title");dom.setAttribute(el5,"id","headings");var el6=dom.createTextNode("Selectors");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Our rules on selectors are very simple: NEVER EVER FOR ANY REASON, LIKE, I HONESTLY COULDN'T CARE IF YOU\n          CAME WITH YOUR DIRTY CAP IN HAND BEGGING — NO — HTML — ELEMENT — SELECTORS.\n\n          Nothing you will ever say, do or cry about will ever change the fact we are not using HTML elements for selectors.\n\n          If you only require a quick small change and are trying to shortcut with an element selector, you Sir/Madam\n          are ripe for a utility class, else, it is time to write a class.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          \"Although I admire the passion it would be good to have a few reasons why they invoke such rage, help justify it\" - Stuart Quin, 12th October 2015\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Good question Stuart, the reasoning behind this is specificty in CSS is a huge problem and one that we are going to great lengths to\n          prevent, using HTML elements in selectors is the steroids of the specificty world, you will instantly be teleported into a world of\n          rapidly developing specifity with horrible side effects. A common theme of programming is to avoid coupling, calling CSS programming is a\n          borderline sin, but a lot of aspects carry over. Using HTML selectors causes a horrific dependance on HTML structure and type. We do not\n          want to be working with CSS that can break by someone changing a span to a div.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          What may be a quick fix, will potentially cause a lot of issues down the road.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.ko-info-bar ul > li > * > a { display: none; } //I dare you.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          It is also worth noting that the Team JavaScript should never be selecting off of classes that are not prefixed with `.js-`.\n          This is important as we want to seperate concerns between JavaScript functionality and styling, this lubricates\n          refactoring as Team CSS can freely edit styles without having to go ahead and fix tests, magic!\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","styleguide-item__title");dom.setAttribute(el5,"id","headings");var el6=dom.createTextNode("REM");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Our REM usage is equally as simple, other than font sizes, it is not to be used anywhere else, ever.\n          We even have an elegant mixin that'll hold for your hand through the entire thing.\n\n          This helpful little devil will also deal with line-height. How helpful indeed.\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n@include inuit-font-size(14px);\n@include inuit-font-size($font-size-small);\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","styleguide-item__title");dom.setAttribute(el5,"id","headings");var el6=dom.createTextNode("Comments");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Commenting is heavily encouraged, and outright necessary for certain pieces of work. Same premise as all\n          programming comments, please make them descriptive as to ");dom.appendChild(el5,el6);var el6=dom.createElement("i");var el7=dom.createTextNode("why");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(" you did something, not necessarily ");dom.appendChild(el5,el6);var el6=dom.createElement("i");var el7=dom.createTextNode("how");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(".\n          We can read properties and come to understand how things work, but may require your comments to understand the reasoning and what future changes to the file may invoke.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          We use SCSS `//` comments, this is so when compiled all comments are automatically disregarded and do not make\n          it to the public facing file. Inline comments in most cases are sufficient. In the rare scenario that you\n          need something greater, you have two options:\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Pseudo block comments.\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n//Lorem ipsum dolor sit amet, consetetur sadipscing elitr,\n//sed diam nonumy eirmod tempor invidunt ut labore et dolore\n//magna aliquyam erat.\n//At vero eos et accusam et justo duo dolores et ea rebum.\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          In most cases, this is sufficient, sometimes you require a greater level of control.\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n//This is the description of what we have done\n//[1] - This is a detailed account of why we did this\n//[2] - Why we did this, why you shouldn't change this\n//[3] - Why this property may have knock on effects.\n.ko-info-bar__item {\n  width: 100%;      // [1]\n  color: red;       // [2]\n  margin-left: 9px; // [3]\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","styleguide-item__title");dom.setAttribute(el5,"id","headings");var el6=dom.createTextNode("Silent classes (%) / Extending");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Continuing the super simple approach: Never, ever extend a class (.xyz). For a decent run down go ");dom.appendChild(el5,el6);var el6=dom.createElement("a");dom.setAttribute(el6,"href","http://www.smashingmagazine.com/2015/05/extending-in-sass-without-mess/");var el7=dom.createTextNode("here");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(".\n\n          The gist is: we only ever extend placeholder classes / silent classes (%class-name), and this itself should be\n          used selectively, currently the only implementations of this are for re-using similar base styling across modules and\n          occasionally extending things like `@extend %t-caption`, so, you guessed it, we look like a caption! This\n          is useful when the thing you're styling requires several properties, and exceeds the boundary of using a utility class, thus extending\n          the utility class within the styling class is appropriate. As a side benefit, it allows us to have a single source of\n          truth. If our caption styles change, we only have to look in one place.\n\n");dom.appendChild(el5,el6);var el6=dom.createElement("p");dom.setAttribute(el6,"class","t-good u-mt");var el7=dom.createTextNode("Good!");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar {\n  @extend %base-bar-styles;\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n");dom.appendChild(el5,el6);var el6=dom.createElement("p");dom.setAttribute(el6,"class","t-bad");var el7=dom.createTextNode("Naughty!");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar {\n  @extend .base-bar-styles;\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("z-index");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          z-index is notoriously a frustrating part of dealing with CSS, so we have\n          implemented some helper functions and standards to help mitigate this.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          For the sake of typing, simplicity and the current scope not warranting it, we\n          never exceed a z-index of 100. Major increments will be made in 10, medium by 5, minor by 1.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Major increments are to differentiate between modules and regions, medium is to\n          distinguish between similar modules that require a tight hierarchy,\n          and lastly, the minor are there to solve very focused edge cases and issues.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          All of these will be declared within the app/styles/settings/_z-index.scss and should never be done\n          elsewhere. Aiming for the unicorn that is the single source of truth. Please be sparing when making\n          new additions, a new module does not necessarily warrant a new entry. There are generic\n          ones that we should reuse as much as possible (dropdown, raised, alert — etc).\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Using the function should be familiar to all of you, it works a lot like translations. You can declare\n          a standalone z-index, or nest them under a namespace.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          For a standalone z-index you would do:\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.alert {\n  z-index: $z-alert;\n}\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          For a nested z-index you would do:\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.alert {\n  z-index: $z-modal-editor;\n}\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n$z-layers: (\n  'overlay': 100,\n  'alert': 80,\n  'notification': 70,\n  'tooltip': 60,\n  'search': (\n    'input': 70,\n    'results': 70\n  ),\n  'menu': (\n    'action': 50\n  ),\n  'modal': (\n    'default': 50,\n    'editor': 51,\n    'example-higher': 52\n  ),\n  'pagination': 40,\n  'dropdown': 30,\n  'raised': 20,\n  'default': 10,\n  'hidden': -1\n);\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");dom.setAttribute(el3,"id","headings");var el4=dom.createTextNode("Headings");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h1");var el4=dom.createTextNode("Heading 1");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");var el4=dom.createTextNode("Heading 2");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");var el4=dom.createTextNode("Heading 3");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h4");var el4=dom.createTextNode("Heading 3");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h5");var el4=dom.createTextNode("Heading 5");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h6");var el4=dom.createTextNode("Heading 6");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","heading");var el6=dom.createTextNode("\n          I am a heading\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h6");dom.setAttribute(el5,"class","subheading");var el6=dom.createTextNode("\n          I am a subheading\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h2");dom.setAttribute(el5,"class","heading heading--capitalized");var el6=dom.createTextNode("\n          I am a capitalized heading\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Arrow");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","styleguide-item__content");var el4=dom.createTextNode("\n      It is worth noting, that for the sake of cross browser support and more importantly,\n      allowing JavaScript to position the arrow dynamically, the arrow cannot be implemented via\n      ::before/::after, so to use the arrow, the parent's immediate child must be the div\n      containing the arrow classes you wish to use.\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","box u-pos-rel");var el6=dom.createTextNode("\n          I have an arrow at the top! :)\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("div");dom.setAttribute(el6,"class","arrow arrow--top arrow--no-title");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","box u-pos-rel");var el6=dom.createTextNode("\n          I have an arrow at the bottom! :(\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("div");dom.setAttribute(el6,"class","arrow arrow--bottom");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Box");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","box");var el6=dom.createTextNode("\n          I am a standard box!\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","box box--secondary");var el6=dom.createTextNode("\n        I am a box with secondary styling!\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n  ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","box-container");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","box");var el5=dom.createTextNode("I am a box with a container");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","box box--wide");var el5=dom.createTextNode("\n        I am a wide box with a container ;)\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","box");var el5=dom.createTextNode("I am a box container");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("code");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Flag");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","flag");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","flag__img");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("img");dom.setAttribute(el5,"width","48");dom.setAttribute(el5,"height","48");dom.setAttribute(el5,"src","http://i.imgur.com/C9QgICy.jpg");dom.setAttribute(el5,"alt","");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","flag__body");var el5=dom.createTextNode("\n        I am the flag body!\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("code");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","styleguide-item__content");var el4=dom.createTextNode("\n      There are also some additional modifiers you can use with the flag to change spacing and alignment.\n\n      For even more, check the settings file to enable/disable.\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("code");var el4=dom.createTextNode("\n.flag--small\n.flag--large\n.flag--flush\n\n.flag--top\n.flag--bottom\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Animations");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","a-error u-p");var el6=dom.createTextNode("\n          I am an error! :(\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","a-success u-p");var el6=dom.createTextNode("\n          I am success :D\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","a-fade-in-out u-p");var el6=dom.createTextNode("\n          I fade out, then in. ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("Variables");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h3");dom.setAttribute(el5,"class","styleguide-item__subtitle");var el6=dom.createTextNode("Brand");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n$brand-rounding | border-radius // 2px\n\n$brand-border\n\n$brand-box-shadow\n$brand-box-shadow--dark\n\n%brand-focus\n\n$brand-avatar-size // 30px\n$brand-avatar-size--large //48px\n$brand-avatar-size--small //24px\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n     ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("h3");dom.setAttribute(el5,"class","styleguide-item__subtitle");var el6=dom.createTextNode("Colors");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n$color-primary //turquoise\n$color-primary-trim //dark turquoise\n$color-secondary //light grey\n$color-tertiary //dark grey\n$color-trim //dark grey (compliments secondary)\n$color-trim--dark\n\n$color-active\n\n$color-text-primary //black\n$color-text-secondary //grey\n$color-text-secondary--dark //dark grey\n\n\n$color-good //green\n$color-bad //red\n$color-warning //orange\n$color-open //grey\n\n\n$color-twitter\n$color-facebook\n\n$color-note-background //light orange\n$color-note-border //dark orange\n          ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n     ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("h3");dom.setAttribute(el5,"class","styleguide-item__subtitle");var el6=dom.createTextNode("Defaults");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n          ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n$large-spacing-unit // 36px\n$base-spacing-unit // 18px\n$mid-spacing-unit // 13.5px\n$half-spacing-unit // 9px\n$quarter-spacing-unit // 4.5px\n\n$base-font-size // 14px\n$base-line-height // 18px\n$base-text-color // black\n$base-background-color //offset white\n$base-font-family //Source Sans Pro, Sans-Serif\n          ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("\n      Utilities\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","styleguide-item__subtitle");var el4=dom.createTextNode("\n      Layout\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Display");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.u-inline-block\n.u-hidden\n.u-invisible\n.u-disable-link\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Positioning");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.u-pos-rel\n.u-pos-abs\n%u-v-center, .u-v-center\n%u-h-center, .u-h-center\n%u-center, .u-center\n%absolute-fill\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Alignment");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.u-v-align\n.u-v-align-top\n.u-reset-lh\n.u-inherit-lh\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Overflow");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n.u-overflow-scroll\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__subtitle");var el4=dom.createTextNode("Typography");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h4");var el4=dom.createTextNode("States");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-good");var el6=dom.createTextNode("I am a good message! :)");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-bad");var el6=dom.createTextNode("I am a bad message! >:)");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-warning");var el6=dom.createTextNode("I am a warning message! :(");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-open");var el6=dom.createTextNode("I am an open message! :(");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h4");var el4=dom.createTextNode("Position");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","t-center");var el4=dom.createTextNode("I am center aligned");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","t-left");var el4=dom.createTextNode("I am left aligned");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("p");dom.setAttribute(el3,"class","t-right");var el4=dom.createTextNode("I am right aligned");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("code");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h4");var el4=dom.createTextNode("Style");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-caption");var el6=dom.createTextNode("I am a caption!");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-small");var el6=dom.createTextNode("I am small!");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-bold");var el6=dom.createTextNode("I am bold!");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","t-italic");var el6=dom.createTextNode("I am italic!");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("code");var el6=dom.createTextNode("\n");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-item");var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h2");dom.setAttribute(el3,"class","styleguide-item__title");var el4=dom.createTextNode("\n      Icons\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          For the font icons we are using ");dom.appendChild(el5,el6);var el6=dom.createElement("a");dom.setAttribute(el6,"href","http://icomoon.io");var el7=dom.createTextNode("Icomoon");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode(", these are dealt with and uploaded by\n          Jesse Bennett-Chamberlaine (Designer). For missing, or incorrect icons please contact him. In the same vein, the PNG\n          icons are also supplied by Jesse. When we are ready for live, these will have been optimised into a PNG sprite, using a process yet to be decided.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Everything that you require can be found in `styles/partials/_icon.scss`. Here you will find helper mixins and classes.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h3");dom.setAttribute(el5,"class","styleguide-item__subtitle");var el6=dom.createTextNode("Mixins");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Given the HTML structure of:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          You would write:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar {\n\n  @include child-icon {\n    color: red;\n  }\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n          Given the HTML structure of:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n");dom.appendChild(el6,el7);var el7=dom.createComment("");dom.appendChild(el6,el7);var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n          You would write:\n\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.ko-info-bar {\n\n  @include icon {\n    color: red;\n  }\n}\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/2");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h3");dom.setAttribute(el5,"class","styleguide-item__subtitle");var el6=dom.createTextNode("Utilities");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Global");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n[class^=\"i-\"], [class*=\" i-\"] {\n  &:before {\n    vertical-align: middle;\n  }\n}\n        ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n\n        This is applied to all `.i-` classes, as almost always you will want it to be vertically aligned to the middle.\n        This is also the select that is used by icomoon to apply all their necessary font-family and optimisations.\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");var el6=dom.createTextNode("Positioning");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n        The most infrequently used classes in my experience.\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("code");var el7=dom.createTextNode("\n.i-after {\n  @include icon {\n    @extend %u-v-center;\n    right: $half-spacing-unit;\n  }\n}\n\n.i-center {\n  @include icon {\n    @extend %u-center;\n  }\n}\n\n.i-inherit-lh {\n  line-height: inherit !important;  //override 3rd party css\n}\n        ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("h4");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("p");dom.setAttribute(el5,"class","styleguide-item__content");var el6=dom.createTextNode("\n\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n   ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","styleguide-item__subtitle");var el4=dom.createTextNode("\n      Font Icons\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout i-size-16");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-event-twitter");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-event-twitter");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-happy-outline");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-happy-outline");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-sad-outline");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-sad-outline");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-dragstrip");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-dragstrip");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-add-circle");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-add-circle");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-minus-circle");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-minus-circle");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-caution-solid");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-caution-solid");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-phone-accept");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-phone-accept");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-phone-decline");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-phone-decline");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-happy");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-happy");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-sad");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-sad");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-bell");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-bell");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-plus");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-plus");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-cross");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-cross");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-home");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-home");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-inbox");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-inbox");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-person");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-person");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-insights");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-insights");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-help");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-help");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-search");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-search");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-minus");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-minus");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-triangle");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-triangle");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-plus-square");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-plus-square");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-minus-square");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-minus-square");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-inbox-sm");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-inbox-sm");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-email");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-email");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-eye");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-eye");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-lock");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-lock");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-info");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-info");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-globe");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-globe");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-cross-bold");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-cross-bold");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-pause");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-pause");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-reply");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-reply");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-caution");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-caution");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-bold");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-bold");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-bullet-list");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-bullet-list");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-camera");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-camera");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-italic");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-italic");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-link");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-link");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-number-list");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-number-list");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-quote");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-quote");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-users");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-users");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-pencil");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-pencil");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-tick");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-tick");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-trash");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-trash");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-grid");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-grid");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-list");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-list");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-search-small");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-search-small");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-clip");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-clip");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-calendar");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-calendar");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-case");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-case");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-clock");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-clock");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-gear");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-gear");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-icon-help");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-icon-help");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-rocket");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-rocket");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-stopwatch");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-stopwatch");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-user");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-user");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-twitter");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-twitter");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-facebook");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-facebook");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-large-left");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-large-left");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-large-right");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-large-right");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-select");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-select");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-double-down");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-double-down");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-double-up");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-double-up");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-large-down");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-large-down");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-large-up");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-large-up");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-small-down");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-small-down");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","i-chevron-small-up");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-chevron-small-up");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("h3");dom.setAttribute(el3,"class","styleguide-item__subtitle u-mt");var el4=dom.createTextNode("\n      PNG Icons\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","layout");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-TEXT");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-TEXT");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-TEXTAREA");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-TEXTAREA");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-RADIO");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-RADIO");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-SELECT");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-SELECT");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-CHECKBOX");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-CHECKBOX");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-NUMERIC");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-NUMERIC");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-DECIMAL");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-DECIMAL");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-FILE");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-FILE");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createComment("\n   ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","layout__item u-1/3");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-YESNO");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-YESNO");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-CASCADINGSELECT");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-CASCADINGSELECT");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-DATE");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-DATE");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("div");var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-png-icon i-png-REGEX");var el7=dom.createTextNode("\n          ");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n          ");dom.appendChild(el5,el6);var el6=dom.createElement("span");dom.setAttribute(el6,"class","styleguide-icon");var el7=dom.createTextNode(" i-png-REGEX");dom.appendChild(el6,el7);dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","styleguide-quote");var el3=dom.createTextNode("\n    All men's miseries derive from not being able to sit in a quiet room alone... and write CSS.\n\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("span");dom.setAttribute(el3,"class","styleguide-quote__author");var el4=dom.createTextNode("Blaise Pascal — 1650");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[0]);var element1=dom.childAt(element0,[7,3]);var element2=dom.childAt(element1,[3]);var element3=dom.childAt(element0,[19,15]);var element4=dom.childAt(element0,[21,5]);var element5=dom.childAt(element0,[23]);var element6=dom.childAt(element5,[3]);var element7=dom.childAt(element0,[33]);var element8=dom.childAt(element7,[11]);var element9=dom.childAt(element7,[25]);var element10=dom.childAt(element0,[35,3,1]);var morphs=new Array(22);morphs[0] = dom.createMorphAt(dom.childAt(element1,[1,5,1]),1,1);morphs[1] = dom.createMorphAt(dom.childAt(element2,[1]),1,1);morphs[2] = dom.createMorphAt(dom.childAt(element2,[5]),1,1);morphs[3] = dom.createMorphAt(dom.childAt(element3,[1,5]),1,1);morphs[4] = dom.createMorphAt(dom.childAt(element3,[3,3]),1,1);morphs[5] = dom.createMorphAt(dom.childAt(element4,[1,3]),1,1);morphs[6] = dom.createMorphAt(dom.childAt(element4,[3,3]),1,1);morphs[7] = dom.createMorphAt(dom.childAt(element6,[1,3]),1,1);morphs[8] = dom.createMorphAt(dom.childAt(element6,[3,3]),1,1);morphs[9] = dom.createMorphAt(dom.childAt(element5,[7]),1,1);morphs[10] = dom.createMorphAt(dom.childAt(element0,[25,5]),1,1);morphs[11] = dom.createMorphAt(dom.childAt(element8,[1,3]),1,1);morphs[12] = dom.createMorphAt(dom.childAt(element8,[3,3]),1,1);morphs[13] = dom.createMorphAt(dom.childAt(element8,[5,3]),1,1);morphs[14] = dom.createMorphAt(dom.childAt(element8,[7,3]),1,1);morphs[15] = dom.createMorphAt(dom.childAt(element7,[21]),1,1);morphs[16] = dom.createMorphAt(dom.childAt(element9,[1,3]),1,1);morphs[17] = dom.createMorphAt(dom.childAt(element9,[3,3]),1,1);morphs[18] = dom.createMorphAt(dom.childAt(element9,[5,3]),1,1);morphs[19] = dom.createMorphAt(dom.childAt(element9,[8,3]),1,1);morphs[20] = dom.createMorphAt(dom.childAt(element10,[7,1]),1,1);morphs[21] = dom.createMorphAt(dom.childAt(element10,[9,1]),1,1);return morphs;},statements:[["inline","escape-html",["<div class=\"layout\">\n  <div class=\"layout__item u-1/2\">\n    I am 50% on the left\n  </div><!--\n--><div class=\"layout__item u-1/2\">\n    I am 50% on the right!\n  </div>\n</div>"],[],["loc",[null,[101,0],[110,2]]]],["inline","escape-html",["<div class=\"layout\">"],[],["loc",[null,[118,0],[120,2]]]],["inline","escape-html",["<div class=\"layout__item u-1/2\">"],[],["loc",[null,[131,0],[133,2]]]],["inline","escape-html",["<h2 class=\"heading\">\n  I am a heading\n</h2>\n<h6 class=\"subheading\">\n  I am a subheading\n</h6>"],[],["loc",[null,[545,0],[552,2]]]],["inline","escape-html",["<h2 class=\"heading heading--capitalized\">\n  I am a capitalized heading\n</h2>"],[],["loc",[null,[560,0],[564,2]]]],["inline","escape-html",["<div class=\"box\">\n  <div class=\"arrow arrow--top\"></div>\n</div>"],[],["loc",[null,[587,0],[591,2]]]],["inline","escape-html",["<div class=\"box\">\n  <div class=\"arrow arrow--bottom\"></div>\n</div>"],[],["loc",[null,[600,0],[604,2]]]],["inline","escape-html",["<div class=\"box\">\n  I am a box with secondary styling!\n</div>"],[],["loc",[null,[619,0],[623,2]]]],["inline","escape-html",["<div class=\"box box--secondary\">\n  I am a box with secondary styling!\n</div>"],[],["loc",[null,[631,0],[635,2]]]],["inline","escape-html",["<div class=\"box-container\">\n  <div class=\"box\">I am a box with a container</div>\n  <div class=\"box box--wide\">\n    I am a wide box with a container ;)\n  </div>\n  <div class=\"box\">I am a box container</div>\n</div>"],[],["loc",[null,[648,0],[656,2]]]],["inline","escape-html",["<div class=\"flag\">\n  <div class=\"flag__img\">\n    <img class=\"avatar\" src=\"http://i.imgur.com/C9QgICy.jpg\" alt=\"\">\n  </div>\n  <div class=\"flag__body\">\n    I am the flag body!\n  </div>\n</div>"],[],["loc",[null,[672,0],[681,2]]]],["inline","escape-html",["<p class=\"t-good\">I am a good message! :)</p>"],[],["loc",[null,[858,0],[860,2]]]],["inline","escape-html",["<p class=\"t-bad\">I am a bad message! :)</p>"],[],["loc",[null,[866,0],[868,2]]]],["inline","escape-html",["<p class=\"t-warning\">I am a warning message! :)</p>"],[],["loc",[null,[874,0],[876,2]]]],["inline","escape-html",["<p class=\"t-open\">I am a open message! :)</p>"],[],["loc",[null,[882,0],[884,2]]]],["inline","escape-html",["<p class=\"t-center\">I am center aligned</p>\n<p class=\"t-left\">I am left aligned</p>\n<p class=\"t-right\">I am right aligned</p>"],[],["loc",[null,[896,0],[900,2]]]],["inline","escape-html",["<p class=\"t-caption\">I am a caption!</p>"],[],["loc",[null,[909,0],[911,2]]]],["inline","escape-html",["<p class=\"t-small\">I am small!</p>"],[],["loc",[null,[917,0],[919,2]]]],["inline","escape-html",["<p class=\"t-bold\">I am bold!</p>"],[],["loc",[null,[925,0],[927,2]]]],["inline","escape-html",["<p class=\"t-bold\">I am italic!</p>"],[],["loc",[null,[934,0],[936,2]]]],["inline","escape-html",["<div class=\"ko-info-bar\">\n  <span class=\"ko-info-bar__action\"></span>\n  <span class=\"i-caution-solid\"></span>\n</div>"],[],["loc",[null,[963,0],[967,9]]]],["inline","escape-html",["<div class=\"ko-info-bar i-caution-solid\">\n  <span class=\"ko-info-bar__action\"></span>\n</div>"],[],["loc",[null,[985,0],[988,9]]]]],locals:[],templates:[]};})());});
define("frontend-cp/session/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 12
              },
              "end": {
                "line": 8,
                "column": 109
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 10
            },
            "end": {
              "line": 9,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.index.view", ["get", "tabStore.casesViewId", ["loc", [null, [8, 56], [8, 76]]]]], ["class", "nav-main__item i-inbox"], 0, null, ["loc", [null, [8, 12], [8, 121]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 12
              },
              "end": {
                "line": 10,
                "column": 83
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 10
            },
            "end": {
              "line": 11,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.index"], ["class", "nav-main__item i-inbox"], 0, null, ["loc", [null, [10, 12], [10, 95]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 12
              },
              "end": {
                "line": 13,
                "column": 84
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 10
            },
            "end": {
              "line": 14,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.users.index"], ["class", "nav-main__item i-person"], 0, null, ["loc", [null, [13, 12], [13, 96]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 16
                  },
                  "end": {
                    "line": 29,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__label");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__close");
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [2]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element5, 'onclick');
                return morphs;
              },
              statements: [["content", "tab.label", ["loc", [null, [28, 47], [28, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [28, 120], [28, 123]]]]], [], ["loc", [null, [28, 103], [28, 125]]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 14
                },
                "end": {
                  "line": 30,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [27, 27], [27, 40]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [27, 63], [27, 78]]]]], [], ["loc", [null, [27, 41], [27, 79]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [27, 16], [29, 28]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 16
                    },
                    "end": {
                      "line": 33,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element4, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [32, 47], [32, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [32, 120], [32, 123]]]]], [], ["loc", [null, [32, 103], [32, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 14
                  },
                  "end": {
                    "line": 34,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [31, 27], [31, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [31, 41], [31, 72]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [31, 95], [31, 110]]]]], [], ["loc", [null, [31, 73], [31, 111]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [31, 16], [33, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 35,
                      "column": 16
                    },
                    "end": {
                      "line": 37,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element3, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [36, 47], [36, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [36, 120], [36, 123]]]]], [], ["loc", [null, [36, 103], [36, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 34,
                    "column": 14
                  },
                  "end": {
                    "line": 38,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [35, 27], [35, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [35, 41], [35, 72]]]], ["get", "tab.dynamicSegments.lastObject", ["loc", [null, [35, 73], [35, 103]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [35, 126], [35, 141]]]]], [], ["loc", [null, [35, 104], [35, 142]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [35, 16], [37, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 14
                },
                "end": {
                  "line": 38,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [30, 28], [30, 54]]]], 1], [], ["loc", [null, [30, 24], [30, 57]]]]], [], 0, 1, ["loc", [null, [30, 14], [38, 14]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 12
              },
              "end": {
                "line": 39,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [26, 24], [26, 50]]]], 0], [], ["loc", [null, [26, 20], [26, 53]]]]], [], 0, 1, ["loc", [null, [26, 14], [38, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 16
                  },
                  "end": {
                    "line": 43,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__label");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__close");
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [2]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element2, 'onclick');
                return morphs;
              },
              statements: [["content", "tab.label", ["loc", [null, [42, 47], [42, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [42, 120], [42, 123]]]]], [], ["loc", [null, [42, 103], [42, 125]]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 14
                },
                "end": {
                  "line": 44,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [41, 27], [41, 40]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [41, 16], [43, 28]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 45,
                      "column": 16
                    },
                    "end": {
                      "line": 47,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element1, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [46, 47], [46, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [46, 120], [46, 123]]]]], [], ["loc", [null, [46, 103], [46, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 44,
                    "column": 14
                  },
                  "end": {
                    "line": 48,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [45, 27], [45, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [45, 41], [45, 72]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [45, 16], [47, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@1.13.13",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 49,
                      "column": 16
                    },
                    "end": {
                      "line": 51,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element0, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [50, 47], [50, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [50, 120], [50, 123]]]]], [], ["loc", [null, [50, 103], [50, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@1.13.13",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 14
                  },
                  "end": {
                    "line": 52,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [49, 27], [49, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [49, 41], [49, 72]]]], ["get", "tab.dynamicSegments.lastObject", ["loc", [null, [49, 73], [49, 103]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [49, 16], [51, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@1.13.13",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 14
                },
                "end": {
                  "line": 52,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [44, 28], [44, 54]]]], 1], [], ["loc", [null, [44, 24], [44, 57]]]]], [], 0, 1, ["loc", [null, [44, 14], [52, 14]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@1.13.13",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 12
              },
              "end": {
                "line": 53,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [40, 24], [40, 50]]]], 0], [], ["loc", [null, [40, 20], [40, 53]]]]], [], 0, 1, ["loc", [null, [40, 14], [52, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "tab.queryParams", ["loc", [null, [20, 18], [20, 33]]]]], [], 0, 1, ["loc", [null, [20, 12], [53, 19]]]]],
        locals: ["tab"],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@1.13.13",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 12
            },
            "end": {
              "line": 72,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "ko-session-widgets", ["loc", [null, [71, 14], [71, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 82,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "nav__image");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5, "class", "nav-main");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5, "class", "nav-tabs");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "nav-secondary");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "nav-secondary__container");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "nav-secondary__content");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "session_outlet-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0, 1]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [3, 1]);
        var element9 = dom.childAt(element6, [3, 1, 1]);
        var element10 = dom.childAt(element9, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element6, 'class');
        morphs[1] = dom.createMorphAt(element8, 1, 1);
        morphs[2] = dom.createMorphAt(element8, 2, 2);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [5, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element7, 7, 7);
        morphs[5] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[6] = dom.createAttrMorph(element10, 'class');
        morphs[7] = dom.createMorphAt(element10, 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["nav ", ["subexpr", "if", [["subexpr", "not", [["get", "tabStore.isEnabled", ["loc", [null, [2, 28], [2, 46]]]]], [], ["loc", [null, [2, 23], [2, 47]]]], "nav--disabled"], [], ["loc", [null, [2, 18], [2, 65]]]]]]], ["block", "if", [["get", "tabStore.casesViewId", ["loc", [null, [7, 16], [7, 36]]]]], [], 0, 1, ["loc", [null, [7, 10], [11, 17]]]], ["block", "if", [["get", "features.userTab", ["loc", [null, [12, 16], [12, 32]]]]], [], 2, null, ["loc", [null, [12, 10], [14, 17]]]], ["block", "each", [["get", "tabStore.tabs", ["loc", [null, [19, 18], [19, 31]]]]], [], 3, null, ["loc", [null, [19, 10], [54, 19]]]], ["content", "ko-agent-dropdown", ["loc", [null, [57, 6], [57, 27]]]], ["inline", "ko-universal-search", [], ["searchResults", ["subexpr", "@mut", [["get", "searchResults", ["loc", [null, [64, 28], [64, 41]]]]], [], []], "searchQuery", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [65, 26], [65, 37]]]]], [], []], "onLoadSearchRoute", ["subexpr", "action", ["loadSearchRoute"], [], ["loc", [null, [66, 32], [66, 58]]]], "onSearchChanged", ["subexpr", "action", ["searchingChanged"], [], ["loc", [null, [67, 30], [67, 57]]]]], ["loc", [null, [63, 12], [67, 59]]]], ["attribute", "class", ["concat", ["nav-secondary__sidebar ", ["subexpr", "if", [["get", "hideSessionWidgets", ["loc", [null, [69, 50], [69, 68]]]], "nav-secondary__sidebar--hidden"], [], ["loc", [null, [69, 45], [69, 103]]]]]]], ["block", "unless", [["get", "hideSessionWidgets", ["loc", [null, [70, 22], [70, 40]]]]], [], 4, null, ["loc", [null, [70, 12], [72, 23]]]], ["content", "outlet", ["loc", [null, [80, 2], [80, 12]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/session/test/entry/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    model: function model() {
      return {};
    },

    afterModel: function afterModel(_, transition) {
      this.tab = this.get('tabStore').open(transition, 'Test');
    },

    actions: {
      didRender: function didRender() {
        this.send('restoreScroll');
      }
    }
  });
});
define("frontend-cp/session/test/entry/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@1.13.13",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/test/entry/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "height: 5000px");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/transforms/array', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized;
    },

    serialize: function serialize(deserialized) {
      return deserialized;
    }
  });
});
define("frontend-cp/transforms/fragment-array", ["exports"], function (exports) {
  exports["default"] = MF.FragmentArrayTransform;
});
define("frontend-cp/transforms/fragment", ["exports"], function (exports) {
  exports["default"] = MF.FragmentTransform;
});
define('frontend-cp/utils/base-path', ['exports'], function (exports) {
  exports.getBasePath = getBasePath;
  exports.getLoginPath = getLoginPath;

  function getBasePath() {
    var path = '/agent';
    var pathname = location.pathname;

    // If we are at a deeplink inside admin, redirect back to admin
    // If we have errored at '/admin' leave path='/agent'
    if (pathname.startsWith('/admin') && pathname !== '/admin') {
      path = '/admin';
    }
    // If we're coming from a login path just redirect the user back there.
    // Without this a user could end up in a redirect loop
    if (pathname.endsWith('/login')) {
      path = pathname;
    }
    return path;
  }

  function getLoginPath() {
    var pathname = location.pathname;

    if (pathname.startsWith('/admin')) {
      return '/admin/login';
    } else {
      return '/agent/login';
    }
  }
});
define('frontend-cp/utils/can-use-dom', ['exports', 'ember-metrics/utils/can-use-dom'], function (exports, _emberMetricsUtilsCanUseDom) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsUtilsCanUseDom['default'];
    }
  });
});
define('frontend-cp/utils/exclusion', ['exports'], function (exports) {
  exports.exclude = exclude;

  function exclude(data, exclusions) {
    var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

    return (data || []).filter(function (element) {
      return (exclusions || []).indexOf(element.get(key)) === -1;
    });
  }
});
define("frontend-cp/utils/format-validations", ["exports"], function (exports) {
  exports.validateEmailFormat = validateEmailFormat;
  exports.validateTwitterHandleFormat = validateTwitterHandleFormat;
  var EMAIL_REGEX = /^[^@]+@([^@\.]+\.)+[^@\.]{2,}$/;
  var TWITTER_REGEX = /(^|[^@\w])@(\w{1,15})\b$/;

  function validateEmailFormat(email) {
    return EMAIL_REGEX.test(email);
  }

  function validateTwitterHandleFormat(email) {
    return TWITTER_REGEX.test(email);
  }
});
define('frontend-cp/utils/object-transforms', ['exports', 'ember-metrics/utils/object-transforms'], function (exports, _emberMetricsUtilsObjectTransforms) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsUtilsObjectTransforms['default'];
    }
  });
});
define('frontend-cp/utils/object', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports.jsonToObject = jsonToObject;

  function convertValue(value) {
    if (_npmLodash['default'].isArray(value)) {
      return convertArray(value);
    } else if (_npmLodash['default'].isObject(value)) {
      return jsonToObject(value);
    } else {
      return value;
    }
  }

  function convertArray(array) {
    return array.map(convertValue);
  }

  function jsonToObject(object) {
    return _ember['default'].Object.create(_npmLodash['default'].mapValues(object, convertValue));
  }
});
define("frontend-cp/utils/promise-queue", ["exports"], function (exports) {
  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PromiseQueue = (function () {
    function PromiseQueue() {
      _classCallCheck(this, PromiseQueue);

      this.queue = [];
    }

    //Queue is required, to prevent several promises to be
    //resolved in random order. For example, someone writes
    //"d" and after de-bounce (150ms), writes "demo".
    //"d" will return results, but "demo" won't. But as
    //server responds faster to the empty result, on "demo"
    //string we will get wrong result.

    _createClass(PromiseQueue, [{
      key: "push",
      value: function push(term, promise) {
        var queue = this.queue;

        queue.push({
          term: term,
          promise: promise
        });
      }
    }, {
      key: "isDiscarded",
      value: function isDiscarded(term) {
        var queue = this.queue;
        var lastPromiseLength = queue.length;
        var queuedPromise = queue[lastPromiseLength - 1];

        return (queuedPromise || {}).term !== term;
      }
    }, {
      key: "flush",
      value: function flush() {
        if (this.queue.length) {
          this.queue.clear();
        }
      }
    }]);

    return PromiseQueue;
  })();

  exports["default"] = PromiseQueue;
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('frontend-cp/config/environment', ['ember'], function(Ember) {
  var prefix = 'frontend-cp';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */
if (!runningTests) {
  require("frontend-cp/app")["default"].create({"autodismissTimeout":3000,"PUSHER_OPTIONS":{"disabled":false,"logEvents":true,"encrypted":true,"authEndpoint":"/api/v1/realtime/auth","wsHost":"ws.realtime.kayako.com","httpHost":"sockjs.realtime.kayako.com"},"views":{"maxLimit":999,"viewsPollingInterval":30,"casesPollingInterval":30,"isPollingEnabled":true},"name":"frontend-cp","version":"0.0.0+7b37d2b1"});
}
/* jshint ignore:end */
