"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('frontend-cp/acceptance-tests/sinon', ['exports', 'ember-sinon/acceptance-tests/sinon'], function (exports, sinon) {

	'use strict';



	exports['default'] = sinon['default'];

});
define('frontend-cp/adapters/access-log', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'accesslogs';
    }
  });

});
define('frontend-cp/adapters/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, Ember, DS, _) {

  'use strict';

  var get = Ember['default'].get;

  //TODO: override handleResponse and not create/find/update/delete/.../../.. for error handling

  exports['default'] = DS['default'].RESTAdapter.extend({
    namespace: 'api/v1',
    primaryRecordKey: 'data',
    sessionService: Ember['default'].inject.service('session'),
    errorService: Ember['default'].inject.service('errorHandler'),

    /*
     * Each time we findAll on a model, we check to see if we've
     * loaded it - we don't reload the model once this has happened.
     * (all new models will be pushed to the store via pusher)
     */
    foundAllHash: null,
    initFoundAllHash: Ember['default'].on('init', function () {
      this.set('foundAllHash', {});
    }),

    headers: Ember['default'].computed('sessionService.sessionId', function () {
      var headers = {
        'Accept': 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };
      var sessionId = this.get('sessionService.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    normalizeErrorResponse: function normalizeErrorResponse(status, headers, payload) {
      // Sneaks the auth token into each error response if it's
      // not already there
      return {
        errors: payload.errors,
        authToken: payload.auth_token,
        notifications: payload.notifications
      };
    },

    handleErrors: function handleErrors(promise) {
      var _this = this;

      return promise.then(function (data) {
        _this.get('errorService').handleServerNotifications(data);
        return data;
      })['catch'](function (e) {
        _this.get('errorService').handleServerNotifications(e.errors);
        return _this.get('errorService').handleServerError(e);
      });
    },

    createRecord: function createRecord(store, type, snapshot) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    updateRecord: function updateRecord(store, type, snapshot) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    deleteRecord: function deleteRecord(store, type, snapshot) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findAll: function findAll(store, type, sinceToken, snapshot) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findBelongsTo: function findBelongsTo(store, snapshot, url) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findMany: function findMany(store, type, ids, snapshots) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    findRecord: function findRecord(store, type, id, snapshot) {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    queryRecord: function queryRecord(store, type, query) {
      var url = this.buildURL(type.modelName, null, null, 'queryRecord', query);

      if (this.sortQueryParams) {
        query = this.sortQueryParams(query);
      }

      return this.handleErrors(this.ajax(url, 'GET', { data: query }));
    },

    buildURL: function buildURL() {
      var url = [];
      var prefix = this.getURLPrefix();
      if (prefix) {
        url.push(prefix);
      }
      url.push(this.buildURLFragment.apply(this, arguments));
      url = url.join('/');

      var host = get(this, 'host');
      if (!host && url && url.charAt(0) !== '/') {
        url = '/' + url;
      }

      return url;
    },

    buildURLFragment: function buildURLFragment(type, id, snapshot, requestType, query) {
      var url = [];
      var inverseRelationship = undefined;
      var store = get(this, 'store');
      var typeObject = store.modelFor(type);
      var parentSnapshot = undefined;

      typeObject.eachRelationship(function (name, relationship) {
        if (relationship.options.parent) {
          // Entity representing the parent
          if (snapshot) {
            parentSnapshot = snapshot.belongsTo(name);
          } else if (query && query.parent) {
            parentSnapshot = query.parent._createSnapshot();
            delete query.parent;
          }
          // The inverse relationship (parent-child)
          inverseRelationship = typeObject.inverseFor(name, store);
        }
      });

      if (parentSnapshot) {
        // Adapter for the parent entity
        var adapter = store.adapterFor(parentSnapshot.modelName);
        // Build the URL for the parent entity
        url.push(adapter.buildURLFragment(parentSnapshot.modelName, parentSnapshot.id, parentSnapshot, requestType, query));
        // Options hash for the inverse relationship
        var relationshipMeta = parentSnapshot.type.metaForProperty(inverseRelationship.name);
        url.push(relationshipMeta.options.url || this.pathForType(type));
      } else {
        url.push(this.pathForType(type));
      }

      if (id) {
        url.push(encodeURIComponent(id));
      }

      return url.join('/');
    },

    urlPrefix: function urlPrefix(path, parentURL) {
      var host = get(this, 'host');
      var url = [];

      // Protocol relative url
      if (/^\/\//.test(path)) {// eslint-disable-line no-empty
        // Do nothing, the full host is already included. This branch
        // avoids the absolute path logic and the relative path logic.

        // Absolute path
      } else if (path.charAt(0) === '/') {
          if (host) {
            path = path.slice(1);
            url.push(host);
          }
          // Relative path
        } else if (!/^http(s)?:\/\//.test(path)) {
            url.push(parentURL);
          }
      url.push(path);

      return url.join('/');
    },

    getURLPrefix: function getURLPrefix() {
      var url = [];
      var host = this.get('host');
      var namespace = this.get('namespace');
      if (host) {
        url.push(host);
      }
      if (namespace) {
        url.push(namespace);
      }

      return url.join('/');
    },

    // If the items fetched via hasMany relationship refer to the related entity
    // as their parent (via "parent" property in options), a property with the
    // parent's ID will be added to every child.
    // Ideally it's a job of a serializer, but this is the only place where we can
    // get access the relationship object.
    findHasMany: function findHasMany(store, snapshot, url, relationship) {
      var _this2 = this;

      return this.handleErrors(this._super.apply(this, arguments).then(function (payload) {
        var inverse = snapshot.type.inverseFor(relationship.key, store);
        if (inverse && payload[_this2.primaryRecordKey]) {
          payload[_this2.primaryRecordKey].forEach(function (entry) {
            if (!entry[inverse]) {
              entry[inverse] = {
                id: snapshot.id,
                type: snapshot.type
              };
            }
          });
        }
        return payload;
      }));
    },

    pathForType: function pathForType(type) {
      var dasherized = Ember['default'].String.dasherize(type);
      return Ember['default'].String.pluralize(dasherized);
    },

    query: function query(store, type, _query) {
      var url = this.buildURL(type.modelName, null, null, 'query', _query);

      if (this.sortQueryParams) {
        _query = this.sortQueryParams(_query);
      }

      return this.handleErrors(this.ajax(url, 'GET', { data: _query }));
    },

    isInvalid: function isInvalid(status, header, payload) {
      var isValidationError = function isValidationError(responseError) {
        return ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'].includes(responseError.code);
      };

      var hasValidationErrors = function hasValidationErrors(responseErrors) {
        return _['default'].some(responseErrors, isValidationError);
      };

      return status === 422 || hasValidationErrors(payload.errors);
    },

    /*
     * If we've already requested a resource, we will never
     * need to update it (pusher will handle all the things)
     *
     * We're never background reloading.
     */

    shouldReloadAll: function shouldReloadAll(store, snapshotRecordArray) {
      if (this.get('foundAllHash.' + snapshotRecordArray.type.modelName)) {
        return false;
      }
      this.set('foundAllHash.' + snapshotRecordArray.type.modelName, true);
      return true;
    },

    shouldBackgroundReloadAll: function shouldBackgroundReloadAll(store, snapshotRecordArray) {
      return false;
    },

    /* TODO: Remove when Ember 2.0 is relased (just for deprecation warnings) */
    shouldReloadRecord: function shouldReloadRecord(store, snapshot) {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord(store, snapshot) {
      return true;
    }
  });

});
define('frontend-cp/adapters/case-field-type', ['exports', 'frontend-cp/adapters/static-model'], function (exports, StaticModel) {

	'use strict';

	exports['default'] = StaticModel['default'].extend({});

});
define('frontend-cp/adapters/case-field', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/fields';
    }
  });

});
define('frontend-cp/adapters/case-form', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/forms';
    }
  });

});
define('frontend-cp/adapters/case-message', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'messages';
    }
  });

});
define('frontend-cp/adapters/case-note', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    }
  });

});
define('frontend-cp/adapters/case-priority', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/priorities';
    }
  });

});
define('frontend-cp/adapters/case-reply-options', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

	'use strict';

	exports['default'] = ApplicationAdapter['default'].extend({});

});
define('frontend-cp/adapters/case-reply', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'reply';
    }
  });

});
define('frontend-cp/adapters/case-status', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/statuses';
    }
  });

});
define('frontend-cp/adapters/case-type', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/types';
    }
  });

});
define('frontend-cp/adapters/case', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    /*
     * Pusher will keep this record up to date
     */
    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord(store, snapshot) {
      return false;
    }
  });

});
define('frontend-cp/adapters/channel', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/channels';
    }
  });

});
define('frontend-cp/adapters/column', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'views/columns';
    }
  });

});
define('frontend-cp/adapters/definition', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'views/definition';
    }
  });

});
define('frontend-cp/adapters/facebook-account', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'facebook/accounts';
    }
  });

});
define('frontend-cp/adapters/identity-autocomplete-email', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'autocomplete/emails';
    }
  });

});
define('frontend-cp/adapters/identity-domain', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'autocomplete/domains';
    }
  });

});
define('frontend-cp/adapters/identity-email', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'identities/email';
    }
  });

});
define('frontend-cp/adapters/identity-facebook', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'identities/facebook';
    }
  });

});
define('frontend-cp/adapters/identity-phone', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'identities/phone';
    }
  });

});
define('frontend-cp/adapters/identity-twitter', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'identities/twitter';
    }
  });

});
define('frontend-cp/adapters/intl', ['exports', 'ember-intl/adapters/-intl-adapter', 'frontend-cp/locales/new-locale'], function (exports, IntlAdapter, Locale) {

  'use strict';

  exports['default'] = IntlAdapter['default'].extend({
    locales: {},

    findLanguage: function findLanguage(locale) {
      if (locale instanceof Locale['default']) {
        return locale;
      }

      if (typeof locale === 'string') {
        if (!this.locales[locale]) {
          this.locales[locale] = new (Locale['default'].extend({
            locale: locale
          }))();
        }
        return this.locales[locale];
      }
    }
  });

});
define('frontend-cp/adapters/macro', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/macros';
    }
  });

});
define('frontend-cp/adapters/metric', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/metrics';
    }
  });

});
define('frontend-cp/adapters/oauth-link', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    buildURLFragment: function buildURLFragment() {
      return 'twitter/account/link.json';
    }
  });

});
define('frontend-cp/adapters/organization-field', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'organizations/fields';
    }
  });

});
define('frontend-cp/adapters/private', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

    'use strict';

    exports['default'] = ApplicationAdapter['default'].extend({
        namespace: 'base/admin/index.php?/Base'
    });

});
define('frontend-cp/adapters/rating', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/recent';
    }
  });

});
define('frontend-cp/adapters/search-result-group', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'base/search_all';
    }
  });

});
define('frontend-cp/adapters/session', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, Ember, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    namespace: 'api/v1',

    buildURLFragment: function buildURLFragment() {
      return 'session';
    },

    headers: Ember['default'].computed('sessionService.{email,password,sessionId}', function () {
      var sessionId = this.get('sessionService.sessionId');
      var email = this.get('sessionService.email');
      var password = this.get('sessionService.password');
      var authorizationHeader = 'Basic ' + btoa(email + ':' + password);
      var withPassword = email && password;

      return {
        'Accept': 'application/json',
        'X-Options': 'flat',
        'X-Session-ID': withPassword ? undefined : sessionId,
        'Authorization': withPassword ? authorizationHeader : undefined,
        'X-Requested-With': 'XMLHttpRequest'
      };
    })
  });

});
define('frontend-cp/adapters/slack-identity', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'identities/slack';
    }
  });

});
define('frontend-cp/adapters/static-model', ['exports', 'ember-data', 'npm:lodash'], function (exports, DS, _) {

  'use strict';

  exports['default'] = DS['default'].Adapter.extend({
    findAll: function findAll(store, typeClass) {
      return store.peekAll(typeClass);
    },

    find: function find(store, typeClass, id) {
      var records = this.findAll(store, typeClass);

      var matchingRecords = _['default'].select(records, function (record) {
        return record.id === id;
      });

      if (matchingRecords.length) {
        return matchingRecords.firstObject;
      }
    }
  });

});
define('frontend-cp/adapters/tag', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'autocomplete/tags';
    }
  });

});
define('frontend-cp/adapters/twitter-account-callback', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/account/callback';
    }
  });

});
define('frontend-cp/adapters/twitter-account', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/accounts';
    }
  });

});
define('frontend-cp/adapters/user-field', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'users/fields';
    }
  });

});
define('frontend-cp/adapters/view-count', ['exports', 'frontend-cp/adapters/application'], function (exports, ApplicationAdapter) {

  'use strict';

  exports['default'] = ApplicationAdapter['default'].extend({
    pathForType: function pathForType() {
      return 'views/counts';
    }
  });

});
define('frontend-cp/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'frontend-cp/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  var App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('frontend-cp/application/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    urlService: Ember['default'].inject.service('url'),
    notificationService: Ember['default'].inject.service('notification'),

    currentPathDidChange: Ember['default'].observer('currentPath', function () {
      this.get('urlService').set('currentPath', this.get('currentPath'));
    }),

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: Ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    actions: {
      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });

});
define('frontend-cp/application/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    sessionService: Ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.agent');
      }, function () {
        _this.transitionTo('login.agent');
      });
    }
  });

});
define('frontend-cp/application/route', ['exports', 'moment', 'ember'], function (exports, moment, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    store: Ember['default'].inject.service(),
    intl: Ember['default'].inject.service(),
    localeId: '',

    beforeModel: function beforeModel() {
      var store = this.get('store');
      var intl = this.get('intl');

      intl.set('adapterType', 'intl');

      var localeId = window.navigator.language ? window.navigator.language.toLowerCase() : 'en-us';
      this.set('localeId', localeId);

      return store.find('locale', localeId)['catch'](function () {
        return store.find('locale', 'en-us');
      }).then(function (locale) {
        intl.createLocale(locale.id, {});
        intl.set('locale', locale.id);
        moment['default'].locale(locale.id);

        var translationObj = {};
        return locale.get('strings').then(function (strings) {
          strings.forEach(function (string) {
            translationObj[string.id] = string.get('value');
          });
          intl.addMessages(locale.id, translationObj);
        });
      });
    }
  });

});
define('frontend-cp/application/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/application/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-toast",[],["type",["subexpr","@mut",[["get","notification.type",["loc",[null,[8,9],[8,26]]]]],[],[]],"dismissable",["subexpr","@mut",[["get","notification.dismissable",["loc",[null,[9,16],[9,40]]]]],[],[]],"autodismiss",["subexpr","@mut",[["get","notification.autodismiss",["loc",[null,[10,16],[10,40]]]]],[],[]],"title",["subexpr","@mut",[["get","notification.title",["loc",[null,[11,10],[11,28]]]]],[],[]],"body",["subexpr","@mut",[["get","notification.body",["loc",[null,[12,9],[12,26]]]]],[],[]],"close",["subexpr","action",["onNotificationClosed",["get","notification",["loc",[null,[13,41],[13,53]]]]],[],["loc",[null,[13,10],[13,54]]]]],["loc",[null,[7,4],[14,6]]]]
        ],
        locals: ["notification"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/application/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","application__notifications");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","outlet",["loc",[null,[1,0],[1,10]]]],
        ["inline","ko-context-modal",[],["floating",true],["loc",[null,[3,0],[3,34]]]],
        ["block","each",[["get","notifications",["loc",[null,[6,10],[6,23]]]]],[],0,null,["loc",[null,[6,2],[15,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'frontend-cp/config/environment'], function (exports, AppVersionComponent, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = AppVersionComponent['default'].extend({
    version: version,
    name: name
  });

});
define('frontend-cp/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, Component) {

	'use strict';

	exports['default'] = Component['default'];

});
define('frontend-cp/components/ko-address/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['info-bar-item', 'u-no-bottom-border']
  });

});
define('frontend-cp/components/ko-address/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-address/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(element0,0,0);
          morphs[2] = dom.createMorphAt(element0,2,2);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
          return morphs;
        },
        statements: [
          ["content","address.address1",["loc",[null,[3,5],[3,25]]]],
          ["content","address.address2",["loc",[null,[4,5],[4,25]]]],
          ["content","address.postCode",["loc",[null,[4,26],[4,46]]]],
          ["content","address.country",["loc",[null,[5,5],[5,24]]]]
        ],
        locals: ["address"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-address/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,3],[1,12]]]],
        ["block","each",[["get","address",["loc",[null,[2,8],[2,15]]]]],[],0,null,["loc",[null,[2,0],[6,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    caseField: null,
    title: null,
    onOptionAddition: null,
    onOptionRemoval: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,

    isApiFieldKeyAvailable: Ember['default'].computed('caseField.id', function () {
      return !this.get('caseField.id');
    }),
    isStatusKeyAvailable: true,
    isCustomerEditAvailable: true,

    isStatusOrApiFieldAvailable: Ember['default'].computed('isApiFieldKeyAvailable', 'isStatusKeyAvailable', function () {
      return this.get('isApiFieldKeyAvailable') || this.get('isStatusKeyAvailable');
    }),

    optionsList: Ember['default'].computed('caseField.options', 'caseField.options.[]', 'caseField.options.@each.markedForDeletion', function () {
      return this.get('caseField.options').filterBy('markedForDeletion', false);
    }),

    getAdminComponentForFieldType: function getAdminComponentForFieldType(fieldType) {
      switch (fieldType) {
        case 'REGEX':
          return 'ko-admin/case-fields/edit/regex';
        case 'PRIORITY':
          return 'ko-admin/case-fields/edit/priorities';
        case 'STATUS':
          return 'ko-admin/case-fields/edit/statuses';
        case 'TYPE':
          return 'ko-admin/case-fields/edit/types';
      }
    },

    onCustomerEditableChange: Ember['default'].observer('caseField.isCustomerEditable', function () {
      if (!this.get('caseField.isCustomerEditable')) {
        this.set('caseField.isRequiredForCustomers', false);
      }
    }),

    disabledString: function disabledString(isEditable) {
      return isEditable ? '' : 'disabled';
    },

    isTitleEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isRequiredWhenCreatingEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerVisibleEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerFieldTitleEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'MESSAGE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerEditableEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerRequiredEditable: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
        case 'STATUS':
          return false;
        default:
          return true;
      }
    }),

    isCustomerDescriptionsVisible: Ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    })
  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/options/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    options: [],

    orderedOptionList: Ember['default'].computed('options', 'options.@each.sortOrder', function () {
      return this.get('options').sortBy('sortOrder');
    }),

    actions: {
      reorderList: function reorderList(list) {
        var order = 1;
        list.forEach(function (option) {
          option.set('sortOrder', order);
          order++;
        });
      },

      createOption: function createOption() {
        this.sendAction('onOptionAddition');
      },
      removeOption: function removeOption(option) {
        this.sendAction('onOptionRemoval', option);
      }
    }

  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/options/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout layout--flush");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","layout__item u-1/2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","ko-admin_case-fields_edit_options__actions");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","i-globe");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","i-select");
          dom.setAttribute(el4,"style","margin-left: -4.5px;");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("TODO(tom) replace when component has been built.");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","layout__item u-1/2");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element1,1,1);
          morphs[1] = dom.createMorphAt(element1,5,5);
          morphs[2] = dom.createMorphAt(element2,1,1);
          morphs[3] = dom.createMorphAt(element2,3,3);
          return morphs;
        },
        statements: [
          ["inline","input",[],["type","text","class","input-text","value",["subexpr","@mut",[["get","option.value",["loc",[null,[9,51],[9,63]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.type.checkbox.field_options.title"],[],["loc",[null,[9,92],[9,155]]]]],[],["loc",[null,[9,76],[9,156]]]]],["loc",[null,[9,6],[9,158]]]],
          ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","option.errors.value",["loc",[null,[14,36],[14,55]]]]],[],[]]],["loc",[null,[14,6],[14,57]]]],
          ["inline","input",[],["type","text","class","input-text","value",["subexpr","@mut",[["get","option.tag",["loc",[null,[17,51],[17,61]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.type.checkbox.field_options.tag"],[],["loc",[null,[17,90],[17,151]]]]],[],["loc",[null,[17,74],[17,152]]]]],["loc",[null,[17,6],[17,154]]]],
          ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","option.errors.tag",["loc",[null,[18,36],[18,53]]]]],[],[]]],["loc",[null,[18,6],[18,55]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 29
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-reorderable-crud-list",[],["removeItemAction","removeOption","createItemAction","createOption","reorderListAction","reorderList","items",["subexpr","@mut",[["get","orderedOptionList",["loc",[null,[5,8],[5,25]]]]],[],[]]],0,null,["loc",[null,[1,0],[21,29]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/priorities/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    store: Ember['default'].inject.service(),

    priorities: [],
    initPriorities: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-priority').then(function (priorities) {
        _this.set('priorities', priorities);
      });
    }),

    orderedOptionList: Ember['default'].computed('priorities.[]', 'priorities.@each.level', function () {
      return this.get('priorities').sortBy('level');
    }),

    actions: {
      reorderList: function reorderList(list) {
        list.forEach(function (option) {
          option.set('level', list.indexOf(option) + 1);
        });
      },

      createOption: function createOption() {
        this.get('store').createRecord('case-priority', {
          level: this.get('priorities.length')
        });
      },
      removeOption: function removeOption(option) {
        option.destroyRecord()['catch'](function (e) {
          option.rollback();
        });
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/priorities/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.priorities"],[],["loc",[null,[3,21],[3,72]]]]],[],["loc",[null,[3,4],[3,74]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","priority.label",["loc",[null,[17,55],[17,69]]]]],[],[]]],["loc",[null,[17,4],[17,71]]]]
          ],
          locals: ["priority"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-form/field/help",[],[],0,null,["loc",[null,[2,2],[4,25]]]],
          ["block","ko-reorderable-crud-list",[],["removeItemAction","removeOption","createItemAction","createOption","reorderListAction","reorderList","items",["subexpr","@mut",[["get","orderedOptionList",["loc",[null,[15,10],[15,27]]]]],[],[]]],1,null,["loc",[null,[11,2],[18,31]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.priorities"],[],["loc",[null,[1,47],[1,100]]]]],[],["loc",[null,[1,31],[1,101]]]]],0,null,["loc",[null,[1,0],[20,25]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/regex/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    caseField: null
  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/regex/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 4,
                  "column": 86
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["admin.casefields.help.regex"],[],["loc",[null,[4,44],[4,84]]]]],[],["loc",[null,[4,27],[4,86]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["class","input input-text","type","text","value",["subexpr","@mut",[["get","caseField.regularExpression",["loc",[null,[3,55],[3,82]]]]],[],[]],"required",true],["loc",[null,[3,4],[3,98]]]],
            ["block","ko-form/field/help",[],[],0,null,["loc",[null,[4,4],[4,109]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-form/field",[],[],0,null,["loc",[null,[2,2],[5,20]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.regex"],[],["loc",[null,[1,47],[1,95]]]]],[],["loc",[null,[1,31],[1,96]]]]],0,null,["loc",[null,[1,0],[6,25]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/statuses/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var OPEN_STATUS_TYPES = ['NEW', 'OPEN', 'PENDING'];
  var CLOSED_STATUS_TYPES = ['CLOSED', 'COMPLETED'];

  exports['default'] = Ember['default'].Component.extend({
    store: Ember['default'].inject.service(),

    statuses: [],
    initStatuses: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-status').then(function (statuses) {
        _this.set('statuses', statuses);
      });
    }),

    openStatuses: Ember['default'].computed('statuses.[]', function () {
      return this.get('statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    closedStatuses: Ember['default'].computed('statuses.[]', function () {
      return this.get('statuses').filter(function (status) {
        return CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    customStatuses: Ember['default'].computed('statuses.[]', function () {
      return this.get('statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) === -1 && CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) === -1;
      });
    }),

    actions: {
      createStatus: function createStatus() {
        this.get('store').createRecord('case-status', {
          statusType: 'CUSTOM'
        });
      },

      removeStatus: function removeStatus(status) {
        status.destroyRecord();
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/statuses/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.statuses.1"],[],["loc",[null,[3,21],[3,71]]]]],[],["loc",[null,[3,4],[3,73]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.statuses.2"],[],["loc",[null,[7,21],[7,71]]]]],[],["loc",[null,[7,4],[7,73]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","status.label",["loc",[null,[12,57],[12,69]]]]],[],[]],"disabled","disabled"],["loc",[null,[12,6],[12,91]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[11,4],[13,22]]]]
          ],
          locals: ["status"],
          templates: [child0]
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","status.label",["loc",[null,[24,59],[24,71]]]]],[],[]]],["loc",[null,[24,8],[24,73]]]]
              ],
              locals: ["status"],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-reorderable-crud-list",[],["removeItemAction","removeStatus","createItemAction","createStatus","reorderListAction","reorderList","items",["subexpr","@mut",[["get","customStatuses",["loc",[null,[22,14],[22,28]]]]],[],[]]],0,null,["loc",[null,[18,6],[25,35]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[17,4],[26,22]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child4 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","statuses__add-status-message");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,0,0);
            return morphs;
          },
          statements: [
            ["element","action",["createStatus"],[],["loc",[null,[28,46],[28,71]]]],
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.add_new_status"],[],["loc",[null,[28,89],[28,138]]]]],[],["loc",[null,[28,72],[28,140]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child5 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","status.label",["loc",[null,[33,57],[33,69]]]]],[],[]],"disabled","disabled"],["loc",[null,[33,6],[33,91]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[32,4],[34,22]]]]
          ],
          locals: ["status"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-form/field/help",[],[],0,null,["loc",[null,[2,2],[4,25]]]],
          ["block","ko-form/field/help",[],[],1,null,["loc",[null,[6,2],[8,25]]]],
          ["block","each",[["get","openStatuses",["loc",[null,[10,10],[10,22]]]]],[],2,null,["loc",[null,[10,2],[14,11]]]],
          ["block","if",[["get","customStatuses.length",["loc",[null,[16,8],[16,29]]]]],[],3,4,["loc",[null,[16,2],[29,9]]]],
          ["block","each",[["get","closedStatuses",["loc",[null,[31,10],[31,24]]]]],[],5,null,["loc",[null,[31,2],[35,11]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.statuses"],[],["loc",[null,[1,47],[1,98]]]]],[],["loc",[null,[1,31],[1,99]]]]],0,null,["loc",[null,[1,0],[37,25]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 8
                    },
                    "end": {
                      "line": 15,
                      "column": 103
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.field_title"],[],["loc",[null,[15,49],[15,101]]]]],[],["loc",[null,[15,32],[15,103]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 101
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.field_title"],[],["loc",[null,[18,48],[18,99]]]]],[],["loc",[null,[18,31],[18,101]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
                return morphs;
              },
              statements: [
                ["block","ko-form/field/label",[],[],0,null,["loc",[null,[15,8],[15,127]]]],
                ["inline","input",[],["type","text","class","input-text u-1/1","name","title","value",["subexpr","@mut",[["get","caseField.title",["loc",[null,[16,72],[16,87]]]]],[],[]],"required",true,"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[16,126],[16,140]]]],["get","isTitleEditable",["loc",[null,[16,141],[16,156]]]]],[],["loc",[null,[16,115],[16,157]]]],["get","isSubmitting",["loc",[null,[16,158],[16,170]]]]],[],["loc",[null,[16,111],[16,171]]]]],["loc",[null,[16,8],[16,173]]]],
                ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.title",["loc",[null,[17,38],[17,60]]]]],[],[]]],["loc",[null,[17,8],[17,62]]]],
                ["block","ko-form/field/help",[],[],1,null,["loc",[null,[18,8],[18,124]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 22,
                      "column": 114
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_required_for_agents"],[],["loc",[null,[22,49],[22,112]]]]],[],["loc",[null,[22,32],[22,114]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 24,
                      "column": 8
                    },
                    "end": {
                      "line": 31,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                  return morphs;
                },
                statements: [
                  ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_required_for_agents_when_updating_case"],[],["loc",[null,[26,34],[26,116]]]]],[],["loc",[null,[26,18],[26,117]]]],"checked",["subexpr","@mut",[["get","caseField.isRequiredForAgents",["loc",[null,[27,20],[27,49]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[28,36],[28,50]]]],["get","isRequiredWhenCreatingEditable",["loc",[null,[28,51],[28,81]]]]],[],["loc",[null,[28,25],[28,82]]]],["get","isSubmitting",["loc",[null,[28,83],[28,95]]]]],[],["loc",[null,[28,21],[28,96]]]]],["loc",[null,[25,10],[29,12]]]],
                  ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isRequiredForAgents",["loc",[null,[30,40],[30,76]]]]],[],[]]],["loc",[null,[30,10],[30,78]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child2 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 33,
                      "column": 8
                    },
                    "end": {
                      "line": 40,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                  return morphs;
                },
                statements: [
                  ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_required_for_agents_when_resolving_case"],[],["loc",[null,[35,34],[35,117]]]]],[],["loc",[null,[35,18],[35,118]]]],"checked",["subexpr","@mut",[["get","caseField.isRequiredOnResolution",["loc",[null,[36,20],[36,52]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[37,36],[37,50]]]],["get","isRequiredWhenCreatingEditable",["loc",[null,[37,51],[37,81]]]]],[],["loc",[null,[37,25],[37,82]]]],["get","isSubmitting",["loc",[null,[37,83],[37,95]]]]],[],["loc",[null,[37,21],[37,96]]]]],["loc",[null,[34,10],[38,12]]]],
                  ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isRequiredOnResolution",["loc",[null,[39,40],[39,79]]]]],[],[]]],["loc",[null,[39,10],[39,81]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-form/field/label",[],[],0,null,["loc",[null,[22,8],[22,138]]]],
                ["block","ko-form/field",[],[],1,null,["loc",[null,[24,8],[31,26]]]],
                ["block","ko-form/field",[],["nogap",true],2,null,["loc",[null,[33,8],[40,26]]]]
              ],
              locals: [],
              templates: [child0, child1, child2]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [
              ["block","ko-form/field",[],[],0,null,["loc",[null,[14,6],[19,24]]]],
              ["block","if",[["subexpr","not",[["subexpr","eq",[["get","caseField.fieldType",["loc",[null,[21,21],[21,40]]]],"STATUS"],[],["loc",[null,[21,17],[21,50]]]]],[],["loc",[null,[21,12],[21,51]]]]],[],1,null,["loc",[null,[21,6],[41,13]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 44,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.agent_settings"],[],["loc",[null,[13,51],[13,108]]]]],[],["loc",[null,[13,35],[13,109]]]]],0,null,["loc",[null,[13,4],[43,29]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 6
                  },
                  "end": {
                    "line": 55,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_visible_to_customers"],[],["loc",[null,[50,32],[50,96]]]]],[],["loc",[null,[50,16],[50,97]]]],"checked",["subexpr","@mut",[["get","caseField.isVisibleToCustomers",["loc",[null,[51,18],[51,48]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[52,34],[52,48]]]],["get","isCustomerVisibleEditable",["loc",[null,[52,49],[52,74]]]]],[],["loc",[null,[52,23],[52,75]]]],["get","isSubmitting",["loc",[null,[52,76],[52,88]]]]],[],["loc",[null,[52,19],[52,89]]]]],["loc",[null,[49,8],[53,10]]]],
                ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isCustomerVisibleEditable",["loc",[null,[54,38],[54,80]]]]],[],[]]],["loc",[null,[54,8],[54,82]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-form/field",[],[],0,null,["loc",[null,[48,6],[55,24]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 60,
                      "column": 8
                    },
                    "end": {
                      "line": 60,
                      "column": 112
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.customer_field_title"],[],["loc",[null,[60,49],[60,110]]]]],[],["loc",[null,[60,32],[60,112]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 59,
                    "column": 6
                  },
                  "end": {
                    "line": 63,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                return morphs;
              },
              statements: [
                ["block","ko-form/field/label",[],[],0,null,["loc",[null,[60,8],[60,136]]]],
                ["inline","input",[],["class","input input-text","type","text","value",["subexpr","@mut",[["get","caseField.customerTitle",["loc",[null,[61,59],[61,82]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[61,107],[61,121]]]],["get","isCustomerFieldTitleEditable",["loc",[null,[61,122],[61,150]]]]],[],["loc",[null,[61,96],[61,151]]]],["get","isSubmitting",["loc",[null,[61,152],[61,164]]]]],[],["loc",[null,[61,92],[61,165]]]]],["loc",[null,[61,8],[61,167]]]],
                ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.customerTitle",["loc",[null,[62,38],[62,68]]]]],[],[]]],["loc",[null,[62,8],[62,70]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 67,
                        "column": 10
                      },
                      "end": {
                        "line": 67,
                        "column": 120
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.customer_field_description"],[],["loc",[null,[67,51],[67,118]]]]],[],["loc",[null,[67,34],[67,120]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              var child1 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 72,
                        "column": 10
                      },
                      "end": {
                        "line": 72,
                        "column": 103
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.field_title"],[],["loc",[null,[72,50],[72,101]]]]],[],["loc",[null,[72,33],[72,103]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 66,
                      "column": 8
                    },
                    "end": {
                      "line": 73,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","input");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(4);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
                  morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                  morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
                  return morphs;
                },
                statements: [
                  ["block","ko-form/field/label",[],[],0,null,["loc",[null,[67,10],[67,144]]]],
                  ["inline","textarea",[],["class","input-text","type","text","value",["subexpr","@mut",[["get","caseField.description",["loc",[null,[69,60],[69,81]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[69,91],[69,103]]]]],[],[]]],["loc",[null,[69,12],[69,105]]]],
                  ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.description",["loc",[null,[71,40],[71,68]]]]],[],[]]],["loc",[null,[71,10],[71,70]]]],
                  ["block","ko-form/field/help",[],[],1,null,["loc",[null,[72,10],[72,126]]]]
                ],
                locals: [],
                templates: [child0, child1]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 65,
                    "column": 6
                  },
                  "end": {
                    "line": 74,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-form/field",[],[],0,null,["loc",[null,[66,8],[73,26]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child2 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 84,
                        "column": 10
                      },
                      "end": {
                        "line": 84,
                        "column": 116
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.is_editable_by_customers"],[],["loc",[null,[84,50],[84,114]]]]],[],["loc",[null,[84,33],[84,116]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 77,
                      "column": 8
                    },
                    "end": {
                      "line": 85,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                  morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                  return morphs;
                },
                statements: [
                  ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_editable_by_customers"],[],["loc",[null,[79,34],[79,99]]]]],[],["loc",[null,[79,18],[79,100]]]],"checked",["subexpr","@mut",[["get","caseField.isCustomerEditable",["loc",[null,[80,20],[80,48]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[81,36],[81,50]]]],["get","isCustomerEditableEditable",["loc",[null,[81,51],[81,77]]]]],[],["loc",[null,[81,25],[81,78]]]],["get","isSubmitting",["loc",[null,[81,79],[81,91]]]]],[],["loc",[null,[81,21],[81,92]]]]],["loc",[null,[78,10],[82,12]]]],
                  ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isCustomerEditable",["loc",[null,[83,40],[83,75]]]]],[],[]]],["loc",[null,[83,10],[83,77]]]],
                  ["block","ko-form/field/help",[],[],0,null,["loc",[null,[84,10],[84,139]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 95,
                          "column": 12
                        },
                        "end": {
                          "line": 95,
                          "column": 119
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [
                      ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.is_required_for_customers"],[],["loc",[null,[95,52],[95,117]]]]],[],["loc",[null,[95,35],[95,119]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 88,
                        "column": 10
                      },
                      "end": {
                        "line": 96,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                    morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.is_required_for_customers"],[],["loc",[null,[90,36],[90,102]]]]],[],["loc",[null,[90,20],[90,103]]]],"checked",["subexpr","@mut",[["get","caseField.isRequiredForCustomers",["loc",[null,[91,22],[91,54]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[92,38],[92,52]]]],["get","isCustomerRequiredEditable",["loc",[null,[92,53],[92,79]]]]],[],["loc",[null,[92,27],[92,80]]]],["get","isSubmitting",["loc",[null,[92,81],[92,93]]]]],[],["loc",[null,[92,23],[92,94]]]]],["loc",[null,[89,12],[93,14]]]],
                    ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isRequiredForCustomers",["loc",[null,[94,42],[94,81]]]]],[],[]]],["loc",[null,[94,12],[94,83]]]],
                    ["block","ko-form/field/help",[],[],0,null,["loc",[null,[95,12],[95,142]]]]
                  ],
                  locals: [],
                  templates: [child0]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 87,
                      "column": 8
                    },
                    "end": {
                      "line": 97,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-form/field",[],[],0,null,["loc",[null,[88,10],[96,28]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 76,
                    "column": 6
                  },
                  "end": {
                    "line": 98,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-form/field",[],[],0,null,["loc",[null,[77,8],[85,26]]]],
                ["block","if",[["get","caseField.isCustomerEditable",["loc",[null,[87,14],[87,42]]]]],[],1,null,["loc",[null,[87,8],[97,15]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 100,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [
              ["block","ko-form/field",[],[],0,null,["loc",[null,[59,6],[63,24]]]],
              ["block","if",[["get","isCustomerDescriptionsVisible",["loc",[null,[65,12],[65,41]]]]],[],1,null,["loc",[null,[65,6],[74,13]]]],
              ["block","if",[["subexpr","and",[["get","isCustomerEditAvailable",["loc",[null,[76,17],[76,40]]]],["subexpr","not",[["subexpr","eq",[["get","caseField.fieldType",["loc",[null,[76,50],[76,69]]]],"MESSAGE"],[],["loc",[null,[76,46],[76,80]]]]],[],["loc",[null,[76,41],[76,81]]]]],[],["loc",[null,[76,12],[76,82]]]]],[],2,null,["loc",[null,[76,6],[98,13]]]]
            ],
            locals: [],
            templates: [child0, child1, child2]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 2
              },
              "end": {
                "line": 101,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","not",[["subexpr","eq",[["get","caseField.fieldType",["loc",[null,[47,19],[47,38]]]],"MESSAGE"],[],["loc",[null,[47,15],[47,49]]]]],[],["loc",[null,[47,10],[47,50]]]]],[],0,null,["loc",[null,[47,4],[56,11]]]],
            ["block","if",[["get","caseField.isVisibleToCustomers",["loc",[null,[58,10],[58,40]]]]],[],1,null,["loc",[null,[58,4],[100,11]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 103,
                "column": 2
              },
              "end": {
                "line": 105,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","component",[["subexpr","ko-helper",[["get","getAdminComponentForFieldType",["loc",[null,[104,27],[104,56]]]],["get","caseField.fieldType",["loc",[null,[104,57],[104,76]]]]],[],["loc",[null,[104,16],[104,77]]]]],["caseField",["subexpr","@mut",[["get","caseField",["loc",[null,[104,88],[104,97]]]]],[],[]],"options",["subexpr","@mut",[["get","caseField.options",["loc",[null,[104,106],[104,123]]]]],[],[]],"onOptionAddition",["subexpr","@mut",[["get","onOptionAddition",["loc",[null,[104,141],[104,157]]]]],[],[]],"onOptionRemoval",["subexpr","@mut",[["get","onOptionRemoval",["loc",[null,[104,174],[104,189]]]]],[],[]]],["loc",[null,[104,4],[104,191]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 109,
                    "column": 6
                  },
                  "end": {
                    "line": 109,
                    "column": 102
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.field_options"],[],["loc",[null,[109,46],[109,100]]]]],[],["loc",[null,[109,29],[109,102]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 111,
                    "column": 6
                  },
                  "end": {
                    "line": 113,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","ko-admin/case-fields/edit/options",[],["options",["subexpr","@mut",[["get","optionsList",["loc",[null,[112,52],[112,63]]]]],[],[]],"onOptionAddition",["subexpr","@mut",[["get","onOptionAddition",["loc",[null,[112,81],[112,97]]]]],[],[]],"onOptionRemoval",["subexpr","@mut",[["get","onOptionRemoval",["loc",[null,[112,114],[112,129]]]]],[],[]]],["loc",[null,[112,8],[112,131]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child2 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 113,
                    "column": 6
                  },
                  "end": {
                    "line": 117,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1,"class","u-pointer");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["get","onOptionAddition",["loc",[null,[114,21],[114,37]]]]],
                ["inline","format-message",[["subexpr","intl-get",["admin.fields.type.field_options.add_option"],[],["loc",[null,[115,27],[115,82]]]]],[],["loc",[null,[115,10],[115,84]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 108,
                  "column": 4
                },
                "end": {
                  "line": 118,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/help",[],[],0,null,["loc",[null,[109,6],[109,125]]]],
              ["block","if",[["get","optionsList",["loc",[null,[111,12],[111,23]]]]],[],1,2,["loc",[null,[111,6],[117,13]]]]
            ],
            locals: [],
            templates: [child0, child1, child2]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 107,
                "column": 2
              },
              "end": {
                "line": 119,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.field_options"],[],["loc",[null,[108,51],[108,107]]]]],[],["loc",[null,[108,35],[108,108]]]]],0,null,["loc",[null,[108,4],[118,29]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child4 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 133,
                          "column": 12
                        },
                        "end": {
                          "line": 133,
                          "column": 104
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [
                      ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.is_enabled"],[],["loc",[null,[133,52],[133,102]]]]],[],["loc",[null,[133,35],[133,104]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 127,
                        "column": 10
                      },
                      "end": {
                        "line": 134,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                    morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","caseField.isEnabled",["loc",[null,[129,24],[129,43]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","caseField.isEnabled",["loc",[null,[130,50],[130,69]]]],"admin.casefields.edit.description_on.is_enabled","admin.casefields.edit.description_off.is_enabled"],[],["loc",[null,[130,46],[130,171]]]]],[],["loc",[null,[130,36],[130,172]]]]],[],["loc",[null,[130,20],[130,173]]]]],["loc",[null,[128,12],[131,14]]]],
                    ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.isEnabled",["loc",[null,[132,42],[132,68]]]]],[],[]]],["loc",[null,[132,12],[132,70]]]],
                    ["block","ko-form/field/help",[],[],0,null,["loc",[null,[133,12],[133,127]]]]
                  ],
                  locals: [],
                  templates: [child0]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 126,
                      "column": 8
                    },
                    "end": {
                      "line": 135,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-form/field",[],[],0,null,["loc",[null,[127,10],[134,28]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 138,
                        "column": 10
                      },
                      "end": {
                        "line": 138,
                        "column": 101
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.label.api_key"],[],["loc",[null,[138,51],[138,99]]]]],[],["loc",[null,[138,34],[138,101]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              var child1 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 145,
                        "column": 10
                      },
                      "end": {
                        "line": 145,
                        "column": 99
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.api_key"],[],["loc",[null,[145,50],[145,97]]]]],[],["loc",[null,[145,33],[145,99]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 137,
                      "column": 8
                    },
                    "end": {
                      "line": 146,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(4);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                  morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                  morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
                  return morphs;
                },
                statements: [
                  ["block","ko-form/field/label",[],[],0,null,["loc",[null,[138,10],[138,125]]]],
                  ["inline","input",[],["class","input-text","type","text","value",["subexpr","@mut",[["get","caseField.key",["loc",[null,[142,18],[142,31]]]]],[],[]],"disabled",["subexpr","or",[["subexpr","ko-helper",[["get","disabledString",["loc",[null,[143,36],[143,50]]]],["get","isApiFieldKeyAvailable",["loc",[null,[143,51],[143,73]]]]],[],["loc",[null,[143,25],[143,74]]]],["get","isSubmitting",["loc",[null,[143,75],[143,87]]]]],[],["loc",[null,[143,21],[143,88]]]]],["loc",[null,[139,10],[143,90]]]],
                  ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseField.errors.key",["loc",[null,[144,40],[144,60]]]]],[],[]]],["loc",[null,[144,10],[144,62]]]],
                  ["block","ko-form/field/help",[],[],1,null,["loc",[null,[145,10],[145,122]]]]
                ],
                locals: [],
                templates: [child0, child1]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 124,
                    "column": 6
                  },
                  "end": {
                    "line": 148,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                return morphs;
              },
              statements: [
                ["block","if",[["get","isStatusKeyAvailable",["loc",[null,[126,14],[126,34]]]]],[],0,null,["loc",[null,[126,8],[135,15]]]],
                ["block","ko-form/field",[],[],1,null,["loc",[null,[137,8],[146,26]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 123,
                  "column": 4
                },
                "end": {
                  "line": 149,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.field_settings"],[],["loc",[null,[124,53],[124,110]]]]],[],["loc",[null,[124,37],[124,111]]]]],0,null,["loc",[null,[124,6],[148,31]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 122,
                "column": 2
              },
              "end": {
                "line": 150,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isStatusOrApiFieldAvailable",["loc",[null,[123,10],[123,37]]]]],[],0,null,["loc",[null,[123,4],[149,11]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 153,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,9,9,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,13,13,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-admin/page-header",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[7,12],[7,17]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[8,33],[8,58]]]]],[],["loc",[null,[8,17],[8,59]]]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[9,15],[9,23]]]]],[],[]]],["loc",[null,[6,2],[10,4]]]],
          ["block","if",[["subexpr","not",[["subexpr","eq",[["get","caseField.fieldType",["loc",[null,[12,17],[12,36]]]],"MESSAGE"],[],["loc",[null,[12,13],[12,47]]]]],[],["loc",[null,[12,8],[12,48]]]]],[],0,null,["loc",[null,[12,2],[44,9]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.customer_settings"],[],["loc",[null,[46,49],[46,109]]]]],[],["loc",[null,[46,33],[46,110]]]]],1,null,["loc",[null,[46,2],[101,27]]]],
          ["block","if",[["subexpr","ko-helper",[["get","getAdminComponentForFieldType",["loc",[null,[103,19],[103,48]]]],["get","caseField.fieldType",["loc",[null,[103,49],[103,68]]]]],[],["loc",[null,[103,8],[103,69]]]]],[],2,null,["loc",[null,[103,2],[105,9]]]],
          ["block","if",[["get","caseField.isChoiceField",["loc",[null,[107,8],[107,31]]]]],[],3,null,["loc",[null,[107,2],[119,9]]]],
          ["block","if",[["subexpr","not",[["get","caseField.isSystem",["loc",[null,[122,13],[122,31]]]]],[],["loc",[null,[122,8],[122,32]]]]],[],4,null,["loc",[null,[122,2],[150,9]]]],
          ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[152,52],[152,77]]]]],[],["loc",[null,[152,36],[152,78]]]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[152,88],[152,96]]]]],[],[]]],["loc",[null,[152,2],[152,98]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 153,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-form",[],["onSubmit",["subexpr","@mut",[["get","onSave",["loc",[null,[2,11],[2,17]]]]],[],[]],"onSuccess",["subexpr","@mut",[["get","onSuccess",["loc",[null,[3,12],[3,21]]]]],[],[]]],0,null,["loc",[null,[1,0],[153,12]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/edit/types/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var SYSTEM_CASEFIELD_TYPE_IDS = [1, 2, 3, 4];

  exports['default'] = Ember['default'].Component.extend({
    store: Ember['default'].inject.service(),

    types: [],
    initTypes: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-type').then(function (types) {
        _this.set('types', types);
      });
    }),

    systemTypes: Ember['default'].computed('types.@each.id', function () {
      return this.get('types').filter(function (type) {
        return SYSTEM_CASEFIELD_TYPE_IDS.indexOf(parseInt(type.get('id'))) !== -1;
      });
    }),

    customTypes: Ember['default'].computed('types.@each.id', function () {
      return this.get('types').filter(function (type) {
        return SYSTEM_CASEFIELD_TYPE_IDS.indexOf(parseInt(type.get('id'))) === -1;
      });
    }),

    actions: {
      createType: function createType() {
        this.get('store').createRecord('case-type');
      },

      removeType: function removeType(type) {
        type.destroyRecord()['catch'](function () {
          type.rollback();
        });
      }
    }

  });

});
define('frontend-cp/components/ko-admin/case-fields/edit/types/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.help.types"],[],["loc",[null,[3,21],[3,66]]]]],[],["loc",[null,[3,4],[3,68]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","type.label",["loc",[null,[8,57],[8,67]]]]],[],[]],"disabled","disabled"],["loc",[null,[8,6],[8,89]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[7,4],[9,22]]]]
          ],
          locals: ["type"],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","input",[],["type","text","class","input input-text","value",["subexpr","@mut",[["get","type.label",["loc",[null,[19,57],[19,67]]]]],[],[]]],["loc",[null,[19,6],[19,69]]]]
            ],
            locals: ["type"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-reorderable-crud-list",[],["removeItemAction","removeType","createItemAction","createType","items",["subexpr","@mut",[["get","customTypes",["loc",[null,[16,12],[16,23]]]]],[],[]]],0,null,["loc",[null,[13,4],[20,33]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","types__add-type-message");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,0,0);
            return morphs;
          },
          statements: [
            ["element","action",["createType"],[],["loc",[null,[22,41],[22,64]]]],
            ["inline","format-message",[["subexpr","intl-get",["admin.casefields.edit.add_new_type"],[],["loc",[null,[22,82],[22,129]]]]],[],["loc",[null,[22,65],[22,131]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-form/field/help",[],[],0,null,["loc",[null,[2,2],[4,25]]]],
          ["block","each",[["get","systemTypes",["loc",[null,[6,10],[6,21]]]]],[],1,null,["loc",[null,[6,2],[10,11]]]],
          ["block","if",[["get","customTypes.length",["loc",[null,[12,8],[12,26]]]]],[],2,3,["loc",[null,[12,2],[23,9]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.edit.heading.types"],[],["loc",[null,[1,47],[1,95]]]]],[],["loc",[null,[1,31],[1,96]]]]],0,null,["loc",[null,[1,0],[26,25]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/index/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    model: null,

    customFields: Ember['default'].inject.service('custom-fields'),
    session: Ember['default'].inject.service(),

    systemfields: Ember['default'].computed('model.@each.isSystem', function () {
      return this.get('model').filter(function (field) {
        return field.get('isSystem');
      });
    }),

    customfields: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      toggleEnabledStatus: function toggleEnabledStatus(casefield) {
        this.get('customFields').toggleEnabled(casefield);
      },

      showDeleteConfirmation: function showDeleteConfirmation(field) {
        if (confirm('Are you sure you wish to delete this field?')) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        this.get('customFields').destroyRecord(field);
      },

      editField: function editField(field) {
        this.container.lookup('router:main').transitionTo('session.admin.manage.case-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-fields/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 28,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout layout--middle");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-caption");
                var el4 = dom.createTextNode("(System)");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","flag flag--small");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__img");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__body");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5,"class","t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element14 = dom.childAt(fragment, [1]);
                var element15 = dom.childAt(element14, [3, 1]);
                var element16 = dom.childAt(element15, [1, 1]);
                var element17 = dom.childAt(element14, [5, 1, 1]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(dom.childAt(element14, [1, 1]),0,0);
                morphs[1] = dom.createAttrMorph(element16, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element15, [3, 1]),0,0);
                morphs[3] = dom.createElementMorph(element17);
                morphs[4] = dom.createMorphAt(element17,0,0);
                return morphs;
              },
              statements: [
                ["content","systemfield.title",["loc",[null,[10,41],[10,62]]]],
                ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[15,93],[15,125]]]],["get","systemfield.fieldType",["loc",[null,[15,126],[15,147]]]]],[],["loc",[null,[15,81],[15,149]]]]]]],
                ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[18,87],[18,123]]]],["get","systemfield.fieldType",["loc",[null,[18,124],[18,145]]]]],[],["loc",[null,[18,76],[18,146]]]]],[],["loc",[null,[18,66],[18,147]]]]],[],["loc",[null,[18,49],[18,149]]]],
                ["element","action",["editField",["get","systemfield",["loc",[null,[24,53],[24,64]]]]],[],["loc",[null,[24,32],[24,66]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[24,84],[24,109]]]]],[],["loc",[null,[24,67],[24,111]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 29,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","systemfield",["loc",[null,[7,57],[7,68]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[7,8],[28,31]]]]
            ],
            locals: ["systemfield"],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 8
                  },
                  "end": {
                    "line": 55,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout layout--middle");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","flag flag--small");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__img");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__body");
                var el5 = dom.createTextNode("\n                        ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5,"class","t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n                ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n                    ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]),0,0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]),0,0);
                morphs[3] = dom.createElementMorph(element11);
                morphs[4] = dom.createMorphAt(element11,0,0);
                morphs[5] = dom.createElementMorph(element12);
                morphs[6] = dom.createMorphAt(element12,0,0);
                morphs[7] = dom.createElementMorph(element13);
                morphs[8] = dom.createMorphAt(element13,0,0);
                return morphs;
              },
              statements: [
                ["content","customfield.title",["loc",[null,[35,41],[35,62]]]],
                ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[40,93],[40,125]]]],["get","customfield.fieldType",["loc",[null,[40,126],[40,147]]]]],[],["loc",[null,[40,81],[40,149]]]]]]],
                ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[43,87],[43,123]]]],["get","customfield.fieldType",["loc",[null,[43,124],[43,145]]]]],[],["loc",[null,[43,76],[43,146]]]]],[],["loc",[null,[43,66],[43,147]]]]],[],["loc",[null,[43,49],[43,149]]]],
                ["element","action",["editField",["get","customfield",["loc",[null,[49,53],[49,64]]]]],[],["loc",[null,[49,32],[49,66]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[49,84],[49,109]]]]],[],["loc",[null,[49,67],[49,111]]]],
                ["element","action",["toggleEnabledStatus",["get","customfield",["loc",[null,[50,63],[50,74]]]]],[],["loc",[null,[50,32],[50,76]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[50,94],[50,122]]]]],[],["loc",[null,[50,77],[50,124]]]],
                ["element","action",["showDeleteConfirmation",["get","customfield",["loc",[null,[51,66],[51,77]]]]],[],["loc",[null,[51,32],[51,79]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[51,97],[51,124]]]]],[],["loc",[null,[51,80],[51,126]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","customfield",["loc",[null,[32,57],[32,68]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[32,8],[55,31]]]]
            ],
            locals: ["customfield"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 57,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[4,25],[4,53]]]]],[],["loc",[null,[4,8],[4,55]]]],
            ["block","each",[["get","systemfields",["loc",[null,[6,14],[6,26]]]]],[],0,null,["loc",[null,[6,6],[29,15]]]],
            ["block","ko-reorderable-list",[],["reorderedListAction","reorderCustomFields","items",["subexpr","@mut",[["get","customfields",["loc",[null,[31,77],[31,89]]]]],[],[]]],1,null,["loc",[null,[31,6],[56,30]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 65,
                      "column": 10
                    },
                    "end": {
                      "line": 88,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                      ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","flag flag--small");
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__img");
                  var el5 = dom.createTextNode("\n                          ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__body");
                  var el5 = dom.createTextNode("\n                          ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5,"class","u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                      ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
                  morphs[3] = dom.createElementMorph(element4);
                  morphs[4] = dom.createMorphAt(element4,0,0);
                  morphs[5] = dom.createElementMorph(element5);
                  morphs[6] = dom.createMorphAt(element5,0,0);
                  morphs[7] = dom.createElementMorph(element6);
                  morphs[8] = dom.createMorphAt(element6,0,0);
                  return morphs;
                },
                statements: [
                  ["content","disabledfield.title",["loc",[null,[68,53],[68,76]]]],
                  ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[73,95],[73,127]]]],["get","disabledfield.fieldType",["loc",[null,[73,128],[73,151]]]]],[],["loc",[null,[73,83],[73,153]]]]]]],
                  ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[76,92],[76,128]]]],["get","disabledfield.fieldType",["loc",[null,[76,129],[76,152]]]]],[],["loc",[null,[76,81],[76,153]]]]],[],["loc",[null,[76,71],[76,154]]]]],[],["loc",[null,[76,54],[76,156]]]],
                  ["element","action",["editField",["get","disabledfield",["loc",[null,[82,55],[82,68]]]]],[],["loc",[null,[82,34],[82,70]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[82,88],[82,113]]]]],[],["loc",[null,[82,71],[82,115]]]],
                  ["element","action",["toggleEnabledStatus",["get","disabledfield",["loc",[null,[83,65],[83,78]]]]],[],["loc",[null,[83,34],[83,80]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[83,98],[83,125]]]]],[],["loc",[null,[83,81],[83,127]]]],
                  ["element","action",["showDeleteConfirmation",["get","disabledfield",["loc",[null,[84,68],[84,81]]]]],[],["loc",[null,[84,34],[84,83]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[84,101],[84,128]]]]],[],["loc",[null,[84,84],[84,130]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 64,
                    "column": 8
                  },
                  "end": {
                    "line": 89,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","disabledfield",["loc",[null,[65,59],[65,72]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[65,10],[88,33]]]]
              ],
              locals: ["disabledfield"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[62,27],[62,56]]]]],[],["loc",[null,[62,10],[62,58]]]],
              ["block","each",[["get","disabledfields",["loc",[null,[64,16],[64,30]]]]],[],0,null,["loc",[null,[64,8],[89,17]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 59,
                "column": 2
              },
              "end": {
                "line": 91,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[60,4],[90,23]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 92,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[2,2],[57,21]]]],
          ["block","if",[["get","disabledfields.length",["loc",[null,[59,8],[59,29]]]]],[],1,null,["loc",[null,[59,2],[91,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 93,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[1,0],[92,25]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/select-type/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    customFieldsTypes: Ember['default'].inject.service('custom-fields/types'),

    availableTypes: Ember['default'].computed.alias('customFieldsTypes.availableTypes'),

    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.attrs.onFieldTypeSelect(caseFieldType);
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-fields/select-type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-admin_case-fields_select-type");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","flag flag--small");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","flag__img");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","flag__body");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          dom.setAttribute(el4,"class","t-bold u-mb--");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("p");
          dom.setAttribute(el4,"class","t-caption");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-admin_case-fields_select-type__action");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","i-chevron-large-right i-color-grey");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element1, [1, 1]);
          var element3 = dom.childAt(element1, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
          return morphs;
        },
        statements: [
          ["element","action",["setCaseFieldType",["get","availableType.name",["loc",[null,[2,76],[2,94]]]]],[],["loc",[null,[2,48],[2,96]]]],
          ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["get","availableType.name",["loc",[null,[5,67],[5,85]]]]]]],
          ["inline","format-message",[["subexpr","intl-get",[["get","availableType.nameIntlKey",["loc",[null,[8,60],[8,85]]]]],[],["loc",[null,[8,50],[8,86]]]]],[],["loc",[null,[8,33],[8,88]]]],
          ["inline","format-message",[["subexpr","intl-get",[["get","availableType.descriptionIntlKey",["loc",[null,[9,56],[9,88]]]]],[],["loc",[null,[9,46],[9,89]]]]],[],["loc",[null,[9,29],[9,91]]]]
        ],
        locals: ["availableType"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","availableTypes",["loc",[null,[1,8],[1,22]]]]],[],0,null,["loc",[null,[1,0],[16,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-fields/type-icon/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    fieldType: null,

    iconClass: Ember['default'].computed.readOnly('fieldType'),
    classNameBindings: [':ko-admin_case-fields_type-icon', 'iconClass']
  });

});
define('frontend-cp/components/ko-admin/case-fields/type-icon/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/type-icon/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-forms/edit/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    caseForm: null,
    title: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},

    fields: null,

    initFields: Ember['default'].on('init', function () {
      this.set('fields', Ember['default'].Object.create({
        case_field_ids: {}
      }));
    }),

    actions: {
      addCaseFieldToForm: function addCaseFieldToForm(caseField) {
        this.get('caseForm.fields').pushObject(caseField);
      },

      removeCaseFieldFromForm: function removeCaseFieldFromForm(caseField) {
        this.get('caseForm.fields').removeObject(caseField);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('caseForm').save().then(function () {
          _this.get('caseForm').cacheRelationships();
        });
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-forms/edit/fields/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    caseFields: [],
    onCaseFieldAddition: function onCaseFieldAddition() {},
    onCaseFieldRemoval: function onCaseFieldRemoval() {},

    store: Ember['default'].inject.service(),
    availableCaseFields: [],

    initAvailableCaseFields: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').find('case-field').then(function (caseFields) {
        _this.set('availableCaseFields', caseFields);
      });
    }),

    systemCaseFields: Ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return caseField.get('isSystem');
      });
    }),

    customCaseFields: Ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return !caseField.get('isSystem');
      });
    }),

    unusedCaseFields: Ember['default'].computed('customCaseFields', 'availableCaseFields', function () {
      var usedCustomFields = this.get('customCaseFields');

      var availableCustomFields = this.get('availableCaseFields').filter(function (field) {
        return !field.get('isSystem');
      });

      return availableCustomFields.filter(function (customField) {
        return usedCustomFields.indexOf(customField) === -1;
      });
    }),

    actions: {
      reorderFields: function reorderFields(reorderedFields) {
        var sortOrder = this.get('systemCaseFields.length') - 1;

        reorderedFields.forEach(function (reorderedField) {
          reorderedField.set('sortOrder', sortOrder);
          sortOrder++;
        });
      }
    }
  });

});
define('frontend-cp/components/ko-admin/case-forms/edit/fields/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","t-caption");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4,"class","t-bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" (System)");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 1, 0]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [3, 1]),0,0);
            return morphs;
          },
          statements: [
            ["content","field.title",["loc",[null,[5,53],[5,68]]]],
            ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-intl-key-for-field-type",[["get","field.fieldType",["loc",[null,[8,88],[8,103]]]]],[],["loc",[null,[8,60],[8,104]]]]],[],["loc",[null,[8,50],[8,105]]]]],[],["loc",[null,[8,33],[8,107]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-box-row",[],[],0,null,["loc",[null,[2,2],[11,24]]]]
        ],
        locals: ["field"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","t-caption t-bold");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3,"class","t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","ko-admin_case-forms_edit_fields__action");
            var el4 = dom.createTextNode("\n           ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element1, [1, 1]),0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
            morphs[2] = dom.createAttrMorph(element2, 'onclick');
            morphs[3] = dom.createMorphAt(element2,1,1);
            return morphs;
          },
          statements: [
            ["content","field.title",["loc",[null,[18,39],[18,54]]]],
            ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-intl-key-for-field-type",[["get","field.fieldType",["loc",[null,[21,88],[21,103]]]]],[],["loc",[null,[21,60],[21,104]]]]],[],["loc",[null,[21,50],[21,105]]]]],[],["loc",[null,[21,33],[21,107]]]],
            ["attribute","onclick",["subexpr","action",[["get","onCaseFieldRemoval",["loc",[null,[24,31],[24,49]]]],["get","field",["loc",[null,[24,50],[24,55]]]]],[],["loc",[null,[24,22],[24,58]]]]],
            ["inline","format-message",[["subexpr","intl-get",["admin.caseforms.remove_from_form"],[],["loc",[null,[25,28],[25,73]]]]],[],["loc",[null,[25,11],[25,75]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-box-row",[],[],0,null,["loc",[null,[15,2],[29,24]]]]
        ],
        locals: ["field"],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 2
                },
                "end": {
                  "line": 37,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-dropdown_list__item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createMorphAt(element0,0,0);
              return morphs;
            },
            statements: [
              ["attribute","onclick",["subexpr","action",[["get","onCaseFieldAddition",["loc",[null,[36,56],[36,75]]]],["get","field",["loc",[null,[36,76],[36,81]]]]],[],["loc",[null,[36,47],[36,83]]]]],
              ["content","field.title",["loc",[null,[36,84],[36,99]]]]
            ],
            locals: ["field"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 0
              },
              "end": {
                "line": 38,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","each",[["get","unusedCaseFields",["loc",[null,[34,10],[34,26]]]]],[],0,null,["loc",[null,[34,2],[37,11]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-dropdown/select",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.label.add_new_field"],[],["loc",[null,[33,44],[33,92]]]]],[],["loc",[null,[33,28],[33,93]]]]],0,null,["loc",[null,[33,0],[38,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","systemCaseFields",["loc",[null,[1,8],[1,24]]]]],[],0,null,["loc",[null,[1,0],[12,9]]]],
        ["block","ko-reorderable-list",[],["reorderedListAction","reorderFields","items",["subexpr","@mut",[["get","customCaseFields",["loc",[null,[14,65],[14,81]]]]],[],[]]],1,null,["loc",[null,[14,0],[30,24]]]],
        ["block","if",[["get","unusedCaseFields",["loc",[null,[32,6],[32,22]]]]],[],2,null,["loc",[null,[32,0],[39,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-admin/case-forms/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 95
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.caseforms.label.field_title"],[],["loc",[null,[14,47],[14,93]]]]],[],["loc",[null,[14,30],[14,95]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[14,6],[14,119]]]],
              ["inline","input",[],["class","input input-text","type","text","value",["subexpr","@mut",[["get","caseForm.title",["loc",[null,[15,57],[15,71]]]]],[],[]],"required",true,"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[15,95],[15,107]]]]],[],[]]],["loc",[null,[15,6],[15,109]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseForm.errors.title",["loc",[null,[16,36],[16,57]]]]],[],[]]],["loc",[null,[16,6],[16,59]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","caseForm.isEnabled",["loc",[null,[21,18],[21,36]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","caseForm.isEnabled",["loc",[null,[22,44],[22,62]]]],"admin.caseforms.edit.description_on.is_enabled","admin.caseforms.edit.description_off.is_enabled"],[],["loc",[null,[22,40],[22,162]]]]],[],["loc",[null,[22,30],[22,163]]]]],[],["loc",[null,[22,14],[22,164]]]]],["loc",[null,[20,6],[23,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseForm.errors.isEnabled",["loc",[null,[24,36],[24,61]]]]],[],[]]],["loc",[null,[24,6],[24,63]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[13,4],[17,22]]]],
            ["block","ko-form/field",[],[],1,null,["loc",[null,[19,4],[25,22]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 6
                  },
                  "end": {
                    "line": 33,
                    "column": 105
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.caseforms.help.is_visible_to_customers"],[],["loc",[null,[33,46],[33,103]]]]],[],["loc",[null,[33,29],[33,105]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-checkbox",[],["label",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.label.is_visible_to_customers"],[],["loc",[null,[31,42],[31,100]]]]],[],["loc",[null,[31,26],[31,101]]]],"checked",["subexpr","@mut",[["get","caseForm.isVisibleToCustomers",["loc",[null,[31,110],[31,139]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[31,149],[31,161]]]]],[],[]]],["loc",[null,[31,6],[31,163]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseForm.errors.isVisibleToCustomers",["loc",[null,[32,36],[32,72]]]]],[],[]]],["loc",[null,[32,6],[32,74]]]],
              ["block","ko-form/field/help",[],[],0,null,["loc",[null,[33,6],[33,128]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 8
                    },
                    "end": {
                      "line": 38,
                      "column": 105
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.caseforms.label.customer_form_title"],[],["loc",[null,[38,49],[38,103]]]]],[],["loc",[null,[38,32],[38,105]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                return morphs;
              },
              statements: [
                ["block","ko-form/field/label",[],[],0,null,["loc",[null,[38,8],[38,129]]]],
                ["inline","input",[],["class","input input-text","type","text","value",["subexpr","@mut",[["get","caseForm.customerTitle",["loc",[null,[39,59],[39,81]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[39,91],[39,103]]]]],[],[]]],["loc",[null,[39,8],[39,105]]]],
                ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseForm.errors.customerTitle",["loc",[null,[40,38],[40,67]]]]],[],[]]],["loc",[null,[40,8],[40,69]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 44,
                      "column": 8
                    },
                    "end": {
                      "line": 44,
                      "column": 111
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["admin.caseforms.label.customer_form_description"],[],["loc",[null,[44,49],[44,109]]]]],[],["loc",[null,[44,32],[44,111]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 47,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
                return morphs;
              },
              statements: [
                ["block","ko-form/field/label",[],[],0,null,["loc",[null,[44,8],[44,135]]]],
                ["inline","textarea",[],["class","input input-text","value",["subexpr","@mut",[["get","caseForm.description",["loc",[null,[45,50],[45,70]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[45,80],[45,92]]]]],[],[]]],["loc",[null,[45,8],[45,94]]]],
                ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","caseForm.errors.description",["loc",[null,[46,38],[46,65]]]]],[],[]]],["loc",[null,[46,8],[46,67]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-form/field",[],[],0,null,["loc",[null,[37,6],[41,24]]]],
              ["block","ko-form/field",[],[],1,null,["loc",[null,[43,6],[47,24]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 2
              },
              "end": {
                "line": 49,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[30,4],[34,22]]]],
            ["block","if",[["get","caseForm.isVisibleToCustomers",["loc",[null,[36,10],[36,39]]]]],[],1,null,["loc",[null,[36,4],[48,11]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-admin/case-forms/edit/fields",[],["caseFields",["subexpr","@mut",[["get","caseForm.fields",["loc",[null,[54,19],[54,34]]]]],[],[]],"onCaseFieldAddition",["subexpr","action",["addCaseFieldToForm"],[],["loc",[null,[55,28],[55,57]]]],"onCaseFieldRemoval",["subexpr","action",["removeCaseFieldFromForm"],[],["loc",[null,[56,27],[56,61]]]]],["loc",[null,[53,6],[57,8]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.case_field_ids",["loc",[null,[52,27],[52,48]]]]],[],[]]],0,null,["loc",[null,[52,4],[58,22]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 65,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,9,9,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-admin/page-header",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[7,10],[7,15]]]]],[],[]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[8,13],[8,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[9,31],[9,56]]]]],[],["loc",[null,[9,15],[9,57]]]]],["loc",[null,[6,2],[10,4]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.heading.agent_settings"],[],["loc",[null,[12,49],[12,100]]]]],[],["loc",[null,[12,33],[12,101]]]]],0,null,["loc",[null,[12,2],[26,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.heading.customer_settings"],[],["loc",[null,[29,49],[29,103]]]]],[],["loc",[null,[29,33],[29,104]]]]],1,null,["loc",[null,[29,2],[49,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.heading.configure_form"],[],["loc",[null,[51,49],[51,100]]]]],[],["loc",[null,[51,33],[51,101]]]]],2,null,["loc",[null,[51,2],[59,27]]]],
          ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[62,13],[62,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[63,31],[63,56]]]]],[],["loc",[null,[63,15],[63,57]]]]],["loc",[null,[61,2],[64,4]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-form",[],["fields",["subexpr","@mut",[["get","fields",["loc",[null,[2,9],[2,15]]]]],[],[]],"onSubmit",["subexpr","action",["saveField"],[],["loc",[null,[3,11],[3,31]]]],"onSuccess",["subexpr","@mut",[["get","onSuccess",["loc",[null,[4,12],[4,21]]]]],[],[]]],0,null,["loc",[null,[1,0],[65,12]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/forms/group/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['form-section']
  });

});
define('frontend-cp/components/ko-admin/forms/group/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout__item u-1/4");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("legend");
          dom.setAttribute(el2,"class","ko-admin-form-group__legend");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout__item u-3/4");
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          return morphs;
        },
        statements: [
          ["content","legend",["loc",[null,[4,52],[4,62]]]],
          ["content","yield",["loc",[null,[7,5],[7,14]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[10,4],[10,13]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","if",[["get","legend",["loc",[null,[2,8],[2,14]]]]],[],0,1,["loc",[null,[2,2],[11,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-admin/forms/table/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-admin/forms/table/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/forms/table/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-admin/page-container/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // State
    resizeSidebarsRequestID: null,

    resizeSidebarAndContent: Ember['default'].on('willInsertElement', function () {
      var _this = this;

      this.set('resizeSidebarsRequestID', window.requestAnimationFrame(function () {
        var sideBar = $('.ko-admin-sidebar');
        var content = $('.ko-admin-content');
        sideBar.css('min-height', content.height());

        _this.resizeSidebarAndContent();
      }));
    }),

    cleanup: Ember['default'].on('willDestroyElement', function () {
      window.cancelAnimationFrame(this.get('resizeSidebarsRequestID'));
    })

  });

});
define('frontend-cp/components/ko-admin/page-container/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 10
            },
            "end": {
              "line": 6,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","content layout layout--flush");
        var el3 = dom.createTextNode("\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-4/5 ko-admin-content");
        var el4 = dom.createTextNode("\n            ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","content__main content__main--has-sidebar content__main--admin");
        var el5 = dom.createTextNode("\n              ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n            ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5, 1]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["admin.administration"],[],["loc",[null,[3,29],[3,62]]]]],[],["loc",[null,[3,12],[3,64]]]],
        ["block","ko-admin/sidebar",[],[],0,null,["loc",[null,[5,10],[6,31]]]],
        ["content","outlet",["loc",[null,[9,14],[9,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/page-footer/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null
  });

});
define('frontend-cp/components/ko-admin/page-footer/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-footer/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-form/buttons",[],["submitLabel",["subexpr","@mut",[["get","buttonText",["loc",[null,[1,30],[1,40]]]]],[],[]],"cancelLabel",["subexpr","@mut",[["get","cancelButtonText",["loc",[null,[1,53],[1,69]]]]],[],[]],"onSubmit",["subexpr","@mut",[["get","onSave",["loc",[null,[1,79],[1,85]]]]],[],[]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[1,95],[1,103]]]]],[],[]]],["loc",[null,[1,0],[1,105]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-admin/page-header/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    title: null,
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null,

    titleTrail: Ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(0, title.lastIndexOf('/') + 1);
    }),

    pageTitle: Ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(title.lastIndexOf('/') + 1).trim();
    })
  });

});
define('frontend-cp/components/ko-admin/page-header/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","t-caption");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","titleTrail",["loc",[null,[6,34],[6,48]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-admin-header__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","pageCopy",["loc",[null,[19,4],[19,16]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-2/3 u-v-align");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4,"class","ko-admin-header__title");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/3 t-right");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1,1,1);
        morphs[1] = dom.createMorphAt(element1,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","titleTrail",["loc",[null,[5,14],[5,24]]]]],[],0,null,["loc",[null,[5,8],[7,15]]]],
        ["content","pageTitle",["loc",[null,[8,8],[8,21]]]],
        ["inline","ko-form/buttons",[],["submitLabel",["subexpr","@mut",[["get","buttonText",["loc",[null,[12,38],[12,48]]]]],[],[]],"cancelLabel",["subexpr","@mut",[["get","cancelButtonText",["loc",[null,[12,61],[12,77]]]]],[],[]],"onSubmit",["subexpr","@mut",[["get","onSave",["loc",[null,[12,87],[12,93]]]]],[],[]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[12,103],[12,111]]]]],[],[]]],["loc",[null,[12,8],[12,113]]]],
        ["block","if",[["get","pageCopy",["loc",[null,[17,6],[17,14]]]]],[],1,null,["loc",[null,[17,0],[21,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-admin/sidebar/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['layout__item', 'u-1/5']
  });

});
define('frontend-cp/components/ko-admin/sidebar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.twitter"],[],["loc",[null,[7,21],[7,47]]]]],[],["loc",[null,[7,4],[7,49]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 2
            },
            "end": {
              "line": 17,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.views"],[],["loc",[null,[16,21],[16,45]]]]],[],["loc",[null,[16,4],[16,47]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.casefields"],[],["loc",[null,[20,21],[20,50]]]]],[],["loc",[null,[20,4],[20,52]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.caseforms"],[],["loc",[null,[24,21],[24,49]]]]],[],["loc",[null,[24,4],[24,51]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.teams"],[],["loc",[null,[34,21],[34,45]]]]],[],["loc",[null,[34,4],[34,47]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 2
            },
            "end": {
              "line": 39,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.userfields"],[],["loc",[null,[38,21],[38,50]]]]],[],["loc",[null,[38,4],[38,52]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["admin.organizationfields"],[],["loc",[null,[42,21],[42,58]]]]],[],["loc",[null,[42,4],[42,60]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin_sidebar__group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","ko-admin_sidebar__header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin_sidebar__group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","ko-admin_sidebar__header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin_sidebar__group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","ko-admin_sidebar__header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
        morphs[3] = dom.createMorphAt(element1,3,3);
        morphs[4] = dom.createMorphAt(element1,5,5);
        morphs[5] = dom.createMorphAt(element1,7,7);
        morphs[6] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
        morphs[7] = dom.createMorphAt(element2,3,3);
        morphs[8] = dom.createMorphAt(element2,5,5);
        morphs[9] = dom.createMorphAt(element2,7,7);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["admin.navigation.channels"],[],["loc",[null,[3,21],[3,59]]]]],[],["loc",[null,[3,4],[3,61]]]],
        ["block","link-to",["session.admin.channels.twitter"],["class","t-naked-link ko-admin_sidebar__item"],0,null,["loc",[null,[6,2],[8,14]]]],
        ["inline","format-message",[["subexpr","intl-get",["admin.navigation.manage"],[],["loc",[null,[13,21],[13,57]]]]],[],["loc",[null,[13,4],[13,59]]]],
        ["block","link-to",["session.admin.manage.views"],["class","t-naked-link ko-admin_sidebar__item"],1,null,["loc",[null,[15,2],[17,14]]]],
        ["block","link-to",["session.admin.manage.case-fields"],["class","t-naked-link ko-admin_sidebar__item"],2,null,["loc",[null,[19,2],[21,14]]]],
        ["block","link-to",["session.admin.manage.case-forms"],["class","t-naked-link ko-admin_sidebar__item"],3,null,["loc",[null,[23,2],[25,14]]]],
        ["inline","format-message",[["subexpr","intl-get",["admin.navigation.people"],[],["loc",[null,[31,21],[31,57]]]]],[],["loc",[null,[31,4],[31,59]]]],
        ["block","link-to",["session.admin.people.teams"],["class","t-naked-link ko-admin_sidebar__item"],4,null,["loc",[null,[33,2],[35,14]]]],
        ["block","link-to",["session.admin.people.user-fields"],["class","t-naked-link ko-admin_sidebar__item"],5,null,["loc",[null,[37,2],[39,14]]]],
        ["block","link-to",["session.admin.people.organization-fields"],["class","t-naked-link ko-admin_sidebar__item"],6,null,["loc",[null,[41,2],[43,14]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('frontend-cp/components/ko-admin/team/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var inject = Ember['default'].inject;
  var computed = Ember['default'].computed;
  var RSVP = Ember['default'].RSVP;

  exports['default'] = Ember['default'].Component.extend({
    // params
    title: null,
    team: null,
    agents: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},

    intl: inject.service(),
    session: inject.service(),

    filter: '',
    membersToAdd: null,
    membersToRemove: null,

    initMembers: Ember['default'].on('init', function () {
      this.set('membersToAdd', []);
      this.set('membersToRemove', []);
    }),

    initFields: Ember['default'].on('init', function () {
      this.set('membersToRemove', []);
      this.set('membersToAdd', []);
    }),

    nonMembers: computed('agents.[]', 'team.members.[]', function () {
      var _this = this;

      return this.get('agents').filter(function (agent) {
        return !_this.get('team.members').contains(agent);
      });
    }),

    filteredMembers: computed('filter', function () {
      var members = this.get('team.members');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    filteredNonMembers: computed('filter', 'nonMembers', function () {
      var members = this.get('nonMembers');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    userHasChangedModel: function userHasChangedModel() {
      var bufferedChanges = this.get('membersToAdd').length > 0 || this.get('membersToRemove').length > 0;
      if (this.get('team.isDeleted')) {
        return false;
      } else {
        return this.get('team.hasDirtyAttributes') || bufferedChanges;
      }
    },

    matchesFilter: function matchesFilter(text) {
      var regEx = new RegExp(this.get('filter').trim(), 'i');
      return regEx.test(text);
    },

    filterByFullName: function filterByFullName(members) {
      var _this2 = this;

      return members.filter(function (member) {
        return _this2.matchesFilter(member.get('fullName'));
      });
    },

    addMembers: function addMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToAdd').map(function (member) {
        return member.get('id');
      }).join(',');
      return Ember['default'].$.ajax('/api/v1/teams/' + teamId + '/members', {
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ agent_ids: ids }),
        headers: {
          'Content-Type': 'application/json',
          'X-Session-ID': this.get('session.sessionId')
        }
      });
    },

    removeMembers: function removeMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToRemove').map(function (member) {
        return member.get('id');
      }).join(',');
      return Ember['default'].$.ajax('/api/v1/teams/' + teamId + '/members?agent_ids=' + ids, {
        method: 'DELETE',
        contentType: 'application/json',
        headers: {
          'Content-Type': 'application/json',
          'X-Session-ID': this.get('session.sessionId')
        }
      });
    },

    getNonMemberSelectedValue: function getNonMemberSelectedValue(agent) {
      return this.get('membersToAdd').contains(agent);
    },

    getMemberSelectedValue: function getMemberSelectedValue(agent) {
      return !this.get('membersToRemove').contains(agent);
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('team').rollback();
        this.set('membersToAdd', []);
        this.set('membersToRemove', []);
      },

      saveTeam: function saveTeam() {
        var _this3 = this;

        // Update the model straight away, and then perform
        // the API requests in the background.
        this.get('team.members').pushObjects(this.get('membersToAdd'));
        this.get('team.members').removeObjects(this.get('membersToRemove'));
        return this.get('team').save().then(function () {
          var promises = [];
          if (_this3.get('membersToAdd.length') > 0) {
            promises.push(_this3.addMembers());
          }
          if (_this3.get('membersToRemove.length') > 0) {
            promises.push(_this3.removeMembers());
          }
          return RSVP.all(promises).then(function () {
            _this3.set('membersToAdd', []);
            _this3.set('membersToRemove', []);
          })['catch'](function (e) {
            return _this3.get('errorHandlerService').handleServerError({ errors: e.responseJSON });
          });
        });
      },

      onUserSelected: function onUserSelected(user, isSelected) {
        var membersToAdd = this.get('membersToAdd');
        var membersToRemove = this.get('membersToRemove');
        if (this.get('nonMembers').contains(user)) {
          if (isSelected) {
            membersToAdd.pushObject(user);
          } else {
            membersToAdd.removeObject(user);
          }
        } else {
          if (isSelected) {
            membersToRemove.removeObject(user);
          } else {
            membersToRemove.pushObject(user);
          }
        }
      },

      showDeleteConfirmation: function showDeleteConfirmation(team) {
        var msg = this.get('intl').findTranslationByKey('admin.teams.labels.delete_team_confirmation');
        if (confirm(msg.translation)) {
          // eslint-disable-line
          this.send('deleteTeam', team);
        }
      },

      deleteTeam: function deleteTeam(team) {
        var _this4 = this;

        team.destroyRecord().then(function () {
          return _this4.attrs.onSuccess();
        });
      }
    }
  });

});
define('frontend-cp/components/ko-admin/team/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 90
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.teams.labels.edit.name"],[],["loc",[null,[13,47],[13,88]]]]],[],["loc",[null,[13,30],[13,90]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[13,6],[13,114]]]],
              ["inline","input",[],["class","input-text","type","text","value",["subexpr","@mut",[["get","team.title",["loc",[null,[14,51],[14,61]]]]],[],[]],"required",true,"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[14,85],[14,97]]]]],[],[]]],["loc",[null,[14,6],[14,99]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[12,4],[15,22]]]],
            ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","team.errors.title",["loc",[null,[16,34],[16,51]]]]],[],[]]],["loc",[null,[16,4],[16,53]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("\n     ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","layout__item u-1/3");
              var el2 = dom.createComment("\n       ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n     ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("\n   ");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["inline","ko-admin-card-user",[],["user",["subexpr","@mut",[["get","agent",["loc",[null,[37,36],[37,41]]]]],[],[]],"isSelected",["subexpr","ko-contextual-helper",[["get","getMemberSelectedValue",["loc",[null,[38,45],[38,67]]]],["get","this",["loc",[null,[38,68],[38,72]]]],["get","agent",["loc",[null,[38,73],[38,78]]]]],[],["loc",[null,[38,23],[38,79]]]],"userSelectedAction","onUserSelected"],["loc",[null,[37,10],[39,49]]]]
            ],
            locals: ["agent"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 5
              },
              "end": {
                "line": 42,
                "column": 5
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("\n   ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("\n  ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredMembers",["loc",[null,[35,14],[35,29]]]]],[],0,null,["loc",[null,[35,6],[41,15]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 5
              },
              "end": {
                "line": 49,
                "column": 5
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("\n   ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","layout__item u-1/3");
            var el2 = dom.createComment("\n     ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("\n  ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["inline","ko-admin-card-user",[],["user",["subexpr","@mut",[["get","agent",["loc",[null,[45,34],[45,39]]]]],[],[]],"isSelected",["subexpr","ko-contextual-helper",[["get","getNonMemberSelectedValue",["loc",[null,[46,43],[46,68]]]],["get","this",["loc",[null,[46,69],[46,73]]]],["get","agent",["loc",[null,[46,74],[46,79]]]]],[],["loc",[null,[46,21],[46,80]]]],"userSelectedAction","onUserSelected"],["loc",[null,[45,8],[47,47]]]]
          ],
          locals: ["agent"],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","button button--alert");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0,1,1);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["subexpr","action",["showDeleteConfirmation",["get","team",["loc",[null,[53,83],[53,87]]]]],[],["loc",[null,[53,49],[53,89]]]]],
            ["inline","format-message",[["subexpr","intl-get",["admin.teams.labels.delete_team"],[],["loc",[null,[54,23],[54,66]]]]],[],["loc",[null,[54,6],[54,68]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","u-mv");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout u-mb");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","layout__item u-1/1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","input--search t-right");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","i-search i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout");
          var el2 = dom.createComment("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [5]);
          var element2 = dom.childAt(fragment, [9]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [7, 1, 1]),1,1);
          morphs[5] = dom.createMorphAt(element2,1,1);
          morphs[6] = dom.createMorphAt(element2,3,3);
          morphs[7] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[8] = dom.createMorphAt(fragment,13,13,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-admin/page-header",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[6,10],[6,15]]]]],[],[]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[7,13],[7,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[8,31],[8,56]]]]],[],["loc",[null,[8,15],[8,57]]]]],["loc",[null,[5,2],[9,4]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.legend.edit.details"],[],["loc",[null,[11,49],[11,93]]]]],[],["loc",[null,[11,33],[11,94]]]]],0,null,["loc",[null,[11,2],[17,27]]]],
          ["inline","format-message",[["subexpr","intl-get",["admin.teams.info.title"],[],["loc",[null,[20,25],[20,60]]]]],[],["loc",[null,[20,8],[20,62]]]],
          ["inline","format-message",[["subexpr","intl-get",["admin.teams.info.content"],[],["loc",[null,[21,24],[21,61]]]]],[],["loc",[null,[21,7],[21,63]]]],
          ["inline","input",[],["class","input-text input-text--search","type","text","value",["subexpr","@mut",[["get","filter",["loc",[null,[27,72],[27,78]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.labels.filter_agents"],[],["loc",[null,[27,107],[27,152]]]]],[],["loc",[null,[27,91],[27,153]]]]],["loc",[null,[27,8],[27,155]]]],
          ["block","if",[["subexpr","not",[["get","team.isNew",["loc",[null,[34,16],[34,26]]]]],[],["loc",[null,[34,11],[34,27]]]]],[],1,null,["loc",[null,[34,5],[42,12]]]],
          ["block","each",[["get","filteredNonMembers",["loc",[null,[43,13],[43,31]]]]],[],2,null,["loc",[null,[43,5],[49,14]]]],
          ["block","if",[["subexpr","not",[["get","team.isNew",["loc",[null,[52,13],[52,23]]]]],[],["loc",[null,[52,8],[52,24]]]]],[],3,null,["loc",[null,[52,2],[56,9]]]],
          ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[59,13],[59,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[60,31],[60,56]]]]],[],["loc",[null,[60,15],[60,57]]]]],["loc",[null,[58,2],[61,4]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-form",[],["onSubmit",["subexpr","action",["saveTeam"],[],["loc",[null,[2,11],[2,30]]]],"onSuccess",["subexpr","@mut",[["get","onSuccess",["loc",[null,[3,12],[3,21]]]]],[],[]]],0,null,["loc",[null,[1,0],[62,12]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/twitter/edit/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    account: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,

    store: Ember['default'].inject.service(),

    brands: [],
    initBrands: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('brand').then(function (brands) {
        _this.set('brands', brands);
      });
    }),

    actions: {
      setBrand: function setBrand(brand) {
        this.set('account.brand', brand);
      }
    }

  });

});
define('frontend-cp/components/ko-admin/twitter/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 87
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.label.brand"],[],["loc",[null,[14,47],[14,85]]]]],[],["loc",[null,[14,30],[14,87]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 21,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0,1,1);
                  return morphs;
                },
                statements: [
                  ["attribute","onclick",["subexpr","action",["setBrand",["get","brand",["loc",[null,[18,75],[18,80]]]]],[],["loc",[null,[18,55],[18,82]]]]],
                  ["content","brand.name",["loc",[null,[19,14],[19,28]]]]
                ],
                locals: ["brand"],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 22,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","each",[["get","brands",["loc",[null,[16,16],[16,22]]]]],[],0,null,["loc",[null,[16,8],[21,17]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child2 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 85
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.help.brand"],[],["loc",[null,[24,46],[24,83]]]]],[],["loc",[null,[24,29],[24,85]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[14,6],[14,111]]]],
              ["block","ko-dropdown/select",[],["label",["subexpr","@mut",[["get","account.brand.name",["loc",[null,[15,34],[15,52]]]]],[],[]]],1,null,["loc",[null,[15,6],[22,29]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","account.errors.brand",["loc",[null,[23,36],[23,56]]]]],[],[]]],["loc",[null,[23,6],[23,58]]]],
              ["block","ko-form/field/help",[],[],2,null,["loc",[null,[24,6],[24,108]]]]
            ],
            locals: [],
            templates: [child0, child1, child2]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[13,4],[25,22]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["admin.twitter.help.capture"],[],["loc",[null,[30,23],[30,62]]]]],[],["loc",[null,[30,6],[30,64]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 34,
                    "column": 6
                  },
                  "end": {
                    "line": 34,
                    "column": 90
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.label.mentions"],[],["loc",[null,[34,47],[34,88]]]]],[],["loc",[null,[34,30],[34,90]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 40,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[34,6],[34,114]]]],
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","account.routeMentions",["loc",[null,[36,18],[36,39]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","account.routeMentions",["loc",[null,[37,44],[37,65]]]],"admin.twitter.description_on.mentions","admin.twitter.description_off.mentions"],[],["loc",[null,[37,40],[37,147]]]]],[],["loc",[null,[37,30],[37,148]]]]],[],["loc",[null,[37,14],[37,149]]]]],["loc",[null,[35,6],[38,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","account.errors.routeMentions",["loc",[null,[39,36],[39,64]]]]],[],[]]],["loc",[null,[39,6],[39,66]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child2 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 97
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.label.direct_messages"],[],["loc",[null,[43,47],[43,95]]]]],[],["loc",[null,[43,30],[43,97]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[43,6],[43,121]]]],
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","account.routeMessages",["loc",[null,[45,18],[45,39]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","account.routeMessages",["loc",[null,[46,44],[46,65]]]],"admin.twitter.description_on.direct_messages","admin.twitter.description_off.direct_messages"],[],["loc",[null,[46,40],[46,161]]]]],[],["loc",[null,[46,30],[46,162]]]]],[],["loc",[null,[46,14],[46,163]]]]],["loc",[null,[44,6],[47,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","account.errors.routeMessages",["loc",[null,[48,36],[48,64]]]]],[],[]]],["loc",[null,[48,6],[48,66]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child3 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 52,
                    "column": 6
                  },
                  "end": {
                    "line": 52,
                    "column": 99
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.label.favourited_tweets"],[],["loc",[null,[52,47],[52,97]]]]],[],["loc",[null,[52,30],[52,99]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[52,6],[52,123]]]],
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","account.routeFavorites",["loc",[null,[54,18],[54,40]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","account.routeFavorites",["loc",[null,[55,44],[55,66]]]],"admin.twitter.description_on.favourited_tweets","admin.twitter.description_off.favourited_tweets"],[],["loc",[null,[55,40],[55,166]]]]],[],["loc",[null,[55,30],[55,167]]]]],[],["loc",[null,[55,14],[55,168]]]]],["loc",[null,[53,6],[56,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","account.errors.routeFavorites",["loc",[null,[57,36],[57,65]]]]],[],[]]],["loc",[null,[57,6],[57,67]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
            morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/help",[],[],0,null,["loc",[null,[29,4],[31,27]]]],
            ["block","ko-form/field",[],[],1,null,["loc",[null,[33,4],[40,22]]]],
            ["block","ko-form/field",[],[],2,null,["loc",[null,[42,4],[49,22]]]],
            ["block","ko-form/field",[],[],3,null,["loc",[null,[51,4],[58,22]]]]
          ],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 63,
                    "column": 6
                  },
                  "end": {
                    "line": 63,
                    "column": 103
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.label.display_public_tweets"],[],["loc",[null,[63,47],[63,101]]]]],[],["loc",[null,[63,30],[63,103]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 6
                  },
                  "end": {
                    "line": 69,
                    "column": 101
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.twitter.help.display_public_tweets"],[],["loc",[null,[69,46],[69,99]]]]],[],["loc",[null,[69,29],[69,101]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[63,6],[63,127]]]],
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","account.isPublic",["loc",[null,[65,18],[65,34]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","account.isPublic",["loc",[null,[66,44],[66,60]]]],"admin.twitter.description_on.display_public_tweets","admin.twitter.description_off.display_public_tweets"],[],["loc",[null,[66,40],[66,168]]]]],[],["loc",[null,[66,30],[66,169]]]]],[],["loc",[null,[66,14],[66,170]]]]],["loc",[null,[64,6],[67,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","account.errors.isPublic",["loc",[null,[68,36],[68,59]]]]],[],[]]],["loc",[null,[68,6],[68,61]]]],
              ["block","ko-form/field/help",[],[],1,null,["loc",[null,[69,6],[69,124]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 71,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[62,4],[70,22]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,9,9,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.edit.heading"],[],["loc",[null,[6,26],[6,65]]]]],["screenName",["get","account.screenName",["loc",[null,[6,77],[6,95]]]]],["loc",[null,[6,10],[6,96]]]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[7,13],[7,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[8,31],[8,56]]]]],[],["loc",[null,[8,15],[8,57]]]],"pageCopy",null],["loc",[null,[5,2],[10,4]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.heading.account_settings"],[],["loc",[null,[12,49],[12,100]]]]],[],["loc",[null,[12,33],[12,101]]]]],0,null,["loc",[null,[12,2],[26,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.heading.capture_settings"],[],["loc",[null,[28,49],[28,100]]]]],[],["loc",[null,[28,33],[28,101]]]]],1,null,["loc",[null,[28,2],[59,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.heading.help_settings"],[],["loc",[null,[61,49],[61,97]]]]],[],["loc",[null,[61,33],[61,98]]]]],2,null,["loc",[null,[61,2],[71,27]]]],
          ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[74,13],[74,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[75,31],[75,56]]]]],[],["loc",[null,[75,15],[75,57]]]]],["loc",[null,[73,2],[76,4]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-form",[],["onSubmit",["subexpr","@mut",[["get","onSave",["loc",[null,[2,11],[2,17]]]]],[],[]],"onSuccess",["subexpr","@mut",[["get","onSuccess",["loc",[null,[3,12],[3,21]]]]],[],[]]],0,null,["loc",[null,[1,0],[77,12]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin/views/edit/columns/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    columns: null,

    store: Ember['default'].inject.service(),
    availableColumns: [],

    initAvailableColumns: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('column').then(function (columns) {
        _this.set('availableColumns', columns);
      });
    }),

    unusedColumns: Ember['default'].computed('availableColumns.[]', 'columns.[]', function () {
      var usedColumns = this.get('columns');
      if (!usedColumns) {
        return this.get('availableColumns');
      }

      return this.get('availableColumns').filter(function (availableColumn) {
        return !usedColumns.contains(availableColumn);
      });
    }),

    actions: {
      addViewColumn: function addViewColumn(column) {
        this.get('columns').pushObject(column);
      },

      removeColumn: function removeColumn(column) {
        this.get('columns').removeObject(column);
      }
    }

  });

});
define('frontend-cp/components/ko-admin/views/edit/columns/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-dropdown_list__item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'onclick');
            morphs[1] = dom.createMorphAt(element2,0,0);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["subexpr","action",["addViewColumn",["get","column",["loc",[null,[3,72],[3,78]]]]],[],["loc",[null,[3,47],[3,80]]]]],
            ["content","column.id",["loc",[null,[3,81],[3,94]]]]
          ],
          locals: ["column"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","unusedColumns",["loc",[null,[2,10],[2,23]]]]],[],0,null,["loc",[null,[2,2],[4,11]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 1
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-views-column__item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","ko-views-column__content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-views-column__action i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          morphs[1] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["content","column.id",["loc",[null,[12,6],[12,19]]]],
          ["element","action",["removeColumn",["get","column",["loc",[null,[14,100],[14,106]]]]],[],["loc",[null,[14,76],[14,108]]]]
        ],
        locals: ["column"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-views-column");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/select",[],["label",["subexpr","format-message",[["subexpr","intl-get",["generic.select_placeholder"],[],["loc",[null,[1,44],[1,83]]]]],[],["loc",[null,[1,28],[1,84]]]]],0,null,["loc",[null,[1,0],[5,23]]]],
        ["block","ko-reorderable-list",[],["reorderedListAction",null,"items",["subexpr","@mut",[["get","columns",["loc",[null,[9,54],[9,61]]]]],[],[]]],1,null,["loc",[null,[9,0],[16,25]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-admin/views/edit/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // params
    currentView: null,
    title: null,
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    // state
    teams: null,
    definitions: null,

    store: Ember['default'].inject.service(),
    intl: Ember['default'].inject.service(),

    sharedWithSelf: Ember['default'].computed.equal('currentView.visibilityType', 'SELF'),
    sharedWithAll: Ember['default'].computed.equal('currentView.visibilityType', 'ALL'),
    sharedWithTeam: Ember['default'].computed.equal('currentView.visibilityType', 'TEAM'),

    initFields: Ember['default'].on('init', function () {
      this.set('fields', Ember['default'].Object.create({
        predicate_collections: {}
      }));
    }),

    initDefinitions: Ember['default'].on('init', function () {
      this.set('definitions', this.get('store').find('definition'));
    }),

    initTeams: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('team').then(function (teams) {
        _this.set('teams', teams);
      });
    }),

    selectedTeamLabel: Ember['default'].computed('currentView.visibilityToTeams.[]', function () {
      var selectedTeam = this.get('currentView.visibilityToTeams.firstObject');
      if (!selectedTeam) {
        return this.get('intl').findTranslationByKey('generic.select_placeholder').translation;
      }
      return selectedTeam.get('title');
    }),

    canDeleteCollection: Ember['default'].computed.gt('currentView.predicateCollections.length', 1),

    selectedSortingLabel: Ember['default'].computed('currentView.orderByColumn', 'currentView.columns.[]', function () {
      var orderByString = this.get('currentView.orderByColumn');
      var selectedColumns = this.get('currentView.columns');

      var selectedColumn = selectedColumns.find(function (column) {
        return column.get('id') === orderByString;
      });

      if (!orderByString || !selectedColumn) {
        if (this.get('currentView.orderByColumn')) {
          this.set('currentView.orderByColumn', null);
        }
        return this.get('intl').findTranslationByKey('generic.select_placeholder').translation;
      }

      return orderByString;
    }),

    selectedSortingDirection: Ember['default'].computed('currentView.orderBy', function () {
      var sortDirection = this.get('currentView.orderBy');
      if (!sortDirection) {
        return this.get('intl').findTranslationByKey('generic.select_placeholder').translation;
      }
      return this.get('intl').findTranslationByKey('generic.sort.' + sortDirection).translation;
    }),

    actions: {
      setViewSharingSelf: function setViewSharingSelf() {
        this.set('currentView.visibilityType', 'SELF');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingAll: function setViewSharingAll() {
        this.set('currentView.visibilityType', 'ALL');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingTeam: function setViewSharingTeam() {
        this.set('currentView.visibilityType', 'TEAM');
      },
      addCollection: function addCollection() {
        var newProposition = this.get('store').createFragment('proposition', {});
        var newCollection = this.get('store').createRecord('predicate-collection', { propositions: [newProposition] });

        this.get('currentView.predicateCollections').pushObject(newCollection);
      },

      removeCollection: function removeCollection(collection) {
        this.get('currentView.predicateCollections').removeObject(collection);
      },

      createRuleForCollection: function createRuleForCollection(collection) {
        var newProposition = this.get('store').createFragment('proposition', {});
        collection.get('propositions').pushObject(newProposition);
      },

      removeRuleFromCollection: function removeRuleFromCollection(collection, rule) {
        collection.get('propositions').removeObject(rule);
      },

      selectOrderByColumn: function selectOrderByColumn(column) {
        this.set('currentView.orderByColumn', column.get('id'));
      },

      selectOrderByDirection: function selectOrderByDirection(direction) {
        this.set('currentView.orderBy', direction);
      },

      saveView: function saveView() {
        return this.get('currentView').save().then(function (view) {
          view.cacheRelationships(); //TODO: this should be done when didUpdate event is fired on the model. But it's not. Work out why
        });
      },

      selectTeam: function selectTeam(team) {
        this.set('currentView.visibilityType', 'TEAM');
        var selectedTeams = this.get('currentView.visibilityToTeams');
        selectedTeams.clear().pushObject(team);
      }
    }
  });

});
define('frontend-cp/components/ko-admin/views/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 90
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.views.label.view_title"],[],["loc",[null,[14,47],[14,88]]]]],[],["loc",[null,[14,30],[14,90]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[14,6],[14,114]]]],
              ["inline","input",[],["class","input input-text","type","text","value",["subexpr","@mut",[["get","currentView.title",["loc",[null,[15,57],[15,74]]]]],[],[]],"required",true,"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[15,98],[15,110]]]]],[],[]]],["loc",[null,[15,6],[15,112]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","currentView.errors.title",["loc",[null,[16,36],[16,60]]]]],[],[]]],["loc",[null,[16,6],[16,62]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-toggle",[],["activated",["subexpr","@mut",[["get","currentView.isEnabled",["loc",[null,[21,18],[21,39]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","if",[["get","currentView.isEnabled",["loc",[null,[22,44],[22,65]]]],"admin.views.edit.description_on.is_enabled","admin.views.edit.description_off.is_enabled"],[],["loc",[null,[22,40],[22,157]]]]],[],["loc",[null,[22,30],[22,158]]]]],[],["loc",[null,[22,14],[22,159]]]]],["loc",[null,[20,6],[23,8]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","currentView.errors.isEnabled",["loc",[null,[24,36],[24,64]]]]],[],[]]],["loc",[null,[24,6],[24,66]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[13,4],[17,22]]]],
            ["block","ko-form/field",[],[],1,null,["loc",[null,[19,4],[25,22]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 87
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.views.label.sharing"],[],["loc",[null,[30,47],[30,85]]]]],[],["loc",[null,[30,30],[30,87]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 39,
                      "column": 10
                    },
                    "end": {
                      "line": 41,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element5, 'onclick');
                  morphs[1] = dom.createMorphAt(element5,0,0);
                  return morphs;
                },
                statements: [
                  ["attribute","onclick",["subexpr","action",["selectTeam",["get","team",["loc",[null,[40,77],[40,81]]]]],[],["loc",[null,[40,55],[40,83]]]]],
                  ["content","team.title",["loc",[null,[40,84],[40,98]]]]
                ],
                locals: ["team"],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 8
                  },
                  "end": {
                    "line": 42,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","each",[["get","teams",["loc",[null,[39,18],[39,23]]]]],[],0,null,["loc",[null,[39,10],[41,19]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","u-inline-block");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","u-inline-block");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
              morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]),1,1);
              morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]),1,1);
              morphs[5] = dom.createMorphAt(fragment,11,11,contextualElement);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/label",[],[],0,null,["loc",[null,[30,6],[30,111]]]],
              ["inline","ko-radio",[],["label","Just myself","checked",["subexpr","@mut",[["get","sharedWithSelf",["loc",[null,[31,45],[31,59]]]]],[],[]],"onRadio","setViewSharingSelf","disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[31,98],[31,110]]]]],[],[]]],["loc",[null,[31,6],[31,112]]]],
              ["inline","ko-radio",[],["label","Every agent","checked",["subexpr","@mut",[["get","sharedWithAll",["loc",[null,[32,45],[32,58]]]]],[],[]],"onRadio","setViewSharingAll","disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[32,96],[32,108]]]]],[],[]]],["loc",[null,[32,6],[32,110]]]],
              ["inline","ko-radio",[],["label","A specific team","checked",["subexpr","@mut",[["get","sharedWithTeam",["loc",[null,[35,51],[35,65]]]]],[],[]],"onRadio","setViewSharingTeam","disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[35,104],[35,116]]]]],[],[]]],["loc",[null,[35,8],[35,118]]]],
              ["block","ko-dropdown/select",[],["label",["subexpr","@mut",[["get","selectedTeamLabel",["loc",[null,[38,36],[38,53]]]]],[],[]]],1,null,["loc",[null,[38,8],[42,31]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","currentView.visibilityType.orderBy",["loc",[null,[44,36],[44,70]]]]],[],[]]],["loc",[null,[44,6],[44,72]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[29,4],[45,22]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-predicate-builder",[],["definitions",["subexpr","@mut",[["get","definitions",["loc",[null,[51,18],[51,29]]]]],[],[]],"collections",["subexpr","@mut",[["get","currentView.predicateCollections",["loc",[null,[52,18],[52,50]]]]],[],[]],"onCollectionAddition","addCollection","onCollectionRemoval","removeCollection","onAdditionOfRuleToCollection","createRuleForCollection","onRuleDeletion","removeRuleFromCollection","canDeleteCollection",["subexpr","@mut",[["get","canDeleteCollection",["loc",[null,[57,26],[57,45]]]]],[],[]]],["loc",[null,[50,4],[58,6]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 63,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-admin/views/edit/columns",[],["columns",["subexpr","@mut",[["get","currentView.columns",["loc",[null,[62,42],[62,61]]]]],[],[]]],["loc",[null,[62,4],[62,63]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child4 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 67,
                    "column": 6
                  },
                  "end": {
                    "line": 67,
                    "column": 86
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["admin.views.label.sorting"],[],["loc",[null,[67,46],[67,84]]]]],[],["loc",[null,[67,29],[67,86]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 70,
                      "column": 10
                    },
                    "end": {
                      "line": 72,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2,0,0);
                  return morphs;
                },
                statements: [
                  ["attribute","onclick",["subexpr","action",["selectOrderByColumn",["get","column",["loc",[null,[71,86],[71,92]]]]],[],["loc",[null,[71,55],[71,94]]]]],
                  ["content","column.id",["loc",[null,[71,95],[71,108]]]]
                ],
                locals: ["column"],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 69,
                    "column": 8
                  },
                  "end": {
                    "line": 73,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","each",[["get","currentView.columns",["loc",[null,[70,18],[70,37]]]]],[],0,null,["loc",[null,[70,10],[72,19]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child2 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 78,
                    "column": 8
                  },
                  "end": {
                    "line": 85,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(fragment, [3]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,1,1);
                morphs[2] = dom.createAttrMorph(element1, 'onclick');
                morphs[3] = dom.createMorphAt(element1,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["selectOrderByDirection","ASC"],[],["loc",[null,[79,53],[79,94]]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.sort.ASC"],[],["loc",[null,[80,29],[80,58]]]]],[],["loc",[null,[80,12],[80,60]]]],
                ["attribute","onclick",["subexpr","action",["selectOrderByDirection","DESC"],[],["loc",[null,[82,53],[82,95]]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.sort.DESC"],[],["loc",[null,[83,29],[83,59]]]]],[],["loc",[null,[83,12],[83,61]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 66,
                  "column": 4
                },
                "end": {
                  "line": 88,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","u-inline-block");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","u-inline-block");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [3]);
              var element4 = dom.childAt(fragment, [5]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(element3,1,1);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
              morphs[3] = dom.createMorphAt(element4,1,1);
              morphs[4] = dom.createMorphAt(dom.childAt(element4, [3]),0,0);
              return morphs;
            },
            statements: [
              ["block","ko-form/field/help",[],[],0,null,["loc",[null,[67,6],[67,109]]]],
              ["block","ko-dropdown/select",[],["label",["subexpr","@mut",[["get","selectedSortingLabel",["loc",[null,[69,36],[69,56]]]]],[],[]]],1,null,["loc",[null,[69,8],[73,31]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","currentView.errors.orderByColumn",["loc",[null,[74,43],[74,75]]]]],[],[]]],["loc",[null,[74,13],[74,77]]]],
              ["block","ko-dropdown/select",[],["label",["subexpr","@mut",[["get","selectedSortingDirection",["loc",[null,[78,36],[78,60]]]]],[],[]]],2,null,["loc",[null,[78,8],[85,31]]]],
              ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","currentView.errors.orderBy",["loc",[null,[86,43],[86,69]]]]],[],[]]],["loc",[null,[86,13],[86,71]]]]
            ],
            locals: [],
            templates: [child0, child1, child2]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 89,
                  "column": 4
                },
                "end": {
                  "line": 89,
                  "column": 90
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["admin.views.description.sorting"],[],["loc",[null,[89,44],[89,88]]]]],[],["loc",[null,[89,27],[89,90]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 65,
                "column": 2
              },
              "end": {
                "line": 90,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","ko-form/field",[],[],0,null,["loc",[null,[66,4],[88,22]]]],
            ["block","ko-form/field/help",[],[],1,null,["loc",[null,[89,4],[89,113]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 96,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","section-heading");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]),0,0);
          morphs[4] = dom.createMorphAt(fragment,9,9,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,13,13,contextualElement);
          morphs[7] = dom.createMorphAt(fragment,15,15,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-admin/page-header",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[7,10],[7,15]]]]],[],[]],"onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[8,13],[8,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[9,31],[9,56]]]]],[],["loc",[null,[9,15],[9,57]]]]],["loc",[null,[6,2],[10,4]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.view_details"],[],["loc",[null,[12,49],[12,94]]]]],[],["loc",[null,[12,33],[12,95]]]]],0,null,["loc",[null,[12,2],[26,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.sharing"],[],["loc",[null,[28,49],[28,89]]]]],[],["loc",[null,[28,33],[28,90]]]]],1,null,["loc",[null,[28,2],[46,27]]]],
          ["inline","format-message",[["subexpr","intl-get",["admin.views.heading.predicate_builder"],[],["loc",[null,[48,48],[48,98]]]]],[],["loc",[null,[48,31],[48,100]]]],
          ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.predicate_collections",["loc",[null,[49,25],[49,53]]]]],[],[]]],2,null,["loc",[null,[49,2],[59,20]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.configure_layout"],[],["loc",[null,[61,49],[61,98]]]]],[],["loc",[null,[61,33],[61,99]]]]],3,null,["loc",[null,[61,2],[63,27]]]],
          ["block","ko-admin/forms/group",[],["legend",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.sorting"],[],["loc",[null,[65,49],[65,89]]]]],[],["loc",[null,[65,33],[65,90]]]]],4,null,["loc",[null,[65,2],[90,27]]]],
          ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[93,13],[93,21]]]]],[],[]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[94,31],[94,56]]]]],[],["loc",[null,[94,15],[94,57]]]]],["loc",[null,[92,2],[95,4]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 96,
            "column": 12
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-form",[],["fields",["subexpr","@mut",[["get","fields",["loc",[null,[2,9],[2,15]]]]],[],[]],"onSubmit",["subexpr","action",["saveView"],[],["loc",[null,[3,11],[3,30]]]],"onSuccess",["subexpr","@mut",[["get","onSuccess",["loc",[null,[4,12],[4,21]]]]],[],[]]],0,null,["loc",[null,[1,0],[96,12]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin-card-team/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    team: null,
    hasMembers: Ember['default'].computed.gt('team.members.length', 0),
    limitedMembers: Ember['default'].computed('team.members', function () {
      return this.get('team.members').slice(0, 9);
    })
  });

});
define('frontend-cp/components/ko-admin-card-team/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 15,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-admin-card-team-members__item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
            return morphs;
          },
          statements: [
            ["inline","ko-avatar",[],["avatar",["subexpr","@mut",[["get","member.avatar",["loc",[null,[14,72],[14,85]]]]],[],[]]],["loc",[null,[14,53],[14,87]]]]
          ],
          locals: ["member"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-admin-card-team__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","ko-admin-card-team-members");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","limitedMembers",["loc",[null,[13,14],[13,28]]]]],[],0,null,["loc",[null,[13,6],[15,15]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin-card-team__header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2,"class","ko-admin-card-team__title");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","t-caption");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createMorphAt(element1,3,3);
        morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","link-to",[["get","team.title",["loc",[null,[3,14],[3,24]]]],"session.admin.people.teams.edit",["get","team.id",["loc",[null,[3,59],[3,66]]]]],["class","t-naked-link"],["loc",[null,[3,4],[3,89]]]],
        ["content","team.members.length",["loc",[null,[6,4],[6,27]]]],
        ["inline","format-message",[["subexpr","intl-get",["admin.teams.agent"],[],["loc",[null,[6,45],[6,75]]]]],["numAgents",["subexpr","@mut",[["get","team.members.length",["loc",[null,[6,86],[6,105]]]]],[],[]]],["loc",[null,[6,28],[6,107]]]],
        ["block","if",[["get","hasMembers",["loc",[null,[10,6],[10,16]]]]],[],0,null,["loc",[null,[10,0],[18,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin-card-user/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    userSelectedAction: null,
    isSelected: false,
    actions: {
      onUserSelected: function onUserSelected(user, isSelected) {
        this.sendAction('userSelectedAction', user, isSelected);
      }
    }
  });

});
define('frontend-cp/components/ko-admin-card-user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","flag flag--auto flag--small");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","flag__img");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","flag__body");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3,"class","t-bold");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3,"class","t-caption");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
          return morphs;
        },
        statements: [
          ["inline","ko-avatar",[],["avatar",["subexpr","@mut",[["get","user.avatar",["loc",[null,[4,25],[4,36]]]]],[],[]]],["loc",[null,[4,6],[4,38]]]],
          ["content","user.fullName",["loc",[null,[8,8],[8,25]]]],
          ["content","user.role.title",["loc",[null,[11,8],[11,27]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-admin-selectable-card",[],["model",["subexpr","@mut",[["get","user",["loc",[null,[1,34],[1,38]]]]],[],[]],"isSelected",["subexpr","@mut",[["get","isSelected",["loc",[null,[1,50],[1,60]]]]],[],[]],"onSelectedAction","onUserSelected"],0,null,["loc",[null,[1,0],[15,29]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-admin-selectable-card/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    onSelectedAction: null,
    isActive: true,
    isSelected: false,

    classNameBindings: ['isActive::ko-admin-selectable-card--inactive', 'isSelected:ko-admin-selectable-card--selected'],

    actions: {
      onSelected: function onSelected(isSelected) {
        this.toggleProperty('isSelected');
        this.sendAction('onSelectedAction', this.get('model'), isSelected);
      }
    }
  });

});
define('frontend-cp/components/ko-admin-selectable-card/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-selectable-card/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin-selectable-card__checkbox");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-admin-selectable-card__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["inline","ko-checkbox",[],["large",true,"checked",["subexpr","@mut",[["get","isSelected",["loc",[null,[2,36],[2,46]]]]],[],[]],"onCheck","onSelected"],["loc",[null,[2,2],[2,69]]]],
        ["content","yield",["loc",[null,[6,2],[6,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-agent-dropdown/component', ['exports', 'ember', 'frontend-cp/lib/keycodes', 'frontend-cp/config/environment'], function (exports, Ember, KeyCodes, config) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),

    attributeBindings: ['data-region', 'tabindex'],
    dataRegion: 'navigation-new',
    navItems: [{ name: 'case', text: 'Case', path: null, icon: config['default'].assetRoot + '/images/icons/case.svg' }, { name: 'user', text: 'User', path: null, icon: config['default'].assetRoot + '/images/icons/user.svg' }, { name: 'organization', text: 'Organization', path: null, icon: config['default'].assetRoot + '/images/icons/organization.svg' }],
    isExpanded: false,
    selectedTab: null,

    focusIn: function focusIn(event) {
      this.set('isExpanded', true);
    },

    focusOut: function focusOut(event) {
      // `focusout` events bubble, so the user might have just switched focus within the component
      var isStillFocused = Ember['default'].$.contains(this.$()[0], event.relatedTarget);
      if (isStillFocused) {
        return;
      }
      this.set('isExpanded', false);
    },

    caseTab: Ember['default'].computed('navItems', function () {
      return this.get('navItems').objectAt(0);
    }),

    userTab: Ember['default'].computed('navItems', function () {
      return this.get('navItems').objectAt(1);
    }),

    organisationTab: Ember['default'].computed('navItems', function () {
      return this.get('navItems').objectAt(2);
    }),

    resetSelectedTabOnHide: Ember['default'].observer('isExpanded', function () {
      var isExpanded = this.get('isExpanded');
      if (!isExpanded) {
        this.set('selectedTab', null);
      }
    }),

    maintainFocusDuringTabTransition: Ember['default'].observer('selectedTab', function () {
      if (!this.get('isExpanded')) {
        return;
      }
      // Switch the focus to the '+' button so that the panel can maintain
      // focus, even if the new tab contains no focusable elements
      var $componentElement = this.$();
      var $focusableElements = getFocusableElements($componentElement);
      $focusableElements.eq(0).focus();
    }),

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case KeyCodes.up:
          {
            var isMainTab = !this.get('selectedTab');
            if (!isMainTab) {
              return true;
            }
            selectPreviousFocusableItem(this.$());
            return false;
          }
        case KeyCodes.down:
          {
            var isMainTab = !this.get('selectedTab');
            if (!isMainTab) {
              return true;
            }
            selectNextFocusableItem(this.$());
            return false;
          }
        case KeyCodes.escape:
          {
            if (this.get('selectedTab')) {
              this.set('selectedTab', null);
            } else {
              this.set('isExpanded', false);
            }
            return false;
          }
      }
    },

    _createSuccessNotification: function _createSuccessNotification(route) {
      var notificationMessage = null;

      switch (route) {
        case 'session.agent.users.user':
          notificationMessage = this.get('intl').findTranslationByKey('users.user.created').translation;
          break;
        case 'session.agent.cases.case':
          // intentionally left blank, because at this step we do not create a Case
          break;
        case 'session.agent.organisations.organisation':
          notificationMessage = this.get('intl').findTranslationByKey('organisation.organisation.created').translation;
          break;
      }

      if (notificationMessage) {
        this.get('notification').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    },

    actions: {
      toggleDropdown: function toggleDropdown() {
        this.set('isExpanded', true);
      },

      selectTab: function selectTab(tab) {
        if (tab.path) {
          var router = this.container.lookup('router:main');
          router.router.transitionTo(tab.path);
          this.set('isExpanded', false);
        } else {
          this.set('selectedTab', tab || null);
        }
      },

      onTabSubmitted: function onTabSubmitted() {
        this.maintainFocusDuringTabTransition();
      },

      onTabCreateComplete: function onTabCreateComplete(route, model) {
        var router = this.container.lookup('router:main');

        this._createSuccessNotification(route);

        router.router.transitionTo(route, model);
        this.set('isExpanded', false);
      },

      onTabCancelled: function onTabCancelled() {
        this.set('selectedTab', null);
      }
    }
  });

  function selectNextFocusableItem($containerElement) {
    var $focusableElements = getFocusableElements($containerElement);
    var $focusedElement = $focusableElements.filter(':focus');
    var focusedIndex = $focusableElements.index($focusedElement);
    var updatedFocusIndex = focusedIndex >= $focusableElements.length - 1 ? 0 : focusedIndex + 1;
    $focusableElements.eq(updatedFocusIndex).focus();
  }

  function selectPreviousFocusableItem($containerElement) {
    var $focusableElements = getFocusableElements($containerElement);
    var $focusedElement = $focusableElements.filter(':focus');
    var focusedIndex = $focusableElements.index($focusedElement);
    var updatedFocusIndex = focusedIndex <= 0 ? $focusableElements.length - 1 : focusedIndex - 1;
    $focusableElements.eq(updatedFocusIndex).focus();
  }

  function getFocusableElements($containerElement) {
    return $containerElement.find('button,input,textarea,select,[tabindex]').not('[tabindex="-1"],[disabled]');
  }

});
define('frontend-cp/components/ko-agent-dropdown/create-case/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus'], function (exports, Ember, AutofocusMixin) {

  'use strict';

  var NEW_STATUS_ID = 1;
  var SUGGESTION_DEBOUNCE_DURATION = 250;

  exports['default'] = Ember['default'].Component.extend(AutofocusMixin['default'], {
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},
    onSubmit: function onSubmit() {},

    isDisabled: false,

    store: Ember['default'].inject.service(),
    intlService: Ember['default'].inject.service('intl'),

    fields: null,

    filteredUsers: null,
    activeFilterRequest: null,
    pendingRequests: 0,

    totalRequesterResults: 0,
    hasCompletedSearchRequest: false,

    debouncedRequest: null,

    init: function init() {
      var _this = this;

      this._super();

      var intlService = this.get('intlService');
      var requesterErrorText = intlService.findTranslationByKey('generic.create_case_panel.requester_required').translation;
      this.set('fields', Ember['default'].Object.create({
        requester: {
          value: null,
          validator: function validator(value) {
            return value ? null : requesterErrorText;
          }
        }
      }));
      this.set('filteredUsers', null);

      Ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-case__requester input').focus();
      });
    },

    isLoading: Ember['default'].computed('pendingRequests', function () {
      return this.get('pendingRequests') > 0;
    }),

    filterUpdated: Ember['default'].on('init', Ember['default'].observer('userFilterString', function () {
      var debounceDuration = SUGGESTION_DEBOUNCE_DURATION;
      var filterString = this.get('userFilterString') || '';

      if (filterString.trim()) {
        this.set('debouncedRequest', Ember['default'].run.debounce(this, 'updateFilteredUsers', debounceDuration));
      } else {
        Ember['default'].run.cancel(this.get('debouncedRequest'));
        this.set('filteredUsers', null);
        this.set('hasCompletedSearchRequest', false);
        this.set('pendingRequests', 0);
      }
    })),

    updateFilteredUsers: function updateFilteredUsers() {
      var _this2 = this;

      var store = this.get('store');
      var filterString = this.get('userFilterString') || '';
      this.set('pendingRequests', this.get('pendingRequests') + 1);
      var filterRequest = this.searchUsers(store, filterString).then(function (userModels) {
        var isMostRecentRequest = filterRequest === _this2.get('activeFilterRequest');
        if (!isMostRecentRequest) {
          return;
        }
        _this2.set('filteredUsers', userModels);
      })['catch'](function (error) {
        _this2.set('filteredUsers', []);
      })['finally'](function () {
        _this2.set('pendingRequests', _this2.get('pendingRequests') - 1);
        var isMostRecentRequest = filterRequest === _this2.get('activeFilterRequest');
        if (isMostRecentRequest) {
          _this2.set('activeFilterRequest', null);
        }
        // If ths user has deleted everything before request gets sorted
        if (!_this2.get('userFilterString').trim()) {
          _this2.set('filteredUsers', null);
          _this2.set('hasCompletedSearchRequest', false);
          return;
        }
      });
      this.set('activeFilterRequest', filterRequest);
    },

    searchUsers: function searchUsers(store, filterString) {
      var _this3 = this;

      // TODO: Use `/search` endpoint instead of `/search_all`
      return store.query('search-result-group', {
        'in': 'users',
        query: filterString
      })['catch'](function (error) {
        var noResultsFound = error.errors && error.errors.errors && error.errors.errors[0].code === 'RESOURCE_NOT_FOUND';
        if (noResultsFound) {
          return null;
        }
        throw error;
      }).then(function (searchResultGroup) {
        if (!searchResultGroup) {
          _this3.set('totalRequesterResults', 0);
          return null;
        }
        var searchResults = searchResultGroup.objectAt('0').get('results');
        _this3.set('totalRequesterResults', searchResultGroup.meta.total);

        return searchResults.map(function (resultModel) {
          var typeName = resultModel.get('resource');
          var id = resultModel.get('objectId');
          return store.peekRecord(typeName, id);
        });
      })['finally'](function () {
        _this3.set('hasCompletedSearchRequest', true);
      });
    },

    actions: {
      submit: function submit() {
        var store = this.get('store');
        var fields = this.get('fields');
        this.attrs.onSubmit();
        return createCaseModel(fields, store);

        function createCaseModel(fields, store) {
          var userModel = fields.requester.value;
          var userId = userModel.get('id');

          var userChannels = findUserChannels(userId);
          var defaultCaseFormPromise = findDefaultCaseForm();
          var defaultStatusPromise = findDefaultStatus();

          return Ember['default'].RSVP.hash({
            channels: userChannels,
            caseForm: defaultCaseFormPromise,
            status: defaultStatusPromise
          }).then(function (_ref) {
            var channels = _ref.channels;
            var status = _ref.status;
            var caseForm = _ref.caseForm;
            return createCase(userModel, channels, status, caseForm);
          });

          function findDefaultStatus() {
            return store.findRecord('case-status', NEW_STATUS_ID);
          }

          function findDefaultCaseForm() {
            return store.findAll('case-form').then(function (caseForms) {
              return caseForms.find(function (caseForm) {
                return caseForm.get('isDefault') === true;
              });
            });
          }

          function findUserChannels(userId) {
            return store.query('channel', {
              'user_id': userId
            });
          }

          function createCase(userModel, channels, statusModel, formModel) {
            return store.createRecord('case', {
              'requester': userModel,
              'channels': channels,
              'sourceChannel': channels.objectAt(0),
              'status': statusModel,
              'form': formModel
            });
          }
        }
      },

      selectRequester: function selectRequester(user) {
        var _this4 = this;

        this.set('fields.requester.value', user);
        Ember['default'].run.scheduleOnce('afterRender', function () {
          _this4.$('button[type="submit"]').focus();
        });
      }
    }
  });

});
define('frontend-cp/components/ko-agent-dropdown/create-case/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 105
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.create_case_panel.requester_label"],[],["loc",[null,[15,49],[15,103]]]]],[],["loc",[null,[15,32],[15,105]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 42,
                        "column": 67
                      },
                      "end": {
                        "line": 42,
                        "column": 151
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode(", ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1,"class","t-caption");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
                    return morphs;
                  },
                  statements: [
                    ["content","user.organization.name",["loc",[null,[42,118],[42,144]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 34,
                      "column": 12
                    },
                    "end": {
                      "line": 50,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-agent-dropdown-create-case__dropdown-user");
                  var el3 = dom.createTextNode("\n                  ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","flag flag--small flag--auto");
                  var el4 = dom.createTextNode("\n                    ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__img");
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("img");
                  dom.setAttribute(el5,"class","ko-agent-dropdown-create-case__dropdown-user-image");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                    ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                    ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__body");
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("span");
                  dom.setAttribute(el5,"class","t-bold");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                      ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5,"class","t-caption");
                  var el6 = dom.createTextNode("\n                        ");
                  dom.appendChild(el5, el6);
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  var el6 = dom.createTextNode("\n                      ");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n                    ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n                  ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n              ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [1, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element1, [3]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createAttrMorph(element2, 'src');
                  morphs[2] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
                  morphs[3] = dom.createMorphAt(element3,2,2);
                  morphs[4] = dom.createMorphAt(dom.childAt(element3, [4]),1,1);
                  return morphs;
                },
                statements: [
                  ["attribute","onclick",["subexpr","action",["selectRequester",["get","user",["loc",[null,[35,84],[35,88]]]]],[],["loc",[null,[35,57],[35,90]]]]],
                  ["attribute","src",["concat",[["get","user.avatar",["loc",[null,[39,93],[39,104]]]]]]],
                  ["content","user.fullName",["loc",[null,[42,43],[42,60]]]],
                  ["block","if",[["get","user.organization",["loc",[null,[42,73],[42,90]]]]],[],0,null,["loc",[null,[42,67],[42,158]]]],
                  ["content","user.primaryEmailAddress",["loc",[null,[44,24],[44,52]]]]
                ],
                locals: ["user"],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 10
                  },
                  "end": {
                    "line": 51,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","u-pv-- u-ph-");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
                morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["inline","format-message",[["subexpr","intl-get",["cases.search.request.result_meta"],[],["loc",[null,[29,16],[29,61]]]]],["numDisplayResults",["subexpr","@mut",[["get","filteredUsers.length",["loc",[null,[30,34],[30,54]]]]],[],[]],"totalResults",["subexpr","@mut",[["get","totalRequesterResults",["loc",[null,[31,29],[31,50]]]]],[],[]]],["loc",[null,[28,14],[32,16]]]],
                ["block","each",[["get","filteredUsers",["loc",[null,[34,20],[34,33]]]]],[],0,null,["loc",[null,[34,12],[50,21]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 52,
                      "column": 12
                    },
                    "end": {
                      "line": 54,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["generic.search.no_results"],[],["loc",[null,[53,31],[53,69]]]]],[],["loc",[null,[53,14],[53,71]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 51,
                    "column": 8
                  },
                  "end": {
                    "line": 55,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["subexpr","and",[["get","hasCompletedSearchRequest",["loc",[null,[52,23],[52,48]]]],["subexpr","not",[["get","isLoading",["loc",[null,[52,54],[52,63]]]]],[],["loc",[null,[52,49],[52,64]]]]],[],["loc",[null,[52,18],[52,65]]]]],[],0,null,["loc",[null,[52,12],[54,19]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 56,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","filteredUsers",["loc",[null,[26,16],[26,29]]]]],[],0,1,["loc",[null,[26,10],[55,17]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 6
              },
              "end": {
                "line": 57,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/label",[],[],0,null,["loc",[null,[15,8],[15,129]]]],
            ["block","ko-suggest",[],["class","ko-agent-dropdown-create-case__requester","hideOnClick",false,"selectedItem",["subexpr","@mut",[["get","fields.requester.value.fullName",["loc",[null,[19,23],[19,54]]]]],[],[]],"searchTerm",["subexpr","@mut",[["get","userFilterString",["loc",[null,[20,21],[20,37]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[21,19],[21,31]]]]],[],[]],"focus-out","onNameBlurred","shouldAutoFocus",false,"displayIcon",false],1,null,["loc",[null,[16,8],[56,23]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 6
              },
              "end": {
                "line": 58,
                "column": 82
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","ko-loader",[],["class","ko-agent-dropdown-create-case__loader"],["loc",[null,[58,23],[58,82]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 67,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-agent-dropdown-create-case__input");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element4,1,1);
          morphs[1] = dom.createMorphAt(element4,3,3);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.requester",["loc",[null,[13,14],[13,30]]]]],[],[]]],0,null,["loc",[null,[12,6],[57,24]]]],
          ["block","if",[["get","isLoading",["loc",[null,[58,12],[58,21]]]]],[],1,null,["loc",[null,[58,6],[58,89]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.create_case_panel.info"],[],["loc",[null,[61,58],[61,101]]]]],[],["loc",[null,[61,41],[61,103]]]],
          ["inline","ko-form/buttons",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[63,15],[63,23]]]]],[],[]],"submitLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.create_case_panel.submit"],[],["loc",[null,[64,34],[64,79]]]]],[],["loc",[null,[64,18],[64,80]]]],"cancelLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.cancel"],[],["loc",[null,[65,34],[65,61]]]]],[],["loc",[null,[65,18],[65,62]]]]],["loc",[null,[62,4],[66,6]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 69,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2,"class","ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.create_case_panel.title"],[],["loc",[null,[2,56],[2,100]]]]],[],["loc",[null,[2,39],[2,102]]]],
        ["block","ko-form",[],["fields",["subexpr","@mut",[["get","fields",["loc",[null,[7,11],[7,17]]]]],[],[]],"onSubmit",["subexpr","action",["submit"],[],["loc",[null,[8,13],[8,30]]]],"onSuccess",["subexpr","@mut",[["get","onCreate",["loc",[null,[9,14],[9,22]]]]],[],[]]],0,null,["loc",[null,[6,2],[67,14]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-agent-dropdown/create-organisation/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},
    onSubmit: function onSubmit() {},

    store: Ember['default'].inject.service(),

    fields: null,
    erroredDomains: null,

    init: function init() {
      var _this = this;

      this._super();
      this.set('erroredDomains', []);
      this.set('organization', this.get('store').createRecord('organization'));

      this.set('fields', Ember['default'].Object.create({
        domains: {
          value: []
        }
      }));

      Ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-organization__name').focus();
      });
    },

    extractDomainsFromErrors: function extractDomainsFromErrors(notifications) {
      // TODO Stub until API works
      return ['gmail.com', 'yahoo.com'];
    },

    actions: {
      addDomain: function addDomain(domain) {
        if (domain) {
          this.get('fields.domains.value').pushObject(domain);
        }
      },

      removeDomain: function removeDomain(domainName) {
        var domain = this.get('fields.domains.value').find(function (domain) {
          return domain === domainName;
        });
        if (domain) {
          this.get('fields.domains.value').removeObject(domain);
        }

        this.$('.js-tag-input').focus();
        return false;
      },

      submit: function submit() {
        var _this2 = this;

        var identityDomains = this.get('fields.domains.value').map(function (domain) {
          return _this2.get('store').createRecord('identityDomain', {
            domain: domain
          });
        });

        var organization = this.get('organization');
        organization.set('domains', identityDomains);

        this.attrs.onSubmit();
        return organization.save();
      },

      error: function error(e) {
        this.set('erroredDomains', this.extractDomainsFromErrors(e.notifications));
      }
    }
  });

});
define('frontend-cp/components/ko-agent-dropdown/create-organisation/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 13,
                  "column": 106
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.create_organisation_panel.name_label"],[],["loc",[null,[13,47],[13,104]]]]],[],["loc",[null,[13,30],[13,106]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/label",[],[],0,null,["loc",[null,[13,6],[13,130]]]],
            ["inline","input",[],["type","text","tabindex",1,"class","ko-agent-dropdown-create-organisation__name input-text u-1/1","name","name","value",["subexpr","@mut",[["get","organization.name",["loc",[null,[14,124],[14,141]]]]],[],[]],"required",true,"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[14,165],[14,177]]]]],[],[]]],["loc",[null,[14,6],[14,179]]]],
            ["inline","ko-form/field/errors",[],["errors",["subexpr","@mut",[["get","organization.errors.name",["loc",[null,[15,36],[15,60]]]]],[],[]]],["loc",[null,[15,6],[15,62]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 19,
                  "column": 108
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.create_organisation_panel.domain_label"],[],["loc",[null,[19,47],[19,106]]]]],[],["loc",[null,[19,30],[19,108]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 29,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-agent-dropdown-create-organisation__tags-input");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/label",[],[],0,null,["loc",[null,[19,6],[19,132]]]],
            ["inline","ko-field/tags",[],["tabindex",null,"inputTabindex",2,"errorTags",["subexpr","@mut",[["get","erroredDomains",["loc",[null,[24,20],[24,34]]]]],[],[]],"selectedTags",["subexpr","@mut",[["get","fields.domains.value",["loc",[null,[25,23],[25,43]]]]],[],[]],"onTagAddition","addDomain","onTagRemoval","removeDomain"],["loc",[null,[21,8],[27,39]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
          morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-form/field",[],[],0,null,["loc",[null,[12,4],[16,22]]]],
          ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.domains",["loc",[null,[18,27],[18,41]]]]],[],[]]],1,null,["loc",[null,[18,4],[29,22]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.create_organisation_panel.info"],[],["loc",[null,[31,58],[31,109]]]]],[],["loc",[null,[31,41],[31,111]]]],
          ["inline","ko-form/buttons",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[33,15],[33,23]]]]],[],[]],"submitLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.create_organisation_panel.submit"],[],["loc",[null,[34,34],[34,87]]]]],[],["loc",[null,[34,18],[34,88]]]],"cancelLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.cancel"],[],["loc",[null,[35,34],[35,61]]]]],[],["loc",[null,[35,18],[35,62]]]]],["loc",[null,[32,4],[36,6]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2,"class","ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.create_organisation_panel.title"],[],["loc",[null,[2,56],[2,108]]]]],[],["loc",[null,[2,39],[2,110]]]],
        ["block","ko-form",[],["fields",["subexpr","@mut",[["get","fields",["loc",[null,[7,11],[7,17]]]]],[],[]],"onSubmit",["subexpr","action",["submit"],[],["loc",[null,[8,13],[8,30]]]],"onError",["subexpr","action",["error"],[],["loc",[null,[9,12],[9,28]]]],"onSuccess",["subexpr","@mut",[["get","onCreate",["loc",[null,[10,14],[10,22]]]]],[],[]]],0,null,["loc",[null,[6,2],[37,14]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-agent-dropdown/create-user/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus', 'frontend-cp/utils/format-validations'], function (exports, Ember, AutofocusMixin, format_validations) {

  'use strict';

  var composeValidators = function composeValidators() {
    for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
      validators[_key] = arguments[_key];
    }

    return function (value) {
      return validators.reduce(function (acc, validator) {
        return acc || validator(value);
      }, undefined);
    };
  };

  exports['default'] = Ember['default'].Component.extend(AutofocusMixin['default'], {
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},
    onSubmit: function onSubmit() {},

    fields: null,

    intlService: Ember['default'].inject.service('intl'),
    store: Ember['default'].inject.service(),

    init: function init() {
      var _this = this;

      this._super();
      var intlService = this.get('intlService');
      var nameRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.name_required').translation;
      var emailRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_required').translation;
      var invalidEmailTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_invalid').translation;

      this.set('fields', Ember['default'].Object.create({
        full_name: {
          value: '',
          validator: function validator(name) {
            return Boolean(name) ? null : nameRequiredTranslation;
          }
        },
        email: {
          value: '',
          validator: composeValidators(function (email) {
            return Boolean(email) ? null : emailRequiredTranslation;
          }, function (email) {
            return format_validations.validateEmailFormat(email) ? null : invalidEmailTranslation;
          })
        }
      }));

      Ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-user__first-name').focus();
      });
    },

    actions: {
      submit: function submit() {
        var fields = this.get('fields');
        var store = this.get('store');
        this.attrs.onSubmit();
        return store.findRecord('role', 4).then(function (roleModel) {
          var email = store.createRecord('identity-email', {
            'isPrimary': true,
            'email': fields.get('email.value')
          });
          return store.createRecord('user', {
            'role': roleModel,
            'fullName': fields.get('full_name.value'),
            'emails': [email]
          });
        }).then(function (userModel) {
          return userModel.save();
        });
      }
    }
  });

});
define('frontend-cp/components/ko-agent-dropdown/create-user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 12,
                  "column": 98
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.create_user_panel.name_label"],[],["loc",[null,[12,47],[12,96]]]]],[],["loc",[null,[12,30],[12,98]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/label",[],[],0,null,["loc",[null,[12,6],[12,122]]]],
            ["inline","input",[],["type","text","tabindex",1,"class","ko-agent-dropdown-create-user__first-name input-text u-1/1","name","full_name","value",["subexpr","@mut",[["get","fields.full_name.value",["loc",[null,[13,127],[13,149]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[13,159],[13,171]]]]],[],[]]],["loc",[null,[13,6],[13,173]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 99
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.create_user_panel.email_label"],[],["loc",[null,[17,47],[17,97]]]]],[],["loc",[null,[17,30],[17,99]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 19,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["block","ko-form/field/label",[],[],0,null,["loc",[null,[17,6],[17,123]]]],
            ["inline","input",[],["type","text","tabindex",2,"class","input-text u-1/1","name","email","value",["subexpr","@mut",[["get","fields.email.value",["loc",[null,[18,81],[18,99]]]]],[],[]],"disabled",["subexpr","@mut",[["get","isSubmitting",["loc",[null,[18,109],[18,121]]]]],[],[]]],["loc",[null,[18,6],[18,123]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
          morphs[3] = dom.createMorphAt(fragment,6,6,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.full_name",["loc",[null,[11,27],[11,43]]]]],[],[]]],0,null,["loc",[null,[11,4],[14,22]]]],
          ["block","ko-form/field",[],["field",["subexpr","@mut",[["get","fields.email",["loc",[null,[16,27],[16,39]]]]],[],[]]],1,null,["loc",[null,[16,4],[19,22]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.create_user_panel.info"],[],["loc",[null,[21,58],[21,101]]]]],[],["loc",[null,[21,41],[21,103]]]],
          ["inline","ko-form/buttons",[],["onCancel",["subexpr","@mut",[["get","onCancel",["loc",[null,[23,15],[23,23]]]]],[],[]],"submitLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.create_user_panel.submit"],[],["loc",[null,[24,34],[24,79]]]]],[],["loc",[null,[24,18],[24,80]]]],"cancelLabel",["subexpr","format-message",[["subexpr","intl-get",["generic.cancel"],[],["loc",[null,[25,34],[25,61]]]]],[],["loc",[null,[25,18],[25,62]]]]],["loc",[null,[22,4],[26,6]]]]
        ],
        locals: ["_","isSubmitting"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2,"class","ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.create_user_panel.title"],[],["loc",[null,[2,56],[2,100]]]]],[],["loc",[null,[2,39],[2,102]]]],
        ["block","ko-form",[],["fields",["subexpr","@mut",[["get","fields",["loc",[null,[7,11],[7,17]]]]],[],[]],"onSubmit",["subexpr","action",["submit"],[],["loc",[null,[8,13],[8,30]]]],"onSuccess",["subexpr","@mut",[["get","onCreate",["loc",[null,[9,14],[9,22]]]]],[],[]]],0,null,["loc",[null,[6,2],[27,14]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-agent-dropdown/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-agent-dropdown/create-user",[],["onSubmit",["subexpr","action",["onTabSubmitted"],[],["loc",[null,[6,17],[6,42]]]],"onCreate",["subexpr","action",["onTabCreateComplete","session.agent.users.user"],[],["loc",[null,[7,17],[7,74]]]],"onCancel",["subexpr","action",["onTabCancelled"],[],["loc",[null,[8,17],[8,42]]]]],["loc",[null,[5,6],[8,44]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-agent-dropdown/create-case",[],["onSubmit",["subexpr","action",["onTabSubmitted"],[],["loc",[null,[12,17],[12,42]]]],"onCreate",["subexpr","action",["onTabCreateComplete","session.agent.cases.case"],[],["loc",[null,[13,17],[13,74]]]],"onCancel",["subexpr","action",["onTabCancelled"],[],["loc",[null,[14,17],[14,42]]]]],["loc",[null,[11,6],[14,44]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-agent-dropdown/create-organisation",[],["onSubmit",["subexpr","action",["onTabSubmitted"],[],["loc",[null,[18,17],[18,42]]]],"onCreate",["subexpr","action",["onTabCreateComplete","session.agent.organisations.organisation"],[],["loc",[null,[19,17],[19,90]]]],"onCancel",["subexpr","action",["onTabCancelled"],[],["loc",[null,[20,17],[20,42]]]]],["loc",[null,[17,6],[20,44]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","selectedTab",["loc",[null,[4,14],[4,25]]]],["get","userTab",["loc",[null,[4,26],[4,33]]]]],[],["loc",[null,[4,10],[4,34]]]]],[],0,null,["loc",[null,[4,4],[9,11]]]],
          ["block","if",[["subexpr","eq",[["get","selectedTab",["loc",[null,[10,14],[10,25]]]],["get","caseTab",["loc",[null,[10,26],[10,33]]]]],[],["loc",[null,[10,10],[10,34]]]]],[],1,null,["loc",[null,[10,4],[15,11]]]],
          ["block","if",[["subexpr","eq",[["get","selectedTab",["loc",[null,[16,14],[16,25]]]],["get","organisationTab",["loc",[null,[16,26],[16,41]]]]],[],["loc",[null,[16,10],[16,42]]]]],[],2,null,["loc",[null,[16,4],[21,11]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 6
              },
              "end": {
                "line": 25,
                "column": 267
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-agent-dropdown__item");
            var el2 = dom.createElement("button");
            dom.setAttribute(el2,"type","button");
            dom.setAttribute(el2,"class","ko-agent-dropdown__link button-naked");
            dom.setAttribute(el2,"tabindex","0");
            var el3 = dom.createElement("img");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","t-center u-mt--");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [0, 0]);
            var element1 = dom.childAt(element0, [0]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createAttrMorph(element1, 'src');
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
            return morphs;
          },
          statements: [
            ["element","action",["selectTab",["get","item",["loc",[null,[25,171],[25,175]]]]],[],["loc",[null,[25,150],[25,177]]]],
            ["attribute","src",["concat",[["get","item.icon",["loc",[null,[25,190],[25,199]]]]]]],
            ["content","item.text",["loc",[null,[25,234],[25,247]]]]
          ],
          locals: ["item"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 2
            },
            "end": {
              "line": 62,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box box--secondary");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"class","list-inline");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n    TODO(SG): Generate recently viewed cases dynamically. Commented out as part of NOVO-327.\n    <div class=\"box box--secondary\">\n    <p class=\"t-caption t-small u-mb-\">\n    Recently viewed:\n    </p>\n    <div class=\"flag flag--auto flag--small u-mb-\" tabindex=\"0\" disabled>\n      <div class=\"flag__img\">\n        {{ko-avatar avatar=member.avatar}}\n      </div>\n      <div class=\"flag__body\">\n        I can't open the internet.\n        <p class=\"t-small t-caption\">Samantha Jones</p>\n      </div>\n    </div>\n    <div class=\"flag flag--auto flag--small u-mb-\" tabindex=\"0\">\n      <div class=\"flag__img\">\n        {{ko-avatar avatar=member.avatar}}\n      </div>\n      <div class=\"flag__body\">\n        I can't open the internet.\n        <p class=\"t-small t-caption\">Samantha Jones</p>\n      </div>\n    </div>\n    <div class=\"flag flag--auto flag--small\" tabindex=\"0\">\n      <div class=\"flag__img\">\n        {{ko-avatar avatar=member.avatar}}\n      </div>\n      <div class=\"flag__body\">\n        I can't open the internet.\n        <p class=\"t-small t-caption\">Samantha Jones</p>\n      </div>\n    </div>\n    </div>");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","navItems",["loc",[null,[25,14],[25,22]]]]],[],0,null,["loc",[null,[25,6],[25,276]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1,"type","button");
        dom.setAttribute(el1,"tabindex","0");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"tabindex","-1");
        dom.setAttribute(el1,"role","menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createElementMorph(element2);
        morphs[2] = dom.createAttrMorph(element3, 'class');
        morphs[3] = dom.createMorphAt(element3,1,1);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-agent-dropdown__nav-new button i-plus i-size-18",["subexpr","if",[["get","isExpanded",["loc",[null,[1,97],[1,107]]]]," is-active"],[],["loc",[null,[1,92],[1,122]]]]]]],
        ["element","action",["toggleDropdown"],[],["loc",[null,[1,124],[1,151]]]],
        ["attribute","class",["concat",["ko-agent-dropdown__drop box-container ",["subexpr","unless",[["get","isExpanded",["loc",[null,[2,59],[2,69]]]],"u-hidden"],[],["loc",[null,[2,50],[2,82]]]]]]],
        ["block","if",[["get","selectedTab",["loc",[null,[3,8],[3,19]]]]],[],0,1,["loc",[null,[3,2],[62,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-avatar/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    avatar: null,
    size: 'normal', // [small | normal | large]

    isLarge: Ember['default'].computed('size', function () {
      return this.get('size') === 'large';
    }),

    isSmall: Ember['default'].computed('size', function () {
      return this.get('size') === 'small';
    }),

    // will be used flip between avatar / gravatar etc when we need that functionality!
    imageURL: Ember['default'].computed('avatar', function () {
      return this.get('avatar');
    })
  });

});
define('frontend-cp/components/ko-avatar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-avatar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1,"alt","");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element0, 'src');
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-avatar__image ",["subexpr","if",[["get","isSmall",["loc",[null,[1,34],[1,41]]]],"ko-avatar__image--small"],[],["loc",[null,[1,29],[1,69]]]]," ",["subexpr","if",[["get","isLarge",["loc",[null,[1,75],[1,82]]]],"ko-avatar__image--large"],[],["loc",[null,[1,70],[1,110]]]]]]],
        ["attribute","src",["concat",[["get","imageURL",["loc",[null,[1,119],[1,127]]]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-breadcrumbs/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    breadcrumbs: null,
    activeBreadcrumb: null,

    initBreadcrumbs: Ember['default'].on('init', function () {
      if (!this.get('breadcrumbs')) {
        this.set('breadcrumbs', []);
      }
    }),

    actions: {
      breadcrumbChange: function breadcrumbChange(id) {
        this.sendAction('action', id);
      }
    }
  });

});
define('frontend-cp/components/ko-breadcrumbs/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["breadcrumbs__item ",["subexpr","if",[["subexpr","eq",[["get","activeBreadcrumb",["loc",[null,[4,42],[4,58]]]],["get","breadcrumb.id",["loc",[null,[4,59],[4,72]]]]],[],["loc",[null,[4,38],[4,73]]]],"breadcrumbs__item--active"],[],["loc",[null,[4,33],[4,103]]]]]]],
          ["element","action",["breadcrumbChange",["get","breadcrumb.id",["loc",[null,[4,133],[4,146]]]]],[],["loc",[null,[4,105],[4,148]]]],
          ["content","breadcrumb.name",["loc",[null,[4,149],[4,168]]]]
        ],
        locals: ["breadcrumb"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","breadcrumbs");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","breadcrumbs",["loc",[null,[3,12],[3,23]]]]],[],0,null,["loc",[null,[3,4],[5,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case/macro-selector/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    macros: [],
    onMacroSelected: null,

    // build a value list for the option drilldown
    macroValueList: Ember['default'].computed('macros.[]', function () {
      var valueList = this.get('macros').map(function (macro) {
        return { id: macro.get('id'), value: macro.get('title') };
      });
      return valueList;
    }),

    actions: {
      onMacroSelected: function onMacroSelected(macroId) {
        var selectedMacro = this.get('macros').filter(function (macro) {
          return macro.get('id') === macroId;
        }).get('firstObject');
        this.sendAction('onMacroSelected', selectedMacro);
      }
    }

  });

});
define('frontend-cp/components/ko-case/macro-selector/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-dropdown/drill-down",[],["label","Macro","title",["subexpr","format-message",[["subexpr","intl-get",["cases.applymacro"],[],["loc",[null,[3,24],[3,53]]]]],[],["loc",[null,[3,8],[3,54]]]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["cases.applymacroplaceholder"],[],["loc",[null,[4,30],[4,70]]]]],[],["loc",[null,[4,14],[4,71]]]],"options",["subexpr","@mut",[["get","macroValueList",["loc",[null,[5,10],[5,24]]]]],[],[]],"contextModalId","macroDrillDownInline","onSelect","onMacroSelected"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case/sla-sidebar/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    sla: null,
    slaMetrics: null
  });

});
define('frontend-cp/components/ko-case/sla-sidebar/metric/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    metric: null,

    tagName: 'tr',

    statusClassName: Ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');
      return 'ko-case_sla-sidebar__data--' + status.toLowerCase();
    }),

    iconClass: Ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state'),
          status = this.get('metric.status');

      var iconClass = this.getIconClassName(state, status);
      return iconClass + ' t-' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });

});
define('frontend-cp/components/ko-case/sla-sidebar/metric/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    -\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          return morphs;
        },
        statements: [
          ["content","metric.numberOfWholeDaysRemaining",["loc",[null,[13,4],[13,41]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.day_abbreviation"],[],["loc",[null,[13,58],[13,95]]]]],[],["loc",[null,[13,41],[13,97]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          return morphs;
        },
        statements: [
          ["content","metric.numberOfWholeHoursRemaining",["loc",[null,[17,4],[17,42]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.hour_abbreviation"],[],["loc",[null,[17,59],[17,97]]]]],[],["loc",[null,[17,42],[17,99]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","ko-case_sla-sidebar__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1,"class","u-pr- t-right");
        var el2 = dom.createTextNode("\n  in\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [10]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0,1,1);
        morphs[3] = dom.createMorphAt(element0,3,3);
        morphs[4] = dom.createMorphAt(element0,5,5);
        morphs[5] = dom.createMorphAt(element0,7,7);
        morphs[6] = dom.createMorphAt(element0,8,8);
        morphs[7] = dom.createAttrMorph(element1, 'class');
        return morphs;
      },
      statements: [
        ["content","metric.title",["loc",[null,[2,2],[2,18]]]],
        ["attribute","class",["concat",["ko-case_sla-sidebar__data ",["get","statusClassName",["loc",[null,[7,39],[7,54]]]]]]],
        ["block","if",[["get","metric.isBreached",["loc",[null,[8,8],[8,25]]]]],[],0,null,["loc",[null,[8,2],[10,9]]]],
        ["block","if",[["get","metric.numberOfWholeDaysRemaining",["loc",[null,[12,8],[12,41]]]]],[],1,null,["loc",[null,[12,2],[14,9]]]],
        ["block","if",[["get","metric.numberOfWholeHoursRemaining",["loc",[null,[16,8],[16,42]]]]],[],2,null,["loc",[null,[16,2],[18,9]]]],
        ["content","metric.numberOfWholeMinutesRemaining",["loc",[null,[20,2],[20,42]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.minute_abbreviation"],[],["loc",[null,[20,59],[20,99]]]]],[],["loc",[null,[20,42],[20,101]]]],
        ["attribute","class",["concat",[["get","iconClass",["loc",[null,[22,14],[22,23]]]]," i-size-18 i-after"]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-case/sla-sidebar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-case/sla-sidebar/metric",[],["metric",["subexpr","@mut",[["get","metric",["loc",[null,[5,40],[5,46]]]]],[],[]]],["loc",[null,[5,4],[5,48]]]]
        ],
        locals: ["metric"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("b");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1,"class","ko-case_sla-sidebar");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.SLA"],[],["loc",[null,[1,20],[1,44]]]]],[],["loc",[null,[1,3],[1,46]]]],
        ["content","sla.title",["loc",[null,[1,51],[1,64]]]],
        ["block","each",[["get","slaMetrics",["loc",[null,[4,10],[4,20]]]]],[],0,null,["loc",[null,[4,2],[6,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case-content/component', ['exports', 'ember', 'jquery'], function (exports, Ember, $) {

  'use strict';

  var dimensions = {
    pageHeaderHeight: 84,
    breadcrumbsMarginTop: 36,
    breadcrumbsHeight: 56,
    titleMarginTop: 18,
    headerHeight: 64,
    contentsMarginTop: 18,
    filterHeight: 18,
    topLoaderHeight: 70
  };

  // When the distance between bottom of the viewport and the bottom of what has
  // been currently rendered in the timeline falls below this number, fetch new posts.
  var scrollBufferDistance = 50;

  var totalHeaderHeight = dimensions.breadcrumbsMarginTop + dimensions.breadcrumbsHeight + dimensions.titleMarginTop + dimensions.headerHeight + dimensions.contentsMarginTop;

  // TODO: this component, ko-user-content, ko-organisation-content
  // needs serious refactoring. Its growing too fast with really
  // confusing logic in different places.

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['ko-case-content'],
    // Params
    'case': null,
    caseFields: null,
    onTopPostChange: function onTopPostChange() {},
    postId: null,

    store: Ember['default'].inject.service(),
    intl: Ember['default'].inject.service(),
    timelineCacheService: Ember['default'].inject.service('case-timeline-cache'),
    notificationService: Ember['default'].inject.service('notification'),
    tagSuggestionService: Ember['default'].inject.service('suggestion/tag'),
    peopleSuggestionService: Ember['default'].inject.service('suggestion/people'),
    contextModalService: Ember['default'].inject.service('context-modal'),
    routeStateService: Ember['default'].inject.service('routeState'),
    intlService: Ember['default'].inject.service('intl'),
    customFieldsList: Ember['default'].inject.service('custom-fields/list'),
    pusherService: Ember['default'].inject.service('pusher'),

    // Case-specific properties
    channel: null,
    topPost: null,
    bottomPost: null,
    topPostsAvailable: false,
    bottomPostsAvailable: true,
    loadingTop: false,
    loadingBottom: false,
    posts: null,
    newPosts: null,
    sortOrder: '',
    filter: '',

    errors: null,
    macros: [],
    isTagsFieldEdited: false,
    isCaseSubjectEdited: false,
    resizeStickyEditorRequestID: null,
    repositionStickyEditorRequestID: null,
    timelineVisibleTop: 0,
    timelineVisibleLeft: 0,
    loadPostsRafID: null,
    caseEditorHeight: 0,
    headerSticky: false,
    editedCaseFields: null,
    propertiesChangeViaPusher: null,
    shouldIgnoreNextPusherUpdate: false,
    replyType: 'REPLY',
    scroller: null,
    updateTabNameAction: 'updateTabName',

    suggestedPeople: null,
    selectedPeople: [],
    suggestedPeopleTotal: 0,
    suggestedPeopleLoading: false,

    sortOptions: null,
    filterOptions: null,
    suggestedTags: [],
    caseForms: [],

    initIntl: Ember['default'].on('init', function () {
      var intlService = this.get('intlService');

      this.set('sortOptions', [{ label: intlService.findTranslationByKey('cases.sort_options.newest_first').translation, content: 'newest' }, { label: intlService.findTranslationByKey('cases.sort_options.oldest_first').translation, content: 'oldest' }]);

      this.set('filterOptions', [{ label: intlService.findTranslationByKey('cases.filter_options.posts').translation, content: 'posts' }, { label: intlService.findTranslationByKey('cases.filter_options.all').translation, content: 'all' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_activities').translation, content: 'posts,activities' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_events').translation, content: 'posts,events' }]);
    }),

    initErrors: Ember['default'].on('init', function () {
      this.set('errors', []);
    }),

    errorMap: Ember['default'].computed('errors', function () {
      var errorMap = {};
      this.get('errors').forEach(function (error) {
        errorMap[error.parameter] = true;
      });
      return errorMap;
    }),

    caseEditorStyle: Ember['default'].computed('caseEditorHeight', function () {
      return Ember['default'].String.htmlSafe('height: ' + this.get('caseEditorHeight') + 'px');
    }),

    isPeopleAutoCompleteAvailable: Ember['default'].computed('replyType', 'channel.isChannelTypeMailbox', function () {
      return this.get('replyType') === 'REPLY' && this.get('channel.isChannelTypeMailbox');
    }),

    onSelectedPeopleChange: Ember['default'].observer('selectedPeople.[]', function () {
      this.get('contextModalService').set('repositionRequired', true);
    }),

    updateDirtyCaseFieldsIfModelHasChanged: Ember['default'].on('willUpdate', function () {
      /*
       *  If we change model (by changing tabs) we need to update the dirtyFieldsHash
       *  but not if we just scroll the page
       */
      if (this.get('recalculateDirtyFieldHash')) {
        this.updateDirtyCaseFieldHash();
        this.set('recalculateDirtyFieldHash', false);
      }
    }),

    initCase: Ember['default'].on('didReceiveAttrs', function (_ref) {
      var _this = this;

      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (!oldAttrs || newAttrs['case'].value !== oldAttrs['case'].value) {
        this.set('channel', this.get('case.sourceChannel') ? this.get('case.sourceChannel') : this.get('case.replyChannels.firstObject'));
        this.set('posts', []);
        this.set('topPost', null);
        this.set('bottomPost', null);
        this.set('newPosts', []);
        this.set('loadingTop', false);
        this.set('loadingBottom', false);
        this.set('bottomPostsAvailable', true);
        if (newAttrs.postId.value) {
          this.set('topPostsAvailable', true);
          Ember['default'].run.scheduleOnce('afterRender', function () {
            _this.get('scroller').scrollTop(totalHeaderHeight + dimensions.filterHeight + dimensions.topLoaderHeight);
          });
        } else {
          this.set('topPostsAvailable', false);
        }

        this.get('pusherService').subscribeTo(this.get('case.realtimeChannel'), 'CHANGE', this, this.get('pusherService').updateCaseFromPusher, this.get('case.id'));

        this.set('recalculateDirtyFieldHash', true);
      } else if (newAttrs.sortOrder.value !== oldAttrs.sortOrder.value || newAttrs.filter.value !== oldAttrs.filter.value) {
        this.set('posts', []);
        this.set('topPostsAvailable', false);
        this.set('bottomPostsAvailable', true);
        this.set('topPost', null);
        this.set('bottomPost', null);
      }

      if (!this.get('case.channels.length') && !this.get('case.replyChannels.length')) {
        this.set('replyType', 'NOTE');
      }
    }),

    onCaseOrFormFieldsChange: Ember['default'].observer('caseOrFormFields.[]', function () {
      var _this2 = this;

      // we need to re-validate dirty state when we have case or form fields
      // so we mark Status fields with the right state.

      this.validateCaseStatus(this.get('case')).then(function () {
        _this2.updateDirtyCaseFieldHash();
      });
    }),

    tags: Ember['default'].computed('case.tags.@each.name', function () {
      return this.get('case.tags').map(function (tag) {
        return tag.get('name');
      });
    }),

    availableChannels: Ember['default'].computed('case.id', 'case.replyChannels', 'case.channels', function () {
      if (!this.get('case.id')) {
        return this.get('case.channels');
      } else {
        return this.get('case.replyChannels');
      }
    }),

    resizeSidebarAndContent: Ember['default'].on('willInsertElement', function () {
      var _this3 = this;

      this.set('resizeStickyEditorRequestID', window.requestAnimationFrame(function () {
        var $editor = _this3.$('.ko-case-content__editor');
        var height = $editor.outerHeight();
        var boundingRect = $editor.get(0).getBoundingClientRect();
        Ember['default'].run(function () {
          _this3.set('caseEditorHeight', height);
          _this3.set('timelineVisibleTop', boundingRect.top + boundingRect.height);
          _this3.set('timelineVisibleLeft', boundingRect.left);
        });
        _this3.resizeSidebarAndContent();
      }));

      this.set('scroller', $['default']('.ko-scroller'));
    }),

    repositionStickyEditor: Ember['default'].on('willInsertElement', 'didReceiveAttrs', function () {
      var _this4 = this;

      this.set('repositionStickyEditorRequestID', window.requestAnimationFrame(function () {
        var $el = _this4.$('.ko-case-content__editor-container');
        if (!$el) {
          return;
        }

        var _$el$get$getBoundingClientRect = $el.get(0).getBoundingClientRect();

        var containerTop = _$el$get$getBoundingClientRect.top;

        Ember['default'].run(function () {
          _this4.set('headerSticky', containerTop <= dimensions.pageHeaderHeight);
          var newTop = containerTop <= dimensions.pageHeaderHeight ? dimensions.pageHeaderHeight - containerTop : 0;
          _this4.$('.ko-case-content__editor').css('transform', 'translateY(' + newTop + 'px) translateZ(0)');
          _this4.$('.ko-case-content__info-bar').css('transform', 'translateY(' + newTop + 'px) translateZ(0)');
          _this4.$('.ko-case-content__info-bar').css('height', $['default'](window).height() - Math.max(containerTop, dimensions.pageHeaderHeight) + 'px');
        });
      }));
    }),

    loadPostsIfRequired: Ember['default'].on('willInsertElement', function () {
      var _this5 = this;

      this.set('loadPostsRafID', window.requestAnimationFrame(function () {
        if (_this5.get('case.id')) {
          // we don't want to load posts for new cases
          if (!_this5.get('loadingTop') && _this5.get('topPostsAvailable') && _this5.get('scroller').scrollTop() < totalHeaderHeight + dimensions.filterHeight + dimensions.topLoaderHeight) {
            _this5.loadTopPosts(_this5.get('topPost.id') || _this5.get('postId'));
          }

          var _$$get$getBoundingClientRect = _this5.$('.ko-case-content__loaderBottom').get(0).getBoundingClientRect();

          var bottomTop = _$$get$getBoundingClientRect.top;
          var bottomHeight = _$$get$getBoundingClientRect.height;

          var bottomPosition = bottomTop + bottomHeight;

          if (!_this5.get('loadingBottom') && _this5.get('bottomPostsAvailable') && bottomPosition - scrollBufferDistance <= $['default'](window).height()) {
            _this5.loadBottomPosts(_this5.get('bottomPost.id') || _this5.get('postId'), {
              including: !_this5.get('bottomPost.id')
            });
          }
        }
        _this5.loadPostsIfRequired();
      }));
    }),

    loadTopPosts: function loadTopPosts(id) {
      var _this6 = this;

      Ember['default'].run(function () {
        _this6.set('loadingTop', true);
        _this6.get('timelineCacheService').getPosts(_this6.get('case'), id, {
          direction: _this6.get('sortOrder') === 'newest' ? 'newer' : 'older',
          includeActivities: _this6.get('includeActivities'),
          includeEvents: _this6.get('includeEvents')
        }).then(function (posts) {
          Ember['default'].run(function () {
            _this6.set('newPosts', posts);
            window.requestAnimationFrame(function () {
              var height = _this6.$('.ko-case-content__fakeFeed').height();
              var topPost = undefined;
              _this6.set('newPosts', []);
              posts.forEach(function (post) {
                _this6.get('posts').unshiftObject(post);
                if (post.constructor.typeKey === 'post') {
                  topPost = post;
                }
              });
              var scrollTop = _this6.get('scroller').scrollTop();
              var newScrollPosition = scrollTop + height;
              _this6.set('loadingTop', false);
              _this6.set('topPost', topPost);
              if (!topPost) {
                newScrollPosition -= dimensions.topLoaderHeight;
                _this6.set('topPostsAvailable', false);
              }
              Ember['default'].run.scheduleOnce('afterRender', function () {
                _this6.get('scroller').scrollTop(newScrollPosition);
              });
            });
          });
        });
      });
    },

    loadBottomPosts: function loadBottomPosts(id, _ref2) {
      var _this7 = this;

      var including = _ref2.including;

      Ember['default'].run(function () {
        _this7.set('loadingBottom', true);
        _this7.get('timelineCacheService').getPosts(_this7.get('case'), id, {
          direction: _this7.get('sortOrder') === 'newest' ? 'older' : 'newer',
          including: including,
          includeActivities: _this7.get('includeActivities'),
          includeEvents: _this7.get('includeEvents')
        }).then(function (posts) {
          Ember['default'].run(function () {
            var bottomPost = undefined;
            posts.forEach(function (post) {
              _this7.get('posts').pushObject(post);
              if (post.constructor.typeKey === 'post') {
                bottomPost = post;
              }
            });
            _this7.set('loadingBottom', false);
            _this7.set('bottomPost', bottomPost);
            var lastSequence = _this7.get('sortOrder') === 'newest' ? 1 : _this7.get('timelineCacheService').getCaseCache(_this7.get('case')).total;
            if (!bottomPost || bottomPost.get('sequence') === lastSequence) {
              _this7.set('bottomPostsAvailable', false);
            }
          });
        });
      });
    },

    onScroll: function onScroll() {
      if (this.get('topPostsAvailable')) {
        var currentScrollTop = this.get('scroller').scrollTop();
        if (currentScrollTop < totalHeaderHeight + dimensions.filterHeight) {
          this.get('scroller').scrollTop(totalHeaderHeight + dimensions.filterHeight);
        }
      }

      this.repositionStickyEditor();
    },

    onResize: function onResize() {
      this.repositionStickyEditor();
    },

    startListeners: Ember['default'].on('willInsertElement', function () {
      this.onScroll = this.onScroll.bind(this);
      this.set('scroller', $['default']('.ko-scroller'));
      this.get('scroller').on('scroll', this.onScroll).scroll();

      this.onResize = this.onResize.bind(this);
      $['default'](window).on('resize', this.onResize);
    }),

    cleanup: Ember['default'].on('willDestroyElement', function () {
      this.get('scroller').off('scroll', this.onScroll);
      $['default'](window).off('resize', this.onResize);
      window.cancelAnimationFrame(this.get('resizeStickyEditorRequestID'));
      window.cancelAnimationFrame(this.get('loadPostsRafID'));
      window.cancelAnimationFrame(this.get('repositionStickyEditorRequestID'));
    }),

    initDirtyCaseFieldHash: Ember['default'].on('init', function () {
      this.set('editedCaseFields', new Ember['default'].Object());
      this.updateDirtyCaseFieldHash();
    }),

    initMacros: Ember['default'].on('init', function () {
      var _this8 = this;

      this.get('store').find('macro').then(function (macros) {
        _this8.set('macros', macros);
      });
    }),

    initCaseForms: Ember['default'].on('init', function () {
      var _this9 = this;

      this.get('store').findAll('case-form').then(function (caseForms) {
        _this9.set('caseForms', caseForms);
      });
    }),

    caseOrFormFields: Ember['default'].computed('caseFields', 'case.form', function () {
      var caseFields = this.get('caseFields');
      var form = this.get('case.form');
      return form ? form.get('fields') : caseFields.sortBy('sortOrder');
    }),

    hasBrand: Ember['default'].computed('case.brand.companyName', function () {
      return !!this.get('case.brand.companyName');
    }),

    hasChannel: Ember['default'].computed('case.sourceChannel.channelType', function () {
      return !!this.get('case.sourceChannel.channelType');
    }),

    includeActivities: Ember['default'].computed('filter', function () {
      return this.get('filter') === 'all' || this.get('filter') === 'posts,activities';
    }),

    includeEvents: Ember['default'].computed('filter', function () {
      return this.get('filter') === 'all' || this.get('filter') === 'posts,events';
    }),

    optionsForField: function optionsForField(field) {
      /*
       * System fields
       */
      switch (field.get('fieldType')) {
        case 'PRIORITY':
          return this.get('store').peekAll('case-priority');
        case 'TYPE':
          return this.get('store').peekAll('case-type');
      }
    },

    updateDirtyCaseFieldHash: function updateDirtyCaseFieldHash() {
      var _this10 = this;

      var editedCaseFields = this.get('editedCaseFields');
      this.get('caseOrFormFields').forEach(function (field) {
        var relationshipKey = field.get('key');

        /* Hack for type - type is a reserved word */
        if (relationshipKey === 'type') {
          relationshipKey = 'caseType';
        }

        /* Hack for assignee - it is made up from two properties (case.assginee.team and case.assignee.agent) */
        if (relationshipKey === 'assignee') {
          if (_this10.get('case.assignee')) {
            editedCaseFields.set(field.get('id'), _this10.get('case.assignee').hasDirtyChanges());
            return;
          }
        }

        /* subject is a attribute */
        if (relationshipKey === 'subject') {
          editedCaseFields.set(field.get('id'), !!_this10.get('case').changedAttributes().subject);
          editedCaseFields.set(relationshipKey, !!_this10.get('case').changedAttributes().subject);
          return;
        }

        if (field.get('isSystem')) {
          editedCaseFields.set(field.get('id'), _this10.get('case').hasDirtyBelongsToRelationship(relationshipKey));
          editedCaseFields.set(relationshipKey, _this10.get('case').hasDirtyBelongsToRelationship(relationshipKey));
        } else {
          var customCaseField = _this10.get('case.customFields').find(function (customField) {
            return field.get('id') == customField.get('field.id');
          });

          if (customCaseField) {
            var _ret = (function () {
              // customFields have values, which are a string. The value can be an array, disguised as a string by comma
              // separating them: "7,8". This is, unfortunately, the same as "8,7" but changedAttributes() will show this up as
              // changed (obviously). So, if we have changed attributes, split the string and test to see if all is good

              if (!customCaseField.changedAttributes().value) {
                // definitely unchanged!
                editedCaseFields.set(field.get('id'), false);
                return {
                  v: undefined
                };
              }

              var originalValues = customCaseField.changedAttributes().value[0].split(',');
              var modifiedValues = customCaseField.changedAttributes().value[1].split(',');

              if (originalValues.length !== modifiedValues.length) {
                editedCaseFields.set(field.get('id'), true);
                return {
                  v: undefined
                };
              }

              editedCaseFields.set(field.get('id'), originalValues.any(function (value) {
                return modifiedValues.indexOf(value) === -1;
              }));
            })();

            if (typeof _ret === 'object') return _ret.v;
          }
        }
      });
      editedCaseFields.set('form', this.get('case').hasDirtyBelongsToRelationship('form'));
      this.set('isTagsFieldEdited', this.get('case').hasDirtyHasManyRelationship('tags'));
    },

    resetCaseFormState: function resetCaseFormState() {
      this.set('errors', []);
      this.get('casePostEditor').clear();
      this.get('casePostEditor.postEditor').clear();
      this.set('shouldIgnoreNextPusherUpdate', false);

      this.updateDirtyCaseFieldHash();

      // New tags should be rolled back as they are left
      // in the store after we save a case. New tags have id = null,
      // and the same tag with numeric id is also returned from the server.
      this.get('store').peekAll('tag').forEach(function (record) {
        if (record.get('hasDirtyAttributes')) {
          record.rollbackAttributes();
        }
      });
    },

    caseHasTagWithName: function caseHasTagWithName(tagName) {
      return !!this.get('case.tags').filter(function (tag) {
        return tag.get('name') === tagName;
      }).length;
    },

    caseDates: Ember['default'].computed('case.createdAt', 'case.updatedAt', 'case.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created').translation,
        value: this.get('case.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated').translation,
        value: this.get('case.updatedAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.lastseen').translation,
        value: this.get('case.visitedAt') }];
    }),

    /*
     * Whenever we scroll to the top of the timeline and the header “unsticks”,
     * this informs parent to remove postId from the URL.
     */
    sendTopPost: Ember['default'].observer('headerSticky', function () {
      if (!this.get('headerSticky')) {
        this.attrs.onTopPostChange(null);
      }
    }),

    /**
     * Add newly added post to the cache and append or prepend it to the timeline
     * depending on sort settings and whether there'll be no gaps in the timeline
     * by doing so.
     * @param {DS.Model} post post
     */
    addPostFromReply: function addPostFromReply(post) {
      this.get('timelineCacheService').addPost(this.get('case'), post);
      if (this.get('sortOrder') === 'newest' && !this.get('topPostsAvailable')) {
        this.get('posts').unshiftObject(post);
      } else if (this.get('sortOrder') === 'oldest' && !this.get('bottomPostsAvailable')) {
        this.get('posts').pushObject(post);
      }
    },

    _getCaseSaveNotification: function _getCaseSaveNotification(type) {
      var notificationMessage = null;

      // TODO: update messages later, for now all are the same.
      switch (type) {
        case 'create':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.created').translation;
          break;
        case 'update':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated').translation;
          break;
        case 'with-note':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated').translation;
          break;
        case 'with-reply':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated').translation;
          break;
      }

      if (notificationMessage) {
        this.get('notificationService').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    },

    validateCaseStatus: function validateCaseStatus(editingCase) {
      // TODO: not a best way to have this validation logic in here
      // and in the case/index/route.js, but seems like its the
      // best choice for now, without breaking a lot of code.
      // Later this whole class needs decent refactoring.

      var caseStatus = editingCase.get('status');

      if (editingCase.get('id') && caseStatus.get('statusType') === 'NEW') {
        // assuming that status ID 3 will always be pending
        return this.get('store').find('case-status', 3).then(function (pendingStatus) {
          editingCase.set('status', pendingStatus);
        });
      }

      return Ember['default'].RSVP.Promise.resolve();
    },

    actions: {
      updateDirtyFieldHash: function updateDirtyFieldHash() {
        this.updateDirtyCaseFieldHash();
      },
      setChannel: function setChannel(channel) {
        this.set('channel', channel);
      },
      setPriority: function setPriority(priority) {
        this.set('case.priority', priority);
        this.updateDirtyCaseFieldHash();
      },
      setStatus: function setStatus(status) {
        this.set('case.status', status);
        this.updateDirtyCaseFieldHash();
      },
      setType: function setType(type) {
        this.set('case.caseType', type);
        this.updateDirtyCaseFieldHash();
      },
      setSubject: function setSubject(subject) {
        this.set('case.subject', subject);
        this.updateDirtyCaseFieldHash();
      },
      setAssignee: function setAssignee(team, agent) {
        if (!this.get('case.assignee.teamFragment')) {
          this.set('case.assignee.teamFragment', this.get('store').createFragment('relationship-fragment'));
        }
        this.set('case.assignee.teamFragment.relationshipId', team.get('id'));

        if (!this.get('case.assginee.agentFragment')) {
          this.set('case.assignee.agentFragment', this.get('store').createFragment('relationship-fragment'));
        }
        this.set('case.assignee.agentFragment.relationshipId', agent ? agent.get('id') : null);
        this.updateDirtyCaseFieldHash();
      },
      setForm: function setForm(form) {
        this.set('case.form', form);
        this.updateDirtyCaseFieldHash();
      },

      addTag: function addTag(tagName) {
        if (this.caseHasTagWithName(tagName)) {
          return;
        }
        var newTag = this.get('store').createRecord('tag', { name: tagName });
        this.get('case.tags').pushObject(newTag);
        this.set('isTagsFieldEdited', this.get('case').hasDirtyHasManyRelationship('tags'));
      },
      removeTag: function removeTag(tagName) {
        var tags = this.get('case.tags');
        var tag = tags.find(function (tag) {
          return tag.get('name') === tagName;
        });
        if (tag) {
          tags.removeObject(tag);
          this.set('isTagsFieldEdited', this.get('case').hasDirtyHasManyRelationship('tags'));
        }
      },

      suggestTags: function suggestTags(searchTerm, selectedTags) {
        var _this11 = this;

        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggest(searchTerm).then(function (data) {
          data = suggestionService.exclude(data, selectedTags);

          _this11.set('suggestedTags', data.map(function (tag) {
            return tag.get('name');
          }));
        });
      },

      submit: function submit() {
        var _this12 = this;

        var channel = this.get('channel');
        var editor = this.get('casePostEditor.postEditor');
        var post = editor.getMarkdown().trim();
        var uploads = this.get('casePostEditor').getAttachedUploads();
        var attachmentIds = uploads.map(function (upload) {
          return upload.get('attachmentId');
        }).filter(function (id) {
          return id !== null;
        });

        this.sendAction('updateTabNameAction', this.get('case.subject'));

        // @TODO we need to do something better here, UI wise.
        if (uploads.filter(function (u) {
          return u.get('status') === 'PROGRESS';
        }).length) {
          this.get('notificationService').add({
            type: 'warning',
            title: 'Upload in progress',
            autodismiss: true
          });
          return;
        }

        this.set('shouldIgnoreNextPusherUpdate', true);

        if (!this.get('case.id')) {
          this.set('case.contents', post);
          this.set('case.channel', channel.get('channelType'));
          this.set('case.channelId', channel.get('account.id'));
          this.get('case').save().then(function (newCase) {
            _this12._getCaseSaveNotification('create');
            _this12.resetCaseFormState();
            // TODO: need to transition to the right case id
            _this12.validateCaseStatus(newCase).then(function () {
              _this12.updateDirtyCaseFieldHash();
            });
          }, function (e) {
            _this12.set('errors', e.errors);
            _this12.set('shouldIgnoreNextPusherUpdate', false);
          });
        } else if (!post && !attachmentIds.length) {
          // we are just updating the case -- don't create a case-reply
          this.get('case').save().then(function () {
            _this12._getCaseSaveNotification('update');
            _this12.resetCaseFormState();
          }, function (e) {
            _this12.set('errors', e.errors);
            _this12.set('shouldIgnoreNextPusherUpdate', false);
          });
        } else {
          if (this.get('replyType') === 'NOTE') {
            this.get('case').saveWithNote(post).then(function (caseNote) {
              _this12._getCaseSaveNotification('with-note');
              _this12.addPostFromReply(caseNote.get('post'));
              _this12.resetCaseFormState();
            }, function (e) {
              _this12.set('errors', e.errors);
              _this12.set('shouldIgnoreNextPusherUpdate', false);
            });
          } else {
            var options = {
              cc: this.get('selectedPeople').map(function (person) {
                return person.get('email');
              }).join(',')
            };
            this.get('case').saveWithPost(post, channel, attachmentIds, options).then(function (caseReply) {
              caseReply.get('posts').forEach(function (post) {
                return _this12.addPostFromReply(post);
              });

              _this12._getCaseSaveNotification('with-reply');
              _this12.resetCaseFormState();
            }, function (e) {
              _this12.set('errors', e.errors);
              _this12.set('shouldIgnoreNextPusherUpdate', false);
            });
          }
        }
      },

      replyWithQuote: function replyWithQuote(quote) {
        this.$('.ql-editor div').remove();
        this.$('.ql-editor').append('<blockquote>' + quote + '</blockquote>');
      },

      applyMacro: function applyMacro(macro) {
        var _this13 = this;

        var currentCase = this.get('case');
        var contentsToAdd = macro.get('replyContents');
        var newStatus = macro.get('properties.status');
        var newPriority = macro.get('properties.priority');
        var newType = macro.get('properties.macroType');
        var newAssignedTeam = macro.get('assignee') ? macro.get('assignee.team') : null;
        var newAssignedAgent = macro.get('assignee') ? macro.get('assignee.agent') : null;
        var priorityAction = macro.get('properties.priorityAction');
        var tags = macro.get('tags');

        if (contentsToAdd) {
          this.get('casePostEditor.postEditor').insertOrAppendHTML(contentsToAdd);
          this.set('replyType', macro.get('replyType'));
        }
        if (newStatus) {
          currentCase.set('status', newStatus);
        }
        if (newPriority) {
          currentCase.set('priority', newPriority);
        }
        if (priorityAction) {
          (function () {
            var newPriorityLevel = undefined;

            if (priorityAction === 'INCREASE_ONE_LEVEL') {
              newPriorityLevel = currentCase.get('priority.level') + 1;
            } else {
              newPriorityLevel = currentCase.get('priority.level') - 1;

              // if we can't find a valid priority, it should have the lowest priority.
              if (newPriorityLevel < 1) {
                newPriorityLevel = 1;
              }
            }

            var newPriority = _this13.get('store').peekAll('case-priority').filter(function (priority) {
              return priority.get('level') === newPriorityLevel;
            }).get('firstObject');

            if (newPriority) {
              currentCase.set('priority', newPriority);
            }
          })();
        }
        if (newType) {
          currentCase.set('caseType', newType);
        }
        if (newAssignedTeam) {
          this.send('setAssignee', newAssignedTeam, newAssignedAgent);
        }
        if (tags.get('length')) {
          tags.forEach(function (tag) {
            if (tag.get('type') === 'ADD') {
              _this13.send('addTag', tag.get('name'));
            } else {
              _this13.send('removeTag', tag.get('name'));
            }
          });
        }
      },

      addParticipant: function addParticipant() {
        this.get('contextModalService').open('addParticipants', {
          target: this.$().find('.ko-text-editor-header-group__item.i-users').get(0)
        });
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        var _this14 = this;

        var contextModalService = this.get('contextModalService');

        this.set('suggestedPeopleLoading', true);
        contextModalService.set('repositionRequired', true);

        if (!searchTerm) {
          this.set('suggestedPeople', null);

          contextModalService.set('repositionRequired', true);
          this.set('suggestedPeopleLoading', false);
          return;
        }

        var peopleSuggestionService = this.get('peopleSuggestionService');
        var promise = peopleSuggestionService.suggest(searchTerm, selectedPeople.map(function (person) {
          return person.get('email');
        }));

        promise.then(function (data) {
          if (peopleSuggestionService.isPromiseDiscarded(searchTerm)) {
            return;
          }

          var identities = [];

          data.forEach(function (item) {
            identities.push(item.get('identity'));
          });

          identities = peopleSuggestionService.exclude(identities, selectedPeople, 'email');

          _this14.set('suggestedPeople', identities);
          _this14.set('suggestedPeopleTotal', data.get('meta.total'));

          contextModalService.set('repositionRequired', true);

          peopleSuggestionService.flushQueue();

          _this14.set('suggestedPeopleLoading', false);
        });
      },

      changeTopPost: function changeTopPost(id) {
        if (this.get('headerSticky')) {
          this.attrs.onTopPostChange(id);
        }
      },

      filter: function filter(_filter) {
        this.attrs.onFilter(_filter);
      },

      sort: function sort(sortOrder) {
        this.attrs.onSort(sortOrder);
      }
    }
  });

});
define('frontend-cp/components/ko-case-content/dropdown/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    label: '',
    onChange: null,
    options: null,
    value: null,

    contentStyle: null,

    currentValueLabel: Ember['default'].computed('value', 'options', function () {
      var content = this.get('value');
      var option = this.get('options').find(function (option) {
        return option.content === content;
      });
      if (option) {
        return option.label;
      } else {
        return '';
      }
    })
  });

});
define('frontend-cp/components/ko-case-content/dropdown/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","ko-case-content_dropdown__label");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(": ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","ko-case-content_dropdown__current-value");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","i-select");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1,0,0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [2]),0,0);
            return morphs;
          },
          statements: [
            ["content","label",["loc",[null,[3,50],[3,59]]]],
            ["content","currentValueLabel",["loc",[null,[3,115],[3,136]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 6
                  },
                  "end": {
                    "line": 11,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",[["get","attrs.onChange",["loc",[null,[8,60],[8,74]]]],["get","option.content",["loc",[null,[8,75],[8,89]]]]],[],["loc",[null,[8,51],[8,91]]]]],
                ["content","option.label",["loc",[null,[9,10],[9,26]]]]
              ],
              locals: ["option"],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","each",[["get","options",["loc",[null,[7,14],[7,21]]]]],[],0,null,["loc",[null,[7,6],[11,15]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[6,4],[12,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[5,12],[5,16]]]],"content"],[],["loc",[null,[5,8],[5,27]]]]],[],1,null,["loc",[null,[5,2],[13,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[1,0],[14,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case-content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","header__subtitle");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["cases.subheader"],[],["loc",[null,[21,29],[21,57]]]]],["time",["subexpr","@mut",[["get","case.createdAt",["loc",[null,[22,17],[22,31]]]]],[],[]],"channel",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","concat",["cases.channelType.",["subexpr","or",[["get","case.sourceChannel.channelType",["loc",[null,[23,79],[23,109]]]],"none"],[],["loc",[null,[23,75],[23,117]]]]],[],["loc",[null,[23,46],[23,118]]]]],[],["loc",[null,[23,36],[23,119]]]]],[],["loc",[null,[23,20],[23,120]]]],"hasChannel",["subexpr","@mut",[["get","hasChannel",["loc",[null,[24,23],[24,33]]]]],[],[]],"hasBrand",["subexpr","@mut",[["get","hasBrand",["loc",[null,[25,21],[25,29]]]]],[],[]],"brand",["subexpr","@mut",[["get","case.brand.companyName",["loc",[null,[26,18],[26,40]]]]],[],[]]],["loc",[null,[21,12],[26,42]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 70,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-case-content__dropdowns");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-case-content__sort-dropdown");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-case-content__filter-dropdown");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          return morphs;
        },
        statements: [
          ["inline","ko-case-content/dropdown",[],["label",["subexpr","format-message",[["subexpr","intl-get",["cases.sort"],[],["loc",[null,[67,103],[67,126]]]]],[],["loc",[null,[67,87],[67,127]]]],"value",["subexpr","@mut",[["get","sortOrder",["loc",[null,[67,134],[67,143]]]]],[],[]],"options",["subexpr","@mut",[["get","sortOptions",["loc",[null,[67,152],[67,163]]]]],[],[]],"onChange",["subexpr","action",["sort"],[],["loc",[null,[67,173],[67,188]]]]],["loc",[null,[67,54],[67,190]]]],
          ["inline","ko-case-content/dropdown",[],["label",["subexpr","format-message",[["subexpr","intl-get",["cases.filter"],[],["loc",[null,[68,105],[68,130]]]]],[],["loc",[null,[68,89],[68,131]]]],"value",["subexpr","@mut",[["get","filter",["loc",[null,[68,138],[68,144]]]]],[],[]],"options",["subexpr","@mut",[["get","filterOptions",["loc",[null,[68,153],[68,166]]]]],[],[]],"onChange",["subexpr","action",["filter"],[],["loc",[null,[68,176],[68,193]]]]],["loc",[null,[68,56],[68,195]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 74,
                  "column": 14
                },
                "end": {
                  "line": 76,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-loader",[],["large",true],["loc",[null,[75,16],[75,40]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 12
              },
              "end": {
                "line": 77,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-center",[],[],0,null,["loc",[null,[74,14],[76,28]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 71,
              "column": 8
            },
            "end": {
              "line": 79,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-case-content__loaderTop");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","if",[["get","loadingTop",["loc",[null,[73,18],[73,28]]]]],[],0,null,["loc",[null,[73,12],[77,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 81,
              "column": 10
            },
            "end": {
              "line": 83,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-feed",[],["events",["subexpr","@mut",[["get","newPosts",["loc",[null,[82,29],[82,37]]]]],[],[]]],["loc",[null,[82,12],[82,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 88,
                "column": 12
              },
              "end": {
                "line": 90,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-loader",[],["large",true],["loc",[null,[89,14],[89,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 10
            },
            "end": {
              "line": 91,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[88,12],[90,26]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 102,
              "column": 8
            },
            "end": {
              "line": 110,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-case-field/tags",[],["tags",["subexpr","@mut",[["get","tags",["loc",[null,[105,17],[105,21]]]]],[],[]],"suggestedTags",["subexpr","@mut",[["get","suggestedTags",["loc",[null,[106,26],[106,39]]]]],[],[]],"onTagAddition","addTag","onTagRemoval","removeTag","onTagSuggestion","suggestTags"],["loc",[null,[104,10],[109,43]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 121,
                  "column": 12
                },
                "end": {
                  "line": 134,
                  "column": 12
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","component",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[122,37],[122,66]]]],["get","field.fieldType",["loc",[null,[122,67],[122,82]]]]],[],["loc",[null,[122,26],[122,83]]]]],["case",["subexpr","@mut",[["get","case",["loc",[null,[123,19],[123,23]]]]],[],[]],"options",["subexpr","ko-contextual-helper",[["get","optionsForField",["loc",[null,[124,44],[124,59]]]],["get","this",["loc",[null,[124,60],[124,64]]]],["get","field",["loc",[null,[124,65],[124,70]]]]],[],["loc",[null,[124,22],[124,71]]]],"customFieldsModel",["subexpr","@mut",[["get","case.customFields",["loc",[null,[125,32],[125,49]]]]],[],[]],"field",["subexpr","@mut",[["get","field",["loc",[null,[126,20],[126,25]]]]],[],[]],"fieldValue",["subexpr","ko-helper",[["get","customFieldsList.findCustomFieldValue",["loc",[null,[127,36],[127,73]]]],["get","case.customFields",["loc",[null,[127,74],[127,91]]]],["get","field",["loc",[null,[127,92],[127,97]]]]],[],["loc",[null,[127,25],[127,98]]]],"title",["subexpr","@mut",[["get","field.title",["loc",[null,[128,20],[128,31]]]]],[],[]],"errors",["subexpr","@mut",[["get","errors",["loc",[null,[129,21],[129,27]]]]],[],[]],"editedCustomFields",["subexpr","@mut",[["get","editedCaseFields",["loc",[null,[130,33],[130,49]]]]],[],[]],"fieldsEditedByPusher",["subexpr","@mut",[["get","case.propertiesChangeViaPusher",["loc",[null,[131,35],[131,65]]]]],[],[]],"onFieldUpdated","updateDirtyFieldHash"],["loc",[null,[122,14],[133,16]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 120,
                "column": 10
              },
              "end": {
                "line": 135,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","field.isEnabled",["loc",[null,[121,18],[121,33]]]]],[],0,null,["loc",[null,[121,12],[134,19]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 8
            },
            "end": {
              "line": 136,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[120,27],[120,56]]]],["get","field.fieldType",["loc",[null,[120,57],[120,72]]]]],[],["loc",[null,[120,16],[120,73]]]]],[],0,null,["loc",[null,[120,10],[135,17]]]]
        ],
        locals: ["field"],
        templates: [child0]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 139,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-case/sla-sidebar",[],["sla",["subexpr","@mut",[["get","case.sla",["loc",[null,[140,36],[140,44]]]]],[],[]],"slaMetrics",["subexpr","@mut",[["get","case.slaMetrics",["loc",[null,[140,56],[140,71]]]]],[],[]]],["loc",[null,[140,10],[140,73]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 148,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-2/3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6,"alt","");
        dom.setAttribute(el6,"class","header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__body");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6,"class","header__title ko-case-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/3 u-mt");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__body");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("ul");
        dom.setAttribute(el6,"class","ko-case-content__macros-list list-inline t-right");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("li");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-3/4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","content__main content__main--has-infobar");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-case-content__editor-container u-mb");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-case-content__fakeFeed");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-case-content__loaderBottom");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/4");
        dom.setAttribute(el3,"style","position: relative");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","info-bar-item");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("button");
        dom.setAttribute(el6,"class","button button--primary u-1/1");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [1, 1]);
        var element4 = dom.childAt(element3, [1, 1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element1, [3]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element6, [3, 1]);
        var element11 = dom.childAt(element10, [1, 1]);
        var morphs = new Array(21);
        morphs[0] = dom.createAttrMorph(element4, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]),1,1);
        morphs[2] = dom.createMorphAt(element5,3,3);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [3, 1, 1, 1, 1]),1,1);
        morphs[4] = dom.createAttrMorph(element8, 'style');
        morphs[5] = dom.createAttrMorph(element9, 'class');
        morphs[6] = dom.createMorphAt(element9,1,1);
        morphs[7] = dom.createMorphAt(element7,3,3);
        morphs[8] = dom.createMorphAt(element7,4,4);
        morphs[9] = dom.createMorphAt(dom.childAt(element7, [6]),1,1);
        morphs[10] = dom.createMorphAt(element7,8,8);
        morphs[11] = dom.createMorphAt(dom.childAt(element7, [10]),1,1);
        morphs[12] = dom.createAttrMorph(element10, 'class');
        morphs[13] = dom.createElementMorph(element11);
        morphs[14] = dom.createMorphAt(element11,0,0);
        morphs[15] = dom.createMorphAt(element10,3,3);
        morphs[16] = dom.createMorphAt(element10,5,5);
        morphs[17] = dom.createMorphAt(element10,7,7);
        morphs[18] = dom.createMorphAt(element10,9,9);
        morphs[19] = dom.createMorphAt(element10,11,11);
        morphs[20] = dom.createMorphAt(element10,13,13);
        return morphs;
      },
      statements: [
        ["attribute","src",["concat",[["get","case.requester.avatar",["loc",[null,[6,22],[6,43]]]]]]],
        ["inline","ko-editable-text",[],["value",["subexpr","@mut",[["get","case.subject",["loc",[null,[11,22],[11,34]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","editedCaseFields.subject",["loc",[null,[12,25],[12,49]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","case.propertiesChangeViaPusher.subject",["loc",[null,[13,31],[13,69]]]]],[],[]],"onValueChange","setSubject","isErrored",["subexpr","@mut",[["get","errorMap.subject",["loc",[null,[15,26],[15,42]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["cases.new_case_subject_placeholder"],[],["loc",[null,[16,44],[16,91]]]]],[],["loc",[null,[16,28],[16,92]]]]],["loc",[null,[10,12],[17,14]]]],
        ["block","if",[["get","case.id",["loc",[null,[19,16],[19,23]]]]],[],0,null,["loc",[null,[19,10],[28,17]]]],
        ["inline","ko-case/macro-selector",[],["macros",["subexpr","@mut",[["get","macros",["loc",[null,[37,46],[37,52]]]]],[],[]],"onMacroSelected","applyMacro"],["loc",[null,[37,14],[37,83]]]],
        ["attribute","style",["get","caseEditorStyle",["loc",[null,[47,68],[47,83]]]]],
        ["attribute","class",["concat",["ko-case-content__editor ",["subexpr","if",[["get","headerSticky",["loc",[null,[48,51],[48,63]]]],"ko-case-content__editor--sticky"],[],["loc",[null,[48,46],[48,99]]]]]]],
        ["inline","ko-case-field/post",[],["viewName","casePostEditor","channels",["subexpr","@mut",[["get","availableChannels",["loc",[null,[51,25],[51,42]]]]],[],[]],"channel",["subexpr","@mut",[["get","channel",["loc",[null,[52,24],[52,31]]]]],[],[]],"onChannelChange","setChannel","replyType",["subexpr","@mut",[["get","replyType",["loc",[null,[54,26],[54,35]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","errorMap.contents",["loc",[null,[55,26],[55,43]]]]],[],[]],"suggestedPeople",["subexpr","@mut",[["get","suggestedPeople",["loc",[null,[56,32],[56,47]]]]],[],[]],"selectedPeople",["subexpr","@mut",[["get","selectedPeople",["loc",[null,[57,31],[57,45]]]]],[],[]],"suggestedPeopleTotal",["subexpr","@mut",[["get","suggestedPeopleTotal",["loc",[null,[58,37],[58,57]]]]],[],[]],"suggestedPeopleLoading",["subexpr","@mut",[["get","suggestedPeopleLoading",["loc",[null,[59,39],[59,61]]]]],[],[]],"isPeopleAutoCompleteAvailable",["subexpr","@mut",[["get","isPeopleAutoCompleteAvailable",["loc",[null,[60,46],[60,75]]]]],[],[]],"addParticipant","addParticipant","onPeopleSuggestion","onPeopleSuggestion"],["loc",[null,[49,12],[62,57]]]],
        ["block","if",[["get","case.id",["loc",[null,[65,14],[65,21]]]]],[],1,null,["loc",[null,[65,8],[70,15]]]],
        ["block","if",[["get","topPostsAvailable",["loc",[null,[71,14],[71,31]]]]],[],2,null,["loc",[null,[71,8],[79,15]]]],
        ["block","if",[["get","newPosts",["loc",[null,[81,16],[81,24]]]]],[],3,null,["loc",[null,[81,10],[83,17]]]],
        ["inline","ko-feed",[],["events",["subexpr","@mut",[["get","posts",["loc",[null,[85,25],[85,30]]]]],[],[]],"onReplyWithQuote","replyWithQuote","top",["subexpr","@mut",[["get","timelineVisibleTop",["loc",[null,[85,69],[85,87]]]]],[],[]],"left",["subexpr","@mut",[["get","timelineVisibleLeft",["loc",[null,[85,93],[85,112]]]]],[],[]],"onTopPostChange",["subexpr","action",["changeTopPost"],[],["loc",[null,[85,129],[85,153]]]]],["loc",[null,[85,8],[85,155]]]],
        ["block","if",[["get","loadingBottom",["loc",[null,[87,16],[87,29]]]]],[],4,null,["loc",[null,[87,10],[91,17]]]],
        ["attribute","class",["concat",["list-bare ko-case-content__info-bar ",["subexpr","if",[["get","headerSticky",["loc",[null,[96,57],[96,69]]]],"ko-case-content__info-bar--sticky"],[],["loc",[null,[96,52],[96,107]]]]]]],
        ["element","action",["submit"],[],["loc",[null,[98,55],[98,74]]]],
        ["inline","format-message",[["subexpr","intl-get",["cases.submit"],[],["loc",[null,[98,92],[98,117]]]]],[],["loc",[null,[98,75],[98,119]]]],
        ["inline","ko-case-field/requester",[],["requester",["subexpr","@mut",[["get","case.requester",["loc",[null,[100,44],[100,58]]]]],[],[]]],["loc",[null,[100,8],[100,60]]]],
        ["block","ko-info-bar/field",[],["title",["subexpr","format-message",[["subexpr","intl-get",["cases.tags"],[],["loc",[null,[102,51],[102,74]]]]],[],["loc",[null,[102,35],[102,75]]]],"isEdited",["subexpr","@mut",[["get","isTagsFieldEdited",["loc",[null,[103,19],[103,36]]]]],[],[]]],5,null,["loc",[null,[102,8],[110,30]]]],
        ["inline","ko-case-field/forms",[],["selectedForm",["subexpr","@mut",[["get","case.form",["loc",[null,[113,23],[113,32]]]]],[],[]],"forms",["subexpr","@mut",[["get","caseForms",["loc",[null,[114,16],[114,25]]]]],[],[]],"onFormSelected","setForm","isEdited",["subexpr","@mut",[["get","editedCaseFields.form",["loc",[null,[116,19],[116,40]]]]],[],[]]],["loc",[null,[112,8],[117,10]]]],
        ["block","each",[["get","caseOrFormFields",["loc",[null,[119,16],[119,32]]]]],[],6,null,["loc",[null,[119,8],[136,17]]]],
        ["block","if",[["get","case.id",["loc",[null,[139,14],[139,21]]]]],[],7,null,["loc",[null,[139,8],[141,15]]]],
        ["inline","ko-info-bar/metadata",[],["rows",["subexpr","@mut",[["get","caseDates",["loc",[null,[143,36],[143,45]]]]],[],[]]],["loc",[null,[143,8],[143,47]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('frontend-cp/components/ko-case-field/assignee/component', ['exports', 'ember', 'frontend-cp/components/ko-case-field/base/component'], function (exports, Ember, BaseCaseField) {

  'use strict';

  exports['default'] = BaseCaseField['default'].extend({
    // Params
    'case': null,
    onAssigneeSelected: 'setAssignee',

    // State
    assigneeValues: [],

    // Services
    store: Ember['default'].inject.service(),

    currentlySelectedValue: Ember['default'].computed('case.assignee.agent.fullName', 'case.assignee.team.title', function () {
      var agentName = this.get('case.assignee.agent.fullName');
      var teamName = this.get('case.assignee.team.title');
      return this.generateTeamAgentValue(teamName, agentName).split(',').join('/');
    }),

    setAssigneeValues: Ember['default'].on('init', function () {
      var _this = this;

      var assigneeValuePromises = {
        agents: this.get('store').find('user', { role: 'agent' }),
        teams: this.get('store').find('team')
      };

      Ember['default'].RSVP.hash(assigneeValuePromises).then(function (hash) {
        var assigneeValues = [];

        hash.agents.forEach(function (agent) {
          var teams = agent.get('teams');
          teams.forEach(function (team) {
            var teamAgentId = _this.generateTeamAgentId(team.get('id'), agent.get('id'));
            var teamAgentValue = _this.generateTeamAgentValue(team.get('title'), agent.get('fullName'));
            assigneeValues.pushObject({ id: teamAgentId, value: teamAgentValue });
          });
        });

        hash.teams.forEach(function (team) {
          assigneeValues.pushObject({ id: team.get('id'), value: team.get('title') });
        });

        _this.set('assigneeValues', assigneeValues);
      });
    }),

    actions: {
      onAssigneeSelected: function onAssigneeSelected(agentTeamId) {
        var agent = this.getAgentFromAgentTeamId(agentTeamId);
        var team = this.getTeamFromAgentTeamId(agentTeamId);
        this.sendAction('onAssigneeSelected', team, agent);
      }
    },

    getAgentFromAgentTeamId: function getAgentFromAgentTeamId(agentTeamId) {
      var idParts = agentTeamId.split('-');
      if (idParts.length !== 2) {
        return null;
      }
      var agentId = idParts[1];
      return this.get('store').getById('user', agentId);
    },

    getTeamFromAgentTeamId: function getTeamFromAgentTeamId(agentTeamId) {
      var teamId = agentTeamId.split('-')[0];
      return this.get('store').getById('team', teamId);
    },

    generateTeamAgentId: function generateTeamAgentId(teamId, agentId) {
      if (!agentId) {
        return teamId;
      }
      return teamId + '-' + agentId;
    },

    generateTeamAgentValue: function generateTeamAgentValue(teamName, agentName) {
      teamName = teamName ? teamName : '';

      return agentName ? teamName + ',' + agentName : teamName;
    }
  });

});
define('frontend-cp/components/ko-case-field/assignee/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/drill-down",[],["title","Assignee","options",["subexpr","@mut",[["get","assigneeValues",["loc",[null,[3,10],[3,24]]]]],[],[]],"value",["subexpr","@mut",[["get","currentlySelectedValue",["loc",[null,[4,8],[4,30]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[5,11],[5,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","caseFieldError",["loc",[null,[6,12],[6,26]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[7,17],[7,31]]]]],[],[]],"onValueChange","onAssigneeSelected"],["loc",[null,[1,0],[9,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-field/base/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    editedCustomFields: null,
    fieldsEditedByPusher: null,
    tagName: '',
    isEdited: false,
    isPusherEdited: false,

    updateIsEditedFromHash: Ember['default'].on('init', Ember['default'].observer('field.id', function () {
      var _this = this;

      /*
       * We take an object holding the edited status of all case fields with the format:
       * { id: isEdited, ... }
       *
       * we need to observe isEditedObject[field.id] which we can't do as a normal CP because field.id is dynamic
       * So this is just a computed property wrapped in an observer (so we have the context)
       */
      this.set('isEdited', Ember['default'].computed('editedCustomFields.' + this.get('field.id'), function () {
        return _this.get('editedCustomFields').get(_this.get('field.id'));
      }));
    })),

    updateIsPusherEditedFromHash: Ember['default'].on('init', Ember['default'].observer('field.id', function () {
      var _this2 = this;

      /*
       * We take an object holding the edited status of all case fields with the format:
       * { id: isEdited, ... }
       *
       * we need to observe isEditedObject[field.id] which we can't do as a normal CP because field.id is dynamic
       * So this is just a computed property wrapped in an observer (so we have the context)
       */
      this.set('isPusherEdited', Ember['default'].computed('fieldsEditedByPusher.' + this.get('field.id'), function () {
        if (_this2.get('fieldsEditedByPusher')) {
          return _this2.get('fieldsEditedByPusher')[_this2.get('field.id')];
        }
        return false;
      }));
    })),

    actions: {
      valueChanged: function valueChanged(newValue) {
        this.set('isErrored', false);
        this.sendAction('onValueChanged', newValue);
      }
    }

  });

});
define('frontend-cp/components/ko-case-field/forms/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    onFormSelected: null,
    title: null,
    selectedForm: null,
    forms: null,
    isEdited: null,

    tagName: '',

    actions: {
      onFormSelected: function onFormSelected(form) {
        this.sendAction('onFormSelected', form);
      }
    }
  });

});
define('frontend-cp/components/ko-case-field/forms/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-field/forms/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-field/select",[],["title",["subexpr","format-message",[["subexpr","intl-get",["cases.form-select"],[],["loc",[null,[3,26],[3,56]]]]],[],["loc",[null,[3,10],[3,57]]]],"value",["subexpr","@mut",[["get","selectedForm",["loc",[null,[4,10],[4,22]]]]],[],[]],"options",["subexpr","@mut",[["get","forms",["loc",[null,[5,12],[5,17]]]]],[],[]],"nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.null_form_selected"],[],["loc",[null,[6,36],[6,73]]]]],[],["loc",[null,[6,20],[6,74]]]],"onValueChange","onFormSelected","labelPath","title","isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[9,13],[9,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[10,19],[10,33]]]]],[],[]]],["loc",[null,[2,2],[11,4]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/forms/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","forms.length",["loc",[null,[1,6],[1,18]]]]],[],0,null,["loc",[null,[1,0],[12,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case-field/post/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    channels: null,
    channel: null,
    replyType: null, // REPLY | NOTE

    intl: Ember['default'].inject.service(),

    classNameBindings: ['activeModeClass'],

    initFiles: Ember['default'].on('init', function () {
      this.set('attachedFiles', []);
    }),

    twitterSendReply: false,
    isShowingControls: Ember['default'].computed('replyType', 'channel', 'twitterSendReply', function () {
      if (this.get('replyType') === 'REPLY') {
        return this.get('channel.channelType') !== 'TWITTER' || this.get('twitterSendReply');
      }
      return true;
    }),

    placeholderMessage: Ember['default'].computed('replyType', function () {
      // @TODO extending Quill to support MULTIPLE placeholders will be tricky
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder').translation;
      } else {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder').translation;
      }
    }),

    activeModeClass: Ember['default'].computed('replyType', function () {
      return 'ko-text-editor--' + this.get('replyType').toLowerCase();
    }),

    infoMessage: Ember['default'].computed('replyType', function () {
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('generic.texteditor.notes_reminder').translation;
      }
    }),

    getAttachedUploads: function getAttachedUploads() {
      return this.get('attachedUploads.uploads');
    },

    clear: function clear() {
      this.get('attachedUploads').clear();
    },

    actions: {
      changeChannel: function changeChannel(channel) {
        this.set('replyType', 'REPLY');
        this.sendAction('onChannelChange', channel);
      },

      setNote: function setNote() {
        this.set('replyType', 'NOTE');
      },

      onAttachFiles: function onAttachFiles(files) {
        this.get('attachedUploads').send('uploadFiles', files);
      },

      setReply: function setReply() {
        this.set('replyType', 'REPLY');
      },
      addParticipant: function addParticipant(event) {
        this.sendAction('addParticipant', event);
      },
      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });

});
define('frontend-cp/components/ko-case-field/post/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 30,
                        "column": 10
                      },
                      "end": {
                        "line": 34,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("li");
                    dom.setAttribute(el1,"class","ko-dropdown_list__item");
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element1 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element1, 'onclick');
                    morphs[1] = dom.createMorphAt(element1,1,1);
                    return morphs;
                  },
                  statements: [
                    ["attribute","onclick",["subexpr","action",["changeChannel",["get","channel",["loc",[null,[31,80],[31,87]]]]],[],["loc",[null,[31,55],[31,89]]]]],
                    ["content","channel.message",["loc",[null,[32,14],[32,33]]]]
                  ],
                  locals: ["channel"],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 29,
                      "column": 8
                    },
                    "end": {
                      "line": 35,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","each",[["get","channels",["loc",[null,[30,18],[30,26]]]]],[],0,null,["loc",[null,[30,10],[34,19]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 28,
                    "column": 6
                  },
                  "end": {
                    "line": 36,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-channel-select",[],["label",["subexpr","@mut",[["get","channel.label",["loc",[null,[29,35],[29,48]]]]],[],[]],"iconClass",["subexpr","@mut",[["get","channel.iconClass",["loc",[null,[29,59],[29,76]]]]],[],[]],"hideOnClick",true],0,null,["loc",[null,[29,8],[35,30]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 2
                },
                "end": {
                  "line": 38,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-text-editor-header-group__item t-base");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["block","ko-text-editor/toggle-button",[],["action","setReply","isActive",["subexpr","eq",["REPLY",["get","replyType",["loc",[null,[28,77],[28,86]]]]],[],["loc",[null,[28,65],[28,87]]]]],0,null,["loc",[null,[28,6],[36,39]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["cases.notes"],[],["loc",[null,[41,25],[41,49]]]]],[],["loc",[null,[41,8],[41,51]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 0
              },
              "end": {
                "line": 44,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-text-editor-header-group__item t-base");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [
            ["block","if",[["get","channels.length",["loc",[null,[26,8],[26,23]]]]],[],0,null,["loc",[null,[26,2],[38,9]]]],
            ["block","ko-text-editor/toggle-button",[],["action","setNote","isActive",["subexpr","eq",["NOTE",["get","replyType",["loc",[null,[40,73],[40,82]]]]],[],["loc",[null,[40,62],[40,83]]]]],1,null,["loc",[null,[40,4],[42,37]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 2
                },
                "end": {
                  "line": 53,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-case-field-post--editor-overlay");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","ko-case-field-post--note-reminder");
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
              return morphs;
            },
            statements: [
              ["content","infoMessage",["loc",[null,[50,8],[50,23]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 54,
                    "column": 4
                  },
                  "end": {
                    "line": 68,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","ko-case-field-post--editor-overlay");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","ko-case-field-post--twitter-message");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","ko-case-field-post__icon i-help");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","ko-case-field-post__tooltip");
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.setAttribute(el5,"class","arrow arrow--top");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n            ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element0,1,1);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]),1,1);
                return morphs;
              },
              statements: [
                ["inline","ko-checkbox",[],["class","u-inline-block","checked",["subexpr","@mut",[["get","twitterSendReply",["loc",[null,[58,20],[58,36]]]]],[],[]],"label",["subexpr","format-message",[["subexpr","intl-get",["cases.reply-twitter-message"],[],["loc",[null,[59,34],[59,74]]]]],[],["loc",[null,[59,18],[59,75]]]]],["loc",[null,[57,10],[59,77]]]],
                ["inline","format-message",[["subexpr","intl-get",["cases.reply-twitter-tooltip"],[],["loc",[null,[62,31],[62,71]]]]],[],["loc",[null,[62,14],[62,73]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 53,
                  "column": 2
                },
                "end": {
                  "line": 69,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["subexpr","eq",[["get","channel.channelType",["loc",[null,[54,14],[54,33]]]],"TWITTER"],[],["loc",[null,[54,10],[54,44]]]]],[],0,null,["loc",[null,[54,4],[68,11]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 0
              },
              "end": {
                "line": 70,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","infoMessage",["loc",[null,[47,8],[47,19]]]]],[],0,1,["loc",[null,[47,2],[69,9]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 72,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["block","if",[["get","editor.isHeader",["loc",[null,[25,6],[25,21]]]]],[],0,null,["loc",[null,[25,0],[44,7]]]],
          ["block","if",[["get","editor.isInfoMessage",["loc",[null,[46,6],[46,26]]]]],[],1,null,["loc",[null,[46,0],[70,7]]]]
        ],
        locals: ["editor"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/post/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","ko-text-editor",[],["viewName","postEditor","suggestedPeople",["subexpr","@mut",[["get","suggestedPeople",["loc",[null,[3,20],[3,35]]]]],[],[]],"selectedPeople",["subexpr","@mut",[["get","selectedPeople",["loc",[null,[4,19],[4,33]]]]],[],[]],"suggestedPeopleTotal",["subexpr","@mut",[["get","suggestedPeopleTotal",["loc",[null,[5,25],[5,45]]]]],[],[]],"suggestedPeopleLoading",["subexpr","@mut",[["get","suggestedPeopleLoading",["loc",[null,[6,27],[6,49]]]]],[],[]],"isPeopleIconAvailable",["subexpr","@mut",[["get","isPeopleAutoCompleteAvailable",["loc",[null,[7,26],[7,55]]]]],[],[]],"onPeopleSuggestion","onPeopleSuggestion","onAttachFiles","onAttachFiles","channels",["subexpr","@mut",[["get","channels",["loc",[null,[10,13],[10,21]]]]],[],[]],"channel",["subexpr","@mut",[["get","channel",["loc",[null,[11,12],[11,19]]]]],[],[]],"onChannelChange","setChannel","addParticipant","addParticipant","placeholder",["subexpr","@mut",[["get","placeholderMessage",["loc",[null,[14,16],[14,34]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[15,14],[15,23]]]]],[],[]],"showControls",["subexpr","@mut",[["get","isShowingControls",["loc",[null,[16,17],[16,34]]]]],[],[]],"peopleTitleText",["subexpr","format-message",[["subexpr","intl-get",["cases.copy-someone-in.title"],[],["loc",[null,[17,36],[17,76]]]]],[],["loc",[null,[17,20],[17,77]]]],"peopleInputPlaceholderText",["subexpr","format-message",[["subexpr","intl-get",["cases.copy-someone-in.input-placeholder"],[],["loc",[null,[18,47],[18,99]]]]],[],["loc",[null,[18,31],[18,100]]]],"peopleFilterNotFoundText",["subexpr","format-message",[["subexpr","intl-get",["cases.copy-someone-in.not-found"],[],["loc",[null,[19,45],[19,89]]]]],[],["loc",[null,[19,29],[19,90]]]],"peopleHelpText",["subexpr","format-message",[["subexpr","intl-get",["cases.copy-someone-in.help-text"],[],["loc",[null,[20,35],[20,79]]]]],[],["loc",[null,[20,19],[20,80]]]],"peopleEmailErrorText",["subexpr","format-message",[["subexpr","intl-get",["cases.copy-someone-in.email-error"],[],["loc",[null,[21,41],[21,87]]]]],[],["loc",[null,[21,25],[21,88]]]]],0,null,["loc",[null,[1,0],[72,19]]]],
        ["inline","ko-file-upload",[],["viewName","attachedUploads","files",["subexpr","@mut",[["get","attachedFiles",["loc",[null,[75,50],[75,63]]]]],[],[]]],["loc",[null,[75,0],[75,65]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case-field/priority/component', ['exports', 'ember', 'frontend-cp/components/ko-case-field/base/component'], function (exports, Ember, BaseCaseField) {

  'use strict';

  exports['default'] = BaseCaseField['default'].extend({
    // params
    'case': null,
    field: null,
    errors: [],
    editedCustomFields: null,
    options: null,

    tagName: '',
    isErrored: false,
    onValueChanged: 'setPriority',

    value: Ember['default'].computed.readOnly('case.priority'),

    onErrors: Ember['default'].observer('errors.[]', function () {
      if (this.get('errors')) {
        this.set('isErrored', this.get('errors').reduce(function (acc, error) {
          return acc || error.parameter === 'priority_id';
        }, false));
      }
    })
  });

});
define('frontend-cp/components/ko-case-field/priority/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","options",["loc",[null,[3,10],[3,17]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[5,17],[5,31]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[6,12],[6,21]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[7,8],[7,13]]]]],[],[]],"onValueChange","valueChanged","labelPath","label","nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.deselect_priority"],[],["loc",[null,[10,34],[10,70]]]]],[],["loc",[null,[10,18],[10,71]]]]],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-field/requester/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: ''
  });

});
define('frontend-cp/components/ko-case-field/requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","format-message",[["subexpr","intl-get",["cases.field_title.requester"],[],["loc",[null,[2,24],[2,64]]]]],[],["loc",[null,[2,8],[2,65]]]],"value",["subexpr","@mut",[["get","requester.fullName",["loc",[null,[3,8],[3,26]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[4,17],[4,31]]]]],[],[]],"editable",false],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-field/status/component', ['exports', 'ember', 'frontend-cp/components/ko-case-field/base/component'], function (exports, Ember, BaseCaseField) {

  'use strict';

  exports['default'] = BaseCaseField['default'].extend({
    // params
    'case': null,
    field: null,
    errors: [],
    isPusherEdited: false,
    isErrored: false,
    isEdited: false,

    tagName: '',
    store: Ember['default'].inject.service(),
    onValueChanged: 'setStatus',

    value: Ember['default'].computed.readOnly('case.status'),

    onErrors: Ember['default'].observer('errors.[]', function () {
      if (this.get('errors')) {
        this.set('isErrored', this.get('errors').reduce(function (acc, error) {
          return acc || error.parameter === 'status_id';
        }, false));
      }
    }),

    statuses: Ember['default'].computed('case.id', function () {
      var caseIsPersisted = !!this.get('case.id');

      return this.get('store').peekAll('case-status').filter(function (status) {

        // statuses can only be NEW if they've never been saved
        if (caseIsPersisted && status.get('statusType') === 'NEW') {
          return false;
        }

        return status.get('statusType') !== 'CLOSED';
      });
    })
  });

});
define('frontend-cp/components/ko-case-field/status/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","statuses",["loc",[null,[3,10],[3,18]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[5,17],[5,31]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[6,12],[6,21]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[7,8],[7,13]]]]],[],[]],"onValueChange","valueChanged","labelPath","label"],["loc",[null,[1,0],[10,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-field/suggest/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['info-bar-item'],
    classNameBindings: ['showDropdown:active', 'isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error'],

    searchKey: 'name',

    filteredItems: Ember['default'].computed('items', 'searchTerm', function () {
      var _this = this;

      if (this.get('items')) {
        return this.get('items').filter(function (item) {
          var itemTerm = item.get(_this.get('searchKey')).toLowerCase();
          return itemTerm.indexOf(_this.get('searchTerm')) !== -1;
        });
      }
    }),

    searchTerm: '',

    actions: {
      itemSearch: function itemSearch(term) {
        this.set('searchTerm', term.toLowerCase());
        this.sendAction('onItemSearch', term);
      },

      itemSelect: function itemSelect(item) {
        this.sendAction('onItemSelect', item);
      }
    }
  });

});
define('frontend-cp/components/ko-case-field/suggest/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-field/suggest/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("TODO currently this is coming from ember-get-helper addon but will par of ember 2.1");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0,3,3);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["subexpr","action",["itemSelect",["get","opt",["loc",[null,[4,69],[4,72]]]]],[],["loc",[null,[4,47],[4,74]]]]],
            ["inline","get",[["get","opt",["loc",[null,[6,12],[6,15]]]],["get","searchKey",["loc",[null,[6,16],[6,25]]]]],[],["loc",[null,[6,6],[6,27]]]]
          ],
          locals: ["opt"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-field/suggest/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","filteredItems",["loc",[null,[3,10],[3,23]]]]],[],0,null,["loc",[null,[3,2],[8,11]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/suggest/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["get","title",["loc",[null,[1,24],[1,29]]]]],[],["loc",[null,[1,7],[1,31]]]],
        ["block","ko-suggest",[],["selectedItem",["subexpr","@mut",[["get","selectedItem",["loc",[null,[2,27],[2,39]]]]],[],[]],"onSearchTermUpdated","itemSearch"],0,null,["loc",[null,[2,0],[9,15]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-case-field/tags/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    tags: [],
    suggestedTags: [],
    onTagAddition: null,
    onTagRemoval: null,
    onTagSuggestion: null,

    tagName: '',

    actions: {
      onTagAddition: function onTagAddition(tagName) {
        this.sendAction('onTagAddition', tagName);
      },
      onTagSuggestion: function onTagSuggestion(searchTerm, selectedTags) {
        this.sendAction('onTagSuggestion', searchTerm, selectedTags);
      },
      onTagRemoval: function onTagRemoval(tagName) {
        this.sendAction('onTagRemoval', tagName);
      }
    }
  });

});
define('frontend-cp/components/ko-case-field/tags/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-field/tags",[],["selectedTags",["subexpr","@mut",[["get","tags",["loc",[null,[2,15],[2,19]]]]],[],[]],"suggestedTags",["subexpr","@mut",[["get","suggestedTags",["loc",[null,[3,16],[3,29]]]]],[],[]],"onTagAddition","onTagAddition","onTagRemoval","onTagRemoval","onTagSuggestion","onTagSuggestion","isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[7,11],[7,19]]]]],[],[]],"newTagText",["subexpr","format-message",[["subexpr","intl-get",["cases.newtag"],[],["loc",[null,[8,29],[8,54]]]]],[],["loc",[null,[8,13],[8,55]]]],"addTagText",["subexpr","format-message",[["subexpr","intl-get",["cases.addtag"],[],["loc",[null,[9,29],[9,54]]]]],[],["loc",[null,[9,13],[9,55]]]]],["loc",[null,[1,0],[9,57]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-field/type/component', ['exports', 'ember', 'frontend-cp/components/ko-case-field/base/component'], function (exports, Ember, BaseCaseField) {

  'use strict';

  exports['default'] = BaseCaseField['default'].extend({
    // params
    'case': null,
    field: null,

    tagName: '',
    isEdited: false,
    onValueChanged: 'setType',

    value: Ember['default'].computed.readOnly('case.caseType')
  });

});
define('frontend-cp/components/ko-case-field/type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-field/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","options",["loc",[null,[3,10],[3,17]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[7,8],[7,13]]]]],[],[]],"onValueChange","valueChanged","labelPath","label","nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.deselect_type"],[],["loc",[null,[10,34],[10,66]]]]],[],["loc",[null,[10,18],[10,67]]]]],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-case-metric/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['info-bar-item', 'u-no-bottom-border']
  });

});
define('frontend-cp/components/ko-case-metric/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-metric/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h1");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","flag__body");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2,"class","t-small t-caption");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          return morphs;
        },
        statements: [
          ["content","metric.value",["loc",[null,[5,6],[5,22]]]],
          ["inline","format-message",[["subexpr","intl-get",["cases.metric.unresolved"],[],["loc",[null,[8,25],[8,61]]]]],[],["loc",[null,[8,8],[8,63]]]],
          ["inline","format-message",[["subexpr","intl-get",["cases.metric.total"],[],["loc",[null,[9,50],[9,81]]]]],["number",["subexpr","@mut",[["get","metric.total",["loc",[null,[9,89],[9,101]]]]],[],[]]],["loc",[null,[9,33],[9,103]]]]
        ],
        locals: ["metric"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-metric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","flag flag--auto flag--small u-mb-");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,3],[1,12]]]],
        ["block","each",[["get","metrics",["loc",[null,[4,8],[4,15]]]]],[],0,null,["loc",[null,[4,0],[11,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/assignee/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.assignee.agent.fullName",["loc",[null,[1,0],[1,32]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/brand/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/brand/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.brand.name",["loc",[null,[1,0],[1,19]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/case-form/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.form.title",["loc",[null,[1,0],[1,19]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/completed/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/completed/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","title",["concat",[["get","case.lastCompletedAt",["loc",[null,[2,17],[2,37]]]]]]],
          ["inline","moment-from-now",[["get","case.lastCompletedAt",["loc",[null,[3,22],[3,42]]]]],[],["loc",[null,[3,4],[3,44]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/completed/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","case.lastCompletedAt",["loc",[null,[1,6],[1,26]]]]],[],0,null,["loc",[null,[1,0],[5,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/created/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/created/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["attribute","title",["concat",[["get","case.createdAt",["loc",[null,[1,15],[1,29]]]]]]],
        ["inline","moment-from-now",[["get","case.createdAt",["loc",[null,[2,20],[2,34]]]]],[],["loc",[null,[2,2],[2,36]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/first-reply-time/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    'case': null,

    metric: Ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'FIRST_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });

});
define('frontend-cp/components/ko-cases-list/column/first-reply-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-sla",[],["metric",["subexpr","@mut",[["get","metric",["loc",[null,[1,16],[1,22]]]]],[],[]]],["loc",[null,[1,0],[1,24]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/id/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 11
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/id/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.id",["loc",[null,[1,0],[1,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/last-update/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/last-update/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","title",["concat",[["get","case.updatedAt",["loc",[null,[2,17],[2,31]]]]]]],
          ["inline","moment-from-now",[["get","case.updatedAt",["loc",[null,[3,22],[3,36]]]]],[],["loc",[null,[3,4],[3,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","case.updatedAt",["loc",[null,[1,6],[1,20]]]]],[],0,null,["loc",[null,[1,0],[5,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/last-update-by-requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/next-breach/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/next-reply-time/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    'case': null,

    metric: Ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'NEXT_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });

});
define('frontend-cp/components/ko-cases-list/column/next-reply-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-sla",[],["metric",["subexpr","@mut",[["get","metric",["loc",[null,[1,16],[1,22]]]]],[],[]]],["loc",[null,[1,0],[1,24]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/organization/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 36
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.requester.organization.name",["loc",[null,[1,0],[1,36]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/priority/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.priority.label",["loc",[null,[1,0],[1,23]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.requester.fullName",["loc",[null,[1,0],[1,27]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/requester-language/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.requester.locale",["loc",[null,[1,0],[1,25]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/resolution-time/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    'case': null,

    metric: Ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'RESOLUTION_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });

});
define('frontend-cp/components/ko-cases-list/column/resolution-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-sla",[],["metric",["subexpr","@mut",[["get","metric",["loc",[null,[1,16],[1,22]]]]],[],[]]],["loc",[null,[1,0],[1,24]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/sla-name/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.sla.title",["loc",[null,[1,0],[1,18]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/source/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/source/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.sourceChannel.label",["loc",[null,[1,0],[1,28]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/status/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.status.label",["loc",[null,[1,0],[1,21]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/subject/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Can't have parent div or ellipsis will break
    tagName: ''
  });

});
define('frontend-cp/components/ko-cases-list/column/subject/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 16
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-avatar",[],["class","u-mr-","avatar",["subexpr","@mut",[["get","case.creator.avatar",["loc",[null,[1,33],[1,52]]]]],[],[]]],["loc",[null,[1,0],[1,54]]]],
        ["content","case.subject",["loc",[null,[2,0],[2,16]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/team/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.assignee.team.title",["loc",[null,[1,0],[1,28]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/column/type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","case.caseType.label",["loc",[null,[1,0],[1,23]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    cases: [],
    onCaseListSort: null,
    columns: [],

    classForHeader: function classForHeader(column) {
      return 'ko-cases-list__table-th ko-cases-list__header--' + Ember['default'].String.dasherize(column.get('name'));
    },

    classForColumn: function classForColumn(column) {
      var classes = ['ko-cases-list__table-column'];

      classes.push('ko-cases-list__table-column--' + Ember['default'].String.dasherize(column.get('name')));

      if (this.isFixed(column)) {
        classes.push('ko-table_cell--fixed ko-cases-list__table-column--fixed');
      }

      return classes.join(' ');
    },

    componentForHeader: function componentForHeader(column) {
      return 'ko-cases-list/header/' + Ember['default'].String.dasherize(column.get('name'));
    },

    componentForColumn: function componentForColumn(column) {
      return 'ko-cases-list/column/' + Ember['default'].String.dasherize(column.get('name'));
    },

    isFixed: function isFixed(column) {
      return column.get('name') === 'subject';
    },

    actions: {
      tableSorted: function tableSorted(column, order) {
        this.sendAction('onCaseListSort', column, order);
      }
    }
  });

});
define('frontend-cp/components/ko-cases-list/header/assignee/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 46
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.assignee"],[],["loc",[null,[1,17],[1,44]]]]],[],["loc",[null,[1,0],[1,46]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/brand/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 43
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/brand/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.brand"],[],["loc",[null,[1,17],[1,41]]]]],[],["loc",[null,[1,0],[1,43]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/case-form/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.form-select"],[],["loc",[null,[1,17],[1,47]]]]],[],["loc",[null,[1,0],[1,49]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/completed/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/completed/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.completed"],[],["loc",[null,[1,17],[1,45]]]]],[],["loc",[null,[1,0],[1,47]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/created/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/created/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.created"],[],["loc",[null,[1,17],[1,43]]]]],[],["loc",[null,[1,0],[1,45]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/first-reply-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 54
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.first-reply-time"],[],["loc",[null,[1,17],[1,52]]]]],[],["loc",[null,[1,0],[1,54]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/id/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 46
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/id/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.ticketid"],[],["loc",[null,[1,17],[1,44]]]]],[],["loc",[null,[1,0],[1,46]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/last-update/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.last-update"],[],["loc",[null,[1,17],[1,47]]]]],[],["loc",[null,[1,0],[1,49]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 59
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.last-update-by-a-user"],[],["loc",[null,[1,17],[1,57]]]]],[],["loc",[null,[1,0],[1,59]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 61
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.last-update-by-assignee"],[],["loc",[null,[1,17],[1,59]]]]],[],["loc",[null,[1,0],[1,61]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/last-update-by-requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 62
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.last-update-by-requester"],[],["loc",[null,[1,17],[1,60]]]]],[],["loc",[null,[1,0],[1,62]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/next-breach/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 49
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.next-breach"],[],["loc",[null,[1,17],[1,47]]]]],[],["loc",[null,[1,0],[1,49]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/next-reply-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.next-reply-time"],[],["loc",[null,[1,17],[1,51]]]]],[],["loc",[null,[1,0],[1,53]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 64
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.oldest-update-by-requester"],[],["loc",[null,[1,17],[1,62]]]]],[],["loc",[null,[1,0],[1,64]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/organization/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.organization"],[],["loc",[null,[1,17],[1,48]]]]],[],["loc",[null,[1,0],[1,50]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/priority/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 46
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.priority"],[],["loc",[null,[1,17],[1,44]]]]],[],["loc",[null,[1,0],[1,46]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/requester/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 47
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.requester"],[],["loc",[null,[1,17],[1,45]]]]],[],["loc",[null,[1,0],[1,47]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/requester-language/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 56
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.requester-language"],[],["loc",[null,[1,17],[1,54]]]]],[],["loc",[null,[1,0],[1,56]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/resolution-time/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.resolution-time"],[],["loc",[null,[1,17],[1,51]]]]],[],["loc",[null,[1,0],[1,53]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/sla-name/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 46
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.sla-name"],[],["loc",[null,[1,17],[1,44]]]]],[],["loc",[null,[1,0],[1,46]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/source/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 44
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/source/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.source"],[],["loc",[null,[1,17],[1,42]]]]],[],["loc",[null,[1,0],[1,44]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/status/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 44
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.status"],[],["loc",[null,[1,17],[1,42]]]]],[],["loc",[null,[1,0],[1,44]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/subject/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 45
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.subject"],[],["loc",[null,[1,17],[1,43]]]]],[],["loc",[null,[1,0],[1,45]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/team/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 42
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.team"],[],["loc",[null,[1,17],[1,40]]]]],[],["loc",[null,[1,0],[1,42]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/header/type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 42
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["cases.type"],[],["loc",[null,[1,17],[1,40]]]]],[],["loc",[null,[1,0],[1,42]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-cases-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 24,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","component",[["subexpr","ko-helper",[["get","componentForHeader",["loc",[null,[25,31],[25,49]]]],["get","column",["loc",[null,[25,50],[25,56]]]]],[],["loc",[null,[25,20],[25,57]]]]],[],["loc",[null,[25,8],[25,59]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-table/column",[],["column",["subexpr","@mut",[["get","column",["loc",[null,[24,32],[24,38]]]]],[],[]],"sortable",false,"class",["subexpr","ko-helper",[["get","classForHeader",["loc",[null,[24,71],[24,85]]]],["get","column",["loc",[null,[24,86],[24,92]]]]],[],["loc",[null,[24,60],[24,93]]]]],0,null,["loc",[null,[24,6],[26,26]]]]
            ],
            locals: ["column"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","each",[["get","columns",["loc",[null,[23,12],[23,19]]]]],[],0,null,["loc",[null,[23,4],[27,13]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 33,
                        "column": 10
                      },
                      "end": {
                        "line": 35,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                    return morphs;
                  },
                  statements: [
                    ["inline","component",[["subexpr","ko-helper",[["get","componentForColumn",["loc",[null,[34,35],[34,53]]]],["get","column",["loc",[null,[34,54],[34,60]]]]],[],["loc",[null,[34,24],[34,61]]]]],["case",["subexpr","@mut",[["get","case",["loc",[null,[34,67],[34,71]]]]],[],[]]],["loc",[null,[34,12],[34,73]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 8
                    },
                    "end": {
                      "line": 36,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-table/cell",[],["class",["subexpr","ko-contextual-helper",[["get","classForColumn",["loc",[null,[33,55],[33,69]]]],["get","this",["loc",[null,[33,70],[33,74]]]],["get","column",["loc",[null,[33,75],[33,81]]]]],[],["loc",[null,[33,33],[33,82]]]]],0,null,["loc",[null,[33,10],[35,28]]]]
                ],
                locals: ["column"],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 6
                  },
                  "end": {
                    "line": 37,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","each",[["get","columns",["loc",[null,[32,16],[32,23]]]]],[],0,null,["loc",[null,[32,8],[36,17]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-table/row",[],["clickable",true,"rowContext",["subexpr","@mut",[["get","case",["loc",[null,[31,48],[31,52]]]]],[],[]],"onClick",["subexpr","@mut",[["get","onClick",["loc",[null,[31,61],[31,68]]]]],[],[]]],0,null,["loc",[null,[31,6],[37,23]]]]
            ],
            locals: ["case"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 2
              },
              "end": {
                "line": 39,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","each",[["get","cases",["loc",[null,[30,12],[30,17]]]]],[],0,null,["loc",[null,[30,4],[38,13]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-table/header",[],["onSort","tableSorted","class","ko-cases-list__table-header"],0,null,["loc",[null,[22,2],[28,22]]]],
          ["block","ko-table/body",[],[],1,null,["loc",[null,[29,2],[39,20]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 0
            },
            "end": {
              "line": 45,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","u-mt");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["cases.list.casesnotfound"],[],["loc",[null,[43,19],[43,56]]]]],[],["loc",[null,[43,2],[43,58]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 46,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout u-mv");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-2/3");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3,"class","ko-cases-list__title heading");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4,"class","i-chevron-large-down i-color-grey--dark");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/3 t-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1, 1]),1,1);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[4,6],[4,15]]]],
        ["block","ko-table",[],["selectable",false],0,null,["loc",[null,[21,0],[40,13]]]],
        ["block","if",[["subexpr","not",[["get","cases",["loc",[null,[41,11],[41,16]]]]],[],["loc",[null,[41,6],[41,17]]]]],[],1,null,["loc",[null,[41,0],[45,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-center/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['ko-center']
  });

});
define('frontend-cp/components/ko-center/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 48
          }
        },
        "moduleName": "frontend-cp/components/ko-center/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-center__contents");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,33],[1,42]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-channel-select/button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    label: '',
    iconClass: '',
    classNames: ['ko-channel-select__button']
  });

});
define('frontend-cp/components/ko-channel-select/button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-select/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","ko-dropdown-select__icon i-select");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",[["get","iconClass",["loc",[null,[1,15],[1,24]]]]]]],
        ["content","label",["loc",[null,[1,35],[1,44]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-channel-select/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    hideOnClick: false,

    contentStyle: null
  });

});
define('frontend-cp/components/ko-channel-select/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-channel-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-channel-select/button",[],["label",["subexpr","@mut",[["get","label",["loc",[null,[3,37],[3,42]]]]],[],[]],"iconClass",["subexpr","@mut",[["get","iconClass",["loc",[null,[3,53],[3,62]]]]],[],[]]],["loc",[null,[3,4],[3,64]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-channel-select/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","yield",["loc",[null,[7,6],[7,15]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-channel-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-dropdown-select__content","style",["subexpr","@mut",[["get","contentStyle",["loc",[null,[6,66],[6,78]]]]],[],[]]],0,null,["loc",[null,[6,4],[8,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-channel-select/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[5,12],[5,16]]]],"content"],[],["loc",[null,[5,8],[5,27]]]]],[],1,null,["loc",[null,[5,2],[9,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["hideOnClick",["subexpr","@mut",[["get","hideOnClick",["loc",[null,[1,37],[1,48]]]]],[],[]],"hideOnChildFocus",true],0,null,["loc",[null,[1,0],[10,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-checkbox/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    disabled: false,
    large: false,
    checked: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',
    classNames: ['ko-checkbox'],

    keyDown: function keyDown(e) {
      if (e.keyCode === KeyCodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === KeyCodes.space) {
        this.send('toggleCheckbox');
      }
      return false;
    },

    click: function click(e) {
      return false;
    },

    actions: {
      toggleCheckbox: function toggleCheckbox() {
        if (!this.disabled) {
          if (this.get('onCheck')) {
            this.sendAction('onCheck', !this.get('checked'));
          } else {
            this.toggleProperty('checked');
          }
        }
      }
    }
  });

});
define('frontend-cp/components/ko-checkbox/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-checkbox__tick i-tick ",["subexpr","if",[["get","large",["loc",[null,[3,44],[3,49]]]],"ko-checkbox__tick--large"],[],["loc",[null,[3,39],[3,78]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-checkbox__label ",["subexpr","if",[["get","disabled",["loc",[null,[7,40],[7,48]]]],"ko-checkbox__label--disabled"],[],["loc",[null,[7,35],[7,81]]]]]]],
          ["attribute","for",["concat",[["get","elementId",["loc",[null,[7,90],[7,99]]]],"-checkbox"]]],
          ["element","action",["toggleCheckbox"],[],["loc",[null,[7,112],[7,139]]]],
          ["content","label",["loc",[null,[7,140],[7,149]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"role","checkbox");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createElementMorph(element2);
        morphs[7] = dom.createMorphAt(element2,1,1);
        morphs[8] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-checkbox__checkbox ",["subexpr","if",[["get","large",["loc",[null,[1,39],[1,44]]]],"ko-checkbox__checkbox--large"],[],["loc",[null,[1,34],[1,77]]]]," ",["subexpr","if",[["get","disabled",["loc",[null,[1,83],[1,91]]]],"ko-checkbox__checkbox--disabled"],[],["loc",[null,[1,78],[1,127]]]]]]],
        ["attribute","aria-checked",["concat",[["get","checked",["loc",[null,[1,161],[1,168]]]]]]],
        ["attribute","tabindex",["concat",[["get","tabindex",["loc",[null,[1,184],[1,192]]]]]]],
        ["attribute","aria-disabled",["concat",[["subexpr","if",[["get","disabled",["loc",[null,[1,216],[1,224]]]],"true","false"],[],["loc",[null,[1,211],[1,241]]]]]]],
        ["attribute","aria-live",["concat",[["get","ariaLive",["loc",[null,[1,256],[1,264]]]]]]],
        ["attribute","id",["concat",[["get","elementId",["loc",[null,[1,274],[1,283]]]],"-checkbox"]]],
        ["element","action",["toggleCheckbox"],[],["loc",[null,[1,296],[1,323]]]],
        ["block","if",[["get","checked",["loc",[null,[2,8],[2,15]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
        ["block","if",[["get","label",["loc",[null,[6,6],[6,11]]]]],[],1,null,["loc",[null,[6,0],[8,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-contact-info/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['info-bar-item', 'u-no-bottom-border']
  });

});
define('frontend-cp/components/ko-contact-info/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","i--case-phone");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","phone",["loc",[null,[4,32],[4,41]]]]
        ],
        locals: ["phone"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","i--case-twitter");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","twitterAccount",["loc",[null,[8,34],[8,52]]]]
        ],
        locals: ["twitterAccount"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","i--case-facebook");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","facebookAccount",["loc",[null,[12,35],[12,54]]]]
        ],
        locals: ["facebookAccount"],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","i--case-email");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","email",["loc",[null,[16,32],[16,41]]]]
        ],
        locals: ["email"],
        templates: []
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1,"class","i--case-linkedin");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["content","linkedinAccount",["loc",[null,[20,35],[20,54]]]]
        ],
        locals: ["linkedinAccount"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-contact-info/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,4,4,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,8,8,contextualElement);
        morphs[3] = dom.createMorphAt(fragment,12,12,contextualElement);
        morphs[4] = dom.createMorphAt(fragment,16,16,contextualElement);
        morphs[5] = dom.createMorphAt(fragment,20,20,contextualElement);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,3],[1,12]]]],
        ["block","each",[["get","phones",["loc",[null,[3,8],[3,14]]]]],[],0,null,["loc",[null,[3,0],[5,9]]]],
        ["block","each",[["get","twitter",["loc",[null,[7,8],[7,15]]]]],[],1,null,["loc",[null,[7,0],[9,9]]]],
        ["block","each",[["get","facebook",["loc",[null,[11,8],[11,16]]]]],[],2,null,["loc",[null,[11,0],[13,9]]]],
        ["block","each",[["get","emails",["loc",[null,[15,8],[15,14]]]]],[],3,null,["loc",[null,[15,0],[17,9]]]],
        ["block","each",[["get","linkedin",["loc",[null,[19,8],[19,16]]]]],[],4,null,["loc",[null,[19,0],[21,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('frontend-cp/components/ko-context-modal/component', ['exports', 'ember', 'jquery'], function (exports, Ember, $) {

  'use strict';

  var htmlSafe = Ember['default'].String.htmlSafe;

  var POSITION_MARGIN = 18,
      // Padding around window bounds to apply if modal's natural position is outside the bounds and it gets moved inside.
  ARROW_OFFSET = 9,
      // Distance between the originating element and the modal
  ARROW_SIZE = 9; // Size of the arrow in pixels (can be confirmed in _arrow.scss)

  exports['default'] = Ember['default'].Component.extend({

    classNameBindings: [':overlay', 'visible:u-visible'],

    contextModalService: Ember['default'].inject.service('context-modal'),

    event: Ember['default'].computed.alias('contextModalService.event'),
    title: Ember['default'].computed.alias('contextModalService.title'),
    visible: Ember['default'].computed.alias('contextModalService.visible'),
    activeContextModalId: Ember['default'].computed.alias('contextModalService.activeContextModalId'),
    activeIndex: Ember['default'].computed.alias('contextModalService.index'),

    $modal: null,

    eventX: null,
    eventY: null,
    eventInlineX: null,
    eventInlineY: null,
    buttonWidth: null,
    buttonHeight: null,
    windowWidth: null,
    windowHeight: null,
    documentWidth: null,
    documentHeight: null,
    modalWidth: null,
    naturalModalHeight: null,
    modalVisible: false,
    headerHeight: null,
    scrollableModalContents: Ember['default'].computed.not('inline'),
    preventBodyScroll: Ember['default'].computed.not('inline'),

    // Property which will help to issue reposition of modal window.
    // Useful in auto completes, when you need to use full vertical
    // space between different queries and data responses.
    repositionRequired: false,
    onRepositionRequired: Ember['default'].observer('contextModalService.repositionRequired', function () {
      if (!this.get('contextModalService.repositionRequired')) {
        return;
      }

      Ember['default'].run.scheduleOnce('afterRender', this, this.updatePositionInputs);

      this.set('contextModalService.repositionRequired', false);
    }),

    willInsertElement: function willInsertElement() {
      var _this = this;

      this.set('$modal', this.$().find('.ko-context-modal__container'));
      $['default'](window).on('resize.contextModal', function () {
        _this.set('modalVisible', false);
        Ember['default'].run.next(_this, _this.updatePositionInputs);
      });
    },

    willDestroyElement: function willDestroyElement() {
      $['default'](window).off('resize.contextModal');
    },

    actions: {
      close: function close() {
        this.get('contextModalService').close();
      }
    },

    isHiddenFloatingModal: Ember['default'].computed('floating', 'contextModalService.inline', function () {
      return !!(this.get('floating') && this.get('contextModalService.inline'));
    }),

    eventDidChange: Ember['default'].on('init', Ember['default'].observer('event', 'activeContextModalId', 'activeIndex', function () {
      this.set('modalVisible', false);
      this.get('activeContextModalId');
      this.get('activeIndex');
      this.get('event');
      Ember['default'].run.next(this, this.updatePositionInputs);
    })),

    updatePositionInputs: function updatePositionInputs() {
      var _this2 = this;

      if (this.get('isDestroyed') || this.get('isDestroying')) {
        return;
      }

      var event = this.get('event');

      if (event === undefined || event === null) {
        return;
      }

      var $modal = this.get('$modal');

      var eventPosition = this.getPosition(event.target);
      Ember['default'].run(function () {
        _this2.set('isResetting', true);
      });
      Ember['default'].run(function () {
        _this2.set('eventX', eventPosition.x);
        _this2.set('eventY', eventPosition.y);
        _this2.set('eventInlineX', eventPosition.inlineX);
        _this2.set('eventInlineY', eventPosition.inlineY);
        var $header = _this2.$().find('.ko-context-modal__header-container');
        if ($header) {
          _this2.set('headerHeight', $header.outerHeight());
        }
        _this2.set('buttonHeight', $['default'](event.target).outerHeight());
        _this2.set('buttonWidth', $['default'](event.target).width());
        _this2.set('windowWidth', $['default'](window).width());
        _this2.set('windowHeight', $['default'](window).height());
        _this2.set('documentWidth', $['default'](document).width());
        _this2.set('documentHeight', $['default'](document).height());
        _this2.set('modalWidth', $modal.outerWidth(true));
        _this2.set('naturalModalHeight', $modal.outerHeight());
        _this2.set('modalVisible', true);
        _this2.set('isResetting', false);
      });
    },

    /**
     * Calculates the x position of the arrow, relative to the left of the modal.
     * @return {Number} Arrow x Position
     */
    arrowX: Ember['default'].computed('modalWidth', 'boundingOffsetX', function () {
      return this.get('modalWidth') / 2 + this.get('boundingOffsetX') - ARROW_SIZE / 2;
    }),

    /**
     * Based on the vertical position of the modal, set the arrow to appear on the top or bottom of the modal
     * @return {[type]} [description]
     */
    arrowClass: Ember['default'].computed('isArrowUnderneath', function () {
      //if title is empty arrow should be grey
      var title = this.get('title');
      var arrowUnderneath = this.get('isArrowUnderneath');
      if (!title && !arrowUnderneath) {
        return 'arrow--top arrow--no-title arrow';
      }
      return 'arrow--' + (this.get('isArrowUnderneath') ? 'bottom' : 'top') + ' arrow';
    }),

    targetModalOriginX: Ember['default'].computed('eventInlineX', 'eventX', 'buttonWidth', 'modalWidth', function () {
      var originX = (this.get('inline') ? this.get('eventInlineX') : this.get('eventX')) + this.get('buttonWidth') / 2; // Find the coordinate for the centre of the element clicked
      return originX - this.get('modalWidth') / 2; // Move the modal 50% of its width to the left of the centre of element clicked
    }),

    positionX: Ember['default'].computed('targetModalOriginX', 'windowWidth', 'modalWidth', function () {
      return Math.max(POSITION_MARGIN, Math.min(this.get('targetModalOriginX'), this.get('windowWidth') - this.get('modalWidth') - POSITION_MARGIN));
    }),

    positionY: Ember['default'].computed('isModalBelowClickedElement', 'eventY', 'eventInlineY', 'buttonHeight', 'constrainedModalHeight', 'inline', function () {
      var y = this.get('inline') ? this.get('eventInlineY') : this.get('eventY');
      if (this.get('isModalBelowClickedElement')) {
        return y + this.get('buttonHeight') + ARROW_OFFSET;
      } else {
        return y - this.get('constrainedModalHeight') - ARROW_OFFSET - ARROW_SIZE;
      }
    }),

    constrainedModalHeight: Ember['default'].computed('isModalBelowClickedElement', 'spaceAbove', 'spaceBelow', 'naturalModalHeight', function () {
      if (!this.get('scrollableModalContents')) {
        return this.get('naturalModalHeight');
      }
      return Math.min(this.get('isModalBelowClickedElement') ? this.get('spaceBelow') : this.get('spaceAbove'), this.get('naturalModalHeight'));
    }),

    modalContentHeightStyle: Ember['default'].computed('modalContentHeight', function () {
      return htmlSafe('height: ' + this.get('modalContentHeight') + 'px');
    }),

    isConstrained: Ember['default'].computed('naturalModalHeight', 'constrainedModalHeight', 'isResetting', function () {
      if (this.get('isResetting')) {
        return false;
      }
      return this.get('naturalModalHeight') !== this.get('constrainedModalHeight');
    }),

    modalContentHeight: Ember['default'].computed('headerHeight', 'constrainedModalHeight', function () {
      return this.get('constrainedModalHeight') - this.get('headerHeight') - ARROW_SIZE;
    }),

    isArrowUnderneath: Ember['default'].computed.not('isModalBelowClickedElement'),

    /**
     * Will place the modal above if there is enough space and there is more space above than below
     * @return {Boolean} [description]
     */
    isModalBelowClickedElement: Ember['default'].computed('spaceAbove', 'spaceBelow', 'inline', 'naturalModalHeight', function () {
      if (this.get('inline')) {
        return !(this.get('spaceAbove') > this.get('spaceBelow') && this.get('naturalModalHeight') < this.get('spaceAbove'));
      } else {
        return this.get('spaceAbove') < this.get('spaceBelow');
      }
    }),

    spaceAbove: Ember['default'].computed('eventY', function () {
      var space = this.get('eventY') - POSITION_MARGIN - ARROW_SIZE;
      return space;
    }),

    spaceBelow: Ember['default'].computed('windowHeight', 'eventY', 'buttonHeight', function () {
      var space = this.get('windowHeight') - this.get('eventY') - this.get('buttonHeight') - POSITION_MARGIN - ARROW_SIZE;
      return space;
    }),

    /**
     * Distance between where we want to put the modal, and where the bounding logic has moved it
     * @return {Number} X Distance in px between bounded and unbounded modal position
     */
    boundingOffsetX: Ember['default'].computed('targetModalOriginX', 'positionX', function () {
      return this.get('targetModalOriginX') - this.get('positionX');
    }),

    /**
     * Returns the x and y coordinates of the element passed in.
     * For a detailed breakdown and analysis of what is going on and why, please see:
     * http://www.kirupa.com/html5/get_element_position_using_javascript.htm
     *
     * @param {{HTMLElement}} element - DOM node to base positioning off of.
     * @returns {{x: number, y: number}}
     */
    getPosition: function getPosition(element) {
      if (!element) {
        throw new Error('No element found, cannot calculate coordinates');
      }

      var x = 0,
          y = 0,
          inlineX = element.offsetLeft,
          inlineY = element.offsetTop;

      while (element) {
        x += element.offsetLeft - element.scrollLeft + element.clientLeft;
        y += element.offsetTop - element.scrollTop + element.clientTop;
        element = element.offsetParent;
      }

      return { x: x, y: y, inlineX: inlineX, inlineY: inlineY };
    },

    /**
     * Need to SafeString all bound style attributes
     */

    floatingModalStyle: Ember['default'].computed('isHiddenFloatingModal', function () {
      return htmlSafe(this.get('isHiddenFloatingModal') ? 'display: none;' : '');
    }),

    overlayStyle: Ember['default'].computed('documentWidth', 'documentHeight', function () {
      return htmlSafe('width:' + this.get('documentWidth') + 'px;' + 'height:' + this.get('documentHeight') + 'px;');
    }),

    containerStyle: Ember['default'].computed('positionY', 'positionX', 'modalVisible', function () {
      var visibility = '';
      if (!this.get('modalVisible')) {
        visibility = 'visibility: hidden;';
      }
      return htmlSafe('top: ' + this.get('positionY') + 'px; left: ' + this.get('positionX') + 'px; ' + visibility);
    }),

    contentStyle: Ember['default'].computed('isConstrained', 'modalContentHeightStyle', function () {
      return htmlSafe(this.get('isConstrained') ? this.get('modalContentHeightStyle') : '');
    }),

    arrowStyle: Ember['default'].computed('arrowX', function () {
      return htmlSafe('left: ' + this.get('arrowX') + 'px;');
    })

  });

});
define('frontend-cp/components/ko-context-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-context-modal__overlay");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element3, 'style');
          morphs[1] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["attribute","style",["get","overlayStyle",["loc",[null,[3,51],[3,63]]]]],
          ["element","action",["close"],[],["loc",[null,[3,66],[3,84]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 4
            },
            "end": {
              "line": 11,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box box--secondary ko-context-modal__header-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          dom.setAttribute(el2,"class","ko-context-modal__header");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","#");
          dom.setAttribute(el2,"class","ko-context-modal__action");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2,0,0);
          return morphs;
        },
        statements: [
          ["content","title",["loc",[null,[8,45],[8,54]]]],
          ["element","action",["close"],[],["loc",[null,[9,53],[9,71]]]],
          ["inline","format-message",[["subexpr","intl-get",["generic.close"],[],["loc",[null,[9,89],[9,115]]]]],[],["loc",[null,[9,72],[9,117]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box ko-context-modal__content");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["content","yield",["loc",[null,[14,8],[14,17]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"id","ko-context-modal__content");
          dom.setAttribute(el1,"class","ko-context-modal__content");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'style');
          return morphs;
        },
        statements: [
          ["attribute","style",["get","contentStyle",["loc",[null,[17,84],[17,96]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-context-modal__container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element5, [4]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element4, 'style');
        morphs[1] = dom.createMorphAt(element4,1,1);
        morphs[2] = dom.createAttrMorph(element5, 'style');
        morphs[3] = dom.createMorphAt(element5,1,1);
        morphs[4] = dom.createMorphAt(element5,2,2);
        morphs[5] = dom.createAttrMorph(element6, 'class');
        morphs[6] = dom.createAttrMorph(element6, 'style');
        return morphs;
      },
      statements: [
        ["attribute","style",["get","floatingModalStyle",["loc",[null,[1,13],[1,31]]]]],
        ["block","if",[["get","preventBodyScroll",["loc",[null,[2,8],[2,25]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
        ["attribute","style",["get","containerStyle",["loc",[null,[5,51],[5,65]]]]],
        ["block","if",[["get","title",["loc",[null,[6,10],[6,15]]]]],[],1,null,["loc",[null,[6,4],[11,11]]]],
        ["block","if",[["get","inline",["loc",[null,[12,10],[12,16]]]]],[],2,3,["loc",[null,[12,4],[18,11]]]],
        ["attribute","class",["concat",[["get","arrowClass",["loc",[null,[19,18],[19,28]]]]]]],
        ["attribute","style",["get","arrowStyle",["loc",[null,[19,40],[19,50]]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('frontend-cp/components/ko-context-modal-item/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var htmlSafe = Ember['default'].String.htmlSafe;

  exports['default'] = Ember['default'].Component.extend({
    contextModalService: Ember['default'].inject.service('context-modal'),
    activeContextModalId: Ember['default'].computed.alias('contextModalService.activeContextModalId'),
    activeIndex: Ember['default'].computed.alias('contextModalService.index'),

    isShowing: false,

    /**
     * Check this is the correct modal set
     * @return {undefined}
     */
    isContextModalActive: Ember['default'].computed('activeContextModalId', 'contextModalId', function () {
      return this.get('activeContextModalId') === this.get('contextModalId') && this.get('activeContextModalId') !== null;
    }),

    /**
     * Check the modal set is both active and that we are on the correct index (page)
     * @return {undefined}
     */
    isHidden: Ember['default'].computed('activeIndex', 'index', 'isContextModalActive', function () {
      return this.get('activeIndex') !== Number(this.get('index')) || !this.get('isContextModalActive');
    }),

    inline: Ember['default'].computed('isContextModalActive', 'contextModalService.inline', function () {
      return this.get('isContextModalActive') ? this.get('contextModalService.inline') : false;
    }),

    didShow: Ember['default'].on('init', Ember['default'].observer('isHidden', function () {
      var _this = this;

      if (!this.get('isHidden')) {
        this.get('contextModalService').set('title', this.get('title'));
      }

      Ember['default'].run.next(function () {
        _this.set('isShowing', !_this.get('isHidden'));
      });
    })),

    /**
     * Need to SafeString bound style attributes
     */

    modalItemStyle: Ember['default'].computed('isHidden', function () {
      return htmlSafe(this.get('isHidden') ? 'display: none;' : '');
    }),

    actions: {
      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });

});
define('frontend-cp/components/ko-context-modal-item/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","yield",[["get","isShowing",["loc",[null,[4,14],[4,23]]]]],[],["loc",[null,[4,6],[4,25]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-context-modal__inline");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'style');
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["attribute","style",["get","modalItemStyle",["loc",[null,[2,48],[2,62]]]]],
          ["block","ko-context-modal",[],["inline",["subexpr","@mut",[["get","inline",["loc",[null,[3,31],[3,37]]]]],[],[]]],0,null,["loc",[null,[3,4],[5,25]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","yield",[["get","isShowing",["loc",[null,[10,14],[10,23]]]]],[],["loc",[null,[10,6],[10,25]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","not",[["get","isHidden",["loc",[null,[9,15],[9,23]]]]],[],["loc",[null,[9,10],[9,24]]]]],[],0,null,["loc",[null,[9,4],[11,11]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ember-wormhole",[],["to","ko-context-modal__content"],0,null,["loc",[null,[8,2],[12,21]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-context-modal-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","inline",["loc",[null,[1,6],[1,12]]]]],[],0,1,["loc",[null,[1,0],[13,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/cascadingselect/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/cascadingselect/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/cascadingselect/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","field.options",["loc",[null,[3,10],[3,23]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[6,8],[6,24]]]]],[],[]],"onValueChange","valueChanged","idPath","id","labelPath","value","nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.deselect_generic"],[],["loc",[null,[10,34],[10,69]]]]],[],["loc",[null,[10,18],[10,70]]]]],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/checkbox/component', ['exports', 'ember', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Ember, Custom) {

  'use strict';

  var valueToArray = function valueToArray(value) {
    return (value || '').split(',').filter(function (v) {
      return v !== '';
    });
  };

  exports['default'] = Custom['default'].extend({
    value: Ember['default'].computed('fieldValue.value', function () {
      return valueToArray(this.get('fieldValue.value'));
    }),

    updateIsEditedFromHash: Ember['default'].on('init', Ember['default'].observer('field.id', function () {
      var _this = this;

      /*
       * We take an object holding the edited status of all case fields with the format:
       * { id: isEdited, ... }
       *
       * we need to observe isEditedObject[field.id] which we can't do as a normal CP because field.id is dynamic
       * So this is just a computed property wrapped in an observer (so we have the context)
       */
      this.set('isEdited', Ember['default'].computed('editedCustomFields.' + this.get('field.id'), function () {
        return _this.get('editedCustomFields').get(_this.get('field.id'));
      }));
    })),

    actions: {
      selectionChanged: function selectionChanged(value) {
        this.send('valueChanged', value.join(','));
      }
    }
  });

});
define('frontend-cp/components/ko-custom-field/checkbox/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-field/checkbox",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","field.options",["loc",[null,[3,10],[3,23]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[7,8],[7,13]]]]],[],[]],"onValueChange","selectionChanged"],["loc",[null,[1,0],[9,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/custom/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    onFieldUpdated: null,
    errors: [],

    store: Ember['default'].inject.service(),
    customFieldsList: Ember['default'].inject.service('custom-fields/list'),

    tagName: '',

    customFieldsModel: null,
    field: null,
    fieldValue: null,

    valueObject: Ember['default'].computed('customFieldsModel.@each.field', 'field', function () {
      // required to update isEdited after fields are saved to reset isEdited status
      return this.get('customFieldsList').findCustomFieldValue(this.get('customFieldsModel'), this.get('field'));
    }),

    isEdited: Ember['default'].computed('valueObject.value', function () {
      return !!this.get('valueObject.isDirty');
    }),

    onErrors: Ember['default'].observer('errors.[]', function () {
      var _this = this;

      if (this.get('errors')) {
        this.set('isErrored', this.get('errors').reduce(function (acc, error) {
          return acc || error.parameter === _this.get('field.key');
        }, false));
      }
    }),

    updateIsPusherEditedFromHash: Ember['default'].on('init', Ember['default'].observer('field.id', function () {
      var _this2 = this;

      /*
       * We take an object holding the edited status of all case fields with the format:
       * { id: isEdited, ... }
       *
       * we need to observe isEditedObject[field.id] which we can't do as a normal CP because field.id is dynamic
       * So this is just a computed property wrapped in an observer (so we have the context)
       */
      this.set('isPusherEdited', Ember['default'].computed('fieldsEditedByPusher.' + this.get('field.id'), function () {
        if (_this2.get('fieldsEditedByPusher')) {
          return _this2.get('fieldsEditedByPusher')[_this2.get('field.id')];
        }
        return false;
      }));
    })),

    setValue: function setValue(fieldValue, value) {
      fieldValue.set('value', value);
    },

    actions: {
      valueChanged: function valueChanged(value) {
        this.set('isErrored', false);

        var field = this.get('field');
        var fieldValue = this.get('fieldValue');

        if (!fieldValue) {
          fieldValue = this.get('customFieldsModel').createFragment({
            fieldFragment: this.get('store').createFragment('relationship-fragment', {
              relationshipId: field.id,
              relationshipType: field.type
            })
          });
          this.set('fieldValue', fieldValue);
        }

        this.setValue(fieldValue, value);
        this.sendAction('onFieldUpdated');
      }
    }
  });

});
define('frontend-cp/components/ko-custom-field/date/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component', 'moment'], function (exports, Custom, moment) {

  'use strict';

  exports['default'] = Custom['default'].extend({
    setValue: function setValue(fieldValue, value) {
      if (value) {
        // special format required for API
        fieldValue.set('value', moment['default'](value).format('YYYY-MM-DDTHH:mm:ss') + 'Z');
      } else {
        fieldValue.set('value', null);
      }
    }
  });

});
define('frontend-cp/components/ko-custom-field/date/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/date/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/date",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,6],[2,17]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,6],[3,22]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,9],[4,17]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,10],[5,19]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,15],[6,29]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/decimal/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/decimal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/decimal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,8],[3,24]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/file/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/file/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/file/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/file",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,6],[2,17]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,6],[3,22]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,9],[4,17]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,10],[5,19]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[7,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/numeric/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/numeric/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/numeric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,8],[3,24]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/radio/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/radio/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","field.options",["loc",[null,[3,10],[3,23]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[6,8],[6,24]]]]],[],[]],"onValueChange","valueChanged","idPath","id","labelPath","value","nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.deselect_generic"],[],["loc",[null,[10,34],[10,69]]]]],[],["loc",[null,[10,18],[10,70]]]]],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/regex/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/regex/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,8],[3,24]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/select/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/select/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","field.options",["loc",[null,[3,10],[3,23]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[7,8],[7,24]]]]],[],[]],"onValueChange","valueChanged","idPath","id","labelPath","value","nullOptionLabel",["subexpr","format-message",[["subexpr","intl-get",["cases.deselect_generic"],[],["loc",[null,[11,34],[11,69]]]]],[],["loc",[null,[11,18],[11,70]]]]],["loc",[null,[1,0],[12,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/text/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,8],[3,24]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[5,17],[5,31]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[6,12],[6,21]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/textarea/component', ['exports', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Custom) {

	'use strict';

	exports['default'] = Custom['default'].extend({});

});
define('frontend-cp/components/ko-custom-field/textarea/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/textarea/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/text",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[3,8],[3,24]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"onValueChange","valueChanged"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-custom-field/yesno/component', ['exports', 'ember', 'frontend-cp/components/ko-custom-field/custom/component'], function (exports, Ember, Custom) {

  'use strict';

  exports['default'] = Custom['default'].extend({
    optionsList: [Ember['default'].Object.create({ id: 'yes', value: 'Yes' }), Ember['default'].Object.create({ id: 'no', value: 'No' })]
  });

});
define('frontend-cp/components/ko-custom-field/yesno/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-custom-field/yesno/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-field/select",[],["title",["subexpr","@mut",[["get","field.title",["loc",[null,[2,8],[2,19]]]]],[],[]],"options",["subexpr","@mut",[["get","optionsList",["loc",[null,[3,10],[3,21]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[4,11],[4,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[5,12],[5,21]]]]],[],[]],"isPusherEdited",["subexpr","@mut",[["get","isPusherEdited",["loc",[null,[6,17],[6,31]]]]],[],[]],"value",["subexpr","@mut",[["get","fieldValue.value",["loc",[null,[7,8],[7,24]]]]],[],[]],"onValueChange","valueChanged","idPath","id","labelPath","value"],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-datepicker/component', ['exports', 'ember', 'npm:lodash', 'moment', 'frontend-cp/config/environment', 'frontend-cp/lib/keycodes'], function (exports, Ember, _, moment, config, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    attributeBindings: ['tabindex'],
    tabindex: '-1',

    today: moment['default'](),
    shownDate: null,
    date: moment['default'](''),

    assetRoot: config['default'].assetRoot,

    momentDate: Ember['default'].computed('date', function () {
      return moment['default'](this.get('date'));
    }),

    onDateParamChange: Ember['default'].on('init', Ember['default'].observer('momentDate', function () {
      this.set('shownDate', moment['default'](this.get('momentDate').isValid() ? this.get('momentDate') : this.get('today')).toDate());
    })),

    month: Ember['default'].computed('shownDate', function () {
      return moment['default'](this.get('shownDate')).month();
    }),

    year: Ember['default'].computed('shownDate', function () {
      return moment['default'](this.get('shownDate')).year();
    }),

    weekdays: Ember['default'].computed(function () {
      var weekdays = moment['default'].weekdaysShort();
      var firstDayOfWeek = moment['default'].localeData().firstDayOfWeek();
      _['default'].times(firstDayOfWeek, function () {
        return weekdays.push(weekdays.shift());
      });
      return weekdays;
    }),

    days: Ember['default'].computed('year', 'month', 'today', 'momentDate', function () {
      var date = moment['default']({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).startOf('week');

      var end = moment['default']({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).add(1, 'month').endOf('week');

      var dates = [];
      while (date.isBefore(end, 'day') || date.isSame(end, 'day')) {
        dates.push({
          date: date.date(),
          currentMonth: date.month() === this.get('month'),
          today: this.get('today').isSame(date, 'day'),
          selected: date.isSame(this.get('momentDate'), 'day')
        });
        date.add(1, 'day');
      }
      return dates;
    }),

    jumpDateBy: function jumpDateBy(method, range) {
      if (this.get('momentDate').isValid()) {
        this.setDate(moment['default'](this.get('momentDate'))[method](1, range));
      }
      return false;
    },

    setDate: function setDate(date) {
      this.sendAction('on-date-change', date ? date.toDate() : null);
    },

    actions: {
      previousMonth: function previousMonth() {
        this.set('shownDate', moment['default'](this.get('shownDate')).subtract(1, 'month').toDate());
      },

      nextMonth: function nextMonth() {
        this.set('shownDate', moment['default'](this.get('shownDate')).add(1, 'month').toDate());
      },

      selectDate: function selectDate(date) {
        this.setDate(moment['default']({
          year: this.get('year'),
          month: this.get('month'),
          day: date.date
        }));
      },

      today: function today() {
        this.setDate(moment['default'](this.get('today')));
      },

      clear: function clear() {
        this.setDate(null);
      },

      close: function close() {
        this.sendAction('close');
      }
    },

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case KeyCodes.up:
          {
            return this.jumpDateBy('subtract', 'week');
          }
        case KeyCodes.down:
          {
            return this.jumpDateBy('add', 'week');
          }
        case KeyCodes.left:
          {
            return this.jumpDateBy('subtract', 'day');
          }
        case KeyCodes.right:
          {
            return this.jumpDateBy('add', 'day');
          }
      }
    }
  });

});
define('frontend-cp/components/ko-datepicker/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","ko-datepicker__weekday");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","weekday",["loc",[null,[10,41],[10,52]]]]
        ],
        locals: ["weekday"],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-datepicker__date ",["subexpr","if",[["get","date.currentMonth",["loc",[null,[13,42],[13,59]]]],"ko-datepicker__date--current-month"],[],["loc",[null,[13,37],[13,98]]]],"\n      ",["subexpr","if",[["get","date.today",["loc",[null,[14,11],[14,21]]]],"ko-datepicker__date--today"],[],["loc",[null,[14,6],[14,52]]]]," ",["subexpr","if",[["get","date.selected",["loc",[null,[14,58],[14,71]]]],"ko-datepicker__date--selected"],[],["loc",[null,[14,53],[14,105]]]]]]],
          ["element","action",["selectDate",["get","date",["loc",[null,[15,28],[15,32]]]]],[],["loc",[null,[15,6],[15,34]]]],
          ["content","date.date",["loc",[null,[15,35],[15,48]]]]
        ],
        locals: ["date"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-datepicker__header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-datepicker__month");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-datepicker__year");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-datepicker__previous i-chevron-large-left");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-datepicker__next i-chevron-large-right");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-datepicker__calendar");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-datepicker__actions");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","i-triangle ko-datepicker__icon--today");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","i-minus ko-datepicker__icon--clear");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","i-cross-bold ko-datepicker__icon--close");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [5]);
        var element3 = dom.childAt(element1, [7]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(fragment, [4]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3, 1]);
        var element8 = dom.childAt(element5, [5, 1]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
        morphs[2] = dom.createElementMorph(element2);
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(element4,1,1);
        morphs[5] = dom.createMorphAt(element4,2,2);
        morphs[6] = dom.createElementMorph(element6);
        morphs[7] = dom.createMorphAt(element6,3,3);
        morphs[8] = dom.createElementMorph(element7);
        morphs[9] = dom.createMorphAt(element7,3,3);
        morphs[10] = dom.createElementMorph(element8);
        morphs[11] = dom.createMorphAt(element8,3,3);
        return morphs;
      },
      statements: [
        ["inline","format-date",[["get","shownDate",["loc",[null,[2,51],[2,60]]]]],["format","month"],["loc",[null,[2,37],[2,77]]]],
        ["inline","format-date",[["get","shownDate",["loc",[null,[3,50],[3,59]]]]],["format","year"],["loc",[null,[3,36],[3,75]]]],
        ["element","action",["previousMonth"],[],["loc",[null,[4,61],[4,87]]]],
        ["element","action",["nextMonth"],[],["loc",[null,[5,58],[5,80]]]],
        ["block","each",[["get","weekdays",["loc",[null,[9,10],[9,18]]]]],[],0,null,["loc",[null,[9,2],[11,11]]]],
        ["block","each",[["get","days",["loc",[null,[12,10],[12,14]]]]],["key","@index"],1,null,["loc",[null,[12,2],[16,11]]]],
        ["element","action",["today"],[],["loc",[null,[21,10],[21,28]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.datepicker.today"],[],["loc",[null,[23,23],[23,60]]]]],[],["loc",[null,[23,6],[23,62]]]],
        ["element","action",["clear"],[],["loc",[null,[27,10],[27,28]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.datepicker.clear"],[],["loc",[null,[29,23],[29,60]]]]],[],["loc",[null,[29,6],[29,62]]]],
        ["element","action",["close"],[],["loc",[null,[33,10],[33,28]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.datepicker.close"],[],["loc",[null,[35,23],[35,60]]]]],[],["loc",[null,[35,6],[35,62]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-draggable-dropzone/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    totalSize: 0,
    dragCounter: 0,
    classNames: ['koDraggableDropzone'],
    classNameBindings: ['dragClass:ko-draggable-dropzone--activated:ko-draggable-dropzone--deactivated'],
    dragClass: false,

    dragEnter: function dragEnter(event) {
      event.preventDefault();
      this.incrementProperty('dragCounter');
      this.set('dragClass', true);
    },

    dragOver: function dragOver(event) {
      event.preventDefault();
    },

    dragLeave: function dragLeave(event) {
      event.preventDefault();
      this.decrementProperty('dragCounter');
      if (this.dragCounter === 0) {
        this.set('dragClass', false);
      }
    },

    drop: function drop(event) {
      var _this = this;

      event.preventDefault();
      var file = event.dataTransfer.files[0];
      var reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = function () {
        _this.sendAction('dropped', reader.result);
      };
      this.set('dragClass', false);
    }

  });

});
define('frontend-cp/components/ko-draggable-dropzone/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-draggable-dropzone/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-draggable-dropzone__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-draggable-dropzone__border");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[2,2],[2,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-drill-down-context-menu/component', ['exports', 'ember', 'frontend-cp/components/mixins/context-menu-set'], function (exports, Ember, ContextMenuSetComponentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(ContextMenuSetComponentMixin['default'], {

    actions: {
      onDrillDownSelectionComplete: function onDrillDownSelectionComplete(value) {
        this.sendAction('onSelect', value);
      }
    }
  });

});
define('frontend-cp/components/ko-drill-down-context-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-drill-down-context-menu/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-drill-down-popover",[],["placeholder",["subexpr","@mut",[["get","placeholder",["loc",[null,[3,38],[3,49]]]]],[],[]],"options",["subexpr","@mut",[["get","options",["loc",[null,[3,58],[3,65]]]]],[],[]],"onDrillDownSelectionComplete","onDrillDownSelectionComplete","isShowing",["subexpr","@mut",[["get","isShowing",["loc",[null,[3,136],[3,145]]]]],[],[]]],["loc",[null,[3,2],[3,147]]]]
        ],
        locals: ["isShowing"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-drill-down-context-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-context-modal-item",[],["index","0","title",["subexpr","@mut",[["get","title",["loc",[null,[1,41],[1,46]]]]],[],[]],"contextModalId",["subexpr","@mut",[["get","contextModalId",["loc",[null,[1,62],[1,76]]]]],[],[]]],0,null,["loc",[null,[1,0],[5,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-drill-down-popover/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    contextModalService: Ember['default'].inject.service('contextModal'),

    //params
    title: null,
    field: new Ember['default'].A([]),
    value: null,
    isEdited: false,
    isErrored: false,
    onValueChange: null,
    isShowing: false,

    tagName: 'div',

    didShowingChange: Ember['default'].on('init', Ember['default'].observer('isShowing', function () {
      var isShowing = this.get('isShowing');

      if (isShowing) {
        this.$().find('input:input').focus();
      }
    })),

    actions: {
      onComponentValueChange: function onComponentValueChange(value) {
        this.sendAction('onDrillDownSelectionComplete', value);
        this.get('contextModalService').close();
      }
    }
  });

});
define('frontend-cp/components/ko-drill-down-popover/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-drill-down-popover/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-option-list-drill-down",[],["options",["subexpr","@mut",[["get","options",["loc",[null,[2,10],[2,17]]]]],[],[]],"placeholder",["subexpr","@mut",[["get","placeholder",["loc",[null,[3,14],[3,25]]]]],[],[]],"showExpandedByDefault",true,"onValueChange","onComponentValueChange"],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/container/button/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-dropdown/container/button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/container/component', ['exports', 'ember', 'jquery'], function (exports, Ember, $) {

  'use strict';

  var Component = Ember['default'].Component;
  var observer = Ember['default'].observer;
  var run = Ember['default'].run;

  /**
   * Rules:
   *   Always closes when you click outside of it
   *   Always open while it or its children are focussed
   *   hideOnChildFocus will unfocus children if a link
   *
   *   {{#ko-dropdown/container as |name dropdownContext|}}
   *     {{#if (eq name 'button')}}
   *       <div>Button</div>
   *     {{/if}}
   *     {{#if (eq name 'content')}}
   *       Content
   *       <button {{action 'hide' target=dropdownContext}}>hideme</button>
   *     {{/if}}
   *   {{/ko-dropdown/container}}
   */

  exports['default'] = Component.extend({
    // Params
    // Set to true if you include links in the content and you want to hide the dropdown when the links are clicked
    hideOnChildFocus: null,
    // Set to true if you want non link clicks to also hide the dropdown
    hideOnClick: null,
    //Allows components that need to signal when the dropdown should close
    hideDropdown: null,
    onFocusChanged: null,

    tabindex: 0,
    isFocussed: null,
    attributeBindings: ['tabindex'],
    classNames: ['ko-dropdown-container'],
    classNameBindings: ['alignRight', 'isFocussed:focused'],

    onHideDropdown: observer('hideDropdown', function () {
      var hideDropdown = this.get('hideDropdown');
      if (hideDropdown) {
        this.send('onContentRequestClose');
      }
    }),

    focusOut: function focusOut(event) {
      var _this = this;

      // Ignore focusOut events that are focusing on another item which is a child of this one
      // Also ignore events where the button itself has been clicked on (event.relatedTarget === context.element)
      if (event.relatedTarget === null || !$['default'].contains(this.get('context.element'), event.relatedTarget) && this.get('context.element') !== event.relatedTarget) {
        run.next(function () {
          if (!_this.get('isDestroyed')) {
            _this.set('isFocussed', false);
            _this.sendAction('onFocusChanged', false);
            _this.sendAction('onFocusOut');
          }
        });
      }
    },

    focusIn: function focusIn() {
      this.set('isFocussed', true);
      this.sendAction('onFocusChanged', true);
      this.sendAction('onFocusIn');
    },

    actions: {
      onContentRequestClose: function onContentRequestClose() {
        this.$().blur();
        this.set('hideDropdown', false);
      },

      hide: function hide() {
        this.get('contentComponent').send('hide');
      }
    }
  });

});
define('frontend-cp/components/ko-dropdown/container/content/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    // hideOnChildFocus is useful because links become focussed when clicked so you can
    // hide the dropdown when someone clicks a link
    hideOnChildFocus: null,
    hideOnClick: null,
    // registerAs allows this component to be registered with its parent so the parent can call actions on it
    registerAs: null,

    role: 'menu',
    attributeBindings: ['role'],
    isFocussed: false,
    focussedObject: null,

    registerOnParent: Ember['default'].on('init', function () {
      this.set('registerAs', this);
    }),

    mouseUp: function mouseUp() {
      if (this.get('hideOnChildFocus') || this.get('hideOnClick')) {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else if (this.get('hideOnClick')) {
          this.sendAction('onClose');
        }
      }
    },

    focusOut: function focusOut() {
      this.set('focussedObject', null);
      this.set('isFocussed', false);
    },

    focusIn: function focusIn(event) {
      this.set('focussedObject', event.target);
      this.set('isFocussed', true);
    },

    actions: {
      hide: function hide() {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else {
          this.sendAction('onClose');
        }
      }
    }
  });

});
define('frontend-cp/components/ko-dropdown/container/content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/container/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",["button",["get","this",["loc",[null,[2,19],[2,23]]]]],[],["loc",[null,[2,2],[2,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","yield",["content",["get","this",["loc",[null,[7,22],[7,26]]]]],[],["loc",[null,[7,4],[7,28]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-dropdown/container/content",[],["registerAs",["subexpr","@mut",[["get","contentComponent",["loc",[null,[6,46],[6,62]]]]],[],[]],"hideOnChildFocus",["subexpr","@mut",[["get","hideOnChildFocus",["loc",[null,[6,80],[6,96]]]]],[],[]],"hideOnClick",["subexpr","@mut",[["get","hideOnClick",["loc",[null,[6,109],[6,120]]]]],[],[]],"onClose","onContentRequestClose"],0,null,["loc",[null,[6,2],[8,36]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container/button",[],[],0,null,["loc",[null,[1,0],[3,33]]]],
        ["block","if",[["get","isFocussed",["loc",[null,[5,6],[5,16]]]]],[],1,null,["loc",[null,[5,0],[9,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/drill-down/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    hideOnClick: false,

    hideDropdown: false,
    contentStyle: null,

    actions: {
      onSelect: function onSelect(value) {
        this.sendAction('onSelect', value);
        this.set('hideDropdown', true);
      }
    }
  });

});
define('frontend-cp/components/ko-dropdown/drill-down/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-dropdown/select/button",[],["label",["subexpr","@mut",[["get","label",["loc",[null,[3,38],[3,43]]]]],[],[]]],["loc",[null,[3,4],[3,45]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-option-list-drill-down",[],["options",["subexpr","@mut",[["get","options",["loc",[null,[7,14],[7,21]]]]],[],[]],"placeholder",["subexpr","@mut",[["get","placeholder",["loc",[null,[8,18],[8,29]]]]],[],[]],"showExpandedByDefault",true,"onValueChange","onSelect"],["loc",[null,[6,4],[11,6]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[5,12],[5,16]]]],"content"],[],["loc",[null,[5,8],[5,27]]]]],[],1,null,["loc",[null,[5,2],[12,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["hideOnClick",["subexpr","@mut",[["get","hideOnClick",["loc",[null,[1,37],[1,48]]]]],[],[]],"hideOnChildFocus",true,"hideDropdown",["subexpr","@mut",[["get","hideDropdown",["loc",[null,[1,84],[1,96]]]]],[],[]]],0,null,["loc",[null,[1,0],[13,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/list/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'ul',
    // Allow users of dropdown list to set style directly in template eg:
    // {{#ko-dropdown/list style="width: 1000px;"}}
    //    {{yield}}
    // {{/ko-dropdown/list}}
    attributeBindings: ['style'],

    classNames: ['ko-dropdown-list']
  });

});
define('frontend-cp/components/ko-dropdown/list/group/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-dropdown/list/group/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/group/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-dropdown-list_group__label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-dropdown-list_group__content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[1,43],[1,52]]]],
        ["content","yield",["loc",[null,[2,45],[2,54]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/list/hr/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-dropdown/list/hr/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/hr/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/select/button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    label: '',
    displayIcon: true
  });

});
define('frontend-cp/components/ko-dropdown/select/button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 83
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","ko-dropdown-select__icon i-select");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 90
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","label",["loc",[null,[1,0],[1,9]]]],
        ["block","if",[["get","displayIcon",["loc",[null,[1,15],[1,26]]]]],[],0,null,["loc",[null,[1,9],[1,90]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-dropdown/select/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    hideOnClick: true,

    contentStyle: null,

    actions: {
      onFocusIn: function onFocusIn() {
        this.sendAction('onFocusIn');
      },
      onFocusOut: function onFocusOut() {
        this.sendAction('onFocusOut');
      }
    }
  });

});
define('frontend-cp/components/ko-dropdown/select/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-dropdown/select/button",[],["label",["subexpr","@mut",[["get","label",["loc",[null,[3,38],[3,43]]]]],[],[]]],["loc",[null,[3,4],[3,45]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","yield",["loc",[null,[7,6],[7,15]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-dropdown-select__content","style",["subexpr","@mut",[["get","contentStyle",["loc",[null,[6,66],[6,78]]]]],[],[]]],0,null,["loc",[null,[6,4],[8,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[5,12],[5,16]]]],"content"],[],["loc",[null,[5,8],[5,27]]]]],[],1,null,["loc",[null,[5,2],[9,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["onFocusIn","onFocusIn","onFocusOut","onFocusOut","hideOnClick",["subexpr","@mut",[["get","hideOnClick",["loc",[null,[1,83],[1,94]]]]],[],[]],"hideOnChildFocus",true],0,null,["loc",[null,[1,0],[10,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-editable-text/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    onValueChange: null,
    placeholder: null,
    value: null,
    isErrored: false,
    isPusherEdited: false,

    classNameBindings: ['isErrored:error'],

    isEditing: false,
    isEdited: false,
    valueToSave: null,

    valueDidChange: Ember['default'].observer('value', function () {
      if (this.get('isEditing')) {
        return;
      }
      this.set('valueToSave', this.get('value'));
    }),

    displayText: Ember['default'].computed('value', 'placeholder', function () {
      return this.get('value') ? this.get('value') : this.get('placeholder');
    }),

    stopEditing: function stopEditing() {
      this.set('isEditing', false);

      if (this.get('onValueChange')) {
        this.sendAction('onValueChange', this.get('valueToSave'));
      } else {
        this.set('value', this.get('valueToSave'));
      }
    },

    actions: {
      edit: function edit() {
        this.startEditing();
      },

      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 13) {
          // ENTER
          this.stopEditing();
        }
      }
    },

    focusOut: function focusOut() {
      this.stopEditing();
    },

    startEditing: function startEditing() {
      var _this = this;

      this.set('isEditing', true);
      this.set('valueToSave', this.get('value'));
      Ember['default'].run.scheduleOnce('afterRender', this, function () {
        _this.$().find('.editable-text__input').focus();
      });
    }
  });

});
define('frontend-cp/components/ko-editable-text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editable-text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","i-pencil i-color-grey i-size-14 u-invisible");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2,"type","text");
        dom.setAttribute(el2,"class","editable-text__input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createElementMorph(element0);
        morphs[2] = dom.createMorphAt(element0,0,0);
        morphs[3] = dom.createAttrMorph(element1, 'class');
        morphs[4] = dom.createAttrMorph(element2, 'value');
        morphs[5] = dom.createAttrMorph(element2, 'oninput');
        morphs[6] = dom.createAttrMorph(element2, 'onkeydown');
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["editable-text__text ",["subexpr","if",[["get","isEditing",["loc",[null,[1,55],[1,64]]]],"u-hidden"],[],["loc",[null,[1,50],[1,77]]]]," ",["subexpr","if",[["get","isPusherEdited",["loc",[null,[1,83],[1,97]]]],"editable-text__text--pusher-edited"],[],["loc",[null,[1,78],[1,136]]]]," ",["subexpr","if",[["get","isEdited",["loc",[null,[1,143],[1,151]]]],"editable-text__text--edited"],[],["loc",[null,[1,137],[1,184]]]]]]],
        ["element","action",["edit"],[],["loc",[null,[1,5],[1,22]]]],
        ["content","displayText",["loc",[null,[1,186],[1,201]]]],
        ["attribute","class",["concat",[["subexpr","unless",[["get","isEditing",["loc",[null,[4,21],[4,30]]]],"u-hidden"],[],["loc",[null,[4,12],[4,43]]]]]]],
        ["attribute","value",["get","valueToSave",["loc",[null,[5,29],[5,40]]]]],
        ["attribute","oninput",["subexpr","action",[["subexpr","mut",[["get","valueToSave",["loc",[null,[5,65],[5,76]]]]],[],["loc",[null,[5,60],[5,77]]]]],["value","target.value"],["loc",[null,[5,51],[5,100]]]]],
        ["attribute","onkeydown",["subexpr","action",["handleKeyDown"],[],["loc",[null,[5,111],[5,137]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-editor-modal/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    title: null
  });

});
define('frontend-cp/components/ko-editor-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editor-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-editor-modal__overlay");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-editor-modal__modal u-h-center");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3,"class","ko-editor-modal__title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[5,39],[5,48]]]],
        ["content","yield",["loc",[null,[7,2],[7,11]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-feed/activity/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    activity: null,

    classNames: ['ko-feed_activity'],

    // body comes from events, plainTextSummary comes from activities
    summary: Ember['default'].computed('activity.body', 'activity.plainTextSummary', function () {
      return this.get('activity.body') || this.get('activity.plainTextSummary');
    }),

    register: Ember['default'].on('didInsertElement', function () {
      this.attrs.onRegister(this);
    }),

    teardown: Ember['default'].on('willDestroyElement', function () {
      this.attrs.onTeardown(this);
    })
  });

});
define('frontend-cp/components/ko-feed/activity/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/activity/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-feed_activity__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","ko-feed_activity__contents");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-feed_activity__summary");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" at ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
        morphs[1] = dom.createMorphAt(element0,3,3);
        morphs[2] = dom.createMorphAt(element0,5,5);
        return morphs;
      },
      statements: [
        ["content","summary",["loc",[null,[3,42],[3,53]]]],
        ["inline","format-relative",[["get","activity.createdAt",["loc",[null,[4,20],[4,38]]]]],[],["loc",[null,[4,2],[4,40]]]],
        ["inline","format-time",[["get","activity.createdAt",["loc",[null,[4,58],[4,76]]]]],["format","time"],["loc",[null,[4,44],[4,92]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-feed/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    events: null,
    top: 0,
    left: 0,
    onTopPostChange: function onTopPostChange() {},

    // State
    timeoutId: null,
    childItemsById: null,
    currentTopPostId: null,

    setupTopElementListener: Ember['default'].on('willInsertElement', function () {
      var _this = this;

      this.set('timeoutId', setTimeout(function () {
        Ember['default'].run(function () {
          var el = document.elementFromPoint(_this.get('left') + 40, _this.get('top'));
          var $item = $(el).closest('.ko-feed_item');
          if ($item.length > 0) {
            var id = $item.get(0).id;
            var item = _this.get('childItemsById')[id];
            var post = item.get('event');
            if (_this.get('currentTopPostId') !== post.get('id')) {
              _this.attrs.onTopPostChange(post.get('id'));
              _this.set('currentTopPostId', post.get('id'));
            }
          }
          _this.setupTopElementListener();
        });
      }, 300));
    }),

    teardownTopElementListener: Ember['default'].on('willDestroyElement', function () {
      clearTimeout(this.get('timeoutId'));
    }),

    setupChildItems: Ember['default'].on('init', function () {
      this.set('childItemsById', {});
    }),

    actions: {
      onReplyWithQuote: function onReplyWithQuote(quote) {
        this.sendAction('onReplyWithQuote', quote);
      },

      register: function register(item) {
        this.get('childItemsById')[item.get('elementId')] = item;
      },

      teardown: function teardown(item) {
        delete this.get('childItemsById')[item.get('event.id')];
        if (this.get('currentTopPostId') === item.get('event.id')) {
          this.set('currentTopPostId', null);
        }
      }
    }
  });

});
define('frontend-cp/components/ko-feed/item/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    event: null,
    sessionService: Ember['default'].inject.service('session'),

    classNames: ['ko-feed_item'],
    classNameBindings: ['isNote:ko-feed_item--note:ko-feed_item--post'],
    isNote: Ember['default'].computed.equal('event.original.postType', 'note'),

    showMenu: false,

    register: Ember['default'].on('willInsertElement', function () {
      this.attrs.onRegister(this);
    }),

    teardown: Ember['default'].on('willDestroyElement', function () {
      this.attrs.onTeardown(this);
    }),

    mouseEnter: function mouseEnter() {
      this.set('showMenu', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('showMenu', false);
    },

    sessionToken: Ember['default'].computed(function () {
      return '?_session_id=' + this.get('sessionService.sessionId');
    }),

    actions: {
      onReplyWithQuote: function onReplyWithQuote() {
        var quote = this.$('.ko-feed_item__content').text().trim();

        this.sendAction('onReplyWithQuote', quote);
      }
    }
  });

});
define('frontend-cp/components/ko-feed/item/menu/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    showMenu: false,
    classNameBindings: ['showMenu::u-hidden'],
    tagName: 'ul',
    classNames: ['list-inline'],

    actions: {
      replyWithQuote: function replyWithQuote() {
        this.sendAction('onReplyWithQuote');
      }
    }
  });

});
define('frontend-cp/components/ko-feed/item/menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","ko-feed-item_menu__item i-quote i-color-grey--dark");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [
        ["element","action",["replyWithQuote"],[],["loc",[null,[1,4],[1,31]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-feed/item/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("br");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-feed_item__attachment-name");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("a");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-feed_item__attachment-size");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createAttrMorph(element1, 'href');
            morphs[2] = dom.createMorphAt(element1,0,0);
            morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]),0,0);
            return morphs;
          },
          statements: [
            ["attribute","src",["concat",[["get","attachment.thumbnails.firstObject.url",["loc",[null,[11,16],[11,53]]]]]]],
            ["attribute","href",["concat",[["get","attachment.urlDownload",["loc",[null,[13,17],[13,39]]]],["get","sessionToken",["loc",[null,[13,43],[13,55]]]]]]],
            ["content","attachment.name",["loc",[null,[13,59],[13,78]]]],
            ["inline","ko-file-size",[],["size",["subexpr","@mut",[["get","attachment.size",["loc",[null,[15,67],[15,82]]]]],[],[]]],["loc",[null,[15,47],[15,84]]]]
          ],
          locals: ["attachment"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","event.attachments",["loc",[null,[10,10],[10,27]]]]],[],0,null,["loc",[null,[10,2],[16,11]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 75
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-feed_item__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-feed_item__image");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-feed_item__title");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-feed_item__title--small");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-feed_item__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [4]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[1] = dom.createMorphAt(element2,0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [2]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [6]),1,1);
        morphs[4] = dom.createMorphAt(fragment,8,8,contextualElement);
        morphs[5] = dom.createMorphAt(fragment,9,9,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-avatar",[],["avatar",["subexpr","@mut",[["get","event.creator.avatar",["loc",[null,[2,52],[2,72]]]]],[],[]],"size","large"],["loc",[null,[2,33],[2,87]]]],
        ["content","event.creator.fullName",["loc",[null,[3,33],[3,59]]]],
        ["inline","format-message",[["subexpr","intl-get",["feed.replied"],[],["loc",[null,[4,59],[4,84]]]]],["ago",["subexpr","moment-from-now",[["get","event.createdAt",["loc",[null,[4,106],[4,121]]]]],[],["loc",[null,[4,89],[4,122]]]]],["loc",[null,[4,42],[4,124]]]],
        ["inline","ko-breaklines",[["get","event.contents",["loc",[null,[7,18],[7,32]]]]],[],["loc",[null,[7,2],[7,34]]]],
        ["block","if",[["get","event.attachments",["loc",[null,[9,6],[9,23]]]]],[],0,null,["loc",[null,[9,0],[17,7]]]],
        ["inline","ko-feed/item/menu",[],["showMenu",["subexpr","@mut",[["get","showMenu",["loc",[null,[18,29],[18,37]]]]],[],[]],"onReplyWithQuote","onReplyWithQuote"],["loc",[null,[18,0],[18,75]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-feed/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-feed/item",[],["event",["subexpr","@mut",[["get","event",["loc",[null,[4,12],[4,17]]]]],[],[]],"onReplyWithQuote","onReplyWithQuote","onRegister",["subexpr","action",["register"],[],["loc",[null,[6,17],[6,36]]]],"onTeardown",["subexpr","action",["teardown"],[],["loc",[null,[7,17],[7,36]]]]],["loc",[null,[3,4],[7,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-feed/activity",[],["activity",["subexpr","@mut",[["get","event",["loc",[null,[11,15],[11,20]]]]],[],[]],"onRegister",["subexpr","action",["register"],[],["loc",[null,[12,17],[12,36]]]],"onTeardown",["subexpr","action",["teardown"],[],["loc",[null,[13,17],[13,36]]]]],["loc",[null,[10,4],[13,38]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","event.constructor.typeKey",["loc",[null,[2,12],[2,37]]]],"post"],[],["loc",[null,[2,8],[2,45]]]]],[],0,null,["loc",[null,[2,2],[8,9]]]],
          ["block","if",[["subexpr","or",[["subexpr","eq",[["get","event.constructor.typeKey",["loc",[null,[9,16],[9,41]]]],"activity"],[],["loc",[null,[9,12],[9,53]]]],["subexpr","eq",[["get","event.constructor.typeKey",["loc",[null,[9,58],[9,83]]]],"event"],[],["loc",[null,[9,54],[9,92]]]]],[],["loc",[null,[9,8],[9,93]]]]],[],1,null,["loc",[null,[9,2],[14,9]]]]
        ],
        locals: ["event"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","events",["loc",[null,[1,8],[1,14]]]]],[],0,null,["loc",[null,[1,0],[15,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-feedback/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['info-bar-item', 'u-no-bottom-border']
  });

});
define('frontend-cp/components/ko-feedback/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","ko-feedback__metric t-good i-happy-outline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","ko-feedback__metric t-bad i-sad-outline");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout__item u-1/3");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-feedback__caption");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0,1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","feedbackItem.score",["loc",[null,[5,12],[5,30]]]],"GOOD"],[],["loc",[null,[5,8],[5,38]]]]],[],0,1,["loc",[null,[5,2],[9,9]]]],
          ["inline","ago",[["get","feedbackItem.createdAt",["loc",[null,[10,42],[10,64]]]]],[],["loc",[null,[10,36],[10,66]]]]
        ],
        locals: ["feedbackItem"],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["users.no_feedback_available"],[],["loc",[null,[15,19],[15,59]]]]],[],["loc",[null,[15,2],[15,61]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,31],[1,40]]]],
        ["block","each",[["get","feedback",["loc",[null,[4,8],[4,16]]]]],[],0,null,["loc",[null,[4,0],[11,17]]]],
        ["block","if",[["subexpr","not",[["get","feedback.length",["loc",[null,[14,11],[14,26]]]]],[],["loc",[null,[14,6],[14,27]]]]],[],1,null,["loc",[null,[14,0],[16,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-field/checkbox/component', ['exports', 'ember', 'npm:lodash'], function (exports, Ember, _) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    options: null,
    isErrored: false,
    isEdited: false,
    value: [],
    onValueChange: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error'],

    isChecked: function isChecked(value, id) {
      return _['default'].contains(value, id.toString());
    },

    actions: {
      valueChanged: function valueChanged(id, checked) {
        var value = _['default'].clone(this.get('value'));
        if (checked) {
          value.push(id.toString());
        } else {
          value.splice(value.indexOf(id.toString()), 1);
        }
        value.sort();
        this.sendAction('onValueChange', value);
      }
    }
  });

});
define('frontend-cp/components/ko-field/checkbox/single/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    checked: false,
    label: '',
    optionId: '',
    onValueChange: null,

    actions: {
      valueChanged: function valueChanged(value) {
        this.sendAction('onValueChange', this.get('optionId'), value);
      }
    }
  });

});
define('frontend-cp/components/ko-field/checkbox/single/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 66
          }
        },
        "moduleName": "frontend-cp/components/ko-field/checkbox/single/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-checkbox",[],["checked",["subexpr","@mut",[["get","checked",["loc",[null,[1,22],[1,29]]]]],[],[]],"label",["subexpr","@mut",[["get","label",["loc",[null,[1,36],[1,41]]]]],[],[]],"onCheck","valueChanged"],["loc",[null,[1,0],[1,66]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-field/checkbox/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-field/checkbox/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-field/checkbox/single",[],["checked",["subexpr","ko-helper",[["get","isChecked",["loc",[null,[3,48],[3,57]]]],["get","value",["loc",[null,[3,58],[3,63]]]],["get","option.id",["loc",[null,[3,64],[3,73]]]]],[],["loc",[null,[3,37],[3,74]]]],"label",["subexpr","@mut",[["get","option.value",["loc",[null,[3,81],[3,93]]]]],[],[]],"onValueChange","valueChanged","optionId",["subexpr","@mut",[["get","option.id",["loc",[null,[3,132],[3,141]]]]],[],[]]],["loc",[null,[3,2],[3,143]]]]
        ],
        locals: ["option"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-field/checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["block","each",[["get","options",["loc",[null,[2,8],[2,15]]]]],[],0,null,["loc",[null,[2,0],[4,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-field/date/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    value: null,
    onValueChange: null,

    tagName: 'li',
    attributeBindings: ['tabindex', 'role'],
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error'],
    tabindex: 0,
    isShowingCalendar: false,
    isMouseAccess: false,

    role: 'menuitem',

    click: function click() {
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn() {
      var mouseAccess = this.get('isMouseAccess');
      if (!mouseAccess) {
        this.set('isShowingCalendar', true);
      }
    },

    focusOut: function focusOut() {
      this.set('isMouseAccess', false);
      this.set('isShowingCalendar', false);
    },

    actions: {

      hide: function hide() {
        this.set('isShowingCalendar', false);
      },

      dateChange: function dateChange(date) {
        this.sendAction('onValueChange', date);
        this.send('hide');
      }
    }
  });

});
define('frontend-cp/components/ko-field/date/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-field/date/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-date",[["get","value",["loc",[null,[4,18],[4,23]]]]],["format","full"],["loc",[null,[4,4],[4,39]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-field/date/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"class","dropdown i-select");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"role","menu");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        morphs[2] = dom.createAttrMorph(element0, 'class');
        morphs[3] = dom.createMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["block","if",[["get","value",["loc",[null,[3,8],[3,13]]]]],[],0,null,["loc",[null,[3,2],[5,9]]]],
        ["attribute","class",["concat",["dropdown-menu ",["subexpr","if",[["get","isShowingCalendar",["loc",[null,[7,31],[7,48]]]],"","u-hidden"],[],["loc",[null,[7,26],[7,64]]]]]]],
        ["inline","ko-datepicker",[],["date",["subexpr","@mut",[["get","value",["loc",[null,[8,23],[8,28]]]]],[],[]],"on-date-change","dateChange","close","hide"],["loc",[null,[8,2],[8,71]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-field/drill-down/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    title: null,
    options: new Ember['default'].A([]),
    value: null,
    isEdited: false,
    isErrored: false,
    onValueChange: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error'],

    actions: {
      onComponentValueChange: function onComponentValueChange(value) {
        this.sendAction('onValueChange', value);
      }
    }
  });

});
define('frontend-cp/components/ko-field/drill-down/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-field/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-option-list-drill-down",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"options",["subexpr","@mut",[["get","options",["loc",[null,[3,10],[3,17]]]]],[],[]],"value",["subexpr","@mut",[["get","value",["loc",[null,[4,8],[4,13]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[5,11],[5,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[6,12],[6,21]]]]],[],[]],"onValueChange","onComponentValueChange"],["loc",[null,[1,0],[8,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-field/file/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    value: '',
    onValueChange: null,
    editable: true,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error'],

    actions: {
      fileUpdated: function fileUpdated(value) {
        this.sendAction('onValueChange', value);
      }
    }
  });

});
define('frontend-cp/components/ko-field/file/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-field/file/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["inline","ko-file-field",[],["value",["subexpr","@mut",[["get","value",["loc",[null,[3,24],[3,29]]]]],[],[]],"on-change","fileUpdated","disabled",["subexpr","not",[["get","editable",["loc",[null,[3,68],[3,76]]]]],[],["loc",[null,[3,63],[3,77]]]]],["loc",[null,[3,2],[3,79]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-field/select/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    options: [],
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    value: null,
    onValueChange: null,
    idPath: null,
    labelPath: null,

    tagName: 'li',
    attributeBindings: ['tabindex', 'role'],
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error'],
    tabindex: 0,
    showDropdown: false,
    isMouseAccess: false,
    keyboardPosition: 0,

    role: 'menuitem',

    selectedItem: Ember['default'].computed('options', 'value', 'idPath', function () {
      var _this = this;

      var currentValue = this.get('value');
      var options = this.get('options');
      if (!options) {
        return null;
      }
      return options.reduce(function (acc, value) {
        var id = _this.get('idPath') ? Ember['default'].get(value, _this.get('idPath')) : value;
        return acc || (id === currentValue ? value : acc);
      }, null);
    }),

    moveSelectedItem: function moveSelectedItem(direction) {
      var options = this.get('options');
      var keyboardPosition = this.get('keyboardPosition');
      switch (direction) {
        case 'down':
          {
            keyboardPosition = keyboardPosition + 1;
            if (keyboardPosition <= Ember['default'].get(options, 'length')) {
              this.$('ul li:nth-child(' + keyboardPosition + ')').focus();
              this.set('keyboardPosition', keyboardPosition);
            }
            break;
          }
        case 'up':
          {
            keyboardPosition = keyboardPosition - 1;
            if (keyboardPosition > 0) {
              this.$('ul li:nth-child(' + keyboardPosition + ')').focus();
              this.set('keyboardPosition', keyboardPosition);
            }
            break;
          }
      }
    },

    click: function click() {
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn() {
      var mouseAccess = this.get('isMouseAccess');
      if (!mouseAccess) {
        this.set('showDropdown', true);
      }
    },

    focusOut: function focusOut() {
      this.set('isMouseAccess', false);
      this.set('keyboardPosition', 0);
      this.set('showDropdown', false);
    },

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case KeyCodes.up:
          {
            this.moveSelectedItem('up');
            return false;
          }
        case KeyCodes.down:
          {
            this.set('showDropdown', true);
            this.moveSelectedItem('down');
            return false;
          }
        case KeyCodes.tab:
          {
            this.set('showDropdown', false);
            break;
          }
        case KeyCodes.enter:
          {
            var keyboardPosition = this.get('keyboardPosition');
            this.$('ul li:nth-child(' + keyboardPosition + ')').click();
            this.set('showDropdown', false);
            this.set('keyboardPosition', 0);
            return false;
          }
      }
    },

    actions: {
      selectItem: function selectItem(selection) {
        this.set('showDropdown', false);
        this.sendAction('onValueChange', selection);
      }
    }
  });

});
define('frontend-cp/components/ko-field/select/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-field/select/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"tabindex","-1");
          dom.setAttribute(el1,"role","menuitemradio");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1,1,1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["dropdown-menu__item ",["subexpr","if",[["subexpr","not",[["get","selectedItem",["loc",[null,[7,45],[7,57]]]]],[],["loc",[null,[7,40],[7,58]]]],"u-hidden"],[],["loc",[null,[7,35],[7,71]]]]]]],
          ["element","action",["selectItem",null],[],["loc",[null,[7,73],[7,101]]]],
          ["content","nullOptionLabel",["loc",[null,[8,6],[8,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-field/select/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","dropdown-menu__item");
          dom.setAttribute(el1,"tabindex","-1");
          dom.setAttribute(el1,"role","menuitemradio");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0,1,1);
          return morphs;
        },
        statements: [
          ["element","action",["selectItem",["subexpr","if",[["get","idPath",["loc",[null,[14,60],[14,66]]]],["subexpr","get",[["get","item",["loc",[null,[14,72],[14,76]]]],["get","idPath",["loc",[null,[14,77],[14,83]]]]],[],["loc",[null,[14,67],[14,84]]]],["get","item",["loc",[null,[14,85],[14,89]]]]],[],["loc",[null,[14,56],[14,90]]]]],[],["loc",[null,[14,34],[14,92]]]],
          ["inline","if",[["get","labelPath",["loc",[null,[15,9],[15,18]]]],["subexpr","get",[["get","item",["loc",[null,[15,24],[15,28]]]],["get","labelPath",["loc",[null,[15,29],[15,38]]]]],[],["loc",[null,[15,19],[15,39]]]],["get","item",["loc",[null,[15,40],[15,44]]]]],[],["loc",[null,[15,4],[15,46]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 5
          }
        },
        "moduleName": "frontend-cp/components/ko-field/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("a");
        dom.setAttribute(el1,"class","dropdown i-select");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"role","menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [4]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(element2,1,1);
        morphs[4] = dom.createMorphAt(element2,3,3);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["inline","if",[["get","labelPath",["loc",[null,[3,7],[3,16]]]],["subexpr","get",[["get","selectedItem",["loc",[null,[3,22],[3,34]]]],["get","labelPath",["loc",[null,[3,35],[3,44]]]]],[],["loc",[null,[3,17],[3,45]]]],["get","selectedItem",["loc",[null,[3,46],[3,58]]]]],[],["loc",[null,[3,2],[3,60]]]],
        ["attribute","class",["concat",["dropdown-menu ",["subexpr","if",[["get","showDropdown",["loc",[null,[5,30],[5,42]]]],"","u-hidden"],[],["loc",[null,[5,25],[5,58]]]]]]],
        ["block","if",[["get","nullOptionLabel",["loc",[null,[6,8],[6,23]]]]],[],0,null,["loc",[null,[6,2],[10,9]]]],
        ["block","each",[["get","options",["loc",[null,[13,8],[13,15]]]]],[],1,null,["loc",[null,[13,0],[17,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-field/tags/component', ['exports', 'ember', 'frontend-cp/components/mixins/suggestions', 'frontend-cp/components/mixins/drop-down-keyboard-nav', 'frontend-cp/lib/keycodes'], function (exports, Ember, Suggestions, DropDownKeyboardNav, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(Suggestions['default'], DropDownKeyboardNav['default'], {
    suggestionQueryDebounce: 150,

    // Params
    selectedTags: new Ember['default'].A([]),
    tags: new Ember['default'].A([]),
    errorTags: new Ember['default'].A([]),
    forceLowerCase: true,
    isNewTagAllowed: true,

    onTagSuggestion: null,
    onTagAddition: null,
    onTagRemoval: null,

    classNameBindings: ['showDropdown:active'],
    attributeBindings: ['tabindex', 'role'],
    inputTabindex: 0,
    role: 'menuitem',
    title: 'Tags',
    searchTerm: '',
    suggestedTags: new Ember['default'].A([]),
    isMouseAccess: false,
    showDropdown: false,
    dropdownKeyboardPosition: 0,
    selectedTagsKeyboardPosition: 0,
    isValidQuery: Ember['default'].computed.notEmpty('searchTerm'),
    isNotSuggested: Ember['default'].computed.not('isSuggested'),
    isNotSelected: Ember['default'].computed.not('isSelected'),
    isCreateAllowed: Ember['default'].computed.and('isNotSuggested', 'isNotSelected', 'isValidQuery', 'isNewTagAllowed'),

    resetSuggestedTagKeyboardPosition: function resetSuggestedTagKeyboardPosition() {
      var selectedTags = this.get('selectedTags');
      this.set('selectedTagsKeyboardPosition', selectedTags.length + 1);
    },

    statusTags: Ember['default'].computed('selectedTags.[]', 'errorTags.[]', function () {
      var statusTags = [];
      var tags = this.get('selectedTags') || [];
      var errors = this.get('errorTags') || [];

      tags.forEach(function (title) {
        if (errors.indexOf(title) > -1) {
          statusTags.push({ title: title, isError: true });
        } else {
          statusTags.push({ title: title, isError: false });
        }
      });

      return statusTags;
    }),

    isSuggested: Ember['default'].computed('searchTerm', 'suggestedTags', function () {
      var searchTerm = this.get('searchTerm');
      var suggestedTags = this.get('suggestedTags');
      return suggestedTags.contains(searchTerm);
    }),

    isSelected: Ember['default'].computed('searchTerm', 'selectedTags', function () {
      var searchTerm = this.get('searchTerm');
      var selectedTags = this.get('selectedTags');
      return selectedTags.contains(searchTerm);
    }),

    onSearchTermChange: Ember['default'].observer('searchTerm', function () {
      this.resetSuggestedTagKeyboardPosition();
    }),

    didReceiveAttrs: function didReceiveAttrs() {
      this.set('suggestedTags', this.get('tags'));
      this.resetSuggestedTagKeyboardPosition();
    },

    click: function click() {
      this.updateSuggestions();
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn(e) {
      this.set('lastTagText', this.$(e.target).find('span:first').text());
      var mouseAccess = this.get('isMouseAccess');
      if (!mouseAccess) {
        this.set('showDropdown', true);
      }
    },

    focusOut: function focusOut() {
      this.set('isMouseAccess', false);
      this.set('dropdownKeyboardPosition', 0);
      this.set('showDropdown', false);
    },

    keyDown: function keyDown(e) {
      var searchTerm = this.get('searchTerm');
      var dropdownKeyboardPosition = this.get('dropdownKeyboardPosition');
      var selectedTags = this.get('selectedTags');
      var suggestedTags = this.get('suggestedTags');
      var selectedTagsSelector = 'ul:nth-child(2)';
      var suggestionsListSelector = 'ul:nth-child(3)';

      switch (e.keyCode) {
        case KeyCodes.up:
          {
            this.resetSuggestedTagKeyboardPosition();
            this.moveSelectedItem(suggestedTags.length + 1, suggestionsListSelector, 'up', 'dropdownKeyboardPosition');
            return false;
          }
        case KeyCodes.down:
          {
            this.resetSuggestedTagKeyboardPosition();
            this.set('showDropdown', true);
            this.moveSelectedItem(suggestedTags.length + 1, suggestionsListSelector, 'down', 'dropdownKeyboardPosition');
            return false;
          }
        case KeyCodes.left:
          {
            this.moveSelectedItem(selectedTags.length, selectedTagsSelector, 'up', 'selectedTagsKeyboardPosition');
            return false;
          }
        case KeyCodes.right:
          {
            this.moveSelectedItem(selectedTags.length, selectedTagsSelector, 'down', 'selectedTagsKeyboardPosition');
            return false;
          }
        case KeyCodes.tab:
          {
            this.set('showDropdown', false);
            break;
          }
        case KeyCodes.space:
          {
            if (dropdownKeyboardPosition === 0) {
              this.send('addTag', searchTerm);
            }
            return false;
          }
        case KeyCodes.enter:
          {
            if (dropdownKeyboardPosition === 0) {
              this.send('addTag', searchTerm);
              return false;
            } else {
              dropdownKeyboardPosition = this.get('dropdownKeyboardPosition');
              this.$('ul:nth-child(3) li:nth-child(' + dropdownKeyboardPosition + ')').click();
              this.$('input').focus();
              this.set('showDropdown', false);
              this.set('dropdownKeyboardPosition', 0);
              return false;
            }
            break;
          }
        case KeyCodes.backspace:
          {
            var tag = this.get('lastTagText');
            if (tag !== '') {
              this.send('removeTag', tag);
              this.$().focus();
              return false;
            } else {
              this.$('input').focus();
            }
            break;
          }
        default:
          {
            this.$('input').focus();
          }
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode !== KeyCodes.up && e.keyCode !== KeyCodes.down && e.keyCode !== KeyCodes.enter && e.keyCode !== KeyCodes.tab) {
        this.updateSuggestions();
        this.set('showDropdown', true);
      }
    },

    updateSuggestions: function updateSuggestions() {
      var _this = this;

      this.debounceSuggestedTags(this, function () {
        _this.send('suggestTags', _this.get('searchTerm'), _this.get('selectedTags'));
      });
    },

    debounceSuggestedTags: function debounceSuggestedTags(scope, callback) {
      Ember['default'].run.debounce(scope, callback, this.get('suggestionQueryDebounce'));
    },

    actions: {
      removeTag: function removeTag(tag) {
        this.sendAction('onTagRemoval', tag);
        return false;
      },

      suggestTags: function suggestTags(searchTerm, selectedTags) {
        this.sendAction('onTagSuggestion', searchTerm, selectedTags);
      },

      addTag: function addTag(tagTitle) {
        var tag = tagTitle;
        if (this.get('forceLowerCase')) {
          tag = tagTitle.toLowerCase();
        }
        this.set('searchTerm', '');
        this.set('showDropdown', false);
        if (!this.get('selectedTags').includes(tag)) {
          this.sendAction('onTagAddition', tag);
          this.updateSuggestions();
        }
        this.resetSuggestedTagKeyboardPosition();
      }
    }
  });

});
define('frontend-cp/components/ko-field/tags/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-field/tags/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"tabindex","-1");
          dom.setAttribute(el1,"role","menuitem");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","ko-field_tag__action i-cross");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
          morphs[2] = dom.createElementMorph(element4);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-field_tags__item ",["subexpr","if",[["get","tag.isError",["loc",[null,[3,38],[3,49]]]],"ko-field_tags__item--error"],[],["loc",[null,[3,33],[3,80]]]]]]],
          ["content","tag.title",["loc",[null,[4,10],[4,23]]]],
          ["element","action",["removeTag",["get","tag.title",["loc",[null,[5,31],[5,40]]]]],["bubbles",false],["loc",[null,[5,10],[5,56]]]]
        ],
        locals: ["tag"],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-field/tags/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","dropdown-menu__item");
            dom.setAttribute(el1,"tabindex","-1");
            dom.setAttribute(el1,"role","menuitem");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1,0,0);
            return morphs;
          },
          statements: [
            ["element","action",["addTag",["get","tag",["loc",[null,[14,54],[14,57]]]]],[],["loc",[null,[14,36],[14,59]]]],
            ["content","tag",["loc",[null,[14,88],[14,95]]]]
          ],
          locals: ["tag"],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-field/tags/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-field_tag__new dropdown-menu__item");
            dom.setAttribute(el1,"tabindex","-1");
            dom.setAttribute(el1,"role","menuItem");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","ko-field_tag-new__label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0,0,0);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
            return morphs;
          },
          statements: [
            ["element","action",["addTag",["get","searchTerm",["loc",[null,[17,84],[17,94]]]]],[],["loc",[null,[17,66],[17,96]]]],
            ["content","searchTerm",["loc",[null,[17,113],[17,127]]]],
            ["content","newTagText",["loc",[null,[17,165],[17,179]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-field/tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1,"role","menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createMorphAt(element2,1,1);
          morphs[2] = dom.createMorphAt(element2,2,2);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["dropdown-menu ",["subexpr","unless",[["get","showDropdown",["loc",[null,[12,36],[12,48]]]],"u-hidden"],[],["loc",[null,[12,27],[12,61]]]]," list-bare"]]],
          ["block","each",[["get","suggestedTags",["loc",[null,[13,10],[13,23]]]]],[],0,null,["loc",[null,[13,2],[15,11]]]],
          ["block","if",[["get","isCreateAllowed",["loc",[null,[16,8],[16,23]]]]],[],1,null,["loc",[null,[16,2],[18,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-field/tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","ko-field_tags");
        dom.setAttribute(el1,"role","menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element5,1,1);
        morphs[1] = dom.createMorphAt(element5,3,3);
        morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","statusTags",["loc",[null,[2,8],[2,18]]]]],[],0,null,["loc",[null,[2,0],[7,9]]]],
        ["inline","input",[],["class","ko-field_tags__input js-tag-input","placeholder",["subexpr","@mut",[["get","addTagText",["loc",[null,[8,64],[8,74]]]]],[],[]],"value",["subexpr","@mut",[["get","searchTerm",["loc",[null,[8,81],[8,91]]]]],[],[]],"tabindex",["subexpr","@mut",[["get","inputTabindex",["loc",[null,[8,101],[8,114]]]]],[],[]],"role","textbox"],["loc",[null,[8,2],[8,131]]]],
        ["block","if",[["get","onTagSuggestion",["loc",[null,[11,6],[11,21]]]]],[],1,null,["loc",[null,[11,0],[20,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-field/text/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    value: '',
    onValueChange: null,
    editable: true,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isPusherEdited:info-bar-item--pusher-edited', 'isErrored:info-bar-item--error'],

    keyPress: function keyPress(e) {
      switch (e.keyCode) {
        case KeyCodes.enter:
          {
            this.$('input').focusout();
            break;
          }
        default:
          {
            return true;
          }
      }
    },

    actions: {
      textUpdated: function textUpdated(value) {
        this.sendAction('onValueChange', value);
      }
    }
  });

});
define('frontend-cp/components/ko-field/text/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-field/text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["inline","input",[],["class","ko-field-text__input","value",["subexpr","@mut",[["get","value",["loc",[null,[3,45],[3,50]]]]],[],[]],"focus-out","textUpdated","disabled",["subexpr","not",[["get","editable",["loc",[null,[3,89],[3,97]]]]],[],["loc",[null,[3,84],[3,98]]]]],["loc",[null,[3,2],[3,100]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-field/text-area/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    value: '',
    onValueChange: null,

    tagName: 'li',
    classNames: ['info-bar-item'],
    classNameBindings: ['isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error'],

    focusOut: function focusOut() {
      var value = this.$('textarea').val();

      this.$('textarea').scrollTop(0);
      this.sendAction('onValueChange', value);
    }
  });

});
define('frontend-cp/components/ko-field/text-area/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-field/text-area/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("textarea");
        dom.setAttribute(el2,"class","ko-field-text__textarea");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createAttrMorph(element0, 'value');
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["attribute","value",["concat",[["get","value",["loc",[null,[3,53],[3,58]]]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-file-field/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'input',
    attributeBindings: ['type', 'multiple'],
    type: 'file',
    multiple: true,
    change: function change() {
      var files = this.element.files;
      this.sendAction('on-change', files);
      this.element.value = null;
    }
  });

});
define('frontend-cp/components/ko-file-field/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-file-size/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'span',
    size: null,

    options: Ember['default'].computed('size', function () {
      var size = this.size;
      var options = undefined;
      if (size > 1000 * 1000) {
        options = {
          size: size / 1000 / 1000,
          unit: 'mb'
        };
      } else {
        options = {
          size: size / 1000,
          unit: 'kb'
        };
      }
      return options;
    })
  });

});
define('frontend-cp/components/ko-file-size/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 84
          }
        },
        "moduleName": "frontend-cp/components/ko-file-size/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.filesize"],[],["loc",[null,[1,17],[1,46]]]]],["size",["subexpr","@mut",[["get","options.size",["loc",[null,[1,52],[1,64]]]]],[],[]],"unit",["subexpr","@mut",[["get","options.unit",["loc",[null,[1,70],[1,82]]]]],[],[]]],["loc",[null,[1,0],[1,84]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-file-upload/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    uploadService: Ember['default'].inject.service('fileUpload'),
    uploads: null,

    classNameBindings: ['empty:u-hidden'],
    empty: Ember['default'].computed.empty('uploads'),

    initUploader: Ember['default'].on('init', function () {
      this.clear();
    }),

    clear: function clear() {
      this.set('uploads', []);
    },

    uploadFile: function uploadFile(file) {
      var upload = this.get('uploadService').uploadFile(file);
      this.get('uploads').pushObject(upload);
    },

    actions: {
      uploadFiles: function uploadFiles(files) {
        var _this = this;

        files.forEach(function (file) {
          return _this.uploadFile(file);
        });
      },
      onCancel: function onCancel(upload) {
        this.set('uploads', this.get('uploads').filter(function (u) {
          return u.get('status') !== 'CANCELLED';
        }));
      }
    }
  });

});
define('frontend-cp/components/ko-file-upload/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-file-upload/upload-item",[],["upload",["subexpr","@mut",[["get","upload",["loc",[null,[4,42],[4,48]]]]],[],[]],"onCancel","onCancel"],["loc",[null,[4,6],[4,70]]]]
        ],
        locals: ["upload"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("output");
        dom.setAttribute(el1,"class","files-list");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2,"class","list-bare");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","uploads",["loc",[null,[3,12],[3,19]]]]],[],0,null,["loc",[null,[3,4],[5,13]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-file-upload/upload-item/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    sessionService: Ember['default'].inject.service('session'),
    tagName: 'li',
    classNames: ['upload-item'],
    classNameBindings: ['success', 'inProgress', 'error', 'cancelled:u-hidden'],
    upload: null,

    inProgress: Ember['default'].computed.equal('upload.status', 'PROGRESS'),
    success: Ember['default'].computed.equal('upload.status', 'SUCCESS'),
    cancelled: Ember['default'].computed.equal('upload.status', 'CANCELLED'),
    error: Ember['default'].computed.equal('upload.status', 'ERROR'),

    uploadProgress: Ember['default'].computed('upload.progress', function () {
      return Math.round(this.get('upload.progress'));
    }),

    uploadUrl: Ember['default'].computed('upload.contentUrl', function () {
      return this.get('upload.contentUrl') + '?_session_id=' + this.get('sessionService.sessionId');
    }),

    actions: {
      cancel: function cancel() {
        this.get('upload').cancel();
        this.sendAction('onCancel', this.get('upload'));
      }
    }
  });

});
define('frontend-cp/components/ko-file-upload/upload-item/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["content","upload.name",["loc",[null,[4,5],[4,20]]]],
            ["inline","format-message",[["subexpr","intl-get",["generic.uploads.toolarge"],[],["loc",[null,[5,22],[5,59]]]]],[],["loc",[null,[5,5],[5,61]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n     ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            return morphs;
          },
          statements: [
            ["content","upload.name",["loc",[null,[8,5],[8,20]]]],
            ["inline","format-message",[["subexpr","intl-get",["generic.uploads.unknown"],[],["loc",[null,[9,22],[9,58]]]]],[],["loc",[null,[9,5],[9,60]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element3,1,1);
          morphs[1] = dom.createMorphAt(element3,2,2);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","upload.error",["loc",[null,[3,12],[3,24]]]],"TOO_LARGE"],[],["loc",[null,[3,8],[3,37]]]]],[],0,null,["loc",[null,[3,2],[6,9]]]],
          ["block","if",[["subexpr","eq",[["get","upload.error",["loc",[null,[7,12],[7,24]]]],"UNKNOWN"],[],["loc",[null,[7,8],[7,35]]]]],[],1,null,["loc",[null,[7,2],[10,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","upload-item__name upload-item__name--is-progressing");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","t-good");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),0,0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
          return morphs;
        },
        statements: [
          ["element","action",["cancel"],[],["loc",[null,[15,49],[15,68]]]],
          ["content","upload.name",["loc",[null,[16,68],[16,83]]]],
          ["content","uploadProgress",["loc",[null,[17,23],[17,41]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"class","upload-item__name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","upload-item__size");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createMorphAt(element1,0,0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]),0,0);
          return morphs;
        },
        statements: [
          ["element","action",["cancel"],[],["loc",[null,[21,49],[21,68]]]],
          ["attribute","href",["concat",[["get","uploadUrl",["loc",[null,[22,39],[22,48]]]]]]],
          ["content","upload.name",["loc",[null,[22,52],[22,67]]]],
          ["inline","ko-file-size",[],["size",["subexpr","@mut",[["get","upload.size",["loc",[null,[23,54],[23,65]]]]],[],[]]],["loc",[null,[23,34],[23,67]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["subexpr","eq",[["get","upload.status",["loc",[null,[1,10],[1,23]]]],"ERROR"],[],["loc",[null,[1,6],[1,32]]]]],[],0,null,["loc",[null,[1,0],[12,7]]]],
        ["block","if",[["subexpr","eq",[["get","upload.status",["loc",[null,[14,10],[14,23]]]],"PROGRESS"],[],["loc",[null,[14,6],[14,35]]]]],[],1,null,["loc",[null,[14,0],[18,7]]]],
        ["block","if",[["subexpr","eq",[["get","upload.status",["loc",[null,[20,10],[20,23]]]],"SUCCESS"],[],["loc",[null,[20,6],[20,34]]]]],[],2,null,["loc",[null,[20,0],[24,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-form/buttons/component', ['exports', 'ember', 'frontend-cp/components/ko-form/component'], function (exports, Ember, KoForm) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    submitLabel: null,
    cancelLabel: null,
    onCancel: null,
    onSubmit: null,

    koForm: Ember['default'].computed(function () {
      return this.nearestOfType(KoForm['default']);
    }),

    isSubmitting: Ember['default'].computed.oneWay('koForm.isSubmitting'),
    isSubmitDisabled: Ember['default'].computed.oneWay('koForm.isSubmitDisabled')
  });

});
define('frontend-cp/components/ko-form/buttons/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["class","ko-form_buttons__loader"],["loc",[null,[4,6],[4,51]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"type","button");
            dom.setAttribute(el1,"class","button t-small");
            dom.setAttribute(el1,"name","cancel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'onclick');
            morphs[1] = dom.createMorphAt(element1,0,0);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["get","onCancel",["loc",[null,[7,77],[7,85]]]]],
            ["content","cancelLabel",["loc",[null,[7,88],[7,103]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","onCancel",["loc",[null,[6,12],[6,20]]]]],[],0,null,["loc",[null,[6,6],[8,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","button button--primary");
          dom.setAttribute(el1,"name","submit");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'type');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createAttrMorph(element0, 'disabled');
          morphs[3] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","type",["subexpr","if",[["get","onSubmit",["loc",[null,[11,24],[11,32]]]],"button","submit"],[],["loc",[null,[11,19],[11,52]]]]],
          ["attribute","onclick",["get","onSubmit",["loc",[null,[11,108],[11,116]]]]],
          ["attribute","disabled",["get","isSubmitDisabled",["loc",[null,[11,130],[11,146]]]]],
          ["content","submitLabel",["loc",[null,[11,149],[11,164]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/1 t-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element2,1,1);
        morphs[1] = dom.createMorphAt(element2,2,2);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isSubmitting",["loc",[null,[3,10],[3,22]]]]],[],0,1,["loc",[null,[3,4],[9,11]]]],
        ["block","if",[["get","submitLabel",["loc",[null,[10,10],[10,21]]]]],[],2,null,["loc",[null,[10,4],[12,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-form/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var get = Ember['default'].get;
  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Component.extend({
    // Params
    fields: Ember['default'].Object.create({}), // it's ok for this to be in the class definition since this object
    // is never mutated
    onSubmit: function onSubmit() {},
    onError: function onError() {},
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    isSubmitting: false,

    notificationService: Ember['default'].inject.service('notification'),
    intlService: Ember['default'].inject.service('intl'),

    tagName: 'form',
    classNameBindings: ['isValid:ko-form--is-valid', 'isSubmitting:ko-form--is-submitting'],

    fieldsArray: Ember['default'].computed('fields.[]', function () {
      var fields = this.get('fields');
      return Object.keys(fields).map(function (key) {
        return fields[key];
      });
    }),

    fieldValuesArray: Ember['default'].computed('fieldsArray.@each.value', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.value;
      });
    }),

    fieldValidatorsArray: Ember['default'].computed('fieldsArray.@each.validator', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.validator;
      });
    }),

    isFormValid: Ember['default'].computed('fieldValuesArray.[]', 'fieldValidatorsArray.[]', function () {
      // TODO: Fix flaky Ember watching
      this.get('fieldValuesArray');
      this.get('fieldValidatorsArray');

      var fields = this.get('fields');
      return getAreFieldsValid(fields);

      function getAreFieldsValid(fields) {
        return Object.keys(fields).every(function (key) {
          var field = fields[key];
          return isFieldValid(field.value, field.validator);
        });
      }

      function isFieldValid(value, validator) {
        if (!validator) {
          return true;
        }
        var errors = validator(value);
        var hasErrors = errors && (typeof errors === 'string' || Array.isArray(errors) && errors.length > 0);
        return !hasErrors;
      }
    }),

    isSubmitDisabled: Ember['default'].computed('isFormValid', 'isSubmitting', function () {
      return !this.get('isFormValid') || this.get('isSubmitting');
    }),

    submit: function submit(e) {
      var _this = this;

      e.preventDefault();
      e.stopPropagation();
      if (!this.get('isFormValid')) {
        return;
      }
      var fields = this.get('fields');

      var fieldValues = Object.keys(fields).reduce(function (fieldValues, key) {
        fieldValues[key] = fields[key].value;
        return fieldValues;
      }, {});
      this.set('isSubmitting', true);
      return this.attrs.onSubmit(fieldValues).then(function (response) {
        if (_this.attrs.onSuccess) {
          _this.attrs.onSuccess(response);
        }
        return response;
      })['catch'](function (error) {
        _this.get('notificationService').add({
          type: 'error',
          title: _this.get('intlService').findTranslationByKey('generic.validation_errors').translation,
          autodismiss: true,
          dismissable: false
        });

        Object.keys(fields).forEach(function (field) {
          set(get(fields, field), 'errors', []);
        });
        if (error && error.errors && error.errors.length) {
          error.errors.filter(function (errorData) {
            return Boolean(errorData.parameter);
          }).forEach(function (errorData) {
            var fieldName = errorData.parameter;
            var relatedField = get(fields, fieldName);
            if (relatedField) {
              relatedField.errors.pushObject(errorData.message);
            }
          });
        }
        if (_this.attrs.onError) {
          _this.attrs.onError(error);
        }
      })['finally'](function () {
        _this.set('isSubmitting', false);
      });
    },

    actions: {
      cancel: function cancel() {
        this.attrs.onCancel();
      }
    }
  });

});
define('frontend-cp/components/ko-form/field/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    field: null,
    nogap: false,

    classNameBindings: ['nogap::ko-form_field--gap'],

    tagName: 'label',

    shouldShowValidationErrors: false,

    validationErrors: Ember['default'].computed('field.value', 'field.validator', function () {
      var value = this.get('field.value');
      var validator = this.get('field.validator');
      if (!validator) {
        return null;
      }
      var errors = validator(value);
      if (errors && !Array.isArray(errors)) {
        errors = [errors];
      }
      return errors;
    }),

    focusOut: function focusOut(event) {
      var isFocusStillInsideElement = Ember['default'].$.contains(this.$()[0], event.relatedTarget);
      if (isFocusStillInsideElement) {
        return;
      }
      this.set('shouldShowValidationErrors', true);
    }
  });

});
define('frontend-cp/components/ko-form/field/errors/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // params
    errors: null
  });

});
define('frontend-cp/components/ko-form/field/errors/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","ko-form_field_errors__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["content","error.message",["loc",[null,[2,39],[2,56]]]]
        ],
        locals: ["error"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","errors",["loc",[null,[1,8],[1,14]]]]],[],0,null,["loc",[null,[1,0],[3,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-form/field/help/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'p'
  });

});
define('frontend-cp/components/ko-form/field/help/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/help/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-form/field/label/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-form/field/label/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/label/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-form/field/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1,"class","ko-form_field__error");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
            return morphs;
          },
          statements: [
            ["content","error",["loc",[null,[3,71],[3,80]]]]
          ],
          locals: ["error"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","each",[["get","validationErrors",["loc",[null,[3,10],[3,26]]]]],[],0,null,["loc",[null,[3,2],[3,93]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 78
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1,"class","ko-form_field__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["content","error",["loc",[null,[5,65],[5,74]]]]
        ],
        locals: ["error"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 87
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]],
        ["block","if",[["get","shouldShowValidationErrors",["loc",[null,[2,6],[2,32]]]]],[],0,null,["loc",[null,[2,0],[4,7]]]],
        ["block","each",[["get","field.errors",["loc",[null,[5,8],[5,20]]]]],[],1,null,["loc",[null,[5,0],[5,87]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-form/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "frontend-cp/components/ko-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","yield",[["get","isFormValid",["loc",[null,[1,8],[1,19]]]],["get","isSubmitting",["loc",[null,[1,20],[1,32]]]]],[],["loc",[null,[1,0],[1,34]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-identities/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var computed = Ember['default'].computed;
  var service = Ember['default'].inject.service;
  var _Ember$String = Ember['default'].String;
  var underscore = _Ember$String.underscore;
  var dasherize = _Ember$String.dasherize;

  exports['default'] = Ember['default'].Component.extend({
    store: service(),
    intl: service(),

    // CPs
    emailIdentities: computed.filterBy('parent.emails', 'isNew', false),
    twitterIdentities: computed.filterBy('parent.twitters', 'isNew', false),
    phoneIdentities: computed.filterBy('parent.phones', 'isNew', false),
    facebookIdentities: computed.filterBy('parent.facebooks', 'isNew', false),

    // Actions
    actions: {
      makePrimaryIdentity: function makePrimaryIdentity(identity) {
        var _this = this;

        var adapter = this.container.lookup('adapter:application');
        var identityId = identity.get('id');
        var url = undefined;
        var identities = undefined;
        if (identity.constructor.modelName === 'identity-email') {
          url = adapter.namespace + '/identities/emails/' + identityId + '/primary';
          identities = this.get('parent.emails');
        } else if (identity.constructor.modelName === 'identity-twitter') {
          url = adapter.namespace + '/identities/twitter/' + identityId + '/primary';
          identities = this.get('parent.twitters');
        } else if (identity.constructor.modelName === 'identity-phone') {
          url = adapter.namespace + '/identities/phones/' + identityId + '/primary';
          identities = this.get('parent.phones');
        } else if (identity.constructor.modelName === 'identity-facebook') {
          url = adapter.namespace + '/identities/facebook/' + identityId + '/primary';
          identities = this.get('parent.facebooks');
        }
        adapter.ajax(url, 'PUT').then(function (data) {
          return _this._handleMarkAsPrimaryResponse(identities, identity, data);
        });
      },

      verifyIdentity: function verifyIdentity(identity) {
        var _this2 = this;

        if (identity.constructor.modelName === 'identity-email') {
          (function () {
            var store = _this2.get('store');
            var adapter = _this2.container.lookup('adapter:application');
            var url = adapter.namespace + '/identities/emails/' + identity.get('id') + '/validate';
            adapter.ajax(url, 'PUT').then(function (data) {
              return store.pushPayload('identity-email', data);
            });
          })();
        }
      },

      // sendVerificationEmail(identity) {
      //   const adapter = this.container.lookup('adapter:application');
      //   adapter.ajax(`${adapter.namespace}/identities/emails/${identity.get('id')}/send_validation_email`, 'POST');
      // },

      removeIdentity: function removeIdentity(identity) {
        var message = this.get('intl').findTranslationByKey('generic.identities.confirm_remove').translation;
        if (identity.get('isNew') || confirm(message)) {
          identity.destroyRecord();
        }
      },

      addEmail: function addEmail() {
        this.set('newIdentity', this.get('store').createRecord('identity-email'));
      },

      addTwitter: function addTwitter() {
        this.set('newIdentity', this.get('store').createRecord('identity-twitter'));
      },

      addPhone: function addPhone() {
        this.set('newIdentity', this.get('store').createRecord('identity-phone'));
      },

      saveIdentity: function saveIdentity(identity) {
        var _this3 = this;

        identity.set('parent', this.get('parent'));
        identity.save().then(function () {
          return _this3.set('newIdentity', null);
        })['catch'](function () {
          return identity.set('parent', null);
        });
      },

      removeNewIdentity: function removeNewIdentity() {
        var identity = this.get('newIdentity');
        this.send('removeIdentity', identity);
        this.set('newIdentity', null);
      }
    },

    // Marking an identity as primary means that all other identities of the same type for the same
    // user have to me marked as non primary.
    //
    // Presumably, the backend already takes care of that, but the payload only returns the data of
    // the identity being modified, so the changes in other identities are implicit.
    //
    // Due to this, we need to push to the store the updates in the other identitities. That way
    // those identies are modified without making them as dirty for ember-data.
    //
    _handleMarkAsPrimaryResponse: function _handleMarkAsPrimaryResponse(identitities, updatedIdentity, payload) {
      var store = this.get('store');
      var resource_type = underscore(updatedIdentity.constructor.modelName);

      identitities.forEach(function (identity) {
        var nonPrimaryPayload = {
          status: 200,
          data: { id: identity.get('id'), resource_type: resource_type, is_primary: false },
          resource: resource_type
        };
        var data = updatedIdentity === identity ? payload : nonPrimaryPayload;
        store.pushPayload(dasherize(updatedIdentity.constructor.modelName), data);
      });
    }
  });

});
define('frontend-cp/components/ko-identities/form/component', ['exports', 'ember', 'frontend-cp/utils/format-validations'], function (exports, Ember, format_validations) {

  'use strict';

  var computed = Ember['default'].computed;
  var isBlank = Ember['default'].isBlank;

  var placeholders = {
    'identity-email': 'generic.identities.placeholders.email',
    'identity-twitter': 'generic.identities.placeholders.twitter',
    'identity-phone': 'generic.identities.placeholders.phone'
  };
  var inputTypes = {
    'identity-email': 'email',
    'identity-twitter': 'text',
    'identity-phone': 'tel'
  };

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['ko-identities_form'],
    // CPs
    placeholder: computed('identity', function () {
      return placeholders[this.get('identity.constructor.modelName')];
    }),

    inputType: computed('identity', function () {
      return inputTypes[this.get('identity.constructor.modelName')];
    }),

    // Actions
    actions: {
      save: function save(e) {
        e.preventDefault();
        var identity = this.get('identity');
        this.set('errorMessage', null);
        if (identity.constructor.modelName === 'identity-email') {
          this.saveEmail(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-twitter') {
          this.saveTwitter(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-phone') {
          this.savePhone(this.get('mainField').trim());
        }
      },

      cancel: function cancel(e) {
        e.preventDefault();
        this.attrs.cancel();
      }
    },

    // Methods
    saveEmail: function saveEmail(email) {
      var identity = this.get('identity');
      if (format_validations.validateEmailFormat(email)) {
        identity.set('email', email);
        this.attrs.save(identity);
      } else {
        this.set('errorMessage', 'generic.identities.errors.invalid_email_format');
      }
    },

    saveTwitter: function saveTwitter(screenName) {
      var identity = this.get('identity');
      if (screenName.indexOf('@') !== 0) {
        screenName = '@' + screenName; // Add @sign for validation
      }
      if (format_validations.validateTwitterHandleFormat(screenName)) {
        identity.set('screenName', screenName.slice(1)); // Remove @ before save
        this.attrs.save(identity);
      } else {
        this.set('errorMessage', 'generic.identities.errors.invalid_twitter_handle_format');
      }
    },

    savePhone: function savePhone(number) {
      var sanitizedNumber = number.replace(/[^0-9+]/g, '');
      if (isBlank(sanitizedNumber)) {
        return;
      }
      var identity = this.get('identity');
      identity.set('number', sanitizedNumber);
      this.attrs.save(identity);
    }
  });

});
define('frontend-cp/components/ko-identities/form/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 3,
              "column": 93
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("label");
          dom.setAttribute(el1,"class","t-bad");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",[["get","errorMessage",["loc",[null,[3,70],[3,82]]]]],[],["loc",[null,[3,60],[3,83]]]]],[],["loc",[null,[3,43],[3,85]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","u-mt-");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"type","submit");
        dom.setAttribute(el3,"class","button button--default");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3,"class","button-naked t-bad");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element0, 'onsubmit');
        morphs[1] = dom.createMorphAt(element0,1,1);
        morphs[2] = dom.createMorphAt(element0,3,3);
        morphs[3] = dom.createAttrMorph(element2, 'disabled');
        morphs[4] = dom.createMorphAt(element2,1,1);
        morphs[5] = dom.createMorphAt(element1,3,3);
        morphs[6] = dom.createAttrMorph(element3, 'onclick');
        morphs[7] = dom.createAttrMorph(element3, 'disabled');
        morphs[8] = dom.createMorphAt(element3,1,1);
        return morphs;
      },
      statements: [
        ["attribute","onsubmit",["subexpr","action",["save"],[],["loc",[null,[1,15],[1,32]]]]],
        ["inline","input",[],["type",["subexpr","@mut",[["get","inputType",["loc",[null,[2,15],[2,24]]]]],[],[]],"value",["subexpr","@mut",[["get","mainField",["loc",[null,[2,31],[2,40]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",[["get","placeholder",["loc",[null,[2,79],[2,90]]]]],[],["loc",[null,[2,69],[2,91]]]]],[],["loc",[null,[2,53],[2,92]]]],"disabled",["subexpr","@mut",[["get","identity.isSaving",["loc",[null,[2,102],[2,119]]]]],[],[]],"class","input-text--full"],["loc",[null,[2,2],[2,146]]]],
        ["block","if",[["get","errorMessage",["loc",[null,[3,8],[3,20]]]]],[],0,null,["loc",[null,[3,2],[3,100]]]],
        ["attribute","disabled",["get","identity.isSaving",["loc",[null,[5,68],[5,85]]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.save"],[],["loc",[null,[6,23],[6,48]]]]],[],["loc",[null,[6,6],[6,50]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.or"],[],["loc",[null,[8,21],[8,44]]]]],[],["loc",[null,[8,4],[8,46]]]],
        ["attribute","onclick",["subexpr","action",["cancel"],[],["loc",[null,[9,20],[9,39]]]]],
        ["attribute","disabled",["get","identity.isSaving",["loc",[null,[9,78],[9,95]]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.cancel"],[],["loc",[null,[10,23],[10,50]]]]],[],["loc",[null,[10,6],[10,52]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-identities/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 21,
                        "column": 26
                      },
                      "end": {
                        "line": 21,
                        "column": 88
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("i");
                    dom.setAttribute(el1,"class","i-caution");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes() { return []; },
                  statements: [

                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 22
                    },
                    "end": {
                      "line": 24,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item-wrapper");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-identities__list-item");
                  var el3 = dom.createTextNode("\n                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-dropdown__item-chevron i-chevron-large-down");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element19 = dom.childAt(fragment, [1]);
                  var element20 = dom.childAt(element19, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element20, 'title');
                  morphs[1] = dom.createMorphAt(element20,1,1);
                  morphs[2] = dom.createMorphAt(element20,3,3);
                  morphs[3] = dom.createMorphAt(element19,3,3);
                  return morphs;
                },
                statements: [
                  ["attribute","title",["concat",[["get","emailIdentity.email",["loc",[null,[18,73],[18,92]]]]]]],
                  ["content","emailIdentity.email",["loc",[null,[19,28],[19,51]]]],
                  ["inline","if",[["get","emailIdentity.isPrimary",["loc",[null,[19,57],[19,80]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[19,97],[19,144]]]]],[],["loc",[null,[19,81],[19,145]]]]],[],["loc",[null,[19,52],[19,147]]]],
                  ["block","unless",[["get","emailIdentity.isValidated",["loc",[null,[21,36],[21,61]]]]],[],0,null,["loc",[null,[21,26],[21,99]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 27,
                          "column": 26
                        },
                        "end": {
                          "line": 31,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createTextNode("\n                              ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                            ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element18 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element18, 'onclick');
                      morphs[1] = dom.createMorphAt(element18,1,1);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["removeIdentity",["get","emailIdentity",["loc",[null,[28,97],[28,110]]]]],[],["loc",[null,[28,71],[28,112]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.remove_identity"],[],["loc",[null,[29,47],[29,94]]]]],[],["loc",[null,[29,30],[29,96]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child1 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 32,
                          "column": 26
                        },
                        "end": {
                          "line": 36,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createTextNode("\n                              ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                            ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element17 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element17, 'onclick');
                      morphs[1] = dom.createMorphAt(element17,1,1);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["makePrimaryIdentity",["get","emailIdentity",["loc",[null,[33,102],[33,115]]]]],[],["loc",[null,[33,71],[33,117]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.make_primary"],[],["loc",[null,[34,47],[34,91]]]]],[],["loc",[null,[34,30],[34,93]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child2 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 37,
                          "column": 26
                        },
                        "end": {
                          "line": 46,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createTextNode("\n                              ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                            ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element16 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element16, 'onclick');
                      morphs[1] = dom.createMorphAt(element16,1,1);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["verifyIdentity",["get","emailIdentity",["loc",[null,[38,97],[38,110]]]]],[],["loc",[null,[38,71],[38,112]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.verify_identity"],[],["loc",[null,[39,47],[39,94]]]]],[],["loc",[null,[39,30],[39,96]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 24
                      },
                      "end": {
                        "line": 47,
                        "column": 24
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                    morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["block","if",[["get","emailIdentity.canBeRemoved",["loc",[null,[27,32],[27,58]]]]],[],0,null,["loc",[null,[27,26],[31,33]]]],
                    ["block","if",[["get","emailIdentity.canBePrimarized",["loc",[null,[32,32],[32,61]]]]],[],1,null,["loc",[null,[32,26],[36,33]]]],
                    ["block","if",[["get","emailIdentity.canBeVerified",["loc",[null,[37,32],[37,59]]]]],[],2,null,["loc",[null,[37,26],[46,33]]]]
                  ],
                  locals: [],
                  templates: [child0, child1, child2]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 22
                    },
                    "end": {
                      "line": 48,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[26,24],[47,45]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 20
                  },
                  "end": {
                    "line": 49,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[16,32],[16,36]]]],"button"],[],["loc",[null,[16,28],[16,46]]]]],[],0,null,["loc",[null,[16,22],[24,29]]]],
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[25,32],[25,36]]]],"content"],[],["loc",[null,[25,28],[25,47]]]]],[],1,null,["loc",[null,[25,22],[48,29]]]]
              ],
              locals: ["name","dropdownContext"],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 18
                },
                "end": {
                  "line": 50,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-dropdown/container",[],["hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[15,20],[49,46]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 18
                },
                "end": {
                  "line": 52,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["content","emailIdentity.email",["loc",[null,[51,20],[51,43]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[51,61],[51,108]]]]],[],["loc",[null,[51,44],[51,110]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 14
              },
              "end": {
                "line": 54,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","if",[["get","emailIdentity.canBeModified",["loc",[null,[14,24],[14,51]]]]],[],0,1,["loc",[null,[14,18],[52,25]]]]
          ],
          locals: ["emailIdentity"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 6
            },
            "end": {
              "line": 58,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1,"class","u-v-align-top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("strong");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","u-pl");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","ko-identities__list ko-identities__list--emails");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element21 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element21, [1, 0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element21, [3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["generic.identities.email_identities_title"],[],["loc",[null,[9,39],[9,93]]]]],[],["loc",[null,[9,22],[9,95]]]],
          ["block","each",[["get","emailIdentities",["loc",[null,[12,22],[12,37]]]]],[],0,null,["loc",[null,[12,14],[54,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 67,
                    "column": 20
                  },
                  "end": {
                    "line": 74,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","ko-dropdown_list__item-wrapper");
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","ko-identities__list-item");
                var el3 = dom.createTextNode("\n                          @");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","ko-dropdown__item-chevron i-chevron-large-down");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element14 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element14, 'title');
                morphs[1] = dom.createMorphAt(element14,1,1);
                morphs[2] = dom.createMorphAt(element14,3,3);
                return morphs;
              },
              statements: [
                ["attribute","title",["concat",["@",["get","twitterIdentity.screenName",["loc",[null,[69,72],[69,98]]]]]]],
                ["content","twitterIdentity.screenName",["loc",[null,[70,27],[70,57]]]],
                ["inline","if",[["get","twitterIdentity.isPrimary",["loc",[null,[70,63],[70,88]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[70,105],[70,152]]]]],[],["loc",[null,[70,89],[70,153]]]]],[],["loc",[null,[70,58],[70,155]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            var child0 = (function() {
              var child0 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 77,
                        "column": 24
                      },
                      "end": {
                        "line": 79,
                        "column": 24
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                          ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("li");
                    dom.setAttribute(el1,"class","ko-dropdown_list__item");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element12 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element12, 'onclick');
                    morphs[1] = dom.createMorphAt(element12,0,0);
                    return morphs;
                  },
                  statements: [
                    ["attribute","onclick",["subexpr","action",["removeIdentity",["get","twitterIdentity",["loc",[null,[78,95],[78,110]]]]],[],["loc",[null,[78,69],[78,112]]]]],
                    ["inline","format-message",[["subexpr","intl-get",["generic.identities.remove_identity"],[],["loc",[null,[78,130],[78,177]]]]],[],["loc",[null,[78,113],[78,179]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              var child1 = (function() {
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 80,
                        "column": 24
                      },
                      "end": {
                        "line": 82,
                        "column": 24
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("                          ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("li");
                    dom.setAttribute(el1,"class","ko-dropdown_list__item");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element11 = dom.childAt(fragment, [1]);
                    var morphs = new Array(2);
                    morphs[0] = dom.createAttrMorph(element11, 'onclick');
                    morphs[1] = dom.createMorphAt(element11,0,0);
                    return morphs;
                  },
                  statements: [
                    ["attribute","onclick",["subexpr","action",["makePrimaryIdentity",["get","twitterIdentity",["loc",[null,[81,100],[81,115]]]]],[],["loc",[null,[81,69],[81,117]]]]],
                    ["inline","format-message",[["subexpr","intl-get",["generic.identities.make_primary"],[],["loc",[null,[81,135],[81,179]]]]],[],["loc",[null,[81,118],[81,181]]]]
                  ],
                  locals: [],
                  templates: []
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 76,
                      "column": 22
                    },
                    "end": {
                      "line": 86,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("a");
                  dom.setAttribute(el2,"taget","_blank");
                  var el3 = dom.createTextNode("See profile");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element13 = dom.childAt(fragment, [3, 1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                  morphs[2] = dom.createAttrMorph(element13, 'href');
                  dom.insertBoundary(fragment, 0);
                  return morphs;
                },
                statements: [
                  ["block","if",[["get","twitterIdentity.canBeRemoved",["loc",[null,[77,30],[77,58]]]]],[],0,null,["loc",[null,[77,24],[79,31]]]],
                  ["block","if",[["get","twitterIdentity.canBePrimarized",["loc",[null,[80,30],[80,61]]]]],[],1,null,["loc",[null,[80,24],[82,31]]]],
                  ["attribute","href",["concat",["https://twitter.com/",["get","twitterIdentity.screenName",["loc",[null,[84,57],[84,83]]]]]]]
                ],
                locals: [],
                templates: [child0, child1]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 75,
                    "column": 20
                  },
                  "end": {
                    "line": 87,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[76,22],[86,43]]]]
              ],
              locals: [],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 66,
                  "column": 18
                },
                "end": {
                  "line": 88,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[67,30],[67,34]]]],"button"],[],["loc",[null,[67,26],[67,44]]]]],[],0,null,["loc",[null,[67,20],[74,27]]]],
              ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[75,30],[75,34]]]],"content"],[],["loc",[null,[75,26],[75,45]]]]],[],1,null,["loc",[null,[75,20],[87,27]]]]
            ],
            locals: ["name","dropdownContext"],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 64,
                "column": 14
              },
              "end": {
                "line": 90,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/container",[],["hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[66,18],[88,44]]]]
          ],
          locals: ["twitterIdentity"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1,"class","u-v-align-top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("strong");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","u-pl");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","ko-identities__list ko-identities__list--twitters");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element15 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element15, [1, 0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element15, [3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["generic.identities.twitter_identities_title"],[],["loc",[null,[61,39],[61,95]]]]],[],["loc",[null,[61,22],[61,97]]]],
          ["block","each",[["get","twitterIdentities",["loc",[null,[64,22],[64,39]]]]],[],0,null,["loc",[null,[64,14],[90,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 104,
                      "column": 22
                    },
                    "end": {
                      "line": 111,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item-wrapper");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-identities__list-item");
                  var el3 = dom.createTextNode("\n                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-dropdown__item-chevron i-chevron-large-down");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element9 = dom.childAt(fragment, [1, 1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element9, 'title');
                  morphs[1] = dom.createMorphAt(element9,1,1);
                  morphs[2] = dom.createMorphAt(element9,3,3);
                  return morphs;
                },
                statements: [
                  ["attribute","title",["concat",[["get","phoneIdentity.number",["loc",[null,[106,73],[106,93]]]]]]],
                  ["content","phoneIdentity.number",["loc",[null,[107,28],[107,52]]]],
                  ["inline","if",[["get","phoneIdentity.isPrimary",["loc",[null,[107,58],[107,81]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[107,98],[107,145]]]]],[],["loc",[null,[107,82],[107,146]]]]],[],["loc",[null,[107,53],[107,148]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 114,
                          "column": 26
                        },
                        "end": {
                          "line": 116,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element8 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element8, 'onclick');
                      morphs[1] = dom.createMorphAt(element8,0,0);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["removeIdentity",["get","phoneIdentity",["loc",[null,[115,97],[115,110]]]]],[],["loc",[null,[115,71],[115,112]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.remove_identity"],[],["loc",[null,[115,130],[115,177]]]]],[],["loc",[null,[115,113],[115,179]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child1 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 117,
                          "column": 26
                        },
                        "end": {
                          "line": 119,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element7 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element7, 'onclick');
                      morphs[1] = dom.createMorphAt(element7,0,0);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["makePrimaryIdentity",["get","phoneIdentity",["loc",[null,[118,102],[118,115]]]]],[],["loc",[null,[118,71],[118,117]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.make_primary"],[],["loc",[null,[118,135],[118,179]]]]],[],["loc",[null,[118,118],[118,181]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 113,
                        "column": 24
                      },
                      "end": {
                        "line": 120,
                        "column": 24
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["block","if",[["get","phoneIdentity.canBeRemoved",["loc",[null,[114,32],[114,58]]]]],[],0,null,["loc",[null,[114,26],[116,33]]]],
                    ["block","if",[["get","phoneIdentity.canBePrimarized",["loc",[null,[117,32],[117,61]]]]],[],1,null,["loc",[null,[117,26],[119,33]]]]
                  ],
                  locals: [],
                  templates: [child0, child1]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 112,
                      "column": 22
                    },
                    "end": {
                      "line": 121,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[113,24],[120,45]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 103,
                    "column": 20
                  },
                  "end": {
                    "line": 122,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[104,32],[104,36]]]],"button"],[],["loc",[null,[104,28],[104,46]]]]],[],0,null,["loc",[null,[104,22],[111,29]]]],
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[112,32],[112,36]]]],"content"],[],["loc",[null,[112,28],[112,47]]]]],[],1,null,["loc",[null,[112,22],[121,29]]]]
              ],
              locals: ["name","dropdownContext"],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 18
                },
                "end": {
                  "line": 123,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-dropdown/container",[],["hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[103,20],[122,46]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 123,
                  "column": 18
                },
                "end": {
                  "line": 125,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["content","phoneIdentity.number",["loc",[null,[124,20],[124,44]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[124,62],[124,109]]]]],[],["loc",[null,[124,45],[124,111]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 100,
                "column": 14
              },
              "end": {
                "line": 127,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","if",[["get","phoneIdentity.canBeModified",["loc",[null,[102,24],[102,51]]]]],[],0,1,["loc",[null,[102,18],[125,25]]]]
          ],
          locals: ["phoneIdentity"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 95,
              "column": 6
            },
            "end": {
              "line": 131,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1,"class","u-v-align-top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("strong");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","u-pl");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","ko-identities__list ko-identities__list--phones");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element10, [1, 0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element10, [3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["generic.identities.phones_identities_title"],[],["loc",[null,[97,39],[97,94]]]]],[],["loc",[null,[97,22],[97,96]]]],
          ["block","each",[["get","phoneIdentities",["loc",[null,[100,22],[100,37]]]]],[],0,null,["loc",[null,[100,14],[127,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 141,
                      "column": 22
                    },
                    "end": {
                      "line": 148,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","ko-dropdown_list__item-wrapper");
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-identities__list-item");
                  var el3 = dom.createTextNode("\n                            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n                          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","ko-dropdown__item-chevron i-chevron-large-down");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1, 1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element5, 'title');
                  morphs[1] = dom.createMorphAt(element5,1,1);
                  morphs[2] = dom.createMorphAt(element5,3,3);
                  return morphs;
                },
                statements: [
                  ["attribute","title",["concat",[["get","facebookIdentity.userName",["loc",[null,[143,73],[143,98]]]]]]],
                  ["content","facebookIdentity.userName",["loc",[null,[144,28],[144,57]]]],
                  ["inline","if",[["get","facebookIdentity.isPrimary",["loc",[null,[144,63],[144,89]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[144,106],[144,153]]]]],[],["loc",[null,[144,90],[144,154]]]]],[],["loc",[null,[144,58],[144,156]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              var child0 = (function() {
                var child0 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 151,
                          "column": 26
                        },
                        "end": {
                          "line": 153,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element4 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element4, 'onclick');
                      morphs[1] = dom.createMorphAt(element4,0,0);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["removeIdentity",["get","facebookIdentity",["loc",[null,[152,97],[152,113]]]]],[],["loc",[null,[152,71],[152,115]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.remove_identity"],[],["loc",[null,[152,133],[152,180]]]]],[],["loc",[null,[152,116],[152,182]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                var child1 = (function() {
                  return {
                    meta: {
                      "revision": "Ember@1.13.7",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 154,
                          "column": 26
                        },
                        "end": {
                          "line": 156,
                          "column": 26
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                            ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("li");
                      dom.setAttribute(el1,"class","ko-dropdown_list__item");
                      var el2 = dom.createComment("");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element3 = dom.childAt(fragment, [1]);
                      var morphs = new Array(2);
                      morphs[0] = dom.createAttrMorph(element3, 'onclick');
                      morphs[1] = dom.createMorphAt(element3,0,0);
                      return morphs;
                    },
                    statements: [
                      ["attribute","onclick",["subexpr","action",["makePrimaryIdentity",["get","facebookIdentity",["loc",[null,[155,102],[155,118]]]]],[],["loc",[null,[155,71],[155,120]]]]],
                      ["inline","format-message",[["subexpr","intl-get",["generic.identities.make_primary"],[],["loc",[null,[155,138],[155,182]]]]],[],["loc",[null,[155,121],[155,184]]]]
                    ],
                    locals: [],
                    templates: []
                  };
                }());
                return {
                  meta: {
                    "revision": "Ember@1.13.7",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 150,
                        "column": 24
                      },
                      "end": {
                        "line": 157,
                        "column": 24
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                    morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [
                    ["block","if",[["get","facebookIdentity.canBeRemoved",["loc",[null,[151,32],[151,61]]]]],[],0,null,["loc",[null,[151,26],[153,33]]]],
                    ["block","if",[["get","facebookIdentity.canBePrimarized",["loc",[null,[154,32],[154,64]]]]],[],1,null,["loc",[null,[154,26],[156,33]]]]
                  ],
                  locals: [],
                  templates: [child0, child1]
                };
              }());
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 149,
                      "column": 22
                    },
                    "end": {
                      "line": 158,
                      "column": 22
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[150,24],[157,45]]]]
                ],
                locals: [],
                templates: [child0]
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 140,
                    "column": 20
                  },
                  "end": {
                    "line": 159,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 2,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[141,32],[141,36]]]],"button"],[],["loc",[null,[141,28],[141,46]]]]],[],0,null,["loc",[null,[141,22],[148,29]]]],
                ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[149,32],[149,36]]]],"content"],[],["loc",[null,[149,28],[149,47]]]]],[],1,null,["loc",[null,[149,22],[158,29]]]]
              ],
              locals: ["name","dropdownContext"],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 139,
                  "column": 18
                },
                "end": {
                  "line": 160,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-dropdown/container",[],["hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[140,20],[159,46]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 160,
                  "column": 18
                },
                "end": {
                  "line": 162,
                  "column": 18
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              return morphs;
            },
            statements: [
              ["content","facebookIdentity.userName",["loc",[null,[161,20],[161,49]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.identities.primary_comment"],[],["loc",[null,[161,67],[161,114]]]]],[],["loc",[null,[161,50],[161,116]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 137,
                "column": 14
              },
              "end": {
                "line": 164,
                "column": 14
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("                ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","if",[["get","facebookIdentity.canBeModified",["loc",[null,[139,24],[139,54]]]]],[],0,1,["loc",[null,[139,18],[162,25]]]]
          ],
          locals: ["facebookIdentity"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 132,
              "column": 6
            },
            "end": {
              "line": 168,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          dom.setAttribute(el1,"class","u-v-align-top");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("strong");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","u-pl");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","ko-identities__list ko-identities__list--facebooks");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element6, [1, 0]),0,0);
          morphs[1] = dom.createMorphAt(dom.childAt(element6, [3, 1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["generic.identities.facebook_identities_title"],[],["loc",[null,[134,39],[134,96]]]]],[],["loc",[null,[134,22],[134,98]]]],
          ["block","each",[["get","facebookIdentities",["loc",[null,[137,22],[137,40]]]]],[],0,null,["loc",[null,[137,14],[164,23]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 174,
                  "column": 14
                },
                "end": {
                  "line": 177,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-dropdown__item-chevron i-chevron-large-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.identities.add_new"],[],["loc",[null,[175,33],[175,72]]]]],[],["loc",[null,[175,16],[175,74]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 179,
                    "column": 16
                  },
                  "end": {
                    "line": 183,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(fragment, [3]);
                var element2 = dom.childAt(fragment, [5]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,0,0);
                morphs[2] = dom.createAttrMorph(element1, 'onclick');
                morphs[3] = dom.createMorphAt(element1,0,0);
                morphs[4] = dom.createAttrMorph(element2, 'onclick');
                morphs[5] = dom.createMorphAt(element2,0,0);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["addEmail"],[],["loc",[null,[180,61],[180,82]]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.identities.add_email_identity"],[],["loc",[null,[180,100],[180,150]]]]],[],["loc",[null,[180,83],[180,152]]]],
                ["attribute","onclick",["subexpr","action",["addPhone"],[],["loc",[null,[181,61],[181,82]]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.identities.add_phone_identity"],[],["loc",[null,[181,100],[181,150]]]]],[],["loc",[null,[181,83],[181,152]]]],
                ["attribute","onclick",["subexpr","action",["addTwitter"],[],["loc",[null,[182,61],[182,84]]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.identities.add_twitter_identity"],[],["loc",[null,[182,102],[182,154]]]]],[],["loc",[null,[182,85],[182,156]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 178,
                  "column": 14
                },
                "end": {
                  "line": 184,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-dropdown/list",[],[],0,null,["loc",[null,[179,16],[183,37]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 173,
                "column": 12
              },
              "end": {
                "line": 185,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[174,24],[174,28]]]],"button"],[],["loc",[null,[174,20],[174,38]]]]],[],0,null,["loc",[null,[174,14],[177,21]]]],
            ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[178,24],[178,28]]]],"content"],[],["loc",[null,[178,20],[178,39]]]]],[],1,null,["loc",[null,[178,14],[184,21]]]]
          ],
          locals: ["name","dropdownContext"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 169,
              "column": 6
            },
            "end": {
              "line": 188,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2,"class","u-pl");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 3]),1,1);
          return morphs;
        },
        statements: [
          ["block","ko-dropdown/container",[],["class","ko-identities__create-dropdown ","hideOnClick",true,"hideOnChildFocus",true],0,null,["loc",[null,[173,12],[185,38]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-identities/form",[],["identity",["subexpr","@mut",[["get","newIdentity",["loc",[null,[193,34],[193,45]]]]],[],[]],"save",["subexpr","action",["saveIdentity"],[],["loc",[null,[193,51],[193,74]]]],"cancel",["subexpr","action",["removeNewIdentity"],[],["loc",[null,[193,82],[193,110]]]]],["loc",[null,[193,4],[193,112]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 195,
            "column": 5
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","info-bar-item");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","info-bar__heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2,"class","ko-identities__table");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element22 = dom.childAt(fragment, [0]);
        var element23 = dom.childAt(element22, [3, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element22, [1]),1,1);
        morphs[1] = dom.createMorphAt(element23,1,1);
        morphs[2] = dom.createMorphAt(element23,2,2);
        morphs[3] = dom.createMorphAt(element23,3,3);
        morphs[4] = dom.createMorphAt(element23,4,4);
        morphs[5] = dom.createMorphAt(element23,5,5);
        morphs[6] = dom.createMorphAt(element22,5,5);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.identities.component_title"],[],["loc",[null,[3,21],[3,68]]]]],[],["loc",[null,[3,4],[3,70]]]],
        ["block","if",[["get","emailIdentities.length",["loc",[null,[7,12],[7,34]]]]],[],0,null,["loc",[null,[7,6],[58,13]]]],
        ["block","if",[["get","twitterIdentities.length",["loc",[null,[59,12],[59,36]]]]],[],1,null,["loc",[null,[59,6],[94,13]]]],
        ["block","if",[["get","phoneIdentities.length",["loc",[null,[95,12],[95,34]]]]],[],2,null,["loc",[null,[95,6],[131,13]]]],
        ["block","if",[["get","facebookIdentities.length",["loc",[null,[132,12],[132,37]]]]],[],3,null,["loc",[null,[132,6],[168,13]]]],
        ["block","unless",[["get","newIdentity",["loc",[null,[169,16],[169,27]]]]],[],4,null,["loc",[null,[169,6],[188,17]]]],
        ["block","if",[["get","newIdentity",["loc",[null,[192,8],[192,19]]]]],[],5,null,["loc",[null,[192,2],[194,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  }()));

});
define('frontend-cp/components/ko-info-bar/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['list-bare']
  });

});
define('frontend-cp/components/ko-info-bar/field/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    isEdited: false,
    isErrored: false,

    tagName: 'li',
    classNames: 'info-bar-item',
    classNameBindings: ['isEdited:info-bar-item--edited', 'isErrored:info-bar-item--error']
  });

});
define('frontend-cp/components/ko-info-bar/field/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,36],[1,45]]]],
        ["content","yield",["loc",[null,[2,0],[2,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-info-bar/metadata/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li'
  });

});
define('frontend-cp/components/ko-info-bar/metadata/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","info-bar-metadata__title layout__item u-1/2");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","info-bar-metadata__value layout__item u-1/2");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","row.title",["loc",[null,[4,4],[4,17]]]],
          ["inline","ko-datetime-format",[["get","row.value",["loc",[null,[7,33],[7,42]]]]],[],["loc",[null,[7,12],[7,44]]]]
        ],
        locals: ["row"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1,"class","info-bar-metadata layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","rows",["loc",[null,[2,8],[2,12]]]]],[],0,null,["loc",[null,[2,0],[9,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-info-bar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-limited-text-area/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['u-pos-rel'],

    text: '',

    counter: Ember['default'].computed('max', 'text', function () {
      return this.get('max') - this.get('text').length;
    })
  });

});
define('frontend-cp/components/ko-limited-text-area/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-limited-text-area/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","input__counter");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),0,0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","textarea",[],["value",["subexpr","@mut",[["get","text",["loc",[null,[1,17],[1,21]]]]],[],[]],"maxlength",["subexpr","@mut",[["get","max",["loc",[null,[1,32],[1,35]]]]],[],[]],"placeholder",["subexpr","@mut",[["get","placeholder",["loc",[null,[1,48],[1,59]]]]],[],[]],"class","text-area--clean"],["loc",[null,[1,0],[1,86]]]],
        ["content","counter",["loc",[null,[2,29],[2,40]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-linked-cases/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    contextModalService: Ember['default'].inject.service('context-modal'),

    tagName: 'li',
    classNames: ['info-bar-item', 'u-no-bottom-border', 'ko-linked-cases'],
    cases: null,

    actions: {

      linkedCases: function linkedCases(event) {
        this.get('contextModalService').open('linkedCases', event, { inline: true });
      },

      addCaseLink: function addCaseLink(caseLink) {
        this.sendAction('addCaseLink', caseLink);
      },

      openLinkPopover: function openLinkPopover() {
        // open popover
      },

      removeCase: function removeCase(caseObj) {
        this.sendAction('removeCaseLink', caseObj);
      }

    }

  });

});
define('frontend-cp/components/ko-linked-cases/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-linked-cases/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("br");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","title",["loc",[null,[2,5],[2,14]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-linked-cases/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1,"class","ko-linked-cases__selected-list");
          dom.setAttribute(el1,"role","menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2,"class","ko-linked-cases__selected-list-item");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("p");
          dom.setAttribute(el3,"class","t-caption");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode(" - Remove");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element2,0,0);
          return morphs;
        },
        statements: [
          ["content","case.title",["loc",[null,[9,11],[9,25]]]],
          ["element","action",["removeCase",["get","case",["loc",[null,[10,51],[10,55]]]]],[],["loc",[null,[10,29],[10,57]]]],
          ["content","case.type",["loc",[null,[10,58],[10,71]]]]
        ],
        locals: ["case"],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 20,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-linked-cases/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1,"href","#");
          var el2 = dom.createTextNode("Create Link");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["openLinkPopover"],[],["loc",[null,[19,16],[19,44]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-linked-cases/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-linked-cases__selected-list-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]),1,1);
        morphs[2] = dom.createMorphAt(fragment,6,6,contextualElement);
        morphs[3] = dom.createMorphAt(fragment,10,10,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","if",[["get","title",["loc",[null,[1,6],[1,11]]]]],[],0,null,["loc",[null,[1,0],[3,7]]]],
        ["block","each",[["get","cases",["loc",[null,[6,10],[6,15]]]]],[],1,null,["loc",[null,[6,2],[13,11]]]],
        ["block","ko-toggle-context-modal",[],["toggleModal","linkedCases"],2,null,["loc",[null,[18,2],[20,30]]]],
        ["inline","ko-linked-cases-context-menu",[],["contextModalId","linkedCases","cases",["subexpr","@mut",[["get","cases",["loc",[null,[26,10],[26,15]]]]],[],[]],"types",["subexpr","@mut",[["get","types",["loc",[null,[27,10],[27,15]]]]],[],[]],"removeCaseLink","removeCaseLink","addCaseLink","addCaseLink","selectedType",["subexpr","@mut",[["get","selectedType",["loc",[null,[30,17],[30,29]]]]],[],[]]],["loc",[null,[24,2],[31,4]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-linked-cases-context-menu/component', ['exports', 'ember', 'npm:lodash', 'frontend-cp/lib/keycodes'], function (exports, Ember, _, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    classNames: ['ko-linked-cases-context-menu'],

    showOptions: false,
    isShowingResults: false,
    selectedType: null,
    tabindex: 0,
    types: null,
    cases: null,
    searchTerm: null,
    filteredCases: null,
    selectedCases: new Ember['default'].A([]),

    setupParticipants: Ember['default'].on('willInsertElement', function () {
      this.set('filteredCases', this.get('cases'));
    }),
    // TODO: when RFC implemented and its possible to invoke same actions via multiple events
    // https://github.com/emberjs/rfcs/blob/action/active/0000-improved-actions.md
    // https://github.com/emberjs/rfcs/pull/50
    // https://github.com/emberjs/rfcs/pull/15 (Simplifying Ember Concepts -> Improved actions that are invoked inside components as simple callbacks)
    keyDown: function keyDown(e) {
      if (e.keyCode === KeyCodes.down) {
        return false;
      }
      if (e.keyCode === KeyCodes.up) {
        return false;
      }
      if (e.keyCode === e.keyCodes.enter) {
        return false;
      }
    },
    // TODO: when RFC implemented and its possible to invoke same actions via multiple events
    // https://github.com/emberjs/rfcs/blob/action/active/0000-improved-actions.md
    // https://github.com/emberjs/rfcs/pull/50
    // https://github.com/emberjs/rfcs/pull/15 (Simplifying Ember Concepts -> Improved actions that are invoked inside components as simple callbacks)
    keyUp: function keyUp(e) {
      if (e.keyCode === KeyCodes.down) {
        return false;
      }
      if (e.keyCode === KeyCodes.up) {
        return false;
      }
      if (e.keyCode === KeyCodes.enter) {
        return false;
      }
      return false;
    },

    actions: {

      createLink: function createLink() {
        this.set('isShowingResults', false);
        this.set('searchTerm', '');
        var caseLink = { type: this.selectedType, title: this.selectedCases.get('firstObject').title };
        this.sendAction('addCaseLink', caseLink);
        this.set('selectedCases', []);
      },

      query: function query() {
        var _this = this;

        var filteredCases = _['default'].filter(this.cases, function (caseObj) {
          return _['default'].some([caseObj.title, caseObj.type], function (caseObj) {
            return caseObj.indexOf(_this.searchTerm) !== -1;
          });
        });

        this.set('filteredCases', filteredCases);
        this.set('searchTerm', '');
      },

      caseTypeSelected: function caseTypeSelected(caseObj) {
        this.set('selectedType', caseObj.type);
        this.set('showOptions', false);
      },

      caseSelected: function caseSelected(caseObj) {
        this.set('isShowingResults', false);
        this.selectedCases.pushObject(caseObj);
      },

      toggleDropdown: function toggleDropdown() {
        this.toggleProperty('showOptions');
      },

      removeSelectedCase: function removeSelectedCase(caseObj) {
        this.selectedCases.removeObject(caseObj);
      },

      whenKeyIsPressed: function whenKeyIsPressed() {
        this.set('isShowingResults', true);
      }

    }

  });

});
define('frontend-cp/components/ko-linked-cases-context-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","dropdown-menu__item");
            dom.setAttribute(el1,"tabindex","-1");
            dom.setAttribute(el1,"role","menuitemradio");
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element5);
            morphs[1] = dom.createMorphAt(element5,1,1);
            return morphs;
          },
          statements: [
            ["element","action",["caseTypeSelected",["get","case",["loc",[null,[12,68],[12,72]]]]],[],["loc",[null,[12,40],[12,74]]]],
            ["content","case.type",["loc",[null,[12,109],[12,122]]]]
          ],
          locals: ["case"],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-linked-cases-context-menu__tag");
            dom.setAttribute(el1,"tabindex","-1");
            dom.setAttribute(el1,"role","menuitem");
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","ko-linked-cases-context-menu__tag-action");
            var el3 = dom.createTextNode("x");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [0]),0,0);
            morphs[1] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [
            ["content","case.title",["loc",[null,[21,90],[21,104]]]],
            ["element","action",["removeSelectedCase",["get","case",["loc",[null,[21,147],[21,151]]]]],[],["loc",[null,[21,117],[21,153]]]]
          ],
          locals: ["case"],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 8
                },
                "end": {
                  "line": 44,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-linked-cases-context-menu__filtered-list-item");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","flag--small flag--auto");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","flag__body");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("strong");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("br");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4,"class","t-caption");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var element2 = dom.childAt(element1, [1, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
              return morphs;
            },
            statements: [
              ["element","action",["caseSelected",["get","case",["loc",[null,[36,95],[36,99]]]]],[],["loc",[null,[36,71],[36,101]]]],
              ["content","case.title",["loc",[null,[39,24],[39,38]]]],
              ["content","case.type",["loc",[null,[40,40],[40,53]]]]
            ],
            locals: ["case"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 48,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-linked-cases-context-menu__filtered-list-container");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","ko-linked-cases-context-menu__filtered-list");
            dom.setAttribute(el2,"role","menu");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredCases",["loc",[null,[35,16],[35,29]]]]],[],0,null,["loc",[null,[35,8],[44,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 2
              },
              "end": {
                "line": 54,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","box");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            dom.setAttribute(el2,"class","button button--primary");
            var el3 = dom.createTextNode("Create Link");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [
            ["element","action",["createLink",["get","case",["loc",[null,[52,67],[52,71]]]]],[],["loc",[null,[52,45],[52,73]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 56,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box");
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("This case");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"class"," button button--action dropdown i--chevrons");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2,"role","menu");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","input i--search-small");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3,"class","list-inline u-overflow-scroll");
          dom.setAttribute(el3,"role","menu");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element6 = dom.childAt(fragment, [1]);
          var element7 = dom.childAt(element6, [3]);
          var element8 = dom.childAt(element6, [5]);
          var element9 = dom.childAt(element6, [7]);
          var morphs = new Array(8);
          morphs[0] = dom.createElementMorph(element7);
          morphs[1] = dom.createMorphAt(element7,1,1);
          morphs[2] = dom.createAttrMorph(element8, 'class');
          morphs[3] = dom.createMorphAt(element8,1,1);
          morphs[4] = dom.createMorphAt(dom.childAt(element9, [1]),1,1);
          morphs[5] = dom.createMorphAt(element9,3,3);
          morphs[6] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[7] = dom.createMorphAt(fragment,5,5,contextualElement);
          return morphs;
        },
        statements: [
          ["element","action",["toggleDropdown"],[],["loc",[null,[7,59],[7,86]]]],
          ["content","selectedType",["loc",[null,[8,6],[8,22]]]],
          ["attribute","class",["concat",["dropdown-menu ",["subexpr","if",[["get","showOptions",["loc",[null,[10,34],[10,45]]]],"","u-hidden"],[],["loc",[null,[10,29],[10,61]]]]]]],
          ["block","each",[["get","types",["loc",[null,[11,14],[11,19]]]]],[],0,null,["loc",[null,[11,6],[14,15]]]],
          ["block","each",[["get","selectedCases",["loc",[null,[20,16],[20,29]]]]],[],1,null,["loc",[null,[20,8],[22,17]]]],
          ["inline","input",[],["class","input-text u-1/1 has-icon","type","text","placeholder","Type to find case","value",["subexpr","@mut",[["get","searchTerm",["loc",[null,[25,98],[25,108]]]]],[],[]],"enter","query","key-press","whenKeyIsPressed"],["loc",[null,[25,6],[25,153]]]],
          ["block","if",[["get","isShowingResults",["loc",[null,[31,8],[31,24]]]]],[],2,null,["loc",[null,[31,2],[48,9]]]],
          ["block","unless",[["get","isShowingResults",["loc",[null,[50,12],[50,28]]]]],[],3,null,["loc",[null,[50,2],[54,13]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-linked-cases-context-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-context-modal-item",[],["index","0","title",["subexpr","format-message",[["subexpr","intl-get",["cases.linkedCasesInline"],[],["loc",[null,[1,57],[1,93]]]]],[],["loc",[null,[1,41],[1,94]]]],"contextModalId",["subexpr","@mut",[["get","contextModalId",["loc",[null,[1,110],[1,124]]]]],[],[]]],0,null,["loc",[null,[1,0],[56,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-loader/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['ko-loader'],
    classNameBindings: ['large:ko-loader--large']
  });

});
define('frontend-cp/components/ko-loader/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 99
          }
        },
        "moduleName": "frontend-cp/components/ko-loader/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1,"class","ko-loader__item");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-login-otp/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-login-otp/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-otp/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","otp-form login-form__wrapper js-otp-form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        return morphs;
      },
      statements: [
        ["inline","input",[],["type","text","value",["subexpr","@mut",[["get","otp",["loc",[null,[2,30],[2,33]]]]],[],[]],"name","otp-code","class","login__input u-intimate","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.verificationcode"],[],["loc",[null,[4,34],[4,69]]]]],[],["loc",[null,[4,18],[4,70]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[5,15],[5,24]]]]],[],[]]],["loc",[null,[2,4],[5,26]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-login-password/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-login-password/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-login-password/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","input",[],["type","email","value",["subexpr","@mut",[["get","model.email",["loc",[null,[2,31],[2,42]]]]],[],[]],"name","email","autofocus","autofocus","class","login__input","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.email"],[],["loc",[null,[2,127],[2,151]]]]],[],["loc",[null,[2,111],[2,152]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[2,162],[2,171]]]]],[],[]]],["loc",[null,[2,4],[2,173]]]],
        ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","model.password",["loc",[null,[3,34],[3,48]]]]],[],[]],"name","password","class","login__input","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.password"],[],["loc",[null,[3,114],[3,141]]]]],[],["loc",[null,[3,98],[3,142]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[3,152],[3,161]]]]],[],[]]],["loc",[null,[3,4],[3,163]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-login-reset/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-login-reset/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-reset/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","reset-password-form login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","newPassword1",["loc",[null,[2,34],[2,46]]]]],[],[]],"name","reset-password","class","login__input","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.newpassword"],[],["loc",[null,[2,118],[2,148]]]]],[],["loc",[null,[2,102],[2,149]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[2,159],[2,168]]]]],[],[]]],["loc",[null,[2,4],[2,170]]]],
        ["inline","input",[],["type","password","value",["subexpr","@mut",[["get","newPassword2",["loc",[null,[3,34],[3,46]]]]],[],[]],"name","reset-password-2","class","login__input u-intimate","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.repeatpassword"],[],["loc",[null,[3,131],[3,164]]]]],[],["loc",[null,[3,115],[3,165]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[3,175],[3,184]]]]],[],[]]],["loc",[null,[3,4],[3,186]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-notification-badge/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-notification-badge/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-notification-badge/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","i-bell");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-option-list-drill-down/component', ['exports', 'ember', 'frontend-cp/components/mixins/suggestions', 'frontend-cp/components/mixins/drop-down-keyboard-nav', 'frontend-cp/lib/keycodes'], function (exports, Ember, Suggestions, DropDownKeyboardNav, KeyCodes) {

  'use strict';

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  exports['default'] = Ember['default'].Component.extend(Suggestions['default'], DropDownKeyboardNav['default'], {
    //params
    title: '',
    options: new Ember['default'].A([]),
    value: '',
    onValueChange: null,
    placeholder: '',

    classNames: ['ko-option-list-drill-down'],
    classNameBindings: ['isSuggestionDropdown:active', 'isHierarchyDropdown:active'],
    attributeBindings: ['tabindex', 'role'],
    tabindex: 0,
    tagName: 'div',
    searchTerm: '',
    hierarchyLevels: Ember['default'].ArrayProxy.create(),
    suggestions: '',
    currentPath: new Ember['default'].A([]),
    isMouseAccess: false,
    keyboardPosition: 0,
    isSuggestionDropdown: false,
    isHierarchyDropdown: false,
    showValue: true,
    showExpandedByDefault: false,

    formattedValue: Ember['default'].computed('value', function () {
      var result = this.get('value');
      if (result && result.indexOf('/') !== -1) {
        // Add spaces around slashes for readability.
        result = result.split('/').join(' / ');
      }
      return result;
    }),

    showHierarchyDropdown: function showHierarchyDropdown() {
      this.set('isSuggestionDropdown', false);
      this.set('isHierarchyDropdown', true);
    },

    showSuggestionDropdown: function showSuggestionDropdown() {
      this.set('isHierarchyDropdown', false);
      this.set('isSuggestionDropdown', true);
    },

    hideDropdowns: function hideDropdowns() {
      this.set('isHierarchyDropdown', false);
      this.set('isSuggestionDropdown', false);
    },

    dataForThisLevel: function dataForThisLevel(options, item) {
      var currentPath = this.get('currentPath');
      currentPath.pushObject(item);
      var currentPathString = this.convertBranchToOptionsFormat(currentPath[currentPath.length - 1].text);
      return options.filter(function (i) {
        return i.value.includes(currentPathString);
      });
    },

    convertBranchToOptionsFormat: function convertBranchToOptionsFormat(branch) {
      return branch.split(' / ').join(',');
    },

    getOptionUpToLevel: function getOptionUpToLevel(option, level) {
      return option.split(',').slice(0, level).join(' / ');
    },

    checkIfBranchContinues: function checkIfBranchContinues(options, branch, level) {
      var reformatedBranch = this.convertBranchToOptionsFormat(branch);
      var matchesForThisBranch = options.filter(function (i) {
        return i.value.includes(reformatedBranch);
      });
      var nextLevel = [];

      matchesForThisBranch.forEach(function (item) {
        var nextLevelItem = item.value.split(',')[level];
        if (nextLevelItem) {
          nextLevel.push(nextLevelItem);
        }
      });

      if (nextLevel.length) {
        return true;
      } else {
        return false;
      }
    },

    createItemObjects: function createItemObjects(options, branch, level) {
      var _this = this;

      var itemObjects = new Ember['default'].A();

      branch.forEach(function (item) {
        var newItemObject = Ember['default'].Object.create({
          isBranchItem: _this.checkIfBranchContinues(options, item, level),
          text: item
        });

        itemObjects.pushObject(newItemObject);
      });

      return itemObjects;
    },

    extractRootLevelHierarchyItems: function extractRootLevelHierarchyItems() {
      var options = this.get('options');
      var firstLevel = options.map(function (i) {
        return i.value.split(',')[0];
      });
      var rootLevelItems = [].concat(_toConsumableArray(new Set(firstLevel)));
      return this.createItemObjects(options, rootLevelItems, 1);
    },

    itemSelected: function itemSelected(id) {
      this.resetState();
      this.sendAction('onValueChange', id);
    },

    addNextLevel: function addNextLevel(options, level, items) {
      var hierarchyLevels = this.get('hierarchyLevels');
      var itemObjects = this.createItemObjects(options, items, level);
      var newLevel = Ember['default'].Object.create({
        isActive: true,
        isTopLevel: false,
        levelNumber: level,
        items: itemObjects
      });
      var previousLevel = hierarchyLevels.objectAt(hierarchyLevels.length - 1);
      previousLevel.set('isActive', false);
      hierarchyLevels.pushObject(newLevel);
      this.set('skipNextFocusOut', true);
    },

    updateSuggestions: function updateSuggestions() {
      var searchTerm = this.get('searchTerm');
      var options = this.get('options');
      this.set('suggestions', this.matches(searchTerm, options.map(function (i) {
        return i.value;
      })));
    },

    resetState: function resetState() {
      var showExpandedByDefault = this.get('showExpandedByDefault');
      var options = this.get('options');
      var hierarchyLevels = new Ember['default'].A([]);
      var rootLevelItems = this.extractRootLevelHierarchyItems();
      var rootLevel = Ember['default'].Object.create({
        isActive: true,
        isTopLevel: true,
        levelNumber: 0,
        items: rootLevelItems
      });
      hierarchyLevels.pushObject(rootLevel);
      this.set('hierarchyLevels', hierarchyLevels);

      this.set('currentPath', new Ember['default'].A([]));
      this.set('searchTerm', '');
      this.set('suggestions', options.map(function (i) {
        return i.value;
      }));
      this.resetKeyboardPosition();

      if (showExpandedByDefault) {
        this.set('showValue', false);
        this.showHierarchyDropdown(true);
      } else {
        this.set('showValue', true);
        this.hideDropdowns();
      }
    },

    resetKeyboardPosition: function resetKeyboardPosition() {
      this.set('keyboardPosition', 0);
    },

    didReceiveAttrs: function didReceiveAttrs() {
      this.resetState();
    },

    click: function click() {
      this.$('input').focus();
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn() {
      this.set('showValue', false);
      var mouseAccess = this.get('isMouseAccess');
      var searchTerm = this.get('searchTerm');
      if (searchTerm.length === 0) {
        this.showHierarchyDropdown();
      }
      if (!mouseAccess) {
        if (searchTerm.length > 0) {
          this.showSuggestionDropdown();
        } else {
          this.showHierarchyDropdown();
        }
      }
    },

    focusOut: function focusOut() {
      var skipNextFocusOut = this.get('skipNextFocusOut');
      var showExpandedByDefault = this.get('showExpandedByDefault');

      if (showExpandedByDefault) {
        return false;
      }

      if (skipNextFocusOut) {
        this.set('skipNextFocusOut', false);
        this.$('input').focus();
        return false;
      } else {
        this.set('showValue', true);
        this.set('isMouseAccess', false);
        this.resetKeyboardPosition();
        this.hideDropdowns();
      }
    },

    keyUp: function keyUp(e) {
      var searchTerm = this.get('searchTerm');

      if (e.keyCode !== KeyCodes.up && e.keyCode !== KeyCodes.down && e.keyCode !== KeyCodes.right && e.keyCode !== KeyCodes.enter && e.keyCode !== KeyCodes.tab) {
        this.set('showValue', false);
        this.updateSuggestions();
        if (e.keyCode === KeyCodes.backspace && searchTerm <= 1) {
          this.showHierarchyDropdown();
        } else {
          this.showSuggestionDropdown();
        }
      }
    },

    keyDown: function keyDown(e) {
      var suggestionsListSelector = 'ul:first';
      var hierarchyListSelector = 'ul:last';
      var currentHierarchyList = this.$('ul:last li');
      var isSuggestionDropdown = this.get('isSuggestionDropdown');
      var options = this.get('options');

      switch (e.keyCode) {
        case KeyCodes.up:
          {
            if (isSuggestionDropdown) {
              this.moveSelectedItem(options.length, suggestionsListSelector, 'up', 'keyboardPosition');
              return false;
            } else {
              this.moveSelectedItem(currentHierarchyList.length, hierarchyListSelector, 'up', 'keyboardPosition');
              return false;
            }
            break;
          }
        case KeyCodes.down:
          {
            if (isSuggestionDropdown) {
              this.moveSelectedItem(options.length, suggestionsListSelector, 'down', 'keyboardPosition');
              return false;
            } else {
              this.moveSelectedItem(currentHierarchyList.length, hierarchyListSelector, 'down', 'keyboardPosition');
              return false;
            }
            break;
          }
        case KeyCodes.tab:
          {
            break;
          }
        case KeyCodes.right:
        case KeyCodes.enter:
          {
            var keyboardPosition = this.get('keyboardPosition');

            if (isSuggestionDropdown) {
              this.$('ul:first li:nth-of-type(' + keyboardPosition + ')').click();
              this.hideDropdowns();
            } else {
              this.$('ul:last li:nth-of-type(' + keyboardPosition + ')').click();
            }
            this.resetKeyboardPosition();
            return false;
          }
        default:
          {
            this.$('input').focus();
          }
      }
    },

    actions: {
      searchTermChanged: function searchTermChanged(searchTerm) {
        this.set('searchTerm', searchTerm);
        this.resetKeyboardPosition();
      },

      suggestionSelected: function suggestionSelected(suggestion) {
        var selectedObject = this.get('options').find(function (i) {
          return i.value === suggestion;
        });
        var showExpandedByDefault = this.get('showExpandedByDefault');

        this.set('isSuggestionDropdown', false);
        this.resetState();

        if (!showExpandedByDefault) {
          this.set('showValue', true);
        }

        this.sendAction('onValueChange', selectedObject.id);
      },

      upOneHierarchyLevel: function upOneHierarchyLevel() {
        var currentPath = this.get('currentPath');
        var hierarchyLevels = this.get('hierarchyLevels');

        currentPath.popObject();
        this.set('skipNextFocusOut', true);
        hierarchyLevels.popObject();

        var previousLevel = hierarchyLevels.objectAt(hierarchyLevels.length - 1);
        previousLevel.set('isActive', true);
      },

      hierarchyBranchSelected: function hierarchyBranchSelected(item) {
        var _this2 = this;

        var options = this.get('options');
        var dataForThisLevel = this.dataForThisLevel(options, item);
        var currentPath = this.get('currentPath');
        var nextLevel = currentPath.length + 1;

        var newListItems = dataForThisLevel.map(function (i) {
          return _this2.getOptionUpToLevel(i.value, nextLevel);
        });

        this.addNextLevel(options, nextLevel, newListItems);
      },

      hierarchyItemSelected: function hierarchyItemSelected(item) {
        var options = this.get('options');
        var dataForThisLevel = this.dataForThisLevel(options, item);
        this.itemSelected(dataForThisLevel[0].id);
      }
    }
  });

});
define('frontend-cp/components/ko-option-list-drill-down/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","info-bar-item__header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          morphs[1] = dom.createAttrMorph(element5, 'class');
          morphs[2] = dom.createMorphAt(element5,0,0);
          return morphs;
        },
        statements: [
          ["content","title",["loc",[null,[2,38],[2,47]]]],
          ["attribute","class",["concat",["ko-option-list-drill-down__value ",["subexpr","unless",[["get","showValue",["loc",[null,[3,56],[3,65]]]],"u-hidden"],[],["loc",[null,[3,47],[3,78]]]]]]],
          ["content","formattedValue",["loc",[null,[3,80],[3,98]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","dropdown-menu__item");
          dom.setAttribute(el1,"tabindex","-1");
          dom.setAttribute(el1,"role","menuitem");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(element4,0,0);
          return morphs;
        },
        statements: [
          ["element","action",["suggestionSelected",["get","suggestion",["loc",[null,[11,64],[11,74]]]]],[],["loc",[null,[11,34],[11,76]]]],
          ["inline","ko-embolden",[["subexpr","ko-slasherizer",[["get","suggestion",["loc",[null,[11,135],[11,145]]]]],[],["loc",[null,[11,119],[11,146]]]],["get","searchTerm",["loc",[null,[11,147],[11,157]]]]],[],["loc",[null,[11,105],[11,159]]]]
        ],
        locals: ["suggestion"],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","box dropdown-menu__item");
            dom.setAttribute(el1,"tabindex","-1");
            dom.setAttribute(el1,"role","menuitem");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","i-chevron-large-left i-color-grey--dark");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    Back\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element2);
            return morphs;
          },
          statements: [
            ["element","action",["upOneHierarchyLevel"],[],["loc",[null,[17,38],[17,70]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 28,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","dropdown-menu__item dropdown-menu__item--tight");
              dom.setAttribute(el1,"tabindex","-1");
              dom.setAttribute(el1,"role","menuitem");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","i-chevron-large-right i-color-grey--dark");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(element1,1,1);
              return morphs;
            },
            statements: [
              ["element","action",["hierarchyBranchSelected",["get","item",["loc",[null,[24,98],[24,102]]]]],[],["loc",[null,[24,63],[24,104]]]],
              ["content","item.text",["loc",[null,[25,6],[25,19]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","dropdown-menu__item dropdown-menu__item--tight");
              dom.setAttribute(el1,"tabindex","-1");
              dom.setAttribute(el1,"role","menuitem");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createMorphAt(element0,1,1);
              return morphs;
            },
            statements: [
              ["element","action",["hierarchyItemSelected",["get","item",["loc",[null,[29,96],[29,100]]]]],[],["loc",[null,[29,63],[29,102]]]],
              ["content","item.text",["loc",[null,[30,6],[30,19]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","item.isBranchItem",["loc",[null,[23,10],[23,27]]]]],[],0,1,["loc",[null,[23,4],[32,11]]]]
          ],
          locals: ["item"],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 35,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1,"role","menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [0]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createMorphAt(element3,1,1);
          morphs[2] = dom.createMorphAt(element3,2,2);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["dropdown-menu dropdown-menu--popover ",["subexpr","unless",[["get","isHierarchyDropdown",["loc",[null,[15,57],[15,76]]]],"u-hidden"],[],["loc",[null,[15,48],[15,89]]]]," ",["subexpr","unless",[["get","level.isActive",["loc",[null,[15,99],[15,113]]]],"u-hidden"],[],["loc",[null,[15,90],[15,126]]]]," list-bare"]]],
          ["block","unless",[["get","level.isTopLevel",["loc",[null,[16,12],[16,28]]]]],[],0,null,["loc",[null,[16,2],[21,13]]]],
          ["block","each",[["get","level.items",["loc",[null,[22,10],[22,21]]]]],[],1,null,["loc",[null,[22,2],[33,11]]]]
        ],
        locals: ["level"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-option-list-drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"role","menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        morphs[2] = dom.createAttrMorph(element6, 'class');
        morphs[3] = dom.createMorphAt(element6,1,1);
        morphs[4] = dom.createMorphAt(fragment,5,5,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","unless",[["get","showExpandedByDefault",["loc",[null,[1,10],[1,31]]]]],[],0,null,["loc",[null,[1,0],[4,11]]]],
        ["inline","ko-search",[],["placeholder",["subexpr","@mut",[["get","placeholder",["loc",[null,[6,14],[6,25]]]]],[],[]],"hidden",["subexpr","@mut",[["get","showValue",["loc",[null,[7,9],[7,18]]]]],[],[]],"onSearchTermChange","searchTermChanged"],["loc",[null,[5,0],[8,42]]]],
        ["attribute","class",["concat",["dropdown-menu dropdown-menu--popover ",["subexpr","unless",[["get","isSuggestionDropdown",["loc",[null,[9,57],[9,77]]]],"u-hidden"],[],["loc",[null,[9,48],[9,90]]]]," list-bare"]]],
        ["block","each",[["get","suggestions",["loc",[null,[10,10],[10,21]]]]],[],1,null,["loc",[null,[10,2],[12,11]]]],
        ["block","each",[["get","hierarchyLevels",["loc",[null,[14,8],[14,23]]]]],[],2,null,["loc",[null,[14,0],[35,9]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-organisation-action-menu/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    organisation: null,

    sessionService: Ember['default'].inject.service('session'),
    permissionService: Ember['default'].inject.service('permissions'),
    intlService: Ember['default'].inject.service('intl'),

    hasDeleteOrganisationPermission: Ember['default'].computed('sessionService.permissions', 'organisation', function () {
      return this.get('permissionService').has('app.organisation.delete', this.get('organisation'));
    }),

    actions: {
      deleteOrganisation: function deleteOrganisation() {
        if (confirm(this.get('intlService').findTranslationByKey('generic.confirm.delete').translation)) {
          this.get('organisation').destroyRecord();
        }
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }

  });

});
define('frontend-cp/components/ko-organisation-action-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","button button--default button--dropdown");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["deleteOrganisation"],[],["loc",[null,[16,53],[16,84]]]]],
                ["inline","format-message",[["subexpr","intl-get",["organisation.delete_organisation"],[],["loc",[null,[17,29],[17,74]]]]],[],["loc",[null,[17,12],[17,76]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["changeUserPassword"],[],["loc",[null,[22,53],[22,84]]]]],
                ["inline","format-message",[["subexpr","intl-get",["users.changepassword"],[],["loc",[null,[23,29],[23,62]]]]],[],["loc",[null,[23,12],[23,64]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","hasDeleteOrganisationPermission",["loc",[null,[15,12],[15,43]]]]],[],0,null,["loc",[null,[15,6],[19,13]]]],
              ["block","if",[["get","hasChangePasswordEmailPermission",["loc",[null,[21,12],[21,44]]]]],[],1,null,["loc",[null,[21,6],[25,13]]]]
            ],
            locals: [],
            templates: [child0, child1]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-dropdown-select__content","style",["subexpr","@mut",[["get","contentStyle",["loc",[null,[14,66],[14,78]]]]],[],[]]],0,null,["loc",[null,[14,4],[26,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[8,12],[8,16]]]],"button"],[],["loc",[null,[8,8],[8,26]]]]],[],0,null,["loc",[null,[8,2],[12,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[13,12],[13,16]]]],"content"],[],["loc",[null,[13,8],[13,27]]]]],[],1,null,["loc",[null,[13,2],[27,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["alignRight",true,"onFocusOut","hideMenu","onFocusIn","showMenu","hideOnChildFocus",true,"hideOnClick",true],0,null,["loc",[null,[1,0],[28,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-organisation-content/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['ko-organisation-content'],

    store: Ember['default'].inject.service(),
    intl: Ember['default'].inject.service(),
    notification: Ember['default'].inject.service('notification'),
    sessionService: Ember['default'].inject.service('session'),
    tagSuggestionService: Ember['default'].inject.service('suggestion/tag'),
    customFieldsList: Ember['default'].inject.service('custom-fields/list'),

    suggestedTags: [],
    erroredDomains: [],
    errors: [],

    isDomainEdited: false,
    editedCustomFields: null,

    initCustomFields: Ember['default'].on('init', function () {
      this.set('editedCustomFields', new Ember['default'].Object());
    }),

    tags: Ember['default'].computed('model.tags.[]', function () {
      return this.get('model.tags').map(function (tag) {
        return tag.get('name');
      }).uniq();
    }),

    domains: Ember['default'].computed('model.domains.[]', function () {
      return this.get('model.domains').map(function (domain) {
        return domain.get('domain');
      }).uniq();
    }),

    errorMap: Ember['default'].computed('errors', function () {
      var errorMap = {};
      this.get('errors').forEach(function (error) {
        errorMap[error.parameter] = true;
      });
      return errorMap;
    }),

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('isTagsFieldEdited', false);
      this.set('isDomainEdited', false);
      this.set('isNameEdited', false);
      this.set('isDomainErrored', false);
    },

    organisationDates: Ember['default'].computed('model.createdAt', 'model.updatedAt', 'model.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created').translation,
        value: this.get('model.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated').translation,
        value: this.get('model.updatedAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.lastseen').translation,
        value: this.get('model.visitedAt') }];
    }),

    extractDomainsFromErrors: function extractDomainsFromErrors(notifications) {
      // TODO Stub until API works
      return ['gmail.com', 'yahoo.com'];
    },

    customFields: Ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    actions: {
      addTag: function addTag(tag) {
        var newTag = this.get('store').createRecord('tag', { name: tag });
        this.get('model.tags').pushObject(newTag);
        this.set('isTagsFieldEdited', this.get('model').hasDirtyHasManyRelationship('tags'));
      },

      removeTag: function removeTag(tagName) {
        var tag = this.get('model.tags').find(function (tag) {
          return tag.get('name') === tagName;
        });
        if (tag) {
          this.get('model.tags').removeObject(tag);
          this.set('isTagsFieldEdited', this.get('model').hasDirtyHasManyRelationship('tags'));
        }
      },

      suggestTags: function suggestTags(searchTerm, selectedTags) {
        var _this = this;

        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggest(searchTerm).then(function (data) {
          data = suggestionService.exclude(data, selectedTags);
          _this.set('suggestedTags', data.map(function (tag) {
            return tag.get('name');
          }));
        });
      },

      addDomain: function addDomain(domainName) {
        if (domainName) {
          var domain = this.get('store').createRecord('identityDomain', {
            domain: domainName
          });
          this.get('model.domains').pushObject(domain);
          this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        }
      },

      removeDomain: function removeDomain(domainName) {
        var domain = this.get('model.domains').find(function (domain) {
          return domain.get('domain') === domainName;
        });
        if (domain) {
          this.get('model.domains').removeObject(domain);
          this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        }
        return false;
      },

      setName: function setName(name) {
        this.set('model.name', name);
        this.set('isNameEdited', this.get('model').hasDirtyAttribute('name'));
      },

      submit: function submit() {
        var _this2 = this;

        this.get('model').save().then(function () {
          _this2.get('notification').add({
            type: 'success',
            title: _this2.get('intl').findTranslationByKey('organisation.organisation.updated').translation,
            autodismiss: true
          });
          _this2.resetForm();
        }, function (e) {
          _this2.set('errors', e.errors);
          _this2.set('erroredDomains', _this2.extractDomainsFromErrors(e.notifications));
        });
      }
    }
  });

});
define('frontend-cp/components/ko-organisation-content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 40,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["users.add_a_note"],[],["loc",[null,[39,27],[39,56]]]]],[],["loc",[null,[39,10],[39,58]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 8
              },
              "end": {
                "line": 60,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-field/tags",[],["selectedTags",["subexpr","@mut",[["get","tags",["loc",[null,[52,39],[52,43]]]]],[],[]],"suggestedTags",["subexpr","@mut",[["get","suggestedTags",["loc",[null,[53,26],[53,39]]]]],[],[]],"title",["subexpr","format-message",[["subexpr","intl-get",["users.tags"],[],["loc",[null,[54,34],[54,57]]]]],[],["loc",[null,[54,18],[54,58]]]],"newTagText",["subexpr","format-message",[["subexpr","intl-get",["users.newtag"],[],["loc",[null,[55,39],[55,64]]]]],[],["loc",[null,[55,23],[55,65]]]],"addTagText",["subexpr","format-message",[["subexpr","intl-get",["users.addtag"],[],["loc",[null,[56,39],[56,64]]]]],[],["loc",[null,[56,23],[56,65]]]],"onTagAddition","addTag","onTagRemoval","removeTag","onTagSuggestion","suggestTags"],["loc",[null,[52,10],[59,43]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 62,
                "column": 8
              },
              "end": {
                "line": 70,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-field/tags",[],["errorTags",["subexpr","@mut",[["get","erroredDomains",["loc",[null,[66,22],[66,36]]]]],[],[]],"selectedTags",["subexpr","@mut",[["get","domains",["loc",[null,[67,25],[67,32]]]]],[],[]],"onTagAddition","addDomain","onTagRemoval","removeDomain"],["loc",[null,[65,10],[69,41]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 74,
                    "column": 12
                  },
                  "end": {
                    "line": 83,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","component",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[75,37],[75,66]]]],["get","field.fieldType",["loc",[null,[75,67],[75,82]]]]],[],["loc",[null,[75,26],[75,83]]]]],["customFieldsModel",["subexpr","@mut",[["get","model.customFields",["loc",[null,[76,34],[76,52]]]]],[],[]],"field",["subexpr","@mut",[["get","field",["loc",[null,[77,22],[77,27]]]]],[],[]],"fieldValue",["subexpr","ko-helper",[["get","customFieldsList.findCustomFieldValue",["loc",[null,[78,38],[78,75]]]],["get","model.customFields",["loc",[null,[78,76],[78,94]]]],["get","field",["loc",[null,[78,95],[78,100]]]]],[],["loc",[null,[78,27],[78,101]]]],"title",["subexpr","@mut",[["get","field.title",["loc",[null,[79,22],[79,33]]]]],[],[]],"errors",["subexpr","@mut",[["get","errors",["loc",[null,[80,23],[80,29]]]]],[],[]],"editedCustomFields",["subexpr","@mut",[["get","editedCustomFields",["loc",[null,[81,35],[81,53]]]]],[],[]]],["loc",[null,[75,14],[82,16]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 73,
                  "column": 10
                },
                "end": {
                  "line": 84,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","field.isEnabled",["loc",[null,[74,18],[74,33]]]]],[],0,null,["loc",[null,[74,12],[83,19]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 72,
                "column": 8
              },
              "end": {
                "line": 85,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[73,27],[73,56]]]],["get","field.fieldType",["loc",[null,[73,57],[73,72]]]]],[],["loc",[null,[73,16],[73,73]]]]],[],0,null,["loc",[null,[73,10],[84,17]]]]
          ],
          locals: ["field"],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 88,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","info-bar-item");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"class","button button--primary u-1/1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(6);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0,0,0);
          morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,9,9,contextualElement);
          return morphs;
        },
        statements: [
          ["element","action",["submit"],[],["loc",[null,[46,55],[46,74]]]],
          ["inline","format-message",[["subexpr","intl-get",["cases.submit"],[],["loc",[null,[46,92],[46,117]]]]],[],["loc",[null,[46,75],[46,119]]]],
          ["block","ko-info-bar/field",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.tags"],[],["loc",[null,[49,51],[49,74]]]]],[],["loc",[null,[49,35],[49,75]]]],"isEdited",["subexpr","@mut",[["get","isTagsFieldEdited",["loc",[null,[50,19],[50,36]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","errorMap.tags",["loc",[null,[51,20],[51,33]]]]],[],[]]],0,null,["loc",[null,[49,8],[60,30]]]],
          ["block","ko-info-bar/field",[],["title",["subexpr","format-message",[["subexpr","intl-get",["organisation.domains"],[],["loc",[null,[62,51],[62,84]]]]],[],["loc",[null,[62,35],[62,85]]]],"isEdited",["subexpr","@mut",[["get","isDomainEdited",["loc",[null,[63,19],[63,33]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","errorMap.domains",["loc",[null,[64,20],[64,36]]]]],[],[]]],1,null,["loc",[null,[62,8],[70,30]]]],
          ["block","each",[["get","customFields",["loc",[null,[72,16],[72,28]]]]],[],2,null,["loc",[null,[72,8],[85,17]]]],
          ["inline","ko-info-bar/metadata",[],["rows",["subexpr","@mut",[["get","organisationDates",["loc",[null,[87,36],[87,53]]]]],[],[]]],["loc",[null,[87,8],[87,55]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-2/3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6,"src","images/icons/organization.svg");
        dom.setAttribute(el6,"class","header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__body u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6,"class","header__title ko-organisation-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/3 u-mt");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","list-inline t-right");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-3/4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","content__main content__main--has-infobar");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/4");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1, 1, 3, 1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [3, 1, 5]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element3, [1, 1]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element3, [3]),1,1);
        return morphs;
      },
      statements: [
        ["inline","ko-editable-text",[],["value",["subexpr","@mut",[["get","model.name",["loc",[null,[11,22],[11,32]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isNameEdited",["loc",[null,[12,25],[12,37]]]]],[],[]],"onValueChange","setName","placeholder",["subexpr","format-message",[["subexpr","intl-get",["organisation.new_organisation_placeholder"],[],["loc",[null,[14,44],[14,98]]]]],[],["loc",[null,[14,28],[14,99]]]]],["loc",[null,[10,12],[15,14]]]],
        ["inline","ko-organisation-action-menu",[],["permissions",["subexpr","@mut",[["get","sessionService.permissions",["loc",[null,[27,23],[27,49]]]]],[],[]],"organisation",["subexpr","@mut",[["get","model",["loc",[null,[28,24],[28,29]]]]],[],[]]],["loc",[null,[26,9],[29,11]]]],
        ["block","ko-text-editor",[],["class","ko-organisation-content__text-editor","viewName","postEditor"],0,null,["loc",[null,[38,8],[40,27]]]],
        ["block","ko-info-bar",[],[],1,null,["loc",[null,[44,6],[88,22]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-page-container/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-page-container/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-page-container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-pagination/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    currentPage: 1,
    loadingPage: null,
    pageCount: 1,

    previousPage: Ember['default'].computed('currentPage', function () {
      return this.get('currentPage') - 1;
    }),

    nextPage: Ember['default'].computed('currentPage', function () {
      return this.get('currentPage') + 1;
    }),

    hasPreviousPage: Ember['default'].computed('currentPage', function () {
      return this.get('currentPage') > 1;
    }),

    hasNextPage: Ember['default'].computed('currentPage', 'pageCount', function () {
      return this.get('currentPage') < this.get('pageCount');
    })
  });

});
define('frontend-cp/components/ko-pagination/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 6,
                "column": 33
              }
            },
            "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","ko-loader",["loc",[null,[6,20],[6,33]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 7,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[6,6],[6,47]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",[1],[],["loc",[null,[8,6],[8,17]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 33
              }
            },
            "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","ko-loader",["loc",[null,[13,20],[13,33]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[13,6],[13,47]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 4
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",[["get","previousPage",["loc",[null,[15,14],[15,26]]]]],[],["loc",[null,[15,6],[15,28]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child4 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 33
              }
            },
            "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","ko-loader",["loc",[null,[20,20],[20,33]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 4
            },
            "end": {
              "line": 21,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[20,6],[20,47]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 23,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",[["get","nextPage",["loc",[null,[22,14],[22,22]]]]],[],["loc",[null,[22,6],[22,24]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 6
              },
              "end": {
                "line": 27,
                "column": 33
              }
            },
            "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","ko-loader",["loc",[null,[27,20],[27,33]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[27,6],[27,47]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child7 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 4
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","yield",[["get","pageCount",["loc",[null,[29,14],[29,23]]]]],[],["loc",[null,[29,6],[29,25]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 33,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-pagination__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-pagination__pageNumber");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2,"class","ko-pagination__pageCount");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element0, [9]);
        var element4 = dom.childAt(element0, [11]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1,1,1);
        morphs[4] = dom.createAttrMorph(element2, 'class');
        morphs[5] = dom.createMorphAt(element2,1,1);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(element3,1,1);
        morphs[8] = dom.createAttrMorph(element4, 'class');
        morphs[9] = dom.createMorphAt(element4,1,1);
        return morphs;
      },
      statements: [
        ["content","currentPage",["loc",[null,[2,42],[2,57]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.paginatorof"],[],["loc",[null,[3,58],[3,90]]]]],["number",["subexpr","@mut",[["get","pageCount",["loc",[null,[3,98],[3,107]]]]],[],[]]],["loc",[null,[3,41],[3,109]]]],
        ["attribute","class",["concat",["ko-pagination__first i-chevron-double-up i-center ",["subexpr","if",[["get","hasPreviousPage",["loc",[null,[4,69],[4,84]]]],"ko-pagination__first--available",""],[],["loc",[null,[4,64],[4,123]]]]]]],
        ["block","if",[["subexpr","eq",[["get","loadingPage",["loc",[null,[5,14],[5,25]]]],1],[],["loc",[null,[5,10],[5,28]]]]],[],0,1,["loc",[null,[5,4],[9,11]]]],
        ["attribute","class",["concat",["ko-pagination__previous i-chevron-large-up i-center i-size-18 ",["subexpr","if",[["get","hasPreviousPage",["loc",[null,[11,81],[11,96]]]],"ko-pagination__previous--available",""],[],["loc",[null,[11,76],[11,138]]]]]]],
        ["block","if",[["subexpr","eq",[["get","loadingPage",["loc",[null,[12,14],[12,25]]]],["get","previousPage",["loc",[null,[12,26],[12,38]]]]],[],["loc",[null,[12,10],[12,39]]]]],[],2,3,["loc",[null,[12,4],[16,11]]]],
        ["attribute","class",["concat",["ko-pagination__next i-chevron-large-down i-center i-size-18 ",["subexpr","if",[["get","hasNextPage",["loc",[null,[18,79],[18,90]]]],"ko-pagination__next--available",""],[],["loc",[null,[18,74],[18,128]]]]]]],
        ["block","if",[["subexpr","eq",[["get","loadingPage",["loc",[null,[19,14],[19,25]]]],["get","nextPage",["loc",[null,[19,26],[19,34]]]]],[],["loc",[null,[19,10],[19,35]]]]],[],4,5,["loc",[null,[19,4],[23,11]]]],
        ["attribute","class",["concat",["ko-pagination__last i-chevron-double-down i-center ",["subexpr","if",[["get","hasNextPage",["loc",[null,[25,70],[25,81]]]],"ko-pagination__last--available",""],[],["loc",[null,[25,65],[25,119]]]]]]],
        ["block","if",[["subexpr","eq",[["get","loadingPage",["loc",[null,[26,14],[26,25]]]],["get","pageCount",["loc",[null,[26,26],[26,35]]]]],[],["loc",[null,[26,10],[26,36]]]]],[],6,7,["loc",[null,[26,4],[30,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  }()));

});
define('frontend-cp/components/ko-people/component', ['exports', 'ember', 'frontend-cp/components/mixins/context-menu-set'], function (exports, Ember, ContextMenuSetComponentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(ContextMenuSetComponentMixin['default'], {
    title: null,
    inputPlaceholderText: null,
    filterNotFoundText: null,
    helpText: null,

    actions: {
      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });

});
define('frontend-cp/components/ko-people/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-people-popover",[],["suggestedPeople",["subexpr","@mut",[["get","suggestedPeople",["loc",[null,[7,18],[7,33]]]]],[],[]],"selectedPeople",["subexpr","@mut",[["get","selectedPeople",["loc",[null,[8,17],[8,31]]]]],[],[]],"suggestedPeopleTotal",["subexpr","@mut",[["get","suggestedPeopleTotal",["loc",[null,[9,23],[9,43]]]]],[],[]],"isLoading",["subexpr","@mut",[["get","suggestedPeopleLoading",["loc",[null,[10,12],[10,34]]]]],[],[]],"filterNotFoundText",["subexpr","@mut",[["get","filterNotFoundText",["loc",[null,[11,21],[11,39]]]]],[],[]],"helpText",["subexpr","@mut",[["get","helpText",["loc",[null,[12,11],[12,19]]]]],[],[]],"inputPlaceholderText",["subexpr","@mut",[["get","inputPlaceholderText",["loc",[null,[13,23],[13,43]]]]],[],[]],"emailErrorText",["subexpr","@mut",[["get","emailErrorText",["loc",[null,[14,17],[14,31]]]]],[],[]],"isShowing",["subexpr","@mut",[["get","isShowing",["loc",[null,[15,12],[15,21]]]]],[],[]],"suggestPeople","onPeopleSuggestion"],["loc",[null,[6,2],[16,38]]]]
        ],
        locals: ["isShowing"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 26
          }
        },
        "moduleName": "frontend-cp/components/ko-people/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-context-modal-item",[],["onPeopleAutocomplete","onPeopleAutocomplete","index","0","title",["subexpr","@mut",[["get","title",["loc",[null,[4,8],[4,13]]]]],[],[]],"contextModalId",["subexpr","@mut",[["get","contextModalId",["loc",[null,[4,29],[4,43]]]]],[],[]]],0,null,["loc",[null,[1,0],[18,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-people-add/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    click: function click(event) {
      this.sendAction('addParticipant', event);
    }
  });

});
define('frontend-cp/components/ko-people-add/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-people-add/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","i-plus");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-people-list/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    actions: {
      addParticipant: function addParticipant(event) {
        this.sendAction('addParticipant', event);
      }
    }
  });

});
define('frontend-cp/components/ko-people-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1,"class","ko-people-list__item");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          morphs[1] = dom.createAttrMorph(element0, 'alt');
          return morphs;
        },
        statements: [
          ["attribute","src",["concat",[["get","participant.image",["loc",[null,[2,45],[2,62]]]]]]],
          ["attribute","alt",["concat",[["get","participant.alt",["loc",[null,[2,73],[2,88]]]]]]]
        ],
        locals: ["participant"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-people-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","participants",["loc",[null,[1,8],[1,20]]]]],[],0,null,["loc",[null,[1,0],[3,9]]]],
        ["inline","ko-people-add",[],["addParticipant","addParticipant"],["loc",[null,[4,0],[4,49]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-people-popover/component', ['exports', 'ember', 'frontend-cp/lib/keycodes', 'frontend-cp/components/mixins/drop-down-keyboard-nav', 'frontend-cp/utils/format-validations'], function (exports, Ember, KeyCodes, DropDownKeyboardNav, format_validations) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(DropDownKeyboardNav['default'], {
    intl: Ember['default'].inject.service(),
    classNames: ['ko-people-popover'],

    isLoading: true,
    suggestedPeople: null,
    suggestedPeopleTotal: 0,
    selectedPeople: [],
    keyboardIndexPosition: 0,
    searchTerm: null,
    searchTermEmailNotValid: false,
    debounceQueryTimeout: 150,
    helpText: null,

    helpTextSafe: Ember['default'].computed('helpText', function () {
      return Ember['default'].String.htmlSafe(this.get('helpText'));
    }),

    filterNotFoundTextSafe: Ember['default'].computed('filterNotFoundText', function () {
      return Ember['default'].String.htmlSafe(this.get('filterNotFoundText'));
    }),

    searchAttempt: Ember['default'].computed('searchTerm', 'suggestedPeople', function () {
      return Boolean(this.get('searchTerm') && this.get('suggestedPeople') !== null);
    }),

    didShowingChange: Ember['default'].on('init', Ember['default'].observer('isShowing', function () {
      if (this.get('isShowing')) {
        this.$('.input-text').focus();
      }
    })),

    onSearchTerm: Ember['default'].observer('searchTerm', function () {
      this.searchTermDebounce(this, this.searchTermDebounceCallback);
    }),

    searchTermDebounce: function searchTermDebounce(scope, callback) {
      Ember['default'].run.debounce(scope, callback, this.get('debounceQueryTimeout'));
    },

    searchTermDebounceCallback: function searchTermDebounceCallback() {
      this.send('suggestPeople', this.get('searchTerm'), this.get('selectedPeople'));
    },

    setupComponent: Ember['default'].on('didInsertElement', function () {
      this.set('suggestedPeople', null);
      this.set('suggestedPeopleTotal', 0);
    }),

    keyDown: function keyDown(e) {
      var searchTerm = this.get('searchTerm');

      var keyboardIndexPosition = this.get('keyboardIndexPosition');
      var suggestedPeople = this.get('suggestedPeople');
      var suggestedPeopleLength = suggestedPeople ? suggestedPeople.length : 0;
      var suggestionsListSelector = '.ko-people-popover__filtered-list';

      this.set('searchTermEmailNotValid', false);

      switch (e.keyCode) {
        case KeyCodes.up:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'up', 'keyboardIndexPosition');

          if (keyboardIndexPosition - 1 === 0) {
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          return false;

        case KeyCodes.down:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'down', 'keyboardIndexPosition');
          return false;

        case KeyCodes.enter:
          if (keyboardIndexPosition === 0) {
            this.send('addPerson', searchTerm);
          } else {
            this.send('addPersonFromSuggestion', suggestedPeople.objectAt(keyboardIndexPosition - 1));
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          break;
      }
    },

    resetSearchQuery: function resetSearchQuery() {
      this.set('suggestedPeople', null);
      this.set('searchTerm', null);
      this.$('input').focus();
    },

    actions: {
      suggestPeople: function suggestPeople(searchTerm, selectedPeople) {
        this.sendAction('suggestPeople', searchTerm, selectedPeople);
      },

      addPerson: function addPerson(email) {
        email = email.replace(/\s+/, '');

        if (!email || !format_validations.validateEmailFormat(email)) {
          this.set('searchTermEmailNotValid', true);
          return;
        }
        this.set('searchTermEmailNotValid', false);

        if (this.get('selectedPeople').findBy('email', email)) {
          return this.resetSearchQuery();
        }

        this.get('selectedPeople').pushObject(Ember['default'].Object.create({ email: email }));

        this.resetSearchQuery();
      },

      addPersonFromSuggestion: function addPersonFromSuggestion(person) {
        this.get('selectedPeople').pushObject(person);

        this.resetSearchQuery();
      },

      removePerson: function removePerson(person) {
        this.get('selectedPeople').removeObject(person);
      }
    }

  });

});
define('frontend-cp/components/ko-people-popover/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-people-popover__input-error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["content","emailErrorText",["loc",[null,[17,48],[17,66]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 4
              },
              "end": {
                "line": 32,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1,"class","ko-people-popover__selected-list");
            dom.setAttribute(el1,"role","menu");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2,"class","ko-people-popover__selected-list-item");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","u-inline-block ko-people-popover__selected-item-name");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3,"class","ko-people-popover__cross i-cross-bold i-color-grey--light");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var element5 = dom.childAt(element4, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
            morphs[1] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [
            ["content","person.email",["loc",[null,[27,12],[27,28]]]],
            ["element","action",["removePerson",["get","person",["loc",[null,[29,103],[29,109]]]]],[],["loc",[null,[29,79],[29,111]]]]
          ],
          locals: ["person"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box ko-people-popover__selected-list-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","selectedPeople",["loc",[null,[23,12],[23,26]]]]],[],0,null,["loc",[null,[23,4],[32,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","box ko-people-popover__loader-block");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["class","ko-people-popover__loader"],["loc",[null,[38,4],[38,51]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 20
                  },
                  "end": {
                    "line": 58,
                    "column": 20
                  }
                },
                "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      , ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["content","person.parent.organization.name",["loc",[null,[57,24],[57,59]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 8
                },
                "end": {
                  "line": 65,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-people-popover__filtered-list-item");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","ko-people-popover__flag flag--small flag--auto");
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","flag__img");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","ko-people-popover__flag-body u-1/1 flag__body");
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("strong");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n                ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("span");
              dom.setAttribute(el4,"class","ko-people-popover__caption");
              var el5 = dom.createTextNode("\n                  ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5,"class","ko-people-popover__org-caption");
              var el6 = dom.createTextNode("\n");
              dom.appendChild(el5, el6);
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              var el6 = dom.createTextNode("                  ");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                  ");
              dom.appendChild(el4, el5);
              var el5 = dom.createElement("span");
              dom.setAttribute(el5,"class","ko-people-popover__email-caption");
              var el6 = dom.createComment("");
              dom.appendChild(el5, el6);
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("\n                ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element1, [3]);
              var element3 = dom.childAt(element2, [3]);
              var morphs = new Array(6);
              morphs[0] = dom.createAttrMorph(element0, 'tabindex');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
              morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]),0,0);
              morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]),1,1);
              morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
              return morphs;
            },
            statements: [
              ["attribute","tabindex",["concat",[["get","index",["loc",[null,[46,26],[46,31]]]]]]],
              ["element","action",["addPersonFromSuggestion",["get","person",["loc",[null,[45,49],[45,55]]]]],[],["loc",[null,[45,14],[45,57]]]],
              ["inline","ko-avatar",[],["size","large","class","ko-people-popover__image","avatar",["subexpr","@mut",[["get","person.parent.avatar",["loc",[null,[50,81],[50,101]]]]],[],[]]],["loc",[null,[50,16],[50,103]]]],
              ["content","person.parent.fullName",["loc",[null,[53,24],[53,50]]]],
              ["block","if",[["get","person.parent.organization.name",["loc",[null,[56,26],[56,57]]]]],[],0,null,["loc",[null,[56,20],[58,27]]]],
              ["content","person.email",["loc",[null,[60,65],[60,81]]]]
            ],
            locals: ["person","index"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 2
              },
              "end": {
                "line": 68,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-people-popover__filtered-list-container");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2,"class","ko-people-popover__filtered-list");
            dom.setAttribute(el2,"role","menu");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","suggestedPeople",["loc",[null,[44,16],[44,31]]]]],[],0,null,["loc",[null,[44,8],[65,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 71,
                  "column": 4
                },
                "end": {
                  "line": 75,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","box header__subtitle ko-people-popover__not-found");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["content","filterNotFoundTextSafe",["loc",[null,[73,8],[73,36]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 70,
                "column": 2
              },
              "end": {
                "line": 76,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","unless",[["get","suggestedPeople",["loc",[null,[71,14],[71,29]]]]],[],0,null,["loc",[null,[71,4],[75,15]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 76,
                "column": 2
              },
              "end": {
                "line": 80,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","box header__subtitle ko-people-popover__subtitle");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["content","helpTextSafe",["loc",[null,[78,6],[78,24]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 0
            },
            "end": {
              "line": 81,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","searchAttempt",["loc",[null,[41,8],[41,21]]]]],[],0,null,["loc",[null,[41,2],[68,9]]]],
          ["block","if",[["get","searchAttempt",["loc",[null,[70,8],[70,21]]]]],[],1,2,["loc",[null,[70,2],[80,9]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 81,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","box");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","input i--search-small");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","ko-people-popover__button-space");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4,"class","button button--default ko-people-popover__button");
        var el5 = dom.createTextNode("Add\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [4, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(element7,1,1);
        morphs[1] = dom.createElementMorph(element8);
        morphs[2] = dom.createMorphAt(element6,3,3);
        morphs[3] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[4] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","input",[],["class","ko-people-popover__input input-text u-1/1","type","text","placeholder",["subexpr","@mut",[["get","inputPlaceholderText",["loc",[null,[5,18],[5,38]]]]],[],[]],"value",["subexpr","@mut",[["get","searchTerm",["loc",[null,[6,12],[6,22]]]]],[],[]]],["loc",[null,[3,6],[7,8]]]],
        ["element","action",["addPerson",["get","searchTerm",["loc",[null,[10,35],[10,45]]]]],[],["loc",[null,[10,14],[10,47]]]],
        ["block","if",[["get","searchTermEmailNotValid",["loc",[null,[16,8],[16,31]]]]],[],0,null,["loc",[null,[16,2],[18,9]]]],
        ["block","if",[["get","selectedPeople",["loc",[null,[21,6],[21,20]]]]],[],1,null,["loc",[null,[21,0],[34,7]]]],
        ["block","if",[["get","isLoading",["loc",[null,[36,6],[36,15]]]]],[],2,3,["loc",[null,[36,0],[81,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('frontend-cp/components/ko-predicate-builder/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    definitions: [],
    onCollectionAddition: null,
    onCollectionRemoval: null,
    onAdditionOfRuleToCollection: null,
    onRuleDeletion: null,
    canDeleteCollection: false,

    actions: {
      addCollection: function addCollection() {
        this.sendAction('onCollectionAddition');
      },
      removeCollection: function removeCollection(collection) {
        this.sendAction('onCollectionRemoval', collection);
      },
      addRuleToCollection: function addRuleToCollection(collection) {
        this.sendAction('onAdditionOfRuleToCollection', collection);
      },
      removeRuleFromCollection: function removeRuleFromCollection(collection, rule) {
        this.sendAction('onRuleDeletion', collection, rule);
      }
    }
  });

});
define('frontend-cp/components/ko-predicate-builder/rule/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    definitions: [],
    canDeleteRule: false,
    rule: null,

    intlService: Ember['default'].inject.service('intl'),

    selectedDefinition: null,

    availableProperties: Ember['default'].computed('selectedDefinition.values', function () {
      if (!this.get('selectedDefinition')) {
        return false;
      }
      return this.get('selectedDefinition.values');
    }),

    filteredProperties: Ember['default'].computed('searchTerm', 'availableProperties.@each.string', function () {
      var searchTerm = this.get('searchTerm');

      var possibleProperties = this.get('availableProperties');
      return possibleProperties.filter(function (property) {
        return property.get('string').indexOf(searchTerm) !== -1;
      });
    }),

    isChoiceField: Ember['default'].computed('availableProperties.length', function () {
      return !!this.get('availableProperties.length');
    }),

    isCollectionField: Ember['default'].computed.equal('selectedDefinition.definitionType', 'collection'),

    possibleOperators: Ember['default'].computed('selectedDefinition', function () {
      return this.get('selectedDefinition.operators');
    }),

    /*
     * Fired whenever we change selectedDefinition
     */
    ensureSelectedOperatorIsPossible: function ensureSelectedOperatorIsPossible() {
      var possibleOperators = this.get('possibleOperators');
      var selectedOperator = this.get('rule.operator');

      if (possibleOperators.indexOf(selectedOperator) === -1) {
        this.set('rule.operator', possibleOperators.get('firstObject'));
      }
    },

    setSelectedDefaults: Ember['default'].on('init', function () {
      this.initializeSelectedDefinition();
    }),

    initializeSelectedDefinition: function initializeSelectedDefinition() {
      var _this = this;

      var field = this.get('rule.field');

      this.get('definitions').then(function (definitions) {
        definitions.forEach(function (definition) {
          if (definition.get('id') === field) {
            _this.set('selectedDefinition', definition);
          }
        });

        if (!_this.get('selectedDefinition')) {
          _this.set('selectedDefinition', _this.get('definitions.firstObject'));
        }

        _this.set('rule.field', _this.get('selectedDefinition.id'));
        _this.initializeSelectedOperator();
      });
    },

    initializeSelectedOperator: function initializeSelectedOperator() {
      if (!this.get('rule.operator')) {
        this.send('selectOperator', this.get('possibleOperators.firstObject'));
      }
    },

    selectedProperty: Ember['default'].computed('isChoiceField', 'rule.value', 'selectedDefinition.values.[]', function () {
      if (!this.get('isChoiceField')) {
        // this field is not a choice so two-way binding (not DDAU) (we don't use it)
        return;
      }

      var ruleValue = this.get('rule.value');

      return this.get('selectedDefinition.values').find(function (choice) {
        return String(choice.get('value')) === ruleValue;
      });
    }),

    selectedDefinitionLabel: Ember['default'].computed('selectedDefinition', function () {
      var selectedDefinition = this.get('selectedDefinition');
      if (selectedDefinition) {
        var translation = this.get('intlService').findTranslationByKey('admin.predicate_builder.' + selectedDefinition.id);
        return translation.translation;
      }
    }),

    propertyValueName: Ember['default'].computed('selectedProperty', function () {
      return this.get('selectedProperty.string');
    }),

    actions: {
      selectDefinition: function selectDefinition(definition) {
        this.set('selectedDefinition', definition);
        this.set('rule.field', definition.get('id'));
        this.ensureSelectedOperatorIsPossible();
        this.set('searchTerm', '');

        if (this.get('isChoiceField')) {
          var newProperty = this.get('selectedDefinition.values.firstObject');
          this.set('selectedProperty', newProperty);
          this.set('rule.value', newProperty.get('value'));
        } else if (this.get('isCollectionField')) {
          this.set('rule.value', []);
        } else {
          //we don't want to display any ids to the user;
          this.set('rule.value', '');
        }
      },
      selectOperator: function selectOperator(operator) {
        this.set('rule.operator', operator);
      },
      selectProperty: function selectProperty(property) {
        this.set('selectedProperty', property);
        this.set('rule.value', property.get('value'));
      },

      appendRule: function appendRule() {
        this.attrs.appendRule(this.get('rule'));
      },
      deleteRule: function deleteRule() {
        this.attrs.deleteRule(this.get('rule'));
      },
      addItemToCollection: function addItemToCollection(item) {
        if (!this.get('isCollectionField')) {
          throw 'Trying to add an item to something that isn\'t a collection?';
        }
        var ruleValues = this.get('rule.value');
        if (item && ruleValues.indexOf(item) === -1) {
          this.get('rule.value').pushObject(item);
        }
      },
      removeItemFromCollection: function removeItemFromCollection(item) {
        if (!this.get('isCollectionField')) {
          throw 'Trying to remove an item from something that isn\'t a collection?';
        }
        this.get('rule.value').removeObject(item);
      }
    }
  });

});
define('frontend-cp/components/ko-predicate-builder/rule/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'onclick');
            morphs[1] = dom.createMorphAt(element3,1,1);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["subexpr","action",["selectDefinition",["get","possibleDefinition",["loc",[null,[9,77],[9,95]]]]],[],["loc",[null,[9,49],[9,97]]]]],
            ["inline","format-message",[["subexpr","intl-get",[["subexpr","concat",["admin.predicate_builder.",["get","possibleDefinition.id",["loc",[null,[10,70],[10,91]]]]],[],["loc",[null,[10,35],[10,92]]]]],[],["loc",[null,[10,25],[10,93]]]]],[],["loc",[null,[10,8],[10,95]]]]
          ],
          locals: ["possibleDefinition"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","definitions",["loc",[null,[8,12],[8,23]]]]],[],0,null,["loc",[null,[8,4],[12,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1,"class","ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'onclick');
            morphs[1] = dom.createMorphAt(element2,1,1);
            return morphs;
          },
          statements: [
            ["attribute","onclick",["subexpr","action",["selectOperator",["get","possibleOperator",["loc",[null,[18,75],[18,91]]]]],[],["loc",[null,[18,49],[18,93]]]]],
            ["inline","format-message",[["subexpr","intl-get",[["subexpr","concat",["admin.predicate_builder.operators.",["get","possibleOperator",["loc",[null,[19,80],[19,96]]]]],[],["loc",[null,[19,35],[19,97]]]]],[],["loc",[null,[19,25],[19,98]]]]],[],["loc",[null,[19,8],[19,100]]]]
          ],
          locals: ["possibleOperator"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","each",[["get","possibleOperators",["loc",[null,[17,12],[17,29]]]]],[],0,null,["loc",[null,[17,4],[21,13]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 8
                },
                "end": {
                  "line": 31,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'onclick');
              morphs[1] = dom.createMorphAt(element1,1,1);
              return morphs;
            },
            statements: [
              ["attribute","onclick",["subexpr","action",["selectProperty",["get","possibleProperties",["loc",[null,[28,79],[28,97]]]]],[],["loc",[null,[28,53],[28,99]]]]],
              ["content","possibleProperties.string",["loc",[null,[29,12],[29,41]]]]
            ],
            locals: ["possibleProperties"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 6
              },
              "end": {
                "line": 32,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","each",[["get","filteredProperties",["loc",[null,[27,16],[27,34]]]]],[],0,null,["loc",[null,[27,8],[31,17]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 33,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-suggest",[],["selectedItem",["subexpr","@mut",[["get","propertyValueName",["loc",[null,[26,33],[26,50]]]]],[],[]],"searchTerm",["subexpr","@mut",[["get","searchTerm",["loc",[null,[26,62],[26,72]]]]],[],[]]],0,null,["loc",[null,[26,6],[32,21]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 4
              },
              "end": {
                "line": 40,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-predicate-builder__tags-input");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["inline","ko-field/tags",[],["selectedTags",["subexpr","@mut",[["get","rule.value",["loc",[null,[36,21],[36,31]]]]],[],[]],"onTagAddition","addItemToCollection","onTagRemoval","removeItemFromCollection"],["loc",[null,[35,6],[38,49]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 4
              },
              "end": {
                "line": 42,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","input",[],["type","text","class","ko-predicate-builder_rule__input input-text","value",["subexpr","@mut",[["get","rule.value",["loc",[null,[41,84],[41,94]]]]],[],[]]],["loc",[null,[41,6],[41,96]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","selectedDefinition.definitionType",["loc",[null,[33,18],[33,51]]]],"collection"],[],["loc",[null,[33,14],[33,65]]]]],[],0,1,["loc",[null,[33,4],[42,4]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-predicate-builder_rule__remove");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["deleteRule",["get","rule",["loc",[null,[47,79],[47,83]]]]],[],["loc",[null,[47,57],[47,85]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-predicate-builder_rule__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-predicate-builder_rule__actions layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element4, [1]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element4, [3]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [5]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [7]),1,1);
        return morphs;
      },
      statements: [
        ["inline","format-message",[["subexpr","intl-get",["generic.or"],[],["loc",[null,[2,19],[2,42]]]]],[],["loc",[null,[2,2],[2,44]]]],
        ["block","ko-dropdown/select",[],["label",["subexpr","@mut",[["get","selectedDefinitionLabel",["loc",[null,[7,30],[7,53]]]]],[],[]],"hideOnClick",true,"class","ko-predicate-builder_rule__input"],0,null,["loc",[null,[7,2],[13,25]]]],
        ["block","ko-dropdown/select",[],["label",["subexpr","format-message",[["subexpr","intl-get",[["subexpr","concat",["admin.predicate_builder.operators.",["subexpr","or",[["get","rule.operator",["loc",[null,[16,105],[16,118]]]],"none"],[],["loc",[null,[16,101],[16,126]]]]],[],["loc",[null,[16,56],[16,127]]]]],[],["loc",[null,[16,46],[16,128]]]]],[],["loc",[null,[16,30],[16,129]]]],"hideOnClick",true,"class","ko-predicate-builder_rule__input"],1,null,["loc",[null,[16,2],[22,25]]]],
        ["block","if",[["get","availableProperties.length",["loc",[null,[25,10],[25,36]]]]],[],2,3,["loc",[null,[25,4],[42,11]]]],
        ["block","if",[["get","canDeleteRule",["loc",[null,[45,10],[45,23]]]]],[],4,null,["loc",[null,[45,4],[49,11]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  }()));

});
define('frontend-cp/components/ko-predicate-builder/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-predicate-builder__remove");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","i-minus-square");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [
            ["element","action",["removeCollection",["get","collection",["loc",[null,[5,74],[5,84]]]]],[],["loc",[null,[5,46],[5,86]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 17,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-predicate-builder/rule",[],["definitions",["subexpr","@mut",[["get","definitions",["loc",[null,[12,22],[12,33]]]]],[],[]],"rule",["subexpr","@mut",[["get","proposition",["loc",[null,[13,15],[13,26]]]]],[],[]],"canDeleteRule",["subexpr","not",[["subexpr","eq",[["get","collection.propositions.length",["loc",[null,[14,33],[14,63]]]],1],[],["loc",[null,[14,29],[14,66]]]]],[],["loc",[null,[14,24],[14,67]]]],"deleteRule",["subexpr","action",["removeRuleFromCollection",["get","collection",["loc",[null,[15,56],[15,66]]]]],[],["loc",[null,[15,21],[15,67]]]]],["loc",[null,[11,6],[16,8]]]]
          ],
          locals: ["proposition"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-predicate-builder");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-predicate-builder__label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-predicate-builder__add");
          var el3 = dom.createTextNode("+ New Criteria");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [7]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),0,0);
          morphs[1] = dom.createMorphAt(element1,3,3);
          morphs[2] = dom.createMorphAt(element1,5,5);
          morphs[3] = dom.createElementMorph(element2);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["generic.and"],[],["loc",[null,[3,62],[3,86]]]]],[],["loc",[null,[3,45],[3,88]]]],
          ["block","if",[["get","canDeleteCollection",["loc",[null,[4,10],[4,29]]]]],[],0,null,["loc",[null,[4,4],[8,11]]]],
          ["block","each",[["get","collection.propositions",["loc",[null,[10,12],[10,35]]]]],[],1,null,["loc",[null,[10,4],[17,13]]]],
          ["element","action",["addRuleToCollection",["get","collection",["loc",[null,[18,74],[18,84]]]]],[],["loc",[null,[18,43],[18,86]]]]
        ],
        locals: ["collection"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-predicate-builder__new");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(element3,0,0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","each",[["get","collections",["loc",[null,[1,8],[1,19]]]]],[],0,null,["loc",[null,[1,0],[20,9]]]],
        ["element","action",["addCollection"],[],["loc",[null,[22,39],[22,65]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.and"],[],["loc",[null,[22,83],[22,107]]]]],[],["loc",[null,[22,66],[22,109]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-profile/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    follow: false,

    actions: {

      showProfile: function showProfile(profile) {
        this.sendAction('showProfile', profile);
      },

      followToggle: function followToggle(profile) {
        this.sendAction('followToggle', profile);
        this.toggleProperty('follow');
      }

    }

  });

});
define('frontend-cp/components/ko-profile/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-profile/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","flag ko-profile__top");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","flag__img");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("img");
        dom.setAttribute(el3,"class","avatar ko-profile__avatar");
        dom.setAttribute(el3,"alt","");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","flag__body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__name");
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__position t-caption");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__company t-caption");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","flag ko-profile__middle");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","flag__body");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__place t-small t-caption");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__time t-small t-caption");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode(" ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("br");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","ko-profile__open-cases t-small");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","flag");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-profile__link-container");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","#");
        dom.setAttribute(el3,"class","ko-profile__follow");
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-profile__link-container");
        var el3 = dom.createElement("a");
        dom.setAttribute(el3,"href","#");
        dom.setAttribute(el3,"class","ko-profile__detail");
        var el4 = dom.createElement("strong");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1, 1]);
        var element2 = dom.childAt(element0, [3]);
        var element3 = dom.childAt(fragment, [4, 1]);
        var element4 = dom.childAt(fragment, [8]);
        var element5 = dom.childAt(element4, [1, 0]);
        var element6 = dom.childAt(element4, [3, 0]);
        var morphs = new Array(11);
        morphs[0] = dom.createAttrMorph(element1, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1, 0]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]),0,0);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [5]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element3, [1]),0,0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [3]),0,0);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [7]),0,0);
        morphs[7] = dom.createElementMorph(element5);
        morphs[8] = dom.createMorphAt(dom.childAt(element5, [0]),0,0);
        morphs[9] = dom.createElementMorph(element6);
        morphs[10] = dom.createMorphAt(dom.childAt(element6, [0]),0,0);
        return morphs;
      },
      statements: [
        ["attribute","src",["concat",[["get","profile.avatar",["loc",[null,[3,50],[3,64]]]]]]],
        ["content","profile.name",["loc",[null,[6,40],[6,56]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.profile.position"],[],["loc",[null,[7,63],[7,100]]]]],["position",["subexpr","@mut",[["get","profile.position",["loc",[null,[7,110],[7,126]]]]],[],[]]],["loc",[null,[7,46],[7,128]]]],
        ["content","profile.company",["loc",[null,[8,45],[8,64]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.profile.place"],[],["loc",[null,[14,68],[14,102]]]]],["place",["subexpr","@mut",[["get","profile.place",["loc",[null,[14,109],[14,122]]]]],[],[]]],["loc",[null,[14,51],[14,124]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.profile.time"],[],["loc",[null,[15,67],[15,100]]]]],["time",["subexpr","@mut",[["get","profile.time",["loc",[null,[15,106],[15,118]]]]],[],[]]],["loc",[null,[15,50],[15,120]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.profile.openCases"],[],["loc",[null,[16,63],[16,101]]]]],["number",["subexpr","@mut",[["get","profile.openCases",["loc",[null,[16,109],[16,126]]]]],[],[]]],["loc",[null,[16,46],[16,128]]]],
        ["element","action",["followToggle",["get","profile",["loc",[null,[21,105],[21,112]]]]],[],["loc",[null,[21,81],[21,114]]]],
        ["inline","if",[["get","follow",["loc",[null,[21,128],[21,134]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.profile.follow"],[],["loc",[null,[21,151],[21,186]]]]],[],["loc",[null,[21,135],[21,187]]]],["subexpr","format-message",[["subexpr","intl-get",["generic.profile.unfollow"],[],["loc",[null,[21,204],[21,241]]]]],[],["loc",[null,[21,188],[21,242]]]]],[],["loc",[null,[21,123],[21,244]]]],
        ["element","action",["showProfile",["get","profile",["loc",[null,[22,104],[22,111]]]]],[],["loc",[null,[22,81],[22,113]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.profile.viewProfile"],[],["loc",[null,[22,139],[22,179]]]]],[],["loc",[null,[22,122],[22,181]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-profile-card/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    actions: {
      showProfile: function showProfile() {},

      followToggle: function followToggle() {}
    }

  });

});
define('frontend-cp/components/ko-profile-card/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-profile-card/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-profile",[],["profile",["subexpr","@mut",[["get","profile",["loc",[null,[4,12],[4,19]]]]],[],[]],"showProfile","showProfile","followToggle","followToggle"],["loc",[null,[3,2],[7,4]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-profile-card/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-context-modal-item",[],["index","0","contextModalId",["subexpr","@mut",[["get","contextModalId",["loc",[null,[1,50],[1,64]]]]],[],[]]],0,null,["loc",[null,[1,0],[9,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-radio/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    disabled: false,
    large: false,

    checked: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    selected: Ember['default'].computed('value', 'checked', function () {
      return this.value === this.checked;
    }),

    keyDown: function keyDown(e) {
      if (e.keyCode === KeyCodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === KeyCodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.get('disabled')) {
          return;
        }

        if (this.get('onRadio')) {
          this.sendAction('onRadio', true);
        } else {
          this.set('checked', true);
        }
      }
    }

  });

});
define('frontend-cp/components/ko-radio/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-radio__radio ",["subexpr","if",[["get","large",["loc",[null,[3,37],[3,42]]]],"ko-radio__radio--large"],[],["loc",[null,[3,32],[3,69]]]]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-radio__label ",["subexpr","if",[["get","disabled",["loc",[null,[7,37],[7,45]]]],"ko-radio__label--disabled"],[],["loc",[null,[7,32],[7,75]]]]]]],
          ["attribute","for",["concat",[["get","elementId",["loc",[null,[7,84],[7,93]]]],"-radio"]]],
          ["element","action",["toggleRadio"],[],["loc",[null,[7,103],[7,127]]]],
          ["content","label",["loc",[null,[7,128],[7,137]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"role","radio");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createElementMorph(element2);
        morphs[7] = dom.createMorphAt(element2,1,1);
        morphs[8] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-radio__container ",["subexpr","if",[["get","large",["loc",[null,[1,37],[1,42]]]],"ko-radio__container--large"],[],["loc",[null,[1,32],[1,73]]]]," ",["subexpr","if",[["get","disabled",["loc",[null,[1,79],[1,87]]]],"ko-radio__radio--disabled"],[],["loc",[null,[1,74],[1,117]]]]]]],
        ["attribute","aria-checked",["concat",[["get","selected",["loc",[null,[1,148],[1,156]]]]]]],
        ["attribute","tabindex",["concat",[["get","tabindex",["loc",[null,[1,172],[1,180]]]]]]],
        ["attribute","aria-disabled",["concat",[["get","disabled",["loc",[null,[1,201],[1,209]]]]]]],
        ["attribute","aria-live",["concat",[["get","ariaLive",["loc",[null,[1,226],[1,234]]]]]]],
        ["attribute","id",["concat",[["get","elementId",["loc",[null,[1,244],[1,253]]]],"-radio"]]],
        ["element","action",["toggleRadio"],[],["loc",[null,[1,263],[1,287]]]],
        ["block","if",[["get","checked",["loc",[null,[2,8],[2,15]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
        ["block","if",[["get","label",["loc",[null,[6,6],[6,11]]]]],[],1,null,["loc",[null,[6,0],[8,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-recent-cases/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'li',
    classNames: ['info-bar-item', 'u-no-bottom-border'],

    cases: null,

    last3Cases: Ember['default'].computed('cases', function () {
      return this.get('cases').slice(0, 3);
    })
  });

});
define('frontend-cp/components/ko-recent-cases/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","t-italic t-caption t-small");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2,"class","t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(",\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]),0,0);
              return morphs;
            },
            statements: [
              ["content","case.subject",["loc",[null,[7,8],[7,24]]]],
              ["content","case.status.label",["loc",[null,[11,29],[11,50]]]],
              ["inline","format-message",[["subexpr","intl-get",["cases.lastupdated"],[],["loc",[null,[12,31],[12,61]]]]],["time",["subexpr","moment-from-now",[["get","case.createdAt",["loc",[null,[12,84],[12,98]]]]],[],["loc",[null,[12,67],[12,99]]]]],["loc",[null,[12,14],[12,101]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","link-to",["session.agent.cases.case",["get","case",["loc",[null,[5,42],[5,46]]]]],["class","ko-recent-cases__item"],0,null,["loc",[null,[5,4],[14,16]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["get","case.subject",["loc",[null,[4,8],[4,20]]]]],[],0,null,["loc",[null,[4,2],[15,9]]]]
        ],
        locals: ["case","i"],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-recent-case__missing");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["users.no_recent_cases"],[],["loc",[null,[18,21],[18,55]]]]],[],["loc",[null,[18,4],[18,57]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,31],[1,40]]]],
        ["block","each",[["get","last3Cases",["loc",[null,[3,8],[3,18]]]]],[],0,1,["loc",[null,[3,0],[20,9]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-recent-members/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-recent-members/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-members/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["inline","ko-avatar",[],["avatar",["subexpr","@mut",[["get","member.avatar",["loc",[null,[5,27],[5,40]]]]],[],[]]],["loc",[null,[5,8],[5,42]]]]
        ],
        locals: ["member"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 5
          }
        },
        "moduleName": "frontend-cp/components/ko-recent-members/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("p");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","list-inline");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["content","title",["loc",[null,[1,3],[1,12]]]],
        ["block","each",[["get","members",["loc",[null,[4,10],[4,17]]]]],[],0,null,["loc",[null,[4,2],[6,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-reorderable-crud-list/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    removeItemAction: null,
    createItemAction: null,
    classNames: ['ko-reorderable-crud-list'],
    firstItem: {},

    reorderListAction: null,
    userWantsToSeeNewItemForm: false,

    isShowingNewItemForm: Ember['default'].computed('userWantsToSeeNewItemForm', function () {
      return this.get('userWantsToSeeNewItemForm');
    }),

    actions: {
      removeItem: function removeItem(item) {
        this.sendAction('removeItemAction', item);
      },
      createItem: function createItem() {
        this.sendAction('createItemAction');
      },
      reorderList: function reorderList(orderedList) {
        this.sendAction('reorderListAction', orderedList);
      }
    }
  });

});
define('frontend-cp/components/ko-reorderable-crud-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-reorderable-crud-list__item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-reorderable-crud-list-actions");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","i-minus-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3,"class","ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4,"class","i-add-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0,1,1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [
          ["inline","yield",[["get","item",["loc",[null,[3,12],[3,16]]]]],[],["loc",[null,[3,4],[3,18]]]],
          ["element","action",["removeItem",["get","item",["loc",[null,[5,80],[5,84]]]]],[],["loc",[null,[5,58],[5,86]]]],
          ["element","action",["createItem",["get","item",["loc",[null,[8,80],[8,84]]]]],[],["loc",[null,[8,58],[8,86]]]]
        ],
        locals: ["item"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-reorderable-list",[],["reorderedListAction","reorderList","hasActions",true,"items",["subexpr","@mut",[["get","items",["loc",[null,[1,79],[1,84]]]]],[],[]]],0,null,["loc",[null,[1,0],[13,24]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-reorderable-list/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    items: null,
    hasActions: false,

    draggedItem: null,
    isDragging: Ember['default'].computed.bool('draggedItem'),
    classNames: ['ko-reorderable-list'],
    classNameBindings: ['isDragging:ko-reorderable-list--dragging'],

    actions: {
      itemStartedBeingDragged: function itemStartedBeingDragged(item) {
        this.set('draggedItem', item);
      },

      wasDraggedOverItem: function wasDraggedOverItem(targetItem) {
        var draggedItem = this.get('draggedItem');

        if (targetItem === draggedItem) {
          // it's dragged over itself
          return;
        }

        var items = this.get('items');
        var draggedItemIndex = items.indexOf(draggedItem);
        var targetItemIndex = items.indexOf(targetItem);

        items.removeAt(draggedItemIndex);
        items.insertAt(targetItemIndex, draggedItem);
      },

      itemDropped: function itemDropped() {
        this.set('draggedItem', null);
        this.sendAction('reorderedListAction', this.get('items'));
      }
    }
  });

});
define('frontend-cp/components/ko-reorderable-list/item/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    item: null,
    isBeingDragged: false,

    onDraggedOver: 'wasDraggedOverItem',
    onDropped: 'itemDropped',

    classNames: ['form-input-draggable', 'ko-reorderable-list-item'],
    classNameBindings: ['hasActions:has-actions', 'isBeingDragged:ko-reorderable-list_item--dragging'],

    actions: {
      onDragStart: function onDragStart() {
        this.sendAction('onDragStarted', this.get('item'));
      },
      onDragStop: function onDragStop() {
        this.sendAction('onDropped');
      }
    },

    handleDragEnter: Ember['default'].on('dragEnter', function () {
      this.sendAction('onDraggedOver', this.get('item'));
    }),

    dragOver: function dragOver(event) {
      event.preventDefault();
    }
  });

});
define('frontend-cp/components/ko-reorderable-list/item/handle/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    // Params
    item: null,

    draggable: 'true',
    attributeBindings: 'draggable',
    classNameBindings: [':i-dragstrip', ':ko-reorderable-list_item_handle', 'isGrabbed:ko-reorderable-list_item_handle--grabbed'],

    onDragStart: 'onDragStart',
    onDragStop: 'onDragStop',

    isGrabbed: false,
    setIsGrabbed: Ember['default'].on('mouseDown', function () {
      this.set('isGrabbed', true);
    }),
    unsetIsGrabbed: Ember['default'].on('mouseUp', function () {
      this.set('isGrabbed', false);
    }),

    handleDragStart: Ember['default'].on('dragStart', function (e) {
      e.dataTransfer.effectAllowed = 'move';
      e.dataTransfer.dropEffect = 'move';
      e.dataTransfer.setDragImage(e.target.parentElement, 0, 0);

      this.sendAction('onDragStart', this.get('item'));
    }),

    handleDragEnd: Ember['default'].on('dragEnd', function () {
      this.set('isGrabbed', false);
      this.sendAction('onDragStop');
    })
  });

});
define('frontend-cp/components/ko-reorderable-list/item/handle/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-list/item/handle/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-reorderable-list/item/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-list/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","ko-reorderable-list/item/handle",["loc",[null,[1,0],[1,35]]]],
        ["inline","yield",[["get","item",["loc",[null,[2,8],[2,12]]]]],[],["loc",[null,[2,0],[2,14]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-reorderable-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","yield",[["get","item",["loc",[null,[8,14],[8,18]]]]],[],["loc",[null,[8,6],[8,20]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-reorderable-list/item",[],["item",["subexpr","@mut",[["get","item",["loc",[null,[3,13],[3,17]]]]],[],[]],"isBeingDragged",["subexpr","eq",[["get","item",["loc",[null,[4,27],[4,31]]]],["get","draggedItem",["loc",[null,[4,32],[4,43]]]]],[],["loc",[null,[4,23],[4,44]]]],"onDragStarted","itemStartedBeingDragged","hasActions",["subexpr","@mut",[["get","hasActions",["loc",[null,[6,19],[6,29]]]]],[],[]]],0,null,["loc",[null,[2,4],[9,33]]]]
        ],
        locals: ["item","index"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","items",["loc",[null,[1,8],[1,13]]]]],[],0,null,["loc",[null,[1,0],[10,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-scroller/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    /**
     * Current vertical scroll position, in pixels
     * @type {Number}
     */
    scrollTop: 0,

    /**
     * Current horizontal scroll position, in pixels
     * @type {Number}
     */
    scrollLeft: 0,

    classNames: ['ko-scroller'],

    _cachedScrollLeft: 0,
    _cachedScrollTop: 0,

    $componentElement: null,

    /**
     * Update the DOM when the scrollTop property is changed
     */
    scrollTopUpdated: Ember['default'].observer('scrollTop', function () {
      var scrollTop = this.get('scrollTop');
      if (scrollTop === this.get('_cachedScrollTop')) {
        return;
      }
      var $componentElement = this.get('$componentElement');
      if (!$componentElement) {
        return;
      }
      $componentElement.scrollTop(scrollTop);
    }),

    /**
     * Update the DOM when the scrollLeft property is changed
     */
    scrollLeftUpdated: Ember['default'].observer('scrollLeft', function () {
      var scrollLeft = this.get('scrollLeft');
      if (scrollLeft === this.get('_cachedScrollLeft')) {
        return;
      }
      var $componentElement = this.get('$componentElement');
      if (!$componentElement) {
        return;
      }
      $componentElement.scrollLeft(scrollLeft);
    }),

    /**
     * Add a scroll listener when the view is rendered
     */
    willInsertElement: Ember['default'].on('willInsertElement', function () {
      var _this = this;

      var $componentElement = this.$();
      this.set('$componentElement', $componentElement);

      var scrollTop = this.get('scrollTop');
      var scrollLeft = this.get('scrollLeft');

      $componentElement.scrollTop(scrollTop);
      $componentElement.scrollLeft(scrollLeft);

      $componentElement.on('scroll', function (event) {
        Ember['default'].run(function () {
          var scrollTop = Ember['default'].$(event.currentTarget).scrollTop();
          var scrollLeft = Ember['default'].$(event.currentTarget).scrollLeft();
          _this.set('_cachedScrollTop', scrollTop);
          _this.set('_cachedScrollLeft', scrollLeft);
          _this.set('scrollTop', scrollTop);
          _this.set('scrollLeft', scrollLeft);
        });
      });
    })

  });

});
define('frontend-cp/components/ko-scroller/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-scroller/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-search/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //params
    placeholder: '',
    hidden: false,
    onSearchTermChange: null,

    tagName: 'div',
    classNames: ['ko-search', 'u-pos-rel'],
    classNameBindings: ['hidden:u-hidden'],

    actions: {
      onClick: function onClick() {
        this.sendAction('onClick');
      },
      onSearchTermChange: function onSearchTermChange(value) {
        this.sendAction('onSearchTermChange', value);
      }
    }
  });

});
define('frontend-cp/components/ko-search/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1,"class","input-text input-text--full u-pr+");
        dom.setAttribute(el1,"tabindex","0");
        dom.setAttribute(el1,"role","textbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1,"class","i-search i-after i-color-grey");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'placeholder');
        morphs[1] = dom.createAttrMorph(element0, 'onclick');
        morphs[2] = dom.createAttrMorph(element0, 'onkeyup');
        return morphs;
      },
      statements: [
        ["attribute","placeholder",["get","placeholder",["loc",[null,[3,16],[3,27]]]]],
        ["attribute","onclick",["subexpr","action",["onClick"],[],["loc",[null,[6,10],[6,30]]]]],
        ["attribute","onkeyup",["subexpr","action",["onSearchTermChange"],["value","target.value"],["loc",[null,[7,10],[7,62]]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-session-widgets/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    session: Ember['default'].inject.service(),

    user: Ember['default'].computed('session.user', function () {
      return this.get('session.user');
    })
  });

});
define('frontend-cp/components/ko-session-widgets/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-user-menu",[],["user",["subexpr","@mut",[["get","user",["loc",[null,[1,20],[1,24]]]]],[],[]]],["loc",[null,[1,0],[1,26]]]],
        ["content","ko-notification-badge",["loc",[null,[2,0],[2,25]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-sidebar/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-sidebar/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 8
                },
                "end": {
                  "line": 15,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","sidebar__icon");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2,"class","sidebar__i i-inbox i-size-14 i-color-grey--light");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 10
                  },
                  "end": {
                    "line": 24,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1,"class","sidebar__value");
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element0,1,1);
                morphs[1] = dom.createMorphAt(element0,2,2);
                return morphs;
              },
              statements: [
                ["inline","if",[["subexpr","eq",[["get","currentView.viewCount.caseCountAccuracy",["loc",[null,[22,23],[22,62]]]],"RELATIVE"],[],["loc",[null,[22,19],[22,74]]]],"~"],[],["loc",[null,[22,14],[22,80]]]],
                ["content","currentView.viewCount.count",["loc",[null,[22,80],[22,111]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 25,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["subexpr","not",[["subexpr","eq",[["get","currentView.viewCount.caseCountAccuracy",["loc",[null,[20,25],[20,64]]]],"UNKNOWN"],[],["loc",[null,[20,21],[20,75]]]]],[],["loc",[null,[20,16],[20,76]]]]],[],0,null,["loc",[null,[20,10],[24,17]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","sidebar__content");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","sidebar__title");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createMorphAt(element2,1,1);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]),0,0);
            morphs[3] = dom.createMorphAt(element2,5,5);
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["sidebar__item\n    ",["subexpr","if",[["subexpr","eq",[["get","currentView",["loc",[null,[6,13],[6,24]]]],["get","activeView",["loc",[null,[6,25],[6,35]]]]],[],["loc",[null,[6,9],[6,36]]]],"sidebar__item--is-active",""],[],["loc",[null,[6,4],[6,68]]]],"\n    ",["subexpr","if",[["subexpr","eq",[["get","currentView.viewCount.count",["loc",[null,[7,13],[7,40]]]],0],[],["loc",[null,[7,9],[7,43]]]],"sidebar__item--is-disabled",""],[],["loc",[null,[7,4],[7,77]]]],"\n    ",["subexpr","if",[["get","currentView.isDefault",["loc",[null,[8,9],[8,30]]]],"sidebar__item--is-default",""],[],["loc",[null,[8,4],[8,63]]]],"\n    "]]],
            ["block","if",[["get","currentView.isDefault",["loc",[null,[11,14],[11,35]]]]],[],0,null,["loc",[null,[11,8],[15,15]]]],
            ["content","currentView.title",["loc",[null,[17,36],[17,57]]]],
            ["block","if",[["get","currentView.viewCount.count",["loc",[null,[19,14],[19,41]]]]],[],1,null,["loc",[null,[19,8],[25,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","link-to",["session.agent.cases.index",["subexpr","query-params",[],["view",["get","currentView.id",["loc",[null,[4,60],[4,74]]]],"page",1],["loc",[null,[4,41],[4,82]]]]],["class","sidebar__link t-naked-link"],0,null,["loc",[null,[4,2],[28,14]]]]
        ],
        locals: ["currentView"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]],
        ["block","each",[["get","views",["loc",[null,[3,8],[3,13]]]]],[],0,null,["loc",[null,[3,0],[29,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-simple-box-row/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-simple-box-row/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-box-row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-simple-list/component', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Component.extend({});

});
define('frontend-cp/components/ko-simple-list/row/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Parmas
    action: null,
    content: null,

    click: function click() {
      if (this.get('action')) {
        this.sendAction('action', this.get('content'));
      }
    }
  });

});
define('frontend-cp/components/ko-simple-list/row/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-simple-list/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-sla/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    metric: null,

    classNames: ['ko-sla'],

    statusClassName: Ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');

      return status ? 'ko-sla--' + status.toLowerCase() : '';
    }),

    iconClass: Ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state') || '',
          status = this.get('metric.status') || '';

      if (!state) {
        return;
      }

      var iconClass = this.getIconClassName(state, status);

      return iconClass + ' t-' + status.toLowerCase() + ' ko-sla__icon--' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });

});
define('frontend-cp/components/ko-sla/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ~");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            return morphs;
          },
          statements: [
            ["content","metric.numberOfWholeDaysRemaining",["loc",[null,[12,9],[12,46]]]],
            ["inline","format-message",[["subexpr","intl-get",["generic.day_abbreviation"],[],["loc",[null,[12,63],[12,100]]]]],[],["loc",[null,[12,46],[12,102]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child2 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              return morphs;
            },
            statements: [
              ["content","metric.numberOfWholeHoursRemaining",["loc",[null,[15,10],[15,48]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.hour_abbreviation"],[],["loc",[null,[15,65],[15,103]]]]],[],["loc",[null,[15,48],[15,105]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              return morphs;
            },
            statements: [
              ["content","metric.numberOfWholeMinutesRemaining",["loc",[null,[17,10],[17,50]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.minute_abbreviation"],[],["loc",[null,[17,67],[17,107]]]]],[],["loc",[null,[17,50],[17,109]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","metric.numberOfWholeHoursRemaining",["loc",[null,[14,14],[14,48]]]]],[],0,1,["loc",[null,[14,8],[18,15]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sla/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-sla__icon");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","ko-sla__metric");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element2,1,1);
          morphs[3] = dom.createMorphAt(element2,3,3);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-sla__container ",["get","statusClassName",["loc",[null,[2,34],[2,49]]]]]]],
          ["attribute","class",["concat",["ko-sla__i ",["get","iconClass",["loc",[null,[4,28],[4,37]]]]," i-size-11"]]],
          ["block","if",[["get","metric.isBreached",["loc",[null,[7,12],[7,29]]]]],[],0,null,["loc",[null,[7,6],[9,13]]]],
          ["block","if",[["get","metric.numberOfWholeDaysRemaining",["loc",[null,[11,12],[11,45]]]]],[],1,2,["loc",[null,[11,6],[19,13]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-sla/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","metric",["loc",[null,[1,6],[1,12]]]]],[],0,null,["loc",[null,[1,0],[22,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-stateful-button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    activeText: null,
    inactiveText: null,
    activeHoverText: null,
    inactiveHoverText: null,
    isLoading: false,

    tagName: 'button',
    classNames: ['button', 'button--highlight'],
    classNameBindings: ['isActive'],
    attributeBindings: ['disabled'],

    buttonText: Ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeText') : this.get('inactiveText');
    }),

    buttonHoverText: Ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeHoverText') : this.get('inactiveHoverText');
    }),

    disabled: Ember['default'].computed('isEnabled', function () {
      return this.get('isEnabled') ? '' : 'disabled';
    }),

    click: function click() {
      this.sendAction('onClick');
    }
  });

});
define('frontend-cp/components/ko-stateful-button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["class","ko-stateful-button__button-loading"],["loc",[null,[2,2],[2,58]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","ko-stateful-button__button-text");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1,"class","ko-stateful-button__button-text--hover");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]),1,1);
          return morphs;
        },
        statements: [
          ["content","buttonText",["loc",[null,[5,4],[5,18]]]],
          ["content","buttonHoverText",["loc",[null,[8,4],[8,23]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","if",[["get","isLoading",["loc",[null,[1,6],[1,15]]]]],[],0,1,["loc",[null,[1,0],[10,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-suggest/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params:
    searchTerm: null,
    isFocussed: false,
    hideOnClick: true,
    shouldAutoFocus: false,
    displayIcon: true,

    filterResults: Ember['default'].observer('searchTerm', function () {
      this.sendAction('onSearchTermUpdated', this.get('searchTerm'));
    }),

    willRender: function willRender() {
      if (this.get('shouldAutoFocus')) {
        if (this.$('.ko-suggest__input')) {
          this.set('isFocussed', true);
          this.$('.ko-suggest__input').focus();
        }
      }
    },

    actions: {
      onFocusChanged: function onFocusChanged(focusState) {
        this.set('isFocussed', focusState);
      }
    }

  });

});
define('frontend-cp/components/ko-suggest/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","input",[],["type","text","value",["subexpr","@mut",[["get","searchTerm",["loc",[null,[5,32],[5,42]]]]],[],[]],"class","input-text ko-suggest__input"],["loc",[null,[5,6],[5,81]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-dropdown/select/button",[],["label",["subexpr","@mut",[["get","selectedItem",["loc",[null,[7,40],[7,52]]]]],[],[]],"displayIcon",["subexpr","@mut",[["get","displayIcon",["loc",[null,[7,65],[7,76]]]]],[],[]]],["loc",[null,[7,6],[7,78]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","or",[["get","isFocussed",["loc",[null,[4,14],[4,24]]]],["subexpr","not",[["get","selectedItem",["loc",[null,[4,30],[4,42]]]]],[],["loc",[null,[4,25],[4,43]]]]],[],["loc",[null,[4,10],[4,44]]]]],[],0,1,["loc",[null,[4,4],[8,11]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["content","yield",["loc",[null,[13,6],[13,15]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-dropdown-select__content","style",["subexpr","@mut",[["get","contentStyle",["loc",[null,[12,66],[12,78]]]]],[],[]]],0,null,["loc",[null,[12,4],[14,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[9,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[11,12],[11,16]]]],"content"],[],["loc",[null,[11,8],[11,27]]]]],[],1,null,["loc",[null,[11,2],[15,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["hideOnClick",["subexpr","@mut",[["get","hideOnClick",["loc",[null,[1,37],[1,48]]]]],[],[]],"hideOnChildFocus",true,"onFocusChanged","onFocusChanged"],0,null,["loc",[null,[1,0],[17,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-table/body/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'tbody'
  });

});
define('frontend-cp/components/ko-table/body/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/body/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-table/cell/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'td'
  });

});
define('frontend-cp/components/ko-table/cell/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/cell/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-table/column/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var htmlSafe = Ember['default'].String.htmlSafe;

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'th',
    column: null,

    classNames: ['ko-table_column'],
    classNameBindings: ['sortable:ko-table_column--sortable'],
    attributeBindings: 'style',

    // CPs
    style: Ember['default'].computed('width', function () {
      var width = this.get('width');
      return htmlSafe(width ? 'width: ' + width : '');
    }),

    // Events
    mouseDown: function mouseDown(e) {
      if (this.get('sortable')) {
        e.preventDefault();
      }
    },

    click: function click() {
      if (this.get('sortable')) {
        this.get('parentView').send('sort', this.get('column'));
      }
    }
  });

});
define('frontend-cp/components/ko-table/column/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","i-chevron-small-up");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1,"class","i-chevron-small-down");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() { return []; },
            statements: [

            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","eq",[["get","tableHeader.sortOrder",["loc",[null,[4,14],[4,35]]]],"asc"],[],["loc",[null,[4,10],[4,42]]]]],[],0,null,["loc",[null,[4,4],[6,11]]]],
            ["block","if",[["subexpr","eq",[["get","tableHeader.sortOrder",["loc",[null,[8,14],[8,35]]]],"desc"],[],["loc",[null,[8,10],[8,43]]]]],[],1,null,["loc",[null,[8,4],[10,11]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1,"class","i-chevron-small-down");
            dom.setAttribute(el1,"style","visibility: hidden;");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","tableHeader.sortColumn",["loc",[null,[3,12],[3,34]]]],["get","sortable",["loc",[null,[3,35],[3,43]]]]],[],["loc",[null,[3,8],[3,44]]]]],[],0,1,["loc",[null,[3,2],[13,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]],
        ["block","if",[["get","sortable",["loc",[null,[2,6],[2,14]]]]],[],0,null,["loc",[null,[2,0],[14,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-table/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'table',
    rows: null,

    initRows: Ember['default'].on('init', function () {
      this.set('rows', new Ember['default'].A([]));
    }),

    rowStatuses: Ember['default'].computed.mapBy('rows', 'selected'),
    unselectedRowStatuses: Ember['default'].computed.filter('rowStatuses', function (status) {
      return !status;
    }),
    allRowsSelected: Ember['default'].computed.empty('unselectedRowStatuses'),

    actions: {
      registerRow: function registerRow(row) {
        this.get('rows').pushObject(row);
      },

      unregisterRow: function unregisterRow(row) {
        var rows = this.get('rows');
        rows.splice(rows.indexOf(row), 1);
      },

      selectAll: function selectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', true);
        });
      },

      deselectAll: function deselectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', false);
        });
      }
    }
  });

});
define('frontend-cp/components/ko-table/header/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'thead',
    sortOrder: '',
    sortColumn: '',
    selectable: Ember['default'].computed.readOnly('parentView.selectable'),

    actions: {
      sort: function sort(column) {
        if (this.get('sortColumn') === column) {
          if (this.get('sortOrder') === 'asc') {
            this.set('sortOrder', 'desc');
          } else if (this.get('sortOrder') === 'desc') {
            this.set('sortOrder', '');
            this.set('sortColumn', '');
          }
        } else {
          this.set('sortColumn', column);
          this.set('sortOrder', 'asc');
        }
        this.sendAction('onSort', this.get('sortColumn'), this.get('sortOrder'));
      },

      selectAll: function selectAll(value) {
        this.get('parentView').send(value ? 'selectAll' : 'deselectAll');
      }
    }
  });

});
define('frontend-cp/components/ko-table/header/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-checkbox",[],["checked",["subexpr","@mut",[["get","parentView.allRowsSelected",["loc",[null,[4,26],[4,52]]]]],[],[]],"onCheck","selectAll"],["loc",[null,[4,4],[4,74]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-table/column",[],[],0,null,["loc",[null,[3,2],[5,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0,1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["block","if",[["get","selectable",["loc",[null,[2,6],[2,16]]]]],[],0,null,["loc",[null,[2,0],[6,7]]]],
        ["content","yield",["loc",[null,[8,0],[8,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-table/row/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tagName: 'tr',
    rowContext: null,
    clickable: false,

    // TODO BUG when component is reusing existing dom (via Glimmer), selectable
    // will be undefined
    selectable: Ember['default'].computed.readOnly('parentView.parentView.selectable'),
    selected: false,

    classNameBindings: [':ko-table_row', 'selected:ko-table_row--selected'],

    registerRow: Ember['default'].on('willInsertElement', function () {
      var table = this.get('parentView.parentView');
      table.send('registerRow', this);
    }),

    unregisterRow: Ember['default'].on('willDestroyElement', function () {
      var table = this.get('parentView.parentView');
      if (table) {
        table.send('unregisterRow', this);
      }
    }),

    click: function click() {
      if (this.get('clickable')) {
        this.attrs.onClick(this.get('rowContext'));
      }
    }
  });

});
define('frontend-cp/components/ko-table/row/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-checkbox",[],["checked",["subexpr","@mut",[["get","selected",["loc",[null,[3,26],[3,34]]]]],[],[]]],["loc",[null,[3,4],[3,36]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-table/cell",[],["class","ko-table_cell--selectable"],0,null,["loc",[null,[2,2],[4,20]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["block","if",[["get","selectable",["loc",[null,[1,6],[1,16]]]]],[],0,null,["loc",[null,[1,0],[5,7]]]],
        ["content","yield",["loc",[null,[6,0],[6,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-table/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-tabs/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    tabsService: Ember['default'].inject.service('tabs'),

    init: function init() {
      this._super();
      this.set('tabs', this.get('tabs') || []);
    },

    /**
     * Currently active tabs
     * @type {Tab[]}
     */
    tabs: null,

    /**
     * Currently selected tab
     * @type {Tab}
     */
    selectedTab: null,

    /**
     * Close a tab and, if it is currently selected, select the tab next to it
     * @param {Tab} tab The tab object to remove
     */
    closeTab: function closeTab(tab) {
      this.get('tabsService').remove(tab);
    },

    actions: {
      select: function select(tab) {
        this.sendAction('onTabSelected', tab);
      },
      close: function close(tab) {
        this.closeTab(tab);
      }
    }
  });

});
define('frontend-cp/components/ko-tabs/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tabs/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("a");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","nav-tabs__label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","nav-tabs__close");
          var el3 = dom.createElement("span");
          dom.setAttribute(el3,"class","i-cross i-size-20 i-inherit-lh");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [2]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'href');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [1]),0,0);
          morphs[4] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["nav-tabs__item",["subexpr","if",[["subexpr","eq",[["get","tab",["loc",[null,[2,33],[2,36]]]],["get","selectedTab",["loc",[null,[2,37],[2,48]]]]],[],["loc",[null,[2,29],[2,49]]]]," is-active"],[],["loc",[null,[2,24],[2,64]]]]]]],
          ["attribute","href",["concat",[["get","tab.url",["loc",[null,[2,98],[2,105]]]]]]],
          ["element","action",["select",["get","tab",["loc",[null,[2,84],[2,87]]]]],[],["loc",[null,[2,66],[2,89]]]],
          ["content","tab.label",["loc",[null,[3,31],[3,44]]]],
          ["element","action",["close",["get","tab",["loc",[null,[3,96],[3,99]]]]],[],["loc",[null,[3,79],[3,101]]]]
        ],
        locals: ["tab"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-tabs/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","each",[["get","tabs",["loc",[null,[1,8],[1,12]]]]],[],0,null,["loc",[null,[1,0],[6,9]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-text-editor/component', ['exports', 'ember', 'npm:quill'], function (exports, Ember, Quill) {

  'use strict';

  Quill['default'].themes.snow.prototype.extendToolbar = function () {};

  exports['default'] = Ember['default'].Component.extend({
    quill: null,
    cursor: 0,
    inlineFiles: null,
    totalSize: 0,
    maxFileSize: 5 * 1024 * 1024, // 5 MB
    maxTotalSize: 20 * 1024 * 1024, // 20 MB,

    header: { isHeader: true },
    infomessage: { isInfoMessage: true },

    isPeopleIconAvailable: true,

    isFocused: false,

    classNameBindings: ['isErrored'],

    /**************
     * Public API
     **************/

    /*
     * This adds text according to domain rules:
     * - if there is no content, add the html
     * - if there is content, add two new lines and append the content
     */
    insertOrAppendHTML: function insertOrAppendHTML(html) {
      var currentText = this.getText();

      if (currentText) {
        this.get('quill').setHTML(this.getHTML() + '<br /><br />' + html);
      } else {
        this.setHTML(html);
      }
    },

    setHTML: function setHTML(html) {
      this.get('quill').setHTML(html);
    },

    clear: function clear() {
      this.get('quill').setText('');
    },

    getHTML: function getHTML() {
      return this.get('quill').getHTML().trim();
    },

    getText: function getText() {
      return this.get('quill').getText().trim();
    },

    /*
     * IMPLEMENTATION
     */
    togglePlaceholder: Ember['default'].observer('isFocused', 'placeholder', function () {
      var placeholder = this.get('placeholder');

      if (!this.get('isFocused') && this.getText() === '' && placeholder) {
        this.get('quill').setText(placeholder);
        this.set('showPlaceholder', true);
      }
      if (this.get('isFocused') && this.getText() === placeholder) {
        this.get('quill').setText('');
      }
    }),

    initFiles: Ember['default'].on('init', function () {
      this.set('inlineFiles', new Ember['default'].A([]));
    }),

    fileIsNotTooBig: function fileIsNotTooBig(file) {
      return file.size < this.maxFileSize && this.totalSize < this.maxFileSize;
    },

    fileIsImage: function fileIsImage(file) {
      return file.type.match(/^image\//i);
    },

    tagDictionary: null,

    setupQuill: Ember['default'].on('didInsertElement', function () {
      var _this = this;

      var tagDictionary = {
        'div': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '', '');
          }
        },
        'span': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '', '');
          }
        },
        'li': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem);
          }
        },
        'ul': {
          markdownable: true,
          process: function process(elem) {
            return _this.list(elem, 'unordered');
          }
        },
        'ol': {
          markdownable: true,
          process: function process(elem) {
            return _this.list(elem, 'ordered');
          }
        },
        'blockquote': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '\n> ', '\n');
          }
        },
        'pre': {
          markdownable: true,
          process: function process(elem) {
            return _this.code(elem);
          }
        },
        'code': {
          markdownable: true,
          process: function process(elem) {
            return _this.code(elem);
          }
        },
        'a': {
          markdownable: true,
          process: function process(elem) {
            return _this.link(elem);
          }
        },
        'hr': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '\n------', '\n');
          }
        },
        'em': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, ' *', '* ');
          }
        },
        'i': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, ' *', '* ');
          }
        },
        'strong': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, ' **', '** ');
          }
        },
        'b': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, ' **', '** ');
          }
        },
        'u': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, ' **', '** ');
          }
        },
        'p': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '\n', '\n');
          }
        },
        'br': {
          markdownable: true,
          process: function process(elem) {
            return _this.process(elem, '    \n', '');
          }
        },
        'img': {
          markdownable: true,
          process: function process(elem) {
            return _this.image(elem);
          }
        },
        '_text': {
          markdownable: true,
          process: function process(elem) {
            return elem === undefined ? '' : _this.getTextFromNode(elem);
          }
        }
      };

      this.set('tagDictionary', tagDictionary);

      this.quill = new Quill['default']('.js-editor', {
        modules: {
          'multi-cursor': true,
          'toolbar': { container: '.js-toolbar' },
          'link-tooltip': true
          // 'image-tooltip': true
        },
        theme: 'snow',
        styles: {
          '.ql-editor': {
            'font-family': "'Source Sans Pro', Sans-Serif"
          },
          '.ql-editor a': {
            'text-decoration': 'none'
          }
        }
      });

      Ember['default'].$('.ql-editor').on('blur', function () {
        if (_this.quill.getSelection() === null) {
          _this.set('cursor', 0);
        } else {
          _this.set('cursor', _this.quill.getSelection().start);
        }
        _this.set('isFocused', false);
      });

      Ember['default'].$('.ql-editor').on('focus', function () {
        _this.set('isFocused', true);
      });

      this.togglePlaceholder();
    }),

    process: function process(elem, prefix, postfix) {
      return prefix + this.parseChildren(elem) + postfix;
    },

    link: function link(elem) {
      var result = ' [';
      result += this.parseChildren(elem);
      return result + '](' + elem.getAttribute('href') + ') ';
    },

    list: function list(elem, type) {
      var count = 1,
          result = '\n',
          children = elem.getElementsByTagName('li');
      for (var i = 0; i < children.length; ++i) {
        // add the list item
        if (type === 'ordered') {
          result += count + '. ';
          count++;
        } else {
          result += '- ';
        }
        // add the child elements
        result += this.parseChildren(children[i]) + '\n';
      }
      return result + '\n';
    },

    code: function code(elem) {
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (elem.childNodes.length === 1) {
        if (tagName === 'code') {
          return ' `' + this.getTextFromNode(elem, true, true) + '` ';
        }
      }
      return '\n' + ('    ' + this.getTextFromNode(elem, true, true)).replace(/\n/g, '\n    ') + '\n';
    },

    image: function image(elem) {
      var alt = elem.getAttribute('alt');
      var title = elem.getAttribute('title');
      var url = elem.getAttribute('src');
      if (alt === null) {
        alt = url;
      }
      var op = ' ![' + alt + '](' + url;
      if (title !== null) {
        op += ' "' + title + ' "';
      }
      return op + ') ';
    },

    hasClass: function hasClass(elem, klass) {
      return (' ' + elem.className + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + klass + ' ') > -1;
    },

    getTextFromNode: function getTextFromNode(elem, allowNewlines, preserveWhitespace) {
      var txt = elem.innerText || elem.textContent;
      txt = txt.trim();
      if (allowNewlines === undefined || !allowNewlines) {
        txt = txt.replace(/\n/g, ' ');
      }
      if (preserveWhitespace === undefined || !preserveWhitespace) {
        txt = txt.replace(/\s{2,}/g, ' ');
      }
      return txt;
    },

    parseChildren: function parseChildren(elem) {
      var result = '',
          children = elem.childNodes;
      for (var i = 0; i < children.length; ++i) {
        var node = children[i];
        var nodeType = node.nodeType;
        var tagName = undefined;
        if (nodeType === 3) {
          tagName = '_text';
        } else {
          // No tag name, nothing to convert.
          if (!node.tagName) {
            continue;
          }
          tagName = node.tagName.toLowerCase();
        }
        if (tagName !== '_text') {
          if (!(tagName in this.tagDictionary)) {
            continue;
          }
          if (!this.tagDictionary[tagName].markdownable) {
            continue;
          }
          if (tagName === 'div') {
            if (this.hasClass(node, 'toc')) {
              result += '\n[TOC]\n';
              continue;
            }
          }
        }
        result += this.tagDictionary[tagName].process(node);
      }
      return result;
    },

    getMarkdown: function getMarkdown() {
      if (this.getText() === this.get('placeholder')) {
        return '';
      }

      var elem = this.$('.ql-editor').get(0);
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (!(tagName in this.tagDictionary)) {
        return '';
      }
      return this.tagDictionary[tagName].process(elem).trim();
    },

    appendHTML: function appendHTML(html) {
      var newText = this.quill.getHTML() + html;
      this.setHTML(newText);
    },

    actions: {
      insertImage: function insertImage() {
        this.quill.insertEmbed(this.cursor, 'image', 'http://quilljs.com/images/cloud.png');
      },
      imageDropped: function imageDropped(file) {
        this.quill.insertEmbed(this.cursor, 'image', file);
      },
      handleInlineFiles: function handleInlineFiles(files) {
        var _this2 = this;

        for (var i = 0, f = undefined; f = files[i]; i++) {
          if (this.fileIsNotTooBig(f) && this.fileIsImage(f)) {
            (function () {
              _this2.inlineFiles.pushObject(f);
              var reader = new FileReader();
              reader.onload = function () {
                _this2.quill.insertEmbed(_this2.cursor + 1, 'image', reader.result);
              };
              reader.readAsDataURL(f);
            })();
          } else {// eslint-disable-line no-empty
            // TODO: Ask design team where they want file is too big message to appear
          }
        }
      },
      handleAttachmentFiles: function handleAttachmentFiles(files) {
        this.sendAction('onAttachFiles', Array.slice(files));
      },
      addParticipant: function addParticipant() {
        this.sendAction('addParticipant', {
          target: this.$().find('.ko-text-editor-header-group__item.i-users')
        });
      },
      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });

});
define('frontend-cp/components/ko-text-editor/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 12
              },
              "end": {
                "line": 67,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-text-editor-header-group__item ko-text-editor-header-group__users-item");
            var el2 = dom.createTextNode("\n                ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2,"class","ko-text-editor-header-group__item-text");
            var el3 = dom.createTextNode("\n                  ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
            return morphs;
          },
          statements: [
            ["element","action",["addParticipant"],[],["loc",[null,[62,19],[62,46]]]],
            ["content","selectedPeople.length",["loc",[null,[64,18],[64,43]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 69,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'title');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1,1,1);
          morphs[4] = dom.createMorphAt(fragment,3,3,contextualElement);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-text-editor-header-group__item i-users ",["subexpr","if",[["get","selectedPeople.length",["loc",[null,[45,70],[45,91]]]],"ko-text-editor-header-group__users-item--active"],[],["loc",[null,[45,65],[45,143]]]]]]],
          ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.cc"],[],["loc",[null,[46,39],[46,73]]]]],[],["loc",[null,[46,22],[46,75]]]]],
          ["element","action",["addParticipant"],[],["loc",[null,[44,17],[44,44]]]],
          ["inline","ko-people",[],["suggestedPeople",["subexpr","@mut",[["get","suggestedPeople",["loc",[null,[48,30],[48,45]]]]],[],[]],"selectedPeople",["subexpr","@mut",[["get","selectedPeople",["loc",[null,[49,29],[49,43]]]]],[],[]],"suggestedPeopleTotal",["subexpr","@mut",[["get","suggestedPeopleTotal",["loc",[null,[50,35],[50,55]]]]],[],[]],"suggestedPeopleLoading",["subexpr","@mut",[["get","suggestedPeopleLoading",["loc",[null,[51,37],[51,59]]]]],[],[]],"title",["subexpr","@mut",[["get","peopleTitleText",["loc",[null,[52,20],[52,35]]]]],[],[]],"inputPlaceholderText",["subexpr","@mut",[["get","peopleInputPlaceholderText",["loc",[null,[53,35],[53,61]]]]],[],[]],"filterNotFoundText",["subexpr","@mut",[["get","peopleFilterNotFoundText",["loc",[null,[54,33],[54,57]]]]],[],[]],"helpText",["subexpr","@mut",[["get","peopleHelpText",["loc",[null,[55,23],[55,37]]]]],[],[]],"emailErrorText",["subexpr","@mut",[["get","peopleEmailErrorText",["loc",[null,[56,29],[56,49]]]]],[],[]],"contextModalId","addParticipants","onPeopleSuggestion","onPeopleSuggestion"],["loc",[null,[47,14],[58,55]]]],
          ["block","if",[["get","selectedPeople.length",["loc",[null,[61,18],[61,39]]]]],[],0,null,["loc",[null,[61,12],[67,19]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 79,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","ko-text-editor__text-area text-area--clean js-editor");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 84,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-text-editor-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","js-toolbar ql-snow");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","layout__item u-1/3");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-bold");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-italic");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-bullet-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-number-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item ko-text-editor__image-upload");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"class","i-camera");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-link");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-quote");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","u-inline-block u-mh");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6,"class","ko-text-editor-header__spacer");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item ko-text-editor__file-upload");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"class","i-clip u-pointer");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","ko-text-editor-header-group__item i-stopwatch");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" Create the editor container ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-text-editor__dropzone-and-editor-container");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1, 1]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element4, [3]);
        var element7 = dom.childAt(element4, [5]);
        var element8 = dom.childAt(element4, [7]);
        var element9 = dom.childAt(element4, [9]);
        var element10 = dom.childAt(element9, [1]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element4, [11]);
        var element13 = dom.childAt(element4, [13]);
        var element14 = dom.childAt(element3, [5]);
        var element15 = dom.childAt(element14, [1]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element14, [5]);
        var element19 = dom.childAt(fragment, [4]);
        var morphs = new Array(18);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1, 1]),2,2);
        morphs[1] = dom.createAttrMorph(element3, 'class');
        morphs[2] = dom.createAttrMorph(element5, 'title');
        morphs[3] = dom.createAttrMorph(element6, 'title');
        morphs[4] = dom.createAttrMorph(element7, 'title');
        morphs[5] = dom.createAttrMorph(element8, 'title');
        morphs[6] = dom.createAttrMorph(element10, 'for');
        morphs[7] = dom.createAttrMorph(element11, 'title');
        morphs[8] = dom.createMorphAt(element9,3,3);
        morphs[9] = dom.createAttrMorph(element12, 'title');
        morphs[10] = dom.createAttrMorph(element13, 'title');
        morphs[11] = dom.createAttrMorph(element16, 'for');
        morphs[12] = dom.createAttrMorph(element17, 'title');
        morphs[13] = dom.createMorphAt(element15,3,3);
        morphs[14] = dom.createMorphAt(element14,3,3);
        morphs[15] = dom.createAttrMorph(element18, 'title');
        morphs[16] = dom.createMorphAt(element19,1,1);
        morphs[17] = dom.createMorphAt(element19,3,3);
        return morphs;
      },
      statements: [
        ["inline","yield",[["get","header",["loc",[null,[7,18],[7,24]]]]],[],["loc",[null,[7,10],[7,26]]]],
        ["attribute","class",["concat",["layout__item u-2/3 t-right ",["subexpr","unless",[["get","showControls",["loc",[null,[10,57],[10,69]]]],"u-hidden"],[],["loc",[null,[10,48],[10,82]]]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.bold"],[],["loc",[null,[12,87],[12,123]]]]],[],["loc",[null,[12,70],[12,125]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.italic"],[],["loc",[null,[13,89],[13,127]]]]],[],["loc",[null,[13,72],[13,129]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.bullet"],[],["loc",[null,[14,94],[14,132]]]]],[],["loc",[null,[14,77],[14,134]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.list"],[],["loc",[null,[15,94],[15,130]]]]],[],["loc",[null,[15,77],[15,132]]]]],
        ["attribute","for",["get","filesInline.elementId",["loc",[null,[17,25],[17,46]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.image"],[],["loc",[null,[18,59],[18,96]]]]],[],["loc",[null,[18,42],[18,98]]]]],
        ["inline","ko-file-field",[],["viewName","filesInline","on-change","handleInlineFiles"],["loc",[null,[20,12],[23,14]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.link"],[],["loc",[null,[25,87],[25,123]]]]],[],["loc",[null,[25,70],[25,125]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.authorship"],[],["loc",[null,[26,88],[26,130]]]]],[],["loc",[null,[26,71],[26,132]]]]],
        ["attribute","for",["get","attachFile.elementId",["loc",[null,[34,25],[34,45]]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.image"],[],["loc",[null,[35,67],[35,104]]]]],[],["loc",[null,[35,50],[35,106]]]]],
        ["inline","ko-file-field",[],["viewName","attachFile","on-change","handleAttachmentFiles"],["loc",[null,[37,12],[40,14]]]],
        ["block","if",[["get","isPeopleIconAvailable",["loc",[null,[43,16],[43,37]]]]],[],0,null,["loc",[null,[43,10],[69,17]]]],
        ["attribute","title",["subexpr","format-message",[["subexpr","intl-get",["generic.texteditor.billing"],[],["loc",[null,[70,92],[70,131]]]]],[],["loc",[null,[70,75],[70,133]]]]],
        ["block","ko-draggable-dropzone",[],["dropped","imageDropped"],1,null,["loc",[null,[79,2],[81,28]]]],
        ["inline","yield",[["get","infomessage",["loc",[null,[82,10],[82,21]]]]],[],["loc",[null,[82,2],[82,23]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-text-editor/toggle-button/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['isActive:is-active'],
    actions: {
      click: function click() {
        this.sendAction('action');
      }
    }
  });

});
define('frontend-cp/components/ko-text-editor/toggle-button/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-text-editor/toggle-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0,1,1);
        return morphs;
      },
      statements: [
        ["element","action",["click"],[],["loc",[null,[1,6],[1,24]]]],
        ["content","yield",["loc",[null,[2,0],[2,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-time-billing/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    timeBillingDuration: null, //length of time tracked in hours as a float
    humanReadableDuration: 'test', //length of time tracked as : separated hour:minute
    isValid: true,

    onDurationParamChange: Ember['default'].on('init', Ember['default'].observer('timeBillingDuration', function () {
      this.set('humanReadableDuration', this.parseDurationToHumanReadable(this.get('timeBillingDuration')));
    })),

    onDurationTextChange: Ember['default'].on('focusOut', function () {
      var durationArray = this.parseHumanReadableDuration(this.get('humanReadableDuration'));
      var hours = durationArray[0];
      var minutes = durationArray[1];
      var duration = Number(hours) + Number(minutes / 60);

      if (isNaN(Number(duration))) {
        this.set('isValid', false);
      } else {
        this.set('isValid', true);
        this.setDuration(duration);
      }
    }),

    parseHumanReadableDuration: function parseHumanReadableDuration(humanDuration) {
      if (humanDuration.indexOf(':') === -1) {
        return [Number(humanDuration), 0];
      }

      var durationParts = humanDuration.split(':');
      var hoursString = durationParts[0];
      var minutesString = durationParts[1];
      return [Number(hoursString), Number(minutesString)];
    },

    setDuration: function setDuration(duration) {
      this.sendAction('on-duration-change', duration);
    },

    parseDurationToHumanReadable: function parseDurationToHumanReadable(duration) {
      if (duration === null) {
        return '';
      }

      var hours = Math.floor(duration);
      var minutes = (duration - Math.floor(duration)) * 60;
      if (minutes < 10) {
        //force to 2sf
        minutes = '0' + minutes;
      }
      return hours + ':' + minutes;
    }

  });

});
define('frontend-cp/components/ko-time-billing/ko-time-billing-context-modal/component', ['exports', 'ember', 'frontend-cp/components/mixins/context-menu-set'], function (exports, Ember, ContextMenuSetComponentMixin) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend(ContextMenuSetComponentMixin['default'], {
    durationChangedAction: 'onDurationChanged', //needed to traverse action coming through this component

    actions: {
      onDurationChanged: function onDurationChanged(duration) {
        this.sendAction('on-duration-change', duration);
      }
    }
  });

});
define('frontend-cp/components/ko-time-billing/ko-time-billing-context-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-time-billing/ko-time-billing-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-time-billing",[],["timeBillingDuration",["subexpr","@mut",[["get","timeBillingDuration",["loc",[null,[2,40],[2,59]]]]],[],[]],"on-duration-change",["subexpr","@mut",[["get","durationChangedAction",["loc",[null,[2,79],[2,100]]]]],[],[]]],["loc",[null,[2,2],[2,102]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 26
          }
        },
        "moduleName": "frontend-cp/components/ko-time-billing/ko-time-billing-context-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-context-modal-item",[],["index","0","title","Track time","contextModalId",["subexpr","@mut",[["get","contextModalId",["loc",[null,[1,69],[1,83]]]]],[],[]]],0,null,["loc",[null,[1,0],[3,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-time-billing/ko-time-billing-demo-open/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    click: function click(event) {
      this.sendAction('addTimeBilling', event);
    }
  });

});
define('frontend-cp/components/ko-time-billing/ko-time-billing-demo-open/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-time-billing/ko-time-billing-demo-open/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Open me");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-time-billing/ko-time-entry/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].TextField.extend({
    placeholder: '1:15',
    isValid: true,
    isInvalid: Ember['default'].computed.not('isValid'),
    classNameBindings: [':ko-time-billing__ko-time-entry', 'isInvalid:ko-time-billing__ko-time-entry--invalid']
  });

});
define('frontend-cp/components/ko-time-billing/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-time-billing/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-time-billing");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-time-billing__label");
        var el3 = dom.createTextNode("Time spent");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","ko-time-billing__time-format-label");
        var el4 = dom.createTextNode("Hrs");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 3]),1,1);
        return morphs;
      },
      statements: [
        ["inline","ko-time-billing/ko-time-entry",[],["value",["subexpr","@mut",[["get","humanReadableDuration",["loc",[null,[4,42],[4,63]]]]],[],[]],"isValid",["subexpr","@mut",[["get","isValid",["loc",[null,[4,72],[4,79]]]]],[],[]]],["loc",[null,[4,4],[4,81]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-timezone-select/component', ['exports', 'ember', 'frontend-cp/components/ko-case-field/suggest/component', 'frontend-cp/components/ko-case-field/suggest/template'], function (exports, Ember, SuggestComponent, template) {

  'use strict';

  var Timezone = Ember['default'].Object.extend({ name: '' });
  var computed = Ember['default'].computed;

  exports['default'] = SuggestComponent['default'].extend({
    layout: template['default'],
    intl: Ember['default'].inject.service(),
    title: Ember['default'].computed(function () {
      return this.get('intl').findTranslationByKey('users.infobar.timezone').translation;
    }),
    initialTimezones: ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Bangui', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/El_Aaiun', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Monrovia', 'Africa/Ndjamena', 'Africa/Tripoli', 'Africa/Tunis', 'Africa/Windhoek', 'America/Adak', 'America/Anchorage', 'America/Anguilla', 'America/Araguaina', 'America/Argentina/Buenos_Aires', 'America/Argentina/Catamarca', 'America/Argentina/Cordoba', 'America/Argentina/Jujuy', 'America/Argentina/La_Rioja', 'America/Argentina/Mendoza', 'America/Argentina/Rio_Gallegos', 'America/Argentina/Salta', 'America/Argentina/San_Juan', 'America/Argentina/San_Luis', 'America/Argentina/Tucuman', 'America/Argentina/Ushuaia', 'America/Aruba', 'America/Asuncion', 'America/Atikokan', 'America/Bahia', 'America/Bahia_Banderas', 'America/Barbados', 'America/Belem', 'America/Belize', 'America/Blanc-Sablon', 'America/Boa_Vista', 'America/Bogota', 'America/Boise', 'America/Cambridge_Bay', 'America/Campo_Grande', 'America/Cancun', 'America/Caracas', 'America/Cayenne', 'America/Cayman', 'America/Chicago', 'America/Chihuahua', 'America/Costa_Rica', 'America/Creston', 'America/Cuiaba', 'America/Danmarkshavn', 'America/Dawson', 'America/Dawson_Creek', 'America/Denver', 'America/Detroit', 'America/Edmonton', 'America/Eirunepe', 'America/El_Salvador', 'America/Ensenada', 'America/Fort_Wayne', 'America/Fortaleza', 'America/Glace_Bay', 'America/Godthab', 'America/Goose_Bay', 'America/Grand_Turk', 'America/Guatemala', 'America/Guayaquil', 'America/Guyana', 'America/Halifax', 'America/Havana', 'America/Hermosillo', 'America/Indiana/Knox', 'America/Indiana/Marengo', 'America/Indiana/Petersburg', 'America/Indiana/Tell_City', 'America/Indiana/Vevay', 'America/Indiana/Vincennes', 'America/Indiana/Winamac', 'America/Inuvik', 'America/Iqaluit', 'America/Jamaica', 'America/Juneau', 'America/Kentucky/Louisville', 'America/Kentucky/Monticello', 'America/La_Paz', 'America/Lima', 'America/Los_Angeles', 'America/Maceio', 'America/Managua', 'America/Manaus', 'America/Martinique', 'America/Matamoros', 'America/Mazatlan', 'America/Menominee', 'America/Merida', 'America/Metlakatla', 'America/Mexico_City', 'America/Miquelon', 'America/Moncton', 'America/Monterrey', 'America/Montevideo', 'America/Montreal', 'America/Nassau', 'America/New_York', 'America/Nipigon', 'America/Nome', 'America/Noronha', 'America/North_Dakota/Beulah', 'America/North_Dakota/Center', 'America/North_Dakota/New_Salem', 'America/Ojinaga', 'America/Pangnirtung', 'America/Paramaribo', 'America/Phoenix', 'America/Port-au-Prince', 'America/Porto_Acre', 'America/Porto_Velho', 'America/Puerto_Rico', 'America/Rainy_River', 'America/Rankin_Inlet', 'America/Recife', 'America/Regina', 'America/Resolute', 'America/Santa_Isabel', 'America/Santarem', 'America/Santiago', 'America/Santo_Domingo', 'America/Sao_Paulo', 'America/Scoresbysund', 'America/Sitka', 'America/St_Johns', 'America/Swift_Current', 'America/Tegucigalpa', 'America/Thule', 'America/Thunder_Bay', 'America/Vancouver', 'America/Whitehorse', 'America/Winnipeg', 'America/Yakutat', 'America/Yellowknife', 'Antarctica/Casey', 'Antarctica/Davis', 'Antarctica/DumontDUrville', 'Antarctica/Macquarie', 'Antarctica/Mawson', 'Antarctica/McMurdo', 'Antarctica/Palmer', 'Antarctica/Rothera', 'Antarctica/Syowa', 'Antarctica/Troll', 'Antarctica/Vostok', 'Arctic/Longyearbyen', 'Asia/Aden', 'Asia/Almaty', 'Asia/Amman', 'Asia/Anadyr', 'Asia/Aqtau', 'Asia/Aqtobe', 'Asia/Ashgabat', 'Asia/Baghdad', 'Asia/Bahrain', 'Asia/Baku', 'Asia/Bangkok', 'Asia/Beirut', 'Asia/Bishkek', 'Asia/Brunei', 'Asia/Calcutta', 'Asia/Chita', 'Asia/Choibalsan', 'Asia/Chongqing', 'Asia/Colombo', 'Asia/Dacca', 'Asia/Damascus', 'Asia/Dili', 'Asia/Dubai', 'Asia/Dushanbe', 'Asia/Gaza', 'Asia/Hebron', 'Asia/Ho_Chi_Minh', 'Asia/Hong_Kong', 'Asia/Hovd', 'Asia/Irkutsk', 'Asia/Istanbul', 'Asia/Jakarta', 'Asia/Jayapura', 'Asia/Jerusalem', 'Asia/Kabul', 'Asia/Kamchatka', 'Asia/Karachi', 'Asia/Kashgar', 'Asia/Kathmandu', 'Asia/Khandyga', 'Asia/Krasnoyarsk', 'Asia/Kuala_Lumpur', 'Asia/Kuching', 'Asia/Macao', 'Asia/Magadan', 'Asia/Makassar', 'Asia/Manila', 'Asia/Nicosia', 'Asia/Novokuznetsk', 'Asia/Novosibirsk', 'Asia/Omsk', 'Asia/Oral', 'Asia/Pontianak', 'Asia/Pyongyang', 'Asia/Qyzylorda', 'Asia/Rangoon', 'Asia/Sakhalin', 'Asia/Samarkand', 'Asia/Seoul', 'Asia/Singapore', 'Asia/Srednekolymsk', 'Asia/Taipei', 'Asia/Tashkent', 'Asia/Tbilisi', 'Asia/Tehran', 'Asia/Thimbu', 'Asia/Tokyo', 'Asia/Ulaanbaatar', 'Asia/Ust-Nera', 'Asia/Vladivostok', 'Asia/Yakutsk', 'Asia/Yekaterinburg', 'Asia/Yerevan', 'Atlantic/Azores', 'Atlantic/Bermuda', 'Atlantic/Canary', 'Atlantic/Cape_Verde', 'Atlantic/Faeroe', 'Atlantic/Madeira', 'Atlantic/Reykjavik', 'Atlantic/South_Georgia', 'Atlantic/Stanley', 'Australia/ACT', 'Australia/Adelaide', 'Australia/Brisbane', 'Australia/Broken_Hill', 'Australia/Currie', 'Australia/Darwin', 'Australia/Eucla', 'Australia/Hobart', 'Australia/LHI', 'Australia/Lindeman', 'Australia/Melbourne', 'Australia/Perth', 'CET', 'CST6CDT', 'Chile/EasterIsland', 'EET', 'EST', 'EST5EDT', 'Eire', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/UCT', 'Etc/UTC', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Gibraltar', 'Europe/Helsinki', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Lisbon', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Paris', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/Simferopol', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Uzhgorod', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zaporozhye', 'HST', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Reunion', 'Kwajalein', 'MET', 'MST', 'MST7MDT', 'NZ-CHAT', 'PST8PDT', 'Pacific/Apia', 'Pacific/Bougainville', 'Pacific/Chuuk', 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Wake', 'Pacific/Wallis'],

    // CPs
    items: computed('initialTimezones', function () {
      return this.get('initialTimezones').map(function (name) {
        return Timezone.create({ name: name });
      });
    }),

    // Actions
    actions: {
      itemSelect: function itemSelect(timezone) {
        this.sendAction('onChangeTimezone', timezone);
      }
    }
  });

});
define('frontend-cp/components/ko-timezone-select/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-timezone-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-case-field/suggest",[],["defaultClass","","selectedItem",["subexpr","@mut",[["get","timezone",["loc",[null,[3,15],[3,23]]]]],[],[]],"items",["subexpr","@mut",[["get","timezones",["loc",[null,[4,8],[4,17]]]]],[],[]],"title",["subexpr","intl-get",["users.infobar.timezone"],[],["loc",[null,[5,8],[5,43]]]],"isEdited",["subexpr","@mut",[["get","isEdited",["loc",[null,[6,11],[6,19]]]]],[],[]],"isErrored",["subexpr","@mut",[["get","isErrored",["loc",[null,[7,12],[7,21]]]]],[],[]],"onItemSelect","changeTimezone"],["loc",[null,[1,0],[9,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-toast/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var ALERT_TYPE_INFO = 'info';
  var ALERT_TYPE_WARNING = 'warning';
  var ALERT_TYPE_ERROR = 'error';
  var ALERT_TYPE_SUCCESS = 'success';

  var AUTODISMISS_TIMEOUT = 3000;

  exports['default'] = Ember['default'].Component.extend({
    type: null,
    dismissable: false,
    autodismiss: false,
    isClosing: false,

    animateIn: Ember['default'].on('willInsertElement', function () {
      var $componentElement = this.$();
      animate($componentElement, 'ko-toast--add');
    }),

    initAutoDismiss: Ember['default'].on('willInsertElement', function () {
      var _this = this;

      var autodismiss = this.get('autodismiss');
      if (!autodismiss) {
        return;
      }
      Ember['default'].run.later(function () {
        _this.animateOut();
      }, AUTODISMISS_TIMEOUT);
    }),

    iconClass: Ember['default'].computed('type', function () {
      switch (this.get('type')) {
        case ALERT_TYPE_INFO:
          return 'i-info';
        case ALERT_TYPE_WARNING:
          return 'i-caution-solid';
        case ALERT_TYPE_ERROR:
          return 'i-danger-solid';
        case ALERT_TYPE_SUCCESS:
          return 'i-tick';
        default:
          return null;
      }
    }),

    click: function click() {
      var autodismiss = this.get('autodismiss');
      if (autodismiss) {
        this.animateOut();
      }
    },

    animateOut: function animateOut() {
      var _this2 = this;

      var isClosing = this.get('isClosing');
      if (isClosing) {
        return;
      }
      this.set('isClosing', true);

      var $componentElement = this.$();
      var componentHeight = $componentElement.outerHeight();
      animate($componentElement, 'ko-toast--remove', {
        clamp: true
      }).then(function () {
        $componentElement.hide();
        _this2.sendAction('close');
      });
      $componentElement.css('margin-bottom', -componentHeight + 'px');
    },

    actions: {
      onCloseClicked: function onCloseClicked() {
        this.animateOut();
      }
    }
  });

  function animate($element, className) {
    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var _ref$clamp = _ref.clamp;
    var clamp = _ref$clamp === undefined ? false : _ref$clamp;

    return new Ember['default'].RSVP.Promise(function (resolve, reject) {
      $element.addClass(className);
      forceRender($element);
      $element.one('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
        if (!clamp) {
          $element.removeClass(className + ' ' + className + '-active');
        }
        resolve();
      });
      $element.addClass(className + '-active');
    });

    function forceRender($element) {
      $element.outerHeight();
      return $element;
    }
  }

});
define('frontend-cp/components/ko-toast/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-toast/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1,"class","ko-toast__close button-naked i-cross-bold");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [
          ["element","action",["onCloseClicked"],[],["loc",[null,[3,60],[3,87]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-toast/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2,"class","ko-toast__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","ko-toast__body");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createMorphAt(element1,1,1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]),0,0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]),0,0);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-toast__container ko-toast__container--",["get","type",["loc",[null,[1,56],[1,60]]]],["subexpr","if",[["get","body",["loc",[null,[1,68],[1,72]]]]," ko-toast__container--multiline"],[],["loc",[null,[1,63],[1,108]]]],["subexpr","if",[["get","dismissable",["loc",[null,[1,113],[1,124]]]]," ko-toast__container--dismissable"],[],["loc",[null,[1,108],[1,162]]]]]]],
        ["block","if",[["get","dismissable",["loc",[null,[2,8],[2,19]]]]],[],0,null,["loc",[null,[2,2],[4,9]]]],
        ["attribute","class",["concat",["ko-toast__icon ",["get","iconClass",["loc",[null,[5,33],[5,42]]]]]]],
        ["content","title",["loc",[null,[6,29],[6,40]]]],
        ["content","body",["loc",[null,[7,30],[7,40]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-toggle/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    activated: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    keyDown: function keyDown(e) {
      if (e.keyCode === KeyCodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === KeyCodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.onToggle) {
          this.sendAction('onToggle', !this.get('activated'));
        } else {
          this.toggleProperty('activated');
        }
      }
    }

  });

});
define('frontend-cp/components/ko-toggle/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["ko-toggle__label u-v-center ",["subexpr","if",[["get","micro",["loc",[null,[5,49],[5,54]]]],"ko-toggle__label--micro"],[],["loc",[null,[5,44],[5,82]]]]]]],
          ["attribute","for",["concat",[["get","elementId",["loc",[null,[5,91],[5,100]]]],"-toggle"]]],
          ["element","action",["toggleRadio"],[],["loc",[null,[5,111],[5,135]]]],
          ["content","label",["loc",[null,[5,136],[5,145]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"role","radio");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element1, 'tabindex');
        morphs[3] = dom.createAttrMorph(element1, 'aria-live');
        morphs[4] = dom.createAttrMorph(element1, 'id');
        morphs[5] = dom.createElementMorph(element1);
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["ko-toggle__container ",["subexpr","if",[["get","micro",["loc",[null,[1,38],[1,43]]]],"ko-toggle__container--micro"],[],["loc",[null,[1,33],[1,75]]]]," ",["subexpr","if",[["get","activated",["loc",[null,[1,81],[1,90]]]],"ko-toggle__container--activated"],[],["loc",[null,[1,76],[1,126]]]]]]],
        ["attribute","aria-checked",["concat",[["get","activated",["loc",[null,[1,157],[1,166]]]]]]],
        ["attribute","tabindex",["concat",[["get","tabindex",["loc",[null,[1,182],[1,190]]]]]]],
        ["attribute","aria-live",["concat",[["get","ariaLive",["loc",[null,[1,207],[1,215]]]]]]],
        ["attribute","id",["concat",[["get","elementId",["loc",[null,[1,225],[1,234]]]],"-toggle"]]],
        ["element","action",["toggleRadio"],[],["loc",[null,[1,245],[1,269]]]],
        ["attribute","class",["concat",["ko-toggle__toggle u-v-center ",["subexpr","if",[["get","micro",["loc",[null,[2,48],[2,53]]]],"ko-toggle__toggle--micro"],[],["loc",[null,[2,43],[2,82]]]]," ",["subexpr","if",[["get","activated",["loc",[null,[2,88],[2,97]]]],"ko-toggle__toggle--activated"],[],["loc",[null,[2,83],[2,130]]]]]]],
        ["block","if",[["get","label",["loc",[null,[4,6],[4,11]]]]],[],0,null,["loc",[null,[4,0],[6,7]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-toggle-context-modal/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    click: function click(event) {
      this.sendAction('toggleModal', event);
    }
  });

});
define('frontend-cp/components/ko-toggle-context-modal/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-toggle-context-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","yield",["loc",[null,[1,0],[1,9]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-universal-search/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNameBindings: ['isSearching:is-active'],
    searchResults: null,
    searchQuery: null,
    loadSearchRouteAction: 'loadSearchRoute',
    store: Ember['default'].inject.service(),
    highlightedResult: null,

    isSearching: Ember['default'].computed.bool('searchQuery'),

    didChangeSearchingStatus: Ember['default'].on('init', Ember['default'].observer('isSearching', function () {
      this.sendAction('searchingChanged', this.get('isSearching'));
    })),

    onSearchQueryChanged: Ember['default'].observer('searchQuery', function () {
      Ember['default'].run.debounce(this, 'fireSearchAction', 250);
    }),

    fireSearchAction: function fireSearchAction() {
      var _this = this;

      var query = this.get('searchQuery');

      if (!query) {
        this.set('searchResults', []);
        return;
      }

      this.get('store').query('search-result-group', { query: query, fields: 'snippet,resource' }).then(function (results) {
        _this.set('searchResults', results);
      })['catch'](function (e) {
        if (e.errors.errors[0].code !== 'RESOURCE_NOT_FOUND') {
          throw e;
        }
        _this.set('searchResults', []);
      });
    },

    flattenedResults: Ember['default'].computed('searchResults', function () {
      return this.get('searchResults').reduce(function (results, searchResultGroup) {
        searchResultGroup.get('results').forEach(function (result) {
          results.pushObject(result);
        });

        return results;
      }, []);
    }),

    actions: {
      clearSearchQuery: function clearSearchQuery() {
        this.set('searchQuery', '');
        this.set('searchResults', []);
      },

      highlightResult: function highlightResult(highlightedResult) {
        this.set('highlightedResult', highlightedResult);
      },

      selectHighlightedResultAction: function selectHighlightedResultAction() {
        var result = this.get('highlightedResult');

        switch (result.get('resource')) {
          case 'person':
            this.sendAction('loadSearchRouteAction', '/agent/users/', result.get('objectId'));
            break;
          case 'case':
            this.sendAction('loadSearchRouteAction', '/agent/cases/', result.get('objectId'));
            break;
          default:
            break;
        }
      },

      highlightNextResult: function highlightNextResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');

        if (!currentlyHighlightedResult) {
          this.set('highlightedResult', results.get('firstObject'));
          return;
        }

        var newHighlightedIndex = results.indexOf(currentlyHighlightedResult) + 1;

        // back to the start if we try to go above the list
        if (newHighlightedIndex === results.length) {
          newHighlightedIndex = 0;
        }
        this.set('highlightedResult', results.objectAt(newHighlightedIndex));
      },

      highlightPreviousResult: function highlightPreviousResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');

        if (!currentlyHighlightedResult) {
          this.set('highlightedResult', results.get('lastObject'));
          return;
        }

        var newHighlightedIndex = results.indexOf(currentlyHighlightedResult) - 1;

        // back to the start if we try to go below the list
        if (newHighlightedIndex === -1) {
          newHighlightedIndex = results.length - 1;
        }
        this.set('highlightedResult', results.objectAt(newHighlightedIndex));
      }
    }
  });

});
define('frontend-cp/components/ko-universal-search/entry/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, Ember, KeyCodes) {

  'use strict';

  exports['default'] = Ember['default'].TextField.extend({
    selectHighlightedResultAction: 'selectHighlightedResultAction',
    highlightNextResultAction: 'highlightNextResult',
    highlightPreviousResultAction: 'highlightPreviousResult',
    stopSearchingAction: 'clearSearchQuery',

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case KeyCodes.down:
          {
            this.sendAction('highlightNextResultAction');
            break;
          }
        case KeyCodes.up:
          {
            this.sendAction('highlightPreviousResultAction');
            break;
          }
        case KeyCodes.enter:
          {
            //event.preventDefault();
            this.sendAction('selectHighlightedResultAction');
            this.sendAction('stopSearchingAction');
            return false;
          }
        case KeyCodes.escape:
          {
            this.sendAction('stopSearchingAction');
          }
      }
    }
  });

});
define('frontend-cp/components/ko-universal-search/result/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Parmas:
    resource: null,
    result: null,
    isHighlighted: false,
    selectHighlightedResultAction: 'selectHighlightedResultAction',
    stopSearchingAction: 'clearSearchQuery',

    tagName: 'li',
    classNameBindings: ['isHighlighted:is-active'],

    iconClass: Ember['default'].computed('resource', function () {
      return 'i-' + this.get('resource');
    }),

    highlight: Ember['default'].on('mouseEnter', function () {
      this.sendAction('on-highlight', this.get('result'));
    }),

    click: function click() {
      this.sendAction('selectHighlightedResultAction');
      this.sendAction('stopSearchingAction');
    }

  });

});
define('frontend-cp/components/ko-universal-search/result/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/result/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","universal-search_result__content");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","universal-search_result__action");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(fragment, [2]),0,0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]),0,0);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["universal-search_result__icon ",["get","iconClass",["loc",[null,[1,42],[1,51]]]]]]],
        ["content","result.snippet",["loc",[null,[2,46],[2,66]]]],
        ["inline","format-message",[["subexpr","intl-get",["generic.search_result_select_instruction"],[],["loc",[null,[3,62],[3,115]]]]],[],["loc",[null,[3,45],[3,117]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/components/ko-universal-search/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","universal-search__action");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2,"class","i-cross");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [
          ["element","action",["clearSearchQuery"],[],["loc",[null,[9,42],[9,71]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
              return morphs;
            },
            statements: [
              ["inline","ko-universal-search/result",[],["result",["subexpr","@mut",[["get","result",["loc",[null,[20,13],[20,19]]]]],[],[]],"resource",["subexpr","@mut",[["get","resultsGroup.id",["loc",[null,[21,15],[21,30]]]]],[],[]],"snippet",["subexpr","@mut",[["get","result.snippet",["loc",[null,[22,14],[22,28]]]]],[],[]],"isHighlighted",["subexpr","eq",[["get","result",["loc",[null,[23,24],[23,30]]]],["get","highlightedResult",["loc",[null,[23,31],[23,48]]]]],[],["loc",[null,[23,20],[23,49]]]],"on-highlight","highlightResult"],["loc",[null,[19,6],[25,8]]]]
            ],
            locals: ["result"],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 29,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1,"class","list-bare");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            return morphs;
          },
          statements: [
            ["block","each",[["get","resultsGroup.results",["loc",[null,[18,14],[18,34]]]]],[],0,null,["loc",[null,[18,6],[26,15]]]]
          ],
          locals: ["resultsGroup"],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1,"class","u-p");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["search.no-results"],[],["loc",[null,[32,25],[32,55]]]]],[],["loc",[null,[32,8],[32,57]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 35,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["get","isSearching",["loc",[null,[30,10],[30,21]]]]],[],0,null,["loc",[null,[30,4],[34,11]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 2
              },
              "end": {
                "line": 56,
                "column": 3
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("-GET RID OF ME!!!! ");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","universal-search__preview typography");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h6");
            dom.setAttribute(el2,"class","heading heading--capitalized t-small");
            var el3 = dom.createTextNode("case preview");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n     ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h4");
            dom.setAttribute(el2,"class","heading u-mv-");
            var el3 = dom.createTextNode("My internet doesn't seem to work");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n     ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h6");
            dom.setAttribute(el2,"class","t-caption");
            var el3 = dom.createTextNode("989-0989 - Bug Report");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n     ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","flag flag--top");
            var el3 = dom.createTextNode("\n       ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","flag__img");
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("img");
            dom.setAttribute(el4,"width","42");
            dom.setAttribute(el4,"height","42");
            dom.setAttribute(el4,"src","http://i.imgur.com/IYz9i5N.jpg");
            dom.setAttribute(el4,"alt","");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n       ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n       ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","flag__body");
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("Grace Lawson ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("span");
            dom.setAttribute(el5,"class","t-caption");
            var el6 = dom.createTextNode("Yesterday at 11:24am");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("p");
            var el5 = dom.createTextNode("\n          Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue. Curabitur blandit tempus porttitor. Etiam porta sem malesuada magna mollis euismod. Aenean lacinia bibendum nulla sed consectetur. Nulla vitae elit libero, a pharetra augue. Curabitur blandit tempus porttitor.\n         ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n       ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n     ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n   ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","universal-search__content");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2,"class","universal-search__results");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
          morphs[1] = dom.createMorphAt(element0,3,3);
          return morphs;
        },
        statements: [
          ["block","each",[["get","searchResults",["loc",[null,[16,12],[16,25]]]]],[],0,1,["loc",[null,[16,4],[35,13]]]],
          ["block","if",[["get","searchQuery",["loc",[null,[38,8],[38,19]]]]],[],2,null,["loc",[null,[38,2],[56,10]]]]
        ],
        locals: [],
        templates: [child0, child1, child2]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 59,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","universal-search__input");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","universal-search__icon");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3,"class","i-search i-size-18 i-color-grey--dark u-inherit-lh");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element2,3,3);
        morphs[1] = dom.createMorphAt(element2,5,5);
        morphs[2] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-universal-search/entry",[],["type","text","value",["subexpr","@mut",[["get","searchQuery",["loc",[null,[6,48],[6,59]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["search.placeholder"],[],["loc",[null,[6,88],[6,119]]]]],[],["loc",[null,[6,72],[6,120]]]]],["loc",[null,[6,2],[6,122]]]],
        ["block","if",[["get","searchQuery",["loc",[null,[8,8],[8,19]]]]],[],0,null,["loc",[null,[8,2],[10,9]]]],
        ["block","if",[["get","searchQuery",["loc",[null,[13,6],[13,17]]]]],[],1,null,["loc",[null,[13,0],[58,7]]]]
      ],
      locals: [],
      templates: [child0, child1]
    };
  }()));

});
define('frontend-cp/components/ko-user-action-menu/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    //Params
    permissions: null,
    userRoleType: null,
    userModel: null,

    permissionService: Ember['default'].inject.service('permissions'),
    sessionService: Ember['default'].inject.service('session'),

    editSignature: 'editSignature',
    changeUserPassword: 'changeUserPassword',
    deleteUser: 'deleteUser',

    classNameBindings: ['menuActive', 'noItems:u-hidden'],
    menuActive: false,

    noItems: Ember['default'].computed('hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission', function () {
      var _this = this;

      var permissionItems = ['hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission'];
      return permissionItems.filter(function (item) {
        return _this.get(item);
      }).length === 0;
    }),

    hasChangeSignaturePermission: Ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.signature.edit', this.get('userModel'));
    }),

    hasChangePasswordEmailPermission: Ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.password.change', this.get('userModel'));
    }),

    hasDeletePermission: Ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.delete', this.get('userModel'));
    }),

    actions: {
      editSignature: function editSignature() {
        this.sendAction('editSignature');
      },
      deleteUser: function deleteUser() {
        this.sendAction('deleteUser');
      },
      changeUserPassword: function changeUserPassword() {
        this.sendAction('changeUserPassword');
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }
  });

});
define('frontend-cp/components/ko-user-action-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1,"class","button button--default button--dropdown");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2,"class","i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element2, 'onclick');
                morphs[1] = dom.createMorphAt(element2,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["editSignature"],[],["loc",[null,[16,51],[16,77]]]]],
                ["inline","format-message",[["subexpr","intl-get",["users.editsignature"],[],["loc",[null,[17,27],[17,59]]]]],[],["loc",[null,[17,10],[17,61]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child1 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["changeUserPassword"],[],["loc",[null,[22,51],[22,82]]]]],
                ["inline","format-message",[["subexpr","intl-get",["users.changepassword"],[],["loc",[null,[23,27],[23,60]]]]],[],["loc",[null,[23,10],[23,62]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          var child2 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 6
                  },
                  "end": {
                    "line": 31,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1,"class","ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0,1,1);
                return morphs;
              },
              statements: [
                ["attribute","onclick",["subexpr","action",["deleteUser"],[],["loc",[null,[28,51],[28,74]]]]],
                ["inline","format-message",[["subexpr","intl-get",["users.deleteuser"],[],["loc",[null,[29,27],[29,56]]]]],[],["loc",[null,[29,10],[29,58]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
              morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","hasChangeSignaturePermission",["loc",[null,[15,12],[15,40]]]]],[],0,null,["loc",[null,[15,6],[19,13]]]],
              ["block","if",[["get","hasChangePasswordEmailPermission",["loc",[null,[21,12],[21,44]]]]],[],1,null,["loc",[null,[21,6],[25,13]]]],
              ["block","if",[["get","hasDeletePermission",["loc",[null,[27,12],[27,31]]]]],[],2,null,["loc",[null,[27,6],[31,13]]]]
            ],
            locals: [],
            templates: [child0, child1, child2]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-dropdown-select__content","style",["subexpr","@mut",[["get","contentStyle",["loc",[null,[14,66],[14,78]]]]],[],[]]],0,null,["loc",[null,[14,4],[32,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[8,12],[8,16]]]],"button"],[],["loc",[null,[8,8],[8,26]]]]],[],0,null,["loc",[null,[8,2],[12,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[13,12],[13,16]]]],"content"],[],["loc",[null,[13,8],[13,27]]]]],[],1,null,["loc",[null,[13,2],[33,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["alignRight",true,"onFocusOut","hideMenu","onFocusIn","showMenu","hideOnChildFocus",true,"hideOnClick",true],0,null,["loc",[null,[1,0],[34,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-user-content/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    classNames: ['ko-user-content'],

    // Params:
    isFollowingSaving: false,
    isStateSaving: false,

    store: Ember['default'].inject.service(),
    sessionService: Ember['default'].inject.service('session'),
    permissionService: Ember['default'].inject.service('permissions'),
    notificationService: Ember['default'].inject.service('notification'),
    errorHandlerService: Ember['default'].inject.service('errorHandler'),
    tabsService: Ember['default'].inject.service('tabs'),
    customFieldsList: Ember['default'].inject.service('custom-fields/list'),

    intl: Ember['default'].inject.service(),

    errors: [],

    tagSuggestionService: Ember['default'].inject.service('suggestion/tag'),

    teamRecords: [],
    suggestedTeams: [],
    suggestedTags: [],
    editedCustomFields: null,
    editingSignature: null,

    signatureModal: false,

    initCustomFields: Ember['default'].on('init', function () {
      this.set('editedCustomFields', new Ember['default'].Object());
    }),

    initEditingSignature: Ember['default'].on('init', function () {
      // the default editing signature should be the users current one
      this.set('editingSignature', this.get('model.signature'));
    }),

    roles: [],
    initRoles: Ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('role').then(function (roles) {
        _this.set('roles', roles);
      });
    }),

    initTeams: Ember['default'].on('init', function () {
      var _this2 = this;

      this.set('teams', []);
      this.get('store').findAll('team').then(function (teams) {
        _this2.set('teams', teams.map(function (team) {
          return team.get('title');
        }));
        _this2.set('teamRecords', teams);
      });
    }),

    organizations: [],
    initOrganizations: Ember['default'].on('init', function () {
      var _this3 = this;

      this.get('store').findAll('organization').then(function (organizations) {
        _this3.set('organizations', organizations);
      });
    }),

    userTeams: Ember['default'].computed('model.teams.@each.title', function () {
      return this.get('model.teams').map(function (tag) {
        return tag.get('title');
      });
    }),

    userTags: Ember['default'].computed('model.tags.@each.name', function () {
      return this.get('model.tags').map(function (tag) {
        return tag.get('name');
      }).uniq();
    }),

    accessLevels: Ember['default'].computed(function () {
      return [Ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.accesslevel.inherit').translation,
        value: null
      }), Ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.accesslevel.self').translation,
        value: 'SELF'
      }), Ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.accesslevel.organization').translation,
        value: 'ASSIGNED_TO_TEAMS'
      }), Ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.accesslevel.all').translation,
        value: 'ALL'
      })];
    }),

    recentFeedback: [],
    initRecentFeedback: Ember['default'].on('init', function () {
      var _this4 = this;

      this.get('store').query('rating', { user_id: this.get('model.id') }).then(function (ratings) {
        return _this4.set('recentFeedback', ratings);
      });
    }),

    userDates: Ember['default'].computed('model.createdAt', 'model.updatedAt', 'model.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created').translation,
        value: this.get('model.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated').translation,
        value: this.get('model.updatedAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.lastseen').translation,
        value: this.get('model.visitedAt') }];
    }),

    customFields: Ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('isRoleEdited', false);
      this.set('isOrganizationEdited', false);
      this.set('isTimezoneEdited', false);
      this.set('isTeamsFieldEdited', false);
      this.set('isTagsFieldEdited', false);
      this.set('isAccessLevelEdited', false);
      this.set('isFollowingSaving', false);
      this.set('isStateSaving', false);
    },

    canModifyUserState: Ember['default'].computed(function () {
      return this.get('permissionService').has('app.user.disable', this.get('model'));
    }),

    canFollowUser: Ember['default'].computed(function () {
      return this.get('permissionService').has('app.user.follow', this.get('model'));
    }),

    canChangeAgentCaseAccessPermission: Ember['default'].computed(function () {
      return this.get('permissionService').has('app.user.change_access_permission', this.get('sessionService').permissions, this.get('model'));
    }),

    isEnabled: Ember['default'].computed.bool('model.isEnabled'),

    componentFor: function componentFor(fieldType) {
      switch (fieldType) {
        case 'TEXT':
          return 'ko-user-field/text';
        case 'TEXTAREA':
          return 'ko-user-field/text';
        case 'CHECKBOX':
          return 'ko-user-field/checkbox';
        case 'SELECT':
          return 'ko-user-field/select';
        default:
          return '';
      }
    },

    optionsForField: function optionsForField(field) {
      /*
       * System fields
       */
      switch (field.get('fieldType')) {
        case 'PRIORITY':
          return this.get('store').peekAll('case-priority');
        case 'STATUS':
          return this.get('store').peekAll('case-status').filter(function (status) {
            return status.get('statusType') !== 'NEW' && status.get('statusType') !== 'CLOSED';
          });
        case 'TYPE':
          return this.get('store').peekAll('case-type');
      }
    },

    actions: {
      toggleUserState: function toggleUserState() {
        var _this5 = this;

        this.set('isStateSaving', true);
        this.toggleProperty('model.isEnabled');
        this.get('model').save().then(function () {
          return _this5.resetForm();
        });
      },

      editSignature: function editSignature() {
        this.set('signatureModal', true);
      },

      closeSignatureModal: function closeSignatureModal() {
        this.set('signatureModal', false);
      },

      deleteUser: function deleteUser() {
        var deleteMsg = this.get('intl').findTranslationByKey('users.confirmdelete').translation;

        if (confirm(deleteMsg)) {
          this.get('model').deleteRecord();
          this.get('model').save();
          this.get('tabsService').remove(this.get('tabsService.selectedTab'));
        }
      },

      updateSignature: function updateSignature() {
        this.set('model.signature', this.get('editingSignature'));
        this.set('signatureModal', false);
      },

      roleSelect: function roleSelect(role) {
        this.set('model.role', role);
        this.set('isRoleEdited', this.get('model').hasDirtyBelongsToRelationship('role'));
      },

      organizationSelect: function organizationSelect(org) {
        var _this6 = this;

        this.set('model.organization', org);
        this.get('model').hasDirtyBelongsToRelationship('organization').then(function (relationshipIsDirty) {
          _this6.set('isOrganizationEdited', relationshipIsDirty);
        });
      },

      accessLevelSelect: function accessLevelSelect(level) {
        this.set('model.accessLevel', level);
        this.set('isAccessLevelEdited', this.get('model').hasDirtyBelongsToRelationship('accessLevel'));
      },

      timezoneSelect: function timezoneSelect(timezone) {
        this.set('model.timeZone', timezone.get('name'));
        this.set('isTimezoneEdited', this.get('model').hasDirtyAttribute('timeZone'));
      },

      addTeam: function addTeam(teamName) {
        var team = this.get('teamRecords').findBy('title', teamName);
        if (team) {
          this.get('model.teams').pushObject(team);
          this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
        }
      },

      removeTeam: function removeTeam(teamName) {
        var team = this.get('teamRecords').findBy('title', teamName);
        if (team) {
          this.get('model.teams').removeObject(team);
          this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
        }
      },

      suggestTeams: function suggestTeams(searchTerm, selectedTeams) {
        var _this7 = this;

        if (!searchTerm) {
          this.set('suggestedTeams', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggestFilter(this.get('teamRecords'), searchTerm, 'title').then(function (data) {
          var suggestedTeams = suggestionService.exclude(data, selectedTeams, 'title');
          _this7.set('suggestedTeams', suggestedTeams.map(function (tag) {
            return tag.get('title');
          }));
        });
      },

      addTag: function addTag(tag) {
        var newTag = this.get('store').createRecord('tag', { name: tag });
        this.get('model.tags').pushObject(newTag);
        this.set('isTagsFieldEdited', this.get('model').hasDirtyHasManyRelationship('tags'));
      },

      removeTag: function removeTag(tagName) {
        var tag = this.get('model.tags').find(function (tag) {
          return tag.get('name') === tagName;
        });
        if (tag) {
          this.get('model.tags').removeObject(tag);
          this.set('isTagsFieldEdited', this.get('model').hasDirtyHasManyRelationship('tags'));
        }
      },

      suggestTags: function suggestTags(searchTerm, selectedTags) {
        var _this8 = this;

        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggest(searchTerm).then(function (data) {
          data = suggestionService.exclude(data, selectedTags);

          _this8.set('suggestedTags', data.map(function (tag) {
            return tag.get('name');
          }));
        });
      },

      changeUserPassword: function changeUserPassword() {
        var _this9 = this;

        var PAYLOAD = { email: this.get('model.primaryEmailAddress') };

        Ember['default'].$.ajax('/api/v1/base/password/reset', {
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(PAYLOAD),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function () {
          _this9.get('notificationService').add({
            type: 'success',
            title: _this9.get('intl').findTranslationByKey('users.password_reset_email.success').translation,
            autodismiss: true
          });
        }, function (response) {
          _this9.get('errorHandlerService').handleServerError({ errors: response.responseJSON });
        });
      },

      submit: function submit() {
        var _this10 = this;

        this.get('model').save().then(function () {
          _this10.get('notificationService').add({
            type: 'success',
            title: _this10.get('intl').findTranslationByKey('users.user.updated').translation,
            autodismiss: true
          });

          _this10.resetForm();
        }, function (e) {
          _this10.set('errors', e.errors);
        });
      }
    }
  });

});
define('frontend-cp/components/ko-user-content/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 8
            },
            "end": {
              "line": 55,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","format-message",[["subexpr","intl-get",["users.add_a_note"],[],["loc",[null,[54,27],[54,56]]]]],[],["loc",[null,[54,10],[54,58]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 74,
                "column": 8
              },
              "end": {
                "line": 84,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-field/select",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.infobar.accesslevel"],[],["loc",[null,[76,34],[76,72]]]]],[],["loc",[null,[76,18],[76,73]]]],"options",["subexpr","@mut",[["get","accessLevels",["loc",[null,[77,20],[77,32]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isAccessLevelEdited",["loc",[null,[78,21],[78,40]]]]],[],[]],"value",["subexpr","@mut",[["get","model.accessLevel",["loc",[null,[79,18],[79,35]]]]],[],[]],"onValueChange","accessLevelSelect","idPath","value","labelPath","name"],["loc",[null,[75,10],[83,12]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 103,
                    "column": 12
                  },
                  "end": {
                    "line": 112,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
                return morphs;
              },
              statements: [
                ["inline","component",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[104,37],[104,66]]]],["get","field.fieldType",["loc",[null,[104,67],[104,82]]]]],[],["loc",[null,[104,26],[104,83]]]]],["customFieldsModel",["subexpr","@mut",[["get","model.customFields",["loc",[null,[105,32],[105,50]]]]],[],[]],"field",["subexpr","@mut",[["get","field",["loc",[null,[106,20],[106,25]]]]],[],[]],"fieldValue",["subexpr","ko-helper",[["get","customFieldsList.findCustomFieldValue",["loc",[null,[107,36],[107,73]]]],["get","model.customFields",["loc",[null,[107,74],[107,92]]]],["get","field",["loc",[null,[107,93],[107,98]]]]],[],["loc",[null,[107,25],[107,99]]]],"title",["subexpr","@mut",[["get","field.title",["loc",[null,[108,20],[108,31]]]]],[],[]],"errors",["subexpr","@mut",[["get","errors",["loc",[null,[109,21],[109,27]]]]],[],[]],"editedCustomFields",["subexpr","@mut",[["get","editedCustomFields",["loc",[null,[110,33],[110,51]]]]],[],[]]],["loc",[null,[104,14],[111,16]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 10
                },
                "end": {
                  "line": 113,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","if",[["get","field.isEnabled",["loc",[null,[103,18],[103,33]]]]],[],0,null,["loc",[null,[103,12],[112,19]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 101,
                "column": 8
              },
              "end": {
                "line": 114,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","if",[["subexpr","ko-helper",[["get","customFieldsList.componentFor",["loc",[null,[102,27],[102,56]]]],["get","field.fieldType",["loc",[null,[102,57],[102,72]]]]],[],["loc",[null,[102,16],[102,73]]]]],[],0,null,["loc",[null,[102,10],[113,17]]]]
          ],
          locals: ["field"],
          templates: [child0]
        };
      }());
      var child2 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 116,
                "column": 8
              },
              "end": {
                "line": 127,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-field/tags",[],["selectedTags",["subexpr","@mut",[["get","userTeams",["loc",[null,[118,39],[118,48]]]]],[],[]],"suggestedTags",["subexpr","@mut",[["get","suggestedTeams",["loc",[null,[119,26],[119,40]]]]],[],[]],"newTagText",["subexpr","format-message",[["subexpr","intl-get",["users.newteam"],[],["loc",[null,[120,39],[120,65]]]]],[],["loc",[null,[120,23],[120,66]]]],"addTagText",["subexpr","format-message",[["subexpr","intl-get",["users.addteam"],[],["loc",[null,[121,39],[121,65]]]]],[],["loc",[null,[121,23],[121,66]]]],"forceLowerCase",false,"isNewTagAllowed",false,"onTagAddition","addTeam","onTagRemoval","removeTeam","onTagSuggestion","suggestTeams"],["loc",[null,[118,10],[126,44]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child3 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 129,
                "column": 8
              },
              "end": {
                "line": 138,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["inline","ko-field/tags",[],["selectedTags",["subexpr","@mut",[["get","userTags",["loc",[null,[131,39],[131,47]]]]],[],[]],"suggestedTags",["subexpr","@mut",[["get","suggestedTags",["loc",[null,[132,26],[132,39]]]]],[],[]],"newTagText",["subexpr","format-message",[["subexpr","intl-get",["users.newtag"],[],["loc",[null,[133,39],[133,64]]]]],[],["loc",[null,[133,23],[133,65]]]],"addTagText",["subexpr","format-message",[["subexpr","intl-get",["users.addtag"],[],["loc",[null,[134,39],[134,64]]]]],[],["loc",[null,[134,23],[134,65]]]],"onTagAddition","addTag","onTagRemoval","removeTag","onTagSuggestion","suggestTags"],["loc",[null,[131,10],[137,43]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 60,
              "column": 6
            },
            "end": {
              "line": 147,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1,"class","info-bar-item");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"class","button button--primary u-1/1");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(13);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(element4,0,0);
          morphs[2] = dom.createMorphAt(fragment,3,3,contextualElement);
          morphs[3] = dom.createMorphAt(fragment,5,5,contextualElement);
          morphs[4] = dom.createMorphAt(fragment,7,7,contextualElement);
          morphs[5] = dom.createMorphAt(fragment,9,9,contextualElement);
          morphs[6] = dom.createMorphAt(fragment,11,11,contextualElement);
          morphs[7] = dom.createMorphAt(fragment,13,13,contextualElement);
          morphs[8] = dom.createMorphAt(fragment,15,15,contextualElement);
          morphs[9] = dom.createMorphAt(fragment,17,17,contextualElement);
          morphs[10] = dom.createMorphAt(fragment,19,19,contextualElement);
          morphs[11] = dom.createMorphAt(fragment,21,21,contextualElement);
          morphs[12] = dom.createMorphAt(fragment,23,23,contextualElement);
          return morphs;
        },
        statements: [
          ["element","action",["submit"],[],["loc",[null,[62,55],[62,74]]]],
          ["inline","format-message",[["subexpr","intl-get",["cases.submit"],[],["loc",[null,[62,92],[62,117]]]]],[],["loc",[null,[62,75],[62,119]]]],
          ["inline","ko-case-field/suggest",[],["tagName","li","selectedItem",["subexpr","@mut",[["get","model.role.title",["loc",[null,[67,23],[67,39]]]]],[],[]],"items",["subexpr","@mut",[["get","roles",["loc",[null,[68,16],[68,21]]]]],[],[]],"searchKey","title","title",["subexpr","intl-get",["users.infobar.role"],[],["loc",[null,[70,16],[70,47]]]],"isEdited",["subexpr","@mut",[["get","isRoleEdited",["loc",[null,[71,19],[71,31]]]]],[],[]],"onItemSelect","roleSelect"],["loc",[null,[65,8],[72,37]]]],
          ["block","if",[["get","canChangeAgentCaseAccessPermission",["loc",[null,[74,14],[74,48]]]]],[],0,null,["loc",[null,[74,8],[84,15]]]],
          ["inline","ko-case-field/suggest",[],["tagName","li","selectedItem",["subexpr","@mut",[["get","model.organization.name",["loc",[null,[88,23],[88,46]]]]],[],[]],"items",["subexpr","@mut",[["get","organizations",["loc",[null,[89,16],[89,29]]]]],[],[]],"title",["subexpr","intl-get",["users.infobar.organization"],[],["loc",[null,[90,16],[90,55]]]],"isEdited",["subexpr","@mut",[["get","isOrganizationEdited",["loc",[null,[91,19],[91,39]]]]],[],[]],"onItemSelect","organizationSelect"],["loc",[null,[86,8],[92,45]]]],
          ["inline","ko-timezone-select",[],["tagName","li","class","info-bar-item","timezone",["subexpr","@mut",[["get","model.timeZone",["loc",[null,[97,19],[97,33]]]]],[],[]],"isEdited",["subexpr","@mut",[["get","isTimezoneEdited",["loc",[null,[98,19],[98,35]]]]],[],[]],"onChangeTimezone","timezoneSelect"],["loc",[null,[94,8],[99,45]]]],
          ["block","each",[["get","customFields",["loc",[null,[101,16],[101,28]]]]],[],1,null,["loc",[null,[101,8],[114,17]]]],
          ["block","ko-info-bar/field",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.teams"],[],["loc",[null,[116,51],[116,75]]]]],[],["loc",[null,[116,35],[116,76]]]],"isEdited",["subexpr","@mut",[["get","isTeamsFieldEdited",["loc",[null,[117,19],[117,37]]]]],[],[]]],2,null,["loc",[null,[116,8],[127,30]]]],
          ["block","ko-info-bar/field",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.tags"],[],["loc",[null,[129,51],[129,74]]]]],[],["loc",[null,[129,35],[129,75]]]],"isEdited",["subexpr","@mut",[["get","isTagsFieldEdited",["loc",[null,[130,19],[130,36]]]]],[],[]]],3,null,["loc",[null,[129,8],[138,30]]]],
          ["inline","ko-identities",[],["parent",["subexpr","@mut",[["get","model",["loc",[null,[140,31],[140,36]]]]],[],[]]],["loc",[null,[140,8],[140,38]]]],
          ["inline","ko-info-bar/metadata",[],["rows",["subexpr","@mut",[["get","userDates",["loc",[null,[142,36],[142,45]]]]],[],[]]],["loc",[null,[142,8],[142,47]]]],
          ["inline","ko-recent-cases",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.recent_cases"],[],["loc",[null,[144,48],[144,79]]]]],[],["loc",[null,[144,32],[144,80]]]],"cases",["subexpr","@mut",[["get","model.recentCases",["loc",[null,[144,87],[144,104]]]]],[],[]]],["loc",[null,[144,8],[144,106]]]],
          ["inline","ko-feedback",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.recent_feedback"],[],["loc",[null,[146,44],[146,78]]]]],[],["loc",[null,[146,28],[146,79]]]],"feedback",["subexpr","@mut",[["get","recentFeedback",["loc",[null,[146,89],[146,103]]]]],[],[]]],["loc",[null,[146,8],[146,105]]]]
        ],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 153,
                "column": 2
              },
              "end": {
                "line": 168,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","box layout layout--flush");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","ko-editor-modal__submit-message layout__item u-2/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","layout__item t-right u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3,"class","ko-editor-modal__cancel t-bad");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3,"class","button button--primary");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var element1 = dom.childAt(element0, [3]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element1, [3]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
            morphs[2] = dom.createElementMorph(element2);
            morphs[3] = dom.createMorphAt(element2,1,1);
            morphs[4] = dom.createElementMorph(element3);
            morphs[5] = dom.createMorphAt(element3,1,1);
            return morphs;
          },
          statements: [
            ["inline","textarea",[],["value",["subexpr","@mut",[["get","editingSignature",["loc",[null,[154,21],[154,37]]]]],[],[]],"class","text-area--clean"],["loc",[null,[154,4],[154,64]]]],
            ["inline","format-message",[["subexpr","intl-get",["users.signaturemessage"],[],["loc",[null,[157,25],[157,60]]]]],[],["loc",[null,[157,8],[157,62]]]],
            ["element","action",["closeSignatureModal"],[],["loc",[null,[160,11],[160,43]]]],
            ["inline","format-message",[["subexpr","intl-get",["generic.cancel"],[],["loc",[null,[161,27],[161,54]]]]],[],["loc",[null,[161,10],[161,56]]]],
            ["element","action",["updateSignature"],[],["loc",[null,[163,47],[163,75]]]],
            ["inline","format-message",[["subexpr","intl-get",["users.update_signature"],[],["loc",[null,[164,27],[164,62]]]]],[],["loc",[null,[164,10],[164,64]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 152,
              "column": 0
            },
            "end": {
              "line": 169,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-editor-modal",[],["title",["subexpr","format-message",[["subexpr","intl-get",["users.editsignature"],[],["loc",[null,[153,43],[153,75]]]]],[],["loc",[null,[153,27],[153,76]]]]],0,null,["loc",[null,[153,2],[168,22]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 170,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-2/3");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__img");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("img");
        dom.setAttribute(el6,"alt","");
        dom.setAttribute(el6,"class","header__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","flag__body u-v-align-top");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h3");
        dom.setAttribute(el6,"class","header__title ko-user-content__header-title");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n\n ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/3 u-mt");
        var el4 = dom.createTextNode("\n     ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("ul");
        dom.setAttribute(el4,"class","list-inline t-right");
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        var el6 = dom.createTextNode("\n         ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n       ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("li");
        dom.setAttribute(el5,"class","u-v-align-top");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n       ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n     ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout--flush u-mt");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-3/4");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","content__main content__main--has-infobar");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","layout__item u-1/4");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [0]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element6, [1, 1]);
        var element8 = dom.childAt(element7, [1, 1]);
        var element9 = dom.childAt(element6, [3, 1]);
        var element10 = dom.childAt(element5, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element8, 'src');
        morphs[1] = dom.createMorphAt(dom.childAt(element7, [3, 1]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element9, [1]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element9, [3]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element9, [5]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element10, [1, 1]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element10, [3]),1,1);
        morphs[7] = dom.createMorphAt(fragment,2,2,contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["attribute","src",["concat",[["get","model.avatar",["loc",[null,[6,22],[6,34]]]]]]],
        ["content","model.fullName",["loc",[null,[10,12],[10,30]]]],
        ["inline","ko-stateful-button",[],["activeText","Following","activeHoverText","Stop Following","inactiveText","Not Following","inactiveHoverText","Follow","isActive",false,"isLoading",["subexpr","@mut",[["get","isFollowingSaving",["loc",[null,[25,21],[25,38]]]]],[],[]],"isEnabled",["subexpr","@mut",[["get","canFollowUser",["loc",[null,[26,21],[26,34]]]]],[],[]]],["loc",[null,[19,9],[26,36]]]],
        ["inline","ko-stateful-button",[],["activeText","User Enabled","activeHoverText","Disable User","inactiveText","User Disabled","inactiveHoverText","Enable User","isActive",["subexpr","@mut",[["get","model.isEnabled",["loc",[null,[34,20],[34,35]]]]],[],[]],"isEnabled",["subexpr","@mut",[["get","canModifyUserState",["loc",[null,[35,21],[35,39]]]]],[],[]],"isLoading",["subexpr","@mut",[["get","isStateSaving",["loc",[null,[36,21],[36,34]]]]],[],[]],"onClick","toggleUserState"],["loc",[null,[29,9],[37,38]]]],
        ["inline","ko-user-action-menu",[],["permissions",["subexpr","@mut",[["get","sessionService.permissions",["loc",[null,[41,24],[41,50]]]]],[],[]],"userRoleType",["subexpr","@mut",[["get","model.role.roleType",["loc",[null,[42,25],[42,44]]]]],[],[]],"userModel",["subexpr","@mut",[["get","model",["loc",[null,[43,22],[43,27]]]]],[],[]]],["loc",[null,[40,8],[44,10]]]],
        ["block","ko-text-editor",[],["class","ko-user-content__text-editor","viewName","postEditor","onPeopleSuggestion","suggestPeople"],0,null,["loc",[null,[53,8],[55,27]]]],
        ["block","ko-info-bar",[],[],1,null,["loc",[null,[60,6],[147,22]]]],
        ["block","if",[["get","signatureModal",["loc",[null,[152,6],[152,20]]]]],[],2,null,["loc",[null,[152,0],[169,7]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/components/ko-user-menu/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({
    sessionService: Ember['default'].inject.service('session'),

    actions: {
      logout: function logout() {
        this.get('sessionService').logout();
      },
      profile: function profile() {
        this.set('hidden', true);
        this.container.lookup('router:main').transitionTo('session.agent.users.user', this.get('sessionService.user.id'));
      }
    }
  });

});
define('frontend-cp/components/ko-user-menu/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","flag flag--small flag--auto");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","flag__img u-reset-lh");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2,"class","flag__body");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
            morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
            return morphs;
          },
          statements: [
            ["inline","ko-avatar",[],["avatar",["subexpr","@mut",[["get","user.avatar",["loc",[null,[5,27],[5,38]]]]],[],[]]],["loc",[null,[5,8],[5,40]]]],
            ["content","user.fullName",["loc",[null,[8,8],[8,25]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 8
                  },
                  "end": {
                    "line": 15,
                    "column": 51
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("styleguide");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() { return []; },
              statements: [

              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        View your profile\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1,"class","ko-dropdown_list__item");
              var el2 = dom.createTextNode("\n        Logout\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [5]);
              var element1 = dom.childAt(fragment, [7]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              morphs[2] = dom.createAttrMorph(element0, 'onclick');
              morphs[3] = dom.createAttrMorph(element1, 'onclick');
              return morphs;
            },
            statements: [
              ["block","link-to",["session.styleguide"],[],0,null,["loc",[null,[15,8],[15,63]]]],
              ["content","ko-dropdown/list/hr",["loc",[null,[17,6],[17,29]]]],
              ["attribute","onclick",["subexpr","action",["profile"],[],["loc",[null,[18,49],[18,69]]]]],
              ["attribute","onclick",["subexpr","action",["logout"],[],["loc",[null,[21,49],[21,68]]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-dropdown/list",[],["class","ko-user-menu__content"],0,null,["loc",[null,[13,4],[24,25]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,1,1,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[2,12],[2,16]]]],"button"],[],["loc",[null,[2,8],[2,26]]]]],[],0,null,["loc",[null,[2,2],[11,9]]]],
          ["block","if",[["subexpr","eq",[["get","name",["loc",[null,[12,12],[12,16]]]],"content"],[],["loc",[null,[12,8],[12,27]]]]],[],1,null,["loc",[null,[12,2],[25,9]]]]
        ],
        locals: ["name","dropdownContext"],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-dropdown/container",[],["hideOnChildFocus",true,"hideDropdown",["subexpr","@mut",[["get","hidden",["loc",[null,[1,60],[1,66]]]]],[],[]]],0,null,["loc",[null,[1,0],[26,26]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/ko-viewers/component', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Component.extend({

    contextModalService: Ember['default'].inject.service('context-modal'),

    tagName: 'li',
    classNames: ['info-bar-item'],
    viewers: null,
    selectedViewer: null,

    actions: {

      displayViewer: function displayViewer(event) {
        this.get('contextModalService').open('displayViewer', event);
      },

      showViewer: function showViewer(viewer) {
        this.set('selectedViewer', viewer);
      }

    }

  });

});
define('frontend-cp/components/ko-viewers/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-viewers/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("img");
            dom.setAttribute(el2,"class","ko-viewers__image");
            dom.setAttribute(el2,"alt","");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","u-typing__item");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","u-typing__item");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3,"class","u-typing__item");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element0, [3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            morphs[2] = dom.createAttrMorph(element1, 'src');
            morphs[3] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [
            ["attribute","class",["concat",["ko-viewers__item ",["subexpr","if",[["get","viewer.inactive",["loc",[null,[11,39],[11,54]]]],"ko-viewers__item--inactive"],[],["loc",[null,[11,34],[11,85]]]]]]],
            ["element","action",["showViewer",["get","viewer",["loc",[null,[11,109],[11,115]]]]],[],["loc",[null,[11,87],[11,117]]]],
            ["attribute","src",["concat",[["get","viewer.profile.avatar",["loc",[null,[12,46],[12,67]]]]]]],
            ["attribute","class",["concat",["u-typing ",["subexpr","if",[["get","viewer.isTyping",["loc",[null,[13,34],[13,49]]]],"u-is-typing"],[],["loc",[null,[13,29],[13,65]]]]," ",["subexpr","if",[["get","viewer.wasTyping",["loc",[null,[13,71],[13,87]]]],"u-was-typing"],[],["loc",[null,[13,66],[13,104]]]]," ",["subexpr","if",[["get","viewer.hidden",["loc",[null,[13,110],[13,123]]]],"u-hidden"],[],["loc",[null,[13,105],[13,136]]]]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-viewers/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-toggle-context-modal",[],["toggleModal","displayViewer"],0,null,["loc",[null,[9,4],[20,32]]]]
        ],
        locals: ["viewer"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-viewers/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("@todo refactor the typing into loaders?");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1,"class","info-bar-item__header");
        var el2 = dom.createTextNode("Also viewing");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1,"class","ko-viewers");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        morphs[1] = dom.createMorphAt(fragment,8,8,contextualElement);
        return morphs;
      },
      statements: [
        ["block","each",[["get","viewers",["loc",[null,[7,10],[7,17]]]]],[],0,null,["loc",[null,[7,2],[22,11]]]],
        ["inline","ko-profile-card",[],["profile",["subexpr","@mut",[["get","selectedViewer.profile",["loc",[null,[29,10],[29,32]]]]],[],[]],"contextModalId","displayViewer"],["loc",[null,[28,0],[31,2]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/components/mixins/context-menu-set', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    contextModalService: Ember['default'].inject.service('contextModal'),

    actions: {
      next: function next() {
        this.get('contextModalService').next();
      },
      prev: function prev() {
        this.get('contextModalService').prev();
      }
    }
  });

});
define('frontend-cp/components/mixins/drop-down-keyboard-nav', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    moveSelectedItem: function moveSelectedItem(listLength, ulSelector, direction, positionProperty) {
      var position = this.get(positionProperty);
      switch (direction) {
        case 'down':
          {
            position = ++position;
            if (position <= listLength) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
        case 'up':
          {
            position = --position;
            if (position > 0) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
      }
    }
  });

});
define('frontend-cp/components/mixins/suggestions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    matches: function matches(searchStr, source) {
      var result = [];

      if (source.length > 0) {
        result = source.filter(RegExp.prototype.test, new RegExp(searchStr, 'i'));
      }

      return new Ember['default'].A(result);
    }
  });

});
define('frontend-cp/controllers/array', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('frontend-cp/controllers/object', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Controller;

});
define('frontend-cp/formats', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    date: {
      month: {
        month: 'long'
      },
      year: {
        year: 'numeric'
      },
      full: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      }
    },
    number: {
      filesize: {
        style: 'decimal',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    },
    time: {
      time: {
        hour: 'numeric',
        minute: 'numeric'
      }
    }
  };

});
define('frontend-cp/helpers/-intl-get', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return '%' + value + '%';
  });

});
define('frontend-cp/helpers/ago', ['exports', 'ember', 'frontend-cp/helpers/moment-from-now'], function (exports, Ember, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    compute: function compute() {
      Ember['default'].deprecate('ember-moment: `ago` helper has been renamed to `moment-from-now`');
      return this._super.apply(this, arguments);
    }
  });

});
define('frontend-cp/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, Ember, and) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(and.andHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(and.andHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/duration', ['exports', 'ember', 'frontend-cp/helpers/moment-duration'], function (exports, Ember, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    compute: function compute() {
      Ember['default'].deprecate('ember-moment: `duration` helper has been renamed to `moment-duration`');
      return this._super.apply(this, arguments);
    }
  });

});
define('frontend-cp/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, Ember, equal) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(equal.equalHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(equal.equalHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/escape-html', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return value;
  });

});
define('frontend-cp/helpers/get', ['exports', 'ember', 'ember-get-helper/helpers/get', 'ember-get-helper/helpers/get-glimmer'], function (exports, Ember, get, getGlimmerHelper) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = getGlimmerHelper['default'];
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(get.getHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, Ember, gt) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(gt.gtHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(gt.gtHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, Ember, gte) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(gte.gteHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(gte.gteHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/intl-get', ['exports', 'ember', 'ember-intl/legacy/helpers/intl-get', 'ember-intl/helpers/intl-get'], function (exports, Ember, legacyIntlGet, IntlGet) {

  'use strict';

  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  var Helper = IntlGet['default'];

  if (!Helper) {
    Helper = legacyIntlGet['default'];
  }

  exports['default'] = Helper;

});
define('frontend-cp/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, Ember, is_array) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(is_array.isArrayHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(is_array.isArrayHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/is-last-item-in-list', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var item = _ref2[0];
    var list = _ref2[1];

    var listLength = list.get('length');
    if (listLength === 0) {
      return false;
    }

    return list.objectAt(listLength - 1) === item;
  });

});
define('frontend-cp/helpers/ko-breaklines', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var content = _ref2[0];

    var text = Ember['default'].Handlebars.Utils.escapeExpression(content);
    return new Ember['default'].Handlebars.SafeString(text.replace(/(\r\n|\n|\r)/gm, '<br />'));
  });

});
define('frontend-cp/helpers/ko-contextual-helper', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Helper.helper(function (args) {
    return args[0].apply(args[1], args.slice(2));
  });

});
define('frontend-cp/helpers/ko-datetime-format', ['exports', 'ember', 'moment'], function (exports, Ember, moment) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var dateTime = _ref2[0];

    var date = moment['default'](dateTime);

    if (date.isBefore(moment['default']().subtract('1', 'days'))) {
      return date.format('Do MMMM YYYY hh:mm');
    } else {
      return date.fromNow();
    }
  });

});
define('frontend-cp/helpers/ko-embolden', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var fullString = _ref2[0];
    var emboldenString = _ref2[1];

    var regExp = new RegExp(emboldenString, 'gi');
    return Ember['default'].String.htmlSafe(fullString.replace(regExp, '<b>$&</b>'));
  });

});
define('frontend-cp/helpers/ko-helper', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _this = undefined;

  exports['default'] = Ember['default'].Helper.helper(function (args) {
    return args[0].apply(_this, args.slice(1));
  });

});
define('frontend-cp/helpers/ko-intl-key-for-field-type', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Helper.helper(function (fieldType) {
    if (fieldType.length) {
      return 'admin.casefields.type.' + fieldType[0].toLowerCase() + '.name';
    }
  });

});
define('frontend-cp/helpers/ko-slasherizer', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Helper.helper(function (args) {
    return args[0].split(',').join(' / ');
  });

});
define('frontend-cp/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, Ember, lt) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(lt.ltHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(lt.ltHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, Ember, lte) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(lte.lteHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(lte.lteHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, moment_duration) {

	'use strict';



	exports['default'] = moment_duration['default'];

});
define('frontend-cp/helpers/moment-format', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-format'], function (exports, Ember, config, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    globalOutputFormat: Ember['default'].get(config['default'], 'moment.outputFormat'),
    globalAllowEmpty: !!Ember['default'].get(config['default'], 'moment.allowEmpty')
  });

});
define('frontend-cp/helpers/moment-from-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, Ember, config, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    globalAllowEmpty: !!Ember['default'].get(config['default'], 'moment.allowEmpty')
  });

});
define('frontend-cp/helpers/moment-to-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, Ember, config, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    globalAllowEmpty: !!Ember['default'].get(config['default'], 'moment.allowEmpty')
  });

});
define('frontend-cp/helpers/moment', ['exports', 'ember', 'frontend-cp/helpers/moment-format'], function (exports, Ember, Helper) {

  'use strict';

  exports['default'] = Helper['default'].extend({
    compute: function compute() {
      Ember['default'].deprecate('ember-moment: `moment` helper has been renamed to `moment-format`');
      return this._super.apply(this, arguments);
    }
  });

});
define('frontend-cp/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, Ember, not_equal) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(not_equal.notEqualHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(not_equal.notEqualHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, Ember, not) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(not.notHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(not.notHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, Ember, or) {

  'use strict';

  var forExport = null;

  if (Ember['default'].Helper) {
    forExport = Ember['default'].Helper.helper(or.orHelper);
  } else if (Ember['default'].HTMLBars.makeBoundHelper) {
    forExport = Ember['default'].HTMLBars.makeBoundHelper(or.orHelper);
  }

  exports['default'] = forExport;

});
define('frontend-cp/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, pluralize) {

	'use strict';

	exports['default'] = pluralize['default'];

});
define('frontend-cp/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, singularize) {

	'use strict';

	exports['default'] = singularize['default'];

});
define('frontend-cp/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'frontend-cp/config/environment'], function (exports, initializerFactory, config) {

  'use strict';

  var _config$APP = config['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;

  exports['default'] = {
    name: 'App Version',
    initialize: initializerFactory['default'](name, version)
  };

});
define('frontend-cp/initializers/ember-cli-mirage', ['exports', 'frontend-cp/config/environment', 'frontend-cp/mirage/config', 'ember-cli-mirage/server', 'ember-cli-mirage/utils/read-modules'], function (exports, ENV, config, Server, readModules) {

  'use strict';

  function hasModulesOfType(modulesMap, type) {
    var modulesOfType = modulesMap[type] || {};

    return _.keys(modulesOfType).length > 0;
  }

  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(container, application) {
      var env = ENV['default'].environment;

      if (_shouldUseMirage(env, ENV['default']['ember-cli-mirage'])) {
        var modulesMap = readModules['default'](ENV['default'].modulePrefix);
        var hasFactories = hasModulesOfType(modulesMap, 'factories');
        var hasDefaultScenario = modulesMap['scenarios'].hasOwnProperty('default');
        var hasModels = hasModulesOfType(modulesMap, 'models');

        var server = new Server['default']({
          environment: env,
          modelsMap: hasModels ? modulesMap['models'] : null
        });

        server.loadConfig(config['default']);

        if (env === 'test' && config.testConfig) {
          server.loadConfig(config.testConfig);
        }

        if (env === 'test' && hasFactories) {
          server.loadFactories(modulesMap['factories']);
        } else if (env !== 'test' && hasDefaultScenario && hasFactories) {
          server.loadFactories(modulesMap['factories']);
          modulesMap['scenarios']['default'](server);
        } else {
          server.db.loadData(modulesMap['fixtures']);
        }
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }

});
define('frontend-cp/initializers/ember-intl', ['exports', 'ember', 'ember-intl/helpers/format-date', 'ember-intl/helpers/format-time', 'ember-intl/helpers/format-relative', 'ember-intl/helpers/format-number', 'ember-intl/helpers/format-html-message', 'ember-intl/helpers/format-message', 'ember-intl/utils/register-helper', 'frontend-cp/instance-initializers/ember-intl'], function (exports, Ember, FormatDate, FormatTime, FormatRelative, FormatNumber, FormatHtmlMessage, FormatMessage, registerHelper, ember_intl) {

    'use strict';

    exports.initializer = initializer;

    function initializer(registry) {
        var app = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        registry.optionsForType('formats', {
            singleton: true,
            instantiate: false
        });

        registerHelper['default']('format-date', FormatDate['default'], registry);
        registerHelper['default']('format-time', FormatTime['default'], registry);
        registerHelper['default']('format-relative', FormatRelative['default'], registry);
        registerHelper['default']('format-number', FormatNumber['default'], registry);
        registerHelper['default']('format-html-message', FormatHtmlMessage['default'], registry);
        registerHelper['default']('format-message', FormatMessage['default'], registry);

        if (app.instanceInitializer) {
            return;
        }

        // for backwards compatability < 1.12
        ember_intl.instanceInitializer({
            container: registry
        });
    }

    exports['default'] = {
        name: 'ember-intl',
        initialize: initializer
    };

});
define('frontend-cp/initializers/export-application-global', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (config['default'].exportApplicationGlobal !== false) {
      var value = config['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = Ember['default'].String.classify(config['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  ;

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };

});
define('frontend-cp/initializers/get-helper', ['exports', 'ember', 'ember-get-helper/utils/register-helper', 'ember-get-helper/helpers/get', 'ember-get-helper/helpers/get-glimmer'], function (exports, Em, register_helper, getHelper, getHelperGlimmer) {

  'use strict';

  exports.initialize = initialize;

  function initialize() /* container, application */{
    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (Em['default'].Helper) {
      return;
    }

    register_helper.registerHelper('get', getHelper['default']);
  }

  exports['default'] = {
    name: 'get-helper',
    initialize: initialize
  };

});
define('frontend-cp/initializers/intl', ['exports', 'ember-intl/models/translation'], function (exports, TranslationModel) {

  'use strict';

  TranslationModel['default'].reopen({
    //TODO: talk to Kirill about how and why the frontendcp.universal is managed, if at all?
    //ANSWER: frontendcp (now frontend) is novo's app name, universal (api) is novo's portal. they are static and will rarely change.
    getValue: function getValue(key) {
      return this['frontend.api.' + key];
    }
  });

  exports['default'] = {
    name: 'intl',
    after: 'store',

    initialize: function initialize(registry) {}
  };

});
define('frontend-cp/initializers/pusher', ['exports'], function (exports) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container) {
    var pusher = container.lookup('service:pusher');
    pusher.initialize();
  }

});
define('frontend-cp/initializers/tabs', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports.initialize = initialize;

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  function initialize(container, application) {
    Ember['default'].Route.reopen({
      /**
       * Whether the route should open in its own tab
       * @type {boolean}
       */
      isTabbedRoute: false,

      /**
       * Hash change listener
       * @type {function}
       */
      onHashUpdate: function onHashUpdate() {
        var tabModel = this.get('tab');
        var currentHash = location.hash;
        var tabUrl = tabModel.get('url').split('#')[0] + (currentHash === '#' ? '' : currentHash);
        tabModel.set('url', tabUrl);
      },

      /**
       * Select/create a tab whenever this route becomes active
       */
      updateTabSelectionOnActivate: Ember['default'].on('activate', function () {
        var activeTransition = this.router.router.activeTransition;
        this.updateTabSelection(activeTransition);
      }),

      /**
       * Track hash change events while the route is active
       */
      watchHashOnActivate: Ember['default'].on('activate', function () {
        if (!this.get('isTabbedRoute')) {
          return;
        }

        this.onHashUpdate = this.onHashUpdate.bind(this);
        $(window).on('hashchange', this.onHashUpdate);
      }),

      /**
       * Stop tracking hash change events when the route is deactivated
       */
      unwatchHashOnDectivate: Ember['default'].on('deactivate', function () {
        if (!this.get('isTabbedRoute')) {
          return;
        }
        $(window).off('hashchange', this.onHashUpdate);
      }),

      /*
       * Select/create a tab whenever this route's model changes
       */
      resetController: function resetController(controller, isExiting, transition) {
        this._super(controller, isExiting, transition);
        var isTransitioningWithinRoute = !isExiting;
        if (isTransitioningWithinRoute) {
          this.updateTabSelection(transition);
        }
      },

      updateTabSelection: function updateTabSelection(transition) {
        // We don't need to select a tab for intermediate routes / login / etc
        var route = this;
        var shouldIgnoreRoute = shouldSkipSelectingTabForRoute(route, transition);
        if (shouldIgnoreRoute) {
          return;
        }

        // Get/create the corresponding tab for the route, and select it
        var tabsService = this.container.lookup('service:tabs');
        var sessionController = this.controllerFor('session');
        var tab = getTabForRoute(route, transition, tabsService, sessionController);
        tabsService.select(tab);

        // Store the tab model on the route to allow setting tab label etc.
        if (route.get('isTabbedRoute')) {
          route.set('tab', tab);
        }

        function shouldSkipSelectingTabForRoute(route, transition) {
          // We only need to create tabs for pages within the logged-in area
          var isSessionRoute = route.get('routeName').split('.')[0] === 'session';
          if (!isSessionRoute) {
            return true;
          }

          // We always need to get/create a tab for tabbed routes, even if we're
          // ultimately navigating to one of their child routes
          var isTabbedRoute = route.get('isTabbedRoute');
          if (isTabbedRoute) {
            return false;
          }

          // If this isn't the final destination, don't bother creating/selecting a tab
          var isIntermediateRoute = route.get('routeName') !== transition.targetName;
          if (isIntermediateRoute) {
            return true;
          }

          // We're at the destination route, so we want a tab
          return false;
        }
      }
    });

    /**
     * Get/create a tab for a route
     * @param {Route} route The route to create a tab for
     * @param {Transition} transition Transition containing dynamic route segments
     * @param {TabsService} tabsService Tabs service used to get/create the tab
     * @param {SessionController} sessionController Controller for the view that contains the tabs
     * @return {Tab} Tab model for the specified route
     */
    function getTabForRoute(route, transition, tabsService, sessionController) {
      var targetUrl = getTransitionTargetUrl(transition);
      var baseUrl = getRouteUrl(route, transition);
      var isTabbedRoute = route.get('isTabbedRoute');
      return tabsService.getOrCreateTab(targetUrl, baseUrl, isTabbedRoute);

      /**
       * Retrieve the URL for a route that includes dynamic segments
       * @param {Route} route Route whose params we want to fetch
       * @param {Transition} transition Transition that involves the specified route
       * @param {TabsService} tabsService Tabs service used to get/create the tab
       * @return {string} Array of Key/value object containing dynamic route segments, or models
       */
      function getRouteUrl(route, transition, tabsService) {
        var _transition$router;

        var routeName = route.routeName;

        // `transition.handlerInfos` is an array of metadata objects, one for each
        // of the routes in the transition hierarchy. (e.g. "app", "app.section",
        // "app.section.subsection").
        var routeHandlers = transition.handlerInfos;

        // Get the dynamic route segment context objects for each of these levels
        var routeContexts = routeHandlers.map(function (handlerInfo) {
          return getHandlerContext(handlerInfo);
        });

        // Filter out the context objects for routes with no dynamic segments
        var dynamicRouteContexts = routeContexts.filter(function (context) {
          return context !== null;
        });

        // Return the route URL
        return (_transition$router = transition.router).generate.apply(_transition$router, [routeName].concat(_toConsumableArray(dynamicRouteContexts)));

        /**
         * Retrieve the context object from a route handler info object
         * @param {Object} handlerInfo Ember route handler info object
         * @return {Object} Params object or model for dynamic routes, `null` for static routes
         */
        function getHandlerContext(handlerInfo) {
          // If the transition was initiated by navigating to a URL,
          // or route name + id, there will be a `params` object containing any
          // dynamic route segments
          if (handlerInfo.params) {
            var hasDynamicSegments = Object.keys(handlerInfo.params).length > 0;
            return hasDynamicSegments ? handlerInfo.params : null;
          }

          // If the transition was initiated by navigating to a route name + model,
          // there will be a `context` object containing the model that corresponds
          // to the dynamic route segment
          if (handlerInfo.context) {
            return handlerInfo.context;
          }

          // Looks like the route doesn't specify any dynamic segments
          return null;
        }
      }

      /**
       * Serialize the transition into a target URL
       * @param {Transition} transition Transition to serialize
       * @return {string} URL path for the transition's target
       */
      function getTransitionTargetUrl(transition) {
        var _transition$router2;

        // If the transition was initiated by navigating to the URL, we already
        // have the target URL so we can just return that
        if (transition.intent.url) {
          return transition.intent.url;
        }

        // Otherwise generate a URL based on the transition's target
        var routeName = transition.intent.name;
        var dynamicRouteContexts = transition.intent.contexts;
        return (_transition$router2 = transition.router).generate.apply(_transition$router2, [routeName].concat(_toConsumableArray(dynamicRouteContexts)));
      }
    }
  }

  exports['default'] = {
    name: 'tabbed-routes',
    initialize: initialize
  };

});
define('frontend-cp/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, Ember, register_helper, and, or, equal, not, is_array, not_equal, gt, gte, lt, lte) {

  'use strict';

  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (Ember['default'].Helper) {
      return;
    }

    register_helper.registerHelper('and', and.andHelper);
    register_helper.registerHelper('or', or.orHelper);
    register_helper.registerHelper('eq', equal.equalHelper);
    register_helper.registerHelper('not', not.notHelper);
    register_helper.registerHelper('is-array', is_array.isArrayHelper);
    register_helper.registerHelper('not-eq', not_equal.notEqualHelper);
    register_helper.registerHelper('gt', gt.gtHelper);
    register_helper.registerHelper('gte', gte.gteHelper);
    register_helper.registerHelper('lt', lt.ltHelper);
    register_helper.registerHelper('lte', lte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };

});
define('frontend-cp/instance-initializers/ember-intl', ['exports', 'frontend-cp/config/environment', 'ember-intl/utils/add-locale-data'], function (exports, ENV, addLocaleData) {

    'use strict';

    exports.instanceInitializer = instanceInitializer;

    function filterBy(env, type) {
        return Object.keys(requirejs._eak_seen).filter(function (key) {
            return key.indexOf(env.modulePrefix + '\/' + type + '\/') === 0;
        });
    }

    function instanceInitializer(instance) {
        var service = instance.container.lookup('service:intl');

        filterBy(ENV['default'], 'cldrs').forEach(function (key) {
            addLocaleData['default'](require(key, null, null, true)['default']);
        });

        filterBy(ENV['default'], 'translations').forEach(function (key) {
            var localeSplit = key.split('\/');
            var locale = localeSplit[localeSplit.length - 1];
            service.createLocale(locale, require(key, null, null, true)['default']);
        });
    }

    exports['default'] = {
        name: 'ember-intl',
        initialize: instanceInitializer
    };

});
define('frontend-cp/lib/keycodes', ['exports'], function (exports) {

	'use strict';

	var backspace = 8;
	var tab = 9;
	var enter = 13;
	var shift = 16;
	var ctrl = 17;
	var alt = 18;
	var pause = 19;
	var capsLock = 20;
	var escape = 27;
	var space = 32;
	var pageUp = 33;
	var pageDown = 34;
	var end = 35;
	var home = 36;
	var left = 37;
	var up = 38;
	var right = 39;
	var down = 40;
	var insert = 45;
	var del = 46;
	var zero = 48;
	var one = 49;
	var two = 50;
	var three = 51;
	var four = 52;
	var five = 53;
	var six = 54;
	var seven = 55;
	var eight = 56;
	var nine = 57;
	var a = 65;
	var b = 66;
	var c = 67;
	var d = 68;
	var e = 69;
	var f = 70;
	var g = 71;
	var h = 72;
	var i = 73;
	var j = 74;
	var k = 75;
	var l = 76;
	var m = 77;
	var n = 78;
	var o = 79;
	var p = 80;
	var q = 81;
	var r = 82;
	var s = 83;
	var t = 84;
	var u = 85;
	var v = 86;
	var w = 87;
	var x = 88;
	var y = 89;
	var z = 90;
	var leftWindowKey = 91;
	var rightWindowKey = 92;
	var selectKey = 93;
	var numpad0 = 96;
	var numpad1 = 97;
	var numpad2 = 98;
	var numpad3 = 99;
	var numpad4 = 100;
	var numpad5 = 101;
	var numpad6 = 102;
	var numpad7 = 103;
	var numpad8 = 104;
	var numpad9 = 105;
	var multiply = 106;
	var add = 107;
	var subtract = 109;
	var decimalPoint = 110;
	var divide = 111;
	var f1 = 112;
	var f2 = 113;
	var f3 = 114;
	var f4 = 115;
	var f5 = 116;
	var f6 = 117;
	var f7 = 118;
	var f8 = 119;
	var f9 = 120;
	var f10 = 121;
	var f11 = 122;
	var f12 = 123;
	var numLock = 144;
	var scrollLock = 145;
	var semiColon = 186;
	var equalSign = 187;
	var comma = 188;
	var dash = 189;
	var period = 190;
	var forwardSlash = 191;
	var graveAccent = 192;
	var openBracket = 219;
	var backSlash = 220;
	var closeBracket = 221;
	var singleQuote = 222;

	exports.backspace = backspace;
	exports.tab = tab;
	exports.enter = enter;
	exports.shift = shift;
	exports.ctrl = ctrl;
	exports.alt = alt;
	exports.pause = pause;
	exports.capsLock = capsLock;
	exports.escape = escape;
	exports.space = space;
	exports.pageUp = pageUp;
	exports.pageDown = pageDown;
	exports.end = end;
	exports.home = home;
	exports.left = left;
	exports.up = up;
	exports.right = right;
	exports.down = down;
	exports.insert = insert;
	exports.del = del;
	exports.zero = zero;
	exports.one = one;
	exports.two = two;
	exports.three = three;
	exports.four = four;
	exports.five = five;
	exports.six = six;
	exports.seven = seven;
	exports.eight = eight;
	exports.nine = nine;
	exports.a = a;
	exports.b = b;
	exports.c = c;
	exports.d = d;
	exports.e = e;
	exports.f = f;
	exports.g = g;
	exports.h = h;
	exports.i = i;
	exports.j = j;
	exports.k = k;
	exports.l = l;
	exports.m = m;
	exports.n = n;
	exports.o = o;
	exports.p = p;
	exports.q = q;
	exports.r = r;
	exports.s = s;
	exports.t = t;
	exports.u = u;
	exports.v = v;
	exports.w = w;
	exports.x = x;
	exports.y = y;
	exports.z = z;
	exports.leftWindowKey = leftWindowKey;
	exports.rightWindowKey = rightWindowKey;
	exports.selectKey = selectKey;
	exports.numpad0 = numpad0;
	exports.numpad1 = numpad1;
	exports.numpad2 = numpad2;
	exports.numpad3 = numpad3;
	exports.numpad4 = numpad4;
	exports.numpad5 = numpad5;
	exports.numpad6 = numpad6;
	exports.numpad7 = numpad7;
	exports.numpad8 = numpad8;
	exports.numpad9 = numpad9;
	exports.multiply = multiply;
	exports.add = add;
	exports.subtract = subtract;
	exports.decimalPoint = decimalPoint;
	exports.divide = divide;
	exports.f1 = f1;
	exports.f2 = f2;
	exports.f3 = f3;
	exports.f4 = f4;
	exports.f5 = f5;
	exports.f6 = f6;
	exports.f7 = f7;
	exports.f8 = f8;
	exports.f9 = f9;
	exports.f10 = f10;
	exports.f11 = f11;
	exports.f12 = f12;
	exports.numLock = numLock;
	exports.scrollLock = scrollLock;
	exports.semiColon = semiColon;
	exports.equalSign = equalSign;
	exports.comma = comma;
	exports.dash = dash;
	exports.period = period;
	exports.forwardSlash = forwardSlash;
	exports.graveAccent = graveAccent;
	exports.openBracket = openBracket;
	exports.backSlash = backSlash;
	exports.closeBracket = closeBracket;
	exports.singleQuote = singleQuote;

});
define('frontend-cp/loading/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["large",true],["loc",[null,[1,14],[1,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-center",[],[],0,null,["loc",[null,[1,0],[1,52]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/locales/en-us/admin', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "navigation.apps": "Apps",
    "navigation.manage": "Manage",
    "navigation.people": "People",
    "navigation.channels": "Channels",

    "administration": "Administration",
    "apps": "Apps",
    "endpoints": "Endpoints",

    "views": "Views",
    "views.buttons.add_new": "Add new",
    "views.description": "Ipsum locum dorum somethinum",
    "views.heading.edit": "Case Views / Edit",
    "views.heading.new": "Case Views / New",
    "views.heading.view_details": "View details",
    "views.label.view_title": "View title",
    "views.heading.sharing": "Sharing",
    "views.label.sharing": "Make this view available to",
    "views.heading.predicate_builder": "Include cases that match the following in this view",
    "views.heading.configure_layout": "Configure Layout",
    "views.label.configure_layout": "Customize what information is shown in this view by adding, removing and reordering fields below. You can add up to 10 columns in your view",
    "views.heading.sorting": "Sorting",
    "views.label.sorting": "In this view, default to sorting cases by",
    "views.description.sorting": "Descending means largest to smallest, most recent to oldest, highest priority to lowest priority, Z to A.",
    "views.edit.description_on.is_enabled": "View is active",
    "views.edit.description_off.is_enabled": "View is inactive",

    "teams": "Teams",
    "teams.agent": "{numAgents, plural, =1 {agent} other {agents}}",
    "teams.headings.index": "Teams",
    "teams.headings.edit": "Teams / {title}",
    "teams.headings.new": "Teams / New",
    "teams.buttons.add": "Add New",
    "teams.labels.filter_teams": "Filter teams",
    "teams.labels.filter_agents": "Filter agents",
    "teams.labels.delete_team": "Delete team",
    "teams.labels.delete_team_confirmation": "Are you sure you wish to delete this team?",
    "teams.labels.edit.name": "Team name",
    "teams.legend.edit.details": "Team details",
    "teams.info.title": "Team members",
    "teams.info.content": "Click on agents from the list below to add or remove from the team",

    "fields.type.field_options.add_option": "Add an option",
    "fields.type.field_options.missing_options": "Please provide at least one option",
    "fields.new.heading": "New",
    "fields.edit.heading": "Edit",
    "fields.add_new_field": "Add New Field",

    "organizationfields": "Organization Fields",
    "organizationfields.new.heading": "Organization Fields / New",

    "userfields": "User Fields",
    "userfields.buttons.add_new_userfield": "Add New Field",
    "userfields.type.text.name": "Text",
    "userfields.type.text.description": "Capture a small amount of text using a single line text field.",
    "userfields.type.textarea.name": "Multi-line Text",
    "userfields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "userfields.type.regex.name": "Regular expression",
    "userfields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "userfields.type.radio.name": "Radio box (single choice)",
    "userfields.type.radio.description": "Users can select one option from the options you define.",
    "userfields.type.dropdown.name": "Dropdown box (single choice)",
    "userfields.type.dropdown.description": "Users can select one option from the options you define.",
    "userfields.type.numeric.name": "Numeric",
    "userfields.type.numeric.description": "Capture an integer from users using this special text field.",
    "userfields.type.decimal.name": "Decimal",
    "userfields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "userfields.type.file.name": "File",
    "userfields.type.file.description": "Allow users to upload files to this field.",
    "userfields.type.yesno.name": "Yes or no toggle",
    "userfields.type.yesno.description": "Users can select yes or no using a toggle.",
    "userfields.type.date.name": "Date",
    "userfields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "userfields.type.checkbox.name": "Checkbox (multi choice)",
    "userfields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "userfields.type.priority.name": "Priority",
    "userfields.type.team.name": "Team",
    "userfields.type.assignee.name": "Assignee",
    "userfields.type.type.name": "Type",
    "userfields.type.status.name": "Status",
    "userfields.type.subject.name": "Subject",
    "userfields.type.message.name": "Message",
    "userfields.type.select.name": "Select",
    "userfields.type.select.description": "Selecta",
    "userfields.new.heading": "User Fields / New",
    "userfields.edit.heading": "User Fields / Edit",

    "caseforms": "Case Forms",
    "caseforms.buttons.add_new_caseform": "Add new form",
    "caseforms.headings.enabled_fields": "Enabled Fields",
    "caseforms.headings.disabled_fields": "Disabled Fields",
    "caseforms.heading.customer_settings": "Customers",
    "caseforms.heading.configure_form": "Configure Form",
    "caseforms.new.heading": "Case Forms / New",
    "caseforms.edit.heading": "Case Forms / Edit",
    "caseforms.heading.agent_settings": "Agents",
    "caseforms.label.field_title": "Form title for agents",
    "caseforms.label.is_visible_to_customers": "Customers can see and select this form",
    "caseforms.help.is_visible_to_customers": "When customers can see and select case forms, they will be able to select a case form when submitting a new request in the Help Center. This means that case forms can be used to direct customers to create different types of request and to provide specific pieces of information for that request type.",
    "caseforms.label.customer_form_title": "Form title for customers",
    "caseforms.label.customer_form_description": "Form description for customers",
    "caseforms.help.api_key": "The field key is unique to this form and is used to reference fields using the Kayako API and in search.",
    "caseforms.help.configure_fields": "System fields are included in each case form by default. Add and arrange custom case fields to the case form below. You can manage case fields in the [Case fields] section.",
    "caseforms.label.add_new_field": "Add new field",
    "caseforms.remove_from_form": "Remove from form",
    "caseforms.edit.description_on.is_enabled": "Form is enabled",
    "caseforms.edit.description_off.is_enabled": "Form is disabled",

    "casefields": "Case Fields",
    "casefields.headings.enabled_fields": "Enabled Fields",
    "casefields.headings.disabled_fields": "Disabled Fields",
    "casefields.edit.heading.priorities": "Priorities",
    "casefields.type.text.name": "Text",
    "casefields.type.text.description": "Capture a small amount of text using a single line text field.",
    "casefields.type.textarea.name": "Multi-line Text",
    "casefields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "casefields.type.regex.name": "Regular expression",
    "casefields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "casefields.type.radio.name": "Radio box (single choice)",
    "casefields.type.radio.description": "Users can select one option from the options you define.",
    "casefields.type.dropdown.name": "Dropdown box (single choice)",
    "casefields.type.dropdown.description": "Users can select one option from the options you define.",
    "casefields.type.numeric.name": "Numeric",
    "casefields.type.numeric.description": "Capture an integer from users using this special text field.",
    "casefields.type.decimal.name": "Decimal",
    "casefields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "casefields.type.file.name": "File",
    "casefields.type.file.description": "Allow users to upload files to this field.",
    "casefields.type.yesno.name": "Yes or no toggle",
    "casefields.type.yesno.description": "Users can select yes or no using a toggle.",
    "casefields.type.date.name": "Date",
    "casefields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "casefields.type.checkbox.name": "Checkbox (multi choice)",
    "casefields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "casefields.type.checkbox.field_options.title": "Option title",
    "casefields.type.checkbox.field_options.tag": "Option tag",
    "casefields.type.priority.name": "Priority",
    "casefields.type.team.name": "Team",
    "casefields.type.assignee.name": "Assignee",
    "casefields.type.type.name": "Type",
    "casefields.type.status.name": "Status",
    "casefields.type.subject.name": "Subject",
    "casefields.type.message.name": "Message",
    "casefields.type.select.name": "Select",
    "casefields.type.select.description": "Selecta",
    "casefields.buttons.add_new_casefield": "Add New Field",
    "casefields.description": "Lorem ipsum dolor sit amet, diam appetere facilisis at pri, his vocibus iudicabit te. Te decore feugiat necessitatibus nec, id eos fugit dicunt. Vis ei ubique blandit, in vidit maiestatis disputationi vix, essent perpetua interesset ei mea. Et mea ubique feugait, ne nam unum clita, no his indoctum conclusionemque. Ad pri aperiri definitionem, nec ei dictas blandit.",
    "casefields.new.heading": "Case Fields / New",
    "casefields.edit.heading": "Case Fields / Edit",
    "casefields.type.cascadingselect.name": "Cascading select",
    "casefields.type.cascadingselect.description": "Allow users to drill down through categories to organize a lot of select options.",
    "casefields.edit.label.field_options": "The drop-down field will contain the options specified below.",
    "casefields.edit.help.types": "Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah.",
    "casefields.edit.heading.types": "Types",
    "casefields.edit.add_new_type": "Add a new type",

    "casefields.edit.heading.agent_settings": "Agent Settings",
    "casefields.edit.heading.customer_settings": "Customer Settings",
    "casefields.edit.heading.field_options": "Field Options",
    "casefields.edit.heading.field_settings": "Field Settings",
    "casefields.edit.heading.regex": "Regular Expression",

    "casefields.edit.label.is_required_for_agents_when_updating_case": "Creating, replying to or updating a case",
    "casefields.edit.label.is_required_for_agents_when_resolving_case": "Resolving a case",
    "casefields.edit.label.field_title": "Field title",
    "casefields.edit.help.field_title": "This is the title that is displayed to your agents",
    "casefields.edit.label.is_visible_to_customers": "Customers can see this field",
    "casefields.edit.label.is_required_for_agents": "For agents, this field is required when",
    "casefields.edit.label.customer_field_title": "Field title for customers",
    "casefields.edit.label.customer_field_description": "Field description for customers",
    "casefields.edit.help.customer_field_description": "Enter an optional description into this field that will be show to customers in the help center",
    "casefields.edit.label.is_editable_by_customers": "Customers can edit this field",
    "casefields.edit.help.is_editable_by_customers": "Enable this setting to allow your customers to change the value of this field from the Help Center or through the API.",
    "casefields.edit.label.is_required_for_customers": "This field is required for customers",
    "casefields.edit.help.is_required_for_customers": "Enable this setting to require your customers to complete this field when creating or updating a case from the Help Center or through the API.",
    "casefields.edit.label.api_key": "API field key",
    "casefields.edit.help.api_key": "The field key is unique to this field and is used to reference fields using the Kayako API and in search.",
    "casefields.edit.description_on.is_enabled": "Field is enabled",
    "casefields.edit.description_off.is_enabled": "Field is disabled",
    "casefields.edit.help.is_enabled": "Disabled case fields will not be available on cases or case forms, but any existing data will still be searchable and can be referenced in reporting.",
    "casefields.edit.label.priorities": "The order of priorities matter: your priorities should go from highest to lowest. If you remove a priority, all cases using that priority will be set to no priority.",
    "casefields.help.regex": "Enter a regular expression that will be evaluated against your users' input. If the regular expression evaluates to false, the input will be deemed invalid.",
    "casefields.edit.add_new_status": "Add a new custom status",
    "casefields.edit.heading.statuses": "Statuses",
    "casefields.edit.help.statuses.1": "Case statuses typically map to your workflow and how you handle customer requests and conversations. Throughout its life, a case will move through various statuses. There are some default system statuses and you can also create statuses to customize the workflow.",
    "casefields.edit.help.statuses.2": "If SLAs are enabled in Kayako, you can determine whether or not SLA timers will pause on particular statuses. For example, you may not want the time a case spends while set to Pending (while you are waiting for a customer to get back to you) to count towards your SLA targets.",

    "twitter": "Twitter",
    "twitter.headings.index": "Twitter",
    "twitter.edit.heading": "Twitter / @{screenName}",
    "twitter.buttons.create_account": "Connect new account",
    "twitter.heading.account_settings": "Account settings",
    "twitter.heading.capture_settings": "What to capture",
    "twitter.heading.help_settings": "Help Center",
    "twitter.label.brand": "Brand",
    "twitter.help.brand": "Your channel accounts are linked to specific Brands. When you have multiple Brands set up, Kayako will link any cases created as a result of events over this channel account to this Brand.",
    "twitter.help.capture": "Kayako can capture various events (such as messages) through this channel account into cases. Select which kind of events you want Kayako to capture.",
    "twitter.label.mentions": "Mentions",
    "twitter.description_on.mentions": "Capturing @mentions",
    "twitter.description_off.mentions": "Not capturing @mentions",
    "twitter.label.favourited_tweets": "Favorited Tweets",
    "twitter.description_on.favourited_tweets": "Capturing Favorited Tweets",
    "twitter.description_off.favourited_tweets": "Not capturing Favorited Tweets",
    "twitter.label.direct_messages": "Direct Messages",
    "twitter.description_on.direct_messages": "Capturing Direct Messages",
    "twitter.description_off.direct_messages": "Not capturing Direct Messages",
    "twitter.label.display_public_tweets": "Show latest Tweets from this account in the Help Center",
    "twitter.description_on.display_public_tweets": "Showing latest Tweets",
    "twitter.description_off.display_public_tweets": "Not showing latest Tweets",
    "twitter.help.display_public_tweets": "Kayako can display the latest non-@mention Tweets sent from this account in your Help Center. This is useful if you use this account to keep your customers up to date with news and events.",

    "predicate_builder.cases.subject": "Cases: Subject",
    "predicate_builder.cases.casestatusid": "Cases: Status",
    "predicate_builder.cases.casetypeid": "Cases: Type",
    "predicate_builder.cases.casepriorityid": "Cases: Priority ID",
    "predicate_builder.cases.brandid": "Cases: Brand",
    "predicate_builder.cases.assigneeteamid": "Cases: Assigned Agent Team",
    "predicate_builder.cases.assigneeagentid": "Cases: Assigned Agent",
    "predicate_builder.cases.requesterid": "Cases: Requester",
    "predicate_builder.cases.lastcompletedat": "Cases: Last Completed",
    "predicate_builder.cases.updatedat": "Cases: Updated At",
    "predicate_builder.caseslametrics.isbreached": "SLA Breached",
    "predicate_builder.taglinks.tagid": "Tag",
    "predicate_builder.tags.name": "Tags",
    "predicate_builder.followers.userid": "User Id",
    "predicate_builder.users.organizationid": "Users: Organisation",
    "predicate_builder.cases.postcount": "Cases: Number of posts",
    "predicate_builder.operators.none": "String contains",
    "predicate_builder.operators.string_contains": "String contains",
    "predicate_builder.operators.string_does_not_contain": "String does not contain",
    "predicate_builder.operators.comparison_equalto": "is equal to",
    "predicate_builder.operators.comparison_not_equalto": "is not equal to",
    "predicate_builder.operators.comparison_lessthan": "is less than",
    "predicate_builder.operators.comparison_greaterthan": "is greater than",
    "predicate_builder.operators.collection_contains_insensitive": "String contains (case insensitive)",
    "predicate_builder.operators.collection_does_not_contain_insensitive": "String does not contain (case insensitive)",
    "predicate_builder.operators.collection_contains_any_insensitive": "String contains any (case insensitive)",
    "predicate_builder.operators.date_after": "Date after",
    "predicate_builder.operators.date_after_or_on": "Date after or on",
    "predicate_builder.operators.date_before": "Date before",
    "predicate_builder.operators.date_before_or_on": "Date before or on",
    "predicate_builder.operators.date_is": "Date is"
  };

});
define('frontend-cp/locales/en-us/cases', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "activity": "Activity",
    "addparticipant": "Add participant",
    "copy-someone-in.title": "Copy someone in",
    "copy-someone-in.description": "These people will be copied in on your reply.",
    "copy-someone-in.input-placeholder": "Find user or type email address",
    "copy-someone-in.fing-out-more": "Find out more about CC recipients.",
    "copy-someone-in.showing": "Showing {filtered} of {total} users",
    "copy-someone-in.not-found": "No users found.<br/>You could try typing an email address to add it.",
    "copy-someone-in.help-text": "These people will be copied in on your reply. <a href=\"#\">Find out more about CC recipients.</a>",
    "copy-someone-in.email-error": "Please enter a valid email address",
    "contents.placeholder": "Detail the case here...",
    "notes.placeholder": "Type a note...",
    "linkedCasesInline": "Link a case",
    "assignee": "Assignee",
    "rating": "Rating",
    "assignment-due-at": "Assignment due at",
    "created-at": "Created at",
    "creator": "Creator",
    "team": "Team",
    "brand": "Brand",
    "source": "Source",
    "created": "Created",

    "case.created": "Case Created",
    "case.updated": "Case Updated",

    "requester-language": "Requester Language",
    "organization": "Organization",
    "last-update": "Last update",
    "last-update-by-a-user": "Last update by a user",
    "last-update-by-requester": "Last update by requester",
    "last-update-by-assignee": "Last update by assignee",
    "oldest-update-by-requester": "Oldest update by requester",
    "completed": "Completed",
    "sla-name": "SLA Name",
    "next-breach": "Next breach",
    "resolution-time": "Resolution time",
    "first-reply-time": "First reply time",
    "next-reply-time": "Next reply time",
    "last-replier": "Last replier",
    "reply-due-at": "Reply due at",
    "reply-twitter-message": "Send reply as link to the Help Center.",
    "reply-twitter-tooltip": "Kayako will send a public Tweet to the requester containing a link to this conversation on the Help Center.",
    "resolution-at": "Resolution at",
    "cases": "Cases",
    "due": "Due",
    "lastreplier": "Last replier",
    "lastupdated": "Last updated {time}",
    "metric.total": "{number, number} Total",
    "metric.unresolved": "Unresolved",
    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",
    "note": "Note",
    "priority": "Priority",
    "requester": "Requester",
    "satisfaction-status": "Satisfaction status",
    "status": "Status",
    "subheader": "{time, date, medium} – {time, time, short} {hasChannel, select,\n    true {created via {channel}}\n    false {}\n  } {hasBrand, select,\n    true {, {brand}}\n    false {}\n  }",
    "subject": "Subject",
    "submit": "Submit",
    "ticketid": "Ticket ID",
    "type": "Type",
    "applymacro": "Apply Macro",
    "applymacroplaceholder": "Type to search macros",
    "channelType.MAILBOX": "email",
    "channelType.TWITTER": "Twitter",
    "channelType.TWITTER_DM": "Twitter",
    "channelType.CHAT": "Chat",
    "channelType.FACEBOOK": "Facebook",
    "channelType.none": "",
    "new_case": "New case",
    "new_case_subject_placeholder": "Click to add a subject",
    "new_case_tab_placeholder": "New Case",

    "search.request.result_meta": "Showing {numDisplayResults} of {totalResults} users",

    "list.casesnotfound": "There are no cases here.",

    "field_title.requester": "Requester",
    "notes": "Notes",
    "form-select": "Case form",
    "null_form_selected": "No form selected",

    "sort": "Sort",
    "filter": "Filter",

    "sort_options.newest_first": "Newest first",
    "sort_options.oldest_first": "Oldest first",

    "filter_options.all": "All",
    "filter_options.posts": "Posts",
    "filter_options.posts_activities": "Posts and activities",
    "filter_options.posts_events": "Posts and events",

    "deselect_type": "No type",
    "deselect_priority": "No priority",
    "deselect_generic": "None"
  };

});
define('frontend-cp/locales/en-us/feed', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "replied": "replied {ago}"
  };

});
define('frontend-cp/locales/en-us/generic', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "validation_errors": "Please fill in all required fields",
    "next": "Next",
    "close": "close",
    "datepicker.clear": "Clear",
    "datepicker.close": "Close",
    "datepicker.today": "Today",
    "filesize": "{size, number, filesize} {unit, select,\n    mb {MB}\n    kb {KB}\n  }",
    "logout": "logout",
    "paginatorof": "of {number, number}",
    "popover.next": "next",
    "popover.previous": "previous",
    "search": "Search helpdesk...",
    "texteditor.attachment": "Attachment",
    "texteditor.authorship": "Authorship",
    "texteditor.cc": "CC",
    "texteditor.billing": "Billing",
    "texteditor.bold": "Bold",
    "texteditor.bullet": "Bullet",
    "texteditor.image": "Image",
    "texteditor.italic": "Italic",
    "texteditor.link": "Link",
    "texteditor.list": "List",
    "texteditor.notes_reminder": "This private note will only be seen by agents",
    "users": "Users",
    "enable": "Enable",
    "enabled": "Enabled",
    "disable": "Disable",
    "disabled": "Disabled",
    "delete": "Delete",
    "edit": "Edit",
    "default": "Default",
    "profile.position": "{position}",
    "profile.place": "{place}",
    "profile.openCases": "{number} Open Cases",
    "profile.time": "Currently, {time}",
    "profile.follow": "Follow",
    "profile.unfollow": "Unfollow",
    "profile.viewProfile": "View Profile",
    "make_default": "Make default",
    "save": "Save",
    "cancel": "Cancel",
    "and": "And",
    "or": "Or",
    "day_abbreviation": "d",
    "hour_abbreviation": "h",
    "minute_abbreviation": "m",
    "SLA": "SLA",
    "select_placeholder": "Select...",
    "search_result_select_instruction": "Press enter",
    "search.no_results": "No results found",
    "shared_with": "Shared with",

    "sort.ASC": "Ascending",
    "sort.DESC": "Descending",

    "uploads.toolarge": "is too large.",
    "uploads.unknown": "upload failed. Please contact support",
    "uploads.wrongtype": "is not allowed. Allowed file types: ",

    "confirm.delete": "Are you sure you want to delete this",
    "confirm.lose_changes": "You have unsaved changes on this page. Are you sure you want to discard these changes?",
    "changes_saved": "Changes saved",

    "create_user_panel.title": "Create a new user",
    "create_user_panel.name_label": "First and last name",
    "create_user_panel.email_label": "Email address",
    "create_user_panel.name_required": "Name is required",
    "create_user_panel.email_required": "Email address is required",
    "create_user_panel.email_invalid": "Invalid email address",
    "create_user_panel.submit": "Add user",
    "create_user_panel.info": "Other identities can be added once the user has been created.",
    "create_user_panel.cancel": "cancel",

    "create_organisation_panel.title": "Create a new organization",
    "create_organisation_panel.name_label": "Organization Name",
    "create_organisation_panel.domain_label": "Domain(s):",
    "create_organisation_panel.name_required": "Name is required",
    "create_organisation_panel.domain_required": "Email address is required",
    "create_organisation_panel.domain_invalid": "Invalid email address",
    "create_organisation_panel.submit": "Add Organization",
    "create_organisation_panel.info": "Other details can be added once the organization has been created.",

    "user_logged_out": "You have been logged out",
    "session_expired": "Your session has expired",
    "permissions_denied": "Sorry, you don't have access to view that. Please ask for permissions from an admin.",
    "user_credential_expired": "The credential (e.g. password) is valid but has expired",

    "create_case_panel.title": "Create a new case",
    "create_case_panel.requester_label": "Requester/Recipient",
    "create_case_panel.requester_required": "Required",
    "create_case_panel.loading_label": "Loading users…",
    "create_case_panel.filter_label": "Showing {numFilteredUsers, number} of {numUsers, number}",
    "create_case_panel.info": "Other details can be added after continuing.",
    "create_case_panel.submit": "Create case",
    "create_case_panel.cancel": "cancel",

    "identities.component_title": "IDENTITIES",
    "identities.email_identities_title": "Email",
    "identities.twitter_identities_title": "Twitter",
    "identities.phones_identities_title": "Phone",
    "identities.facebook_identities_title": "Facebook",
    "identities.add_new": "Add new",
    "identities.add_email_identity": "Email",
    "identities.add_phone_identity": "Phone",
    "identities.add_twitter_identity": "Twitter",
    "identities.primary_comment": "(primary)",
    "identities.remove_identity": "Remove identity",
    "identities.verify_identity": "Verify identity",
    "identities.make_primary": "Make primary",
    "identities.placeholders.email": "Add email address",
    "identities.placeholders.twitter": "Add twitter handle",
    "identities.placeholders.phone": "Add phone number",
    "identities.errors.invalid_email_format": "Email format invalid",
    "identities.errors.invalid_twitter_handle_format": "Twitter handle format invalid",
    "identities.confirm_remove": "Are you sure you want to remove this identity?",

    "error.field_required": "This action requires the field to be specified",
    "error.field_duplicate": "The value of the field is already used for another resource",
    "error.field_empty": "The value of the field cannot be empty",
    "error.field_invalid": "The value of the field is invalid"
  };

});
define('frontend-cp/locales/en-us/login', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "back": "« Back",
    "email": "Email",
    "forgot": "Forgot password?",
    "login": "Login",
    "newpassword": "New Password",
    "verificationcode": "Verification Code",
    "password": "Password",
    "repeatpassword": "Password (repeat)",
    "resetpassword": "Reset your password",
    "updatepassword": "Change password",
    "welcome": "Welcome to Kayako"
  };

});
define('frontend-cp/locales/en-us/organisation', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "domains": "Email domains",
    "new_organisation_placeholder": "Click to add a name",
    "delete_organisation": "Delete organisation",
    "organisation.created": "Organisation Created",
    "organisation.updated": "Organisation Updated"
  };

});
define('frontend-cp/locales/en-us/search', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "no-results": "No results found",
    "placeholder": "Search..."
  };

});
define('frontend-cp/locales/en-us/users', ['exports'], function (exports) {

  'use strict';

  exports['default'] = {
    "addnewuser": "Add New User",
    "infobar.organization": "Organization",
    "infobar.role": "Role",
    "infobar.timezone": "Timezone",

    "newteam": "New Team",
    "addteam": "Add a team...",
    "teams": "Teams",

    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",

    "editsignature": "Edit Signature",
    "changepassword": "Change password",
    "deleteuser": "Delete user",
    "confirmdelete": "Are you sure you want to delete this user?",

    "user.created": "User Created",
    "user.updated": "User Updated",

    "metadata.created": "Created",
    "metadata.updated": "Updated",
    "metadata.lastseen": "Last seen",
    "infobar.accesslevel": "Case access",
    "infobar.accesslevel.self": "Cases assigned to agent",
    "infobar.accesslevel.organization": "All assigned to agent's teams",
    "infobar.accesslevel.inherit": "(Inherit from agent's role)",
    "infobar.accesslevel.all": "All cases",

    "add_a_note": "Add a note",
    "password_reset_email.success": "Password reset email has been sent",
    "recent_feedback": "Recent feedback",
    "recent_cases": "Recent cases",
    "no_feedback_available": "No feedback is available from this user",
    "no_recent_cases": "No recent cases from this user",
    "update_signature": "Proceed",
    "signaturemessage": "Please press \"Submit\" on the next page for this to take effect"
  };

});
define('frontend-cp/login/admin/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    sessionService: Ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.admin');
      }, function () {
        _this.controllerFor('login').set('loginType', 'admin');
      });
    }
  });

});
define('frontend-cp/login/agent/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    sessionService: Ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.agent');
      }, function () {
        _this.controllerFor('login').set('loginType', 'agent');
      });
    }
  });

});
define('frontend-cp/login/controller', ['exports', 'ember', 'frontend-cp/config/environment', 'frontend-cp/utils/format-validations', 'frontend-cp/mixins/simple-state'], function (exports, Ember, config, format_validations, SimpleStateMixin) {

  'use strict';

  /* global console */
  var htmlSafe = Ember['default'].String.htmlSafe;

  exports['default'] = Ember['default'].Controller.extend(SimpleStateMixin['default'], {
    sessionService: Ember['default'].inject.service('session'),
    notificationService: Ember['default'].inject.service('notification'),
    errorService: Ember['default'].inject.service('errorHandler'),
    intlService: Ember['default'].inject.service('intl'),
    newPassword1: '',
    otp: '',
    newPassword2: '',
    forgotPasswordMessage: '',
    stepToken: null,
    fieldErrors: [],
    avatarBackground: null,
    validAvatar: false,
    isContentDown: false,
    prevLoginState: null,
    topFormSet: null,
    bottomFormSet: null,
    isAnimatingContent: null,
    transitionOnLogin: null,
    authToken: null,

    init: function init() {
      this.setState('login.password.input');
      this.set('prevLoginState', this.get('currentState'));
      this._super.apply(this);
    },

    stateMap: {
      login: {
        password: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        otp: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        resetPassword: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        }
      },
      forgotPassword: {
        input: {},
        loading: {},
        confirmed: {},
        error: {}
      }
    },

    // Observers
    actionButtonText: Ember['default'].computed('currentState', function () {
      if (this.get('currentState') === 'login.resetPassword.input') {
        return this.get('intlService').findTranslationByKey('login.updatepassword').translation;
      } else {
        return this.get('intlService').findTranslationByKey('login.login').translation;
      }
    }),

    flipAvatar: Ember['default'].computed('validAvatar', 'avatarBackground', function () {
      return this.get('validAvatar') && this.get('avatarBackground');
    }),

    emailValidDidChange: Ember['default'].on('render', Ember['default'].observer('emailValid', function () {
      if (this.get('emailValid')) {
        this.requestAvatar(this.get('model.email'));
      }
    })),

    sessionDidClear: Ember['default'].on('init', Ember['default'].observer('sessionService.session.id', function () {
      if (this.get('sessionService.session.id') === null) {
        this.setState('login.password.input');
      }
    })),

    currentStateDidChange: Ember['default'].on('init', Ember['default'].observer('currentState', function () {
      var _this = this;

      var currentState = this.get('currentState');

      // Ignore anything outside the login root state
      if (!this.isInState('login', currentState)) {
        this.set('prevLoginState', currentState);
        return;
      }

      var stateMeta = {
        'password': {
          order: 0,
          component: 'ko-login-password'
        },
        'otp': {
          order: 1,
          component: 'ko-login-otp'
        },
        'resetPassword': {
          order: 2,
          component: 'ko-login-reset'
        }
      };

      var prevState = this.get('prevLoginState');
      var currentSubState = this.getStateAtLevel(1, currentState);
      var prevSubState = this.getStateAtLevel(1, prevState);
      var currentStateMeta = stateMeta[currentSubState];
      var prevStateMeta = stateMeta[prevSubState];
      var isContentDown = null;

      // Only items within login level 0 state should animate up / down
      if (this.getStateAtLevel(0, prevState) === 'login') {

        /**
         * Determine the direction of movement depending on 'order' of item
         * Eg. moving from password to otp will move down,
         * otp to resetPassword will move down again
         * resetPassword to password will move up (once, we don't want to go 'past' otp)
         */

        // This should explicitly do nothing if the orders are equal
        if (currentStateMeta.order > prevStateMeta.order) {
          isContentDown = true;
        } else if (currentStateMeta.order < prevStateMeta.order) {
          isContentDown = false;
        }

        // Place content area in pre-animation state
        Ember['default'].run(function () {
          // Choose where to place the prev and next components
          _this.setProperties({
            topFormSet: isContentDown ? prevStateMeta.component : currentStateMeta.component,
            bottomFormSet: isContentDown ? currentStateMeta.component : prevStateMeta.component
          });

          // Switch off animation
          _this.set('isAnimatingContent', false);

          if (currentSubState !== prevSubState) {
            // Move content to show the previous component
            _this.set('isContentDown', !isContentDown);
          }
        });

        // In next run loop run the animation
        Ember['default'].run.next(function () {
          // Switch on animation
          _this.set('isAnimatingContent', true);
          _this.set('isContentDown', isContentDown);
        });
      }

      // Store prevState for comparison
      this.set('prevLoginState', currentState);
    })),

    // Computed Properties

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: Ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    isLogin: Ember['default'].computed('currentState', 'prevLoginState', function () {
      var currentState = this.get('currentState');
      var prevState = this.get('prevLoginState');
      var isInLogin = this.isInState('login', currentState);
      var wasInLogin = this.isInState('login', prevState);
      if (isInLogin !== wasInLogin) {
        this.clearErrors();
      }
      return isInLogin;
    }),

    isLoading: Ember['default'].computed('currentState', function () {
      return this.endsWithSubState('loading', this.get('currentState'));
    }),

    isOtp: Ember['default'].computed('currentState', function () {
      return this.isInState('login.otp', this.get('currentState'));
    }),

    isPassword: Ember['default'].computed('currentState', function () {
      return this.isInState('login.password', this.get('currentState'));
    }),

    isResetPassword: Ember['default'].computed('currentState', function () {
      return this.isInState('login.resetPassword', this.get('currentState'));
    }),

    isError: Ember['default'].computed('currentState', function () {
      return this.endsWithSubState('error', this.get('currentState'));
    }),

    isForgotPasswordEmailSent: Ember['default'].computed('currentState', function () {
      return this.isInState('forgotPassword.confirmed', this.get('currentState'));
    }),

    emailValid: Ember['default'].computed('model.email', function () {
      return format_validations.validateEmailFormat(this.get('model.email'));
    }),

    passwordValid: Ember['default'].computed('model.password', function () {
      return this.get('model.password').length > 0;
    }),

    canAttemptLogin: Ember['default'].computed('emailValid', 'passwordValid', function () {
      return this.get('emailValid') && this.get('passwordValid');
    }),

    loginButtonDisabled: Ember['default'].computed('canAttemptLogin', 'isLoading', 'newPasswordValid', 'isResetPassword', function () {
      return !this.get('canAttemptLogin') || this.get('isLoading') || !this.get('newPasswordValid') && this.get('isResetPassword');
    }),

    newPasswordValid: Ember['default'].computed('newPassword1', 'newPassword2', function () {
      var password1 = this.get('newPassword1');
      var password2 = this.get('newPassword2');
      return password1 === password2 && !!password1 && password1.length > 7;
    }),

    hasErrorMessages: Ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').length > 0;
    }),

    errorMessages: Ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').map(function (error) {
        return error.message;
      });
    }),

    // Methods

    setErrors: function setErrors(errors) {
      this.set('fieldErrors', new Ember['default'].A(errors));
    },

    clearErrors: function clearErrors() {
      this.set('fieldErrors', []);
    },

    resetRequest: function resetRequest(endpoint, params) {
      var _this2 = this;

      return new Ember['default'].RSVP.Promise(function (resolve, reject) {
        Ember['default'].$.ajax({
          type: 'PUT',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: Ember['default'].$.param(params),
          headers: { 'X-Token': _this2.get('authToken') },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    otpRequest: function otpRequest(endpoint, otp) {
      var _this3 = this;

      return new Ember['default'].RSVP.Promise(function (resolve, reject) {
        Ember['default'].$.ajax({
          type: 'GET',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          headers: { 'X-Token': _this3.get('authToken'), 'X-OTP': otp },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    authRequest: function authRequest(endpoint, params) {
      return new Ember['default'].RSVP.Promise(function (resolve, reject) {
        Ember['default'].$.ajax({
          type: 'POST',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: Ember['default'].$.param(params),
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    requestAvatar: function requestAvatar(email) {
      var _this4 = this;

      Ember['default'].$.ajax({
        type: 'POST',
        url: '/admin/index.php?/Base/Avatar/JSON/0/200',
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        data: Ember['default'].$.param({ email: email }),
        success: function success(response) {
          /**
           * data.is_user dictates whether or not the returned image was gravatars
           * default image or not, if it was, we do not want to flip, treat it as a failed
           * call
           */

          var valid = !!response.data.is_user;

          _this4.set('validAvatar', valid);
          if (valid) {
            _this4.set('avatarBackground', response.data.data);
          }
        },
        error: function error() {
          // TODO
        }
      });
    },

    login: function login() {
      var _this5 = this;

      this.setState('login.password.loading');
      this.get('sessionService').requestSession(this.get('model.email'), this.get('model.password')).then(function () {
        // No additional info required, log in.
        _this5.setState('login.password.confirmed');

        var transitionOnLogin = _this5.get('transitionOnLogin');
        if (transitionOnLogin) {
          _this5.set('transitionOnLogin', null);
          transitionOnLogin.retry();
        } else {
          _this5.transitionToSession();
        }
      }, function (response) {
        var errorCodes = [];
        var data = response.errors;

        if (data.errors) {
          errorCodes = data.errors.map(function (error) {
            return error.code;
          });
        }

        if (errorCodes.indexOf('AUTHENTICATION_FAILED') > -1) {
          _this5.setErrors(data.notifications);
          _this5.setState('login.password.input');
        } else if (errorCodes.indexOf('CREDENTIAL_EXPIRED') > -1) {
          _this5.set('authToken', data.authToken);
          _this5.setState('login.resetPassword.input');
        } else if (errorCodes.indexOf('OTP_EXPECTED') > -1) {
          // User needs to enter one time password for two factor authentication
          _this5.set('authToken', data.authToken);
          _this5.set('stepToken', data.step_token);
          _this5.setState('login.otp.input');
        } else if (response instanceof Ember['default'].Error) {
          // this should never happen in production, but it might happen
          // on development stage when we have problems with models
          // (or similar)
          _this5.setState('login.password.error');
          _this5.setErrors({ message: 'System error, please contact Customer Support' });

          if (console && console.error) {
            console.error(response.message);
          }
        } else {
          _this5.setState('login.password.error');

          if (data.notifications) {
            _this5.setErrors(data.notifications);
          }
        }
      });
    },

    resetPassword: function resetPassword() {
      var _this6 = this;

      this.setState('login.resetPassword.loading');
      this.setErrors([]);

      this.resetRequest('/api/v1/base/profile/password', {
        password: this.get('model.password'),
        new_password: this.get('newPassword1')
      }).then(function (response) {
        _this6.get('notificationService').removeAll();
        if (response.session_id) {
          _this6.set('sessionService.sessionId', response.session_id);
          _this6.transitionToSession();
        } else {
          _this6.setState('login.resetPassword.error');
          _this6.setErrors({ message: 'Session missing' });
        }
      }, function (response) {
        _this6.setState('login.resetPassword.error');
        var data = JSON.parse(response);
        _this6.setErrors(data.notifications);
        _this6.get('errorService').sendErrorNotification(data.errors, {});
      });
    },

    submitOtp: function submitOtp() {
      var _this7 = this;

      this.setState('login.otp.loading');
      this.setErrors([]);

      this.otpRequest('/api/v1/session', this.get('otp')).then(function (response) {
        _this7.get('notificationService').removeAll();
        if (response.session_id) {
          _this7.setState('login.otp.confirmed');
          _this7.set('sessionService.sessionId', response.session_id);
          _this7.transitionToSession();
        } else {
          _this7.setState('login.otp.error');
          _this7.setErrors([{ message: 'Session missing' }]);
        }
      }, function (response) {
        _this7.setState('login.otp.error');
        var data = JSON.parse(response);
        _this7.setErrors(data.notifications);
        _this7.get('errorService').sendErrorNotification(data.errors, {});
      });
    },

    transitionToSession: function transitionToSession() {
      var loginType = this.get('loginType');
      this.transitionToRoute('session.' + loginType);
    },

    /**
     * Need to SafeString all bound style attributes
     */

    loginFrontImageStyle: Ember['default'].computed(function () {
      return htmlSafe('background-image: url(' + config['default'].assetRoot + '\'/images/user/avatar.png\');');
    }),

    loginBackImageStyle: Ember['default'].computed('avatarBackground', function () {
      if (this.get('avatarBackground')) {
        return htmlSafe('background-image: url("' + this.get('avatarBackground') + '");');
      } else {
        return htmlSafe('');
      }
    }),

    actions: {
      login: function login() {
        this.setErrors([]);

        if (!this.isInState('login', this.get('currentState'))) {
          return;
        }

        var funcMap = {
          password: this.login,
          resetPassword: this.resetPassword,
          otp: this.submitOtp
        };

        funcMap[this.getStateAtLevel(1)].call(this);
      },

      gotoForgotPassword: function gotoForgotPassword() {
        this.setState('forgotPassword.input');
      },

      gotoLogin: function gotoLogin() {
        this.setState('login.password.input');
      },

      sendForgotPasswordEmail: function sendForgotPasswordEmail() {
        var _this8 = this;

        this.setState('forgotPassword.loading');
        this.setErrors([]);
        this.authRequest('/api/v1/base/password/reset', { email: this.get('model.email') }).then(function () {
          _this8.setState('forgotPassword.confirmed');
          _this8.set('forgotPasswordMessage', 'An email with a reset link has been sent to your inbox');
        }, function (response) {
          var data = JSON.parse(response);
          _this8.setState('forgotPassword.error');
          _this8.setErrors(data.errors);
        });
      },

      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });

});
define('frontend-cp/login/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('login.agent');
    }
  });

});
define('frontend-cp/login/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return Ember['default'].Object.create({
        email: '',
        password: ''
      });
    }
  });

});
define('frontend-cp/login/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 23,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h6");
          dom.setAttribute(el2,"class","t-center t-good");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]),0,0);
          return morphs;
        },
        statements: [
          ["content","forgotPasswordMessage",["loc",[null,[21,40],[21,65]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[28,12],[28,23]]]]
          ],
          locals: ["message"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1,"class","t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","errorMessages",["loc",[null,[27,20],[27,33]]]]],[],0,null,["loc",[null,[27,12],[29,21]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 41,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2,"class","button button--primary u-1/1 u-mt");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1,0,0);
          return morphs;
        },
        statements: [
          ["inline","input",[],["type","email","value",["subexpr","@mut",[["get","model.email",["loc",[null,[35,39],[35,50]]]]],[],[]],"name","forgot-password","class","login__input login__input--alone","placeholder",["subexpr","format-message",[["subexpr","intl-get",["login.email"],[],["loc",[null,[35,143],[35,167]]]]],[],["loc",[null,[35,127],[35,168]]]],"disabled",["subexpr","@mut",[["get","isLoading",["loc",[null,[35,178],[35,187]]]]],[],[]]],["loc",[null,[35,12],[35,189]]]],
          ["attribute","disabled",["get","isLoading",["loc",[null,[39,110],[39,119]]]]],
          ["element","action",["sendForgotPasswordEmail"],[],["loc",[null,[39,62],[39,98]]]],
          ["inline","format-message",[["subexpr","intl-get",["login.resetpassword"],[],["loc",[null,[39,139],[39,171]]]]],[],["loc",[null,[39,122],[39,173]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 12
              },
              "end": {
                "line": 53,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
            return morphs;
          },
          statements: [
            ["content","message",["loc",[null,[52,12],[52,23]]]]
          ],
          locals: ["message"],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1,"class","t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
          return morphs;
        },
        statements: [
          ["block","each",[["get","errorMessages",["loc",[null,[51,20],[51,33]]]]],[],0,null,["loc",[null,[51,12],[53,21]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child4 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 16
            },
            "end": {
              "line": 60,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","component",[["get","topFormSet",["loc",[null,[59,28],[59,38]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[59,45],[59,50]]]]],[],[]],"isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[59,61],[59,70]]]]],[],[]],"otp",["subexpr","@mut",[["get","otp",["loc",[null,[59,75],[59,78]]]]],[],[]],"newPassword1",["subexpr","@mut",[["get","newPassword1",["loc",[null,[59,92],[59,104]]]]],[],[]],"newPassword2",["subexpr","@mut",[["get","newPassword2",["loc",[null,[59,118],[59,130]]]]],[],[]]],["loc",[null,[59,16],[59,132]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child5 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 16
            },
            "end": {
              "line": 65,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","component",[["get","bottomFormSet",["loc",[null,[64,28],[64,41]]]]],["model",["subexpr","@mut",[["get","model",["loc",[null,[64,48],[64,53]]]]],[],[]],"isLoading",["subexpr","@mut",[["get","isLoading",["loc",[null,[64,64],[64,73]]]]],[],[]],"otp",["subexpr","@mut",[["get","otp",["loc",[null,[64,78],[64,81]]]]],[],[]],"newPassword1",["subexpr","@mut",[["get","newPassword1",["loc",[null,[64,95],[64,107]]]]],[],[]],"newPassword2",["subexpr","@mut",[["get","newPassword2",["loc",[null,[64,121],[64,133]]]]],[],[]]],["loc",[null,[64,16],[64,135]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child6 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","login-form__wrapper login__actions");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2,"href","javascript:void(0);");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0,0,0);
          return morphs;
        },
        statements: [
          ["attribute","class",["concat",["js-slide ",["subexpr","if",[["get","isLoading",["loc",[null,[75,63],[75,72]]]],"u-disable-link"],[],["loc",[null,[75,58],[75,91]]]]]]],
          ["element","action",["gotoForgotPassword"],[],["loc",[null,[75,93],[75,124]]]],
          ["inline","format-message",[["subexpr","intl-get",["login.forgot"],[],["loc",[null,[75,142],[75,167]]]]],[],["loc",[null,[75,125],[75,169]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/login/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","login");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","login__box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flipper");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","front");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","back");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","login-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5,"class","login-form__reset-form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6,"class","login__header login__header--reset t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","login-form__wrapper login__actions");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        dom.setAttribute(el7,"href","javascript:void(0);");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5,"class","login-form__form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6,"class","login__header t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","login-form__mask");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"class","login-form__fields-container-top");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8,"class","login-form__fields-container-bottom");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6,"class","login-form__wrapper");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7,"class","button button--primary u-1/1 u-mt");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element2, [3, 1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [9, 1]);
        var element10 = dom.childAt(element7, [3]);
        var element11 = dom.childAt(element10, [5, 1]);
        var element12 = dom.childAt(element10, [7, 1]);
        var morphs = new Array(20);
        morphs[0] = dom.createAttrMorph(element3, 'class');
        morphs[1] = dom.createAttrMorph(element5, 'style');
        morphs[2] = dom.createAttrMorph(element6, 'style');
        morphs[3] = dom.createAttrMorph(element7, 'class');
        morphs[4] = dom.createMorphAt(dom.childAt(element8, [1]),0,0);
        morphs[5] = dom.createMorphAt(element8,3,3);
        morphs[6] = dom.createMorphAt(element8,5,5);
        morphs[7] = dom.createMorphAt(element8,7,7);
        morphs[8] = dom.createAttrMorph(element9, 'class');
        morphs[9] = dom.createElementMorph(element9);
        morphs[10] = dom.createMorphAt(element9,0,0);
        morphs[11] = dom.createMorphAt(dom.childAt(element10, [1]),0,0);
        morphs[12] = dom.createMorphAt(element10,3,3);
        morphs[13] = dom.createAttrMorph(element11, 'class');
        morphs[14] = dom.createMorphAt(dom.childAt(element11, [1]),1,1);
        morphs[15] = dom.createMorphAt(dom.childAt(element11, [3]),1,1);
        morphs[16] = dom.createAttrMorph(element12, 'disabled');
        morphs[17] = dom.createElementMorph(element12);
        morphs[18] = dom.createMorphAt(element12,0,0);
        morphs[19] = dom.createMorphAt(element10,9,9);
        return morphs;
      },
      statements: [
        ["attribute","class",["concat",["flip-container ",["subexpr","if",[["get","flipAvatar",["loc",[null,[3,36],[3,46]]]],"flip"],[],["loc",[null,[3,31],[3,55]]]]," ",["subexpr","if",[["get","isLoading",["loc",[null,[3,61],[3,70]]]],"a-success"],[],["loc",[null,[3,56],[3,84]]]]," ",["subexpr","if",[["get","isError",["loc",[null,[3,90],[3,97]]]],"a-error"],[],["loc",[null,[3,85],[3,109]]]]]]],
        ["attribute","style",["get","loginFrontImageStyle",["loc",[null,[6,44],[6,64]]]]],
        ["attribute","style",["get","loginBackImageStyle",["loc",[null,[9,44],[9,63]]]]],
        ["attribute","class",["concat",["login-form__container ",["subexpr","if",[["get","isLogin",["loc",[null,[15,45],[15,52]]]],"u-slide"],[],["loc",[null,[15,40],[15,64]]]]]]],
        ["inline","format-message",[["subexpr","intl-get",["login.resetpassword"],[],["loc",[null,[17,83],[17,115]]]]],[],["loc",[null,[17,66],[17,117]]]],
        ["block","if",[["get","isForgotPasswordEmailSent",["loc",[null,[19,16],[19,41]]]]],[],0,null,["loc",[null,[19,10],[23,17]]]],
        ["block","if",[["get","hasErrorMessages",["loc",[null,[25,16],[25,32]]]]],[],1,null,["loc",[null,[25,10],[31,17]]]],
        ["block","if",[["subexpr","not",[["get","isForgotPasswordEmailSent",["loc",[null,[33,21],[33,46]]]]],[],["loc",[null,[33,16],[33,47]]]]],[],2,null,["loc",[null,[33,10],[41,17]]]],
        ["attribute","class",["concat",["js-slide ",["subexpr","if",[["get","isLoading",["loc",[null,[44,63],[44,72]]]],"u-disable-link"],[],["loc",[null,[44,58],[44,91]]]]]]],
        ["element","action",["gotoLogin"],[],["loc",[null,[44,93],[44,115]]]],
        ["inline","format-message",[["subexpr","intl-get",["login.back"],[],["loc",[null,[44,133],[44,156]]]]],[],["loc",[null,[44,116],[44,158]]]],
        ["inline","format-message",[["subexpr","intl-get",["login.welcome"],[],["loc",[null,[48,62],[48,88]]]]],[],["loc",[null,[48,45],[48,90]]]],
        ["block","if",[["get","hasErrorMessages",["loc",[null,[49,16],[49,32]]]]],[],3,null,["loc",[null,[49,10],[54,17]]]],
        ["attribute","class",["concat",["login-form__content ",["subexpr","if",[["get","isAnimatingContent",["loc",[null,[56,49],[56,67]]]],"login-form__content--animate"],[],["loc",[null,[56,44],[56,100]]]]," ",["subexpr","if",[["get","isContentDown",["loc",[null,[56,106],[56,119]]]],"login-form__content-down"],[],["loc",[null,[56,101],[56,148]]]]]]],
        ["block","if",[["get","topFormSet",["loc",[null,[58,22],[58,32]]]]],[],4,null,["loc",[null,[58,16],[60,23]]]],
        ["block","if",[["get","bottomFormSet",["loc",[null,[63,22],[63,35]]]]],[],5,null,["loc",[null,[63,16],[65,23]]]],
        ["attribute","disabled",["get","loginButtonDisabled",["loc",[null,[71,73],[71,92]]]]],
        ["element","action",["login"],[],["loc",[null,[71,95],[71,113]]]],
        ["content","actionButtonText",["loc",[null,[71,114],[71,134]]]],
        ["block","if",[["subexpr","not",[["subexpr","eq",[["get","currentState",["loc",[null,[73,25],[73,37]]]],"login.resetPassword.input"],[],["loc",[null,[73,21],[73,66]]]]],[],["loc",[null,[73,16],[73,67]]]]],[],6,null,["loc",[null,[73,10],[77,17]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  }()));

});
define('frontend-cp/mirage/config', ['exports', 'ember-cli-mirage', 'frontend-cp/mirage/fixtures/en-us-strings', 'moment'], function (exports, Mirage, EnUsStrings, moment) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = function () {
    // Helper functios
    function arrayToObjectWithNumberedKeys(source) {
      var pos = 1;
      var object = {};

      source.forEach(function (item) {
        object[pos] = item;
        pos++;
      });

      return object;
    };

    // Endpoints
    this.get('/api/v1/locales/en-us/strings', function (db) {
      return EnUsStrings['default'][0];
    });

    this.get('/api/v1/locales/en-us', function () {
      return {
        status: 200,
        data: {
          locale: 'en-us',
          name: 'English (United States)',
          native_name: 'English (United States)',
          region: 'US',
          native_region: 'United States',
          script: '',
          variant: '',
          direction: 'LTR',
          is_enabled: true,
          created_at: '2015-05-28T14:12:59Z',
          updated_at: '2015-05-28T14:12:59Z',
          resource_type: 'locale'
        },
        resource: 'locale'
      };
    });

    this.get('/api/v1/users/:id/identities/slack', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'identity_slack',
        total_count: 0
      };
    });

    this.get('/api/v1/users/:id/events', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var events = db.events;
      if (since) {
        events = events.filter(function (event) {
          return moment['default'](event.created_at).isAfter(moment['default'].unix(since));
        });
      } else if (until) {
        events = events.filter(function (event) {
          return moment['default'](event.created_at).isBefore(moment['default'].unix(until));
        });
      }
      return {
        data: events,
        resource: 'event',
        status: 200,
        total_count: db.events.length
      };
    });

    this.post('/api/v1/users/:user_id/identities/emails', function (db, req) {
      var data = JSON.parse(req.requestBody);
      delete data.parent_id;
      delete data.parentType;
      data.resource_type = 'identity_email';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-emails'].insert(data);
      db.users.update(user.id, { emails: [identity].concat(user.emails) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/users/:user_id/identities/twitter', function (db, req) {
      var data = JSON.parse(req.requestBody);
      delete data.parent_id;
      delete data.parentType;
      data.resource_type = 'identity_twitter';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-twitters'].insert(data);
      db.users.update(user.id, { twitters: [identity].concat(user.twitters) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/users/:user_id/identities/phones', function (db, req) {
      var data = JSON.parse(req.requestBody);
      delete data.parent_id;
      delete data.parentType;
      data.resource_type = 'identity_phone';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-phones'].insert(data);
      db.users.update(user.id, { phones: [identity].concat(user.phones) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });

    this.put('/api/v1/identities/emails/:id/primary', function (db, req) {
      var identity = db['identity-emails'].find(req.params.id);
      var user = db.users.toArray().find(function (u) {
        return u.emails.some(function (e) {
          return e.id === identity.id;
        });
      });
      user.emails.forEach(function (e) {
        db['identity-emails'].update(e.id, { is_primary: e.id === identity.id });
      });
      return {
        'status': 200,
        'data': db['identity-emails'].find(req.params.id),
        'resource': 'identity_email'
      };
    });

    this.put('/api/v1/identities/emails/:id/validate', function (db, req) {
      return {
        'status': 200,
        'data': db['identity-emails'].update(req.params.id, { is_validated: true }),
        'resource': 'identity_email'
      };
    });

    this.post('/api/v1/identities/emails/:id/send_validation_email', function (db, req) {
      return { 'status': 200 };
    });

    this.put('/api/v1/identities/twitter/:id/primary', function (db, req) {
      var identity = db['identity-twitters'].find(req.params.id);
      var user = db.users.toArray().find(function (u) {
        return u.twitters.some(function (e) {
          return e.id === identity.id;
        });
      });
      user.twitters.forEach(function (e) {
        db['identity-twitters'].update(e.id, { is_primary: e.id === identity.id });
      });
      return {
        'status': 200,
        'data': db['identity-twitters'].find(req.params.id),
        'resource': 'identity_twitter'
      };
    });

    this.put('/api/v1/identities/phones/:id/primary', function (db, req) {
      var identity = db['identity-phones'].find(req.params.id);
      var user = db.users.toArray().find(function (u) {
        return u.phones.some(function (e) {
          return e.id === identity.id;
        });
      });
      user.phones.forEach(function (e) {
        db['identity-phones'].update(e.id, { is_primary: e.id === identity.id });
      });
      return {
        'status': 200,
        'data': db['identity-phones'].find(req.params.id),
        'resource': 'identity_phone'
      };
    });

    this.put('/api/v1/identities/facebook/:id/primary', function (db, req) {
      var identity = db['identity-facebooks'].find(req.params.id);
      var user = db.users.toArray().find(function (u) {
        return u.facebooks.some(function (e) {
          return e.id === identity.id;
        });
      });
      user.facebooks.forEach(function (e) {
        db['identity-facebooks'].update(e.id, { is_primary: e.id === identity.id });
      });
      return {
        'status': 200,
        'data': db['identity-facebooks'].find(req.params.id),
        'resource': 'identity_facebook'
      };
    });

    // This routes are duplicated. Need to fix.
    this['delete']('/api/v1/users/:user_id/identities/emails/:id', function (db, req) {
      var user = db.users.find(req.params.user_id);
      db.users.update(user.id, { emails: user.emails.filter(function (e) {
          return String(e.id) !== req.params.id;
        }) });
      db['identity-emails'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/email/:id', function (db, req) {
      db['identity-emails'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/users/:user_id/identities/twitters/:id', function (db, req) {
      var user = db.users.find(req.params.user_id);
      db.users.update(user.id, { emails: user.emails.filter(function (e) {
          return String(e.id) !== req.params.id;
        }) });
      db['identity-twitters'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/twitter/:id', function (db, req) {
      db['identity-twitters'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/users/:user_id/identities/phones/:id', function (db, req) {
      var user = db.users.find(req.params.user_id);
      db.users.update(user.id, { emails: user.emails.filter(function (e) {
          return String(e.id) !== req.params.id;
        }) });
      db['identity-phones'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/phone/:id', function (db, req) {
      db['identity-phones'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/users/:user_id/identities/facebooks/:id', function (db, req) {
      var user = db.users.find(req.params.user_id);
      db.users.update(user.id, { emails: user.emails.filter(function (e) {
          return String(e.id) !== req.params.id;
        }) });
      db['identity-facebooks'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/facebook/:id', function (db, req) {
      db['identity-facebooks'].remove(req.params.id);
      return { status: 200 };
    });

    this.get('/api/v1/roles', function (db) {
      return {
        status: 200,
        data: db.roles,
        resource: 'role',
        offset: 0,
        limit: 10,
        total_count: db.roles.length
      };
    });

    this.get('/api/v1/roles/:id/permissions', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'permission',
        offset: 0,
        limit: 10,
        total_count: 0
      };
    });

    this.post('/admin/index.php', function (db) {
      return {
        status: 200,
        data: {
          is_user: false
        }
      };
    });

    this.get('/api/v1/organizations', function (db) {
      return {
        status: 200,
        data: db.organizations,
        resource: 'organization',
        total_count: db.organizations.length
      };
    });

    this.get('/api/v1/views', function (db) {
      return {
        data: db.views.map(function (v) {
          return Object.assign({}, v, { columns: v.columns.map(function (c) {
              delete c.id;return c;
            }) });
        }),
        limit: 10,
        offset: 0,
        resource: 'view',
        resources: {
          predicate_collection: arrayToObjectWithNumberedKeys(db['predicate-collections'])
        },
        status: 200,
        total_count: db.views.length
      };
    });

    this.get('/api/v1/views/definition', function (db) {
      return {
        data: db.definitions,
        resource: 'definition',
        status: 200,
        total_count: db.definitions.length
      };
    });

    this.get('/api/v1/views/columns', function (db) {
      return {
        data: db.columns,
        status: 200,
        resource: 'column',
        total_count: db.columns.length
      };
    });

    this.get('/api/v1/views/counts', function (db) {
      return {
        data: [],
        status: 200,
        resource: 'view-count',
        total_count: 0
      };
    });

    this.put('/api/v1/base/profile/password', function (db, request) {
      var split = request.requestBody.split('=');
      var newPassword = split[2];
      var oldPassword = split[1].split('&')[0];

      if (oldPassword === newPassword) {
        return new Mirage['default'].Response(400, {}, {
          status: 400,
          errors: [{
            code: 'FIELD_INVALID',
            parameter: 'new_password',
            message: 'The value of the field is invalid',
            more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+FIELD_INVALID'
          }],
          notifications: [{
            type: 'ERROR',
            message: 'You cannot reuse an old password, please specify a new password',
            sticky: false
          }]
        });
      }

      var session = db.sessions[0];
      return {
        status: 200,
        session_id: session.id
      };
    });

    this.get('/api/v1/session', function (db, request) {
      // otp@kayako.com : setup
      if (request.requestHeaders.Authorization === 'Basic b3RwQGtheWFrby5jb206c2V0dXA=') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'OTP_EXPECTED',
            message: 'To complete logging in you need to provide the one-time password'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new Mirage['default'].Response(403, {}, response);
      }

      // reset@kayako.com : longpass
      if (request.requestHeaders.Authorization === 'Basic cmVzZXRAa2F5YWtvLmNvbTpsb25ncGFzcw==') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'CREDENTIAL_EXPIRED',
            message: 'The credential (e.g. password) is valid but has expired'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new Mirage['default'].Response(403, {}, response);
      }

      var session = db.sessions[0];
      var user = session.user;
      if (request.requestHeaders['X-OTP']) {
        if (request.requestHeaders['X-OTP'] === '666') {
          return new Mirage['default'].Response(401, {}, {
            status: 401,
            errors: [{
              code: 'AUTHENTICATION_FAILED',
              message: 'Used authentication credentials are invalid or signature verification failed',
              more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+AUTHENTICATION_FAILED'
            }]
          });
        }

        return {
          session_id: session.id,
          status: 200
        };
      }

      return {
        status: 200,
        data: session,
        resource: 'session',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(user.emails),
          identity_phone: arrayToObjectWithNumberedKeys(user.phones),
          identity_twitter: arrayToObjectWithNumberedKeys(user.twitters),
          identity_facebook: arrayToObjectWithNumberedKeys(user.facebooks),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(user.teams),
          user: arrayToObjectWithNumberedKeys([user]),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        }
      };
    });

    this.get('/api/v1/teams', function (db) {
      return {
        status: 200,
        data: db.teams,
        resource: 'team',
        offset: 0,
        limit: 10,
        total_count: db.teams.length
      };
    });

    this.get('/api/v1/users', function (db, req) {
      var offset = parseInt(req.queryParams.offset, 10);
      var limit = parseInt(req.queryParams.limit, 10);
      var users = db.users.slice(offset, offset + limit);
      return {
        status: 200,
        data: users,
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.emails);
          }, [])),
          identity_twitter: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.twitters);
          }, [])),
          identity_phone: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.phones);
          }, [])),
          identity_facebook: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.facebooks);
          }, [])),
          role: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat([u.role]);
          }, [])),
          team: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.teams);
          }, [])),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: users.length
      };
    });

    this.get('/api/v1/users/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db.users.find(id),
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: db.users.length
      };
    });

    this.get('/api/v1/users/:id/cases', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'case',
        limit: 10,
        offset: 0,
        resources: {},
        total_count: 0
      };
    });

    this.get('/api/v1/users/:id/notes', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'note'
      };
    });

    this['delete']('/api/v1/session', function () {
      return {
        status: 200
      };
    });

    this.post('/api/v1/base/password/reset', function () {
      return {
        status: 200,
        auth_token: 'yh5wFffnVzOi5IyYr1aMwojpcRJw0FGid3S9r5iDumvLsPI0fRWBl4VfTEpPkodWwUvLlQXr3zJkfTxC'
      };
    });

    this.get('/api/v1/cases/forms/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db['case-forms'].find(id),
        resource: 'case_form',
        resources: {}
      };
    });

    this.get('/api/v1/cases/forms', function (db) {
      return {
        data: db['case-forms'],
        resource: 'case_form',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          language: arrayToObjectWithNumberedKeys(db.languages)
        },
        status: 200,
        total_count: db['case-forms'].length
      };
    });

    this.get('/api/v1/cases/channels', function (db, request) {
      return {
        status: 200,
        data: db.channels,
        resource: 'channel',
        resources: {
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes)
        }
      };
    });

    this.get('/api/v1/views/:viewId/cases', function (db) {
      return {
        status: 200,
        data: db.cases,
        resource: 'case',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          language: db.languages,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields'])
        },
        offset: 0,
        limit: 5,
        total_count: db.cases.length
      };
    });

    this.get('/api/v1/cases/:id/posts', function (db) {
      return {
        data: db.posts,
        limit: 10,
        resource: 'post',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          case_message: arrayToObjectWithNumberedKeys(db['case-messages']),
          contact_address: arrayToObjectWithNumberedKeys(db['contact-addresses']),
          contact_website: arrayToObjectWithNumberedKeys(db['contact-websites']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_phone: arrayToObjectWithNumberedKeys(db['identity-phones']),
          language: arrayToObjectWithNumberedKeys(db.languages),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          message_recipient: arrayToObjectWithNumberedKeys(db['message-recipients']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          role: arrayToObjectWithNumberedKeys(db.roles),
          user: arrayToObjectWithNumberedKeys(db.users)
        },
        status: 200,
        total_count: db.posts.length
      };
    });

    this.post('/api/v1/cases', function (db, request) {
      // let { channel_id, channel, requester_id, priority_id, form_id } = JSON.parse(request.requestBody);
      // let unifiedCase = server.create('case', {
      //   channel_id,
      //   channel,
      //   requester: {
      //     id: requester_id,
      //     resource_type: "user"
      //   },
      //   priority: {
      //     id: priority_id,
      //     resource_type: 'case-priority'
      //   },
      //   source_channel: null,
      //   creator: null,
      //   identity: null,
      //   assignee: null,
      //   brand: null,
      //   status: null,
      //   type: null,
      //   sla: null,
      //   metadata: null,
      //   last_replier: null,
      //   last_replier_identity: null,
      // });
      return new Mirage['default'].Response(201, {}, {
        status: 201,
        resource: 'case',
        data: {
          id: 123,
          resource_type: 'case',
          created_at: '2015-09-28T14:12:59Z',
          updated_at: '2015-09-28T14:12:59Z'
        },
        resources: {}
      });
    });

    this.get('/api/v1/cases/:id', function (db, request) {
      if (isNaN(request.params.id)) {
        throw 'Caught by a wild card!';
      }
      var id = parseInt(request.params.id);
      return {
        status: 200,
        data: db.cases.find(id),
        resource: 'case',
        resources: {
          language: db.languages,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields'])
        },
        offset: 0,
        limit: 5,
        total_count: db.cases.length
      };
    });

    this.get('/api/v1/cases/:id/notes', function (db) {
      return db.casesnotes[0];
    });

    this.post('/api/v1/cases/:id/notes', function (db) {
      return new Mirage['default'].Response(200, {}, '');
    });

    this.get('/api/v1/cases/:id/messages', function (db) {
      return {
        data: [],
        limit: 10,
        offset: 0,
        resource: 'case_message',
        status: 200,
        total_count: 0
      };
    });

    this.get('/api/v1/cases/:id/activities', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var activities = db.activities;
      if (since) {
        activities = activities.filter(function (activity) {
          return moment['default'](activity.created_at).isAfter(moment['default'].unix(since));
        });
      } else if (until) {
        activities = activities.filter(function (activity) {
          return moment['default'](activity.created_at).isBefore(moment['default'].unix(until));
        });
      }
      return {
        data: activities,
        resource: 'activity',
        status: 200,
        total_count: db.activities.length
      };
    });

    this.get('/api/v1/cases/:id/reply/channels', function (db) {
      return {
        data: db.channels,
        resource: 'channel',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          facebook_account: arrayToObjectWithNumberedKeys(db['facebook-accounts']),
          facebook_page: arrayToObjectWithNumberedKeys(db['facebook-pages']),
          language: db.languages,
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          twitter_account: arrayToObjectWithNumberedKeys(db['twitter-accounts'])
        },
        status: 200,
        total_count: db.channels.length
      };
    });

    this.post('/api/v1/cases/:id/reply', function (db) {
      return new Mirage['default'].Response(200, {}, '');
    });

    this.get('/api/v1/cases/priorities', function (db) {
      return {
        data: db['case-priorities'],
        resource: 'case_priority',
        status: 200,
        total_count: db['case-priorities'].length
      };
    });

    this.get('/api/v1/cases/types', function (db) {
      return {
        data: db['case-types'],
        resource: 'case_type',
        status: 200,
        total_count: db['case-types'].length
      };
    });

    this.get('/api/v1/cases/statuses', function (db) {
      return {
        data: db['case-statuses'],
        resource: 'case_status',
        status: 200,
        total_count: db['case-statuses'].length
      };
    });

    this.get('/api/v1/cases/statuses/:id', function (db, request) {
      return {
        data: db['case-statuses'].find(request.params.id),
        resource: 'case_status',
        status: 200
      };
    });

    this.get('/api/v1/cases/fields', function (db) {
      return {
        data: db['case-fields'],
        resource: 'case_field',
        status: 200,
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options'])
        },
        total_count: db['case-fields'].length
      };
    });

    this.get('/api/v1/cases/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db.casesfields.find(request.params.id),
        resource: 'case_field'
      };
    });

    this.get('/api/v1/cases/reply/channels', function (db) {
      return db.casesreplychannels[0];
    });

    this.get('/api/v1/cases/:id/channels', function (db) {
      return {
        data: [],
        resource: 'channel',
        status: 200
      };
    });

    this.get('/api/v1/cases/fields/:id/options', function (db) {
      return {
        'status': 200,
        'data': db.fieldsoptions,
        'resource': 'field_option',
        'total_count': 3
      };
    });

    this.get('/api/v1/teams', function (db) {
      return {
        'status': 200,
        'data': db.teamsdata,
        'resource': 'team',
        'offset': 0,
        'limit': 10,
        'total_count': 4
      };
    });

    this.get('/api/v1/autocomplete/emails', function (db, request) {
      return {
        'status': 200,
        'data': db['identity-autocomplete-emails'],
        'resource': 'identity',
        'resources': {
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          organization: arrayToObjectWithNumberedKeys(db.organizations)
        },
        'total_count': 10
      };
    });

    this.post('/api/v1/users', function () {
      return {
        status: 200,
        data: [],
        resource: 'user',
        total_count: 1
      };
    });

    this.get('/api/v1/roles/:id', function (db, request) {
      return {
        'status': 200,
        'data': db.rolesdata[request.params.id]
      };
    });

    this.get('/api/v1/cases/macros', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'macro',
        total_count: 0
      };
    });

    this.get('/api/v1/cases/ratings/recent', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'macro',
        total_count: 0
      };
    });

    this.get('/api/v1/base/search_all', function (db, request) {
      if (request.queryParams['in'] === 'users') {
        var users = db.users.filter(function (u) {
          return u.full_name.indexOf(request.queryParams.query) > -1;
        });
        var results = users.map(function (u) {
          return {
            id: u.id,
            title: u.full_name,
            data: { id: u.id, resource_type: 'user' },
            resource: 'user',
            snippet: u.full_name.replace(request.queryParams.query, '<em>' + request.queryParams.query + '</em>')
          };
        });
        return {
          status: 200,
          resource: 'object',
          data: [{ results: results, resource: 'user' }],
          resources: {
            user: arrayToObjectWithNumberedKeys(users)
          }
        };
      } else {
        throw new Error('This search is not implemented in mirage');
      }
    });
  }

});
define('frontend-cp/mirage/factories/activity', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    actor: null,
    verb: 'create',
    summary: '<@https://brewfictus.kayako.com/user/1|Phoebe Todd> created <https://brewfictus.kayako.com/case/view/1|Atmosphere Coffee, Inc annual maintenance>',
    actions: [],
    object: null,
    object_actor: null,
    location: null,
    place: null,
    target: null,
    result: null,
    in_reply_to: null,
    participant: null,
    portal: 'API',
    weight: 0.8,
    ip_address: null,
    created_at: ember_cli_mirage.faker.date.recent,
    resource_type: 'activity'
  });

});
define('frontend-cp/mirage/factories/assignee', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    team: {}
  });

});
define('frontend-cp/mirage/factories/brand', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    is_enabled: true,
    language: {},
    name: 'Default',
    resource_type: 'brand',
    created_at: '2015-08-05T06:13:59Z',
    resource_url: 'http://novo/api/index.php?/v1/brands/1',
    updated_at: '2015-08-05T06:13:59Z',
    url: null
  });

});
define('frontend-cp/mirage/factories/business-hour', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    title: 'Default Business Hours',
    zones: {
      monday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      tuesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      wednesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      thursday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      friday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      saturday: [],
      sunday: []
    },
    holidays: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'business_hour',
    resource_url: 'http://novo/api/index.php?/v1/businesshours/1'
  });

});
define('frontend-cp/mirage/factories/case-field-value', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    field: {},
    value: ember_cli_mirage.faker.random.title,
    resource_type: 'case_field_value'
  });

});
define('frontend-cp/mirage/factories/case-field', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    fielduuid: function fielduuid(i) {
      return 'fake-xxx-' + i;
    },
    type: ember_cli_mirage.faker.list.cycle('SUBJECT', 'MESSAGE', 'PRIORITY', 'STATUS', 'TYPE', 'TEAM', 'ASSIGNEE', 'TEXT', 'TEXTAREA', 'CHECKBOX', 'RADIO', 'SELECT', 'DATE', 'NUMERIC'),
    key: ember_cli_mirage.faker.list.cycle('subject', 'message', 'priority', 'status', 'type', 'team', 'assignee', 'text', 'textarea', 'checkbox', 'radio', 'select', 'date', 'numeric'),
    title: ember_cli_mirage.faker.list.cycle('Subject', 'Message', 'Priority', 'Status', 'Type', 'Team', 'Assignee', 'Text', 'Textarea', 'Checkbox', 'Radio', 'Select', 'Date', 'Numeric'),
    is_required_for_agents: true,
    is_required_on_resolution: true,
    is_visible_to_customers: true,
    customer_title: ember_cli_mirage.faker.list.cycle('Subject', 'Message', 'Priority', 'Status', 'Type', 'Team', 'Assignee', 'Text', 'Textarea', 'Checkbox', 'Radio', 'Select', 'Date', 'Numeric'),
    is_customer_editable: true,
    is_required_for_customers: true,
    description: null,
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    locales: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_field',
    resource_url: 'http://novo/api/index.php?/v1/cases/fields/1'
  });

});
define('frontend-cp/mirage/factories/case-form', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    title: 'Internet Related Issue',
    is_visible_to_customers: true,
    customer_title: 'Internet Related Issue',
    description: null,
    is_enabled: true,
    is_default: false,
    sort_order: 1,
    fields: [],
    brand: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_form',
    resource_url: 'http://novo/api/index.php?/v1/cases/forms/1'
  });

});
define('frontend-cp/mirage/factories/case-message', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    resource_type: 'case_message'
  });

});
define('frontend-cp/mirage/factories/case-priority', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    label: ember_cli_mirage.faker.list.cycle('Low', 'Normal', 'High', 'Urgent'),
    level: ember_cli_mirage.faker.list.cycle(1, 2, 3, 4),
    color: ember_cli_mirage.faker.list.cycle('green', 'yellow', 'orange', 'red'),
    locales: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_priority',
    resource_url: 'http://novo/api/index.php?/v1/cases/priorities/1'
  });

});
define('frontend-cp/mirage/factories/case-status', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    label: ember_cli_mirage.faker.list.cycle('New', 'Open', 'Pending', 'Completed', 'Closed'),
    color: null,
    visibility: 'PUBLIC',
    type: ember_cli_mirage.faker.list.cycle('NEW', 'OPEN', 'PENDING', 'COMPLETED', 'CLOSED'),
    locales: [],
    is_sla_active: true,
    is_deleted: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_status',
    resource_url: 'http://novo/api/index.php?/v1/cases/statuses/1'
  });

});
define('frontend-cp/mirage/factories/case-type', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    label: ember_cli_mirage.faker.list.cycle('Question', 'Task', 'Problem', 'Incident'),
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_type',
    resource_url: 'http://novo/api/index.php?/v1/cases/types/1'
  });

});
define('frontend-cp/mirage/factories/case', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    subject: function subject(i) {
      return 'ERS Audit ' + (i + 1);
    },
    mask_id: function mask_id(i) {
      return 'DXX-' + (i + 1) + '-' + ember_cli_mirage.faker.random.number();
    },
    portal: null,
    source_channel: {},
    requester: {},
    creator: {},
    identity: {},
    assignee: {},
    brand: {},
    status: {},
    priority: {},
    type: {},
    sla: {},
    sla_metrics: [],
    tags: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    last_replier: {},
    last_replier_identity: {},
    creation_mode: 'WEB',
    state: 'ACTIVE',
    post_count: 3,
    has_notes: false,
    pinned_notes_count: 0,
    has_attachments: false,
    rating: null,
    rating_status: 'UNOFFERED',
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    last_agent_activity_at: null,
    last_assigned_at: null,
    last_closed_at: null,
    last_opened_at: null,
    last_pending_at: null,
    last_customer_activity_at: '2015-07-09T15:36:10Z',
    resource_type: 'case',
    resource_url: 'http://novo/api/index.php?/v1/cases/1'
  });

});
define('frontend-cp/mirage/factories/channel', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    uuid: ember_cli_mirage.faker.random.uuid,
    account: {},
    type: 'MAILBOX',
    resource_type: 'channel'
  });

});
define('frontend-cp/mirage/factories/column', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    name: ember_cli_mirage.faker.list.cycle('id', 'subject', 'status', 'assignee', 'requester', 'rating', 'sla', 'priority', 'requester', 'last_replier', 'updated_at', 'created_at'),
    resource_type: 'column'
  });

});
define('frontend-cp/mirage/factories/contact-address', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    address1: '30 Avenue',
    address2: '#320',
    city: 'Salinas',
    country: 'US',
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    postal_code: '93905',
    resource_type: 'contact_address',
    resource_url: 'http://novo/api/v1/users/5/contacts/addresses/5',
    state: 'CA',
    type: 'OTHER',
    updated_at: '2015-08-27T11:02:47Z'
  });

});
define('frontend-cp/mirage/factories/contact-website', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    resource_type: 'contact_website',
    resource_url: 'http://novo/api/v1/users/5/contacts/websites/5',
    updated_at: '2015-08-27T11:02:47Z',
    url: 'www.brewfictus.com'
  });

});
define('frontend-cp/mirage/factories/definition', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    field: ember_cli_mirage.faker.list.cycle('cases.subject', 'cases.casestatusid', 'cases.casetypeid'),
    type: function type(i) {
      if (this.field(i) === 'cases.subject') {
        return 'string';
      } else {
        return 'numeric';
      }
    },
    sub_type: function sub_type(i) {
      return this.type(i) === 'string' ? '' : 'integer';
    },
    operators: function operators(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return ['string_contains', 'string_does_not_contain'];
        case 'cases.casestatusid':
          return ['comparison_equalto', 'comparison_not_equalto', 'comparison_lessthan', 'comparison_greaterthan'];
        case 'cases.casetypeid':
          return ['comparison_equalto', 'comparison_not-equalto'];
      }
    },
    values: function values(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return '';
        case 'cases.casestatusid':
          return {
            '1': 'New',
            '2': 'Open',
            '3': 'Pending',
            '4': 'Completed',
            '5': 'Closed'
          };
        case 'cases.casetypeid':
          return {
            '1': 'Question',
            '2': 'Task',
            '3': 'Problem',
            '4': 'Incident'
          };
      }
    },
    resource_type: 'definition'
  });

});
define('frontend-cp/mirage/factories/event', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    uuid: function uuid(i) {
      return 'event-' + (i + 1);
    },
    subject: ember_cli_mirage.faker.lorem.sentence,
    body: ember_cli_mirage.faker.lorem.sentence,
    channel: 'event',
    participants: [],
    avatar_url: '',
    creator: { id: 5, resource_type: 'user' },
    properties: {},
    attachments: [],
    download_all: null,
    triggered_at: '2015-08-27T11:02:47Z',
    resource_type: 'event',
    contents: ember_cli_mirage.faker.lorem.sentence,
    created_at: ember_cli_mirage.faker.date.recent
  });

});
define('frontend-cp/mirage/factories/facebook-account', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    account_id: ember_cli_mirage.faker.random.number,
    is_enabled: true,
    resource_type: 'facebook_account',
    resource_url: 'http://novo/api/index.php?/v1/facebook/account/1',
    title: 'John Mathew',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });

});
define('frontend-cp/mirage/factories/facebook-page', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    uuid: 'fake-XXXX-default',
    is_enabled: true,
    page_id: ember_cli_mirage.faker.random.number,
    resource_type: 'facebook_page',
    resource_url: 'http://novo/api/index.php?/v1/facebook/page/1',
    route_messages: true,
    route_posts: true,
    title: 'HelpDesk Management System',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });

});
define('frontend-cp/mirage/factories/field-option', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    fielduuid: ember_cli_mirage.faker.list.cycle('fake-XXXX-1', 'fake-XXXX-2', 'fake-XXXX-3', 'fake-XXXX-4', 'fake-XXXX-5'),
    value: ember_cli_mirage.faker.hacker.verb,
    tag: ember_cli_mirage.faker.list.cycle('internet', 'connectivity', 'yes'),
    sort_order: ember_cli_mirage.faker.random.number,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'field_option'
  });

});
define('frontend-cp/mirage/factories/identity-autocomplete-email', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    'identity': {
      'id': function id(i) {
        return i + 1;
      },
      'resource_type': 'identity_email'
    },
    'parent': {
      'id': function id(i) {
        return i + 1;
      },
      'resource_type': 'user'
    }
  });

});
define('frontend-cp/mirage/factories/identity-domain', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    is_primary: true,
    domain: 'brew.com',
    is_validated: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'identity_domain',
    resource_url: 'http://novo/api/index.php?/v1/organizations/1/identities/domains/1'
  });

});
define('frontend-cp/mirage/factories/identity-email', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    is_primary: false,
    email: ember_cli_mirage.faker.internet.email,
    is_notification_enabled: ember_cli_mirage.faker.random.boolean,
    is_validated: ember_cli_mirage.faker.random.boolean,
    // created_at: '2015-07-23T13:36:12Z',
    // updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'identity_email',
    resource_url: 'http://novo/api/index.php?/v1/users/1/identities/emails/1'
  });

});
define('frontend-cp/mirage/factories/identity-facebook', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    facebook_id: ember_cli_mirage.faker.random.number,
    user_name: ember_cli_mirage.faker.internet.userName,
    full_name: ember_cli_mirage.faker.name.findName,
    email: function email(i) {
      return 'email' + i + '@example.com';
    },
    bio: 'Lorem ipsum dolor sit amet',
    birth_date: '03/09/1986',
    website: 'http://foo.bar',
    profile_url: function profile_url(i) {
      return 'http://facebook.com/user' + i;
    },
    locale: 'en',
    resource_type: 'identity_facebook',
    is_validated: true
  });

});
define('frontend-cp/mirage/factories/identity-phone', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    is_validated: false,
    number: function number(i) {
      return '+44 ' + (4928581320 + i);
    },
    resource_type: 'identity_phone',
    resource_url: 'http://novo/api/v1/users/5/identities/phones/4',
    type: 'NONE',
    updated_at: '2015-08-27T11:02:47Z'
  });

});
define('frontend-cp/mirage/factories/identity-twitter', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    twitter_id: ember_cli_mirage.faker.random.number,
    full_name: 'Robert J Cole',
    screen_name: ember_cli_mirage.faker.internet.userName,
    follower_count: 512,
    description: 'WAT',
    url: function url(i) {
      return 'http://twitter.com/twitterhandler' + i;
    },
    location: 'Denver, CO',
    profile_image_url: 'http://www.fillmurray.com/g/250/250',
    locale: 'en',
    resource_type: 'identity_twitter',
    is_validated: true
  });

});
define('frontend-cp/mirage/factories/language', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    locale: 'en-us',
    flag_icon: null,
    direction: 'LTR',
    is_enabled: true,
    statistics: {
      'uptodate': 0,
      'outdated': 0,
      'missing': 0
    },
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'language',
    resource_url: 'http://novo/api/index.php?/v1/languages/1'
  });

});
define('frontend-cp/mirage/factories/mailbox', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    uuid: '02a60873-8118-453c-8258-8f44029e657d',
    service: 'STANDARD',
    encryption: 'NONE',
    address: 'support@brewfictus.com',
    prefix: null,
    smtp_type: null,
    host: null,
    port: null,
    username: null,
    preserve_mails: false,
    brand: null, // polymorphic belongsTo
    is_default: false,
    is_enabled: true,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'mailbox',
    resource_url: 'http://novo/api/index.php?/v1/mailboxes/1'
  });

});
define('frontend-cp/mirage/factories/message-recipient', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    identity: { id: 2, resource_type: 'identity_email' },
    name: 'Caryn Pryor',
    resource_type: 'message_recipient',
    type: 'TO'
  });

});
define('frontend-cp/mirage/factories/metadata', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    custom: null,
    system: null,
    resource_type: 'metadata'
  });

});
define('frontend-cp/mirage/factories/organization', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    name: 'Brew',
    is_shared: false,
    domains: [],
    phone: [],
    addresses: [],
    websites: [],
    notes: [],
    pinned_notes_count: 0,
    tags: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'organization',
    resource_url: 'http://novo/api/index.php?/v1/organizations/1'
  });

});
define('frontend-cp/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    attachments: [],
    contents: ember_cli_mirage.faker.lorem.sentence,
    created_at: ember_cli_mirage.faker.date.recent,
    creator: { id: 5, resource_type: 'user' },
    download_all: null,
    identity: { id: 5, resource_type: 'identity_email' },
    original: { id: 1, resource_type: 'case_message' },
    resource_type: 'post',
    resource_url: 'http://novo/api/v1/cases/1/posts/1',
    sequence: function sequence(i) {
      return i + 1;
    }, // Sequence needs to be contiguous, used for sorting infinite scroll
    subject: 'Atmosphere Coffee, Inc annual maintenance',
    updated_at: '2015-08-27T11:02:47Z',
    uuid: function uuid(i) {
      return 'post-' + (i + 1);
    }
  });

});
define('frontend-cp/mirage/factories/predicate-collection', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    operator: 'OR',
    propositions: [],
    resource_type: 'predicate_collection'
  });

});
define('frontend-cp/mirage/factories/proposition', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    field: 'cases.assigneeteamid',
    operator: 'comparison_equalto',
    resource_type: 'proposition',
    value: function value(i) {
      return 'value' + i;
    }
  });

});
define('frontend-cp/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    title: 'Administrator',
    type: 'ADMIN', // Can be either ADMIN, AGENT, COLLABORATOR or CUSTOMER.
    ip_restriction: null,
    password_expires_in_days: ember_cli_mirage.faker.random.number,
    is_two_factor_required: false,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'role',
    resource_url: 'http://novo/api/index.php?/v1/roles/1'
  });

});
define('frontend-cp/mirage/factories/session', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    id: 'pPW6tnOyJG6TmWCVea175d1bfc5dbf073a89ffeb6a2a198c61aae941Aqc7ahmzw8a',
    portal: 'API',
    ip_address: ember_cli_mirage.faker.internet.ip,
    user_agent: ember_cli_mirage.faker.internet.userAgent,
    user: {},
    status: 'ONLINE',
    created_at: '2015-07-23T16:32:01Z',
    last_activity_at: '2015-07-23T16:32:22Z',
    resource_type: 'session'
  });

});
define('frontend-cp/mirage/factories/sla-metric', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    title: ember_cli_mirage.faker.list.cycle('FIRST_REPLY_TIME', 'RESOLUTION_TIME', 'NEXT_REPLY_TIME'),
    state: ember_cli_mirage.faker.list.cycle('ACTIVE', 'COMPLETED'),
    is_breached: ember_cli_mirage.faker.random.boolean,
    target_in_seconds: ember_cli_mirage.faker.random.number
  });

});
define('frontend-cp/mirage/factories/sla', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    title: 'Regular support and sales tickets',
    resource_type: 'sla'
  });

});
define('frontend-cp/mirage/factories/source-channel', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    resource_type: 'channel'
  });

});
define('frontend-cp/mirage/factories/status', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    resource_type: 'case_status'
  });

});
define('frontend-cp/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    name: ember_cli_mirage.faker.list.cycle('solution', 'status'),
    resource_type: 'tag'
  });

});
define('frontend-cp/mirage/factories/team', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    title: ember_cli_mirage.faker.list.cycle('Sales', 'Support', 'Finance', 'Human Resources'),
    businesshour: {},
    followers: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'team',
    resource_url: 'http://novo/api/index.php?/v1/teams/1'
  });

});
define('frontend-cp/mirage/factories/twitter-account', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    account_id: '3155953718',
    brand: {},
    created_at: '2015-08-05T06:13:59Z',
    is_enabled: true,
    is_public: true,
    resource_type: 'twitter_account',
    resource_url: 'http://novo/api/index.php?/v1/twitter/account/1',
    route_favorites: true,
    route_mentions: true,
    route_messages: true,
    screen_name: 'englisha938',
    updated_at: '2015-08-05T06:13:59Z',
    uuid: 'b63e731d-c88d-4d4a-ab1c-566f5c9edf7d'
  });

});
define('frontend-cp/mirage/factories/type', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    resource_type: 'case_type'
  });

});
define('frontend-cp/mirage/factories/user-field-value', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    field: {
      id: ember_cli_mirage.faker.random.number,
      resource_type: 'user_field'
    },
    value: '',
    resource_type: 'user_field_value'
  });

});
define('frontend-cp/mirage/factories/user-field', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    fielduuid: ember_cli_mirage.faker.random.uuid,
    type: ember_cli_mirage.faker.list.cycle('TEXT', 'TEXTAREA', 'CHECKBOX'),
    key: function key(i) {
      return 'key ' + i;
    },
    title: 'title here',
    is_visible_to_customers: true,
    customer_title: true,
    is_customer_editable: true,
    is_required_for_customers: true,
    description: null,
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    locales: [],
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'user_field',
    resource_url: 'http://novo/api/index.php?/v1/users/fields/1'
  });

});
define('frontend-cp/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, ember_cli_mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = ember_cli_mirage['default'].Factory.extend({
    full_name: function full_name() {
      return ember_cli_mirage.faker.name.firstName() + ' Murray';
    },
    designation: null,
    is_enabled: ember_cli_mirage.faker.random.boolean,
    role: null, // Note: This is a mandatory field fo being able to log in with a user
    // avatar: 'http://novo/index.php?/avatar/get/5dadfafe-ef84-5db9-91f5-d617d0f4e58b',
    avatar: 'http://fillmurray.com/100/100',
    teams: [],
    emails: [],
    phones: [],
    twitters: [],
    facebooks: [],
    external_identities: [],
    addresses: [],
    websites: [],
    custom_fields: [],
    metadata: {},
    tags: [],
    notes: [],
    pinned_notes_count: 0,
    followers: [],
    locale: 'en-us',
    time_zone: null,
    time_zone_offset: null,
    greeting: null,
    signature: null,
    status_message: null,
    access_level: null,
    password_updated_at: '2015-07-23T12:09:20Z',
    avatar_updated_at: null,
    activity_at: '2015-07-23T16:32:01Z',
    visited_at: '2015-07-23T16:32:01Z',
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T16:32:01Z',
    resource_type: 'user',
    resource_url: 'http://novo/api/index.php?/v1/users/1'
  });

});
define('frontend-cp/mirage/factories/view', ['exports', 'ember-cli-mirage'], function (exports, Mirage) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = Mirage['default'].Factory.extend({
    agent: null,
    case_count: -1,
    case_count_accuracy: 'UNKNOWN',
    columns: [],
    created_at: '2015-07-21T14:24:09Z',
    is_default: true,
    is_enabled: true,
    order_by: 'ASC',
    order_by_column: 'id',
    predicate_collections: [],
    resource_type: 'view',
    resource_url: 'http://novo/api/index.php?/v1/views/1',
    title: 'Inbox',
    updated_at: '2015-07-21T14:24:09Z',
    visibility_to_teams: [],
    visibility_type: 'ALL'
  });

});
define('frontend-cp/mirage/fixtures/en-us-strings', ['exports', 'npm:lodash', 'frontend-cp/locales/en-us/admin', 'frontend-cp/locales/en-us/cases', 'frontend-cp/locales/en-us/feed', 'frontend-cp/locales/en-us/generic', 'frontend-cp/locales/en-us/login', 'frontend-cp/locales/en-us/organisation', 'frontend-cp/locales/en-us/search', 'frontend-cp/locales/en-us/users'], function (exports, _, admin, cases, feed, generic, login, organisation, search, users) {

  'use strict';

  var locales = {
    admin: admin['default'],
    cases: cases['default'],
    feed: feed['default'],
    generic: generic['default'],
    login: login['default'],
    organisation: organisation['default'],
    search: search['default'],
    users: users['default']
  };

  exports['default'] = [{
    status: 200,
    data: _['default'].flatten(Object.keys(locales).map(function (fileKey) {
      return Object.keys(locales[fileKey]).map(function (stringKey) {
        return {
          id: 'frontend.api.' + fileKey + '.' + stringKey,
          value: locales[fileKey][stringKey],
          resource_type: 'locale_string'
        };
      });
    })),
    resource: 'locale_string'
  }];

});
define('frontend-cp/mirage/scenarios/default', ['exports'], function (exports) {

  'use strict';

  /*eslint-disable camelcase*/

  exports['default'] = function (server) {
    var businesshour = server.create('business-hour', { title: 'Default Business Hours' });
    var teams = server.createList('team', 4, { businesshour: businesshour });
    var role = server.create('role');

    var emails = [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { email: 'altenative@gmail.com', is_validated: true }), server.create('identity-email', { email: 'newemail@example.com', is_validated: false })];
    var phones = [server.create('identity-phone', { is_primary: true }), server.create('identity-phone')];
    var twitters = [server.create('identity-twitter', { is_primary: true }), server.create('identity-twitter')];
    var facebooks = [server.create('identity-facebook', { is_primary: true }), server.create('identity-facebook')];
    var custom_fields = server.createList('user-field-value', 3);
    var metadata = server.create('metadata');
    var defaultUser = server.create('user', {
      custom_fields: custom_fields,
      role: role,
      teams: teams,
      emails: emails,
      phones: phones,
      twitters: twitters,
      facebooks: facebooks,
      metadata: metadata
    });

    server.create('session', { user: defaultUser });

    server.create('user', {
      role: role,
      emails: [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { is_primary: false, is_validated: false })],
      phones: [
        // server.create('identity-phone', { is_primary: true }),
        // server.create('identity-phone')
      ],
      twitters: [
        // server.create('identity-twitter', { is_primary: true }),
        // server.create('identity-twitter')
      ],
      facebooks: [
        // server.create('identity-facebook', { is_primary: true }),
        // server.create('identity-facebook')
      ]
    });

    var identityEmail = server.create('identity-email');
    server.createList('user-field', 2);
    server.createList('field-option', 3);

    //ids have to match the predicate_collection ids.
    //Current ids are cycling and must match in
    //both predicate_collections and predicate_collection.
    //They are uuids in real life but i have changed them to integers
    //to make things easier.
    var columns = server.createList('column', 5);
    var propositions = server.createList('proposition', 2);
    var predicateCollections = server.createList('predicate-collection', 2, { propositions: propositions });

    server.create('view', {
      is_default: true,
      columns: columns,
      predicate_collections: predicateCollections
    });

    server.createList('definition', 3);

    var sourceChannel = server.create('source-channel');
    var assignee = server.create('assignee', { agent: defaultUser });
    var language = server.create('language');
    var brand = server.create('brand', { language: language });
    var status = server.create('status');
    var priority = server.create('case-priority');
    var type = server.create('type');
    var sla = server.create('sla');
    var slaMetrics = server.createList('sla-metric', 3);
    var tags = server.createList('tag', 2);
    var caseFields = server.createList('case-field', 14);
    var customFields = server.createList('case-field-value', 2, { field: caseFields[0] });
    server.createList('case', 4, {
      source_channel: sourceChannel,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee: assignee,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    server.createList('case', 1, {
      source_channel: null,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee: assignee,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    var mailbox = server.create('mailbox', { brand: brand });
    server.create('channel', {
      uuid: 1,
      account: mailbox
    });
    server.create('channel', {
      uuid: 2,
      type: 'TWITTER',
      account: server.create('mailbox', {
        uuid: 2,
        screen_name: 'testman',
        address: 'twittertest',
        brand: brand,
        account_id: 123
      })
    });
    var identityDomain = server.create('identity-domain');
    server.create('organization', {
      domains: [identityDomain],
      metadata: metadata
    });
    server.createList('identity-email', 10);
    server.createList('case-status', 5, {
      resource_url: function resource_url(i) {
        return 'http://novo/api/index.php?/v1/cases/statuses/' + ++i;
      }
    });
    server.createList('case-priority', 3);
    server.createList('case-type', 4, {
      resource_url: function resource_url(i) {
        return 'http://novo/api/index.php?/v1/cases/types/' + ++i;
      }
    });
    server.create('case-form', {
      fields: caseFields,
      brand: brand
    });

    server.create('facebook-account');
    server.create('twitter-account', {
      brand: brand
    });

    var caseMessage = server.create('case-message');

    // If possible this endpoint should implement pagination (plus limit) in order to behave
    // as it would in the real world app, to be able to use infinite scroll
    server.createList('post', 30, {
      uuid: function uuid(i) {
        return 'post-' + (i + 1);
      },
      creator: defaultUser,
      identity: identityEmail,
      original: caseMessage
    });

    server.createList('event', 5);
    server.createList('activity', 5);

    server.create('contact-address');
    server.create('contact-website');
    server.create('identity-phone');

    server.create('message-recipient', {
      identity: identityEmail
    });

    var userModels = server.createList('user', 10, {
      role: role,
      teams: teams,
      emails: emails,
      custom_fields: custom_fields,
      metadata: metadata
    });

    var identityEmailModels = server.createList('identity-email', 10, {
      email: function email(i) {
        return 'random-email-' + i + '@kayako-unreal.com';
      }
    });

    for (var i = 0; i < 10; i++) {
      server.create('identity-autocomplete-email', {
        'identity': {
          'id': identityEmailModels[i].id,
          'resource_type': 'identity_email'
        },
        'parent': {
          'id': userModels[i].id,
          'resource_type': 'user'
        }
      });
    }
  }

});
define('frontend-cp/mixins/autofocus', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    autofocusFirstField: Ember['default'].on('willInsertElement', function () {
      this.$('input,select,textarea,button,[tabindex]').not('[tabindex="-1"],[disabled]').eq(0).focus();
    })
  });

});
define('frontend-cp/mixins/breadcrumbable', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    urlService: Ember['default'].inject.service('url'),

    activeBreadcrumb: Ember['default'].computed('urlService.currentPath', 'breadcrumbs', function () {
      var breadcrumbs = this.get('breadcrumbs');
      if (!breadcrumbs) {
        return null;
      }
      var currentPath = this.get('urlService.currentPath');

      if (!currentPath) {
        return null;
      }

      var selected = breadcrumbs.find(function (breadcrumb) {
        return currentPath.indexOf(breadcrumb.route) === 0;
      });

      return selected ? selected.id : null;
    }),

    setBreadcrumb: function setBreadcrumb(id) {
      var breadcrumb = this.get('breadcrumbs').find(function (breadcrumb) {
        return breadcrumb.id === id;
      });
      this.transitionToRoute(breadcrumb.route);
    },

    actions: {
      breadcrumbChange: function breadcrumbChange(id) {
        this.setBreadcrumb(id);
      }
    }
  });

});
define('frontend-cp/mixins/change-aware-model', ['exports', 'ember', 'npm:lodash', 'ember-data'], function (exports, Ember, _, DS) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    initialRelationships: {},

    // build an array of all relationships whenever the model is loaded
    // so we can check against them to see if any have been added or removed
    getRelationships: function getRelationships() {
      var _this = this;

      var relationships = {};
      this.eachRelationship(function (name, meta) {
        if (meta.options.noCache) {
          return;
        }
        var relationship = _this.get(name);
        relationships[name] = null;

        if (relationship) {
          if (typeof relationship.forEach === 'function') {
            relationships[name] = [];
            relationship.forEach(function (relatedObject) {
              relationships[name].pushObject(relatedObject);
            });
          } else {
            relationships[name] = relationship;
          }
        }
      });
      return relationships;
    },

    cacheRelationships: function cacheRelationships() {
      this.set('initialRelationships', this.getRelationships());
    },

    getAttrs: function getAttrs() {
      var _this2 = this;

      var attrs = {};
      this.eachAttribute(function (name, meta) {
        attrs[name] = _this2.get(name);
      });
      return attrs;
    },

    cacheAttrs: function cacheAttrs() {
      this.set('initialAttrs', this.getAttrs());
    },

    initialize: Ember['default'].on('ready', function () {
      var _this3 = this;

      Ember['default'].run.next(function () {
        //TODO: Try to discover why this must be in a run loop
        // Without the run.next, the async promise resolves to null
        // With run.next, everything resolves perfectly.
        // there's some private API stuff `_updatingRecordArraysLater: true` which might be something?
        _this3.cacheRelationships();
        _this3.cacheAttrs();
      });
    }),

    reInitialize: Ember['default'].on('didUpdate', function () {
      var _this4 = this;

      Ember['default'].run(function () {
        _this4.cacheRelationships();
      });
    }),

    /*
     * Returns a promise if the relationship is async
     */
    hasDirtyBelongsToRelationship: function hasDirtyBelongsToRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];
      var currentRelationship = this.get(relationshipKey);

      if (!currentRelationship) {
        return false;
      }

      if (typeof currentRelationship.then === 'function') {
        // relationship is async - get both, wait for them to resolve and then compare
        return Ember['default'].RSVP.hash({
          currentRelationship: currentRelationship,
          initialRelationship: initialRelationship
        }).then(function (relationshipHash) {
          return relationshipHash.initialRelationship !== relationshipHash.currentRelationship;
        });
      }

      return initialRelationship !== currentRelationship;
    },

    hasDirtyHasManyRelationship: function hasDirtyHasManyRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];

      var currentRelationship = this.get(relationshipKey);

      if (!initialRelationship && currentRelationship) {
        return true;
      }

      if (initialRelationship.length !== currentRelationship.get('length')) {
        return true;
      }

      return currentRelationship.any(function (relationship, index) {
        return relationship !== initialRelationship[index];
      });
    },

    hasDirtyAttribute: function hasDirtyAttribute(attributeName) {
      var changedAttributes = Object.keys(this.changedAttributes());
      return changedAttributes.indexOf(attributeName) !== -1;
    },

    /*
     * Checks model for changed attributes, then
     * checks all model relationships for dirty attributes
     */
    hasDirtyChanges: function hasDirtyChanges() {
      return this.hasChangesToSelf() || this.hasNewOrDirtyRelations() || this.hasDeletedRelationships();
    },

    hasChangesToSelf: function hasChangesToSelf() {
      var _this5 = this;

      var changes = this.changedAttributes();

      // if there is no ID, and the only change is to a sort
      // order, we never want to mark this as dirty
      if (!this.get('id') && changes.sortOrder) {
        delete changes.sortOrder;
      }

      Object.keys(changes).forEach(function (changedAttributeName) {
        var changedAttribute = _this5.get(changedAttributeName);
        var diff = changes[changedAttributeName];

        // Fragment Arrays are not "relationships" so we have to check for equality here
        if (changedAttribute instanceof DS['default'].FragmentArray) {
          if (_this5.get(changedAttributeName) === _this5.get('_internalModel._data.' + changedAttributeName)) {
            delete changes[changedAttributeName];
            return;
          }
        }

        // undefined/null is equal to "" when editing forms etc.
        if (Array.isArray(diff) && !diff[0] && !diff[1]) {
          delete changes[changedAttributeName];
          return;
        }
      });

      return !_['default'].isEmpty(changes);
    },

    hasNewOrDirtyRelations: function hasNewOrDirtyRelations() {
      var _this6 = this;

      var initialRelationships = this.get('initialRelationships');
      var hasChanges = false;

      this.eachRelationship(function (name, descriptor) {
        if (descriptor.options.noCache) {
          return;
        }
        var relationshipObject = _this6.get(descriptor.key);

        if (descriptor.kind === 'hasMany') {
          relationshipObject.forEach(function (relationshipObj) {
            // only check if the relationship model has the change-aware mixin
            if (relationshipObject && typeof relationshipObj.hasDirtyChanges === 'function' && relationshipObj.hasDirtyChanges()) {
              hasChanges = true;
            }

            //check relation isn't a new addition
            if (initialRelationships[descriptor.key].indexOf(relationshipObj) === -1) {
              hasChanges = true;
            }
          });
        } else if (descriptor.kind === 'belongsTo') {
          var _relationshipObject = _this6.get(descriptor.key);

          // only check if the relationship model has the change-aware mixin
          if (_relationshipObject && typeof _relationshipObject.hasDirtyChanges === 'function') {
            if (_relationshipObject.hasDirtyChanges()) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    },

    hasDeletedRelationships: function hasDeletedRelationships() {
      var _this7 = this;

      var hasChanges = false;
      var initialRelationships = this.get('initialRelationships');

      Object.keys(initialRelationships).forEach(function (relationshipName) {
        if (hasChanges) {
          // we only need one change - exit early if we've found one
          return;
        }

        var currentRelatedObjects = _this7.get(relationshipName);

        if (currentRelatedObjects && typeof currentRelatedObjects.forEach === 'function') {
          // hasMany relationship
          initialRelationships[relationshipName].forEach(function (relatedObject) {
            if (currentRelatedObjects.indexOf(relatedObject) === -1) {
              hasChanges = true;
            }
          });
        } else {
          //belongsTo relationship
          if (currentRelatedObjects instanceof DS['default'].PromiseObject) {
            if (currentRelatedObjects.get('content') !== initialRelationships[relationshipName].get('content')) {
              hasChanges = true;
            }
          } else {
            if (currentRelatedObjects !== initialRelationships[relationshipName]) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    }
  });

});
define('frontend-cp/mixins/custom-field-serialization', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    serializeCustomFields: function serializeCustomFields(customFields) {
      var fieldValues = {};
      if (!customFields) {
        return fieldValues;
      }

      customFields.forEach(function (customField) {
        fieldValues[customField.get('field.key')] = customField.get('value');
      });

      return fieldValues;
    }
  });

});
define('frontend-cp/mixins/has-basic-identities', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    emails: DS['default'].hasMany('identity-email', { async: true, url: 'identities/emails' }),
    phones: DS['default'].hasMany('identity-phone', { async: true, url: 'identities/phones' }),
    twitters: DS['default'].hasMany('identity-twitter', { async: true, url: 'identities/twitter' }),
    facebooks: DS['default'].hasMany('identity-facebook', { async: true, url: 'identities/facebook' })
  });

});
define('frontend-cp/mixins/pusher-binding', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({
    pusher: Ember['default'].inject.service(),

    /*
     *  PUSHER_SUBSCRIPTIONS
     *  an object to store information about channel event subscriptions
     *  and which actions to call when they are hit:
     *
     *  PUSHER_SUBSCRIPTIONS: {
     *    chanel_name: {
     *      event_name: action_name
     *    }
     *  }
     */

    initializeSubscriptions: Ember['default'].on('init', function () {
      var _this = this;

      this._super();
      var pusherSubscriptions = this.get('PUSHER_SUBSCRIPTIONS');
      if (!pusherSubscriptions) {
        return;
      }

      var channels = Object.keys(pusherSubscriptions);

      channels.forEach(function (channelName) {
        var eventNames = Object.keys(pusherSubscriptions[channelName]);

        eventNames.forEach(function (eventName) {
          var actionName = pusherSubscriptions[channelName][eventName];
          _this.get('pusher').subscribeTo(channelName, eventName, _this, actionName);
        });
      });
    }),

    cleanUp: Ember['default'].on('willDestroy', function () {
      var _this2 = this;

      this._super();
      var pusherSubscriptions = this.get('PUSHER_SUBSCRIPTIONS');
      if (!pusherSubscriptions) {
        return;
      }

      var channels = Object.keys(pusherSubscriptions);
      channels.forEach(function (channelName) {
        var eventNames = Object.keys(pusherSubscriptions[channelName]);

        eventNames.forEach(function (eventName) {
          _this2.get('pusher').unsubscribeTo(channelName, eventName);
        });
      });
    })

  });

});
define('frontend-cp/mixins/simple-state', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Mixin.create({

    /**
     * An object tree representing all possible
     * states and their parent/child relationships
     * @type {Object}
     */
    stateMap: null,

    /**
     * The current state as a dot separated list
     * representing the state hierarchy
     * @type {String}
     */
    _currentState: '',

    /**
     * Read-only current state property
     * For most use cases use isInState, used mostly as a property
     * in computed properties to observe when state changes
     * @return {String} current state as a dot separated list representing the state hierarchy
     */
    currentState: Ember['default'].computed('_currentState', function () {
      return this.get('_currentState');
    }),

    /**
     * Sets the current state as a dot separated
     * list representing the desired state hierarchy
     * eg. 'root.session.foo'
     * Throws an error if the state is not available
     * in the stateMap object tree
     * @param {String} state Dot separated string of state hierarchy
     */
    setState: function setState(state) {
      if (this.get('stateMap.' + state)) {
        this.set('_currentState', state);
      } else {
        throw new Error('Invalid state: ' + state);
      }
    },

    /**
     * Returns true if you are in the current state, you must specify the currentState
     * in order force a call to this.get('currentState') in computed properties,
     * otherwise the computed property will not be called.
     * or any of its parent states
     * @param  {String}  state Dot separated string of state hierarchy
     * @param  {String}  currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    isInState: function isInState(state, currentState) {
      if (currentState === undefined) {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(state) === 0;
    },

    /**
     * Returns true if the last substate in the state string
     * is the leafState/s
     * @param  {String}  subState     Dot separated string of sub-state
     * @param  {String}  currentState currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    endsWithSubState: function endsWithSubState(subState, currentState) {
      if (currentState === undefined) {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(subState) === currentState.length - subState.length;
    },

    getStateAtLevel: function getStateAtLevel(level, currentState) {
      currentState = currentState || this.get('_currentState');
      return currentState.split('.')[level];
    }
  });

});
define('frontend-cp/models/access-log', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    user: DS['default'].belongsTo('user', { async: true, parent: true }),
    action: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/account', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('frontend-cp/models/action', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    action: DS['default'].attr('string'),
    field: DS['default'].attr('string'),
    oldValue: DS['default'].attr('string'),
    newValue: DS['default'].attr('string'),
    oldObject: DS['default'].attr(),
    newObject: DS['default'].attr()
  });

});
define('frontend-cp/models/activity-location', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    city: DS['default'].attr('string'),
    region: DS['default'].attr('string'),
    regionCode: DS['default'].attr('string'),
    areaCode: DS['default'].attr('string'),
    timeZone: DS['default'].attr('string'),
    organization: DS['default'].attr('string'),
    netSpeed: DS['default'].attr('string'),
    country: DS['default'].attr('string'),
    countryCode: DS['default'].attr('string'),
    postalCode: DS['default'].attr('string'),
    latitude: DS['default'].attr('string'),
    longitude: DS['default'].attr('string'),
    metroCode: DS['default'].attr('string'),
    isp: DS['default'].attr('string')
  });

});
define('frontend-cp/models/activity-object', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    name: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    prefix: DS['default'].attr('string'),
    url: DS['default'].attr('string'),
    fullTitle: DS['default'].attr('string'),
    image: DS['default'].attr('string'),
    preposition: DS['default'].attr('string'),

    // TODO fix when relationship support lands to ember-data.model-fragments
    // original: DS.belongsTo('any', { async: true }),
    originalFragment: DS['default'].hasOneFragment('relationship-fragment'),
    original: Ember['default'].computed('originalFragment.relationshipId', function () {
      return this.store.peekRecord(this.get('originalFragment.relationshipType'), this.get('originalFragment.relationshipId'));
    })
  });

});
define('frontend-cp/models/activity', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    actor: DS['default'].hasOneFragment('activity-object'),
    verb: DS['default'].attr('string'),
    summary: DS['default'].attr('string'),
    actions: DS['default'].hasMany('action'),
    object: DS['default'].hasOneFragment('activity-object'),
    objectActor: DS['default'].hasOneFragment('activity-object'),
    location: DS['default'].hasOneFragment('activity-location'),
    place: DS['default'].hasOneFragment('activity-object'),
    target: DS['default'].hasOneFragment('activity-object'),
    result: DS['default'].hasOneFragment('activity-object'),
    inReplyTo: DS['default'].hasOneFragment('activity-object'),
    participant: DS['default'].hasOneFragment('activity-object'),
    portal: DS['default'].attr('string'),
    weight: DS['default'].attr('number'),
    ipAddress: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date'),

    'case': DS['default'].belongsTo('case', { async: true, parent: true }),

    plainTextSummary: Ember['default'].computed('summary', function () {
      return this.get('summary').replace(/<.*?\|(.*?)>/g, '$1');
    })
  });

});
define('frontend-cp/models/app', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    version: DS['default'].attr('string'),
    author: DS['default'].attr('string'),
    authorEmail: DS['default'].attr('string'),
    shortDescription: DS['default'].attr('string'),
    longDescription: DS['default'].attr('string'),
    visibility: DS['default'].attr('string'),
    installable: DS['default'].attr('boolean'),
    installed: DS['default'].attr('boolean'),
    smallIcon: DS['default'].attr('string'),
    largeIcon: DS['default'].attr('string'),
    // categories: TODO what they are?
    defaultLocale: DS['default'].attr('string'),
    productVersion: DS['default'].attr('string')

    // TODO action: install
    // TODO action: upgrade
    // TODO action: uninstall
  });

});
define('frontend-cp/models/attachment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    size: DS['default'].attr('number'),
    width: DS['default'].attr('number'), // TODO should exist on attachment within posts/:id
    height: DS['default'].attr('number'), // TODO should exist on attachment within posts/:id
    type: DS['default'].attr('string'), // TODO should exist on attachment within posts/:id
    url: DS['default'].attr('string'), // TODO should exist on attachment within posts/:id
    urlDownload: DS['default'].attr('string'), // TODO should exist on attachment within posts/:id
    thumbnails: DS['default'].hasManyFragments('thumbnail'),
    createdAt: DS['default'].attr('date'), // TODO should exist on attachment within posts/:id

    // Virtual parent field
    message: DS['default'].belongsTo('case-message', { async: true, parent: true })
  });

});
define('frontend-cp/models/brand', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    url: DS['default'].attr('string'),
    language: DS['default'].belongsTo('language', { async: false }),
    isEnabled: DS['default'].attr('boolean')
  });

});
define('frontend-cp/models/business-hour', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string', { async: false }),
    //zones: DS.hasMany('zone'),
    holidays: DS['default'].hasMany('holiday', { async: false }),
    teams: DS['default'].hasMany('team', { async: false }),
    createdAt: DS['default'].attr('date', { async: false }),
    updatedAt: DS['default'].attr('date', { async: false })
  });

});
define('frontend-cp/models/case-assignee', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, Ember, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend(ChangeAwareModel['default'], {
    teamFragment: DS['default'].hasOneFragment('relationship-fragment'),

    team: Ember['default'].computed('teamFragment', 'teamFragment.relationshipId', function () {
      return this.store.getById('team', this.get('teamFragment.relationshipId'));
    }),

    agentFragment: DS['default'].hasOneFragment('relationship-fragment'),
    agent: Ember['default'].computed('agentFragment', function () {
      return this.store.getById('user', this.get('agentFragment.relationshipId'));
    })
  });

});
define('frontend-cp/models/case-field-value', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('case-field', { async: true }),
    fieldFragment: DS['default'].hasOneFragment('relationship-fragment'),
    field: Ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('case-field', this.get('fieldFragment.relationshipId'));
    }),

    value: DS['default'].attr('string')
  });

});
define('frontend-cp/models/case-field', ['exports', 'ember-data', 'frontend-cp/models/field'], function (exports, DS, Field) {

  'use strict';

  exports['default'] = Field['default'].extend({
    isRequiredForAgents: DS['default'].attr('boolean'),
    isRequiredOnResolution: DS['default'].attr('boolean'),

    isCustomerEditable: DS['default'].attr('boolean'),
    isRequiredForCustomers: DS['default'].attr('boolean'),
    isSystem: DS['default'].attr('boolean')
  });

});
define('frontend-cp/models/case-form', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    title: DS['default'].attr('string'),
    customerTitle: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    isVisibleToCustomers: DS['default'].attr('boolean'),
    isEnabled: DS['default'].attr('boolean'),
    isDefault: DS['default'].attr('boolean'),
    sortOrder: DS['default'].attr('number'),
    fields: DS['default'].hasMany('case-field', { async: false }),
    brand: DS['default'].belongsTo('brand', { async: false }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/case-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    subject: DS['default'].attr('string'),
    bodyText: DS['default'].attr('string'),
    bodyHtml: DS['default'].attr('string'),
    recipients: DS['default'].hasMany('message-recipient', { async: false }),
    fullname: DS['default'].attr('string'),
    email: DS['default'].attr('string'),
    creator: DS['default'].belongsTo('user', { async: false }),
    identity: DS['default'].belongsTo('identity', { async: false }),
    mailbox: DS['default'].belongsTo('mailbox', { async: false }),
    attachments: DS['default'].hasMany('attachment', { async: false }),
    location: DS['default'].belongsTo('location', { async: false }),
    // metadata: DS...
    creationMode: DS['default'].attr('string'),
    locale: DS['default'].attr('string'),
    responseTime: DS['default'].attr('number'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    // Parent field
    'case': DS['default'].belongsTo('case', { async: true, parent: true }),

    postType: 'message'
  });

});
define('frontend-cp/models/case-note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    subject: DS['default'].attr('string'),
    contents: DS['default'].attr('string'),
    isPinned: DS['default'].attr('boolean'),
    color: DS['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: DS['default'].belongsTo('user', { async: false }),
    identity: DS['default'].belongsTo('identity', { async: false }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    'case': DS['default'].belongsTo('case', { async: false, parent: true }),
    note: DS['default'].belongsTo('note', { async: false }),
    post: DS['default'].belongsTo('post', { async: true })
  });

});
define('frontend-cp/models/case-priority', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    label: DS['default'].attr('string'),
    level: DS['default'].attr('number'),
    color: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/case-reply-options', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    cc: DS['default'].attr('string')
  });

});
define('frontend-cp/models/case-reply', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    contents: DS['default'].attr('string'),
    channelType: DS['default'].attr('string'),
    channel: DS['default'].belongsTo('account', { async: false }),
    inReplyToUuid: DS['default'].attr('string'),
    options: DS['default'].hasOneFragment('case-reply-options'),
    // options[bcc]
    // options[markdown]
    // options[send_link]
    status: DS['default'].belongsTo('case-status', { async: false }),
    priority: DS['default'].belongsTo('case-priority', { async: false }),
    caseType: DS['default'].belongsTo('case-type', { async: false }),
    assigneeTeam: DS['default'].belongsTo('team', { async: false }),
    assigneeAgent: DS['default'].belongsTo('user', { async: false }),
    tags: DS['default'].attr('string'),
    fieldValues: DS['default'].hasManyFragments('case-field-value'),
    // _filename: DS.belongsTo('?'),

    attachmentFileIds: DS['default'].attr('string'),

    'case': DS['default'].belongsTo('case', { async: true, parent: true }),
    posts: DS['default'].hasMany('post', { async: true })
  });

});
define('frontend-cp/models/case-status', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    label: DS['default'].attr('string'),
    color: DS['default'].attr('string'),
    statusType: DS['default'].attr('string'),
    visibility: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/case-type', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    label: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/case', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    assignee: DS['default'].hasOneFragment('case-assignee', { defaultValue: {} }),
    maskId: DS['default'].attr('string'),
    subject: DS['default'].attr('string'),
    portal: DS['default'].attr('string'),
    sourceChannel: DS['default'].belongsTo('channel', { async: false }),
    requester: DS['default'].belongsTo('user', { async: false }),
    creator: DS['default'].belongsTo('user', { async: false }),
    identity: DS['default'].belongsTo('identity', { polymorphic: true, async: false }),
    sla: DS['default'].belongsTo('sla', { async: false }),
    slaMetrics: DS['default'].hasManyFragments('sla-metric'),
    assignedBy: DS['default'].belongsTo('user', { async: false }),
    brand: DS['default'].belongsTo('brand', { async: false }),
    status: DS['default'].belongsTo('case-status', { async: false }),
    priority: DS['default'].belongsTo('case-priority', { async: false }),
    caseType: DS['default'].belongsTo('case-type', { async: false }),
    tags: DS['default'].hasMany('tag', { async: false }),
    form: DS['default'].belongsTo('case-form', { async: false }),
    customFields: DS['default'].hasManyFragments('case-field-value', { defaultValue: [] }),
    // metadata // TODO nested json
    lastReplier: DS['default'].belongsTo('user', { async: false }),
    lastReplierIdentity: DS['default'].belongsTo('identity', { async: false }),
    creationMode: DS['default'].attr('string'),
    state: DS['default'].attr('string'),
    totalPosts: DS['default'].attr('number'),
    hasNotes: DS['default'].attr('boolean'),
    hasAttachments: DS['default'].attr('boolean'),
    rating: DS['default'].attr('number'),
    ratingStatus: DS['default'].attr('string'),
    assignDueAt: DS['default'].attr('date'),
    replyDueAt: DS['default'].attr('date'),
    resolutionDueAt: DS['default'].attr('date'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),
    lastAgentActivityAt: DS['default'].attr('date'),
    lastCustomerActivityAt: DS['default'].attr('date'),
    lastCompletedAt: DS['default'].attr('date'),
    realtimeChannel: DS['default'].attr('string'),

    // Children fields
    notes: DS['default'].hasMany('case-note', { async: true, child: true, noCache: true }),
    messages: DS['default'].hasMany('case-message', { async: true, child: true, noCache: true }),
    posts: DS['default'].hasMany('post', { async: true, child: true, noCache: true }),
    channels: DS['default'].hasMany('channel', { async: true, child: true, url: 'channels', noCache: true }),
    activities: DS['default'].hasMany('activity', { async: true, child: true, url: 'activities', noCache: true }),
    replyChannels: DS['default'].hasMany('channel', { async: true, child: true, url: 'reply/channels', noCache: true }),
    reply: DS['default'].hasMany('case-reply', { async: true, child: true, noCache: true }),
    //participants: DS.hasMany('user', { async: true, child: true, url: 'participants', noCache: true }),

    // Parent field
    view: DS['default'].belongsTo('view', { async: true, parent: true }),

    // Creation Fields
    contents: DS['default'].attr('string'),
    channel: DS['default'].attr('string'),
    channelId: DS['default'].attr('number'),

    saveWithNote: function saveWithNote(contents) {
      var note = this.get('store').createRecord('case-note', {
        contents: contents,
        'case': this
      });

      return note.save();
    },

    saveWithPost: function saveWithPost(contents, channel, attachmentIds, options) {
      var _this = this;

      var account = channel.get('account');
      var channelType = channel.get('channelType');
      var reply = this.get('store').createRecord('case-reply', {
        'case': this,
        channel: account,
        channelType: channelType,
        contents: contents,
        options: this.get('store').createFragment('case-reply-options', options),
        status: this.get('status'),
        caseType: this.get('caseType'),
        priority: this.get('priority'),
        fieldValues: [],
        tags: this.get('tags').map(function (tag) {
          return tag.get('name');
        }).join(','),
        attachmentFileIds: attachmentIds
      });

      reply.get('case.customFields').forEach(function (customField) {
        reply.get('fieldValues').createFragment({
          fieldFragment: _this.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value') === '' ? null : customField.get('value')
        });
      });
      return reply.save().then(function (caseReply) {
        _this.cacheRelationships();
        return caseReply;
      });
    },

    cacheRelationships: function cacheRelationships() {
      this._super();

      /*
       * customFields are fragments so we need to cache these
       * separately
       */
      var initialCustomFields = {};
      this.get('customFields').forEach(function (caseField) {
        initialCustomFields[caseField.get('field.id')] = caseField.get('value');
      });

      this.set('initialCustomFields', initialCustomFields);
    },

    hasDirtyHasManyRelationship: function hasDirtyHasManyRelationship(relationshipKey) {
      if (relationshipKey !== 'tags') {
        return this._super(relationshipKey);
      }

      /*
       * TAGS is a special case - the equality depends on the
       * tag name, rather than the tag entity (when we add tags,
       * the server decides which entity our tag name resolves to - we
       * don't care)
       */
      var initialRelationships = this.get('initialRelationships');
      var initialTags = initialRelationships.tags || [];
      var currentTags = this.get('tags') || [];

      if (initialTags.length !== currentTags.length) {
        return true;
      }

      return currentTags.any(function (tag, index) {
        return tag.get('name') !== initialTags[index].get('name');
      });
    }
  });

});
define('frontend-cp/models/channel', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    channelType: DS['default'].attr('string'),
    charaterLimit: DS['default'].attr('number'),
    account: DS['default'].belongsTo('account', { polymorphic: true, async: false }),

    isChannelTypeMailbox: Ember['default'].computed('channelType', function () {
      return this.get('channelType') === 'MAILBOX';
    }),

    iconClass: Ember['default'].computed('channelType', {
      get: function get() {
        var channelType = this.get('channelType');

        switch (channelType) {
          case 'MAILBOX':
            {
              return 'i-inbox';
            }
          case 'FACEBOOK':
            {
              return 'i-facebook';
            }
          case 'TWITTER':
            {
              return 'i-twitter';
            }
        }
      }
    }),

    handle: Ember['default'].computed('channelType', {
      get: function get() {
        var channelType = this.get('channelType');
        switch (channelType) {
          case 'MAILBOX':
            {
              return this.get('account.address');
            }
          case 'FACEBOOK':
            {
              return this.get('account.title');
            }
          case 'TWITTER':
            {
              return this.get('account.screenName');
            }
        }
      }
    }),

    message: Ember['default'].computed('channelType', {
      get: function get() {
        var channelType = this.get('channelType');
        var handle = this.get('handle');

        switch (channelType) {
          case 'MAILBOX':
            {
              return 'Reply via Email (' + handle + ')';
            }
          case 'FACEBOOK':
            {
              return 'Reply via Facebook (' + handle + ')';
            }
          case 'TWITTER':
            {
              return 'Reply via Twitter (' + handle + ')';
            }
        }
      }
    }),

    label: Ember['default'].computed('handle', {
      get: function get() {
        var handle = this.get('handle');

        return handle || 'Reply';
      }
    })
  });

});
define('frontend-cp/models/chat', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, DS, Account) {

  'use strict';

  exports['default'] = Account['default'].extend({
    agent: DS['default'].belongsTo('user', { async: true }),
    brand: DS['default'].belongsTo('brand', { async: false }),
    createdAt: DS['default'].attr('date'),
    creator: DS['default'].belongsTo('user', { async: true }),
    email: DS['default'].attr('string'),
    isProactive: DS['default'].attr('boolean'),
    lastactivityAt: DS['default'].attr('date'),
    name: DS['default'].attr('string'),
    startedAt: DS['default'].attr('date'),
    status: DS['default'].attr('string'),
    subject: DS['default'].attr('string'),
    team: DS['default'].belongsTo('team', { async: true }),
    token: DS['default'].attr('string'),
    uuid: DS['default'].attr('string'),
    waitTime: DS['default'].attr('number')
  });

});
define('frontend-cp/models/column-fragment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    name: DS['default'].attr('string')
  });

});
define('frontend-cp/models/column', ['exports', 'ember-data', 'ember'], function (exports, DS, Ember) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: Ember['default'].computed.alias('id')
  });

});
define('frontend-cp/models/contact-address', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    isPrimary: DS['default'].attr('boolean', { defaultValue: false }),
    address1: DS['default'].attr('string'),
    address2: DS['default'].attr('string'),
    city: DS['default'].attr('string'),
    state: DS['default'].attr('string'),
    postalCode: DS['default'].attr('string'), // TODO maybe integer?
    country: DS['default'].attr('string'), // TODO should be country code
    type: DS['default'].attr('string', { defaultValue: 'OTHER' }),

    parent: DS['default'].belongsTo('has-addresses', { async: true, polymorphic: true, parent: true })
  });

});
define('frontend-cp/models/contact-website', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    isPrimary: DS['default'].attr('boolean', { defaultValue: false }),
    url: DS['default'].attr('string'),

    parent: DS['default'].belongsTo('has-websites', { async: true, polymorphic: true, parent: true })
  });

});
define('frontend-cp/models/definition-value-fragment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    value: DS['default'].attr(),
    string: DS['default'].attr('string')
  });

});
define('frontend-cp/models/definition', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    definitionType: DS['default'].attr('string'),
    subType: DS['default'].attr('string'),
    operators: DS['default'].attr('array'),
    values: DS['default'].hasManyFragments('definition-value-fragment') //can be an empty string or an object with keys as value and properties as text
  });

});
define('frontend-cp/models/event', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    subject: DS['default'].attr('string'),
    body: DS['default'].attr('string'),
    channel: DS['default'].attr('string'),
    participants: DS['default'].hasMany('users'),
    avatarUrl: DS['default'].attr('string'),
    creator: DS['default'].belongsTo('user', { parent: true }),
    // properties: [],
    attachments: DS['default'].hasMany('attachment'),
    downloadAll: DS['default'].attr('string'),
    triggeredAt: DS['default'].attr('date'),
    createdAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/facebook-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, DS, Account) {

  'use strict';

  exports['default'] = Account['default'].extend({
    accountId: DS['default'].attr('string'),
    title: DS['default'].attr('string'),
    isEnabled: DS['default'].attr('boolean', { defaultValue: true }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/facebook-comment', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    postType: 'facebookComment'
  });

});
define('frontend-cp/models/facebook-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    postType: 'facebookMessage'
  });

});
define('frontend-cp/models/facebook-page', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string')
  });

});
define('frontend-cp/models/facebook-post', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    postType: 'facebookPost'
  });

});
define('frontend-cp/models/field-option', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    fielduuid: DS['default'].attr('string'),
    value: DS['default'].attr('string'),
    tag: DS['default'].attr('string'),
    sortOrder: DS['default'].attr('number'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    parent: DS['default'].belongsTo('field', { polymorphic: true, async: true, parent: true, noCache: true }),

    markedForDeletion: DS['default'].attr('boolean', { defaultValue: false })
  });

});
define('frontend-cp/models/field', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, Ember, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    fielduuid: DS['default'].attr('string'),
    fieldType: DS['default'].attr('string'),
    key: DS['default'].attr('string'),
    title: DS['default'].attr('string', { defaultValue: '' }),
    customerTitle: DS['default'].attr('string', { defaultValue: '' }),
    description: DS['default'].attr('string', { defaultValue: '' }),

    isVisibleToCustomers: DS['default'].attr('boolean'),
    isEnabled: DS['default'].attr('boolean', { defaultValue: true }),
    isRequired: DS['default'].attr('boolean'),

    regularExpression: DS['default'].attr('string'),
    sortOrder: DS['default'].attr('number'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    isChoiceField: Ember['default'].computed('fieldType', function () {
      switch (this.get('fieldType')) {
        case 'RADIO':
        case 'CHECKBOX':
        case 'CASCADINGSELECT':
        case 'SELECT':
          return true;

        default:
          return false;
      }
    }),

    options: DS['default'].hasMany('field-option', { child: true, async: false, url: 'options', inverse: 'parent' })
  });

});
define('frontend-cp/models/has-addresses', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    addresses: DS['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' })
  });

});
define('frontend-cp/models/has-slack-identities', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    slack: DS['default'].hasMany('identity-slack', { async: true })
  });

});
define('frontend-cp/models/has-websites', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    websites: DS['default'].hasMany('contact-website', { async: true })
  });

});
define('frontend-cp/models/holiday', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    date: DS['default'].attr('date'),
    openHours: DS['default'].attr() //array http://stackoverflow.com/a/26107853
  });

});
define('frontend-cp/models/identity-autocomplete-email', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    identity: DS['default'].belongsTo('identity-email'),

    parent: DS['default'].belongsTo('has-basic-identities', { async: true, polymorphic: true })
  });

});
define('frontend-cp/models/identity-domain', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, DS, Identity) {

  'use strict';

  exports['default'] = Identity['default'].extend({
    domain: DS['default'].attr('string'),

    parent: DS['default'].belongsTo('organization', { async: true, polymorphic: true, parent: true })
  });

});
define('frontend-cp/models/identity-email', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, DS, Identity) {

  'use strict';

  exports['default'] = Identity['default'].extend({
    email: DS['default'].attr('string'),
    isNotificationEnabled: DS['default'].attr('string'),

    // Relations
    parent: DS['default'].belongsTo('has-basic-identities', { async: true, polymorphic: true, parent: true }) // User or Organization
  });

});
define('frontend-cp/models/identity-facebook', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, DS, Identity) {

  'use strict';

  exports['default'] = Identity['default'].extend({
    facebookId: DS['default'].attr('string'),
    userName: DS['default'].attr('string'),
    fullName: DS['default'].attr('string'),
    email: DS['default'].attr('string'),
    bio: DS['default'].attr('string'),
    birthDate: DS['default'].attr('date'),
    website: DS['default'].attr('string'),
    profileUrl: DS['default'].attr('string'),
    locale: DS['default'].attr('string'),
    verified: DS['default'].attr('boolean'),
    // Relations
    parent: DS['default'].belongsTo('has-basic-identities', { async: true, polymorphic: true, parent: true }),

    // CPs
    canBeVerified: false
  });

});
define('frontend-cp/models/identity-phone', ['exports', 'ember', 'ember-data', 'frontend-cp/models/identity'], function (exports, Ember, DS, Identity) {

  'use strict';

  var computed = Ember['default'].computed;

  exports['default'] = Identity['default'].extend({
    number: DS['default'].attr('string'),
    type: DS['default'].attr('string'),

    // Relations
    parent: DS['default'].belongsTo('has-basic-identities', { async: true, polymorphic: true, parent: true }),

    // CPs
    canBeVerified: false,
    canBePrimarized: computed.not('isPrimary')
  });

});
define('frontend-cp/models/identity-slack', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, DS, Identity) {

  'use strict';

  exports['default'] = Identity['default'].extend({
    userName: DS['default'].attr('string'),

    parent: DS['default'].belongsTo('user', { async: true, polymorphic: true, parent: true })
    //parent: DS.belongsTo('has-slack-identities', { async: true, polymorphic: true, parent: true })
  });

});
define('frontend-cp/models/identity-twitter', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, DS, Identity) {

  'use strict';

  exports['default'] = Identity['default'].extend({
    twitterId: DS['default'].attr('string'),
    fullName: DS['default'].attr('string'),
    screenName: DS['default'].attr('string'),
    followerCount: DS['default'].attr('number'),
    description: DS['default'].attr('string'),
    url: DS['default'].attr('string'),
    location: DS['default'].attr('string'),
    profileImageUrl: DS['default'].attr('string'),
    locale: DS['default'].attr('string'),
    verified: DS['default'].attr('boolean'),

    // Relations
    parent: DS['default'].belongsTo('has-basic-identities', { async: true, polymorphic: true, parent: true }),

    // CPs
    canBeVerified: false
  });

});
define('frontend-cp/models/identity', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  var computed = Ember['default'].computed;

  exports['default'] = DS['default'].Model.extend({
    isPrimary: DS['default'].attr('boolean'),
    isValidated: DS['default'].attr('boolean'),

    // CPs
    canBeRemoved: computed.not('isPrimary'),
    canBeVerified: computed.not('isValidated'),
    canBeModified: computed.or('canBeVerified', 'canBeRemoved', 'canBePrimarized'),
    canBePrimarized: computed('isPrimary', 'isValidated', function () {
      return !this.get('isPrimary') && this.get('isValidated');
    })
  });

});
define('frontend-cp/models/language-statistics', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    uptodate: DS['default'].attr('number'),
    outdated: DS['default'].attr('number'),
    missing: DS['default'].attr('number')
  });

});
define('frontend-cp/models/language', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    locale: DS['default'].attr('string'),
    flagIcon: DS['default'].attr('string'),
    direction: DS['default'].attr('string'),
    isEnabled: DS['default'].attr('boolean'),
    statistics: DS['default'].hasOneFragment('language-statistics'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/link', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    label: DS['default'].attr('string'),
    object: DS['default'].belongsTo('object', { polymorphic: true, async: false })
  });

});
define('frontend-cp/models/locale-string', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    value: DS['default'].attr('string'),

    locale: DS['default'].belongsTo('locale', { async: true, parent: true })
  });

});
define('frontend-cp/models/locale', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    nativeName: DS['default'].attr('string'),
    region: DS['default'].attr('string'),
    nativeRegion: DS['default'].attr('string'),
    script: DS['default'].attr('string'),
    variant: DS['default'].attr('string'),
    direction: DS['default'].attr('string'),
    isEnabled: DS['default'].attr('boolean'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    strings: DS['default'].hasMany('locale-string', { async: true, child: true, url: 'strings' })
  });

});
define('frontend-cp/models/location', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    city: DS['default'].attr('string'),
    region: DS['default'].attr('string'),
    regionCode: DS['default'].attr('string'),
    areaCode: DS['default'].attr('string'),
    timeZone: DS['default'].attr('string'),
    organization: DS['default'].attr('string'),
    netSpeed: DS['default'].attr('string'),
    country: DS['default'].attr('string'),
    countryCode: DS['default'].attr('string'),
    postalCode: DS['default'].attr('string'),
    latitude: DS['default'].attr('string'),
    longitude: DS['default'].attr('string'),
    metroCode: DS['default'].attr('string'),
    isp: DS['default'].attr('string')
  });

});
define('frontend-cp/models/macro-assignee', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    type: DS['default'].attr('string'), //UNASSIGNED, CURRENT_AGENT, TEAM, AGENT

    teamFragment: DS['default'].hasOneFragment('relationship-fragment'),
    team: Ember['default'].computed('teamFragment.relationshipId', function () {
      return this.store.getById('team', this.get('teamFragment.relationshipId'));
    }),

    agentFragment: DS['default'].hasOneFragment('relationship-fragment'),
    agent: Ember['default'].computed('agentFragment.relationshipId', function () {
      return this.store.getById('user', this.get('agentFragment.relationshipId'));
    })
  });

});
define('frontend-cp/models/macro-properties', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    typeFragment: DS['default'].hasOneFragment('relationship-fragment'),
    macroType: Ember['default'].computed('typeFragment.relationshipId', function () {
      return this.store.getById('case-type', this.get('typeFragment.relationshipId'));
    }),

    statusFragment: DS['default'].hasOneFragment('relationship-fragment'),
    status: Ember['default'].computed('statusFragment.relationshipId', function () {
      return this.store.getById('case-status', this.get('statusFragment.relationshipId'));
    }),

    priorityFragment: DS['default'].hasOneFragment('relationship-fragment'),
    priority: Ember['default'].computed('priorityFragment.relationshipId', function () {
      return this.store.getById('case-priority', this.get('priorityFragment.relationshipId'));
    }),

    priorityAction: DS['default'].attr('string')
  });

});
define('frontend-cp/models/macro-tag', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    type: DS['default'].attr('string')
  });

});
define('frontend-cp/models/macro-visibility', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    type: DS['default'].attr('string'), // ALL, TEAM, PRIVATE
    status: DS['default'].belongsTo('status', { async: false }),
    priority: DS['default'].belongsTo('priority', { async: false })
  });

});
define('frontend-cp/models/macro', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    replyContents: DS['default'].attr('string'),
    replyType: DS['default'].attr('string'), // REPLY | NOTE
    agent: DS['default'].belongsTo('user', { async: false }),
    tags: DS['default'].hasMany('macro-tag', { async: false }),
    assignee: DS['default'].hasOneFragment('macro-assignee'),
    properties: DS['default'].hasOneFragment('macro-properties'),
    visibility: DS['default'].hasOneFragment('macro-visibility')
  });

});
define('frontend-cp/models/mailbox', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, DS, Account) {

  'use strict';

  exports['default'] = Account['default'].extend({
    service: DS['default'].attr('string'),
    encryption: DS['default'].attr('string'),
    address: DS['default'].attr('string'),
    prefix: DS['default'].attr('string'),
    smtpType: DS['default'].attr('string'),
    host: DS['default'].attr('string'),
    port: DS['default'].attr('number'),
    username: DS['default'].attr('string'),
    preserveMails: DS['default'].attr('boolean'),
    brand: DS['default'].belongsTo('brand', { async: false }),
    isDefault: DS['default'].attr('boolean'),
    isEnabled: DS['default'].attr('boolean')
  });

});
define('frontend-cp/models/message-recipient', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('frontend-cp/models/note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    bodyText: DS['default'].attr('string'),
    bodyHtml: DS['default'].attr('string'),
    color: DS['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    isPinned: DS['default'].attr('boolean'),

    user: DS['default'].belongsTo('user', { async: false }),
    'case': DS['default'].belongsTo('case', { async: true, parent: true }),

    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    postType: 'note'
  });

});
define('frontend-cp/models/oauth-link', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('frontend-cp/models/object', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    icon: DS['default'].hasMany('attachment', { async: false }),
    createdAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/organization-field-value', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('organization-field', { async: true }),
    fieldFragment: DS['default'].hasOneFragment('relationship-fragment'),
    field: Ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('organization-field', this.get('fieldFragment.relationshipId'));
    }),

    value: DS['default'].attr('string')
  });

});
define('frontend-cp/models/organization-field', ['exports', 'frontend-cp/models/field'], function (exports, Field) {

	'use strict';

	exports['default'] = Field['default'].extend({});

});
define('frontend-cp/models/organization', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model', 'frontend-cp/mixins/has-basic-identities'], function (exports, DS, Ember, ChangeAwareModel, HasBasicIdentities) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], Ember['default'].Evented, HasBasicIdentities['default'], {
    name: DS['default'].attr('string'),
    isShared: DS['default'].attr('boolean'),
    brand: DS['default'].belongsTo('brand', { async: true }),
    addresses: DS['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' }),
    websites: DS['default'].hasMany('contact-website', { async: true, url: 'contacts/websites' }),
    notes: DS['default'].hasMany('note', { async: true }),
    pinned: DS['default'].attr('number'),
    tags: DS['default'].hasMany('tag', { async: false }),
    customFields: DS['default'].hasManyFragments('organization-field-value'),
    fieldValues: DS['default'].hasManyFragments('user-field-value', { defaultValue: [] }), // write only
    followers: DS['default'].hasMany('user', { async: true, inverse: null }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    // Shadow children fields
    domains: DS['default'].hasMany('identity-domain', { async: false })
  });

});
define('frontend-cp/models/permission', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    name: DS['default'].attr('string'),
    value: DS['default'].attr('boolean')
  });

});
define('frontend-cp/models/post', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    uuid: DS['default'].attr('string'),
    sequence: DS['default'].attr('number'),
    subject: DS['default'].attr('string'),
    contents: DS['default'].attr('string'),
    creator: DS['default'].belongsTo('user', { async: false }),
    identity: DS['default'].belongsTo('identity', { async: false }),
    attachments: DS['default'].hasMany('attachment', { async: true }),
    downloadAll: DS['default'].attr('string'),
    original: DS['default'].belongsTo('postable', { async: true, polymorphic: true }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    // Virtual parent field
    'case': DS['default'].belongsTo('case', { async: true, parent: true })
  });

});
define('frontend-cp/models/postable', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('frontend-cp/models/predicate-collection', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    operator: DS['default'].attr('string', { 'default': 'OR' }),
    propositions: DS['default'].hasManyFragments('proposition')
  });

});
define('frontend-cp/models/proposition', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    field: DS['default'].attr('string'),
    operator: DS['default'].attr('string'),
    value: DS['default'].attr('string')
  });

});
define('frontend-cp/models/rating', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    score: DS['default'].attr('string'),
    comment: DS['default'].attr('string'),
    'case': DS['default'].belongsTo('case'),
    creator: DS['default'].belongsTo('user'),
    createdAt: DS['default'].attr('date')

  });

});
define('frontend-cp/models/relationship-fragment', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    relationshipId: DS['default'].attr('string'),
    relationshipType: DS['default'].attr('string')
  });

});
define('frontend-cp/models/role', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    roleType: DS['default'].attr('string'),
    permissions: DS['default'].hasMany('permission', { child: true, async: true, url: 'permissions' })
  });

});
define('frontend-cp/models/search-result-group', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    totalCount: DS['default'].attr('number'),
    results: DS['default'].hasManyFragments('search-result')
  });

});
define('frontend-cp/models/search-result', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    objectId: DS['default'].attr('number'),
    title: DS['default'].attr('string'),
    snippet: DS['default'].attr('string'),
    resource: DS['default'].attr('string')
  });

});
define('frontend-cp/models/session', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    portal: DS['default'].attr('string'),
    ipAddress: DS['default'].attr('string'),
    userAgent: DS['default'].attr('string'),
    user: DS['default'].belongsTo('user', { async: false }),
    status: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date'),
    lastActivityAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/sla-metric', ['exports', 'ember', 'ember-data', 'moment'], function (exports, Ember, DS, moment) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    title: DS['default'].attr('string'),
    state: DS['default'].attr('string'), //COMPLETED | PAUSED | ACTIVE
    isBreached: DS['default'].attr('boolean'),
    remainingSeconds: DS['default'].attr('number'),
    totalSeconds: DS['default'].attr('number'),
    timeTakenSeconds: DS['default'].attr('number'),

    status: Ember['default'].computed('isBreached', 'isCompleted', 'hasLessThan20PercentRemaining', function () {
      // OK | OPEN | WARNING | BREACHED
      if (this.get('isBreached')) {
        return 'BAD';
      }
      if (this.get('isCompleted')) {
        return 'GOOD';
      }
      if (this.get('hasLessThan20PercentRemaining')) {
        return 'WARNING';
      }
      return 'OPEN';
    }),

    isCompleted: Ember['default'].computed('state', function () {
      return this.get('state') === 'COMPLETED';
    }),

    hasLessThan20PercentRemaining: Ember['default'].computed('remainingSeconds', 'totalSeconds', function () {
      var percentageLeft = 100 * this.get('remainingSeconds') / this.get('totalSeconds');
      return percentageLeft < 20;
    }),

    numberOfWholeDaysRemaining: Ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(moment['default'].duration(timeInSeconds, 'seconds').days());
    }),

    numberOfWholeHoursRemaining: Ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(moment['default'].duration(timeInSeconds, 'seconds').hours());
    }),

    numberOfWholeMinutesRemaining: Ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(moment['default'].duration(timeInSeconds, 'seconds').minutes());
    })
  });

});
define('frontend-cp/models/sla', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    description: DS['default'].attr('string'),
    isEnabled: DS['default'].attr('boolean'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/tab', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Object.extend({

    /**
     * Tab base URL
     * Path to the tab's 'home' page.
     * This is used to check whether a page falls within this tab's remit.
     * @type {[type]}
     */
    baseUrl: null,

    /**
     * Tab URL
     * Path to the page that's currently displayed in the tab.
     * This will either be the `baseUrl` or one of its descendant URLs.
     * @type {string}
     */
    url: null,

    /**
     * Tab label
     * @type {string}
     */
    label: null,

    /**
     * Whether the tab is currently selected
     * @type {boolean}
     */
    selected: false,

    /**
     * UI state object
     * Ember object containing UI state related to this tab
     * @type {Object}
     */
    state: null
  });

});
define('frontend-cp/models/tag', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    name: DS['default'].attr('string')
  });

});
define('frontend-cp/models/team', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    title: DS['default'].attr('string'),
    businesshour: DS['default'].belongsTo('business-hour', { async: false }),
    followers: DS['default'].hasMany('user', { async: false }),
    members: DS['default'].hasMany('user', { async: true, child: true, inverse: 'teams', url: 'members' })
  });

});
define('frontend-cp/models/thumbnail', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    name: DS['default'].attr('string'),
    size: DS['default'].attr('number'),
    width: DS['default'].attr('number'),
    height: DS['default'].attr('number'),
    thumbnailType: DS['default'].attr('string'),
    url: DS['default'].attr('string'),
    createdAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/twitter-account-callback', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    oauthToken: DS['default'].attr('string'),
    oauthVerifier: DS['default'].attr('string'),

    account: DS['default'].belongsTo('twitter-account')
  });

});
define('frontend-cp/models/twitter-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, DS, Account) {

  'use strict';

  exports['default'] = Account['default'].extend({
    twitterId: DS['default'].attr('string'),
    screenName: DS['default'].attr('string'),
    brand: DS['default'].belongsTo('brand', { async: false }),
    routeMentions: DS['default'].attr('boolean'),
    routeMessages: DS['default'].attr('boolean'),
    routeFavorites: DS['default'].attr('boolean'),
    isPublic: DS['default'].attr('boolean'),
    isEnabled: DS['default'].attr('boolean'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/twitter-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    postType: 'twitterMessage'
  });

});
define('frontend-cp/models/twitter-tweet', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, DS, Postable) {

  'use strict';

  exports['default'] = Postable['default'].extend({
    uuid: DS['default'].attr('string'),
    postType: 'twitterTweet'
  });

});
define('frontend-cp/models/user-field-value', ['exports', 'ember', 'ember-data'], function (exports, Ember, DS) {

  'use strict';

  exports['default'] = DS['default'].ModelFragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('user-field', { async: true }),
    fieldFragment: DS['default'].hasOneFragment('relationship-fragment'),
    field: Ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('user-field', this.get('fieldFragment.relationshipId'));
    }),

    value: DS['default'].attr('string')
  });

});
define('frontend-cp/models/user-field', ['exports', 'ember-data', 'frontend-cp/models/field'], function (exports, DS, Field) {

  'use strict';

  exports['default'] = Field['default'].extend({
    isCustomerEditable: DS['default'].attr('boolean')
  });

});
define('frontend-cp/models/user', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model', 'frontend-cp/mixins/has-basic-identities'], function (exports, DS, Ember, ChangeAwareModel, HasBasicIdentities) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], HasBasicIdentities['default'], {
    fullName: DS['default'].attr('string'),
    designation: DS['default'].attr('string'),
    alias: DS['default'].attr('string'),
    isEnabled: DS['default'].attr('boolean'),
    role: DS['default'].belongsTo('role', { async: false }),
    avatar: DS['default'].attr('string'),
    organization: DS['default'].belongsTo('organization', { async: true }),
    teams: DS['default'].hasMany('team', { async: false }),
    addresses: DS['default'].hasMany('contact-address', { async: true, url: 'contacts/addresses' }),
    websites: DS['default'].hasMany('contact-website', { async: true, url: 'contacts/websites' }),
    customFields: DS['default'].hasManyFragments('user-field-value', { defaultValue: [] }),
    fieldValues: DS['default'].hasManyFragments('user-field-value', { defaultValue: [] }), // write only
    tags: DS['default'].hasMany('tag', { async: false }),
    notes: DS['default'].hasMany('note', { child: true, url: 'notes', async: true, noCache: true }),
    accessLevel: DS['default'].attr('string', { defaultValue: 'SELF' }),
    locale: DS['default'].attr('string'),
    timeZone: DS['default'].attr('string'),
    timeZoneOffset: DS['default'].attr('number'),
    greeting: DS['default'].attr('string'),
    signature: DS['default'].attr('string'),
    statusMessage: DS['default'].attr('string'),
    passwordUpdateAt: DS['default'].attr('date'),
    avatarUpdateAt: DS['default'].attr('date'),
    activityAt: DS['default'].attr('date'),
    visitedAt: DS['default'].attr('date'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    // Shadow children fields
    accesslogs: DS['default'].hasMany('access-log', { async: true, child: true, noCache: true }),
    slack: DS['default'].hasMany('identity-slack', { async: true, child: true, url: 'identities/slack', noCache: true }),
    events: DS['default'].hasMany('event', { async: true, child: true, inverse: 'creator', noCache: true }),
    recentCases: DS['default'].hasMany('case', { async: true, child: true, inverse: 'requester', noCache: true }),

    save: function save() {
      var _this = this;

      this.get('customFields').forEach(function (customField) {
        _this.get('fieldValues').createFragment({
          fieldFragment: _this.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value') === '' ? null : customField.get('value')
        });
      });

      return this._super();
    },

    primaryEmail: Ember['default'].computed('emails.@each.isPrimary', function () {
      var emails = this.get('emails');
      var primaryEmail = emails.filter(function (email) {
        return email.get('isPrimary');
      }).get('firstObject');

      return primaryEmail ? primaryEmail : emails.get('firstObject');
    }),

    primaryEmailAddress: Ember['default'].computed('primaryEmail', function () {
      return this.get('primaryEmail.email');
    })
  });

});
define('frontend-cp/models/view-count', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    view: DS['default'].belongsTo('view'),
    count: DS['default'].attr('number'),
    caseCountAccuracy: DS['default'].attr('string'),
    realtimeChannel: DS['default'].attr('string')
  });

});
define('frontend-cp/models/view', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, Ember, DS, ChangeAwareModel) {

  'use strict';

  exports['default'] = DS['default'].Model.extend(ChangeAwareModel['default'], {
    title: DS['default'].attr('string'),
    agent: DS['default'].belongsTo('user', { async: false }),
    visibilityType: DS['default'].attr('string'), // ALL | TEAM
    visibilityToTeams: DS['default'].hasMany('team', { async: false }),
    columns: DS['default'].hasMany('column', { async: false }),
    predicateCollections: DS['default'].hasMany('predicate-collection', { defaultValue: [], async: false }),
    orderByColumn: DS['default'].attr('string', { defaultValue: null }),
    viewCount: DS['default'].belongsTo('view-count', { async: true }),
    orderBy: DS['default'].attr('string'),
    sortOrder: DS['default'].attr('number'),
    isEnabled: DS['default'].attr('boolean'),
    isDefault: DS['default'].attr('boolean'),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date'),

    // Children fields
    cases: DS['default'].hasMany('case', { async: true, child: true, url: 'cases', noCache: true }),

    visibilityString: Ember['default'].computed('visibilityType', 'visibilityToTeams', function () {
      if (this.get('visibilityType') === 'ALL') {
        return 'ALL';
      }
      return this.get('visibilityToTeams').map(function (team) {
        return team.get('title');
      }).join(', ');
    })
  });

});
define('frontend-cp/models/vote', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Model.extend({
    type: DS['default'].attr('string'),
    user: DS['default'].belongsTo('user', { async: false }),
    createdAt: DS['default'].attr('date'),
    updatedAt: DS['default'].attr('date')
  });

});
define('frontend-cp/models/zone', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].Model.extend({});

});
define('frontend-cp/router', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, Ember, config) {

  'use strict';

  Ember['default'].Router.reopen({
    urlDidChange: Ember['default'].on('didTransition', function () {
      var urlService = this.get('container').lookup('service:url');
      urlService.set('currentUrl', this.get('url'));
    })
  });

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  Router.map(function () {
    // path has to stay '/' otherwise everything will break — similar path
    // is already defined by the session. Looks like the router doesn't
    // rely on NFA...
    this.route('login', { path: '/' }, function () {
      this.route('agent', { path: '/agent/login' });
      this.route('admin', { path: '/admin/login' });
    });

    this.route('session', { path: '' }, function () {
      this.route('styleguide', { path: '/styleguide' });

      this.route('test', { path: '/test' }, function () {
        this.route('entry', { path: '/:entry_id' });
      });

      this.route('agent', function () {
        this.route('cases', { path: '/cases' }, function () {
          this.route('case', { path: '/:case_id' }, function () {
            this.route('notes');
            this.route('organisation');
            this.route('user');
          });
        });
        this.route('users', { path: '/users' }, function () {
          this.route('user', { path: '/:user_id' }, function () {
            this.route('organisation');
          });
        });
        this.route('organisations', { path: '/organisations' }, function () {
          this.route('organisation', { path: '/:organisation_id' }, function () {});
        });
      });

      this.route('admin', function () {
        this.route('manage', function () {
          this.route('views', function () {
            this.route('edit', { path: '/:view_id' });
            this.route('new', { path: '/new' });
          });
          this.route('case-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:case_field_id' });
          });

          this.route('case-forms', function () {
            this.route('new');
            this.route('edit', { path: '/:case_form_id' });
          });
        });

        this.route('people', function () {
          this.route('teams', function () {
            this.route('new');
            this.route('edit', { path: '/:team_id' });
          });

          this.route('user-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:user_field_id' });
          });

          this.route('organization-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:organization_field_id' });
          });
        });

        this.route('channels', function () {
          this.route('twitter', function () {
            this.route('edit', { path: '/:account_id' });
            this.route('link');
          });
        });
      });
    });
  });

  exports['default'] = Router;

});
define('frontend-cp/routes/abstract/tabbed-route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    tabsService: Ember['default'].inject.service('tabs'),
    /**
     * Whether the route should open in its own tab
     * @type {boolean}
     */
    isTabbedRoute: true,

    /**
     * Tab model allocated to this route
     * (assigned in the `tabs` initializer)
     * @type {Tab}
     */
    tab: null,

    getTabLabel: function getTabLabel(model) {
      // Override this method to set the tab label
      return null;
    },

    setTabLabel: function setTabLabel(label) {
      this.get('tabsService').updateTab(this.get('tab'), 'label', label);
    },

    setTabUrl: function setTabUrl(url) {
      this.get('tabsService').updateTab(this.get('tab'), 'url', url);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
    }
  });

});
define('frontend-cp/serializers/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, Ember, DS, _) {

  'use strict';

  var get = Ember['default'].get;
  var merge = Ember['default'].merge;
  var inject = Ember['default'].inject;
  var pluralize = Ember['default'].String.pluralize;

  exports['default'] = DS['default'].RESTSerializer.extend({
    primaryRecordKey: 'data',
    sideloadedRecordsKey: 'resources',

    intlService: inject.service('intl'),

    normalizePayload: function normalizePayload(payload) {
      if (!payload) {
        return {};
      }

      if (_['default'].isNumber(payload.status)) {
        delete payload.status;
      }

      if (payload.logs) {
        delete payload.logs;
      }

      var data = payload[this.primaryRecordKey];
      if (data) {
        this.extractData(data, payload);
        delete payload[this.primaryRecordKey];
      }

      var sideloaded = payload[this.sideloadedRecordsKey];
      if (sideloaded) {
        var relationships = this.extractSideloaded(sideloaded);
        delete payload[this.sideloadedRecordsKey];
        merge(payload, relationships);
      }

      delete payload.resource;
      return payload;
    },

    extractData: function extractData(data, payload) {
      if (Ember['default'].isArray(data)) {
        this.extractArrayData(data, payload);
      } else {
        this.extractSingleData(data, payload);
      }
    },

    /**
     * Extract top-level "data" containing a single primary data
     *
     * @param {Object[]} data - data
     * @param {Object[]} payload - payload
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[data.resource_type] = data;
      this.extractItem(data, data.resource_type);
    },

    /**
     * @param {Object[]} data - data
     * @param {String} typeKey - type of the item being extracted
     * @return {Object} data — data extracted
     */
    extractItem: function extractItem(data, typeKey) {
      this.extractRelationships(data);
      var store = get(this, 'store');
      var type = store.modelFor(typeKey);
      if (!data.links) {
        data.links = {};
      }

      type.eachRelationship(function (name, relationship) {
        // If relationship is defined as a child...
        if (relationship.options.child) {
          // ...use `url` property to fetch children
          if (relationship.options.url) {
            data.links[name] = relationship.options.url;
            /// ...or in its absence use default path for relationship's model
          } else {
              var childAdapter = store.adapterFor(relationship.type);
              data.links[name] = childAdapter.pathForType(relationship.type);
            }
        }
      });

      delete data.resource_type;
      return data;
    },

    /**
     * Extract top-level "data" containing a single primary data
     *
     * @param {Object[]} data - data
     * @param {Object[]} payload - payload
     */
    extractArrayData: function extractArrayData(data, payload) {
      var _this = this;

      data.forEach(function (item) {
        return _this.extractItem(item, payload.resource);
      });
      payload[payload.resource] = data;
    },

    /**
     * Extract top-level "included" containing associated objects
     *
     * @param {Object} sideloaded - sideloaded
     * @return {Object} An object with the normalized sideloaded records with pluralized keys
     */
    extractSideloaded: function extractSideloaded(sideloaded) {
      var _this2 = this;

      var models = {};

      _['default'].each(sideloaded, function (resources, type) {
        var collectionName = pluralize(type);
        models[collectionName] = [];
        _['default'].each(resources, function (resource) {
          // TODO remove || type — this is a temporary fix
          type = resource.resource_type || type;
          models[collectionName].push(_this2.extractItem(resource, type));
        });
      });
      return models;
    },

    extractMeta: function extractMeta(store, typeClass, payload) {
      if (!payload.meta) {
        payload.meta = {};
      }
      if (payload.total_count !== undefined) {
        payload.meta.total = payload.total_count;
        delete payload.total_count;
      }
      if (payload.offset !== undefined) {
        payload.meta.offset = payload.offset;
        delete payload.offset;
      }
      if (payload.limit !== undefined) {
        payload.meta.limit = payload.limit;
        delete payload.limit;
      }
      this._super.apply(this, arguments);
    },

    extractFindHasMany: function extractFindHasMany() {
      return this._super.apply(this, arguments);
    },

    extractRelationships: function extractRelationships(resource) {
      _['default'].each(resource, function (value, key) {
        if (value && value.id && value.resource_type) {
          resource[key] = {
            id: value.id,
            type: value.resource_type
          };
        } else if (_['default'].isArray(value)) {
          resource[key] = value.map(function (v) {
            if (v.id && v.resource_type) {
              return {
                id: v.id,
                type: v.resource_type
              };
            } else {
              return v;
            }
          });
        }
      });
    },

    extractErrors: function extractErrors(store, typeClass, payload, id) {
      var _this3 = this;

      var errorCodes = ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'];

      var errorMessages = _['default'].zipObject(errorCodes.map(function (error) {
        return [error, 'generic.error.' + error.toLowerCase()];
      }));

      var isValidationError = function isValidationError(error) {
        return errorCodes.includes(error.code);
      };

      var messageForError = function messageForError(error) {
        return _this3.get('intlService').findTranslationByKey(errorMessages[error.code]).translation;
      };

      if (payload && typeof payload === 'object' && payload.errors) {
        var _ret = (function () {
          var errors = {};
          payload.errors.forEach(function (error) {
            if (isValidationError(error)) {
              errors[error.parameter] = errors[error.parameter] || [];
              errors[error.parameter].push(messageForError(error));
            }
          });
          _this3.normalizeErrors(typeClass, errors);
          return {
            v: errors
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        return payload;
      }
    },

    keyForAttribute: function keyForAttribute(key /*, method*/) {
      return Ember['default'].String.underscore(key);
    },

    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        return Ember['default'].String.underscore(key) + (relationship === 'belongsTo' ? '_id' : '');
      } else {
        return Ember['default'].String.underscore(key);
      }
    },

    serializeIntoHash: function serializeIntoHash(hash, type, snapshot, options) {
      merge(hash, this.serialize(snapshot, options));
    }
  });

});
define('frontend-cp/serializers/avatar', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      base64Data: { key: 'data' },
      avatarType: { key: 'type' },
      url: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });

});
define('frontend-cp/serializers/case-assignee', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      teamFragment: { key: 'team' },
      agentFragment: { key: 'agent' }
    }
  });

});
define('frontend-cp/serializers/case-field-type', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].JSONSerializer.extend({});

});
define('frontend-cp/serializers/case-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });

});
define('frontend-cp/serializers/case-field', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({

    attrs: {
      fieldType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/case-form', ['exports', 'ember', 'frontend-cp/serializers/application'], function (exports, Ember, ApplicationSerializer) {

  'use strict';

  /*eslint-disable camelcase */
  exports['default'] = ApplicationSerializer['default'].extend({
    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        if (relationship === 'belongsTo') {
          return Ember['default'].String.underscore(key) + '_id';
        }
        if (relationship === 'hasMany' && key === 'fields') {
          //TODO: make generic and move back into application serializers
          return 'case_field_ids';
        }
      }

      return Ember['default'].String.underscore(key);
    },

    serialize: function serialize(snapshot, options) {

      var json = this._super.apply(this, arguments);

      /*
       * Pull case field ids, ordered by sort order as a comma separated list
       */
      json.case_field_ids = snapshot.hasMany('fields') //eslint-disable-line camelcase
      .sortBy('sortOrder').map(function (field) {
        return field.get('id');
      }).toString();
      return json;
    }
  });

});
define('frontend-cp/serializers/case-reply', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, ApplicationSerializer, CustomFieldSerializationMixin) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend(CustomFieldSerializationMixin['default'], {
    attrs: {
      channelType: { key: 'channel' },
      caseType: { key: 'type_id' },
      'case': { serialize: false },
      post: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.field_values = this.serializeCustomFields(snapshot.attr('fieldValues')); //eslint-disable-line camelcase

      return json;
    }
  });

});
define('frontend-cp/serializers/case-status', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      statusType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/case', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, ApplicationSerializer, CustomFieldSerializationMixin) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend(CustomFieldSerializationMixin['default'], {
    attrs: {
      caseType: { key: 'type' }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase

      var assignee = snapshot.attr('assignee');
      json.assignee_agent_id = assignee.get('agentFragment.relationshipId'); // eslint-disable-line camelcase
      json.assignee_team_id = assignee.get('teamFragment.relationshipId'); // eslint-disable-line camelcase
      json.type_id = json.type; // eslint-disable-line camelcase

      // api wait for type_id field
      json.type_id = parseInt(json.type);
      delete json.type;

      // create comma separated list of tag names
      json.tags = snapshot.hasMany('tags').map(function (tag) {
        return tag.get('name');
      }).join(',');
      return json;
    }
  });

});
define('frontend-cp/serializers/channel', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'uuid',
    attrs: {
      channelType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/column', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'name'
  });

});
define('frontend-cp/serializers/definition', ['exports', 'frontend-cp/serializers/application', 'npm:lodash'], function (exports, ApplicationSerializer, _) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'field',
    attrs: {
      definitionType: { key: 'type' }
    },

    // Turning an object of type {key => value} into array [{id: key, value: value}]
    extractItem: function extractItem(data) {
      data = this._super.apply(this, arguments);
      data.values = _['default'].map(data.values, function (val, id) {
        return {
          value: id,
          string: val
        };
      });
      return data;
    }
  });

});
define('frontend-cp/serializers/event', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'uuid'
  });

});
define('frontend-cp/serializers/facebook-account', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      accountId: { serialize: false },
      title: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });

});
define('frontend-cp/serializers/field-option', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      markedForDeletion: { serialize: false }
    }
  });

});
define('frontend-cp/serializers/identity-autocomplete-email', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  /*eslint-disable camelcase */

  exports['default'] = ApplicationSerializer['default'].extend({
    normalizePayload: function normalizePayload(payload) {
      if (!payload.data) {
        return this._super(payload);
      }

      // set parent model for identity record
      payload.data.forEach(function (record) {
        var type = record.identity.resource_type;
        var id = record.identity.id;

        var item = payload.resources[type][id];

        item.parent = {
          id: record.parent.id,
          resource_type: record.parent.resource_type
        };
      });

      return this._super(payload);
    },

    extractArrayData: function extractArrayData(data, payload) {
      var _this = this;

      var resourceType = 'identity_autocomplete_email';

      data.forEach(function (item) {
        item.id = item.identity.id;
        item.resource_type = resourceType;
      });

      data.forEach(function (item) {
        return _this.extractItem(item, resourceType);
      });
      payload[resourceType] = data;
    }
  });

});
define('frontend-cp/serializers/locale', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'locale'
  });

});
define('frontend-cp/serializers/macro-assignee', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      teamFragment: { key: 'team' },
      agentFragment: { key: 'agent' }
    }
  });

});
define('frontend-cp/serializers/macro-properties', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      typeFragment: { key: 'type' },
      statusFragment: { key: 'status' },
      priorityFragment: { key: 'priority' }
    }
  });

});
define('frontend-cp/serializers/note', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      uuid: { serialize: false },
      subject: { serialize: false },
      creator: { serialize: false },
      identity: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      'case': { serialize: false }
    }
  });

});
define('frontend-cp/serializers/oauth-link', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    primaryKey: 'link',

    /*
     * This isn't a model in a traditional sense, the the model doesn't come with
     * resource_type
     *
     * pull it from the payload instead
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[payload.resource] = data;
      this.extractItem(data, payload.resource);
    }
  });

});
define('frontend-cp/serializers/organization-field-type', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].JSONSerializer.extend({});

});
define('frontend-cp/serializers/organization-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });

});
define('frontend-cp/serializers/organization-field', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      fieldType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/organization', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, ApplicationSerializer, CustomFieldSerializationMixin) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend(CustomFieldSerializationMixin['default'], {
    attrs: {
      emails: { serialize: false },
      phones: { serialize: false },
      twitter: { serialize: false },
      facebook: { serialize: false },
      addresses: { serialize: false },
      websites: { serialize: false },
      notes: { serialize: false },
      customFields: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.domains = snapshot.hasMany('domains').map(function (domain) {
        return domain.get('domain');
      }).uniq().toString();

      json.tags = snapshot.hasMany('tags').getEach('name').toString();
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase

      return json;
    }
  });

});
define('frontend-cp/serializers/predicate-collection', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      id: { key: 'uuid' }
    }
  });

});
define('frontend-cp/serializers/relationship-fragment', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      relationshipId: { key: 'id' },
      relationshipType: { key: 'resource_type' }
    }
  });

});
define('frontend-cp/serializers/role', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      roleType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/search-result-group', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({

    primaryKey: 'resource',

    normalizePayload: function normalizePayload(resource) {
      if (resource.resource === 'object') {
        resource.resource = 'search-result-group';
      }

      return this._super(resource);
    }
  });

});
define('frontend-cp/serializers/search-result', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      objectId: { key: 'id' }
    }
  });

});
define('frontend-cp/serializers/tag', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      name: { serialize: false }
    }
  });

});
define('frontend-cp/serializers/thumbnail', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      thumbnailType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/twitter-account-callback', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      account: { serialize: false }
    },

    /*
     * This isn't a model in a traditional sense, the the model doesn't come with
     * resource_type
     *
     * pull it from the payload instead
     */
    extractSingleData: function extractSingleData(data, payload) {
      payload[payload.resource] = data;
      this.extractItem(data, payload.resource);
    }
  });

});
define('frontend-cp/serializers/twitter-account', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      twitterId: { serialize: false },
      screenName: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });

});
define('frontend-cp/serializers/user-field-type', ['exports', 'ember-data'], function (exports, DS) {

	'use strict';

	exports['default'] = DS['default'].JSONSerializer.extend({});

});
define('frontend-cp/serializers/user-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      fieldFragment: { key: 'field' }
    }
  });

});
define('frontend-cp/serializers/user-field', ['exports', 'frontend-cp/serializers/application'], function (exports, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend({
    attrs: {
      fieldType: { key: 'type' }
    }
  });

});
define('frontend-cp/serializers/user', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, ApplicationSerializer, CustomFieldSerializationMixin) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend(CustomFieldSerializationMixin['default'], {
    attrs: {
      avatar: { serialize: false },
      emails: { serialize: false },
      phones: { serialize: false },
      twitters: { serialize: false },
      facebooks: { serialize: false },
      addresses: { serialize: false },
      website: { serialize: false },
      customFields: { serialize: false },
      notes: { serialize: false },
      passwordUpdateAt: { serialize: false },
      avatarUpdateAt: { serialize: false },
      activityAt: { serialize: false },
      visitedAt: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      teams: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.email = getPrimaryEmailAddress(snapshot);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase

      if (Object.keys(json.field_values).length === 0) {
        delete json.field_values;
      }

      // create comma separated list of tag names
      json.tags = snapshot.hasMany('tags').map(function (tag) {
        return tag.get('name');
      }).join(',');

      // The API does not want team_ids if user is a customer...
      if (json.role_id !== '4') {
        json.team_ids = snapshot.hasMany('teams').map(function (team) {
          return team.get('id');
        }).join(',');
      }

      return json;

      function getPrimaryEmailAddress(snapshot) {
        return snapshot.hasMany('emails').filter(function (identityEmail) {
          return identityEmail.get('isPrimary');
        }).map(function (identityEmail) {
          return identityEmail.get('email');
        })[0] || null;
      }
    }
  });

});
define('frontend-cp/serializers/view', ['exports', 'ember-data', 'frontend-cp/serializers/application'], function (exports, DS, ApplicationSerializer) {

  'use strict';

  exports['default'] = ApplicationSerializer['default'].extend(DS['default'].EmbeddedRecordsMixin, {

    attrs: {
      updatedAt: { serialize: false },
      createdAt: { serialize: false },
      columns: { embedded: 'always' }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.columns = snapshot.hasMany('columns').map(function (column) {
        return column.get('name');
      });

      /* Collections look *nothing* like how they are received */
      json.predicate_collections = snapshot.hasMany('predicateCollections').map(function (collection) {
        // eslint-disable-line camelcase
        return collection.get('propositions').map(function (proposition) {
          return {
            field: proposition.get('field'),
            operator: proposition.get('operator'),
            value: proposition.get('value')
          };
        });
      });
      return json;
    }
  });

});
define('frontend-cp/services/case-timeline-cache', ['exports', 'ember', 'npm:lodash'], function (exports, Ember, _) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Promise = Ember['default'].RSVP.Promise;
  var defaultPostCount = 10;

  exports['default'] = Ember['default'].Service.extend({
    store: Ember['default'].inject.service(),

    cache: null,

    initCache: Ember['default'].on('init', function () {
      this.set('cache', {});
    }),

    /**
     * Return cache object for a given case
     *
     * @param {DS.Model} caseModel case
     * @return {*} cache object
     */
    getCaseCache: function getCaseCache(caseModel) {
      var caseCache = this.get('cache')[caseModel.get('id')];
      if (!caseCache) {
        caseCache = this.get('cache')[caseModel.get('id')] = {
          posts: {},
          newestPost: null,
          oldestPost: null,
          total: null,
          activities: [],
          firstActivityTimestamp: null,
          lastActivityTimestamp: null
        };
      }
      return caseCache;
    },

    /**
     * Return the most recent post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @return {Promise} post
     */
    _getNewestPost: function _getNewestPost(caseModel) {
      var caseCache = this.getCaseCache(caseModel);
      if (caseCache.newestPost) {
        return Promise.resolve(caseCache.newestPost);
      } else if (caseCache.total === 0) {
        return Promise.resolve(null);
      } else {
        return this._fetchPosts(caseModel).then(function () {
          return caseCache.newestPost;
        });
      }
    },

    /**
     * Add post to the cache.
     *
     * @param {DS.Model} caseModel case
     * @param {DS.Model} post post
     */
    addPost: function addPost(caseModel, post) {
      var caseCache = this.getCaseCache(caseModel);
      caseCache.posts[post.get('sequence')] = post;
      caseCache.total += 1;
      var previousPost = caseCache.newestPost;
      if (!previousPost || previousPost.get('sequence') < post.get('sequence')) {
        caseCache.newestPost = post;
      }
    },

    /**
     * Return the oldest post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @return {Promise<DS.Model>} post
     */
    _getOldestPost: function _getOldestPost(caseModel) {
      var caseCache = this.getCaseCache(caseModel);
      if (caseCache.oldestPost) {
        return Promise.resolve(caseCache.oldestPost);
      } else if (caseCache.total === 0) {
        return Promise.resolve(null);
      } else {
        return this._fetchPosts(caseModel, { afterId: 0 }).then(function () {
          return caseCache.oldestPost;
        });
      }
    },

    /**
     * Get a single post.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {DS.Model} postId post id
     * @return {Promise<DS.Model>} post
     */
    _getSinglePost: function _getSinglePost(caseModel, postId) {
      var post = this.get('store').peekRecord('post', postId);
      if (post) {
        if (post.get('isReloading')) {
          return post.reload();
        } else {
          return Promise.resolve(post);
        }
      } else {
        // TODO FIXME the API should allow fetching post without providing case id
        post = this.get('store').createRecord('post', { id: postId });
        post.set('case', caseModel);
        return post.reload();
      }
    },

    /**
     * Return posts for a given case.
     *
     * @param {DS.Model} caseModel case
     * @param {Number} postId reference post id
     * @param {[String]} options.direction whether to request 'older' or 'newer' posts
     * @param {[Number]} options.count post count
     * @param {[Number]} options.including whether to include the post with specified id
     * @return {Promise} posts
     */
    getPosts: function getPosts(caseModel, postId) {
      var _this = this;

      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref$direction = _ref.direction;
      var direction = _ref$direction === undefined ? 'older' : _ref$direction;
      var _ref$count = _ref.count;
      var count = _ref$count === undefined ? defaultPostCount : _ref$count;
      var _ref$includeActivities = _ref.includeActivities;
      var includeActivities = _ref$includeActivities === undefined ? true : _ref$includeActivities;
      var _ref$includeEvents = _ref.includeEvents;
      var includeEvents = _ref$includeEvents === undefined ? true : _ref$includeEvents;
      var _ref$including = _ref.including;
      var including = _ref$including === undefined ? false : _ref$including;

      return (postId ? this._getSinglePost(caseModel, postId) : direction === 'older' ? this._getNewestPost(caseModel) : this._getOldestPost(caseModel)).then(function (post) {
        return !post ? [] : _this._getPostsRecursive(caseModel, post, direction, including ? count - 1 : count).then(function (posts) {
          return [post].concat(posts);
        })

        // Load activities
        .then(function (posts) {
          return Promise.all([includeActivities ? _this._getActivitiesForPosts(caseModel, posts, direction, 'activity') : [], includeEvents ? _this._getActivitiesForPosts(caseModel, posts, direction, 'event') : [], posts]);
        })

        // Merge events, activities and posts
        .then(function (_ref2) {
          var _ref22 = _slicedToArray(_ref2, 3);

          var activities = _ref22[0];
          var events = _ref22[1];
          var posts = _ref22[2];
          return _this._mergeTwoTimelines(_this._mergeTwoTimelines(activities, events, direction), posts, direction);
        })

        // Finally, remove initial post if it's not required
        .then(function (posts) {
          return including ? posts : posts.filter(function (p) {
            return p !== post;
          });
        });
      });
    },

    /**
     * Perform merge by timestamp.
     * When same-date conflicts occur, the first timeline objects will be
     * considered to be newer.
     *
     * @private
     * @param {Array<DS.Model>} activities 1st timeline
     * @param {Array<DS.Model>} posts 2nd timeline
     * @param {String} direction older or newer
     * @return {Array<DS.Model>} merged timeline
     */
    _mergeTwoTimelines: function _mergeTwoTimelines(activities, posts, direction) {
      var postsWithActivities = [];
      while (posts.length !== 0 || activities.length !== 0) {
        var topPost = posts[0];
        var topActivity = activities[0];

        if (!topPost) {
          postsWithActivities.push(topActivity);
          activities.splice(0, 1);
          continue;
        }

        if (!topActivity) {
          postsWithActivities.push(topPost);
          posts.splice(0, 1);
          continue;
        }

        var postDate = topPost.get('createdAt');
        var activityDate = topActivity.get('createdAt');

        if (direction === 'newer') {
          if (activityDate.getTime() < postDate.getTime()) {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          } else {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          }
        } else if (direction === 'older') {
          if (postDate.getTime() > activityDate.getTime()) {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          } else {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          }
        }
      }
      return postsWithActivities;
    },

    /**
     * Get all activites for a range of posts.
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {Array<DS.Model>} posts posts
     * @param {String} direction older or newer
     * @param {String} type activity or event
     * @return {Promise<Array<DS.Model>>} activities
     */
    _getActivitiesForPosts: function _getActivitiesForPosts(caseModel, posts, direction, type) {
      var _this2 = this;

      var cache = this.getCaseCache(caseModel);

      // Fetch all activities or events between two points in time (inclusive).
      var fetchActivities = function fetchActivities(start, end, direction) {
        return _this2.get('store').query(type, {
          parent: type === 'activity' ? caseModel : caseModel.get('requester'),
          // since and until are exclusive
          since: direction === 'newer' ? Math.floor((start.getTime() - 1000) / 1000) : undefined,
          until: direction === 'older' ? Math.floor((start.getTime() + 1000) / 1000) : undefined,
          sort_order: direction === 'newer' ? 'ASC' : 'DESC'
        }).then(function (result) {
          var isActivityNotCreatedBeforeLastRecord = function isActivityNotCreatedBeforeLastRecord(activity) {
            return activity.get('createdAt').getTime() >= end.getTime();
          };
          var isActivityNotCreatedAfterLastRecord = function isActivityNotCreatedAfterLastRecord(activity) {
            return activity.get('createdAt').getTime() <= end.getTime();
          };
          var partitionFn = undefined;
          if (!end) {
            partitionFn = function () {
              return true;
            };
          } else if (direction === 'older') {
            partitionFn = isActivityNotCreatedBeforeLastRecord;
          } else {
            partitionFn = isActivityNotCreatedAfterLastRecord;
          }

          var _$partition = _['default'].partition(result.toArray(), partitionFn);

          var _$partition2 = _slicedToArray(_$partition, 2);

          var activities = _$partition2[0];
          var rest = _$partition2[1];

          if (activities.length === 0 || rest.length > 0) {
            return activities;
          } else {
            var last = activities.get('lastObject');
            if (direction === 'newer') {
              start = new Date(last.get('createdAt').getTime() + 1000);
            } else {
              start = new Date(last.get('createdAt').getTime() - 1000);
            }
            return fetchActivities(start, end, direction).then(function (moreActivities) {
              return activities.concat(moreActivities);
            });
          }
        });
      };

      var getActivitiesBetweenCases = function getActivitiesBetweenCases(from, to, direction) {
        var newer = direction === 'newer';
        var isBounded = !to || (newer ? to.get('sequence') === cache.total : to.get('sequence') === 1);
        var start = new Date(from.get('createdAt').getTime() - (newer ? 0 : 1000));
        var end = !isBounded ? new Date(to.get('createdAt').getTime() - (newer ? 1000 : 0)) : undefined;
        return fetchActivities(start, end, direction);
      };

      var from = posts[0];
      var to = posts.length === 1 ? undefined : posts[posts.length - 1];

      return getActivitiesBetweenCases(from, to, direction);
    },

    /**
     * Recursive function used by getPosts
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {DS.Model} post post
     * @param {DS.Model} direction 'older' or 'newer'
     * @param {[Number]} count count
     * @return {Promise} posts
     */
    _getPostsRecursive: function _getPostsRecursive(caseModel, post, direction) {
      var _this3 = this;

      var count = arguments.length <= 3 || arguments[3] === undefined ? defaultPostCount : arguments[3];

      if (count === 0) {
        return Promise.resolve([]);
      }

      var caseCache = this.getCaseCache(caseModel);

      var nextSequence = post.get('sequence') + (direction === 'older' ? -1 : 1);
      if (caseCache.total !== null && (nextSequence === 0 || nextSequence > caseCache.total)) {
        return Promise.resolve([]);
      }

      var nextPost = caseCache.posts[nextSequence];
      var queryParamName = direction === 'older' ? 'beforeId' : 'afterId';

      return (nextPost ? Promise.resolve(nextPost) : this._fetchPosts(caseModel, _defineProperty({}, queryParamName, post.get('id'))).then(function () {
        return caseCache.posts[nextSequence];
      })).then(function (post) {
        if (!post) {
          return [];
        } else {
          return _this3._getPostsRecursive(caseModel, post, direction, count - 1).then(function (posts) {
            return [post].concat(posts);
          });
        }
      });
    },

    /**
     * Retrieves posts from the server. Returns a promise which resolves when
     * fetch is successful
     *
     * @private
     * @param {DS.Model} caseModel case
     * @param {[Number]} options.afterId id of the post
     * @param {[Number]} options.beforeId id of the post
     * @return {Promise} promise
     */
    _fetchPosts: function _fetchPosts(caseModel) {
      var _this4 = this;

      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$afterId = _ref3.afterId;
      var afterId = _ref3$afterId === undefined ? undefined : _ref3$afterId;
      var _ref3$beforeId = _ref3.beforeId;
      var beforeId = _ref3$beforeId === undefined ? undefined : _ref3$beforeId;

      var caseCache = this.getCaseCache(caseModel);
      return this.get('store').query('post', {
        parent: caseModel,
        after_id: afterId, // eslint-disable-line camelcase
        before_id: beforeId // eslint-disable-line camelcase
      }).then(function (newPosts) {
        caseCache.total = _this4.get('store').metadataFor('post').total;
        newPosts.forEach(function (post) {
          caseCache.posts[post.get('sequence')] = post;
          if (post.get('sequence') === caseCache.total) {
            caseCache.newestPost = post;
          }
          if (post.get('sequence') === 1) {
            caseCache.oldestPost = post;
          }
        });
      });
    }
  });

});
define('frontend-cp/services/context-modal', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    visible: false,
    event: null,
    title: '',
    activeContextModalId: null,
    index: null,
    inline: false,
    repositionRequired: false,

    urlService: Ember['default'].inject.service('url'),

    open: function open(contextModalId, event, options) {
      this.setProperties({
        'inline': !!(options && options.inline),
        'visible': true,
        'event': event,
        'index': 0,
        'activeContextModalId': contextModalId
      });
    },

    close: function close() {
      this.setProperties({
        'visible': false,
        'event': null,
        'index': null,
        'title': '',
        'activeContextModalId': null
      });
    },

    next: function next() {
      this.incrementProperty('index');
    },

    prev: function prev() {
      this.decrementProperty('index');
    },

    /**
     * TODO remove once ember fixed
     * This is a hack to fix a bug in ember
     * It appears that you cannot observe the properties of an injected
     * service without first manually using 'get' on it somewhere or using
     * it as a property in a template
     */
    initializeService: Ember['default'].on('init', function () {
      this.get('urlService.currentUrl');
    }),

    update: Ember['default'].observer('urlService.currentUrl', function () {
      this.close();
    })

  });

});
define('frontend-cp/services/custom-fields/list', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    findCustomFieldValue: function findCustomFieldValue(customFields, field) {
      if (!customFields) {
        return;
      }

      var fields = customFields.toArray();

      for (var i = 0; i < fields.length; i++) {
        if (fields[i].get('field') === field) {
          return fields[i];
        }
      }

      return null;
    },

    componentFor: function componentFor(fieldType) {
      switch (fieldType) {
        case 'STATUS':
          return 'ko-case-field/status';
        case 'TYPE':
          return 'ko-case-field/type';
        case 'PRIORITY':
          return 'ko-case-field/priority';
        case 'ASSIGNEE':
          return 'ko-case-field/assignee';

        case 'TEXT':
          return 'ko-custom-field/text';
        case 'TEXTAREA':
          return 'ko-custom-field/textarea';
        case 'CHECKBOX':
          return 'ko-custom-field/checkbox';
        case 'SELECT':
          return 'ko-custom-field/select';
        case 'CASCADINGSELECT':
          return 'ko-custom-field/cascadingselect';
        case 'RADIO':
          return 'ko-custom-field/radio';
        case 'NUMERIC':
          return 'ko-custom-field/numeric';
        case 'DECIMAL':
          return 'ko-custom-field/decimal';
        case 'FILE':
          return 'ko-custom-field/file';
        case 'YESNO':
          return 'ko-custom-field/yesno';
        case 'DATE':
          return 'ko-custom-field/date';
        case 'REGEX':
          return 'ko-custom-field/regex';
        default:
          return '';
      }
    }
  });

});
define('frontend-cp/services/custom-fields/options', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var SYSTEM_FIELD_TYPE_IDS = [1, 2, 3, 4];

  exports['default'] = Ember['default'].Service.extend({
    store: Ember['default'].inject.service('store'),

    optionsToBeDeleted: [],

    save: function save(options) {
      return options.map(function (option) {
        return option.save();
      });
    },

    add: function add(options) {
      var maxSortOrder = Math.max.apply(Math, options.map(function (option) {
        return option.get('sortOrder');
      }));

      // maxSortOrder can be +Infinity, if options are empty
      if (maxSortOrder < 0) {
        maxSortOrder = 0;
      }

      var newOption = this.get('store').createRecord('field-option', {
        sortOrder: maxSortOrder + 1
      });

      options.pushObject(newOption);
    },

    remove: function remove(option) {
      if (option.get('isNew')) {
        option.rollbackAttributes();
      } else if (!option.get('isDeleted')) {
        option.set('markedForDeletion', true);
      }

      this.get('optionsToBeDeleted').pushObject(option);
    },

    clear: function clear(options) {
      var promises = [];
      // saving the model will re-add all the options
      // we have marked for deletion - remove them again
      this.get('optionsToBeDeleted').forEach(function (option) {
        if (!option.get('isDeleted')) {
          option.deleteRecord();
        }

        promises.push(option.save());

        options.removeObject(option);
      });

      this.get('optionsToBeDeleted').clear();

      return promises;
    },

    rollback: function rollback(options) {
      if (!options.get('length')) {
        return;
      }

      options.forEach(function (option) {
        option.rollbackAttributes();
      });
    },

    saveByFieldType: function saveByFieldType(modelPrefix, fieldType) {
      var promises = [];

      switch (fieldType) {
        case 'PRIORITY':
          this.get('store').peekAll(modelPrefix + 'priority').forEach(function (priority) {
            promises.push(priority.save());
          });
          break;

        case 'STATUS':
          this.get('store').peekAll(modelPrefix + 'status').forEach(function (status) {
            if (status.get('statusType') === 'CUSTOM') {
              promises.push(status.save());
            }
          });
          break;

        case 'TYPE':
          this.get('store').peekAll(modelPrefix + 'type').forEach(function (type) {
            if (SYSTEM_FIELD_TYPE_IDS.indexOf(parseInt(type.get('id'))) === -1) {
              promises.push(type.save());
            }
          });
          break;
      }

      return promises;
    }
  });

});
define('frontend-cp/services/custom-fields/types', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    availableTypes: [{ name: 'TEXT', nameIntlKey: 'admin.casefields.type.text.name', descriptionIntlKey: 'admin.casefields.type.text.description' }, { name: 'TEXTAREA', nameIntlKey: 'admin.casefields.type.textarea.name', descriptionIntlKey: 'admin.casefields.type.textarea.description' }, { name: 'RADIO', nameIntlKey: 'admin.casefields.type.radio.name', descriptionIntlKey: 'admin.casefields.type.radio.description' }, { name: 'SELECT', nameIntlKey: 'admin.casefields.type.dropdown.name', descriptionIntlKey: 'admin.casefields.type.dropdown.description' }, { name: 'CHECKBOX', nameIntlKey: 'admin.casefields.type.checkbox.name', descriptionIntlKey: 'admin.casefields.type.checkbox.description' }, { name: 'NUMERIC', nameIntlKey: 'admin.casefields.type.numeric.name', descriptionIntlKey: 'admin.casefields.type.numeric.description' }, { name: 'DECIMAL', nameIntlKey: 'admin.casefields.type.decimal.name', descriptionIntlKey: 'admin.casefields.type.decimal.description' }, { name: 'FILE', nameIntlKey: 'admin.casefields.type.file.name', descriptionIntlKey: 'admin.casefields.type.file.description' }, { name: 'YESNO', nameIntlKey: 'admin.casefields.type.yesno.name', descriptionIntlKey: 'admin.casefields.type.yesno.description' }, { name: 'CASCADINGSELECT', nameIntlKey: 'admin.casefields.type.cascadingselect.name', descriptionIntlKey: 'admin.casefields.type.cascadingselect.description' }, { name: 'DATE', nameIntlKey: 'admin.casefields.type.date.name', descriptionIntlKey: 'admin.casefields.type.date.description' }, { name: 'REGEX', nameIntlKey: 'admin.casefields.type.regex.name', descriptionIntlKey: 'admin.casefields.type.regex.description' }],

    getTypeByName: function getTypeByName(name) {
      var matched = this.get('availableTypes').filter(function (record) {
        return record.name === name;
      });

      return matched.length ? matched[0] : {};
    }
  });

});
define('frontend-cp/services/custom-fields', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Promise = Ember['default'].RSVP.Promise;

  exports['default'] = Ember['default'].Service.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),
    store: Ember['default'].inject.service('store'),
    customFieldsOptions: Ember['default'].inject.service('custom-fields/options'),
    customFieldsTypes: Ember['default'].inject.service('custom-fields/types'),

    getTitleBreadcrumbs: function getTitleBreadcrumbs(model) {
      var title = [];
      var type = this.get('customFieldsTypes').getTypeByName(model.get('fieldType'));
      var stateModifier = model.get('isNew') ? 'new' : 'edit';

      title.push(this._getTranslation(this._getTranslationPrefix(model.constructor.modelName)));

      if (model.get('title')) {
        title.push(model.get('title'));
      } else {
        title.push(this._getTranslation(type.nameIntlKey));
        title.push(this._getTranslation('admin.fields.' + stateModifier + '.heading'));
      }

      return title.join(' / ');
    },

    persist: function persist(model) {
      var promise = undefined;

      if (model.get('isNew')) {
        promise = this.save(model);
      } else {
        promise = this.edit(model);
      }

      return promise;
    },

    save: function save(model) {
      var _this = this;

      return model.save().then(function () {
        var options = model.get('options');

        if (model.get('isChoiceField') && !options.get('length')) {
          _this._addNotification('admin.fields.type.field_options.missing_options');
          throw new Error();
        }

        var promise = Ember['default'].RSVP.all(_this._getOptionPromises(options, _this._getModelPrefix(model.constructor.modelName), model.get('fieldType')));

        // when you save more than 1 option, parent model becomes dirty
        // Dirty status adds when 2+ option is saved. Haven't come up
        // with better idea how to reset dirty status and not to clutter UI
        // with disappearing options. rollbackAttribues on model do not help.
        return promise.then(function () {
          return model.save();
        });
      });
    },

    edit: function edit(model) {
      var options = model.get('options');

      if (model.get('isChoiceField') && !options.get('length')) {
        this._addNotification('admin.fields.type.field_options.missing_options');
        return Promise.reject();
      }

      var promise = Ember['default'].RSVP.all(this._getOptionPromises(options, this._getModelPrefix(model.constructor.modelName), model.get('fieldType')));

      return promise.then(function () {
        return model.save();
      });
    },

    rollback: function rollback(model) {
      model.rollback();
      this.get('customFieldsOptions').rollback(model.get('options'));
    },

    reorder: function reorder(models, fields, sessionId) {
      var systemFields = models.filter(function (field) {
        return field.get('isSystem');
      });

      var lastOrderSequence = systemFields.get('length');

      var orderedIds = fields.map(function (field) {
        return field.get('id');
      });

      var sortOrder = lastOrderSequence;
      fields.forEach(function (customField) {
        customField.set('sortOrder', sortOrder);
        sortOrder++;
      });

      var payload = {
        field_ids: orderedIds.toString() // eslint-disable-line camelcase
      };

      this._saveReorder('/api/v1/' + this._getUrlPrefix(models.get('firstObject').constructor.modelName) + '/fields/reorder', {
        method: 'PUT',
        contentType: 'application/json',
        data: JSON.stringify(payload),
        headers: {
          'Content-Type': 'application/json',
          'X-Session-ID': sessionId
        }
      });
    },

    toggleEnabled: function toggleEnabled(field) {
      field.toggleProperty('isEnabled');
      field.save();
    },

    destroyRecord: function destroyRecord(field) {
      field.destroyRecord();
    },

    addOption: function addOption(model) {
      this.get('customFieldsOptions').add(model.get('options'));
    },

    removeOption: function removeOption(option) {
      this.get('customFieldsOptions').remove(option);
    },

    validateTransition: function validateTransition(controller, transition) {
      var changedAttributes = controller.getChangedAttributes();
      var onlyFieldTypeChanged = Object.keys(changedAttributes).length === 1 && changedAttributes.fieldType;

      if (!onlyFieldTypeChanged) {
        if (controller.userHasChangedModel()) {
          if (confirm(this._getTranslation('generic.confirm.lose_changes'))) {
            // eslint-disable-line
            controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
            return;
          }
        }
      }

      // edge case - we created an empty model, so don't ask
      // a user to to confirm anything here; it's empty, so
      // just delete it
      if (controller.get('model.isNew')) {
        controller.send('rollBackModel');
      }
    },

    baseTypeKeyForFieldType: function baseTypeKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
        case 'TEXT':
          return 'admin.casefields.type.text.name';

        case 'MESSAGE':
        case 'TEXTAREA':
          return 'admin.casefields.type.textarea.name';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
        case 'SELECT':
        case 'DROPDOWN':
          return 'admin.casefields.type.dropdown.name';

        case 'RADIO':
          return 'admin.casefields.type.radio.name';
        case 'CHECKBOX':
          return 'admin.casefields.type.checkbox.name';
        case 'NUMERIC':
          return 'admin.casefields.type.numeric.name';
        case 'DECIMAL':
          return 'admin.casefields.type.decimal.name';
        case 'FILE':
          return 'admin.casefields.type.file.name';
        case 'YESNO':
          return 'admin.casefields.type.yesno.name';
        case 'CASCADINGSELECT':
          return 'admin.casefields.type.cascadingselect.name';
        case 'DATE':
          return 'admin.casefields.type.date.name';
        case 'REGEX':
          return 'admin.casefields.type.regex.name';
      }
    },

    baseKeyForFieldType: function baseKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
          return 'TEXT';

        case 'MESSAGE':
          return 'TEXTAREA';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
          return 'SELECT';
        default:
          return fieldType;
      }
    },

    _saveReorder: function _saveReorder(url, options) {
      Ember['default'].$.ajax(url, options);
    },

    _getOptionPromises: function _getOptionPromises(options, typeKey, fieldType) {
      var fieldOptions = this.get('customFieldsOptions');
      var promises = [];

      promises = promises.concat(fieldOptions.clear(options));
      promises = promises.concat(fieldOptions.save(options));
      promises = promises.concat(fieldOptions.saveByFieldType(typeKey, fieldType));

      return promises;
    },

    _addNotification: function _addNotification(translationKey) {
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'error' : arguments[1];

      this.get('notification').add({
        type: type,
        dismissable: true,
        autodismiss: true,
        title: this._getTranslation(translationKey),
        body: null
      });
    },

    _getModelPrefix: function _getModelPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'case-';
      } else if (typeKey === 'user-field') {
        return 'user-';
      } else if (typeKey === 'organization-field') {
        return 'organization-';
      }
    },

    _getUrlPrefix: function _getUrlPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'cases';
      } else if (typeKey === 'user-field') {
        return 'users';
      } else if (typeKey === 'organization-field') {
        return 'organizations';
      }
    },

    _getTranslationPrefix: function _getTranslationPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'admin.casefields';
      } else if (typeKey === 'user-field') {
        return 'admin.userfields';
      } else if (typeKey === 'organization-field') {
        return 'admin.organizationfields';
      }
    },

    _getTranslation: function _getTranslation(key) {
      return this.get('intl').findTranslationByKey(key).translation;
    }
  });

});
define('frontend-cp/services/error-handler', ['exports', 'ember', 'npm:lodash'], function (exports, Ember, _) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    notificationService: Ember['default'].inject.service('notification'),
    sessionService: Ember['default'].inject.service('session'),
    intlService: Ember['default'].inject.service('intl'),

    handleServerError: function handleServerError(error) {
      if (error && error.errors && error.errors.errors) {
        this.handleSessionErrors(error.errors.errors);
        this.handlePermissionErrors(error.errors.errors);
        this.handleCredentialErrors(error.errors.errors);
      }
      throw error;
    },

    /*
     * TODO this needs moved to serializer?
     */

    handleServerNotifications: function handleServerNotifications(data) {
      if (data && data.notifications) {
        this.sendNotifications(data.notifications);
      }
    },

    sendNotifications: function sendNotifications(notifications) {
      var notificationService = this.get('notificationService');
      notifications.forEach(function (notification) {
        notificationService.add({
          type: notification.type.toLowerCase(),
          title: notification.message,
          autodismiss: !notification.sticky,
          dismissable: true
        });
      });
    },

    handlePermissionErrors: function handlePermissionErrors(responseErrors) {
      var isPermissionError = function isPermissionError(responseError) {
        return responseError.code === 'PERMISSIONS_DENIED';
      };
      var hasPermissionErrors = _['default'].some(responseErrors, isPermissionError);

      if (hasPermissionErrors) {
        // Redirect back to the base of the current path
        var path = '/agent';
        var pathname = location.pathname;
        // If we are at a deeplink inside admin, redirect back to admin
        // If we have errored at '/admin' leave path='/agent'
        if (pathname.startsWith('/admin') && pathname !== '/admin') {
          path = '/admin';
        }

        if (pathname !== path) {
          this.container.lookup('router:main').router.transitionTo(path);
        }
      }
    },

    handleCredentialErrors: function handleCredentialErrors(responseErrors) {
      var intlService = this.get('intlService');

      var isError = function isError(responseError) {
        return responseError.code === 'CREDENTIAL_EXPIRED';
      };
      var hasErrors = _['default'].some(responseErrors, isError);

      if (hasErrors) {
        this.get('notificationService').add({
          type: 'error',
          title: intlService.findTranslationByKey('generic.user_credential_expired').translation,
          autodismiss: false,
          dismissable: true
        });
      }
    },

    handleSessionErrors: function handleSessionErrors(responseErrors) {
      var _this = this;

      var intlService = this.get('intlService');

      var isSessionError = function isSessionError(responseError) {
        return responseError.code === 'SESSION_LOADING_FAILED';
      };
      var hasSessionErrors = _['default'].some(responseErrors, isSessionError);

      if (hasSessionErrors) {
        this.get('sessionService').logout().then(function () {
          _this.get('notificationService').add({
            type: 'error',
            title: intlService.findTranslationByKey('generic.user_logged_out').translation,
            body: intlService.findTranslationByKey('generic.session_expired').translation,
            autodismiss: true
          });
        });
      }
    }
  });

});
define('frontend-cp/services/file-upload', ['exports', 'ember', 'jquery'], function (exports, Ember, $) {

  'use strict';

  var UploadFile = Ember['default'].Object.extend({
    progress: 0,
    name: null,
    attachmentId: null,
    contentUrl: null,
    size: null,
    failed: false,
    error: '',
    xhr: null,
    status: 'PROGRESS',

    cancel: function cancel() {
      if (this.get('xhr')) {
        this.get('xhr').abort();
      }
      this.set('status', 'CANCELLED');
      this.set('attachmentId', null);
    }
  });

  exports['default'] = Ember['default'].Service.extend({
    sessionService: Ember['default'].inject.service('session'),

    headers: Ember['default'].computed('sessionService.sessionId', function () {
      var headers = {};
      var sessionId = this.get('sessionService.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    uploadFile: function uploadFile(file) {
      this._super();
      var formData = new FormData();
      var uploadFile = UploadFile.create({ name: file.name, size: file.size });

      formData.append('name', file.name);
      formData.append('content', file);

      $['default'].ajax({
        url: 'http://localhost:4200/api/v1/core/file',
        type: 'POST',
        headers: this.get('headers'),
        //Ajax events
        success: function success(response) {
          uploadFile.set('progress', 100);
          uploadFile.set('status', 'SUCCESS');
          uploadFile.set('contentUrl', response.data.content_url);
          uploadFile.set('size', response.data.size);
          uploadFile.set('attachmentId', response.data.id);
        },
        error: function error(response) {
          uploadFile.set('status', 'ERROR');
          if (response.status === 413) {
            uploadFile.set('error', 'TOO_LARGE');
          }
          if (response.status === 500) {
            uploadFile.set('error', 'UNKNOWN');
          }
        },
        xhr: function xhr(XMLHttpRequest) {
          var xhr = new window.XMLHttpRequest();

          //Upload progress
          xhr.upload.addEventListener('progress', function (evt) {
            uploadFile.set('status', 'PROGRESS');
            uploadFile.set('progress', evt.loaded * 100 / evt.total);
          }, false);

          uploadFile.set('xhr', xhr);

          return xhr;
        },
        // Form data
        data: formData,
        //Options to tell jQuery not to process data or worry about content-type.
        cache: false,
        contentType: false,
        processData: false
      });
      return uploadFile;
    }

  });

});
define('frontend-cp/services/intl', ['exports', 'ember-intl/services/intl'], function (exports, IntlService) {

	'use strict';

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */

	exports['default'] = IntlService['default'];

});
define('frontend-cp/services/local-store', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    /**
     * Retrieve an item from the store by key
     *
     * Items are stored as JSON strings
     *
     * @param  {string} key - @todo add this doc
     * @param {Boolean} options.persist Use local storage instead of session storage
     * @return {*} Stored object
     */
    getItem: function getItem(key) {
      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref$persist = _ref.persist;
      var persist = _ref$persist === undefined ? false : _ref$persist;

      var store = persist ? localStorage : sessionStorage;
      var item = store.getItem(key);

      // Note: stringified undefined will return 'undefined'
      if (item !== null && item !== 'undefined') {
        return JSON.parse(item);
      } else {
        return null;
      }
    },

    /**
     * Place item in the store as a JSON string.
     *
     * Note: only plain objects can be stored.
     *
     * @param {[type]}  key       [description]
     * @param {[type]}  item      [description]
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    setItem: function setItem(key, item) {
      var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref2$persist = _ref2.persist;
      var persist = _ref2$persist === undefined ? false : _ref2$persist;

      // using typeof for strict undefined check
      if (typeof item !== 'undefined') {
        var store = persist ? localStorage : sessionStorage;
        store.setItem(key, JSON.stringify(item));
      }
    },

    /**
     * Remove item from the store.
     *
     * @param {[type]}  key       key of item to be removed
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    removeItem: function removeItem(key) {
      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$persist = _ref3.persist;
      var persist = _ref3$persist === undefined ? false : _ref3$persist;

      var store = persist ? localStorage : sessionStorage;
      store.removeItem(key);
    },

    /**
     * Clear everything in the store
     */
    clearAll: function clearAll() {
      localStorage.clear();
      sessionStorage.clear();
    }
  });

});
define('frontend-cp/services/notification', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    notifications: null,

    init: function init() {
      this._super();
      this.set('notifications', this.get('notifications') || []);
    },

    /**
     * Add a notification
     * @param {object} notification Notification object
     * @param {string} notification.type Notification type (allowed values: 'info', 'warning', 'error', 'success')
     * @param {string} notification.title Notification title text
     * @param {string} [notification.body=null] Notification body text
     * @param {boolean} [notification.dismissable=false] Whether to allow the user to close the notification
     * @param {boolean} [notification.autodismiss=false] Whether to automatically dismiss the message after a timeout
     */
    add: function add(notification) {
      var notifications = this.get('notifications');
      notifications.pushObject(notification);
    },

    removeAll: function removeAll() {
      this.get('notifications').clear();
    },

    /**
     * Remove a notification
     * @param {object} notification Notification that has previously been added
     */
    remove: function remove(notification) {
      var notifications = this.get('notifications');
      notifications.removeObject(notification);
    }
  });

});
define('frontend-cp/services/permissions', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var roleTypes = {
    ADMIN: {
      rank: 4,
      permissions: []
    },
    AGENT: {
      rank: 3,
      permissions: []
    },
    COLLABORATOR: {
      rank: 2,
      permissions: []
    },
    CUSTOMER: {
      rank: 1,
      permissions: []
    }
  };

  var adminOrAgentToCustomer = function adminOrAgentToCustomer(roleType, targetRoleType) {
    if (roleType.rank === roleTypes.AGENT.rank) {
      return roleTypes.CUSTOMER.rank === targetRoleType.rank;
    }

    return roleType.rank === roleTypes.ADMIN.rank;
  };

  /*
   * A map of system actions to a function that checks if the roleType provided
   * has the ability to carry out this action.
   * The actions should match values in `permissions` list for a given roleType
   *
   * The 1st argument of the function will always be the roleType of the current
   * logged in user. Any other arguments passed to the helper are provided as
   * a list.
   *
   * The function allows us to perform additional checks on top of the existence
   * of the permission e.g. 'app.delete.user' requires that the roleType.rank of
   * the logged in user be greater than that of the user they are trying to
   * delete.
   */
  var applicationActions = {
    'app.user.signature.edit': function appUserSignatureEdit(myRoleType, me, target) {
      var targetRoleType = roleTypes[target.get('role').get('roleType')];

      // I can change my own signature
      if (me && target && me === target) {
        return true;
      }

      // If I'm a higher rank and they are not a CUSTOMER
      return myRoleType.rank > targetRoleType.rank && targetRoleType.rank !== roleTypes.CUSTOMER.rank;
    },
    // ADMIN can disable all, AGENT only CUSTOMER
    'app.user.disable': function appUserDisable(subjectRoleType, subject, user) {
      var userRoleType = user.get('role.roleType');

      // I cannot disable myself!
      if (subject && user && subject === user) {
        return false;
      }

      if (subjectRoleType.rank === roleTypes.AGENT.rank) {
        return userRoleType.rank === roleTypes.CUSTOMER.rank;
      }

      return subjectRoleType.rank === roleTypes.ADMIN.rank;
    },
    'app.user.password.change': function appUserPasswordChange(roleType, user, target) {
      // I can change my own password:
      if (user && target && user === target) {
        return true;
      }

      var userRoleType = user.get('role.roleType');
      return adminOrAgentToCustomer(roleType, userRoleType) && target.get('emails').toArray().length;
    },
    'app.organisation.delete': function appOrganisationDelete(roleType, user, organisation) {
      if (roleType.rank >= roleTypes.AGENT.rank) {
        return true;
      }
      return false;
    },
    'app.user.delete': function appUserDelete(roleType, user, target) {
      // I can't delete myself
      if (user && target && user === target) {
        return false;
      }
      var targetRoleType = roleTypes[target.get('role').get('roleType')];
      return roleType.rank === roleTypes.ADMIN.rank && (targetRoleType.rank === roleTypes.AGENT.rank || targetRoleType.rank === roleTypes.COLLABORATOR.rank);
    },
    'app.user.change_access_permission': function appUserChange_access_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank === roleTypes.ADMIN.rank;
    }

  };

  /**
   * Assign the appropriate actions to each users `permissions` list.
   * permissions Cascade so an AGENT = CUSTOMER + COLLABORATOR + AGENT
   */
  roleTypes.CUSTOMER.permissions = [];
  roleTypes.COLLABORATOR.permissions = roleTypes.CUSTOMER.permissions.concat([]);
  roleTypes.AGENT.permissions = roleTypes.COLLABORATOR.permissions.concat(['app.user.disable', 'app.user.signature.edit', 'app.user.password.change', 'app.organisation.delete']);
  roleTypes.ADMIN.permissions = roleTypes.AGENT.permissions.concat(['app.user.delete', 'app.user.change_access_permission']);

  exports['default'] = Ember['default'].Service.extend({
    sessionService: Ember['default'].inject.service('session'),
    notificationService: Ember['default'].inject.service('notification'),
    intlService: Ember['default'].inject.service('intl'),

    showError: function showError() {
      this.get('notificationService').add({
        type: 'error',
        title: this.get('intlService').findTranslationByKey('generic.permissions_denied').translation,
        autodismiss: false,
        dismissable: true
      });
    },

    has: function has(action, target) {
      var role = this.get('sessionService.user.role');
      var subjectRoleType = roleTypes[role.get('roleType')];
      var permissions = this.get('sessionService.permissions');

      // First check the permission exists
      if (subjectRoleType && subjectRoleType.permissions.indexOf(action) > -1) {
        // Then allow the permission function to run
        return applicationActions[action](subjectRoleType, this.get('sessionService.user'), target);
      }

      // Check role permissions
      return permissions.filter(function (perm) {
        return perm.get('name') === action && perm.get('value');
      }).length > 0;
    }
  });

});
define('frontend-cp/services/pusher', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, Ember, ENV) {

  'use strict';

  /* global Pusher */

  exports['default'] = Ember['default'].Service.extend({
    channelBindings: Ember['default'].Object.create({}),
    options: ENV['default'].APP.PUSHER_OPTIONS,

    sessionService: Ember['default'].inject.service('session'),

    initialize: function initialize() {
      if (this.options.logEvents) {
        Pusher.log = function (message) {
          if (window.console && window.console.log) {
            // eslint-disable-line
            window.console.log(message); // eslint-disable-line
          }
        };
      }
      this.authorize();
    },

    authorize: Ember['default'].observer('sessionService.sessionId', function () {
      if (!this.get('sessionService.sessionId')) {
        return;
      }

      this.set('pusher', new Pusher(this.options.key, {
        encrypted: this.options.encrypted,
        authEndpoint: this.options.authEndpoint,
        wsHost: this.options.wsHost,
        httpHost: this.options.httpHost,
        auth: {
          headers: {
            'X-Session-ID': this.get('sessionService.sessionId')
          }
        }
      }));
    }),

    subscribeTo: function subscribeTo(channelName, event, context, func, localData) {
      if (!channelName) {
        return;
      }
      var channel = this.subscribeToChannel(channelName);
      var handler = function handler(data) {
        func.apply(context, [data, localData]);
      };

      this.get('channelBindings')[channelName][func] = handler;
      channel.bind(event, handler);
    },

    unsubscribeTo: function unsubscribeTo(channelName, eventName, func) {
      var channelBindings = this.get('channelBindings');
      var channel = channelBindings.get(channelName);
      if (channel) {
        var handler = channel.get(func);
        channel.unbind(eventName, handler);
      }
    },

    subscribeToChannel: function subscribeToChannel(channelName) {
      var channelBindings = this.get('channelBindings');

      var channelInfo = channelBindings.get(channelName);
      if (!channelInfo) {
        var channel = this.get('pusher').subscribe(channelName);
        channelBindings.set(channelName, { channel: channel });
        return channel;
      }

      return channelInfo.channel;
    },

    store: Ember['default'].inject.service(),

    /*
     * Handle updating of a case
     */
    updateCaseFromPusher: function updateCaseFromPusher(serverData, caseId) {
      var _this = this;

      var caseToUpdate = this.get('store').peekRecord('case', caseId);

      var initialRelationships = caseToUpdate.get('initialRelationships');
      var currentRelationships = caseToUpdate.getRelationships();
      var originalCustomFields = caseToUpdate.get('initialCustomFields');

      // cache current id => values
      var currentCustomFieldValueHash = {};
      caseToUpdate.get('customFields').forEach(function (caseField) {
        currentCustomFieldValueHash[caseField.get('field.id')] = caseField.get('value');
      });
      var currentTags = caseToUpdate.get('tags').toArray().slice(0);

      var propertiesChangeViaPusher = caseToUpdate.get('propertiesChangeViaPusher') || new Ember['default'].Object();

      caseToUpdate.reload().then(function (newCase) {
        // update everything our initial values -- it's clean back from the server
        newCase.cacheRelationships();

        _this.get('store').peekAll('case-field').forEach(function (caseField) {
          var relationshipName = caseField.get('key');
          if (relationshipName === 'type') {
            relationshipName = 'caseType';
          }

          if (caseField.get('isSystem')) {
            if (newCase.get(relationshipName) === initialRelationships[relationshipName]) {
              newCase.set(relationshipName, currentRelationships[relationshipName]);
            } else {
              propertiesChangeViaPusher.set(caseField.get('id'), true);
              propertiesChangeViaPusher.set(relationshipName, true); // we can refer to these either by ID (when looping) or by key (eg for subject)
            }
          } else {
              var updatedCustomField = newCase.get('customFields').find(function (field) {
                return field.get('field.id') === caseField.get('id');
              });
              var userModifiedCustomFieldValue = currentCustomFieldValueHash[caseField.get('id')];

              if (updatedCustomField.get('value') === originalCustomFields[caseField.get('id')]) {
                updatedCustomField.set('value', userModifiedCustomFieldValue);
              } else {
                propertiesChangeViaPusher.set(caseField.get('id'), true);
              }
            }
        });

        //tags is a special case (it's not a case field)!
        var serverTags = newCase.get('tags');
        var modifiedTags = currentTags;
        var originalTags = initialRelationships.tags;
        var allTags = Array.concat(serverTags, modifiedTags, originalTags).uniq();

        allTags.forEach(function (tag) {
          if (originalTags.indexOf(tag) === -1 && modifiedTags.indexOf(tag) > -1) {
            newCase.get('tags').pushObject(tag);
          } else if (originalTags.indexOf(tag) > -1 && modifiedTags.indexOf(tag) === -1) {
            newCase.get('tags').removeObject(tag);
          }
        });

        newCase.set('propertiesChangeViaPusher', propertiesChangeViaPusher);
        _this.updateDirtyCaseFieldHash();
      });
    }

  });

});
define('frontend-cp/services/route-state', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({

    _state: null,

    /**
     * Get the current history state object
     * @return {Object} Key/value object containing state properties
     */
    getState: function getState() {
      var location = this.container.lookup('router:main').get('location');
      return typeof location.getState === 'function' ? location.getState() : null;
    },

    /**
     * Update the current history state, extending any existing state
     * @param {Object} updates Key/value object containing state properties to be updated
     */
    updateState: function updateState(updates) {
      var currentState = this.getState();

      // Extend the existing state with the updates
      var state = Object.assign({}, currentState, updates);

      // Update the history state
      var location = this.container.lookup('router:main').get('location');
      var history = location.get('history');
      if (history) {
        history.replaceState(state, null);
      }
    },

    /**
     * Update the current URL including the hash
     * @param {[string]} url URL value to update, including hash if available
     */
    updateUrlWithHash: function updateUrlWithHash(url) {
      var location = this.container.lookup('router:main').get('location');
      if (location.replaceURL) {
        location.replaceURL(url);
      }
    },

    /**
     * Transition to a path with a corresponding history state object
     * @param {string} url URL path for the target route
     * @param {object} state History state properties to be added after transition with `history.replaceState(state)`
     * @returns {Promise<Transition>} Promise fulfilled with the transition object
     */
    transitionToState: function transitionToState(url, state) {
      var _this = this;

      // `path` is a special state property maintained by Ember,
      // and we don't want to allow overriding it.
      // The common case of inadvertently passing the `path` it will occur if we
      // retrieve existing state (which will always contain `path`), make changes
      // to it and pass it to `transitionToState`.
      var stateWithoutPath = Object.assign({}, state);
      delete stateWithoutPath.path;
      var router = this.container.lookup('router:main');

      // Ember's router doesn't allow us to hook into the `pushState`
      // call, so we have to apply the state updates once the
      // transition is complete.
      //
      // We have to use an event listener rather than promises because
      // the promise will only resolve AFTER all other `didTransition`
      // event handlers have fired throughout the app (i.e. too late).
      //
      // In Ember, the most recently added listener will fire first,
      // so this will run before all other `didTransition` listeners
      // (unless others were added after `transitionTo()` was called).

      var didReceiveTransitionEvent = false;
      var onTransitionSucceeded = function onTransitionSucceeded() {
        didReceiveTransitionEvent = true;
        _this.updateUrlWithHash(url);
        _this.updateState(stateWithoutPath);
      };

      router.on('didTransition', onTransitionSucceeded);

      // Let Ember's router take care of the transition
      var pageUrl = url.split('#')[0];
      return router.transitionTo(pageUrl).then(function () {
        // If the user we were already on this page, there will not
        // have been a `didTransition` event, so we still need to
        // update the state for this
        if (!didReceiveTransitionEvent) {
          _this.updateUrlWithHash(url);
          _this.updateState(stateWithoutPath);
        }
      })['finally'](function () {
        router.off('didTransition', onTransitionSucceeded);
      });
    }
  });

});
define('frontend-cp/services/session', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({

    /**
     * Property for use in computed properties and observers
     * Ember automatically converts this to an ember array.
     * @type {Array}
     */
    session: null,
    user: null,

    permissions: [],

    localStoreService: Ember['default'].inject.service('localStore'),
    store: Ember['default'].inject.service(),

    // CPs
    sessionId: Ember['default'].computed({
      get: function get() {
        return this.get('localStoreService').getItem('sessionId', { persist: true });
      },
      set: function set(key, v) {
        if (!v) {
          this.get('localStoreService').removeItem('sessionId', { persist: true });
        } else {
          this.get('localStoreService').setItem('sessionId', v, { persist: true });
        }

        return v;
      }
    }),
    // Methods

    getSession: function getSession() {
      var _this = this;

      return new Ember['default'].RSVP.Promise(function (resolve, reject) {
        // Session exists
        var session = _this.get('session');
        if (session) {
          resolve(session);
        }
        // sessionId saved in local storage
        if (_this.get('sessionId')) {
          _this._getSession().then(resolve)['catch'](function (e) {
            _this.set('sessionId', null);
            _this.set('session', null);
            _this.set('user', null);
            reject(e);
          });
          // No session information available
        } else {
            reject(new Error('No session ID'));
          };
      });
    },

    getPermissions: function getPermissions() {
      var _this2 = this;

      return this.get('user.role.permissions').then(function (perms) {
        _this2.set('permissions', perms);
        return perms;
      });
    },

    _getSession: function _getSession() {
      var _this3 = this;

      return this.get('store').queryRecord('session', {}).then(function (session) {
        _this3.set('session', session);
        _this3.set('sessionId', session.get('id'));
        _this3.set('user', session.get('user'));
        return _this3.getPermissions();
      });
    },

    //updateStorage: Ember.observer('session.id', function () {
    //  let sessionId = this.get('session.id');
    //  if (sessionId) {
    //    this.set('sessionId', sessionId);
    //    this.get('localStoreService').setItem('sessionId', sessionId, { persist: true });
    //  } else {
    //    this.set('sessionId', null);
    //    this.get('localStoreService').removeItem('sessionId', { persist: true });
    //  }
    //}),

    /**
     * Removes sessionId from store and from local variable.
     * @return {Promise} Ember.RSVP.Promise resolving when logout is complete
     */
    logout: function logout() {
      var _this4 = this;

      var session = this.get('session');

      if (!session) {
        // if we have no session, reset session id
        // so ember knows that we want to show login again
        return this.set('sessionId', null);
      }

      return session.destroyRecord().then(function () {
        return _this4.set('session', null);
      })['catch'](function () {}); // catch the error - we don't care it it's already deleted etc.
    },

    /**
     * Sends email and password to backend for authentication.
     * @param  {string} email - email
     * @param  {string} password - password
     * @return {Promise} Ember.RSVP.Promise containing session
     */
    requestSession: function requestSession(email, password) {
      var _this5 = this;

      var unset = function unset() {
        _this5.set('email', null);
        _this5.set('password', null);
      };

      this.set('email', email);
      this.set('password', password);
      return this._getSession().then(unset, function (e) {
        unset();
        throw e;
      });
    }
  });

});
define('frontend-cp/services/store-cache', ['exports', 'ember', 'npm:lodash'], function (exports, Ember, _) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    store: Ember['default'].inject.service(),

    allCache: null,
    queryCache: null,

    initCache: Ember['default'].on('init', function () {
      this.set('allCache', {});
      this.set('queryCache', {});
    }),

    findAll: function findAll(type) {
      var _this = this;

      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref$reload = _ref.reload;
      var reload = _ref$reload === undefined ? false : _ref$reload;

      if (!reload && this.get('allCache.' + type)) {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this.get('allCache.' + type));
        });
      } else {
        return this.get('store').findAll(type).then(function (data) {
          _this.set('allCache.' + type, data);
          return data;
        });
      }
    },

    query: function query(type, _query) {
      var _this2 = this;

      var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref2$reload = _ref2.reload;
      var reload = _ref2$reload === undefined ? false : _ref2$reload;

      var serializedQuery = type + ':' + _['default'].map(_query, function (value, key) {
        return key + ':' + value;
      }).sort().join(':');

      if (!reload && this.get('allCache')[serializedQuery]) {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this2.get('allCache')[serializedQuery]);
        });
      } else {
        return this.get('store').query(type, _query).then(function (data) {
          _this2.get('allCache')[serializedQuery] = data;
          return data;
        });
      }
    }
  });

});
define('frontend-cp/services/suggestion/exclusion', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    exclude: function exclude(data, exclusions) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

      var excluded = [];

      exclusions || (exclusions = []);
      data || (data = []);

      data.forEach(function (element) {
        if (exclusions.indexOf(element.get(key)) === -1) {
          excluded.push(element);
        }
      });

      return excluded;
    }
  });

});
define('frontend-cp/services/suggestion/people', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var PROMISE_NAME = 'autocomplete-name';

  /**
   * Work with people suggestions via cached service.
   */
  exports['default'] = Ember['default'].Service.extend({
    store: Ember['default'].inject.service('store'),
    exclusion: Ember['default'].inject.service('suggestion/exclusion'),
    promiseQueue: Ember['default'].inject.service('suggestion/promise-queue'),

    suggest: function suggest(searchTerm, exclude) {
      var promise = this.get('store').query('identity-autocomplete-email', {
        address: searchTerm,
        exclude: exclude || []
      });

      this.get('promiseQueue').push(PROMISE_NAME, searchTerm, promise);

      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.get('promiseQueue').isDiscarded(PROMISE_NAME, searchTerm);
    },

    flushQueue: function flushQueue() {
      this.get('promiseQueue').flush(PROMISE_NAME);
    },

    exclude: function exclude(data, exclusions) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

      return this.get('exclusion').exclude(data, exclusions.map(function (record) {
        return record.get('email');
      }), key);
    }
  });

});
define('frontend-cp/services/suggestion/promise-queue', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    queue: {},

    //Queue is required, to prevent several promises to be
    //resolved in random order. For example, someone writes
    //"d" and after de-bounce (150ms), writes "demo".
    //"d" will return results, but "demo" won't. But as
    //server responds faster to the empty result, on "demo"
    //string we will get wrong result.
    push: function push(name, term, promise) {
      var queue = this.get('queue');

      if (!queue[name]) {
        queue[name] = [];
      }

      queue[name].push({
        term: term,
        promise: promise
      });
    },

    isDiscarded: function isDiscarded(name, term) {
      var queue = this.get('queue')[name] || [];
      var lastPromiseLength = queue.get('length');
      var queuedPromise = queue[lastPromiseLength - 1];

      return (queuedPromise || {}).term !== term;
    },

    flush: function flush(name) {
      if (this.get('queue')[name] && this.get('queue')[name].length) {
        this.get('queue')[name].clear();
        delete this.get('queue')[name];
      }
    }
  });

});
define('frontend-cp/services/suggestion/tag', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    storeCache: Ember['default'].inject.service('store-cache'),
    exclusion: Ember['default'].inject.service('suggestion/exclusion'),

    suggest: function suggest(searchTerm) {
      return this.get('storeCache').query('tag', {
        name: searchTerm
      });
    },

    suggestFilter: function suggestFilter(records, searchTerm, key) {
      var regexp = new RegExp(searchTerm, 'i');

      return new Ember['default'].RSVP.Promise(function (resolve) {
        resolve(records.filter(function (team) {
          return regexp.test(team.get(key));
        }));
      });
    },

    exclude: function exclude(data, exclusions) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

      return this.get('exclusion').exclude(data, exclusions, key);
    }
  });

});
define('frontend-cp/services/tabs', ['exports', 'ember', 'frontend-cp/models/tab', 'npm:lodash'], function (exports, Ember, Tab, _) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    localStoreService: Ember['default'].inject.service('localStore'),

    tabModels: null,

    selectedTabModel: null,

    init: function init() {
      this._super();
      this.set('tabModels', this.get('tabModels') || []);
    },

    selectedTab: Ember['default'].computed('selectedTabModel', function () {
      var selectedTab = this.get('selectedTabModel');
      if (!selectedTab) {
        return this.getMainTab();
      }
      return selectedTab;
    }),

    tabs: Ember['default'].computed('tabModels.[]', 'tabModels', function () {
      return this.get('tabModels').slice(1);
    }),

    tabObserver: Ember['default'].observer('tabModels.[]', 'tabModels', function () {
      this.saveTabsToStorage();
    }),

    /**
     * Create a new tab and add it to the store
     * @param {string} options.baseUrl URL path for the tab's main root
     * @param {string} options.targetUrl URL which is currently shown in the tab (could be nested inside the tab's main route)
     * @param {string} [options.label] Tab label
     * @return {Tab} Newly-created tab object
     */
    createTab: function createTab() {
      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var _ref$url = _ref.url;
      var url = _ref$url === undefined ? null : _ref$url;
      var _ref$baseUrl = _ref.baseUrl;
      var baseUrl = _ref$baseUrl === undefined ? null : _ref$baseUrl;
      var _ref$label = _ref.label;
      var label = _ref$label === undefined ? null : _ref$label;

      var tab = Tab['default'].create({
        url: url,
        baseUrl: baseUrl || url,
        label: label,
        selected: false,
        state: null
      });

      this.get('tabModels').pushObject(tab);
      this.saveTabsToStorage();
      return tab;
    },

    /**
     * Save a set of tabs to local storage
     * @param {Tab[]} tabModels Tab models to save
     */
    saveTabsToStorage: function saveTabsToStorage() {
      // Convert tab models into an array of simplified tab objects
      var tabInfos = this.get('tabModels').map(function (tabModel) {
        var tabInfo = _['default'].pick(tabModel, ['baseUrl', 'url', 'label']);
        return tabInfo;
      }).toArray();

      // Copy tabs array into store
      this.get('localStoreService').setItem('tabs', tabInfos, {
        persist: false
      });
    },

    getMainTab: function getMainTab() {
      // The first item is the "main" tab, all others are tabbed pages
      return this.get('tabModels').objectAt(0) || this.createTab();
    },

    /*
     * Removes the tab from the collection and attempts to work out the
     * selected tab if required.
     * Saves tabs to localStorage
     */
    remove: function remove(tab) {
      if (tab === this.get('selectedTab')) {
        var index = this.get('tabModels').indexOf(tab);
        if (index < this.get('tabModels.length') - 1) {
          this.set('selectedTabModel', this.get('tabModels').objectAt(index + 1));
        } else {
          this.set('selectedTabModel', this.get('tabModels').objectAt(index - 1));
        }
      }
      this.get('tabModels').removeObject(tab);
      this.saveTabsToStorage();
    },

    select: function select(tab) {
      this.set('selectedTabModel', tab);
    },

    updateTab: function updateTab(tab, field, value) {
      tab.set(field, value);
      this.saveTabsToStorage();
    },

    /*
     * Attemps to find an existing tab by URL.
     * Creates a tab if it does not already exist
     * @return {Tab} tab
     */
    getOrCreateTab: function getOrCreateTab(url, baseUrl, isTabbedPage) {
      var tabs = this.get('tabModels');

      var existingTab = tabs.find(function (tab) {
        return url.startsWith(tab.get('baseUrl'));
      });
      if (!existingTab && !isTabbedPage) {
        existingTab = this.getMainTab();
      }
      if (existingTab) {
        if (existingTab.get('url') !== url) {
          existingTab.set('url', url);
          existingTab.set('state', {});
        }
        return existingTab;
      } else {
        return this.createTab({
          url: url,
          baseUrl: baseUrl
        });
      }
    },

    /**
     * Load a set of tabs from local storage
     * @return {Tab[]} Saved tab models, or an empty array if there are no saved tabs
     */
    loadTabsFromStorage: function loadTabsFromStorage() {
      // Load tabs array from the store
      var tabInfos = this.get('localStoreService').getItem('tabs', {
        persist: false
      });
      if (!tabInfos) {
        return [];
      }

      // Convert simplified tab objects into an array of Tab models
      var tabModels = tabInfos.map(function (tabInfo) {
        return Tab['default'].create({
          baseUrl: tabInfo.baseUrl,
          url: tabInfo.url,
          label: tabInfo.label
        });
      });

      var invalidUrls = ['/agent/cases/new'];
      this.set('tabModels', tabModels.filter(function (tab) {
        return invalidUrls.indexOf(tab.url) === -1;
      }));
    }
  });

});
define('frontend-cp/services/url', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    currentUrl: null
  });

});
define('frontend-cp/services/validations', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var set = Ember['default'].set;

  exports['default'] = Ember['default'].Object.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });

});
define('frontend-cp/session/admin/channels/twitter/edit/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.channels.twitter.index');
      },

      saveTwitterAccount: function saveTwitterAccount() {
        return this.get('model').save();
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.transitionToRoute('session.admin.channels.twitter.index');
      }
    }
  });

});
define('frontend-cp/session/admin/channels/twitter/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Route.extend({

    intlService: Ember['default'].inject.service('intl'),
    model: function model(params) {
      return this.store.find('twitter-account', params.account_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {

          var translatedConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });

});
define('frontend-cp/session/admin/channels/twitter/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/twitter/edit",[],["account",["subexpr","@mut",[["get","model",["loc",[null,[2,10],[2,15]]]]],[],[]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[3,11],[3,44]]]],"onSave",["subexpr","action",["saveTwitterAccount"],[],["loc",[null,[4,9],[4,38]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[5,12],[5,30]]]]],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/channels/twitter/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Controller.extend({
    intlService: Ember['default'].inject.service('intl'),

    enabledAccounts: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') === true;
      });
    }),
    disabledAccounts: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') !== true;
      });
    }),

    actions: {
      toggleEnabledProperty: function toggleEnabledProperty(account) {
        account.toggleProperty('isEnabled');
        account.save();
      },
      showDeleteConfirmation: function showDeleteConfirmation(account) {
        if (confirm(this.get('intlService').findTranslationByKey('generic.confirm.delete').translation)) {
          account.destroyRecord();
        }
      },
      redirectToTwitterAuthenticationEndpoint: function redirectToTwitterAuthenticationEndpoint() {
        this.store.queryRecord('oauth-link', { callback: '/admin/channels/twitter/link' }).then(function (link) {
          window.location.href = link.get('id');
        });
      }

    }

  });

});
define('frontend-cp/session/admin/channels/twitter/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.store.find('twitter-account');
    }

  });

});
define('frontend-cp/session/admin/channels/twitter/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 64
                    },
                    "end": {
                      "line": 18,
                      "column": 148
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode(" ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1,"class","t-caption");
                  var el2 = dom.createTextNode(" (");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(") ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
                  return morphs;
                },
                statements: [
                  ["content","account.brand.name",["loc",[null,[18,117],[18,139]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 14
                    },
                    "end": {
                      "line": 22,
                      "column": 116
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[22,89],[22,114]]]]],[],["loc",[null,[22,72],[22,116]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 28,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-2/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createTextNode("@");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3, 1]);
                var element8 = dom.childAt(element7, [3]);
                var element9 = dom.childAt(element7, [5]);
                var morphs = new Array(7);
                morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]),1,1);
                morphs[1] = dom.createMorphAt(element6,3,3);
                morphs[2] = dom.createMorphAt(element7,1,1);
                morphs[3] = dom.createElementMorph(element8);
                morphs[4] = dom.createMorphAt(element8,0,0);
                morphs[5] = dom.createElementMorph(element9);
                morphs[6] = dom.createMorphAt(element9,0,0);
                return morphs;
              },
              statements: [
                ["content","account.screenName",["loc",[null,[18,34],[18,56]]]],
                ["block","if",[["get","account.brand.name",["loc",[null,[18,70],[18,88]]]]],[],0,null,["loc",[null,[18,64],[18,155]]]],
                ["block","link-to",["session.admin.channels.twitter.edit",["get","account",["loc",[null,[22,63],[22,70]]]]],[],1,null,["loc",[null,[22,14],[22,128]]]],
                ["element","action",["toggleEnabledProperty",["get","account",["loc",[null,[23,59],[23,66]]]]],[],["loc",[null,[23,26],[23,68]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[23,86],[23,114]]]]],[],["loc",[null,[23,69],[23,116]]]],
                ["element","action",["showDeleteConfirmation",["get","account",["loc",[null,[24,60],[24,67]]]]],[],["loc",[null,[24,26],[24,69]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[24,87],[24,114]]]]],[],["loc",[null,[24,70],[24,116]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],[],0,null,["loc",[null,[15,6],[28,29]]]]
            ],
            locals: ["account"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 31,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[10,23],[10,51]]]]],[],["loc",[null,[10,6],[10,53]]]],
            ["block","each",[["get","enabledAccounts",["loc",[null,[14,12],[14,27]]]]],[],0,null,["loc",[null,[14,4],[30,13]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 8
                    },
                    "end": {
                      "line": 52,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-2/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-bold");
                  var el4 = dom.createTextNode("@");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode(" ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n         ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n              ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n                ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [1]);
                  var element2 = dom.childAt(element0, [3, 1]);
                  var element3 = dom.childAt(element2, [1]);
                  var element4 = dom.childAt(element2, [3]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]),1,1);
                  morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]),0,0);
                  morphs[2] = dom.createElementMorph(element3);
                  morphs[3] = dom.createMorphAt(element3,0,0);
                  morphs[4] = dom.createElementMorph(element4);
                  morphs[5] = dom.createMorphAt(element4,0,0);
                  return morphs;
                },
                statements: [
                  ["content","account.screenName",["loc",[null,[43,36],[43,58]]]],
                  ["content","account.brand.title",["loc",[null,[43,90],[43,113]]]],
                  ["element","action",["toggleEnabledProperty",["get","account",["loc",[null,[47,61],[47,68]]]]],[],["loc",[null,[47,28],[47,70]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[47,88],[47,115]]]]],[],["loc",[null,[47,71],[47,117]]]],
                  ["element","action",["showDeleteConfirmation",["get","account",["loc",[null,[48,62],[48,69]]]]],[],["loc",[null,[48,28],[48,71]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[48,89],[48,116]]]]],[],["loc",[null,[48,72],[48,118]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 6
                  },
                  "end": {
                    "line": 53,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],[],0,null,["loc",[null,[40,8],[52,31]]]]
              ],
              locals: ["account"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[36,25],[36,54]]]]],[],["loc",[null,[36,8],[36,56]]]],
              ["block","each",[["get","disabledAccounts",["loc",[null,[39,14],[39,30]]]]],[],0,null,["loc",[null,[39,6],[53,15]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 55,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[34,4],[54,23]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[8,2],[31,21]]]],
          ["block","if",[["get","disabledAccounts.length",["loc",[null,[33,8],[33,31]]]]],[],1,null,["loc",[null,[33,2],[55,9]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.headings.index"],[],["loc",[null,[2,22],[2,63]]]]],[],["loc",[null,[2,6],[2,64]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.buttons.create_account"],[],["loc",[null,[3,27],[3,76]]]]],[],["loc",[null,[3,11],[3,77]]]],"onSave",["subexpr","action",["redirectToTwitterAuthenticationEndpoint"],[],["loc",[null,[4,7],[4,57]]]]],["loc",[null,[1,0],[5,2]]]],
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[7,0],[58,25]]]],
        ["inline","ko-admin/page-footer",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.headings.index"],[],["loc",[null,[61,22],[61,63]]]]],[],["loc",[null,[61,6],[61,64]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.twitter.buttons.create_account"],[],["loc",[null,[62,27],[62,76]]]]],[],["loc",[null,[62,11],[62,77]]]],"onSave",["subexpr","action",["redirectToTwitterAuthenticationEndpoint"],[],["loc",[null,[63,7],[63,57]]]]],["loc",[null,[60,0],[64,2]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/channels/twitter/link/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),

    queryParams: ['oauth_token', 'oauth_verifier'],

    oauth_token: null,
    oauth_verifier: null,

    updateBackendWithTwitterInfo: function updateBackendWithTwitterInfo() {
      var _this = this;

      if (this.get('oauth_token') && this.get('oauth_verifier')) {
        this.store.createRecord('twitter-account-callback', {
          oauthToken: this.get('oauth_token'),
          oauthVerifier: this.get('oauth_verifier')
        }).save().then(function () {
          _this.get('notification').add({
            type: 'success',
            title: _this.get('intl').findTranslationByKey('generic.changes_saved').translation,
            autodismiss: true
          });

          _this.transitionTo('session.admin.channels.twitter.index');
        })['catch'](function () {
          _this.transitionTo('session.admin.channels.twitter.index');
        });
      }
    }

  });

});
define('frontend-cp/session/admin/channels/twitter/link/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    setupController: function setupController() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._super(args);
      this.controller.updateBackendWithTwitterInfo();
    }

  });

});
define('frontend-cp/session/admin/manage/case-fields/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.manage.case-fields.new',

    model: function model(params) {
      return this.store.find('case-field', params.case_field_id);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      // force a background reload of the model, just in case it's changed
      model.reload();
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-fields/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]]],["loc",[null,[1,0],[9,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-fields/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    actions: {
      transitionToNewCaseFieldRoute: function transitionToNewCaseFieldRoute() {
        this.transitionToRoute('session.admin.manage.case-fields.select-type');
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-fields/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.store.find('case-field');
    }

  });

});
define('frontend-cp/session/admin/manage/case-fields/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n  ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title","Case Fields","buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.buttons.add_new_casefield"],[],["loc",[null,[3,29],[3,84]]]]],[],["loc",[null,[3,13],[3,85]]]],"onSave",["subexpr","action",["transitionToNewCaseFieldRoute"],[],["loc",[null,[4,9],[4,49]]]],"pageCopy",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.description"],[],["loc",[null,[5,27],[5,68]]]]],[],["loc",[null,[5,11],[5,69]]]]],["loc",[null,[1,0],[6,2]]]],
        ["inline","ko-admin/case-fields/index",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[8,37],[8,42]]]]],[],[]]],["loc",[null,[8,2],[8,44]]]],
        ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.buttons.add_new_casefield"],[],["loc",[null,[9,50],[9,105]]]]],[],["loc",[null,[9,34],[9,106]]]],"onSave",["subexpr","action",["transitionToNewCaseFieldRoute"],[],["loc",[null,[9,114],[9,154]]]]],["loc",[null,[9,0],[9,156]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-fields/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),
    customFields: Ember['default'].inject.service('custom-fields'),

    queryParams: ['caseFieldType'],
    caseFieldType: null,

    title: Ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.manage.case-fields.index');
      },

      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.set('model.fieldType', caseFieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        return this.get('customFields').persist(this.get('model'));
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-fields/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('case-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      if (model.get('isChoiceField') && model.get('options.length') === 0) {
        // we always need an option for the user to start editing
        model.get('options').pushObject(this.store.createRecord('field-option', {
          sortOrder: 1
        }));
      }
      controller.set('model', model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-fields/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]]],["loc",[null,[1,0],[9,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-fields/select-type/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.transitionTo('session.admin.manage.case-fields.new', caseFieldType);
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.manage.case-fields.index');
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-fields/select-type/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('frontend-cp/session/admin/manage/case-fields/select-type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 67
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.casefields.new.heading"],[],["loc",[null,[1,45],[1,86]]]]],[],["loc",[null,[1,29],[1,87]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[1,97],[1,130]]]]],["loc",[null,[1,0],[1,132]]]],
        ["inline","ko-admin/case-fields/select-type",[],["onFieldTypeSelect",["subexpr","action",["setCaseFieldType"],[],["loc",[null,[2,53],[2,80]]]]],["loc",[null,[2,0],[2,82]]]],
        ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[3,32],[3,65]]]]],["loc",[null,[3,0],[3,67]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-forms/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var service = Ember['default'].inject.service;

  exports['default'] = Ember['default'].Route.extend({
    intl: service(),

    controllerName: 'session.admin.manage.case-forms.new',

    model: function model(params) {
      return this.store.find('case-form', params.case_form_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation); // eslint-disable-line no-alert

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
          } else {
            transition.abort();
          }
        }
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-forms/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-forms/edit",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.edit.heading"],[],["loc",[null,[2,24],[2,65]]]]],[],["loc",[null,[2,8],[2,66]]]],"caseForm",["subexpr","@mut",[["get","model",["loc",[null,[3,11],[3,16]]]]],[],[]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[4,11],[4,44]]]],"onSuccess",["subexpr","action",["successTransitionToIndexRoute"],[],["loc",[null,[5,12],[5,52]]]]],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-forms/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Controller.extend({

    session: Ember['default'].inject.service(),
    intlService: Ember['default'].inject.service('intl'),

    enabledForms: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (form) {
        return form.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    disabledForms: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (form) {
        return !form.get('isEnabled');
      });
    }),

    actions: {
      makeDefault: function makeDefault(caseform) {
        this.store.peekAll('case-form').forEach(function (caseform) {
          caseform.set('isDefault', false);
        });
        caseform.set('isDefault', true);
        //TODO: this model is left dirty - it is not an issue,
        //but ideally we would mark this as clean.

        var payload = { form_id: caseform.get('id') }; // eslint-disable-line camelcase

        Ember['default'].$.ajax('/api/v1/cases/forms/default', {
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify(payload),
          headers: {
            'Content-Type': 'application/json',
            'X-Session-ID': this.get('session.sessionId')
          }
        });

        return false;
      },

      reorderForms: function reorderForms(orderedForms) {
        var startingSortOrderNumber = 1;
        var orderedIds = orderedForms.map(function (form) {
          return form.id;
        });

        var sortOrder = startingSortOrderNumber;
        orderedForms.forEach(function (form) {
          form.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var payload = {
          form_ids: orderedIds.toString() // eslint-disable-line camelcase
        };

        Ember['default'].$.ajax('/api/v1/cases/forms/reorder', {
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify(payload),
          headers: {
            'Content-Type': 'application/json',
            'X-Session-ID': this.get('session.sessionId')
          }
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(caseform) {
        caseform.toggleProperty('isEnabled');
        caseform.save();
      },

      transitionToNewCaseFormRoute: function transitionToNewCaseFormRoute() {
        this.transitionToRoute('session.admin.manage.case-forms.new');
      },
      editForm: function editForm(form) {
        this.transitionToRoute('session.admin.manage.case-forms.edit', form);
      },

      showDeleteConfirmation: function showDeleteConfirmation(form) {
        var deleteConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.delete');

        if (confirm(deleteConfirmationMessage.translation)) {
          this.send('deleteField', form);
        }
      },
      deleteField: function deleteField(form) {
        form.destroyRecord();
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-forms/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('case-form');
    }
  });

});
define('frontend-cp/session/admin/manage/case-forms/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 52
                    },
                    "end": {
                      "line": 16,
                      "column": 154
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1,"class","t-caption");
                  var el2 = dom.createTextNode("(");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(")");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),1,1);
                  return morphs;
                },
                statements: [
                  ["inline","format-message",[["subexpr","intl-get",["generic.default"],[],["loc",[null,[16,116],[16,144]]]]],[],["loc",[null,[16,99],[16,146]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            var child1 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 12
                    },
                    "end": {
                      "line": 24,
                      "column": 12
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1,"href","#");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(element2,0,0);
                  return morphs;
                },
                statements: [
                  ["element","action",["makeDefault",["get","form",["loc",[null,[23,49],[23,53]]]]],["bubbles",false],["loc",[null,[23,26],[23,69]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.make_default"],[],["loc",[null,[23,87],[23,120]]]]],[],["loc",[null,[23,70],[23,122]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 4
                  },
                  "end": {
                    "line": 29,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/2");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n     ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/2");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions t-right");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1]);
                var element4 = dom.childAt(element3, [1]);
                var element5 = dom.childAt(element3, [3, 1]);
                var element6 = dom.childAt(element5, [1]);
                var element7 = dom.childAt(element5, [3]);
                var element8 = dom.childAt(element5, [7]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]),0,0);
                morphs[1] = dom.createMorphAt(element4,2,2);
                morphs[2] = dom.createElementMorph(element6);
                morphs[3] = dom.createMorphAt(element6,0,0);
                morphs[4] = dom.createElementMorph(element7);
                morphs[5] = dom.createMorphAt(element7,0,0);
                morphs[6] = dom.createMorphAt(element5,5,5);
                morphs[7] = dom.createElementMorph(element8);
                morphs[8] = dom.createMorphAt(element8,0,0);
                return morphs;
              },
              statements: [
                ["content","form.title",["loc",[null,[16,31],[16,45]]]],
                ["block","if",[["get","form.isDefault",["loc",[null,[16,58],[16,72]]]]],[],0,null,["loc",[null,[16,52],[16,161]]]],
                ["element","action",["editForm",["get","form",["loc",[null,[20,44],[20,48]]]]],[],["loc",[null,[20,24],[20,50]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[20,68],[20,93]]]]],[],["loc",[null,[20,51],[20,95]]]],
                ["element","action",["toggleEnabledStatus",["get","form",["loc",[null,[21,55],[21,59]]]]],[],["loc",[null,[21,24],[21,61]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[21,79],[21,107]]]]],[],["loc",[null,[21,62],[21,109]]]],
                ["block","if",[["subexpr","not",[["get","form.isDefault",["loc",[null,[22,23],[22,37]]]]],[],["loc",[null,[22,18],[22,38]]]]],[],1,null,["loc",[null,[22,12],[24,19]]]],
                ["element","action",["showDeleteConfirmation",["get","form",["loc",[null,[25,58],[25,62]]]]],[],["loc",[null,[25,24],[25,64]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[25,82],[25,109]]]]],[],["loc",[null,[25,65],[25,111]]]]
              ],
              locals: [],
              templates: [child0, child1]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 2
                },
                "end": {
                  "line": 30,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editForm","content",["subexpr","@mut",[["get","form",["loc",[null,[13,52],[13,56]]]]],[],[]]],0,null,["loc",[null,[13,4],[29,27]]]]
            ],
            locals: ["form"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 0
              },
              "end": {
                "line": 31,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[10,21],[10,49]]]]],[],["loc",[null,[10,4],[10,51]]]],
            ["block","ko-reorderable-list",[],["reorderedListAction","reorderForms","items",["subexpr","@mut",[["get","enabledForms",["loc",[null,[12,66],[12,78]]]]],[],[]]],0,null,["loc",[null,[12,2],[30,26]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 4
                    },
                    "end": {
                      "line": 51,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/2");
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n     ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/2");
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions t-right");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n          ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n        ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n      ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1, 1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                  morphs[1] = dom.createElementMorph(element1);
                  morphs[2] = dom.createMorphAt(element1,0,0);
                  return morphs;
                },
                statements: [
                  ["content","form.title",["loc",[null,[43,41],[43,55]]]],
                  ["element","action",["toggleEnabledStatus",["get","form",["loc",[null,[47,57],[47,61]]]]],[],["loc",[null,[47,26],[47,63]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[47,81],[47,108]]]]],[],["loc",[null,[47,64],[47,110]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 2
                  },
                  "end": {
                    "line": 52,
                    "column": 2
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],[],0,null,["loc",[null,[40,4],[51,27]]]]
              ],
              locals: ["form"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 35,
                  "column": 0
                },
                "end": {
                  "line": 53,
                  "column": 0
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[37,21],[37,50]]]]],[],["loc",[null,[37,4],[37,52]]]],
              ["block","each",[["get","disabledForms",["loc",[null,[39,10],[39,23]]]]],[],0,null,["loc",[null,[39,2],[52,11]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[35,0],[53,19]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[8,0],[31,19]]]],
          ["block","if",[["get","disabledForms",["loc",[null,[34,6],[34,19]]]]],[],1,null,["loc",[null,[34,0],[54,7]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 62,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms"],[],["loc",[null,[2,24],[2,52]]]]],[],["loc",[null,[2,8],[2,53]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.buttons.add_new_caseform"],[],["loc",[null,[3,29],[3,82]]]]],[],["loc",[null,[3,13],[3,83]]]],"onSave",["subexpr","action",["transitionToNewCaseFormRoute"],[],["loc",[null,[4,9],[4,48]]]]],["loc",[null,[1,0],[5,2]]]],
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[7,0],[55,25]]]],
        ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.buttons.add_new_caseform"],[],["loc",[null,[59,29],[59,82]]]]],[],["loc",[null,[59,13],[59,83]]]],"onSave",["subexpr","action",["transitionToNewCaseFormRoute"],[],["loc",[null,[60,9],[60,48]]]]],["loc",[null,[58,0],[61,2]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/manage/case-forms/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.manage.case-forms.index');
      },

      successTransitionToIndexRoute: function successTransitionToIndexRoute() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.transitionToRoute('session.admin.manage.case-forms.index');
      },

      rollBackModel: function rollBackModel() {
        this.get('model').rollback();
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });

});
define('frontend-cp/session/admin/manage/case-forms/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var service = Ember['default'].inject.service;

  exports['default'] = Ember['default'].Route.extend({
    intl: service(),

    model: function model() {
      var caseForm = this.store.createRecord('case-form');
      this.store.find('case-field').then(function (caseFields) {
        caseFields.forEach(function (field) {
          if (field.get('isSystem')) {
            caseForm.get('fields').pushObject(field);
          }
        });
        // rebuild relationship cache
        // because these changes are made by default
        caseForm.cacheRelationships();
      });

      return caseForm;
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation); // eslint-disable-line no-alert

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });

});
define('frontend-cp/session/admin/manage/case-forms/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-forms/edit",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.caseforms.new.heading"],[],["loc",[null,[2,24],[2,64]]]]],[],["loc",[null,[2,8],[2,65]]]],"caseForm",["subexpr","@mut",[["get","model",["loc",[null,[3,11],[3,16]]]]],[],[]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[4,11],[4,44]]]],"onSuccess",["subexpr","action",["successTransitionToIndexRoute"],[],["loc",[null,[5,12],[5,52]]]]],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/views/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    controllerName: 'session.admin.manage.views.new',
    intl: Ember['default'].inject.service(),

    model: function model(params) {
      return this.store.find('view', params.view_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
          this.controller.send('rollBackModel');
        }
      }
    }
  });

});
define('frontend-cp/session/admin/manage/views/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/views/edit",[],["currentView",["subexpr","@mut",[["get","model",["loc",[null,[2,14],[2,19]]]]],[],[]],"title",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.edit"],[],["loc",[null,[3,24],[3,61]]]]],[],["loc",[null,[3,8],[3,62]]]],"onSuccess",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[4,12],[4,45]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[5,11],[5,44]]]]],["loc",[null,[1,0],[6,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/manage/views/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var INBOX_VIEW_ID = 1;

  exports['default'] = Ember['default'].Controller.extend({
    intl: Ember['default'].inject.service(),
    sessionService: Ember['default'].inject.service('session'),

    inboxView: Ember['default'].computed('model.[]', function () {
      return this.get('model').find(function (caseView) {
        return parseInt(caseView.get('id')) === INBOX_VIEW_ID;
      });
    }),

    enabledViews: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (view) {
        return view.get('isEnabled') && parseInt(view.get('id')) !== INBOX_VIEW_ID;
      }).sortBy('sortOrder');
    }),

    disabledViews: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (view) {
        return !view.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    actions: {
      transitionToNewViewRoute: function transitionToNewViewRoute() {
        this.transitionToRoute('session.admin.manage.views.new');
      },
      editView: function editView(view) {
        this.transitionToRoute('session.admin.manage.views.edit', view);
      },

      reorderViews: function reorderViews(orderedViews) {
        var startingSortOrderNumber = 2; // The inbox is always frst

        var orderedIds = orderedViews.getEach('id');

        var sortOrder = startingSortOrderNumber;
        orderedViews.forEach(function (customView) {
          customView.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var payload = {
          view_ids: orderedIds.toString() // eslint-disable-line camelcase
        };

        Ember['default'].$.ajax('/api/v1/views/reorder', {
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify(payload),
          headers: {
            'Content-Type': 'application/json',
            'X-Session-ID': this.get('sessionService.sessionId')
          }
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(view) {
        view.toggleProperty('isEnabled');
        view.save();
      },

      showDeleteConfirmation: function showDeleteConfirmation(view) {
        var locales = this.get('intl.locales');
        var deleteConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.delete', locales);

        if (confirm(deleteConfirmationMessage.translation)) {
          // eslint-disable-line
          view.destroyRecord();
        }
      }
    }
  });

});
define('frontend-cp/session/admin/manage/views/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    model: function model() {
      return this.store.find('view');
    }
  });

});
define('frontend-cp/session/admin/manage/views/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 2
                },
                "end": {
                  "line": 27,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","layout");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","t-bold");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","layout__item u-1/3 t-caption");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("span");
              dom.setAttribute(el3,"class","t-caption");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode(" ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("\n     ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2,"class","layout__item u-1/3");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3,"class","ko-simple-list__actions");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("a");
              dom.setAttribute(el4,"href","#");
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element11 = dom.childAt(fragment, [1]);
              var element12 = dom.childAt(element11, [3, 1]);
              var element13 = dom.childAt(element11, [5, 1, 1]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(dom.childAt(element11, [1, 1]),1,1);
              morphs[1] = dom.createMorphAt(element12,1,1);
              morphs[2] = dom.createMorphAt(element12,3,3);
              morphs[3] = dom.createElementMorph(element13);
              morphs[4] = dom.createMorphAt(element13,0,0);
              return morphs;
            },
            statements: [
              ["content","inboxView.title",["loc",[null,[13,12],[13,31]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.shared_with"],[],["loc",[null,[18,29],[18,61]]]]],[],["loc",[null,[18,12],[18,63]]]],
              ["content","inboxView.visibilityString",["loc",[null,[18,64],[18,94]]]],
              ["element","action",["editView",["get","inboxView",["loc",[null,[23,44],[23,53]]]]],[],["loc",[null,[23,24],[23,55]]]],
              ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[23,73],[23,98]]]]],[],["loc",[null,[23,56],[23,100]]]]
            ],
            locals: [],
            templates: []
          };
        }());
        var child1 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 4
                  },
                  "end": {
                    "line": 50,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3 t-caption");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-caption");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n     ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n           ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n             ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n             ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4,"class","t-caption");
                var el5 = dom.createTextNode("|");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n             ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("span");
                dom.setAttribute(el4,"class","t-caption");
                var el5 = dom.createTextNode("|");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n           ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var element6 = dom.childAt(element5, [3, 1]);
                var element7 = dom.childAt(element5, [5, 1]);
                var element8 = dom.childAt(element7, [1]);
                var element9 = dom.childAt(element7, [5]);
                var element10 = dom.childAt(element7, [9]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element5, [1, 1]),1,1);
                morphs[1] = dom.createMorphAt(element6,1,1);
                morphs[2] = dom.createMorphAt(element6,3,3);
                morphs[3] = dom.createElementMorph(element8);
                morphs[4] = dom.createMorphAt(element8,0,0);
                morphs[5] = dom.createElementMorph(element9);
                morphs[6] = dom.createMorphAt(element9,0,0);
                morphs[7] = dom.createElementMorph(element10);
                morphs[8] = dom.createMorphAt(element10,0,0);
                return morphs;
              },
              statements: [
                ["content","enabledView.title",["loc",[null,[34,12],[34,33]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.shared_with"],[],["loc",[null,[39,29],[39,61]]]]],[],["loc",[null,[39,12],[39,63]]]],
                ["content","enabledView.visibilityString",["loc",[null,[39,64],[39,96]]]],
                ["element","action",["editView",["get","enabledView",["loc",[null,[44,45],[44,56]]]]],[],["loc",[null,[44,25],[44,58]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[44,76],[44,101]]]]],[],["loc",[null,[44,59],[44,103]]]],
                ["element","action",["toggleEnabledStatus",["get","enabledView",["loc",[null,[45,89],[45,100]]]]],[],["loc",[null,[45,58],[45,102]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[45,120],[45,148]]]]],[],["loc",[null,[45,103],[45,150]]]],
                ["element","action",["showDeleteConfirmation",["get","enabledView",["loc",[null,[46,92],[46,103]]]]],[],["loc",[null,[46,58],[46,105]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[46,123],[46,150]]]]],[],["loc",[null,[46,106],[46,152]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 2
                },
                "end": {
                  "line": 51,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editView","content",["subexpr","@mut",[["get","enabledView",["loc",[null,[30,52],[30,63]]]]],[],[]]],0,null,["loc",[null,[30,4],[50,27]]]]
            ],
            locals: ["enabledView"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 0
              },
              "end": {
                "line": 52,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            morphs[2] = dom.createMorphAt(fragment,5,5,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[6,21],[6,49]]]]],[],["loc",[null,[6,4],[6,51]]]],
            ["block","ko-simple-list/row",[],["action","editView","content",["subexpr","@mut",[["get","inboxView",["loc",[null,[9,50],[9,59]]]]],[],[]]],0,null,["loc",[null,[9,2],[27,25]]]],
            ["block","ko-reorderable-list",[],["reorderedListAction","reorderViews","items",["subexpr","@mut",[["get","enabledViews",["loc",[null,[29,66],[29,78]]]]],[],[]]],1,null,["loc",[null,[29,2],[51,26]]]]
          ],
          locals: [],
          templates: [child0, child1]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 61,
                      "column": 6
                    },
                    "end": {
                      "line": 76,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-bold t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("span");
                  dom.setAttribute(el4,"class","t-caption");
                  var el5 = dom.createTextNode("|");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element0, [5, 1]);
                  var element3 = dom.childAt(element2, [1]);
                  var element4 = dom.childAt(element2, [5]);
                  var morphs = new Array(7);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                  morphs[1] = dom.createMorphAt(element1,0,0);
                  morphs[2] = dom.createMorphAt(element1,2,2);
                  morphs[3] = dom.createElementMorph(element3);
                  morphs[4] = dom.createMorphAt(element3,0,0);
                  morphs[5] = dom.createElementMorph(element4);
                  morphs[6] = dom.createMorphAt(element4,0,0);
                  return morphs;
                },
                statements: [
                  ["content","disabledView.title",["loc",[null,[64,43],[64,65]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.shared_with"],[],["loc",[null,[67,53],[67,85]]]]],[],["loc",[null,[67,36],[67,87]]]],
                  ["content","disabledView.visibilityString",["loc",[null,[67,88],[67,121]]]],
                  ["element","action",["toggleEnabledStatus",["get","disabledView",["loc",[null,[71,57],[71,69]]]]],[],["loc",[null,[71,26],[71,71]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[71,89],[71,116]]]]],[],["loc",[null,[71,72],[71,118]]]],
                  ["element","action",["showDeleteConfirmation",["get","disabledView",["loc",[null,[72,93],[72,105]]]]],[],["loc",[null,[72,59],[72,107]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[72,125],[72,152]]]]],[],["loc",[null,[72,108],[72,154]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 60,
                    "column": 4
                  },
                  "end": {
                    "line": 77,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],[],0,null,["loc",[null,[61,6],[76,29]]]]
              ],
              locals: ["disabledView"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 56,
                  "column": 2
                },
                "end": {
                  "line": 78,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[58,23],[58,52]]]]],[],["loc",[null,[58,6],[58,54]]]],
              ["block","each",[["get","disabledViews",["loc",[null,[60,12],[60,25]]]]],[],0,null,["loc",[null,[60,4],[77,13]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 0
              },
              "end": {
                "line": 79,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[56,2],[78,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 80,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[4,0],[52,19]]]],
          ["block","if",[["get","disabledViews.length",["loc",[null,[55,6],[55,26]]]]],[],1,null,["loc",[null,[55,0],[79,7]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 87,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.views"],[],["loc",[null,[1,45],[1,69]]]]],[],["loc",[null,[1,29],[1,70]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.views.buttons.add_new"],[],["loc",[null,[1,98],[1,138]]]]],[],["loc",[null,[1,82],[1,139]]]],"onSave",["subexpr","action",["transitionToNewViewRoute"],[],["loc",[null,[1,147],[1,182]]]]],["loc",[null,[1,0],[1,184]]]],
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[3,0],[80,25]]]],
        ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.views.buttons.add_new"],[],["loc",[null,[84,27],[84,67]]]]],[],["loc",[null,[84,11],[84,68]]]],"onSave",["subexpr","action",["transitionToNewViewRoute"],[],["loc",[null,[85,7],[85,42]]]]],["loc",[null,[83,0],[86,2]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/manage/views/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.manage.views.index');
      },

      rollBackModel: function rollBackModel() {
        this.get('model').rollback();
      },

      saved: function saved() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });

});
define('frontend-cp/session/admin/manage/views/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    intl: Ember['default'].inject.service(),

    model: function model() {
      var newView = this.store.createRecord('view');

      /* Setup defaults and recache the relationships */
      var firstProposition = this.store.createRecord('proposition', {});
      //let firstCollection = this.store.createRecord('predicate-collection', {
      //  propositions: [firstProposition]
      //});

      newView.get('predicateCollections').createRecord({
        propositions: [firstProposition]
      });
      newView.cacheRelationships();
      return newView;
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });

});
define('frontend-cp/session/admin/manage/views/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/views/edit",[],["currentView",["subexpr","@mut",[["get","model",["loc",[null,[2,14],[2,19]]]]],[],[]],"title",["subexpr","format-message",[["subexpr","intl-get",["admin.views.heading.new"],[],["loc",[null,[3,24],[3,60]]]]],[],["loc",[null,[3,8],[3,61]]]],"onSuccess",["subexpr","action",["saved"],[],["loc",[null,[4,12],[4,28]]]]],["loc",[null,[1,0],[5,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/organization-fields/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.organization-fields.new',

    model: function model(params) {
      return this.store.find('organization-field', params.organization_field_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/people/organization-fields/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]],"isApiFieldKeyAvailable",false,"isAgentCaseFieldAvailable",false,"isCustomerEditAvailable",false],["loc",[null,[1,0],[12,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/organization-fields/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Controller.extend({
    customFields: Ember['default'].inject.service('custom-fields'),
    session: Ember['default'].inject.service(),

    customfields: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewFieldRoute: function transitionToNewFieldRoute() {
        this.transitionToRoute('session.admin.people.organization-fields.select-type');
      },
      toggleEnabledStatus: function toggleEnabledStatus(field) {
        this.get('customFields').toggleEnabled(field);
      },

      showDeleteConfirmation: function showDeleteConfirmation(field) {
        if (confirm('Are you sure you wish to delete this field?')) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        this.get('customFields').destroyRecord(field);
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.organization-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));
      }
    }
  });

});
define('frontend-cp/session/admin/people/organization-fields/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    model: function model() {
      return this.store.find('organization-field');
    }

  });

});
define('frontend-cp/session/admin/people/organization-fields/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 33,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","flag flag--small");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__img");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__body");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5,"class","t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]),0,0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]),0,0);
                morphs[3] = dom.createElementMorph(element11);
                morphs[4] = dom.createMorphAt(element11,0,0);
                morphs[5] = dom.createElementMorph(element12);
                morphs[6] = dom.createMorphAt(element12,0,0);
                morphs[7] = dom.createElementMorph(element13);
                morphs[8] = dom.createMorphAt(element13,0,0);
                return morphs;
              },
              statements: [
                ["content","customfield.title",["loc",[null,[13,33],[13,54]]]],
                ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[18,89],[18,121]]]],["get","customfield.fieldType",["loc",[null,[18,122],[18,143]]]]],[],["loc",[null,[18,77],[18,145]]]]]]],
                ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[21,83],[21,119]]]],["get","customfield.fieldType",["loc",[null,[21,120],[21,141]]]]],[],["loc",[null,[21,72],[21,142]]]]],[],["loc",[null,[21,62],[21,143]]]]],[],["loc",[null,[21,45],[21,145]]]],
                ["element","action",["editField",["get","customfield",["loc",[null,[27,47],[27,58]]]]],[],["loc",[null,[27,26],[27,60]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[27,78],[27,103]]]]],[],["loc",[null,[27,61],[27,105]]]],
                ["element","action",["toggleEnabledStatus",["get","customfield",["loc",[null,[28,57],[28,68]]]]],[],["loc",[null,[28,26],[28,70]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[28,88],[28,116]]]]],[],["loc",[null,[28,71],[28,118]]]],
                ["element","action",["showDeleteConfirmation",["get","customfield",["loc",[null,[29,60],[29,71]]]]],[],["loc",[null,[29,26],[29,73]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[29,91],[29,118]]]]],[],["loc",[null,[29,74],[29,120]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","customfield",["loc",[null,[10,55],[10,66]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[10,6],[33,29]]]]
            ],
            locals: ["customfield"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[6,23],[6,51]]]]],[],["loc",[null,[6,6],[6,53]]]],
            ["block","ko-reorderable-list",[],["reorderedListAction","reorderCustomFields","items",["subexpr","@mut",[["get","customfields",["loc",[null,[9,75],[9,87]]]]],[],[]]],0,null,["loc",[null,[9,4],[34,28]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","flag flag--small");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__img");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__body");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5,"class","u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
                  morphs[3] = dom.createElementMorph(element4);
                  morphs[4] = dom.createMorphAt(element4,0,0);
                  morphs[5] = dom.createElementMorph(element5);
                  morphs[6] = dom.createMorphAt(element5,0,0);
                  morphs[7] = dom.createElementMorph(element6);
                  morphs[8] = dom.createMorphAt(element6,0,0);
                  return morphs;
                },
                statements: [
                  ["content","disabledfield.title",["loc",[null,[46,43],[46,66]]]],
                  ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[51,85],[51,117]]]],["get","disabledfield.fieldType",["loc",[null,[51,118],[51,141]]]]],[],["loc",[null,[51,73],[51,143]]]]]]],
                  ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[54,82],[54,118]]]],["get","disabledfield.fieldType",["loc",[null,[54,119],[54,142]]]]],[],["loc",[null,[54,71],[54,143]]]]],[],["loc",[null,[54,61],[54,144]]]]],[],["loc",[null,[54,44],[54,146]]]],
                  ["element","action",["editField",["get","disabledfield",["loc",[null,[60,47],[60,60]]]]],[],["loc",[null,[60,26],[60,62]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[60,80],[60,105]]]]],[],["loc",[null,[60,63],[60,107]]]],
                  ["element","action",["toggleEnabledStatus",["get","disabledfield",["loc",[null,[61,57],[61,70]]]]],[],["loc",[null,[61,26],[61,72]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[61,90],[61,117]]]]],[],["loc",[null,[61,73],[61,119]]]],
                  ["element","action",["showDeleteConfirmation",["get","disabledfield",["loc",[null,[62,60],[62,73]]]]],[],["loc",[null,[62,26],[62,75]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[62,93],[62,120]]]]],[],["loc",[null,[62,76],[62,122]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 4
                  },
                  "end": {
                    "line": 67,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","disabledfield",["loc",[null,[43,55],[43,68]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[43,6],[66,29]]]]
              ],
              locals: ["disabledfield"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 2
                },
                "end": {
                  "line": 68,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[40,23],[40,52]]]]],[],["loc",[null,[40,6],[40,54]]]],
              ["block","each",[["get","disabledfields",["loc",[null,[42,12],[42,26]]]]],[],0,null,["loc",[null,[42,4],[67,13]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 69,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[38,2],[68,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[4,2],[35,21]]]],
          ["block","if",[["get","disabledfields.length",["loc",[null,[37,6],[37,27]]]]],[],1,null,["loc",[null,[37,0],[69,7]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.organizationfields"],[],["loc",[null,[1,45],[1,82]]]]],[],["loc",[null,[1,29],[1,83]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.fields.add_new_field"],[],["loc",[null,[1,111],[1,150]]]]],[],["loc",[null,[1,95],[1,151]]]],"onSave",["subexpr","action",["transitionToNewFieldRoute"],[],["loc",[null,[1,159],[1,195]]]]],["loc",[null,[1,0],[1,197]]]],
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[3,0],[70,25]]]],
        ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.fields.add_new_field"],[],["loc",[null,[72,50],[72,89]]]]],[],["loc",[null,[72,34],[72,90]]]],"onSave",["subexpr","action",["transitionToNewFieldRoute"],[],["loc",[null,[72,98],[72,134]]]]],["loc",[null,[72,0],[72,136]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/people/organization-fields/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),
    customFields: Ember['default'].inject.service('custom-fields'),

    queryParams: ['organizationFieldType'],
    organizationFieldType: null,

    title: Ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.people.organization-fields.index');
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        return this.get('customFields').persist(this.get('model'));
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      }
    }
  });

});
define('frontend-cp/session/admin/people/organization-fields/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /*eslint no-alert:0*/
  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('organization-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      if (model.get('isChoiceField') && model.get('options.length') === 0) {
        // we always need an option for the user to start editing
        model.get('options').pushObject(this.store.createRecord('field-option', {
          sortOrder: 1
        }));
      }
      controller.set('model', model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/people/organization-fields/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]],"isApiFieldKeyAvailable",false,"isAgentCaseFieldAvailable",false,"isStatusKeyAvailable",false,"isCustomerEditAvailable",false],["loc",[null,[1,0],[13,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/organization-fields/select-type/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    actions: {
      setUserFieldType: function setUserFieldType(fieldType) {
        this.transitionTo('session.admin.people.organization-fields.new', fieldType);
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.people.organization-fields.index');
      }
    }
  });

});
define('frontend-cp/session/admin/people/organization-fields/select-type/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('frontend-cp/session/admin/people/organization-fields/select-type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 67
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.organizationfields.new.heading"],[],["loc",[null,[1,45],[1,94]]]]],[],["loc",[null,[1,29],[1,95]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[1,105],[1,138]]]]],["loc",[null,[1,0],[1,140]]]],
        ["inline","ko-admin/case-fields/select-type",[],["onFieldTypeSelect",["subexpr","action",["setUserFieldType"],[],["loc",[null,[2,53],[2,80]]]]],["loc",[null,[2,0],[2,82]]]],
        ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[3,32],[3,65]]]]],["loc",[null,[3,0],[3,67]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/teams/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Route = Ember['default'].Route;
  var inject = Ember['default'].inject;

  exports['default'] = Route.extend({
    intl: inject.service(),
    controllerName: 'session.admin.people.teams.new',

    model: function model(params) {
      return this.store.findRecord('team', params.team_id);
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.store.query('user', { role: 'AGENT' }).then(function (agents) {
        controller.set('agents', agents);
      });
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation); // eslint-disable-line

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });

});
define('frontend-cp/session/admin/people/teams/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/team",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.headings.edit"],[],["loc",[null,[2,24],[2,62]]]]],["title",["get","model.title",["loc",[null,[2,69],[2,80]]]]],["loc",[null,[2,8],[2,81]]]],"team",["subexpr","@mut",[["get","model",["loc",[null,[3,7],[3,12]]]]],[],[]],"agents",["subexpr","@mut",[["get","agents",["loc",[null,[4,9],[4,15]]]]],[],[]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[5,11],[5,44]]]],"onSuccess",["subexpr","action",["successTransitionToIndexRoute"],[],["loc",[null,[6,12],[6,52]]]]],["loc",[null,[1,0],[7,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/teams/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Controller = Ember['default'].Controller;
  var computed = Ember['default'].computed;

  exports['default'] = Controller.extend({
    filter: '',
    filteredResults: computed('model.[]', 'filter', function () {
      var teams = this.get('model');
      var filter = this.get('filter');
      var regEx = new RegExp(filter, 'i');
      if (filter === '') {
        return teams;
      } else {
        return teams.filter(function (team) {
          return regEx.test(team.get('title'));
        });
      }
    }),
    actions: {
      transitionToAddNewTeam: function transitionToAddNewTeam() {
        this.transitionToRoute('session.admin.people.teams.new');
      }
    }
  });

});
define('frontend-cp/session/admin/people/teams/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Route = Ember['default'].Route;

  exports['default'] = Route.extend({
    permissionService: Ember['default'].inject.service('permissions'),
    permissionName: 'admin.team.view',

    beforeModel: function beforeModel() {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.admin');
      }
    },

    model: function model() {
      return this.store.findAll('team');
    }
  });

});
define('frontend-cp/session/admin/people/teams/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 107
            }
          },
          "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1,"class","layout__item u-1/2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]),0,0);
          return morphs;
        },
        statements: [
          ["inline","ko-admin-card-team",[],["team",["subexpr","@mut",[["get","team",["loc",[null,[18,95],[18,99]]]]],[],[]]],["loc",[null,[18,69],[18,101]]]]
        ],
        locals: ["team"],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout u-mb");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","input--search t-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4,"class","i-search i-color-grey--light");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.headings.index"],[],["loc",[null,[2,24],[2,63]]]]],[],["loc",[null,[2,8],[2,64]]]],"buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.buttons.add"],[],["loc",[null,[3,29],[3,65]]]]],[],["loc",[null,[3,13],[3,66]]]],"onSave",["subexpr","action",["transitionToAddNewTeam"],[],["loc",[null,[4,9],[4,42]]]]],["loc",[null,[1,0],[5,2]]]],
        ["inline","input",[],["class","input-text input-text--search","type","text","value",["subexpr","@mut",[["get","filter",["loc",[null,[10,70],[10,76]]]]],[],[]],"placeholder",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.labels.filter_teams"],[],["loc",[null,[10,105],[10,149]]]]],[],["loc",[null,[10,89],[10,150]]]]],["loc",[null,[10,6],[10,152]]]],
        ["block","each",[["get","filteredResults",["loc",[null,[18,10],[18,25]]]]],[],0,null,["loc",[null,[18,2],[18,116]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/people/teams/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Controller = Ember['default'].Controller;

  exports['default'] = Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),
    agents: [],

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.people.teams.index');
      },
      successTransitionToIndexRoute: function successTransitionToIndexRoute() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.transitionToRoute('session.admin.people.teams.index');
      }
    }
  });

});
define('frontend-cp/session/admin/people/teams/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var Route = Ember['default'].Route;
  var inject = Ember['default'].inject;

  exports['default'] = Route.extend({
    intl: inject.service(),
    model: function model() {
      return this.store.createRecord('team');
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.store.query('user', { role: 'AGENT' }).then(function (agents) {
        controller.set('agents', agents);
      });
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage.translation);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });

});
define('frontend-cp/session/admin/people/teams/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/team",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.teams.headings.new"],[],["loc",[null,[2,24],[2,61]]]]],[],["loc",[null,[2,8],[2,62]]]],"team",["subexpr","@mut",[["get","model",["loc",[null,[3,7],[3,12]]]]],[],[]],"agents",["subexpr","@mut",[["get","agents",["loc",[null,[4,9],[4,15]]]]],[],[]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[5,11],[5,44]]]],"onSuccess",["subexpr","action",["successTransitionToIndexRoute"],[],["loc",[null,[6,12],[6,52]]]]],["loc",[null,[1,0],[7,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/user-fields/edit/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.user-fields.new',

    model: function model(params) {
      return this.store.find('user-field', params.user_field_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/people/user-fields/edit/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]],"isApiFieldKeyAvailable",false,"isAgentCaseFieldAvailable",false],["loc",[null,[1,0],[11,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/user-fields/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    customFields: Ember['default'].inject.service('custom-fields'),
    session: Ember['default'].inject.service(),

    customfields: Ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: Ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewUserFieldRoute: function transitionToNewUserFieldRoute() {
        this.transitionToRoute('session.admin.people.user-fields.select-type');
      },
      toggleEnabledStatus: function toggleEnabledStatus(field) {
        this.get('customFields').toggleEnabled(field);
      },

      showDeleteConfirmation: function showDeleteConfirmation(field) {
        if (confirm('Are you sure you wish to delete this field?')) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        this.get('customFields').destroyRecord(field);
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.user-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));
      }
    }
  });

});
define('frontend-cp/session/admin/people/user-fields/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    permissionService: Ember['default'].inject.service('permissions'),
    permissionName: 'admin.team.userfields.view',

    beforeModel: function beforeModel() {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.admin');
      }
    },

    model: function model() {
      return this.store.find('user-field');
    }

  });

});
define('frontend-cp/session/admin/people/user-fields/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 33,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1,"class","layout");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3,"class","t-bold");
                var el4 = dom.createComment("");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","flag flag--small");
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__img");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n                ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4,"class","flag__body");
                var el5 = dom.createTextNode("\n                    ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("p");
                dom.setAttribute(el5,"class","t-bold u-mb--");
                var el6 = dom.createComment("");
                dom.appendChild(el5, el6);
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n                ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("\n       ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2,"class","layout__item u-1/3");
                var el3 = dom.createTextNode("\n            ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("div");
                dom.setAttribute(el3,"class","ko-simple-list__actions");
                var el4 = dom.createTextNode("\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode(" |\n              ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("a");
                dom.setAttribute(el4,"href","#");
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(element7, [3, 1]);
                var element9 = dom.childAt(element8, [1, 1]);
                var element10 = dom.childAt(element7, [5, 1]);
                var element11 = dom.childAt(element10, [1]);
                var element12 = dom.childAt(element10, [3]);
                var element13 = dom.childAt(element10, [5]);
                var morphs = new Array(9);
                morphs[0] = dom.createMorphAt(dom.childAt(element7, [1, 1]),0,0);
                morphs[1] = dom.createAttrMorph(element9, 'class');
                morphs[2] = dom.createMorphAt(dom.childAt(element8, [3, 1]),0,0);
                morphs[3] = dom.createElementMorph(element11);
                morphs[4] = dom.createMorphAt(element11,0,0);
                morphs[5] = dom.createElementMorph(element12);
                morphs[6] = dom.createMorphAt(element12,0,0);
                morphs[7] = dom.createElementMorph(element13);
                morphs[8] = dom.createMorphAt(element13,0,0);
                return morphs;
              },
              statements: [
                ["content","customfield.title",["loc",[null,[13,33],[13,54]]]],
                ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[18,89],[18,121]]]],["get","customfield.fieldType",["loc",[null,[18,122],[18,143]]]]],[],["loc",[null,[18,77],[18,145]]]]]]],
                ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[21,83],[21,119]]]],["get","customfield.fieldType",["loc",[null,[21,120],[21,141]]]]],[],["loc",[null,[21,72],[21,142]]]]],[],["loc",[null,[21,62],[21,143]]]]],[],["loc",[null,[21,45],[21,145]]]],
                ["element","action",["editField",["get","customfield",["loc",[null,[27,47],[27,58]]]]],[],["loc",[null,[27,26],[27,60]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[27,78],[27,103]]]]],[],["loc",[null,[27,61],[27,105]]]],
                ["element","action",["toggleEnabledStatus",["get","customfield",["loc",[null,[28,57],[28,68]]]]],[],["loc",[null,[28,26],[28,70]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.disable"],[],["loc",[null,[28,88],[28,116]]]]],[],["loc",[null,[28,71],[28,118]]]],
                ["element","action",["showDeleteConfirmation",["get","customfield",["loc",[null,[29,60],[29,71]]]]],[],["loc",[null,[29,26],[29,73]]]],
                ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[29,91],[29,118]]]]],[],["loc",[null,[29,74],[29,120]]]]
              ],
              locals: [],
              templates: []
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","customfield",["loc",[null,[10,55],[10,66]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[10,6],[33,29]]]]
            ],
            locals: ["customfield"],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1,"class","ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
            morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","format-message",[["subexpr","intl-get",["generic.enabled"],[],["loc",[null,[6,23],[6,51]]]]],[],["loc",[null,[6,6],[6,53]]]],
            ["block","ko-reorderable-list",[],["reorderedListAction","reorderCustomFields","items",["subexpr","@mut",[["get","customfields",["loc",[null,[9,75],[9,87]]]]],[],[]]],0,null,["loc",[null,[9,4],[34,28]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      var child1 = (function() {
        var child0 = (function() {
          var child0 = (function() {
            var child0 = (function() {
              return {
                meta: {
                  "revision": "Ember@1.13.7",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 43,
                      "column": 6
                    },
                    "end": {
                      "line": 66,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1,"class","layout");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("span");
                  dom.setAttribute(el3,"class","t-caption t-bold");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","flag flag--small");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__img");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("div");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("div");
                  dom.setAttribute(el4,"class","flag__body");
                  var el5 = dom.createTextNode("\n                ");
                  dom.appendChild(el4, el5);
                  var el5 = dom.createElement("p");
                  dom.setAttribute(el5,"class","u-mb-- t-caption");
                  var el6 = dom.createComment("");
                  dom.appendChild(el5, el6);
                  dom.appendChild(el4, el5);
                  var el5 = dom.createTextNode("\n              ");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("\n       ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("div");
                  dom.setAttribute(el2,"class","layout__item u-1/3");
                  var el3 = dom.createTextNode("\n            ");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createElement("div");
                  dom.setAttribute(el3,"class","ko-simple-list__actions");
                  var el4 = dom.createTextNode("\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el3, el4);
                  var el4 = dom.createElement("a");
                  dom.setAttribute(el4,"href","#");
                  var el5 = dom.createComment("");
                  dom.appendChild(el4, el5);
                  dom.appendChild(el3, el4);
                  var el4 = dom.createTextNode("\n            ");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  var el3 = dom.createTextNode("\n          ");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [3, 1]);
                  var element2 = dom.childAt(element1, [1, 1]);
                  var element3 = dom.childAt(element0, [5, 1]);
                  var element4 = dom.childAt(element3, [1]);
                  var element5 = dom.childAt(element3, [3]);
                  var element6 = dom.childAt(element3, [5]);
                  var morphs = new Array(9);
                  morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]),0,0);
                  morphs[1] = dom.createAttrMorph(element2, 'class');
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]),0,0);
                  morphs[3] = dom.createElementMorph(element4);
                  morphs[4] = dom.createMorphAt(element4,0,0);
                  morphs[5] = dom.createElementMorph(element5);
                  morphs[6] = dom.createMorphAt(element5,0,0);
                  morphs[7] = dom.createElementMorph(element6);
                  morphs[8] = dom.createMorphAt(element6,0,0);
                  return morphs;
                },
                statements: [
                  ["content","disabledfield.title",["loc",[null,[46,43],[46,66]]]],
                  ["attribute","class",["concat",["ko-admin_case-fields_select-type__icon i-png-",["subexpr","ko-helper",[["get","customFields.baseKeyForFieldType",["loc",[null,[51,85],[51,117]]]],["get","disabledfield.fieldType",["loc",[null,[51,118],[51,141]]]]],[],["loc",[null,[51,73],[51,143]]]]]]],
                  ["inline","format-message",[["subexpr","intl-get",[["subexpr","ko-helper",[["get","customFields.baseTypeKeyForFieldType",["loc",[null,[54,82],[54,118]]]],["get","disabledfield.fieldType",["loc",[null,[54,119],[54,142]]]]],[],["loc",[null,[54,71],[54,143]]]]],[],["loc",[null,[54,61],[54,144]]]]],[],["loc",[null,[54,44],[54,146]]]],
                  ["element","action",["editField",["get","disabledfield",["loc",[null,[60,47],[60,60]]]]],[],["loc",[null,[60,26],[60,62]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.edit"],[],["loc",[null,[60,80],[60,105]]]]],[],["loc",[null,[60,63],[60,107]]]],
                  ["element","action",["toggleEnabledStatus",["get","disabledfield",["loc",[null,[61,57],[61,70]]]]],[],["loc",[null,[61,26],[61,72]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.enable"],[],["loc",[null,[61,90],[61,117]]]]],[],["loc",[null,[61,73],[61,119]]]],
                  ["element","action",["showDeleteConfirmation",["get","disabledfield",["loc",[null,[62,60],[62,73]]]]],[],["loc",[null,[62,26],[62,75]]]],
                  ["inline","format-message",[["subexpr","intl-get",["generic.delete"],[],["loc",[null,[62,93],[62,120]]]]],[],["loc",[null,[62,76],[62,122]]]]
                ],
                locals: [],
                templates: []
              };
            }());
            return {
              meta: {
                "revision": "Ember@1.13.7",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 42,
                    "column": 4
                  },
                  "end": {
                    "line": 67,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [
                ["block","ko-simple-list/row",[],["action","editField","content",["subexpr","@mut",[["get","disabledfield",["loc",[null,[43,55],[43,68]]]]],[],[]],"class","u-pointer"],0,null,["loc",[null,[43,6],[66,29]]]]
              ],
              locals: ["disabledfield"],
              templates: [child0]
            };
          }());
          return {
            meta: {
              "revision": "Ember@1.13.7",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 2
                },
                "end": {
                  "line": 68,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1,"class","ko-simple-list__header");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),1,1);
              morphs[1] = dom.createMorphAt(fragment,3,3,contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [
              ["inline","format-message",[["subexpr","intl-get",["generic.disabled"],[],["loc",[null,[40,23],[40,52]]]]],[],["loc",[null,[40,6],[40,54]]]],
              ["block","each",[["get","disabledfields",["loc",[null,[42,12],[42,26]]]]],[],0,null,["loc",[null,[42,4],[67,13]]]]
            ],
            locals: [],
            templates: [child0]
          };
        }());
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 0
              },
              "end": {
                "line": 69,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["block","ko-simple-list",[],[],0,null,["loc",[null,[38,2],[68,21]]]]
          ],
          locals: [],
          templates: [child0]
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 70,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["block","ko-simple-list",[],[],0,null,["loc",[null,[4,2],[35,21]]]],
          ["block","if",[["get","disabledfields.length",["loc",[null,[37,6],[37,27]]]]],[],1,null,["loc",[null,[37,0],[69,7]]]]
        ],
        locals: [],
        templates: [child0, child1]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title","User Fields","buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.userfields.buttons.add_new_userfield"],[],["loc",[null,[1,70],[1,125]]]]],[],["loc",[null,[1,54],[1,126]]]],"onSave",["subexpr","action",["transitionToNewUserFieldRoute"],[],["loc",[null,[1,134],[1,174]]]]],["loc",[null,[1,0],[1,176]]]],
        ["block","ko-admin/forms/table",[],[],0,null,["loc",[null,[3,0],[70,25]]]],
        ["inline","ko-admin/page-footer",[],["buttonText",["subexpr","format-message",[["subexpr","intl-get",["admin.userfields.buttons.add_new_userfield"],[],["loc",[null,[72,50],[72,105]]]]],[],["loc",[null,[72,34],[72,106]]]],"onSave",["subexpr","action",["transitionToNewUserFieldRoute"],[],["loc",[null,[72,114],[72,154]]]]],["loc",[null,[72,0],[72,156]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/admin/people/user-fields/new/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    notification: Ember['default'].inject.service('notification'),
    intl: Ember['default'].inject.service('intl'),
    customFields: Ember['default'].inject.service('custom-fields'),

    queryParams: ['userFieldType'],
    userFieldType: null,

    title: Ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.people.user-fields.index');
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        return this.get('customFields').persist(this.get('model'));
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved').translation,
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      }
    }
  });

});
define('frontend-cp/session/admin/people/user-fields/new/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    customFields: Ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('user-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      if (model.get('isChoiceField') && model.get('options.length') === 0) {
        // we always need an option for the user to start editing
        model.get('options').pushObject(this.store.createRecord('field-option', {
          sortOrder: 1
        }));
      }
      controller.set('model', model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });

});
define('frontend-cp/session/admin/people/user-fields/new/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/case-fields/edit",[],["title",["subexpr","@mut",[["get","title",["loc",[null,[2,8],[2,13]]]]],[],[]],"caseField",["subexpr","@mut",[["get","model",["loc",[null,[3,12],[3,17]]]]],[],[]],"onOptionAddition",["subexpr","action",["addNewOption"],[],["loc",[null,[4,19],[4,42]]]],"onOptionRemoval",["subexpr","action",["removeOption"],[],["loc",[null,[5,18],[5,41]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[6,11],[6,44]]]],"onSave",["subexpr","action",["saveField"],[],["loc",[null,[7,9],[7,29]]]],"onSuccess",["subexpr","action",["success"],[],["loc",[null,[8,12],[8,30]]]],"isApiFieldKeyAvailable",false,"isAgentCaseFieldAvailable",false,"isStatusKeyAvailable",false],["loc",[null,[1,0],[12,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/people/user-fields/select-type/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    actions: {
      // TODO: make this action to be generic across cases & users.
      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.transitionTo('session.admin.people.user-fields.new', fieldType);
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.people.user-fields.index');
      }
    }
  });

});
define('frontend-cp/session/admin/people/user-fields/select-type/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('frontend-cp/session/admin/people/user-fields/select-type/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 67
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        morphs[1] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[2] = dom.createMorphAt(fragment,4,4,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["inline","ko-admin/page-header",[],["title",["subexpr","format-message",[["subexpr","intl-get",["admin.userfields.new.heading"],[],["loc",[null,[1,45],[1,86]]]]],[],["loc",[null,[1,29],[1,87]]]],"onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[1,97],[1,130]]]]],["loc",[null,[1,0],[1,132]]]],
        ["inline","ko-admin/case-fields/select-type",[],["onFieldTypeSelect",["subexpr","action",["setCaseFieldType"],[],["loc",[null,[2,53],[2,80]]]]],["loc",[null,[2,0],[2,82]]]],
        ["inline","ko-admin/page-footer",[],["onCancel",["subexpr","action",["transitionToIndexRoute"],[],["loc",[null,[3,32],[3,65]]]]],["loc",[null,[3,0],[3,67]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/admin/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    active: false,

    sessionService: Ember['default'].inject.service('session'),

    activate: Ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: Ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    exitSession: Ember['default'].observer('sessionService.sessionId', function () {
      if (this.get('active') && this.get('sessionService.sessionId') === null) {
        this.transitionTo('login.admin');
      }
    }),

    beforeModel: function beforeModel(transition) {
      var _this = this;

      // Redirect to login if not validated
      return this.get('sessionService').getSession().then(null, function () {
        _this.controllerFor('login').set('transitionOnLogin', transition);
        _this.transitionTo('login.admin');
      });
    }
  });

});
define('frontend-cp/session/admin/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["content","ko-admin/page-container",["loc",[null,[1,0],[1,27]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/cases/case/controller', ['exports', 'ember', 'frontend-cp/mixins/breadcrumbable'], function (exports, Ember, Breadcrumbable) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(Breadcrumbable['default'], {

    intlService: Ember['default'].inject.service('intl'),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User>Case
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: Ember['default'].computed('model.requester.organization.id', 'model.requester.id', function () {

      var hasOrganisation = this.get('model.requester.organization.id');
      var hasUser = this.get('model.requester.id');

      var caseName = this.get('model.id') ? 'Case ' + this.get('model.id') : this.get('intlService').findTranslationByKey('cases.new_case').translation;

      var caseCrumb = {
        id: 'case',
        name: caseName,
        route: 'session.agent.cases.case.index'
      };

      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          name: this.get('model.requester.organization.name'),
          route: 'session.agent.cases.case.organisation'
        });
      }

      if (hasUser) {
        crumbs.push({
          id: 'user',
          name: this.get('model.requester.fullName'),
          route: 'session.agent.cases.case.user'
        });
      }

      crumbs.push(caseCrumb);

      return crumbs;
    })
  });

});
define('frontend-cp/session/agent/cases/case/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    queryParams: {
      postId: {
        refreshModel: false
      },

      filterParam: {
        refreshModel: false,
        as: 'filter'
      },

      sort: {
        refreshModel: false
      }
    },

    sortOrder: Ember['default'].computed('sort', function () {
      var sort = this.get('sort');
      return sort ? sort : 'newest';
    }),

    filter: Ember['default'].computed('filterParam', function () {
      var filter = this.get('filterParam');
      return filter ? filter : 'posts';
    }),

    actions: {
      changeTopPost: function changeTopPost(postId) {
        this.get('target').send('changeTopPost', postId);
      },

      filter: function filter(_filter) {
        this.get('target').send('filter', _filter);
      },

      sort: function sort(sortOrder) {
        this.get('target').send('sort', sortOrder);
      }
    }
  });

});
define('frontend-cp/session/agent/cases/case/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    storeCache: Ember['default'].inject.service('store-cache'),
    routeStateService: Ember['default'].inject.service('route-state'),

    queryParams: {
      postId: {
        refreshModel: false,
        replace: true
      },

      filterParam: {
        refreshModel: false,
        replace: true,
        as: 'filter'
      },

      sort: {
        refreshModel: false,
        replace: true
      }
    },

    model: function model() {
      return Ember['default'].RSVP.hash({
        'case': this.modelFor('session.agent.cases.case'),
        priorities: this.get('storeCache').findAll('case-priority'),
        types: this.get('storeCache').findAll('case-type'),
        statuses: this.get('storeCache').findAll('case-status'),
        caseFields: this.get('storeCache').findAll('case-field')
      }).then(function (model) {
        model.replyChannel = model['case'].get('replyChannels');
        return Ember['default'].RSVP.hash(model);
      });
    },

    setupController: function setupController(controller, model) {
      this.validateCaseStatus(model['case']);

      controller.set('case', model['case']);
      controller.set('priorities', model.priorities);
      controller.set('types', model.types);
      controller.set('statuses', model.statuses);
      controller.set('caseFields', model.caseFields);

      //ignore anything we've added/changed during setup
      //model.case.cacheRelationships();
    },

    validateCaseStatus: function validateCaseStatus(editingCase) {
      var caseStatus = editingCase.get('status');
      if (editingCase.get('id') && caseStatus.get('statusType') === 'NEW') {
        this.store.find('case-status', 3).then(function (pendingStatus) {
          //assuming that status ID 3 will always be pending
          editingCase.set('status', pendingStatus);
        });
      }
    },

    updateUrl: function updateUrl(params) {
      var locationService = this.container.lookup('router:main').get('location');
      var rootURL = locationService.get('rootURL').replace(/\/$/, '');
      var location = locationService.get('location');
      var path = location.pathname;
      var baseURL = locationService.get('baseURL').replace(/\/$/, '');
      var postId = params.postId !== undefined ? params.postId : this.get('controller').get('postId');
      var filter = params.filter !== undefined ? params.filter : this.get('controller').get('filter');
      var sort = params.sort !== undefined ? params.sort : this.get('controller').get('sort');

      var postParam = postId ? 'postId=' + postId : '';
      var filterParam = filter ? 'filter=' + filter : '';
      var sortParam = sort ? 'sort=' + sort : '';

      var search = [postParam, filterParam, sortParam].filter(function (x) {
        return x;
      }).join('&');
      var url = path.replace(baseURL, '').replace(rootURL, '') + (search ? '?' + search : '');

      var currentState = this.get('routeStateService').getState();
      this.get('routeStateService').transitionToState(url, currentState);
      this.send('updateTabUrl', url);
    },

    actions: {
      changeTopPost: function changeTopPost(postId) {
        this.updateUrl({ postId: postId });
      },

      filter: function filter(_filter) {
        this.updateUrl({ filter: _filter });
      },

      sort: function sort(sortOrder) {
        this.updateUrl({ sort: sortOrder, postId: null });
      }
    }
  });

});
define('frontend-cp/session/agent/cases/case/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-case-content",[],["case",["subexpr","@mut",[["get","case",["loc",[null,[2,7],[2,11]]]]],[],[]],"postId",["subexpr","@mut",[["get","postId",["loc",[null,[3,9],[3,15]]]]],[],[]],"sortOrder",["subexpr","@mut",[["get","sortOrder",["loc",[null,[4,12],[4,21]]]]],[],[]],"filter",["subexpr","@mut",[["get","filter",["loc",[null,[5,9],[5,15]]]]],[],[]],"caseFields",["subexpr","@mut",[["get","caseFields",["loc",[null,[6,13],[6,23]]]]],[],[]],"onTopPostChange",["subexpr","action",["changeTopPost"],[],["loc",[null,[7,18],[7,42]]]],"onSort",["subexpr","action",["sort"],[],["loc",[null,[8,9],[8,24]]]],"onFilter",["subexpr","action",["filter"],[],["loc",[null,[9,11],[9,28]]]]],["loc",[null,[1,0],[10,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/cases/case/loading/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["large",true],["loc",[null,[1,14],[1,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-center",[],[],0,null,["loc",[null,[1,0],[1,52]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/agent/cases/case/organisation/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, TabbedRoute) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({
    breadcrumbChange: 'breadcrumbChange',

    navigateToCaseBreadcrumb: function navigateToCaseBreadcrumb() {
      var caseController = this.controllerFor('session.agent.cases.case');
      caseController.send('breadcrumbChange', 'case');
    },

    model: function model(params) {
      var parentModel = this.modelFor('session.agent.cases.case').get('requester');
      return parentModel ? parentModel.get('organization') : {};
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.setTabLabel(model.get('name'));
    },

    activate: function activate() {
      this.modelFor(this.routeName).on('didDelete', this, this.navigateToCaseBreadcrumb);
    },

    deactivate: function deactivate() {
      this.modelFor(this.routeName).off('didDelete', this, this.navigateToCaseBreadcrumb);
    }
  });

});
define('frontend-cp/session/agent/cases/case/organisation/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-organisation-content",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,32],[1,37]]]]],[],[]]],["loc",[null,[1,0],[1,39]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/cases/case/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route', 'ember'], function (exports, TabbedRoute, Ember) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({
    intlService: Ember['default'].inject.service('intl'),

    model: function model(params) {
      if (params.case_id === 'new') {
        this.transitionTo('session.agent.cases');
        return;
      }
      return this.store.find('case', +params.case_id);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);

      var tabName = model.get('subject') ? model.get('subject') : this.get('intlService').findTranslationByKey('cases.new_case_tab_placeholder').translation;

      this.setTabLabel(tabName);
    },

    serialize: function serialize(model) {
      return {
        'case_id': model.get ? model.get('id') || 'new' : model.case_id
      };
    },

    actions: {
      updateTabUrl: function updateTabUrl(url) {
        this.setTabUrl(url);
      },
      updateTabName: function updateTabName(label) {
        var tabName = label ? label : this.get('intlService').findTranslationByKey('cases.new_case_tab_placeholder').translation;
        this.setTabLabel(tabName);
      }
    }
  });

});
define('frontend-cp/session/agent/cases/case/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","ko-breadcrumbs",[],["breadcrumbs",["subexpr","@mut",[["get","breadcrumbs",["loc",[null,[3,33],[3,44]]]]],[],[]],"activeBreadcrumb",["subexpr","@mut",[["get","activeBreadcrumb",["loc",[null,[3,62],[3,78]]]]],[],[]],"action","breadcrumbChange"],["loc",[null,[3,4],[3,106]]]],
        ["content","outlet",["loc",[null,[5,2],[5,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/cases/case/user/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({

    // model() {
    //   return this.modelFor('case').get('organization').then((org) => {
    //     Ember.RSVP.hash({
    //       metrics: this.find('metric', { organization_id: org.id }),
    //       organization: org
    //     });
    //   });
    // let parentModel = this.modelFor('case');
    // return parentModel ? parentModel.get('organization') : {};
    // }
    model: function model() {
      return this.modelFor('session.agent.cases.case').get('requester');
    }

  });

});
define('frontend-cp/session/agent/cases/case/user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-user-content",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,24],[1,29]]]]],[],[]]],["loc",[null,[1,0],[1,31]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/cases/index/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    queryParams: ['page', 'view'],

    page: 1,

    enabledViews: Ember['default'].computed('views', function () {
      var enabledViews = this.get('views').filter(function (view) {
        return view.get('isEnabled') === true;
      });

      enabledViews = enabledViews.sort(function (a, b) {
        return a.get('sortOrder') > b.get('sortOrder');
      });

      return enabledViews;
    }),

    // Indicates whether route is loading (to show loading spinner instead
    // of a list)
    loading: true,

    // Page number being loaded, used by the ko-pagination to correctly
    // turn links into spinners
    loadingPage: null,

    actions: {
      transitionToCase: function transitionToCase(caseContext) {
        this.transitionToRoute('session.agent.cases.case', caseContext);
      }
    }
  });

});
define('frontend-cp/session/agent/cases/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var parseIntOrDefault = function parseIntOrDefault(string, defaultValue) {
    return isNaN(string) ? defaultValue : Math.floor(Math.abs(string));
  };

  exports['default'] = Ember['default'].Route.extend({
    limit: 20,
    offset: 0,
    firstLoad: true,

    storeCache: Ember['default'].inject.service('store-cache'),
    store: Ember['default'].inject.service('store'),

    queryParams: {
      page: {
        refreshModel: true
      },
      view: {
        refreshModel: true
      }
    },

    model: function model(params) {
      var _this = this;

      if (params.page) {
        var page = params.page;
        this.set('page', parseIntOrDefault(page, 1));
      }
      this.set('offset', (this.get('page') - 1) * this.get('limit'));

      if (!this.controller) {
        // there is a strange bug in Ember, when route is missing controller property
        // https://github.com/emberjs/ember.js/issues/9496
        this.set('controller', this.controllerFor('session.agent.cases.index'));
      }

      return this.get('storeCache').findAll('view').then(function (views) {
        var view = _this.store.peekRecord('view', params.view);
        if (!view) {
          view = views.filterBy('isDefault')[0];
          _this.transitionTo({ queryParams: { view: view.id } });
          return;
        }
        return Ember['default'].RSVP.hash({
          views: views,
          activeView: view,
          cases: _this.get('store').query('case', {
            offset: _this.get('offset'),
            limit: _this.get('limit'),
            parent: view
          }),
          counts: _this.get('store').findAll('view-count', { reload: true })
        });
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('cases', model.cases);
      controller.set('views', model.views);
      controller.set('activeView', model.activeView);
      controller.setProperties({
        page: this.get('page'),
        totalPages: Math.ceil(model.cases.get('meta.total') / this.get('limit'))
      });

      // Resetting loading state
      controller.set('loading', false);
      controller.set('loadingPage', null);
    },

    resetController: function resetController(controller, isExiting) {
      // As routes are persisted across the entire app lifecycle,
      // we have to reset things manually
      if (isExiting) {
        this.set('firstLoad', true);
      }
    },

    actions: {
      // Called whenever a transition to this route is performed.
      // Not implementing this event or returning "true" causes Ember
      // to enter loading substate.
      loading: function loading(transition) {
        // Enter loading substate, but only if we are coming from another route
        if (this.get('firstLoad')) {
          this.set('firstLoad', false);
          return true;
        }

        // Switching between pages on this route won't remove the paginator
        var controller = this.controllerFor('session.agent.cases.index');
        controller.set('loadingPage', parseIntOrDefault(transition.queryParams.page, null));
        controller.set('loading', true);
      },

      caseListSorted: function caseListSorted() /*column, order*/{}
    }
  });

});
define('frontend-cp/session/agent/cases/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 12
              },
              "end": {
                "line": 10,
                "column": 50
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["inline","ko-loader",[],["large",true],["loc",[null,[10,26],[10,50]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 10
            },
            "end": {
              "line": 11,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","ko-center",[],[],0,null,["loc",[null,[10,12],[10,64]]]]
        ],
        locals: [],
        templates: [child0]
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 10
            },
            "end": {
              "line": 13,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["inline","ko-cases-list",[],["cases",["subexpr","@mut",[["get","cases",["loc",[null,[12,34],[12,39]]]]],[],[]],"onCaseListSort","caseListSorted","onClick",["subexpr","action",["transitionToCase"],[],["loc",[null,[12,80],[12,107]]]],"columns",["subexpr","@mut",[["get","activeView.columns",["loc",[null,[12,116],[12,134]]]]],[],[]],"title",["subexpr","@mut",[["get","activeView.title",["loc",[null,[12,141],[12,157]]]]],[],[]]],["loc",[null,[12,12],[12,159]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 10
              },
              "end": {
                "line": 18,
                "column": 77
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() { return []; },
          statements: [

          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 8
            },
            "end": {
              "line": 19,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["block","link-to",["session.agent.cases.index",["subexpr","query-params",[],["page",["get","number",["loc",[null,[18,68],[18,74]]]]],["loc",[null,[18,49],[18,75]]]]],[],0,null,["loc",[null,[18,10],[18,89]]]]
        ],
        locals: ["number"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","ko-session-agent-cases-index");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","content layout layout--flush");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","layout__item u-1/5");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","layout__item u-4/5");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","ko-session-agent-cases-index__content content__main content__main--has-sidebar");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","ko-session-agent-cases-index__pagination");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]),1,1);
        return morphs;
      },
      statements: [
        ["inline","ko-sidebar",[],["views",["subexpr","@mut",[["get","enabledViews",["loc",[null,[5,27],[5,39]]]]],[],[]],"activeView",["subexpr","@mut",[["get","activeView",["loc",[null,[5,51],[5,61]]]]],[],[]]],["loc",[null,[5,8],[5,63]]]],
        ["block","if",[["get","loading",["loc",[null,[9,16],[9,23]]]]],[],0,1,["loc",[null,[9,10],[13,17]]]],
        ["block","ko-pagination",[],["currentPage",["subexpr","@mut",[["get","page",["loc",[null,[17,37],[17,41]]]]],[],[]],"loadingPage",["subexpr","@mut",[["get","loadingPage",["loc",[null,[17,54],[17,65]]]]],[],[]],"pageCount",["subexpr","@mut",[["get","totalPages",["loc",[null,[17,76],[17,86]]]]],[],[]]],2,null,["loc",[null,[17,8],[19,26]]]]
      ],
      locals: [],
      templates: [child0, child1, child2]
    };
  }()));

});
define('frontend-cp/session/agent/cases/loading/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["large",true],["loc",[null,[1,14],[1,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-center",[],[],0,null,["loc",[null,[1,0],[1,52]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/agent/cases/new/controller', ['exports', 'ember', 'frontend-cp/mixins/breadcrumbable'], function (exports, Ember, Breadcrumbable) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(Breadcrumbable['default'], {

    breadcrumbs: Ember['default'].computed('model.creator.organization.id', 'model.creator.id', function () {

      var hasOrganisation = this.get('model.creator.organization.id');
      var hasUser = this.get('model.creator.id');
      var caseCrumb = {
        id: 'case',
        name: 'Case',
        route: 'session.agent.cases.case.index'
      };
      var userCrumb = {
        id: 'user',
        name: 'User',
        route: 'session.agent.cases.case.user'
      };
      var organisationCrumb = {
        id: 'organisation',
        name: 'Organisation',
        route: 'session.agent.cases.case.organisation'
      };

      var crumbs = [caseCrumb];

      if (hasOrganisation) {
        crumbs.push(organisationCrumb);
      }

      if (hasUser) {
        crumbs.push(userCrumb);
      }

      return crumbs;
    })
  });

});
define('frontend-cp/session/agent/organisations/organisation/controller', ['exports', 'ember', 'frontend-cp/mixins/breadcrumbable'], function (exports, Ember, Breadcrumbable) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend(Breadcrumbable['default'], {

    /**
     * Returns a breadcrumb containing the Organisation
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: Ember['default'].computed('model.organization.id', function () {
      return [{
        id: 'organisation',
        name: this.get('model.name'),
        route: 'session.agent.organisations.organisation'
      }];
    })

  });

});
define('frontend-cp/session/agent/organisations/organisation/index/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('frontend-cp/session/agent/organisations/organisation/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-organisation-content",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,32],[1,37]]]]],[],[]]],["loc",[null,[1,0],[1,39]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/organisations/organisation/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, TabbedRoute) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({
    model: function model(params) {
      return this.store.find('organization', params.organisation_id);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.setTabLabel(model.get('name'));
    }
  });

});
define('frontend-cp/session/agent/organisations/organisation/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","ko-breadcrumbs",[],["breadcrumbs",["subexpr","@mut",[["get","breadcrumbs",["loc",[null,[3,33],[3,44]]]]],[],[]],"activeBreadcrumb",["subexpr","@mut",[["get","activeBreadcrumb",["loc",[null,[3,62],[3,78]]]]],[],[]],"action","breadcrumbChange"],["loc",[null,[3,4],[3,106]]]],
        ["content","outlet",["loc",[null,[5,2],[5,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    active: false,

    sessionService: Ember['default'].inject.service('session'),

    activate: Ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: Ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    exitSession: Ember['default'].observer('sessionService.sessionId', function () {
      if (this.get('active') && this.get('sessionService.sessionId') === null) {
        this.transitionTo('login.agent');
      }
    }),

    beforeModel: function beforeModel(transition) {
      var _this = this;

      // Redirect to login if not validated
      return this.get('sessionService').getSession().then(null, function () {
        _this.controllerFor('login').set('transitionOnLogin', transition);
        _this.transitionTo('login.agent');
      });
    }
  });

});
define('frontend-cp/session/agent/users/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    page: 1,
    limit: 5,
    offset: 0,

    queryParams: {
      page: {
        refreshModel: true
      }
    },

    model: function model(params) {
      if (params.page) {
        var page = params.page;
        this.set('page', isNaN(page) ? 1 : Math.floor(Math.abs(page)));
      }
      this.set('offset', (this.get('page') - 1) * this.get('limit'));

      return this.store.find('user', {
        offset: this.get('offset'),
        limit: this.get('limit')
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('users', model);
      controller.setProperties({
        page: this.get('page'),
        totalPages: Math.ceil(model.get('meta.total') / this.get('limit'))
      });
    }
  });

});
define('frontend-cp/session/agent/users/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      var child0 = (function() {
        return {
          meta: {
            "revision": "Ember@1.13.7",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 7
              },
              "end": {
                "line": 5,
                "column": 68
              }
            },
            "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [
            ["content","user.fullName",["loc",[null,[5,51],[5,68]]]]
          ],
          locals: [],
          templates: []
        };
      }());
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  	");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          return morphs;
        },
        statements: [
          ["block","link-to",["session.agent.users.user",["get","user",["loc",[null,[5,45],[5,49]]]]],[],0,null,["loc",[null,[5,7],[5,80]]]]
        ],
        locals: ["user"],
        templates: [child0]
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","container");
        var el2 = dom.createTextNode("\n  List of users\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]),1,1);
        return morphs;
      },
      statements: [
        ["block","each",[["get","users",["loc",[null,[4,10],[4,15]]]]],[],0,null,["loc",[null,[4,2],[6,11]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/agent/users/user/controller', ['exports', 'ember', 'frontend-cp/mixins/breadcrumbable'], function (exports, Ember, Breadcrumbable) {

  'use strict';

  var computed = Ember['default'].computed;
  var service = Ember['default'].inject.service;

  exports['default'] = Ember['default'].Controller.extend(Breadcrumbable['default'], {
    intl: service(),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: computed('model.organization.name', function () {
      var hasOrganisation = this.get('model.organization.name');
      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          name: this.get('model.organization.name'),
          route: 'session.agent.users.user.organisation'
        });
      }

      crumbs.push({
        id: 'user',
        name: this.get('model.fullName'),
        route: 'session.agent.users.user.index'
      });

      return crumbs;
    })
  });

});
define('frontend-cp/session/agent/users/user/index/route', ['exports', 'ember'], function (exports, Ember) {

	'use strict';

	exports['default'] = Ember['default'].Route.extend({});

});
define('frontend-cp/session/agent/users/user/index/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-user-content",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,24],[1,29]]]]],[],[]]],["loc",[null,[1,0],[1,31]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/users/user/organisation/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, TabbedRoute) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({

    model: function model() {
      var parentModel = this.modelFor('session.agent.users.user');
      return parentModel ? parentModel.get('organization') : {};
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.get('tab').set('label', model.get('name'));
    }
  });

});
define('frontend-cp/session/agent/users/user/organisation/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [
        ["inline","ko-organisation-content",[],["model",["subexpr","@mut",[["get","model",["loc",[null,[1,32],[1,37]]]]],[],[]]],["loc",[null,[1,0],[1,39]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/agent/users/user/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, TabbedRoute) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({
    model: function model(params) {
      return this.store.findRecord('user', params.user_id);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.setTabLabel(model.get('fullName'));
    }
  });

});
define('frontend-cp/session/agent/users/user/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","content layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]),1,1);
        morphs[1] = dom.createMorphAt(element0,3,3);
        return morphs;
      },
      statements: [
        ["inline","ko-breadcrumbs",[],["breadcrumbs",["subexpr","@mut",[["get","breadcrumbs",["loc",[null,[3,33],[3,44]]]]],[],[]],"activeBreadcrumb",["subexpr","@mut",[["get","activeBreadcrumb",["loc",[null,[3,62],[3,78]]]]],[],[]],"action","breadcrumbChange"],["loc",[null,[3,4],[3,106]]]],
        ["content","outlet",["loc",[null,[5,2],[5,12]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/controller', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Controller.extend({
    urlService: Ember['default'].inject.service('url'),
    tabsService: Ember['default'].inject.service('tabs'),
    routeStateService: Ember['default'].inject.service('routeState'),
    searchResults: null,
    isSearching: false,
    hideSessionWidgets: false,

    /**
     * Page scroll position, in pixels
     * @type {Number}
     */
    scroll: 0,

    /**
     * Currently active tabs, containing all tabbed pages
     * @type {Tab[]}
     */
    tabs: null,

    init: function init() {
      this._super();
    },

    /**
     * Transition to the tab's active page when a tab is selected
     */
    tabSelected: Ember['default'].observer('tabsService.selectedTab', function () {
      var selectedTab = this.get('tabsService.selectedTab');
      var targetUrl = selectedTab.get('url') || '/';
      var targetState = selectedTab.get('state') || null;
      var routeStateService = this.get('routeStateService');
      routeStateService.transitionToState(targetUrl, targetState);
    }),

    /**
     * Save the scroll position to the history state whenever the user scrolls
     */
    scrollChanged: Ember['default'].observer('scroll', function () {
      var scrollPosition = this.get('scroll');
      var currentPath = this.get('urlService.currentPath');
      var isInLoadingState = currentPath.split('.').pop() === 'loading';
      if (isInLoadingState) {
        return;
      }
      this.updateTabState({
        'scroll': scrollPosition
      });
    }),

    /**
     * Update the scroll position whenever the router transitions to a new page
     */
    updateScrollPosition: Ember['default'].on('init', function () {
      var _this = this;

      var router = this.container.lookup('router:main');
      this.addDisposableListener(router, 'didTransition', function () {
        var routeStateService = _this.get('routeStateService');
        var tabState = routeStateService.getState();

        // Update the scroll position
        var scrollPosition = tabState && tabState.scroll || 0;
        if (_this.get('scroll') === scrollPosition) {
          return;
        }
        Ember['default'].run.scheduleOnce('afterRender', function () {
          _this.set('scroll', scrollPosition);
        });
      });
    }),

    /**
     * Add an event listener which will be automatically removed once this controller is destroyed
     * @param {Evented} subject Event emitter
     * @param {string} event Event name to listen to
     * @param {function} handler Listener handler function
     */
    addDisposableListener: function addDisposableListener(subject, event, handler) {
      // Add the listener
      subject.on(event, handler);
      this.get('disposableListeners').push({ subject: subject, event: event, handler: handler });
    },

    /**
     * Array of listeners which will be automatically removed once this controller is destroyed
     * @type {Object[]}
     */
    disposableListeners: null,

    /**
     * Initialise the array of disposable listeners
     */
    initDisposableListeners: Ember['default'].on('init', function () {
      this.set('disposableListeners', []);
    }),

    /**
     * Remove the disposable listeners once the controller is destroyed
     */
    willDestroy: function willDestroy() {
      this._super();
      this.get('disposableListeners').forEach(function (listener) {
        var subject = listener.subject;
        var event = listener.event;
        var handler = listener.handler;

        subject.off(event, handler);
      });
    },

    /**
     * Save UI state changes for the currently selected tab
     * @param {Object} updates Key/value object containing state values
     */
    updateTabState: function updateTabState(updates) {
      var routeStateService = this.get('routeStateService');
      var selectedTab = this.get('tabsService.selectedTab');
      if (!selectedTab) {
        return;
      }
      routeStateService.updateState(updates);
      var updatedState = Object.assign({}, selectedTab.get('state'), updates);
      selectedTab.set('state', updatedState);
    },

    actions: {
      onSearchingChanged: function onSearchingChanged(isSearching) {
        this.set('hideSessionWidgets', isSearching);
      },

      onTabSelected: function onTabSelected(tab) {
        this.get('tabsService').select(tab);
      },

      loadSearchRoute: function loadSearchRoute(baseURL, targetObjectId) {
        /* this has to be built as a URL - we have a searchResult object, not a user/case object */
        this.transitionToRoute(baseURL + targetObjectId);
      }
    }
  });

});
define('frontend-cp/session/index/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Route.extend({
    sessionService: Ember['default'].inject.service('session'),

    beforeModel: function beforeModel(transition) {
      this.transitionTo('session.agent');
    }
  });

});
define('frontend-cp/session/loading/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [
          ["inline","ko-loader",[],["large",true],["loc",[null,[1,14],[1,38]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [
        ["block","ko-center",[],[],0,null,["loc",[null,[1,0],[1,52]]]]
      ],
      locals: [],
      templates: [child0]
    };
  }()));

});
define('frontend-cp/session/route', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  /**
   * SessionRoute
   *
   * This route is resposible for checking the session exists for all its
   * child routes. Since a parent route loads before all its children, no
   * child route will load if the session id is not available.
   *
   * Note that the application route is not a child of this one so the
   * application route needs to check for the session independently.
   *
   * This route also loads all data shared by all its children,
   * including stored tabs from local storage and menus from the API.
   */

  exports['default'] = Ember['default'].Route.extend({
    tabsService: Ember['default'].inject.service('tabs'),

    setupController: function setupController(controller, model) {
      // Retrieve tabs from storage if available
      var tabsService = this.get('tabsService');
      tabsService.loadTabsFromStorage();
      controller.set('model', model);
    }
  });

});
define('frontend-cp/session/styleguide/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 204,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/styleguide/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","styleguide container");
        var el2 = dom.createTextNode("\n  Add style guide here!\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Headings");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h1");
        var el4 = dom.createTextNode("Heading 1");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Heading 2");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h3");
        var el4 = dom.createTextNode("Heading 3");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Heading 3");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h5");
        var el4 = dom.createTextNode("Heading 5");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h6");
        var el4 = dom.createTextNode("Heading 6");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Arrow");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","box u-pos-rel");
        var el4 = dom.createTextNode("\n      I have an arrow at the top! :)\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","arrow arrow--top");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","box u-pos-rel");
        var el4 = dom.createTextNode("\n      I have an arrow at the bottom! :(\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","arrow arrow--bottom");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Box");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","box");
        var el4 = dom.createTextNode("\n      I am a standard box!\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","box box--secondary");
        var el4 = dom.createTextNode("\n      i am a box with secondary styling!\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","box-container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","box");
        var el5 = dom.createTextNode("I am a box with a container");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","box box--wide");
        var el5 = dom.createTextNode("\n        I am a wide box with a container ;)\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","box");
        var el5 = dom.createTextNode("I am a box container");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Flag");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","flag");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag__img");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("img");
        dom.setAttribute(el5,"width","48");
        dom.setAttribute(el5,"height","48");
        dom.setAttribute(el5,"src","http://i.imgur.com/C9QgICy.jpg");
        dom.setAttribute(el5,"alt","");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","flag__body");
        var el5 = dom.createTextNode("\n        I am the flag body!\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Typography Utilities");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("States");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-good");
        var el4 = dom.createTextNode("I am a good message! :)");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-bad");
        var el4 = dom.createTextNode("I am a bad message! >:)");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-warning");
        var el4 = dom.createTextNode("I am a warning message! :(");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Position");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-center");
        var el4 = dom.createTextNode("I am center aligned");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-left");
        var el4 = dom.createTextNode("I am left aligned");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-right");
        var el4 = dom.createTextNode("I am right aligned");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Style");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-caption");
        var el4 = dom.createTextNode("I am a caption!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("p");
        dom.setAttribute(el3,"class","t-small");
        var el4 = dom.createTextNode("I am small!");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","styleguide__item");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h2");
        var el4 = dom.createTextNode("Variables");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Brand");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n$brand-rounding | border-radius\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Colors");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n$color-primary\n$color-secondary\n$color-tertiary\n$color-trim\n  $color-trim--dark\n\n$color-active\n\n\n$color-text-primary\n$color-text-secondary\n  $color-text-secondary--dark\n\n\n$color-good\n$color-bad\n$color-warning\n\n\n$color-twitter\n$color-facebook\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        var el4 = dom.createTextNode("Defaults");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("code");
        var el4 = dom.createTextNode("\n$base-spacing-unit\n$half-spacing-unit\n$quarter-spacing-unit\n$large-spacing-unit\n\n$base-font-size\n$base-line-height\n$base-text-color\n$base-background-color\n$base-font-family\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var element2 = dom.childAt(element0, [5]);
        var element3 = dom.childAt(element0, [9]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [5]),1,1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [9]),1,1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [5]),1,1);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [9]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [13]),1,1);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [7, 5]),1,1);
        morphs[6] = dom.createMorphAt(dom.childAt(element3, [11]),1,1);
        morphs[7] = dom.createMorphAt(dom.childAt(element3, [21]),1,1);
        morphs[8] = dom.createMorphAt(dom.childAt(element3, [29]),1,1);
        return morphs;
      },
      statements: [
        ["inline","escape-html",["<div class=\"arrow arrow--top\"></div>"],[],["loc",[null,[23,0],[25,2]]]],
        ["inline","escape-html",["<div class=\"arrow arrow--bottom\"></div>"],[],["loc",[null,[33,0],[35,2]]]],
        ["inline","escape-html",["<div class=\"box\">\n  I am a box with secondary styling!\n</div>"],[],["loc",[null,[46,0],[50,2]]]],
        ["inline","escape-html",["<div class=\"box box--secondary\">\n  I am a box with secondary styling!\n</div>"],[],["loc",[null,[57,0],[61,2]]]],
        ["inline","escape-html",["<div class=\"box-container\">\n  <div class=\"box\">I am a box with a container</div>\n  <div class=\"box box--wide\">\n    I am a wide box with a container ;)\n  </div>\n  <div class=\"box\">I am a box container</div>\n</div>"],[],["loc",[null,[72,0],[80,2]]]],
        ["inline","escape-html",["<div class=\"flag\">\n  <div class=\"flag__img\">\n    <img class=\"avatar\" src=\"http://i.imgur.com/C9QgICy.jpg\" alt=\"\">\n  </div>\n  <div class=\"flag__body\">\n    I am the flag body!\n  </div>\n</div>"],[],["loc",[null,[96,0],[105,2]]]],
        ["inline","escape-html",["<p class=\"t-good\">I am a good message! :)</p>\n<p class=\"t-bad\">I am a bad message! >:)</p>\n<p class=\"t-warning\">I am a warning message! :(</p>"],[],["loc",[null,[119,0],[123,2]]]],
        ["inline","escape-html",["<p class=\"t-center\">I am center aligned</p>\n<p class=\"t-left\">I am left aligned</p>\n<p class=\"t-right\">I am right aligned</p>"],[],["loc",[null,[133,0],[137,2]]]],
        ["inline","escape-html",["<p class=\"t-caption\">I am a caption!</p>\n<p class=\"t-small\">I am small!</p>"],[],["loc",[null,[145,0],[148,2]]]]
      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/session/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 10
            },
            "end": {
              "line": 8,
              "column": 81
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child1 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","ko-session-widgets",["loc",[null,[30,12],[30,34]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    var child2 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 67
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("Style Guide");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() { return []; },
        statements: [

        ],
        locals: [],
        templates: []
      };
    }());
    var child3 = (function() {
      return {
        meta: {
          "revision": "Ember@1.13.7",
          "loc": {
            "source": null,
            "start": {
              "line": 41,
              "column": 2
            },
            "end": {
              "line": 43,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);
          return morphs;
        },
        statements: [
          ["content","outlet",["loc",[null,[42,4],[42,14]]]]
        ],
        locals: [],
        templates: []
      };
    }());
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1,"class","header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2,"class","nav");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","nav__image");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5,"class","nav-main");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5,"class","nav-tabs");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3,"class","nav-secondary");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4,"class","container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","u-3/4 u-inline-block");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("\n     ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5,"class","u-1/4 u-inline-block");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"class","session__content");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element0, [3, 1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [3, 1]),2,2);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [5, 1]),1,1);
        morphs[2] = dom.createMorphAt(element1,7,7);
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1]),1,1);
        morphs[4] = dom.createMorphAt(dom.childAt(element2, [3]),1,1);
        morphs[5] = dom.createMorphAt(fragment,2,2,contextualElement);
        morphs[6] = dom.createMorphAt(dom.childAt(fragment, [4]),1,1);
        return morphs;
      },
      statements: [
        ["block","link-to",["session.agent.cases.index"],["class","nav-main__item i-inbox"],0,null,["loc",[null,[8,10],[8,93]]]],
        ["inline","ko-tabs",[],["tabs",["subexpr","@mut",[["get","tabsService.tabs",["loc",[null,[16,25],[16,41]]]]],[],[]],"selectedTab",["subexpr","@mut",[["get","tabsService.selectedTab",["loc",[null,[17,24],[17,47]]]]],[],[]],"onTabSelected","onTabSelected"],["loc",[null,[16,10],[18,43]]]],
        ["content","ko-agent-dropdown",["loc",[null,[21,6],[21,27]]]],
        ["inline","ko-universal-search",[],["searchResults",["subexpr","@mut",[["get","searchResults",["loc",[null,[26,46],[26,59]]]]],[],[]],"searchingChanged","onSearchingChanged"],["loc",[null,[26,10],[26,99]]]],
        ["block","unless",[["get","hideSessionWidgets",["loc",[null,[29,20],[29,38]]]]],[],1,null,["loc",[null,[29,10],[31,21]]]],
        ["block","link-to",["session.styleguide"],["class","nav-main__item"],2,null,["loc",[null,[38,0],[38,79]]]],
        ["block","ko-scroller",[],["scrollTop",["subexpr","@mut",[["get","scroll",["loc",[null,[41,27],[41,33]]]]],[],[]]],3,null,["loc",[null,[41,2],[43,18]]]]
      ],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  }()));

});
define('frontend-cp/session/test/entry/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, TabbedRoute) {

  'use strict';

  exports['default'] = TabbedRoute['default'].extend({
    model: function model() {
      return {};
    }
  });

});
define('frontend-cp/session/test/entry/template', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      meta: {
        "revision": "Ember@1.13.7",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/test/entry/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1,"style","height: 5000px");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() { return []; },
      statements: [

      ],
      locals: [],
      templates: []
    };
  }()));

});
define('frontend-cp/tests/acceptance/case/create-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.app('Acceptance | Case | Create case', {
    beforeEach: function beforeEach() {
      // useDefaultScenario();
      var language = server.create('language');
      var brand = server.create('brand', { language: language });
      var caseFields = server.createList('case-field', 4);
      var mailbox = server.create('mailbox', { brand: brand });
      server.create('channel', { account: { id: mailbox.id, resource_type: 'mailbox' } });
      server.create('case-form', {
        fields: caseFields,
        brand: brand
      });
      var agentRole = server.create('role', { type: 'AGENT' });
      var customerRole = server.create('role', { type: 'AGENT' });
      var agent = server.create('user', { role: agentRole });
      var session = server.create('session', { user: agent });
      server.create('user', { full_name: 'Barney Stinson', role: customerRole });
      server.createList('case-status', 5);
      server.createList('case-priority', 4);
      login(session.id);
    },

    afterEach: function afterEach() {
      logout();
    }
  });

  qunit.test('Creating a case using the "+" button in the main header', function (assert) {
    visit('/agent');

    click('.ko-agent-dropdown__nav-new');
    click('.ko-agent-dropdown__item:eq(0) .ko-agent-dropdown__link');
    fillIn('.ko-agent-dropdown-create-case__input input', 'Barney');

    andThen(function () {
      click('.ko-agent-dropdown-create-case__input .ko-dropdown_list__item');
      click('.ko-agent-dropdown__drop .button--primary');
    });

    andThen(function () {
      assert.equal(currentURL(), '/agent/cases/new');
      assert.equal(find('.ko-case-content__info-bar .info-bar-item:eq(1) input').val(), 'Barney Stinson', 'The recipient of the new case is Barney');
      assert.ok(find('.breadcrumbs .breadcrumbs__item:eq(0)').text().trim() === 'Barney Stinson' && find('.breadcrumbs .breadcrumbs__item:eq(1)').text().trim() === 'New case', 'Breadcrums are correct');
      assert.equal(find('.nav-tabs__item').length, 1, 'There is only one tab');
      assert.equal(find('.nav-tabs__item.is-active').length, 1, 'That tab is active');
      assert.equal(find('.nav-tabs__item').text().trim(), 'New Case', 'That tab belongs to the case being created');
      click('.ko-case-content__header-title .editable-text__text');
      fillIn('.ko-case-content__header-title input', 'No internet');
      triggerEvent('.ko-case-content__header-title input', 'input');
    });

    andThen(function () {
      find('.ko-case-content__header-title input').trigger($.Event('keydown', { which: 13, keyCode: 13 }));
      fillIn('.ko-text-editor__text-area', 'I press the button and the bomb explodes');
      click('.info-bar-item:contains("Case form") .dropdown');
      click('.info-bar-item:contains("Case form") .dropdown-menu__item:contains("Internet Related Issue")');
      click('.info-bar-item:contains("Priority") .dropdown');
      click('.info-bar-item:contains("Priority") .dropdown-menu__item:contains("Low")');
      click('.ko-case-content__info-bar .button--primary');
    });

    andThen(function () {
      assert.equal(find('.nav-tabs__item').length, 1, 'There is only one tab');
      assert.equal(find('.nav-tabs__item').text().trim(), 'No internet', 'That title of the tab has updated');
      // assert.equal(currentURL(), '/agent/cases/1'); This doesn't work at the moment but it should
    });
  });

});
define('frontend-cp/tests/acceptance/case/list-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.app('Acceptance | Case | List', {
    beforeEach: function beforeEach() {
      useDefaultScenario();
      login();
    },

    afterEach: function afterEach() {
      logout();
    }
  });

  qunit.test('number of cases listed', function (assert) {
    assert.expect(2);
    visit('/agent');
    visit('/agent/cases');

    andThen(function () {
      assert.equal(currentURL(), '/agent/cases?view=1');
      assert.equal(find('tbody tr').length, 5);
    });
  });

});
define('frontend-cp/tests/acceptance/case/reply-with-quote-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.app('Acceptance | Case | Reply with quote', {
    beforeEach: function beforeEach() {
      useDefaultScenario();
      login();
    },

    afterEach: function afterEach() {
      logout();
    }
  });

  qunit.test('reply with quote to an existing case', function (assert) {
    assert.expect(2);

    visit('/agent/cases/1');

    andThen(function () {
      assert.equal(currentURL(), '/agent/cases/1');
      click('.ko-feed-item_menu__item:first.i-quote');
    });

    andThen(function () {
      var lastFeedItemContent = find('.feed__item:first .feed__content').text().trim;
      var editorContent = find('.ql-editor:first').text().trim;
      assert.equal(lastFeedItemContent, editorContent);
    });
  });

});
define('frontend-cp/tests/acceptance/login/reset-password-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.app('Acceptance | Login | Reset password');

  qunit.test('user can reset their password', function (assert) {
    assert.expect(1);

    visit('/agent/login');

    andThen(function () {
      click('a:contains("Forgot password?")');
    });

    andThen(function () {
      fillIn('input[name=email]', 'test@kayako.com');
      click('button:contains("Reset your password")');
    });

    andThen(function () {
      var successMessage = $('h6:visible')[0].innerText;
      assert.equal(successMessage, 'An email with a reset link has been sent to your inbox');
    });
  });

});
define('frontend-cp/tests/acceptance/manage-user-identities-test', ['ember', 'qunit', 'frontend-cp/tests/helpers/start-app'], function (Ember, qunit, startApp) {

  'use strict';

  var originalConfirm = undefined;
  qunit.module('Acceptance | Manage Email Identities', {
    beforeEach: function beforeEach() {
      this.application = startApp['default']();
      var emails = [server.create('identity-email', { email: 'first@example.com', is_primary: true, is_validated: true }), server.create('identity-email', { email: 'second@example.com', is_primary: false, is_validated: true }), server.create('identity-email', { email: 'third@example.com', is_primary: false, is_validated: false })];
      var user = server.create('user', { emails: emails, role: server.create('role') });
      var session = server.create('session', { user: user });
      login(session.id);

      visit('/agent/users/' + user.id);
      originalConfirm = window.confirm;
    },

    afterEach: function afterEach() {
      window.confirm = originalConfirm;
      Ember['default'].run(this.application, 'destroy');
    }
  });

  qunit.test('Verify an email identity of a user', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("third@example.com")', 'focusin');

    andThen(function () {
      assert.equal(find('.ko-identities__list--emails .ko-dropdown_list__item:eq(0)').text().trim(), 'Remove identity', 'The identity can be removed');
      assert.equal(find('.ko-identities__list--emails .ko-dropdown_list__item:eq(1)').text().trim(), 'Verify identity', 'The identity is not verified');
      click('.ko-identities__list--emails .ko-dropdown_list__item:eq(1)');
    });

    andThen(function () {
      triggerEvent('[class*=ko-dropdown--container--button]:contains("third@example.com")', 'focusin');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--emails .ko-dropdown_list__item').length, 2, 'There is only two options now for that identity');
      assert.equal(find('.ko-identities__list--emails .ko-dropdown_list__item:eq(0)').text().trim(), 'Remove identity', 'The identity can be removed');
      assert.equal(find('.ko-identities__list--emails .ko-dropdown_list__item:eq(1)').text().trim(), 'Make primary', 'The identity can now be marked as primary');
    });
  });

  qunit.test('Mark a verified email as primary', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("second@example.com")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--emails .ko-dropdown_list__item:contains("Make primary")');
    });

    andThen(function () {
      assert.ok(/\(primary\)/.test(find('.ko-identities__list--emails li:contains("second@example.com")').text().trim()), 'The second address became the primary one');
      assert.ok(!/\(primary\)/.test(find('.ko-identities__list--emails li:contains("first@example.com")').text().trim()), 'That first address isn\'t the primary anymore');
    });
  });

  qunit.test('Remove an email', function (assert) {
    assert.expect(4);
    window.confirm = function (message) {
      assert.equal(message, 'Are you sure you want to remove this identity?');
      return true;
    };
    triggerEvent('[class*=ko-dropdown--container--button]:contains("second@example.com")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--emails .ko-dropdown_list__item:contains("Remove identity")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--emails li:contains("first@example.com (primary)")').length, 1, 'The first email is still there');
      assert.equal(find('.ko-identities__list--emails li:contains("second@example.com")').length, 0, 'The first email is NOT there');
      assert.equal(find('.ko-identities__list--emails li:contains("third@example.com")').length, 1, 'The third email is still there');
    });
  });

  qunit.test('Add an email identity', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Add new")', 'focusin');

    andThen(function () {
      click('.ko-identities__create-dropdown .ko-dropdown_list__item:contains("Email")');
      fillIn('.ko-identities_form input', 'newemail@example.com');
      click('.ko-identities_form button:contains("Save")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--emails li:contains("newemail@example.com")').length, 1, 'The new email is in the list');
      assert.equal(find('.ko-identities__list--emails li:contains("newemail@example.com") .i-caution').length, 1, 'This new email is marked as not verified');
    });
  });

  qunit.test('Add an invalid email identity shows an error message', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Add new")', 'focusin');

    andThen(function () {
      click('.ko-identities__create-dropdown .ko-dropdown_list__item:contains("Email")');
      fillIn('.ko-identities_form input', 'wrong@example');
      click('.ko-identities_form button:contains("Save")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities_form label.t-bad').text(), 'Email format invalid');
    });
  });

  // test('Send verification email', function(assert) {
  //   throw new Error('not implemented');
  // });

  qunit.module('Acceptance | Manage Twitter Identities', {
    beforeEach: function beforeEach() {
      this.application = startApp['default']();
      var twitters = [server.create('identity-twitter', { screen_name: '@first', is_primary: true, is_validated: true }), server.create('identity-twitter', { screen_name: '@second', is_primary: false, is_validated: true }), server.create('identity-twitter', { screen_name: '@third', is_primary: false, is_validated: false })];
      var user = server.create('user', { twitters: twitters, role: server.create('role') });
      var session = server.create('session', { user: user });
      login(session.id);

      visit('/agent/users/' + user.id);
    },

    afterEach: function afterEach() {
      Ember['default'].run(this.application, 'destroy');
    }
  });

  qunit.test('Mark a verified twitter as primary', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("@second")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--twitters .ko-dropdown_list__item:contains("Make primary")');
    });

    andThen(function () {
      assert.ok(/\(primary\)/.test(find('.ko-identities__list--twitters li:contains("@second")').text().trim()), 'The second address became the primary one');
      assert.ok(!/\(primary\)/.test(find('.ko-identities__list--twitters li:contains("@first")').text().trim()), 'That first address isn\'t the primary anymore');
    });
  });

  qunit.test('Remove a twitter identity', function (assert) {
    assert.expect(4);
    window.confirm = function (message) {
      assert.equal(message, 'Are you sure you want to remove this identity?');
      return true;
    };
    triggerEvent('[class*=ko-dropdown--container--button]:contains("@second")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--twitters .ko-dropdown_list__item:contains("Remove identity")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--twitters li:contains("@first (primary)")').length, 1, 'The first twitter is still there');
      assert.equal(find('.ko-identities__list--twitters li:contains("@second")').length, 0, 'The first twitter is NOT there');
      assert.equal(find('.ko-identities__list--twitters li:contains("@third")').length, 1, 'The third twitter is still there');
    });
  });

  qunit.test('Add an twitter identity', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Add new")', 'focusin');

    andThen(function () {
      click('.ko-identities__create-dropdown .ko-dropdown_list__item:contains("Twitter")');
      fillIn('.ko-identities_form input', '@miguelcamba');
      click('.ko-identities_form button:contains("Save")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--twitters li:contains("@miguelcamba")').length, 1, 'The new email is in the list');
    });
  });

  qunit.module('Acceptance | Manage Facebook Identities', {
    beforeEach: function beforeEach() {
      this.application = startApp['default']();
      var facebooks = [server.create('identity-facebook', { user_name: 'Mike', is_primary: true, is_validated: true }), server.create('identity-facebook', { user_name: 'Mary', is_primary: false, is_validated: true }), server.create('identity-facebook', { user_name: 'John', is_primary: false, is_validated: false })];
      var user = server.create('user', { facebooks: facebooks, role: server.create('role') });
      var session = server.create('session', { user: user });
      login(session.id);

      visit('/agent/users/' + user.id);
    },

    afterEach: function afterEach() {
      Ember['default'].run(this.application, 'destroy');
    }
  });

  qunit.test('Mark a verified facebook as primary', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Mary")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--facebooks .ko-dropdown_list__item:contains("Make primary")');
    });

    andThen(function () {
      assert.ok(/\(primary\)/.test(find('.ko-identities__list--facebooks li:contains("Mary")').text().trim()), 'The second address became the primary one');
      assert.ok(!/\(primary\)/.test(find('.ko-identities__list--facebooks li:contains("Mike")').text().trim()), 'That first address isn\'t the primary anymore');
    });
  });

  qunit.test('Remove a facebook identity', function (assert) {
    assert.expect(4);
    window.confirm = function (message) {
      assert.equal(message, 'Are you sure you want to remove this identity?');
      return true;
    };
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Mary")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--facebooks .ko-dropdown_list__item:contains("Remove identity")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--facebooks li:contains("Mike (primary)")').length, 1, 'The first facebook is still there');
      assert.equal(find('.ko-identities__list--facebooks li:contains("Mary")').length, 0, 'The first facebook is NOT there');
      assert.equal(find('.ko-identities__list--facebooks li:contains("John")').length, 1, 'The third facebook is still there');
    });
  });

  qunit.module('Acceptance | Manage Phone Identities', {
    beforeEach: function beforeEach() {
      this.application = startApp['default']();
      var phones = [server.create('identity-phone', { number: '+44 1111 111111', is_primary: true, is_validated: true }), server.create('identity-phone', { number: '+44 2222 222222', is_primary: false, is_validated: true }), server.create('identity-phone', { number: '+44 3333 333333', is_primary: false, is_validated: false })];
      var user = server.create('user', { phones: phones, role: server.create('role') });
      var session = server.create('session', { user: user });
      login(session.id);

      visit('/agent/users/' + user.id);
    },

    afterEach: function afterEach() {
      Ember['default'].run(this.application, 'destroy');
    }
  });

  qunit.test('Mark a verified phone as primary', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("+44 2222 222222")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--phones .ko-dropdown_list__item:contains("Make primary")');
    });

    andThen(function () {
      assert.ok(/\(primary\)/.test(find('.ko-identities__list--phones li:contains("+44 2222 222222")').text().trim()), 'The second address became the primary one');
      assert.ok(!/\(primary\)/.test(find('.ko-identities__list--phones li:contains("+44 1111 111111")').text().trim()), 'That first address isn\'t the primary anymore');
    });
  });

  qunit.test('Remove a phone identity', function (assert) {
    assert.expect(4);
    window.confirm = function (message) {
      assert.equal(message, 'Are you sure you want to remove this identity?');
      return true;
    };
    triggerEvent('[class*=ko-dropdown--container--button]:contains("+44 2222 222222")', 'focusin');

    andThen(function () {
      click('.ko-identities__list--phones .ko-dropdown_list__item:contains("Remove identity")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--phones li:contains("+44 1111 111111 (primary)")').length, 1, 'The first phone is still there');
      assert.equal(find('.ko-identities__list--phones li:contains("+44 2222 222222")').length, 0, 'The first phone is NOT there');
      assert.equal(find('.ko-identities__list--phones li:contains("+44 3333 333333")').length, 1, 'The third phone is still there');
    });
  });

  qunit.test('Add an phone identity', function (assert) {
    triggerEvent('[class*=ko-dropdown--container--button]:contains("Add new")', 'focusin');

    andThen(function () {
      click('.ko-identities__create-dropdown .ko-dropdown_list__item:contains("Phone")');
      fillIn('.ko-identities_form input', '+44 (7746) 123-456');
      click('.ko-identities_form button:contains("Save")');
    });

    andThen(function () {
      assert.equal(find('.ko-identities__list--phones li:contains("+447746123456")').length, 1, 'The new phone is in the list, with all chars but number and `+` removed');
    });
  });

});
define('frontend-cp/tests/acceptance/tabs/tabs-test', ['frontend-cp/tests/helpers/qunit', 'frontend-cp/tests/fixtures/location/mock-location'], function (qunit, MockLocation) {

  'use strict';

  qunit.app('Acceptance | Tabs', {
    beforeEach: function beforeEach(application) {
      application.__container__.lookup('router:main').set('location', MockLocation['default'].create());
    }
  });

  qunit.test('cases open in their own tabs', function (assert) {
    assert.expect(27);

    useDefaultScenario();
    login();

    visit('/agent');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 0);
    });

    visit('/styleguide');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 0);
    });

    visit('/agent/cases/1');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 1);
      var $firstTabElement = getTabElements().eq(0);
      assert.ok(getIsActiveTabElement($firstTabElement));
    });

    visit('/agent/cases/1/user');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 1);
      var $firstTabElement = getTabElements().eq(0);
      assert.ok(getIsActiveTabElement($firstTabElement));
    });

    visit('/agent/cases/1');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 1);
      var $firstTabElement = getTabElements().eq(0);
      assert.ok(getIsActiveTabElement($firstTabElement));
    });

    visit('/agent/cases/2/user');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    visit('/agent/cases/2');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    visit('/agent/cases/2/user');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    visit('/agent/cases/1');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(getIsActiveTabElement($firstTabElement));
      assert.ok(!getIsActiveTabElement($secondTabElement));
    });

    visit('/agent/cases/2');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    visit('/agent/cases/2/user');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = getTabElements().eq(0);
      var $secondTabElement = getTabElements().eq(1);
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    visit('/');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
    });
  });

  qunit.test('tab label is set to case name', function (assert) {
    assert.expect(2);

    useDefaultScenario();
    login();

    visit('/agent/cases/1');

    andThen(function () {
      var $tabElement = getTabElements();
      assert.equal($tabElement.text().trim(), 'ERS Audit 1');
    });

    visit('/agent/cases/2');

    andThen(function () {
      var $tabElement = getTabElements().eq(1);
      assert.equal($tabElement.text().trim(), 'ERS Audit 2');
    });
  });

  qunit.test('tabs are loaded from session storage', function (assert) {
    assert.expect(3);

    sessionStorage.setItem('tabs', JSON.stringify([{
      baseUrl: null,
      url: null,
      label: null
    }, {
      baseUrl: '/agent/cases/1',
      url: '/agent/cases/1/user',
      label: 'Case 1'
    }, {
      baseUrl: '/agent/cases/2',
      url: '/agent/cases/2/user',
      label: 'Case 2'
    }]));

    useDefaultScenario();
    login();

    visit('/');

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);

      var $firstTabElement = $tabElements.eq(0);
      var $secondTabElement = $tabElements.eq(1);
      assert.equal($firstTabElement.text().trim(), 'Case 1');
      assert.equal($secondTabElement.text().trim(), 'Case 2');
    });
  });

  qunit.test('tabs can be closed', function (assert) {
    assert.expect(9);

    useDefaultScenario();
    login();

    visit('/');
    visit('/agent/cases/1');
    visit('/agent/cases/2');
    visit('/agent/cases/3');

    andThen(function () {
      var $activeTabElement = getActiveTabElement();
      closeTab($activeTabElement);
    });

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 2);
      var $firstTabElement = $tabElements.eq(0);
      var $secondTabElement = $tabElements.eq(1);
      assert.equal(currentURL(), '/agent/cases/2');
      assert.ok(!getIsActiveTabElement($firstTabElement));
      assert.ok(getIsActiveTabElement($secondTabElement));
    });

    andThen(function () {
      var $firstTabElement = getTabElements().eq(0);
      closeTab($firstTabElement);
    });

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 1);
      var $firstTabElement = $tabElements.eq(0);
      assert.equal(currentURL(), '/agent/cases/2');
      assert.ok(getIsActiveTabElement($firstTabElement));
    });

    andThen(function () {
      var $firstTabElement = getTabElements().eq(0);
      closeTab($firstTabElement);
    });

    andThen(function () {
      var $tabElements = getTabElements();
      assert.equal($tabElements.length, 0);
      assert.equal(currentURL(), '/agent');
    });
  });

  qunit.test('tabs remember scroll position', function (assert) {
    assert.expect(5);

    useDefaultScenario();
    login();

    visit('/styleguide');

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      scrollElement($scrollPaneElement, 10);
    });

    visit('/test/1');

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      scrollElement($scrollPaneElement, 20);
    });

    visit('/test/2');

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      scrollElement($scrollPaneElement, 30);
    });

    andThen(function () {
      var $firstTabElement = getTabElements().eq(0);
      $firstTabElement.click();
    });

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      var scrollPosition = getScrollPosition($scrollPaneElement);
      assert.equal(scrollPosition, 20);
    });

    andThen(function () {
      var $secondTabElement = getTabElements().eq(1);
      $secondTabElement.click();
    });

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      var scrollPosition = getScrollPosition($scrollPaneElement);
      assert.equal(scrollPosition, 30);
    });

    visit('/test/1');

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      var scrollPosition = getScrollPosition($scrollPaneElement);
      assert.equal(scrollPosition, 20);
    });

    visit('/test/2');

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      var scrollPosition = getScrollPosition($scrollPaneElement);
      assert.equal(scrollPosition, 30);
    });

    closeAllTabs();

    andThen(function () {
      var $scrollPaneElement = getScrollPaneElement();
      var scrollPosition = getScrollPosition($scrollPaneElement);
      assert.equal(scrollPosition, 10);
    });
  });

  function getTabElements() {
    return find('.nav-tabs__item');
  }

  function getActiveTabElement() {
    return getTabElements().filter('.is-active');
  }

  function getIsActiveTabElement(element) {
    return $(element).hasClass('is-active');
  }

  function getScrollPaneElement() {
    return find('.session__content > .ko-scroller');
  }

  function scrollElement(element, scrollTop) {
    $(element).scrollTop(scrollTop).scroll();
  }

  function getScrollPosition(element) {
    return $(element).scrollTop();
  }

  function closeTab(tabElement) {
    andThen(function () {
      $(tabElement).find('.nav-tabs__close').click();
    });
  }

  function closeAllTabs() {
    andThen(function () {
      var $tabElements = getTabElements();
      $tabElements.each(function (index, tabElement) {
        closeTab(tabElement);
      });
    });
  }

});
define('frontend-cp/tests/acceptance/user/user-menu-test', function () {

  'use strict';

  /*
  TODO(SG): Once the user page is implemented and we bring back the menu,
  we'll need to bring that back. Uncommented for now. NOVO-327.

  import Ember from 'ember';
  import {
    app,
    test
  } from 'frontend-cp/tests/helpers/qunit';

  app('Acceptance | User-menu');

  test('visiting /user-menu', function(assert) {
    assert.expect(1);
    useDefaultScenario();
    login();

    visit('/agent');
    visit('/agent/cases');

    andThen(function() {
      Ember.$("div[class*='ko-user-menu-'] div[class*='ko-dropdown--container']").focus();
    });

    andThen(function() {
      click("div[class*='ko-user-menu-'] div[class*='ko-dropdown--container'] li:nth-of-type(3)");
    });

    andThen(function() {
      assert.equal(currentURL(), '/agent/users/1');
    });
  });*/

});
define('frontend-cp/tests/assertions/properties-equal', ['exports', 'ember', 'qunit'], function (exports, Ember, QUnit) {

  'use strict';



  exports['default'] = propertiesEqual;

  function propertiesEqual(actual, expected, message) {
    var expectedProperties = expected instanceof Ember['default'].Object ? getEmberObjectProperties(expected) : expected;
    if (!actual) {
      this.push(false, actual, expectedProperties, message);
      return;
    }
    var actualProperties = getEmberObjectProperties(actual);
    var objectsAreEqual = QUnit['default'].equiv(actualProperties, expectedProperties);
    this.push(objectsAreEqual, actualProperties, expectedProperties, message);
  }

  function getEmberObjectProperties(value) {
    if (!value) {
      return parsePrimitive(value);
    } else if (Array.isArray(value)) {
      return parseArray(value);
    } else if (value instanceof Ember['default'].Object) {
      return parseEmberObject(value);
    } else if (value instanceof Object) {
      return parseObject(value);
    } else {
      return value;
    }

    function parsePrimitive(value) {
      return value;
    }

    function parseEmberObject(value) {
      var properties = value.getProperties(Object.keys(value));
      return parseObject(properties);
    }

    function parseObject(value) {
      return Object.keys(value).reduce(function (fields, key) {
        fields[key] = getEmberObjectProperties(value[key]);
        return fields;
      }, {});
    }

    function parseArray(value) {
      return value.map(function (item) {
        return getEmberObjectProperties(item);
      });
    }
  }

});
define('frontend-cp/tests/blanket-options', function () {

  'use strict';

  /* globals blanket, module */
  /*eslint-disable */
  var options = {
    modulePrefix: 'frontend-cp',
    filter: '//.*frontend-cp/.*/',
    antifilter: '//.*(tests|template).*/',
    loaderExclusions: [],
    enableCoverage: true,
    cliOptions: {
      reporters: ['json'],
      autostart: true
    }
  };
  if (typeof exports === 'undefined') {
    blanket.options(options);
  } else {
    module.exports = options;
  }
  /*eslint-enable */

});
define('frontend-cp/tests/fixtures/browser/mock-browser', ['exports'], function (exports) {

  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var Location = function Location() {
    var url = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];

    _classCallCheck(this, Location);

    var linkElement = document.createElement('a');
    linkElement.href = url;

    this.hash = linkElement.hash;
    this.host = linkElement.host;
    this.hostname = linkElement.hostname;
    this.href = linkElement.href;
    this.origin = linkElement.origin;
    this.pathname = linkElement.pathname;
    this.port = linkElement.port;
    this.protocol = linkElement.protocol;
    this.search = linkElement.search;
  };

  var History = (function () {
    function History() {
      var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var _ref$location = _ref.location;
      var location = _ref$location === undefined ? null : _ref$location;
      var _ref$state = _ref.state;
      var state = _ref$state === undefined ? null : _ref$state;
      var _ref$title = _ref.title;
      var title = _ref$title === undefined ? null : _ref$title;

      _classCallCheck(this, History);

      this._location = location || new Location();
      this._entries = [];
      this._currentIndex = -1;

      var path = this._location.href;
      this.pushState(state, title, path);
    }

    _createClass(History, [{
      key: 'back',
      value: function back() {
        if (this._currentIndex > 0) {
          this._currentIndex--;
        }
      }
    }, {
      key: 'forward',
      value: function forward() {
        if (this._currentIndex < this._entries.length - 1) {
          this._currentIndex++;
        }
      }
    }, {
      key: 'go',
      value: function go(delta) {
        var targetIndex = this._currentIndex + delta;
        if (targetIndex >= 0 && targetIndex < this._entries.length) {
          this._currentIndex = targetIndex;
        }
      }
    }, {
      key: 'pushState',
      value: function pushState(state, title, path) {
        this._entries.length = this._currentIndex + 1;
        this._entries.push({
          state: state,
          title: title,
          path: path
        });
        this._currentIndex = this._entries.length - 1;
        var newLocation = new Location(path);
        Object.assign(this._location, newLocation);
      }
    }, {
      key: 'replaceState',
      value: function replaceState(state, title, path) {
        if (arguments.length < 3) {
          var currentItem = this._entries[this._currentIndex] || {
            state: null,
            title: null,
            path: null
          };
          if (arguments.length < 2) {
            title = currentItem.title;
          }
          if (arguments.length < 3) {
            path = currentItem.path;
          }
        }
        this._currentIndex = Math.max(0, this._currentIndex);
        this._entries[this._currentIndex] = {
          state: state,
          title: title,
          path: path
        };
        var newLocation = this._entries[this._currentIndex];
        Object.assign(this._location, newLocation);
      }
    }, {
      key: 'length',
      get: function get() {
        return this._entries.length;
      }
    }, {
      key: 'state',
      get: function get() {
        if (this._currentIndex === -1) {
          return null;
        }
        return this._entries[this._currentIndex].state;
      }
    }]);

    return History;
  })();

  exports.Location = Location;
  exports.History = History;

});
define('frontend-cp/tests/fixtures/location/mock-location', ['exports', 'ember', 'frontend-cp/tests/fixtures/browser/mock-browser'], function (exports, Ember, mock_browser) {

  'use strict';

  exports['default'] = Ember['default'].HistoryLocation.extend({
    init: function init() {
      var location = new mock_browser.Location();
      var history = new mock_browser.History({
        location: location
      });
      this.set('location', location);
      this.set('history', history);
      this._super();
      this.initState();
      this.replaceState(this.formatURL('/'));
    }
  });

});
define('frontend-cp/tests/fixtures/router/mock-router', ['exports', 'ember', 'frontend-cp/tests/fixtures/location/mock-location'], function (exports, Ember, MockLocation) {

  'use strict';

  exports['default'] = Ember['default'].Object.extend(Ember['default'].Evented, {
    init: function init() {
      this._super();
      this.set('location', this.get('location') || MockLocation['default'].create());
    },
    location: null,
    transitionTo: function transitionTo(url) {
      var _this = this;

      var location = this.get('location');
      var path = location.formatURL(url);
      var state = {
        path: path
      };
      location.get('history').pushState(state, null, path);
      return Ember['default'].RSVP.resolve().then(function () {
        _this.trigger('didTransition');
      });
    }
  });

});
define('frontend-cp/tests/fixtures/services/mock-local-store', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Service.extend({
    _localStore: null,
    _sessionStore: null,

    init: function init() {
      this._super();
      this.set('_localStore', {});
      this.set('_sessionStore', {});
    },

    getItem: function getItem(key) {
      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref$persist = _ref.persist;
      var persist = _ref$persist === undefined ? false : _ref$persist;

      var store = this.get(persist ? '_localStore' : '_sessionStore');
      return store[key];
    },

    setItem: function setItem(key, value) {
      var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref2$persist = _ref2.persist;
      var persist = _ref2$persist === undefined ? false : _ref2$persist;

      var store = this.get(persist ? '_localStore' : '_sessionStore');
      store[key] = value;
    },

    removeItem: function removeItem(key) {
      var _ref3 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref3$persist = _ref3.persist;
      var persist = _ref3$persist === undefined ? false : _ref3$persist;

      var store = this.get(persist ? '_localStore' : '_sessionStore');
      delete store[key];
    },

    clearAll: function clearAll() {
      this.set('_localStore', {});
      this.set('_sessionStore', {});
    }
  });

});
define('frontend-cp/tests/helpers/format-date', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'DATE %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/format-html-message', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'HTML MESSAGE %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/format-message', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'MESSAGE %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/format-number', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'NUMBER %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/format-relative', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'RELATIVE %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/format-time', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return 'TIME %' + value + '%';
  });

});
define('frontend-cp/tests/helpers/intl-get', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = Ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return '%' + value + '%';
  });

});
define('frontend-cp/tests/helpers/login', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Test.registerAsyncHelper('login', function (app) {
    var sessionId = arguments.length <= 1 || arguments[1] === undefined ? '1' : arguments[1];

    var sessionService = app.__container__.lookup('service:session');
    sessionService.set('sessionId', null);
    sessionService.set('sessionId', JSON.stringify(String(sessionId)));
  });

});
define('frontend-cp/tests/helpers/logout', ['exports', 'ember'], function (exports, Ember) {

  'use strict';

  exports['default'] = Ember['default'].Test.registerAsyncHelper('logout', function () {

    localStorage.removeItem('sessionId');
    localStorage.removeItem('tabs');
  });

});
define('frontend-cp/tests/helpers/qunit', ['exports', 'ember', 'qunit', 'ember-qunit/qunit-module', 'ember-test-helpers', 'ember-qunit/test', 'frontend-cp/tests/helpers/start-app', 'frontend-cp/tests/helpers/format-date', 'frontend-cp/tests/helpers/format-time', 'frontend-cp/tests/helpers/format-relative', 'frontend-cp/tests/helpers/format-number', 'frontend-cp/tests/helpers/format-html-message', 'frontend-cp/tests/helpers/format-message', 'frontend-cp/tests/helpers/intl-get', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/utils/register-helper', 'ember-get-helper/helpers/get-glimmer', 'ember-get-helper/utils/register-helper', 'frontend-cp/tests/assertions/properties-equal'], function (exports, Ember, QUnit, qunit_module, ember_test_helpers, test, startApp, FormatDate, FormatTime, FormatRelative, FormatNumber, FormatHtmlMessage, FormatMessage, IntlGet, and, equal, not, or, register_helper, getHelper, utils__register_helper, propertiesEqualAssertion) {

  'use strict';

  exports.createModule = createModule;
  exports.moduleForComponent = moduleForComponent;
  exports.moduleForModel = moduleForModel;
  exports.moduleFor = moduleFor;
  exports.app = app;

  QUnit['default'].assert.propertiesEqual = propertiesEqualAssertion['default'];

  function createModule(Constructor, name, description, callbacks) {
    var actualCallbacks = callbacks || (typeof description === 'object' ? description : {});
    var beforeCallback = actualCallbacks.setup || actualCallbacks.beforeEach;
    actualCallbacks['beforeEach' in actualCallbacks ? 'beforeEach' : 'setup'] = function () {
      Ember['default'].HTMLBars._registerHelper('format-date', FormatDate['default']);
      Ember['default'].HTMLBars._registerHelper('format-time', FormatTime['default']);
      Ember['default'].HTMLBars._registerHelper('format-relative', FormatRelative['default']);
      Ember['default'].HTMLBars._registerHelper('format-number', FormatNumber['default']);
      Ember['default'].HTMLBars._registerHelper('format-html-message', FormatHtmlMessage['default']);
      Ember['default'].HTMLBars._registerHelper('format-message', FormatMessage['default']);
      Ember['default'].HTMLBars._registerHelper('intl-get', IntlGet['default']);

      register_helper.registerHelper('and', and.andHelper);
      register_helper.registerHelper('eq', equal.equalHelper);
      register_helper.registerHelper('not', not.notHelper);
      register_helper.registerHelper('or', or.orHelper);

      utils__register_helper.registerHelper('get', getHelper['default']);

      if (beforeCallback) {
        beforeCallback.apply(this, arguments);
      }
    };

    if (typeof description !== 'object' && !!description) {
      return qunit_module.createModule(Constructor, name, description, actualCallbacks);
    } else {
      return qunit_module.createModule(Constructor, name, actualCallbacks);
    }
  }

  function moduleForComponent(name, description, callbacks) {
    createModule(ember_test_helpers.TestModuleForComponent, name, description, callbacks);
  }

  function moduleForModel(name, description, callbacks) {
    createModule(ember_test_helpers.TestModuleForModel, name, description, callbacks);
  }

  function moduleFor(name, description, callbacks) {
    createModule(ember_test_helpers.TestModule, name, description, callbacks);
  }

  function app(name) {
    var callbacks = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    var application = null;
    return QUnit['default'].module(name, {
      beforeEach: function beforeEach() {
        localStorage.clear();
        sessionStorage.clear();
        application = startApp['default']();
        if (callbacks.beforeEach) {
          callbacks.beforeEach.call(this, application);
        }
      },

      afterEach: function afterEach() {
        if (callbacks.afterEach) {
          callbacks.afterEach.call(this, application);
        }
        Ember['default'].run(application, 'destroy');
      }
    });
  }

  exports.test = test['default'];
  exports.setResolver = ember_test_helpers.setResolver;

});
define('frontend-cp/tests/helpers/resolver', ['exports', 'ember/resolver', 'frontend-cp/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('frontend-cp/tests/helpers/setup-mirage-for-integration', ['exports', 'frontend-cp/initializers/ember-cli-mirage'], function (exports, mirageInitializer) {

  'use strict';



  exports['default'] = setupMirage; //Work around until this is real
  //https://github.com/samselikoff/ember-cli-mirage/issues/183
  function setupMirage(container) {
    mirageInitializer['default'].initialize(container);
  }

  ;

});
define('frontend-cp/tests/helpers/start-app', ['exports', 'ember', 'frontend-cp/app', 'frontend-cp/config/environment', 'frontend-cp/tests/helpers/login', 'frontend-cp/tests/helpers/use-default-scenario', 'frontend-cp/tests/helpers/logout'], function (exports, Ember, Application, config, login, useDefaultScenario, logout) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application = undefined;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('frontend-cp/tests/helpers/use-default-scenario', ['exports', 'ember', 'frontend-cp/mirage/scenarios/default'], function (exports, Ember, defaultScenario) {

  'use strict';

  exports['default'] = Ember['default'].Test.registerAsyncHelper('useDefaultScenario', function () {
    defaultScenario['default'](server); //eslint-disable-line no-undef
  });

});
define('frontend-cp/tests/integration/components/ko-address/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-address', 'Integration | Component | ko address', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 14
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-address', ['loc', [null, [1, 0], [1, 14]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-agent-dropdown/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-agent-dropdown', 'Integration | Component | ko agent dropdown', {
    integration: true
  });

  qunit.test('it renders', function (assert) {
    assert.expect(0);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n   ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-agent-dropdown', ['loc', [null, [2, 3], [2, 24]]]]],
        locals: [],
        templates: []
      };
    })()));
  });

  qunit.test('the dropdown can be expanded by mouse', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-agent-dropdown', ['loc', [null, [2, 4], [2, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    this.$('.ko-agent-dropdown__nav-new').click();

    assert.equal(this.$('ul li:first:visible').text().trim(), 'Case', 'the first menu item');
  });

});
define('frontend-cp/tests/integration/components/ko-agent-dropdown/create-organisation/component-test', ['frontend-cp/tests/helpers/qunit', 'ember', 'sinon'], function (qunit, Ember, sinon) {

  'use strict';

  qunit.moduleForComponent('ko-agent-dropdown/create-organisation', 'Integration | Component | ko agent dropdown/create organisation', {
    integration: true,
    beforeEach: function beforeEach() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 41
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-agent-dropdown/create-organisation', ['loc', [null, [1, 0], [1, 41]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$('input').length, 2);
    assert.equal(this.$('button').length, 2);
  });

  qunit.test('it emits a cancel event', function (assert) {
    var _this = this;

    assert.expect(1);

    var onCancel = sinon['default'].spy();

    this.on('onCancel', onCancel);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-agent-dropdown/create-organisation', [], ['onCancel', ['subexpr', 'action', ['onCancel'], [], ['loc', [null, [2, 15], [2, 34]]]]], ['loc', [null, [1, 0], [3, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    Ember['default'].run(function () {
      getFormControl(_this.$('form'), 'cancel').click();
    });

    assert.equal(onCancel.callCount, 1);
  });

  function getFormControl(formElement, controlName) {
    formElement = $(formElement)[0];
    return $(formElement.elements.namedItem(controlName));
  }

});
define('frontend-cp/tests/integration/components/ko-agent-dropdown/create-user/component-test', ['frontend-cp/tests/helpers/qunit', 'ember', 'sinon'], function (qunit, Ember, sinon) {

  'use strict';

  qunit.moduleForComponent('ko-agent-dropdown/create-user', 'Integration | Component | ko agent dropdown/create user', {
    integration: true,
    beforeEach: function beforeEach() {
      var intlService = this.container.lookup('service:intl');

      initLocale(intlService, 'en-test', ['generic.validation_errors', 'generic.create_user_panel.name_required', 'generic.create_user_panel.email_required', 'generic.create_user_panel.email_invalid']);

      var mockStore = createMockStore();
      this.container.unregister('service:store');
      this.container.register('service:store', mockStore, { instantiate: false });

      function initLocale(intlService, localeId, keys) {
        var payload = keys.reduce(function (payload, key) {
          payload['frontend.api.' + key] = key;
          return payload;
        }, {});
        intlService.set('locales', [localeId]);
        intlService.createLocale(localeId, {});
        intlService.addMessages(localeId, payload);
      }
    }
  });

  qunit.test('it renders', function (assert) {
    assert.expect(11);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 33
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-agent-dropdown/create-user', ['loc', [null, [1, 0], [1, 33]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $formElement = this.$('form');
    var numFormControls = $formElement.prop('length');
    assert.equal(numFormControls, ['full_name', 'email', 'submit', 'cancel'].length);

    var $nameInputElement = getFormControl($formElement, 'full_name');
    var $emailInputElement = getFormControl($formElement, 'email');
    var $submitButtonElement = getFormControl($formElement, 'submit');
    var $cancelButtonElement = getFormControl($formElement, 'cancel');

    var $infoElement = this.$('.ko-agent-dropdown__footer');

    var $nameLabelElement = $nameInputElement.closest('label');
    var $emailLabelElement = $emailInputElement.closest('label');

    assert.equal($nameLabelElement.text().trim(), 'MESSAGE %%generic.create_user_panel.name_label%%');
    assert.equal($nameInputElement.val(), '');
    assert.equal($nameInputElement.prop('placeholder'), '');

    assert.equal($emailLabelElement.text().trim(), 'MESSAGE %%generic.create_user_panel.email_label%%');
    assert.equal($emailInputElement.val(), '');
    assert.equal($nameInputElement.prop('placeholder'), '');

    assert.equal($submitButtonElement.text().trim(), 'MESSAGE %%generic.create_user_panel.submit%%');
    assert.equal($submitButtonElement.prop('disabled'), true);
    assert.equal($cancelButtonElement.text().trim(), 'MESSAGE %%generic.cancel%%');

    assert.equal($infoElement.text().trim(), 'MESSAGE %%generic.create_user_panel.info%%');
  });

  qunit.test('it validates the form fields before allowing submit', function (assert) {
    assert.expect(29);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 33
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-agent-dropdown/create-user', ['loc', [null, [1, 0], [1, 33]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $formElement = this.$('form');

    var $nameInputElement = getFormControl($formElement, 'full_name');
    var $emailInputElement = getFormControl($formElement, 'email');
    var $submitButtonElement = getFormControl($formElement, 'submit');

    var nameErrors = getFieldErrors($formElement, 'full_name');
    var emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, []);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      $nameInputElement.focusin();
      $nameInputElement.focusout();
    });

    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, ['generic.create_user_panel.name_required']);
    assert.deepEqual(emailErrors, []);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      $emailInputElement.focusin();
      $emailInputElement.focusout();
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, ['generic.create_user_panel.name_required']);
    assert.deepEqual(emailErrors, ['generic.create_user_panel.email_required']);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($nameInputElement, 'Tim Kendrick');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, ['generic.create_user_panel.email_required']);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($emailInputElement, 'tim.kendrick@kayako');
    });
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(emailErrors, ['generic.create_user_panel.email_invalid']);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($nameInputElement, 'Tim Kendrick');
      fillIn($emailInputElement, 'tim.kendrick@kayako.com');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, []);
    assert.ok(!$submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($nameInputElement, '');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, ['generic.create_user_panel.name_required']);
    assert.deepEqual(emailErrors, []);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($nameInputElement, 'Tim Kendrick');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, []);
    assert.ok(!$submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($emailInputElement, '');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, ['generic.create_user_panel.email_required']);
    assert.ok($submitButtonElement.prop('disabled'));

    Ember['default'].run(function () {
      fillIn($emailInputElement, 'tim.kendrick@kayako.com');
    });
    nameErrors = getFieldErrors($formElement, 'full_name');
    emailErrors = getFieldErrors($formElement, 'email');
    assert.deepEqual(nameErrors, []);
    assert.deepEqual(emailErrors, []);
    assert.ok(!$submitButtonElement.prop('disabled'));
  });

  qunit.test('it submits the form', function (assert) {
    var _this = this;

    assert.expect(21);
    var done = assert.async();

    var onSubmit = sinon['default'].spy();
    var onCreate = sinon['default'].spy();
    var onCancel = sinon['default'].spy();

    this.on('onSubmit', onSubmit);
    this.on('onCancel', onCancel);
    this.on('onCreate', onCreate);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-agent-dropdown/create-user', [], ['onSubmit', ['subexpr', 'action', ['onSubmit'], [], ['loc', [null, [2, 15], [2, 34]]]], 'onCreate', ['subexpr', 'action', ['onCreate'], [], ['loc', [null, [3, 15], [3, 34]]]], 'onCancel', ['subexpr', 'action', ['onCancel'], [], ['loc', [null, [4, 15], [4, 34]]]]], ['loc', [null, [1, 0], [5, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $formElement = this.$('form');

    var $nameInputElement = getFormControl($formElement, 'full_name');
    var $emailInputElement = getFormControl($formElement, 'email');
    var $submitButtonElement = getFormControl($formElement, 'submit');
    var $cancelButtonElement = getFormControl($formElement, 'cancel');
    var $loaderElement = $formElement.find('.ko-form_buttons__loader');

    assert.equal($formElement.hasClass('ko-form--is-submitting'), false);
    assert.equal($cancelButtonElement.length, 1);
    assert.equal($loaderElement.length, 0);

    fillIn($nameInputElement, 'Tim Kendrick');
    fillIn($emailInputElement, 'tim.kendrick@kayako.com');

    Ember['default'].run(function () {
      assert.equal(onSubmit.callCount, 0);

      $formElement.submit();
    });

    Ember['default'].run(function () {
      var $cancelButtonElement = getFormControl($formElement, 'cancel');
      var $loaderElement = $formElement.find('.ko-form_buttons__loader');

      assert.equal($formElement.hasClass('ko-form--is-submitting'), true);
      assert.equal($submitButtonElement.prop('disabled'), true);
      assert.equal($cancelButtonElement.length, 0);
      assert.equal($loaderElement.length, 1);

      assert.equal(onSubmit.callCount, 1);
      assert.equal(onCreate.callCount, 0);
      assert.equal(onCancel.callCount, 0);
    });

    Ember['default'].run.later(function () {
      var $cancelButtonElement = getFormControl($formElement, 'cancel');
      var $loaderElement = $formElement.find('.ko-form_buttons__loader');

      assert.equal($formElement.hasClass('ko-form--is-submitting'), false);
      assert.equal($submitButtonElement.prop('disabled'), false);
      assert.equal($cancelButtonElement.length, 1);
      assert.equal($loaderElement.length, 0);

      var mockStore = _this.container.lookup('service:store');
      assert.ok(mockStore.createRecord.calledTwice);
      assert.ok(mockStore.createRecord.calledWith('identity-email', {
        'isPrimary': true,
        'email': 'tim.kendrick@kayako.com'
      }));
      assert.equal(mockStore.createRecord.secondCall.args[0], 'user');
      assert.propertiesEqual(mockStore.createRecord.secondCall.args[1], {
        'fullName': 'Tim Kendrick',
        'emails': [{
          'email': 'tim.kendrick@kayako.com',
          'isPrimary': true
        }],
        'role': {
          id: 4 // Users are created as CUSTOMERs
        }
      });

      assert.ok(onCreate.calledOnce);
      assert.propertiesEqual(onCreate.firstCall.args[0], {
        'fullName': 'Tim Kendrick',
        'emails': [{
          'email': 'tim.kendrick@kayako.com',
          'isPrimary': true
        }],
        'role': {
          id: 4
        }
      });

      done();
    }, 100); // Delay due to inaccurate `createMockStore` behaviour (see below)
  });

  qunit.test('it handles submit errors', function (assert) {
    assert.expect(3);
    var done = assert.async();

    var onCreate = sinon['default'].spy();
    var onSubmit = sinon['default'].spy();
    var onCancel = sinon['default'].spy();

    this.on('onCreate', onCreate);
    this.on('onSubmit', onSubmit);
    this.on('onCancel', onCancel);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-agent-dropdown/create-user', [], ['onSubmit', ['subexpr', 'action', ['onSubmit'], [], ['loc', [null, [2, 15], [2, 34]]]], 'onCreate', ['subexpr', 'action', ['onCreate'], [], ['loc', [null, [3, 15], [3, 34]]]], 'onCancel', ['subexpr', 'action', ['onCancel'], [], ['loc', [null, [4, 15], [4, 34]]]]], ['loc', [null, [1, 0], [5, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $formElement = this.$('form');
    var $nameInputElement = getFormControl($formElement, 'full_name');
    var $emailInputElement = getFormControl($formElement, 'email');

    fillIn($nameInputElement, 'ERROR');
    fillIn($emailInputElement, 'tim.kendrick@kayako.com');

    Ember['default'].run(function () {
      $formElement.submit();
    });

    Ember['default'].run.later(function () {
      assert.equal(onCreate.callCount, 0);

      var $cancelButtonElement = getFormControl($formElement, 'cancel');
      var $loaderElement = $formElement.find('.ko-form_buttons__loader');

      assert.equal($cancelButtonElement.length, 1);
      assert.equal($loaderElement.length, 0);

      done();
    }, 100); // Delay due to inaccurate `createMockStore` behaviour (see below)
  });

  qunit.test('it emits an onCancel event', function (assert) {
    assert.expect(1);

    var onCancel = sinon['default'].spy();

    this.on('onCancel', onCancel);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-agent-dropdown/create-user', [], ['onCancel', ['subexpr', 'action', ['onCancel'], [], ['loc', [null, [2, 15], [2, 34]]]]], ['loc', [null, [1, 0], [3, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $formElement = this.$('form');
    var $cancelButtonElement = getFormControl($formElement, 'cancel');

    Ember['default'].run(function () {
      $cancelButtonElement.click();
    });

    assert.equal(onCancel.callCount, 1);
  });

  function getFormControl(formElement, controlName) {
    formElement = $(formElement)[0];
    return $(formElement.elements.namedItem(controlName));
  }

  function fillIn(inputElement, value) {
    $(inputElement).val(value).change();
  }

  function getFieldErrors(formElement, inputName) {
    var $errorElements = Ember['default'].$(formElement).find('[name="' + inputName + '"] + .ko-form_field__error');
    return $errorElements.map(function (index, element) {
      return Ember['default'].$(element).text().trim();
    }).get();
  }

  function createMockStore(records) {
    records = records || {};
    var store = {
      findRecord: sinon['default'].spy(function (typeName, id) {
        var record = Ember['default'].Object.create({
          id: id
        });
        return Ember['default'].RSVP.Promise.resolve(record);
      }),
      createRecord: sinon['default'].spy(function (typeName, fields) {
        if (typeName === 'user') {
          fields = Object.assign({ emails: [] }, fields);
        }
        var record = Ember['default'].Object.extend({
          save: sinon['default'].spy(function () {
            // FIXME: This sequence doesn't quite accurately reflect the
            // store's async behaviour (this is why the delay is necessary
            // in the async tests)
            var hasErrors = Object.keys(fields).some(function (key) {
              return fields[key] === 'ERROR';
            });
            return new Ember['default'].RSVP.Promise(function (resolve, reject) {
              setTimeout(function () {
                if (hasErrors) {
                  reject({
                    errors: []
                  });
                } else {
                  resolve(record);
                }
              });
            });
          })
        }).create(fields);
        return record;
      })
    };
    return store;
  }

});
define('frontend-cp/tests/integration/components/ko-avatar/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-avatar', 'Integration | Component | ko avatar', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 13
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-avatar', ['loc', [null, [1, 0], [1, 13]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-case-metric/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-case-metric', 'Integration | Component | ko case metric', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 18
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-case-metric', ['loc', [null, [1, 0], [1, 18]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-contact-info/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-contact-info', 'Integration | Component | ko contact info', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 19
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-contact-info', ['loc', [null, [1, 0], [1, 19]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-dropdown/container/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-dropdown/container', 'Integration | Component | ko dropdown container', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-dropdown/container', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-dropdown/list/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-dropdown/list', 'Integration | Component | ko dropdown list', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 20
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-dropdown/list', ['loc', [null, [1, 0], [1, 20]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-dropdown/list/group/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-dropdown/list/group', 'Integration | Component | ko dropdown list group', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 26
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-dropdown/list/group', ['loc', [null, [1, 0], [1, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-dropdown/list/hr/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-dropdown/list/hr', 'Integration | Component | ko dropdown list hr', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 23
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-dropdown/list/hr', ['loc', [null, [1, 0], [1, 23]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-dropdown/select/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-dropdown/select', 'Integration | Component | ko dropdown select', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(0);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-dropdown/select', ['loc', [null, [2, 4], [2, 26]]]]],
        locals: [],
        templates: []
      };
    })()));
  });

});
define('frontend-cp/tests/integration/components/ko-field/text/component-test', ['frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (qunit, KeyCodes) {

  'use strict';

  var title = 'span:first';
  var value = 'input';
  var textFieldValue = 'Some other value';

  qunit.moduleForComponent('ko-field/text', 'Integration | Component | ko field text', {
    integration: true,
    setup: function setup() {
      this.set('textFieldValue', textFieldValue);
    }
  });

  qunit.test('renders with title and value populated', function (assert) {
    assert.expect(2);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 6,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['inline', 'ko-field/text', [], ['title', 'Some other field', 'value', ['subexpr', '@mut', [['get', 'textFieldValue', ['loc', [null, [4, 12], [4, 26]]]]], [], []]], ['loc', [null, [2, 4], [5, 6]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$(title).text(), 'Some other field');
    assert.equal(this.$(value).val(), 'Some other value');
  });

  qunit.test('action is fired when enter is pressed', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 4,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-field/text', [], ['title', 'Some other field', 'onValueChange', 'assertTextFieldValueChanged'], ['loc', [null, [1, 0], [4, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    this.on('assertTextFieldValueChanged', function (value) {
      return assert.deepEqual(value, 'Khaleesi');
    });

    var $inputField = this.$(value);

    $inputField.val('Khaleesi');
    this.$('div:first').trigger(new $.Event('keypress', { keyCode: KeyCodes.enter }));
  });

});
define('frontend-cp/tests/integration/components/ko-field/text-area/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  var title = 'span:first';
  var value = 'textarea';

  var textAreaFieldValue = 'Some other value';

  ember_qunit.moduleForComponent('ko-field/text-area', 'Integration | Component | ko field text area', {
    integration: true,
    setup: function setup() {
      this.set('textAreaFieldValue', textAreaFieldValue);
    }
  });

  ember_qunit.test('renders with title and value populated', function (assert) {
    assert.expect(2);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 4,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-field/textArea', [], ['title', 'Some other field', 'value', ['subexpr', '@mut', [['get', 'textAreaFieldValue', ['loc', [null, [3, 10], [3, 28]]]]], [], []]], ['loc', [null, [1, 0], [4, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$(title).text(), 'Some other field');
    assert.equal(this.$(value).val(), 'Some other value');
  });

  ember_qunit.test('action is fired when focus is lost', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 4,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-field/textArea', [], ['title', 'Some other field', 'onValueChange', 'assertTextAreaFieldValueChanged'], ['loc', [null, [1, 0], [4, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    this.on('assertTextAreaFieldValueChanged', function (value) {
      assert.equal(value, 'Khaleesi');
    });

    var $textArea = this.$('textarea');

    $textArea.val('Khaleesi');

    $textArea.blur();
  });

});
define('frontend-cp/tests/integration/components/ko-file-field/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-file-field', 'Integration | Component | ko file field', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 17
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-file-field', ['loc', [null, [1, 0], [1, 17]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-form/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-form', 'Integration | Component | ko form', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 11
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-form', ['loc', [null, [1, 0], [1, 11]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'ko-form', [], [], 0, null, ['loc', [null, [2, 4], [4, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('frontend-cp/tests/integration/components/ko-info-bar/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-info-bar', 'Integration | Component | ko info bar', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 15
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-info-bar', ['loc', [null, [1, 0], [1, 15]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-notification-badge/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-notification-badge', 'Integration | Component | ko notification badge', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 25
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-notification-badge', ['loc', [null, [1, 0], [1, 25]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-pagination/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-pagination', 'Integration | Component | ko pagination', {
    integration: true
  });

  qunit.test('it renders', function (assert) {
    assert.expect(0);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n   ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-pagination', ['loc', [null, [2, 3], [2, 20]]]]],
        locals: [],
        templates: []
      };
    })()));
  });

});
define('frontend-cp/tests/integration/components/ko-profile/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  var avatar = '.ko-profile__avatar:first';
  var name = '.ko-profile__name';
  var position = '.ko-profile__position';
  var company = '.ko-profile__company';
  var place = '.ko-profile__place';
  var time = '.ko-profile__time';
  var openCases = '.ko-profile__open-cases';
  var followToggle = '.ko-profile__follow';
  var profileDetail = '.ko-profile__detail';

  var profile = {
    avatar: 'http://i.imgur.com/C9QgICy.jpg',
    name: 'Audrey Raines',
    position: 'Systems engineer',
    company: 'Cisco systems',
    place: 'Leeds, United Kingdom',
    time: '9:45am, Wednesday',
    openCases: '5'
  };

  qunit.moduleForComponent('ko-profile', 'Integration | Component | ko profile', {
    integration: true,
    setup: function setup() {
      this.set('profile', profile);
      this.render(Ember.HTMLBars.template((function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 1,
                'column': 0
              },
              'end': {
                'line': 6,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('\n      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n    ');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [['inline', 'ko-profile', [], ['profile', ['subexpr', '@mut', [['get', 'profile', ['loc', [null, [3, 16], [3, 23]]]]], [], []], 'showProfile', 'showProfile', 'followToggle', 'followToggle'], ['loc', [null, [2, 6], [5, 8]]]]],
          locals: [],
          templates: []
        };
      })()));
    }
  });

  qunit.test('renders avatar and sets it according to model/parameters passed in', function (assert) {

    assert.expect(2);

    var $avatar = this.$(avatar);

    assert.equal($avatar.length, 1, 'avatar is rendered');

    assert.equal($avatar.attr('src'), profile.avatar, 'avatar src attribute is set');
  });

  qunit.test('renders name and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $name = this.$(name);

    assert.equal($name.length, 1, 'name is rendered');

    assert.equal($name.text(), 'Audrey Raines', 'name is set');
  });

  qunit.test('renders position and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $position = this.$(position);

    assert.equal($position.length, 1, 'position is rendered');

    assert.equal($position.text(), 'MESSAGE %%generic.profile.position%%', 'position is set');
  });

  qunit.test('renders company and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $company = this.$(company);

    assert.equal($company.length, 1, 'company is rendered');

    assert.equal($company.text(), 'Cisco systems', 'company is set');
  });

  qunit.test('renders place and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $place = this.$(place);

    assert.equal($place.length, 1, 'place is rendered');

    assert.equal($place.text(), 'MESSAGE %%generic.profile.place%%', 'place is set');
  });

  qunit.test('renders time and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $time = this.$(time);

    assert.equal($time.length, 1, 'time is rendered');

    assert.equal($time.text(), 'MESSAGE %%generic.profile.time%%', 'time is set');
  });

  qunit.test('renders openCases and sets it according to model/parameters passed in', function (assert) {
    assert.expect(2);

    var $openCases = this.$(openCases);

    assert.equal($openCases.length, 1, 'openCases is rendered');

    assert.equal($openCases.text(), 'MESSAGE %%generic.profile.openCases%%', 'openCases is set');
  });

  qunit.test('clicking on follow/unfollow triggers followToggle action', function (assert) {
    assert.expect(2);

    var $followToggle = this.$(followToggle);

    assert.equal($followToggle.length, 1, 'follow/unfollow button/link is rendered');

    this.set('followToggle', 'followToggle');

    this.on('followToggle', function (a) {
      assert.deepEqual(a, profile, 'clicking follow/unfollow fires action passing profile');
    });

    $followToggle.click();
  });

  qunit.test('clicking on profile detail button/link triggers profileDetail action', function (assert) {
    assert.expect(2);

    var $profileDetail = this.$(profileDetail);

    assert.equal($profileDetail.length, 1, 'profile detail button/link is rendered');

    this.set('showProfile', 'showProfile');

    this.on('showProfile', function (a) {
      assert.deepEqual(a, profile, 'clicking follow/unfollow fires action passing profile');
    });

    $profileDetail.click();
  });

});
define('frontend-cp/tests/integration/components/ko-recent-members/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-recent-members', 'Integration | Component | ko recent members', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 21
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-recent-members', ['loc', [null, [1, 0], [1, 21]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-scroller/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-scroller', 'Integration | Component | ko scroller', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 15
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-scroller', ['loc', [null, [1, 0], [1, 15]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');

    // Template block usage:
    this.render(Ember.HTMLBars.template((function () {
      var child0 = (function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 2,
                'column': 4
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('      template block text\n');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();

      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 5,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['block', 'ko-scroller', [], [], 0, null, ['loc', [null, [2, 4], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })()));

    assert.equal(this.$().text().trim(), 'template block text');
  });

});
define('frontend-cp/tests/integration/components/ko-search/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  var aKeyPressEvent = new $.Event('keyup', { keyCode: 66 });

  ember_qunit.moduleForComponent('ko-search', 'Integration | Component | ko search', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-search', ['loc', [null, [2, 4], [2, 17]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

  ember_qunit.test('it fires the onSearchTermChange action with the content of the input field when keys are pressed', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-search', [], ['onSearchTermChange', 'assertActionFiredWithSearchTerm'], ['loc', [null, [1, 0], [3, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    this.on('assertActionFiredWithSearchTerm', function (value) {
      assert.equal(value, 'a');
    });

    var searchInput = this.$('input');
    searchInput.val('a');
    searchInput.trigger(aKeyPressEvent);
  });

  ember_qunit.test('it fires the onClick action when clicked', function (assert) {
    assert.expect(1);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 4
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-search', [], ['onClick', 'assertActionFired'], ['loc', [null, [1, 0], [3, 4]]]]],
        locals: [],
        templates: []
      };
    })()));

    this.on('assertActionFired', function (value) {
      assert.ok(true, 'action fired');
    });

    this.$('input').click();
  });

});
define('frontend-cp/tests/integration/components/ko-session-widgets/component-test', ['frontend-cp/tests/helpers/qunit', 'frontend-cp/tests/helpers/setup-mirage-for-integration', 'ember'], function (qunit, mirage, Ember) {

  'use strict';

  qunit.moduleForComponent('ko-session-widgets', 'Integration | Component | ko session widgets', {
    integration: true,
    setup: function setup() {
      /*eslint-disable no-undef, camelcase */
      mirage['default'](this.container);
      var role = server.create('role');
      var defaultUser = server.create('user', {
        id: 1,
        full_name: 'John Doe',
        role: role
      });

      server.create('session', {
        user: defaultUser
      });

      /*eslint-enable no-undef, camelcase */
      localStorage.setItem('sessionId', '"pPW6tnOyJG6TmWCVea175d1bfc5dbf073a89ffeb6a2a198c61aae941Aqc7ahmzw8a"');
      this.container.lookup('service:session').getSession();
    },
    teardown: function teardown() {
      localStorage.removeItem('sessionId');
    }
  });

  qunit.test('it renders', function (assert) {
    assert.expect(1);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-session-widgets', ['loc', [null, [2, 4], [2, 26]]]]],
        locals: [],
        templates: []
      };
    })()));

    Ember['default'].run.later(this, function () {
      assert.equal(this.$('div.flag__body').text().trim(), 'John Doe');
    });
  });

});
define('frontend-cp/tests/integration/components/ko-table-body/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-table/body', 'Integration | Component | ko table body', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 17
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-table/body', ['loc', [null, [1, 0], [1, 17]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-table-cell/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-table/cell', 'Integration | Component | ko table cell', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 17
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-table/cell', ['loc', [null, [1, 0], [1, 17]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-tabs/component-test', ['ember-qunit', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/utils/register-helper', 'ember'], function (ember_qunit, equal, register_helper, Ember) {

  'use strict';

  ember_qunit.moduleForComponent('/ko-tabs', 'Integration | Component | ko tabs', {
    integration: true,
    beforeEach: function beforeEach() {
      register_helper.registerHelper('eq', equal.equalHelper);
    }
  });

  ember_qunit.test('it renders an empty component for no items', function (assert) {
    assert.expect(1);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 11
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-tabs', ['loc', [null, [1, 0], [1, 11]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$().text().trim(), '');
  });

  ember_qunit.test('it renders tabs for each item', function (assert) {
    var _this = this;

    assert.expect(9);

    var tabs = [{
      url: '/case/1',
      label: 'Case 1'
    }, {
      url: '/case/2',
      label: 'Case 2'
    }];
    this.set('tabs', tabs);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 21
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-tabs', [], ['tabs', ['subexpr', '@mut', [['get', 'tabs', ['loc', [null, [1, 15], [1, 19]]]]], [], []]], ['loc', [null, [1, 0], [1, 21]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $tabElements = this.$('.nav-tabs__item');
    assert.equal($tabElements.length, 2);

    var $firstItem = $tabElements.eq(0);
    assert.equal($firstItem.find('.nav-tabs__label').text().trim(), 'Case 1');
    assert.ok(!$firstItem.hasClass('is-active'));

    var $secondItem = $tabElements.eq(1);
    assert.equal($secondItem.find('.nav-tabs__label').text().trim(), 'Case 2');
    assert.ok(!$secondItem.hasClass('is-active'));

    var extraTab = {
      url: '/case/3',
      label: 'Case 3'
    };

    Ember['default'].run(function () {
      _this.tabs.pushObject(extraTab);
    });

    $tabElements = this.$('.nav-tabs__item');
    assert.equal($tabElements.length, 3);

    var $thirdItem = $tabElements.eq(2);
    assert.equal($thirdItem.find('.nav-tabs__label').text().trim(), 'Case 3');
    assert.ok(!$thirdItem.hasClass('is-active'));

    Ember['default'].run(function () {
      _this.tabs.removeObject(extraTab);
    });

    $tabElements = this.$('.nav-tabs__item');
    assert.equal($tabElements.length, 2);
  });

  ember_qunit.test('tabs can be selected', function (assert) {
    assert.expect(6);

    var tabs = [{
      url: '/case/1',
      label: 'Case 1'
    }, {
      url: '/case/2',
      label: 'Case 2'
    }];
    this.set('tabs', tabs);
    this.set('selectedTab', tabs[0]);

    this.render(Ember['default'].HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 45
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['inline', 'ko-tabs', [], ['tabs', ['subexpr', '@mut', [['get', 'tabs', ['loc', [null, [1, 15], [1, 19]]]]], [], []], 'selectedTab', ['subexpr', '@mut', [['get', 'selectedTab', ['loc', [null, [1, 32], [1, 43]]]]], [], []]], ['loc', [null, [1, 0], [1, 45]]]]],
        locals: [],
        templates: []
      };
    })()));

    var $tabElements = this.$('.nav-tabs__item');
    var $firstItem = $tabElements.eq(0);
    var $secondItem = $tabElements.eq(1);

    assert.ok($firstItem.hasClass('is-active'));
    assert.ok(!$secondItem.hasClass('is-active'));

    this.set('selectedTab', tabs[1]);

    assert.ok(!$firstItem.hasClass('is-active'));
    assert.ok($secondItem.hasClass('is-active'));

    this.set('selectedTab', null);

    assert.ok(!$firstItem.hasClass('is-active'));
    assert.ok(!$secondItem.hasClass('is-active'));
  });

});
define('frontend-cp/tests/integration/components/ko-toggle-context-modal/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-toggle-context-modal', 'Integration | Component | ko toggle context modal', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(1);

    // Set any properties with this.set('myProperty', 'value');
    // Handle any actions with this.on('myAction', function(val) { ... });

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 1,
              'column': 27
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [['content', 'ko-toggle-context-modal', ['loc', [null, [1, 0], [1, 27]]]]],
        locals: [],
        templates: []
      };
    })()));

    assert.equal(this.$('').text().trim(), '');
  });

});
define('frontend-cp/tests/integration/components/ko-user-menu/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-user-menu', 'Integration | Component | ko user menu', {
    integration: true
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(0);

    this.render(Ember.HTMLBars.template((function () {
      return {
        meta: {
          'revision': 'Ember@1.13.7',
          'loc': {
            'source': null,
            'start': {
              'line': 1,
              'column': 0
            },
            'end': {
              'line': 3,
              'column': 2
            }
          }
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode('\n    ');
          dom.appendChild(el0, el1);
          var el1 = dom.createComment('');
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode('\n  ');
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [['content', 'ko-user-menu', ['loc', [null, [2, 4], [2, 20]]]]],
        locals: [],
        templates: []
      };
    })()));
  });

});
define('frontend-cp/tests/integration/components/ko-viewers/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  var firstAvatar = 'img:first';
  var lastAvatar = 'img:last';
  var firstProfile = 'li li:first';
  var lastProfile = 'li li:last';

  var profileName = '.ko-profile__name';
  var profilePosition = '.ko-profile__position';
  var profileCompany = '.ko-profile__company';
  var profilePlace = '.ko-profile__place';
  var profileTime = '.ko-profile__time';
  var profileOpenCases = '.ko-profile__open-cases';
  var followToggle = '.ko-profile__follow';
  var profileDetail = '.ko-profile__detail';

  var viewers = [{
    isTyping: true,
    wasTyping: false,
    hidden: false,
    inactive: false,
    profile: {
      avatar: 'http://i.imgur.com/C9QgICy.jpg',
      name: 'John Smith',
      position: 'Systems engineer',
      company: 'Cisco systems',
      place: 'Leeds, United Kingdom',
      time: '9:45am, Wednesday',
      openCases: '5'
    }
  }, {
    isTyping: false,
    wasTyping: true,
    hidden: false,
    inactive: false,
    profile: {
      avatar: 'http://i.imgur.com/C9QgICy.jpg',
      name: 'Audrey Raines',
      position: 'Systems engineer',
      company: 'Cisco systems',
      place: 'Leeds, United Kingdom',
      time: '9:45am, Wednesday',
      openCases: '5'
    }
  }, {
    isTyping: false,
    wasTyping: false,
    hidden: true,
    inactive: true,
    profile: {
      avatar: 'http://i.imgur.com/C9QgICy.jpg',
      name: 'Jane Smith',
      position: 'Systems engineer',
      company: 'Cisco',
      place: 'Leeds, United Kingdom',
      time: '9:45am, Wednesday',
      openCases: '5'
    }
  }];

  qunit.moduleForComponent('ko-viewers', 'Integration | Component | ko viewers', {
    integration: true,
    setup: function setup() {

      this.set('viewers', viewers);

      this.render(Ember.HTMLBars.template((function () {
        return {
          meta: {
            'revision': 'Ember@1.13.7',
            'loc': {
              'source': null,
              'start': {
                'line': 1,
                'column': 0
              },
              'end': {
                'line': 4,
                'column': 4
              }
            }
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode('\n      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n      ');
            dom.appendChild(el0, el1);
            var el1 = dom.createComment('');
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode('\n    ');
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [['inline', 'ko-context-modal', [], ['floating', true], ['loc', [null, [2, 6], [2, 40]]]], ['inline', 'ko-viewers', [], ['viewers', ['subexpr', '@mut', [['get', 'viewers', ['loc', [null, [3, 27], [3, 34]]]]], [], []]], ['loc', [null, [3, 6], [3, 36]]]]],
          locals: [],
          templates: []
        };
      })()));
    }
  });

  qunit.test('renders first avatar correctly', function (assert) {

    assert.expect(2);

    var $avatar = this.$(firstAvatar);

    assert.equal($avatar.length, 1, 'first avatar is rendered');

    assert.equal($avatar.attr('src'), viewers[0].profile.avatar, 'correct src attribute is set');
  });

  qunit.test('renders last avatar correctly', function (assert) {

    assert.expect(2);

    var $avatar = this.$(lastAvatar);

    assert.equal($avatar.length, 1, 'last avatar is rendered');

    assert.equal($avatar.attr('src'), viewers[2].profile.avatar, 'correct src attribute is set');
  });

  qunit.test('when clicked on first avatar, first/selected profile name appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileName = this.$(profileName);

    assert.equal($profileName.length, 1, 'profile name exists');

    assert.equal($profileName.text(), 'John Smith', 'profile name is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile name appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profileName = this.$(profileName);

    assert.equal($profileName.length, 1, 'profile name exists');

    assert.equal($profileName.text(), 'Jane Smith', 'profile name is visible in the popover');
  });

  qunit.test('when clicked on first avatar, first/selected profile position appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profilePosition = this.$(profilePosition);

    assert.equal($profilePosition.length, 1, 'profile position exists');

    assert.equal($profilePosition.text(), 'MESSAGE %%generic.profile.position%%', 'profile position is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile position appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profilePosition = this.$(profilePosition);

    assert.equal($profilePosition.length, 1, 'profile position exists');

    assert.equal($profilePosition.text(), 'MESSAGE %%generic.profile.position%%', 'profile position is visible in the popover');
  });

  qunit.test('when clicked on first avatar, first/selected profile company appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileCompany = this.$(profileCompany);

    assert.equal($profileCompany.length, 1, 'profile company exists');

    assert.equal($profileCompany.text(), 'Cisco systems', 'profile company is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile company appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profileCompany = this.$(profileCompany);

    assert.equal($profileCompany.length, 1, 'profile company exists');

    assert.equal($profileCompany.text(), 'Cisco', 'profile company is visible in the popover');
  });

  qunit.test('when clicked on first avatar, first/selected profile place appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profilePlace = this.$(profilePlace);

    assert.equal($profilePlace.length, 1, 'profile place exists');

    assert.equal($profilePlace.text(), 'MESSAGE %%generic.profile.place%%', 'profile place is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile place appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profilePlace = this.$(profilePlace);

    assert.equal($profilePlace.length, 1, 'profile place exists');

    assert.equal($profilePlace.text(), 'MESSAGE %%generic.profile.place%%', 'profile place is visible in the popover');
  });

  qunit.test('when clicked on first avatar, first/selected profile time appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileTime = this.$(profileTime);

    assert.equal($profileTime.length, 1, 'profile time exists');

    assert.equal($profileTime.text(), 'MESSAGE %%generic.profile.time%%', 'profile time is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile time appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profileTime = this.$(profileTime);

    assert.equal($profileTime.length, 1, 'profile time exists');

    assert.equal($profileTime.text(), 'MESSAGE %%generic.profile.time%%', 'profile time is visible in the popover');
  });

  qunit.test('when clicked on first avatar, first/selected profile open cases appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileOpenCases = this.$(profileOpenCases);

    assert.equal($profileOpenCases.length, 1, 'profile open cases exists');

    assert.equal($profileOpenCases.text(), 'MESSAGE %%generic.profile.openCases%%', 'profile open cases is visible in the popover');
  });

  qunit.test('when clicked on last avatar, last/selected profile open cases appears in the popover', function (assert) {

    assert.expect(3);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profileOpenCases = this.$(profileOpenCases);

    assert.equal($profileOpenCases.length, 1, 'profile open cases exists');

    assert.equal($profileOpenCases.text(), 'MESSAGE %%generic.profile.openCases%%', 'profile open cases is visible in the popover');
  });

  qunit.test('when clicked on first avatar, and then clicked on follow/unfollow triggers followToggle action', function (assert) {

    assert.expect(2);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $followToggle = this.$(followToggle);

    assert.equal($followToggle.length, 1, 'follow/unfollow button/link is rendered');

    // TODO: figure out how to set context on nested components and catch actions there (it is already tested in ko-profile and works)

    // this.set('followToggle', 'followToggle');

    // this.on('followToggle', a => {
    //   assert.deepEqual(a, viewers[0].profile, 'clicking follow/unfollow fires action passing profile');
    // });

    // $followToggle.click();
  });

  qunit.test('when clicked on last avatar, and then clicked on follow/unfollow triggers followToggle action', function (assert) {

    assert.expect(2);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $followToggle = this.$(followToggle);

    assert.equal($followToggle.length, 1, 'follow/unfollow button/link is rendered');

    // TODO: figure out how to set context on nested components and catch actions there (it is already tested in ko-profile and works)

    // this.set('followToggle', 'followToggle');

    // this.on('followToggle', a => {
    //   assert.deepEqual(a, viewers[0].profile, 'clicking follow/unfollow fires action passing profile');
    // });

    // $followToggle.click();
  });

  qunit.test('when clicked on first avatar, and then clicked on profile detail button/link triggers profileDetail action', function (assert) {

    assert.expect(2);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileDetail = this.$(profileDetail);

    assert.equal($profileDetail.length, 1, 'profile detail button/link is rendered');

    // TODO: figure out how to set context on nested components and catch actions there (it is already tested in ko-profile and works)

    // this.set('showProfile', 'showProfile');

    // this.on('showProfile', a => {
    //   assert.deepEqual(a, profile, 'clicking follow/unfollow fires action passing profile');
    // });

    // $profileDetail.click();
  });

  qunit.test('when clicked on last avatar, and then clicked on profile detail button/link triggers profileDetail action', function (assert) {

    assert.expect(2);

    var $profile = this.$(lastProfile);

    assert.equal($profile.length, 1, 'last profile is rendered');

    $profile.click();

    var $profileDetail = this.$(profileDetail);

    assert.equal($profileDetail.length, 1, 'profile detail button/link is rendered');

    // TODO: figure out how to set context on nested components and catch actions there (it is already tested in ko-profile and works)

    // this.set('showProfile', 'showProfile');

    // this.on('showProfile', a => {
    //   assert.deepEqual(a, profile, 'clicking follow/unfollow fires action passing profile');
    // });

    // $profileDetail.click();
  });

  qunit.test('when popover is open, clicking somewhere else makes selectedViewer stay the same', function (assert) {

    assert.expect(3);

    var $profile = this.$(firstProfile);

    assert.equal($profile.length, 1, 'first profile is rendered');

    $profile.click();

    var $profileName = this.$(profileName);

    assert.equal($profileName.text(), 'John Smith', 'profile name exists');

    $profile = this.$(firstProfile);

    $profile.click();

    assert.equal($profileName.text(), 'John Smith', 'profile name stays the same');
  });

  qunit.test('by default popover is not visible', function (assert) {

    assert.expect(1);

    var $profileName = this.$(profileName);

    assert.equal($profileName.text(), '', 'profile name does not exist');
  });

});
define('frontend-cp/tests/test-helper', ['frontend-cp/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {

	'use strict';

	ember_qunit.setResolver(resolver['default']);

});
define('frontend-cp/tests/unit/adapters/application-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleFor('adapter:application', 'ApplicationAdapter', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('frontend-cp/tests/unit/adapters/private-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleFor('adapter:private', 'PrivateAdapter', {
    // Specify the other units that are required for this test.
    // needs: ['serializer:foo']
  });

  // Replace this with your real tests.
  qunit.test('it exists', function (assert) {
    var adapter = this.subject();
    assert.ok(adapter);
  });

});
define('frontend-cp/tests/unit/components/ko-admin-card-team/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  var component = undefined;

  var team = {
    members: [{
      avatar: {
        url: 'https://s-media-cache-ak0.pinimg.com/736x/ca/c1/18/cac1189a8df5498d17ef09d65ad0f698.jpg'
      }
    }, {
      avatar: {
        url: 'https://s-media-cache-ak0.pinimg.com/736x/ca/c1/18/cac1189a8df5498d17ef09d65ad0f698.jpg'
      }
    }, {
      avatar: {
        url: 'https://s-media-cache-ak0.pinimg.com/736x/ca/c1/18/cac1189a8df5498d17ef09d65ad0f698.jpg'
      }
    }]
  };

  qunit.moduleForComponent('ko-admin-card-team', {
    needs: ['ko-admin-selectable-card'],
    integration: true,

    setup: function setup() {
      component = this.subject();
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders a member', function (assert) {
    component.set('team', team);

    this.render();

    assert.equal(component._state, 'inDOM');
    assert.ok(this.$('.ko-avatar__image').length);
  });

});
define('frontend-cp/tests/unit/components/ko-admin-card-user/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-admin-card-user', 'Unit | Component | ko admin card user', {
    // Specify the other units that are required for this test
    needs: ['component:ko-admin-selectable-card', 'component:ko-avatar']
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-admin-selectable-card/component-test', ['ember', 'frontend-cp/tests/helpers/qunit'], function (Ember, qunit) {

  'use strict';

  var component = undefined;

  qunit.moduleForComponent('ko-admin-selectable-card', {
    needs: ['component:ko-checkbox'],
    integration: true,

    setup: function setup() {
      component = this.subject();
    }
  });

  qunit.test('setting inactive state adds class', function (assert) {
    Ember['default'].run(function () {
      component.set('isActive', false);
    });

    this.render();
    assert.ok(this.$().hasClass('ko-admin-selectable-card--inactive'));
  });

  qunit.test('setting selected state adds class', function (assert) {
    Ember['default'].run(function () {
      component.set('isSelected', true);
    });

    this.render();
    assert.ok(this.$().hasClass('ko-admin-selectable-card--selected'));
  });

});
define('frontend-cp/tests/unit/components/ko-checkbox/component-test', ['ember', 'frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (Ember, qunit, KeyCodes) {

  'use strict';

  var component = undefined;
  var checkbox = 'div:first';
  var label = 'label:first';

  qunit.moduleForComponent('ko-checkbox', {
    unit: true,
    setup: function setup() {
      component = this.subject();
      component.set('label', 'Remember my preferences');
      component.set('tabindex', 0);
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('can be checked by pressing spacebar', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });

    assert.equal(component.checked, true, 'it has been checked');
  });

  qunit.test('can be checked by pressing spacebar (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has been checked');
      }
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });
  });

  qunit.test('can be unchecked by pressing spacebar', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });

    assert.equal(component.checked, false, 'it has been unchecked');
  });

  qunit.test('can be unchecked by pressing spacebar (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, false, 'it has been unchecked');
      }
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });
  });

  qunit.test('can be checked by clicking on checkbox', function (assert) {
    var _this = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this.$(checkbox).click();
    });

    assert.equal(component.checked, true, 'it has been checked');
  });

  qunit.test('can be checked by clicking on checkbox (DDAU)', function (assert) {
    var _this2 = this;

    assert.expect(1);

    this.render();

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has been checked');
      }
    });

    Ember['default'].run(function () {
      _this2.$(checkbox).click();
    });
  });

  qunit.test('can be unchecked by clicking on checkbox', function (assert) {
    var _this3 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    Ember['default'].run(function () {
      _this3.$(checkbox).click();
    });

    assert.equal(component.checked, false, 'it has been unchecked');
  });

  qunit.test('can be unchecked by clicking on checkbox (DDAU)', function (assert) {
    var _this4 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, false, 'it has been unchecked');
      }
    });

    Ember['default'].run(function () {
      _this4.$(checkbox).click();
    });
  });

  qunit.test('can be checked by clicking on label', function (assert) {
    var _this5 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this5.$(label).click();
    });

    assert.equal(component.checked, true, 'it has been checked');
  });

  qunit.test('can be checked by clicking on label (DDAU)', function (assert) {
    var _this6 = this;

    assert.expect(1);

    this.render();

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has been checked');
      }
    });

    Ember['default'].run(function () {
      _this6.$(label).click();
    });
  });

  qunit.test('can be unchecked by clicking on label', function (assert) {
    var _this7 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    Ember['default'].run(function () {
      _this7.$(label).click();
    });

    assert.equal(component.checked, false, 'it has been unchecked');
  });

  qunit.test('can be unchecked by clicking on label (DDAU)', function (assert) {
    var _this8 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('checked', true);
    });

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, false, 'it has been unchecked');
      }
    });

    Ember['default'].run(function () {
      _this8.$(label).click();
    });
  });

  qunit.test('when disabled checkbox can\'t be checked', function (assert) {
    var _this9 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('disabled', true);
    });

    Ember['default'].run(function () {
      _this9.$(checkbox).click();
    });

    assert.equal(component.checked, false, 'it can\'t be checked');
  });

  qunit.test('when disabled checkbox can\'t be checked (DDAU)', function (assert) {
    var _this10 = this;

    assert.expect(0);

    this.render();

    Ember['default'].run(function () {
      component.set('disabled', true);
    });

    component.set('onCheck', 'checked');
    component.set('targetObject', {
      checked: function checked() {
        assert.equal(true, false, 'it can\'t be checked');
      }
    });

    Ember['default'].run(function () {
      _this10.$(checkbox).click();
    });
  });

});
define('frontend-cp/tests/unit/components/ko-datepicker/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-datepicker', {
    //Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    unit: true
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-draggable-dropzone/component-test', ['ember', 'frontend-cp/tests/helpers/qunit'], function (Ember, qunit) {

  'use strict';

  var component = undefined;

  var filesMock = [{ name: 'Adam.png', type: 'image/png' }, { name: 'Peter.png', type: 'image/png' }];

  var eventMock = document.createEvent('CustomEvent');
  eventMock.initCustomEvent('drop', true, true, null);
  eventMock.dataTransfer = { data: {}, files: filesMock };

  qunit.moduleForComponent('ko-draggable-dropzone', {
    unit: true,
    setup: function setup() {
      component = this.subject();
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();

    assert.equal(component._state, 'inDOM');
  });

  qunit.test('it has total size of 0 by default', function (assert) {
    assert.expect(1);

    this.render();

    assert.equal(component.totalSize, 0, 'has total size of 0');
  });

  qunit.test('it has drag counter of 0 by default', function (assert) {
    assert.expect(1);

    this.render();

    assert.equal(component.dragCounter, 0, 'drag counter is zero');
  });

  qunit.test('it can drop files', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      // TODO: neither of the two below work yet

      // component.drop(this.$(dropzone).trigger(new $.Event('drop', { dataTransfer: { files: filesMock } })));
      // component.drop(eventMock);
    });

    assert.equal(component.dragClass, false, 'drag and drop is over');
  });

  qunit.test('dragging in increments drag counter', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.dragEnter(eventMock);
    });

    assert.equal(component.dragCounter, 1, 'drag counter got incremented');
  });

  qunit.test('dragging out decrements drag counter', function (assert) {
    assert.expect(2);

    Ember['default'].run(function () {
      component.dragEnter(eventMock);
    });

    assert.equal(component.dragCounter, 1, 'drag counted got incremented');

    Ember['default'].run(function () {
      component.dragLeave(eventMock);
    });

    assert.equal(component.dragCounter, 0, 'drag counter got decremented');
  });

});
define('frontend-cp/tests/unit/components/ko-editable-text/component-test', ['ember', 'frontend-cp/tests/helpers/qunit'], function (Ember, qunit) {

  'use strict';

  var component = undefined;
  var edit = 'div:first';

  qunit.moduleForComponent('ko-editable-text', {
    unit: true,
    setup: function setup() {
      component = this.subject();
      component.set('value', 'I am a hunky munky');
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();

    assert.equal(component._state, 'inDOM');
  });

  qunit.test('is not editing by default', function (assert) {
    assert.expect(1);

    assert.equal(component.isEditing, false, 'is not editing by default');
  });

  qunit.test('when clicked/on focus it becomes editable', function (assert) {
    var _this = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this.$(edit).click();
    });

    assert.equal(component.isEditing, true, 'is editable');
  });

  qunit.test('when focused out it becomes not editable', function (assert) {
    var _this2 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this2.$(edit).click();
    });

    Ember['default'].run(function () {
      component.focusOut();
    });

    assert.equal(component.isEditing, false, 'is not editable');
  });

  qunit.test('focus out cancels editing changes', function (assert) {
    var _this3 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this3.$(edit).click();
    });

    Ember['default'].run(function () {
      component.set('value', 'I am a hunky munkyy');
    });

    Ember['default'].run(function () {
      component.focusOut();
    });

    assert.equal(component.valueToSave, 'I am a hunky munky', 'value stays the same');
  });

});
define('frontend-cp/tests/unit/components/ko-editor-modal/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-editor-modal', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    unit: true
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-field/checkbox/component-test', ['ember', 'frontend-cp/tests/helpers/qunit'], function (Ember, qunit) {

  'use strict';

  qunit.moduleForComponent('ko-field/checkbox', {
    needs: ['component:ko-field/checkbox/single', 'template:components/ko-field/checkbox/single', 'component:ko-checkbox', 'template:components/ko-checkbox', 'helper:ko-helper']
  });

  var options = [{ id: 1, value: 'Red' }, { id: 2, value: 'Green' }, { id: 3, value: 'Blue' }];

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('it has a title', function (assert) {
    assert.expect(2);

    var component = this.subject();

    assert.equal($.trim(this.$().text()), '');

    var title = 'Title Goes Here';
    Ember['default'].run(function () {
      component.set('title', title);
    });

    assert.equal($.trim(this.$('.info-bar-item__header').text()), title);
  });

  qunit.test('it has checkboxes', function (assert) {
    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', options);
    });

    assert.equal($.trim(this.$('label:eq(0)').text().trim()), options[0].value);
    assert.equal($.trim(this.$('label:eq(1)').text().trim()), options[1].value);
    assert.equal($.trim(this.$('label:eq(2)').text().trim()), options[2].value);
  });

  qunit.test('checkbox state is in sync with the data', function (assert) {
    var _this = this;

    assert.expect(4);
    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', options);
      component.set('value', ['2']);
    });

    assert.equal(this.$('[aria-checked]:eq(0)').attr('aria-checked'), 'false');
    assert.equal(this.$('[aria-checked]:eq(1)').attr('aria-checked'), 'true');
    assert.equal(this.$('[aria-checked]:eq(2)').attr('aria-checked'), 'false');

    component.set('onValueChange', 'checked');
    component.set('targetObject', {
      checked: function checked(value) {
        assert.deepEqual(value, ['1', '2'], 'it has been checked');
      }
    });

    Ember['default'].run(function () {
      _this.$('[aria-checked]:eq(0)').click();
    });
  });

});
define('frontend-cp/tests/unit/components/ko-field/select/component-test', ['ember', 'frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (Ember, qunit, KeyCodes) {

  'use strict';

  qunit.moduleForComponent('ko-field/select', {
    needs: ['helper:not', 'helper:and']
  });

  var dummyContent = ['Open', 'Pending', 'Closed'];

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('it has a title', function (assert) {
    assert.expect(2);

    var component = this.subject();

    assert.equal($.trim(this.$().text()), '');

    Ember['default'].run(function () {
      component.set('title', 'Title Goes Here');
    });

    assert.equal($.trim(this.$().text()), 'Title Goes Here');
  });

  qunit.test('content appears in the dropdown', function (assert) {
    assert.expect(1);

    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', dummyContent);
    });

    this.$().find().click();

    assert.equal(this.$('ul li').text().replace(/(\r\n|\n|\r| )/g, ''), 'OpenPendingClosed');
  });

  qunit.test('clicking on a content item triggers value change', function (assert) {
    var _this = this;

    assert.expect(1);

    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', dummyContent);
    });

    component.set('onValueChange', 'change');
    component.set('targetObject', {
      change: function change(value) {
        assert.equal(value, 'Open');
      }
    });

    Ember['default'].run(function () {
      _this.$().click();
    });
    Ember['default'].run(function () {
      _this.$('ul li:first').click();
    });
  });

  qunit.test('pressing enter on a content item changes the value', function (assert) {
    assert.expect(1);

    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', dummyContent);
    });

    component.set('onValueChange', 'change');
    component.set('targetObject', {
      change: function change(value) {
        assert.equal(value, 'Open');
      }
    });

    this.render();

    Ember['default'].run(function () {
      component.keyDown({ keyCode: KeyCodes.tab });
      component.keyDown({ keyCode: KeyCodes.down });
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('when repeatedly selecting content items using the keyboard the selection should always start from the first position', function (assert) {
    assert.expect(2);

    var component = this.subject();

    Ember['default'].run(function () {
      component.set('options', dummyContent);
    });

    component.set('onValueChange', 'change');
    component.set('targetObject', {
      change: function change(value) {
        assert.equal(value, 'Closed');
      }
    });

    this.render();

    Ember['default'].run(function () {
      component.keyDown({ keyCode: KeyCodes.tab });
      component.keyDown({ keyCode: KeyCodes.down });
      component.keyDown({ keyCode: KeyCodes.down });
      component.keyDown({ keyCode: KeyCodes.down });
      component.keyDown({ keyCode: KeyCodes.enter });
    });

    component.set('targetObject', {
      change: function change(value) {
        assert.equal(value, 'Open');
      }
    });

    Ember['default'].run(function () {
      component.keyDown({ keyCode: KeyCodes.tab });
      component.keyDown({ keyCode: KeyCodes.down });
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

});
define('frontend-cp/tests/unit/components/ko-field/tags/component-test', ['ember', 'frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (Ember, qunit, KeyCodes) {

  'use strict';

  var component = undefined;
  var firstSelectedTag = 'ul:first li:first';
  var secondSelectedTag = 'ul:first li:nth-child(2)';
  var firstSelectedTagText = 'ul:first li:first span:first';
  var deleteTag = 'span:nth-child(2)';
  var suggestionsList = 'ul:nth-child(2) li';
  var firstSuggestion = 'ul:nth-child(2) li:first';
  var searchField = 'ul:first li input';

  qunit.moduleForComponent('ko-field/tags', {
    unit: true,
    setup: function setup() {
      component = this.subject();

      component.reopen({
        // Mock for Ember.run.debounce, as it is failing tests randomly
        // because debounce callback is executed after component *might*
        // be destroyed.
        debounceSuggestedTags: function debounceSuggestedTags(scope, callback) {
          callback.call(scope);
        }
      });

      component.set('selectedTags', []);
      component.set('newTagText', 'MESSAGE %%cases.newtag%%');
      component.set('tags', ['dog', 'pig', 'moose', 'duck', 'donkey', 'dave', 'don', 'derek']);
    },
    teardown: function teardown() {}
  });

  qunit.test('prevent duplicates', function (assert) {
    assert.expect(0);

    this.render();

    var targetObject = {
      externalTagAdditionAction: function externalTagAdditionAction(tags) {
        // If this runs, the test has failed
        assert.equal(true, false);
      },
      externalTagSuggestAction: function externalTagSuggestAction(tags) {}
    };

    component.set('onTagAddition', 'externalTagAdditionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSuggestAction');
      component.set('tags', []);
      component.set('selectedTags', ['qwerty']);
      component.set('searchTerm', 'qwerty');
      component.keyUp({ keyCode: KeyCodes.y });
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('is suggested', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.set('tags', []);
      component.set('suggestedTags', ['dog']);
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal(component.get('isSuggested'), true);
  });

  qunit.test('is not suggested when there are no tags', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.set('tags', []);
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal(component.get('isSuggested'), false);
  });

  qunit.test('is not suggested when nothing has been typed', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.set('tags', ['dog']);
      component.set('searchTerm', '');
    });

    assert.equal(component.get('isSuggested'), false);
  });

  qunit.test('is selected', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.set('selectedTags', ['dog']);
      component.set('tags', ['dog']);
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal(component.get('isSelected'), true);
  });

  qunit.test('is not selected', function (assert) {
    assert.expect(1);

    Ember['default'].run(function () {
      component.set('selectedTags', []);
      component.set('tags', ['dog']);
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal(component.get('isSelected'), false);
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('after a selection has taken place the text in the input should be cleared', function (assert) {
    assert.expect(2);

    this.render();

    var targetObject = {
      externalTagSuggestion: function externalTagSuggestion() {}
    };

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSuggestion');
      component.set('targetObject', targetObject);
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal(this.$(firstSuggestion).text(), 'dog', 'suggestions list');

    this.$(firstSuggestion).click();

    assert.equal($.trim(component.$(searchField).val()), '', 'The search field has been cleared');
  });

  qunit.test('suggested tags should be able to be selected by mouse', function (assert) {
    assert.expect(3);

    this.render();

    var targetObject = {
      externalAction: function externalAction(newTag) {
        assert.deepEqual(newTag, 'dog', 'external action was called');
      },
      externalTagSuggestion: function externalTagSuggestion() {}
    };

    component.set('onTagAddition', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSuggestion');
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    assert.equal($.trim(this.$(firstSelectedTagText).text()), '', 'selected tags');
    assert.equal(this.$(firstSuggestion).text(), 'dog', 'suggested list');

    this.$(firstSuggestion).click();
  });

  qunit.test('selected tags should be able to be removed by mouse', function (assert) {
    assert.expect(2);

    this.render();

    var targetObject = {
      externalAction: function externalAction(tagToRemove) {
        assert.deepEqual(tagToRemove, 'dog', 'external action was called');
      },
      externalTagSuggestion: function externalTagSuggestion() {}
    };

    component.set('onTagRemoval', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSuggestion');
      component.set('selectedTags', ['dog']);
    });

    assert.equal($.trim(component.$(firstSelectedTagText).text()), 'dog', 'selected tags');

    this.$(firstSelectedTag + ' ' + deleteTag).click();
  });

  qunit.test('all suggested tags should be visible when tabing in by keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagSuggestion: function externalTagSuggestion() {}
    };

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSuggestion');
      component.set('targetObject', targetObject);
      component.focusIn({ target: component.$(searchField) });
    });

    this.$().trigger(new $.Event('keydown', { keyCode: KeyCodes.down }));

    assert.equal(this.$(suggestionsList).text(), 'dogpigmooseduckdonkeydavedonderek', 'suggestions list');
  });

  qunit.test('suggested tags should be able to be selected by keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagSelectionChangeAction: function externalTagSelectionChangeAction(newTag) {
        assert.deepEqual(newTag, 'dog', 'external tag selection change action was called');
      }
    };

    component.set('onTagAddition', 'externalTagSelectionChangeAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagSelectionChangeAction');
      component.set('searchTerm', 'dog');
      component.keyUp({ keyCode: KeyCodes.g });
    });

    component.keyDown({ keyCode: KeyCodes.down });

    Ember['default'].run(function () {
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('selected tags should be able to be removed by keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagRemovalAction: function externalTagRemovalAction(tagToRemove) {
        assert.deepEqual(tagToRemove, 'cat', 'external tag selection change action was called');
      }
    };

    component.set('onTagRemoval', 'externalTagRemovalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagRemovalAction');
      component.set('selectedTags', ['dog', 'cat', 'mouse']);
    });

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(secondSelectedTag) });
      component.keyDown({ keyCode: KeyCodes.backspace });
    });
  });

  qunit.test('new tags can be created and added by keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagAdditionAction: function externalTagAdditionAction(tags) {
        assert.deepEqual(tags, 'qwerty', 'external tag addition action was called');
      }
    };

    component.set('onTagAddition', 'externalTagAdditionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('onTagSuggestion', 'externalTagAdditionAction');
      component.set('tags', '');
      component.set('suggestedTags', []);
      component.set('searchTerm', 'qwerty');
      component.keyUp({ keyCode: KeyCodes.y });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    Ember['default'].run(function () {
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('new tags can be created and added by enter press on keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagAdditionAction: function externalTagAdditionAction(tags) {
        assert.deepEqual(tags, 'qwerty', 'external tag addition action was called');
      }
    };

    component.set('onTagAddition', 'externalTagAdditionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('tags', '');
      component.set('searchTerm', 'qwerty');
      component.keyUp({ keyCode: KeyCodes.y });
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('tags are coerced to lower case on addition', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagAdditionAction: function externalTagAdditionAction(tags) {
        assert.deepEqual(tags, 'qwerty', 'external tag addition action was called');
      }
    };

    component.set('onTagAddition', 'externalTagAdditionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('tags', '');
      component.set('searchTerm', 'QWERTY');
      component.keyUp({ keyCode: KeyCodes.y });
      component.keyDown({ keyCode: KeyCodes.enter });
    });
  });

  qunit.test('spacebar creates a new tag with search term', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalTagAdditionAction: function externalTagAdditionAction(tags) {
        assert.deepEqual(tags, 'qwerty', 'external tag addition action was called');
      }
    };

    component.set('onTagAddition', 'externalTagAdditionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('tags', '');
      component.set('searchTerm', 'qwerty');
      component.keyUp({ keyCode: KeyCodes.y });
      component.keyDown({ keyCode: KeyCodes.space });
    });
  });

});
define('frontend-cp/tests/unit/components/ko-file-size/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-file-size', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    unit: true
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-linked-cases/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-linked-cases', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    needs: ['component:ko-linked-cases-context-menu', 'component:ko-toggle-context-modal']
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-linked-cases-context-menu/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  ember_qunit.moduleForComponent('ko-linked-cases-context-menu', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    needs: ['component:ko-context-modal-item']
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-option-list-drill-down/component-test', ['ember', 'ember-qunit', 'frontend-cp/lib/keycodes'], function (Ember, ember_qunit, KeyCodes) {

  'use strict';

  var component = undefined;
  var title = 'span:first:visible';
  var firstSuggestion = 'ul li:first:visible';
  var value = 'div:first:visible';
  var searchField = 'input:visible';
  var suggestionsList = 'ul:first li:visible';
  var hierarchyList = 'ul:last li:visible';
  var hierarchyLevelOneItemOne = 'ul:last li:first:visible';
  var hierarchyLevelOneItemTwo = 'ul:last li:nth-of-type(2):visible';
  var hierarchyLevelTwoItemThree = 'ul:last li:nth-of-type(3):visible';

  ember_qunit.moduleForComponent('ko-option-list-drill-down', 'Unit | Component | ko option list drill down', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    needs: ['helper:ko-slasherizer', 'helper:ko-embolden', 'component:ko-search'],
    setup: function setup() {
      component = this.subject();
      component.set('options', [{ id: 1, value: 'Team A,Jesse Bennett-Chamberlain' }, { id: 2, value: 'Team A,Jamie Edwards' }, { id: 3, value: 'Team A,Drew Warkentin' }, { id: 4, value: 'Team B,Jesse Bennett-Chamberlain' }, { id: 5, value: 'Team C' }, { id: 6, value: 'Team D' }]);
    }
  });

  ember_qunit.test('levels are extracted from options', function (assert) {
    assert.expect(1);

    this.render();

    var expectedObject = new Ember['default'].A();
    expectedObject.pushObject(Ember['default'].Object.create({ isBranchItem: true, text: 'Team A' }));
    expectedObject.pushObject(Ember['default'].Object.create({ isBranchItem: true, text: 'Team B' }));
    expectedObject.pushObject(Ember['default'].Object.create({ isBranchItem: false, text: 'Team C' }));
    expectedObject.pushObject(Ember['default'].Object.create({ isBranchItem: false, text: 'Team D' }));

    assert.deepEqual(component.extractRootLevelHierarchyItems(), expectedObject);
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  ember_qunit.test('title can be set', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('title', 'Assignee');
    });

    assert.equal(this.$(title).text(), 'Assignee', 'title');
  });

  ember_qunit.test('suggestions are recalculated after search', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('searchTerm', 'j');
      component.keyUp({ keyCode: KeyCodes.j });
    });

    var expectedList = ['Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team B / Jesse Bennett-Chamberlain'];

    var actualList = [];
    this.$(suggestionsList).each(function () {
      actualList.push($(this).text());
    });
    assert.deepEqual(actualList, expectedList, 'suggestions list');
  });

  ember_qunit.test('if the search list is in use it redraws correctly when the options change', function (assert) {
    assert.expect(2);

    this.render();

    Ember['default'].run(function () {
      component.set('searchTerm', 'j');
      component.keyUp({ keyCode: KeyCodes.j });
    });

    var expectedList = ['Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team B / Jesse Bennett-Chamberlain'];

    var actualList = [];
    this.$(suggestionsList).each(function () {
      actualList.push($(this).text());
    });
    assert.deepEqual(actualList, expectedList, 'suggestions list');

    Ember['default'].run(function () {
      component.set('options', [{ id: 2, value: 'Team A,Jamie Edwards' }]);
    });

    Ember['default'].run(function () {
      component.set('searchTerm', 'j');
      component.keyUp({ keyCode: KeyCodes.j });
    });

    var expectedListTwo = ['Team A / Jamie Edwards'];

    var actualListTwo = [];
    this.$(suggestionsList).each(function () {
      actualListTwo.push($(this).text());
    });
    assert.deepEqual(actualListTwo, expectedListTwo, 'suggestions list after options update');
  });

  ember_qunit.test('suggestions should be able to be selected by mouse', function (assert) {
    assert.expect(3);

    this.render();

    var targetObject = {
      externalAction: function externalAction(value) {
        var options = component.get('options');
        var selectedObject = options.filter(function (i) {
          return i.id === value;
        });

        assert.deepEqual(value, 2, 'external action was called');
        component.set('value', selectedObject[0].value.split(',').join('/'));
      }
    };

    component.set('onValueChange', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('searchTerm', 'Jamie');
      component.keyUp({ keyCode: KeyCodes.e });
    });

    assert.equal(this.$(firstSuggestion).text(), 'Team A / Jamie Edwards', 'suggested list');

    this.$(firstSuggestion).click();

    assert.equal($.trim(this.$(value).text()), 'Team A / Jamie Edwards', 'value');
  });

  ember_qunit.test('suggestions should be able to be selected by enter press on keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalAction: function externalAction(value) {
        assert.equal(value, 2, 'external action was called');
      }
    };

    component.set('onValueChange', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('searchTerm', 'Jamie');
      component.keyUp({ keyCode: KeyCodes.e });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });
  });

  ember_qunit.test('suggestions should be able to be selected by right arrow press on keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalAction: function externalAction(value) {
        assert.equal(value, 2, 'external action was called');
      }
    };

    component.set('onValueChange', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('searchTerm', 'Jamie');
      component.keyUp({ keyCode: KeyCodes.e });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.right });
  });

  ember_qunit.test('search input should be cleared after use', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('searchTerm', 'Jamie');
      component.keyUp({ keyCode: KeyCodes.e });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });

    assert.equal(component.get('searchterm'), null, 'searchTerm after selection');
  });

  ember_qunit.test('as soon as a search is started the hierarchy dropdown is replaced with the search dropdown', function (assert) {
    assert.expect(2);

    this.render();

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(searchField) });
    });

    var expectedHierarchyList = ['Team A', 'Team B', 'Team C', 'Team D'];

    var actualHierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualHierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualHierarchyList, expectedHierarchyList, 'hierarchy list');

    Ember['default'].run(function () {
      component.set('searchTerm', 'j');
      component.keyUp({ keyCode: KeyCodes.j });
    });

    var expectedSuggestionsList = ['Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team B / Jesse Bennett-Chamberlain'];

    var actualSuggestionsList = [];
    this.$(suggestionsList).each(function () {
      actualSuggestionsList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualSuggestionsList, expectedSuggestionsList, 'suggestions list');
  });

  ember_qunit.test('if a search is started but then all the characters are cleared from the search field the hierarchy dropdown should be shown', function (assert) {
    assert.expect(2);

    this.render();

    Ember['default'].run(function () {
      component.set('searchTerm', 'j');
      component.keyUp({ keyCode: KeyCodes.j });
    });

    var expectedSuggestionsList = ['Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team B / Jesse Bennett-Chamberlain'];

    var actualSuggestionsList = [];
    this.$(suggestionsList).each(function () {
      actualSuggestionsList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualSuggestionsList, expectedSuggestionsList, 'suggestions list');

    Ember['default'].run(function () {
      component.set('searchTerm', '');
      component.keyUp({ keyCode: KeyCodes.backspace });
    });

    var expectedHierarchyList = ['Team A', 'Team B', 'Team C', 'Team D'];

    var actualHierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualHierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualHierarchyList, expectedHierarchyList, 'hierarchy list');
  });

  ember_qunit.test('moving up and down the hierarchy by mouse', function (assert) {
    assert.expect(3);

    this.render();

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(searchField) });
    });

    this.$(hierarchyLevelOneItemOne).click();

    var expectedLevel1HierarchyList = ['Back', 'Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team A / Drew Warkentin'];

    var actualLevel1HierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualLevel1HierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualLevel1HierarchyList, expectedLevel1HierarchyList, 'level 1 hierarchy list');

    this.$(hierarchyLevelOneItemOne).click();

    var expectedRootHierarchyList = ['Team A', 'Team B', 'Team C', 'Team D'];

    var actualRootHierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualRootHierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualRootHierarchyList, expectedRootHierarchyList, 'root hierarchy list');

    this.$(hierarchyLevelOneItemTwo).click();

    var expectedSecondLevel1HierarchyList = ['Back', 'Team B / Jesse Bennett-Chamberlain'];

    var actualSecondLevel1HierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualSecondLevel1HierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualSecondLevel1HierarchyList, expectedSecondLevel1HierarchyList, 'second level 1 hierarchy list');
  });

  ember_qunit.test('items at the bottom of a hierarchy should be able to be selected by mouse', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalAction: function externalAction(value) {
        assert.deepEqual(value, 2, 'external action was called');
      }
    };

    component.set('onValueChange', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(searchField) });
    });

    this.$(hierarchyLevelOneItemOne).click();
    this.$(hierarchyLevelTwoItemThree).click();
  });

  ember_qunit.test('moving up and down the hierarchy by keyboard', function (assert) {
    assert.expect(3);

    this.render();

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(searchField) });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });

    var expectedLevel1HierarchyList = ['Back', 'Team A / Jesse Bennett-Chamberlain', 'Team A / Jamie Edwards', 'Team A / Drew Warkentin'];

    var actualLevel1HierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualLevel1HierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualLevel1HierarchyList, expectedLevel1HierarchyList, 'level 1 hierarchy list');

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });

    var expectedRootHierarchyList = ['Team A', 'Team B', 'Team C', 'Team D'];

    var actualRootHierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualRootHierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualRootHierarchyList, expectedRootHierarchyList, 'root hierarchy list');

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });

    var expectedSecondLevel1HierarchyList = ['Back', 'Team B / Jesse Bennett-Chamberlain'];

    var actualSecondLevel1HierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualSecondLevel1HierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualSecondLevel1HierarchyList, expectedSecondLevel1HierarchyList, 'second level 1 hierarchy list');
  });

  ember_qunit.test('items at the bottom of a hierarchy should be able to be selected by keyboard', function (assert) {
    assert.expect(1);

    this.render();

    var targetObject = {
      externalAction: function externalAction(value) {
        assert.equal(value, 2, 'external action was called');
      }
    };

    component.set('onValueChange', 'externalAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.focusIn({ target: component.$(searchField) });
    });

    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });
    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.down });
    component.keyDown({ keyCode: KeyCodes.enter });
  });

  ember_qunit.test('when showExpandedByDefault is true the hierarchy list should be shown by default', function (assert) {
    assert.expect(1);

    component.set('showExpandedByDefault', true);

    this.render();

    var expectedRootHierarchyList = ['Team A', 'Team B', 'Team C', 'Team D'];

    var actualRootHierarchyList = [];
    this.$(hierarchyList).each(function () {
      actualRootHierarchyList.push($.trim($(this).text()));
    });
    assert.deepEqual(actualRootHierarchyList, expectedRootHierarchyList, 'root hierarchy list');
  });

});
define('frontend-cp/tests/unit/components/ko-people/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-people', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    needs: ['component:ko-context-modal-item', 'component:ko-people-popover']
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-people-popover/component-test', ['ember', 'frontend-cp/tests/helpers/qunit'], function (Ember, qunit) {

  'use strict';

  var component = undefined;
  var firstListItem = '.ko-people-popover__filtered-list-item:first';
  var x = '.ko-people-popover__cross';

  qunit.moduleForComponent('ko-people-popover', {
    needs: ['component:ko-checkbox', 'component:ko-avatar', 'component:ko-loader'],
    setup: function setup() {
      component = this.subject();

      component.reopen({
        // Mock for Ember.run.debounce, as it is failing tests randomly
        // because debounce callback is executed after component *might*
        // be destroyed.
        searchTermDebounce: function searchTermDebounce(scope, callback) {
          callback.call(scope);
        }
      });

      component.set('contextModalId', 'addParticipants');
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();

    assert.equal(component._state, 'inDOM');
  });

  qunit.test('it does not show results when initialized', function (assert) {
    assert.expect(1);

    this.render();

    assert.equal(component.get('searchAttempt'), false, 'it does not show any results at initialization');
  });

  qunit.test('changing searchTerm fires action', function (assert) {
    assert.expect(2);

    this.render();

    var targetObject = {
      externalPeopleSuggestionAction: function externalPeopleSuggestionAction(term, selected) {
        assert.equal('R', term);
        assert.deepEqual([], selected);
      }
    };

    Ember['default'].run(function () {
      component.set('selectedPeople', []);
      component.set('suggestedPeople', null);
    });

    component.set('suggestPeople', 'externalPeopleSuggestionAction');
    component.set('targetObject', targetObject);

    Ember['default'].run(function () {
      component.set('searchTerm', 'R');
    });
  });

  qunit.test('clicking on search result adds it to selected people list', function (assert) {
    assert.expect(2);

    this.render();

    Ember['default'].run(function () {
      component.set('selectedPeople', []);
      component.set('suggestedPeople', null);
    });

    Ember['default'].run(function () {
      assert.equal(0, component.get('selectedPeople.length'), 'No people are selected on component init');
    });

    Ember['default'].run(function () {
      component.set('searchTerm', 'K');
      component.set('isLoading', false);
      component.set('suggestedPeople', [{
        parent: {
          avatar: '',
          fullName: 'Demo User',
          organization: {
            name: 'Kayako'
          }
        },
        email: 'kayako-demo-1@kayako-testing.com'
      }]);
    });

    Ember['default'].run(function () {
      component.$(firstListItem).click();
    });

    Ember['default'].run(function () {
      assert.equal(1, component.get('selectedPeople.length'), 'One person is added to selected people list');
    });
  });

  qunit.test('clicking on x removes participant from selected list', function (assert) {
    assert.expect(2);

    this.render();

    Ember['default'].run(function () {
      component.set('selectedPeople', []);
      component.set('suggestedPeople', null);
    });

    Ember['default'].run(function () {
      component.set('searchTerm', 'K');
      component.set('isLoading', false);
      component.set('suggestedPeople', [{
        parent: {
          avatar: '',
          fullName: 'Demo User',
          organization: {
            name: 'Kayako'
          }
        },
        email: 'kayako-demo-1@kayako-testing.com'
      }]);
    });

    Ember['default'].run(function () {
      component.$(firstListItem).click();
    });

    Ember['default'].run(function () {
      assert.equal(1, component.get('selectedPeople.length'), 'One person is added to selected people list');
    });

    Ember['default'].run(function () {
      component.$(x).click();
    });

    Ember['default'].run(function () {
      assert.equal(0, component.get('selectedPeople.length'), 'No people are selected after the last person is removed');
    });
  });

});
define('frontend-cp/tests/unit/components/ko-radio/component-test', ['ember', 'frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (Ember, qunit, KeyCodes) {

  'use strict';

  var component = undefined;
  var radio = 'div:first';
  var label = 'label:first';

  qunit.moduleForComponent('ko-radio', {
    unit: true,
    setup: function setup() {
      component = this.subject();
      component.set('label', 'You can do this!');
      component.set('tabindex', 0);
      component.set('value', 'one');
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('can not be unselected by pressing spacebar', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('selected', true);
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });

    assert.equal(component.checked, true, 'it has not been unselected');
  });

  qunit.test('can be selected by clicking on radio', function (assert) {
    var _this = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this.$(radio).click();
    });

    assert.equal(component.checked, true, 'it has been selected');
  });

  qunit.test('can be selected by clicking on radio (DDAU)', function (assert) {
    var _this2 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('onRadio', 'checked');
      component.set('checked', false);
    });

    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has been selected');
      }
    });

    Ember['default'].run(function () {
      _this2.$(radio).click();
    });
  });

  qunit.test('can not be unselected by clicking on radio', function (assert) {
    var _this3 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('selected', true);
    });

    Ember['default'].run(function () {
      _this3.$(radio).click();
    });

    assert.equal(component.checked, true, 'it has not been unselected');
  });

  qunit.test('can not be unselected by clicking on radio (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('onRadio', 'checked');
      component.set('checked', true);
    });

    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has not been unselected');
      }
    });

    this.$(radio).click();
  });

  qunit.test('can be selected by clicking on label', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('selected', false);
    });

    this.$(label).click();

    assert.equal(component.get('checked'), true, 'it has been selected');
  });

  qunit.test('can be selected by clicking on label (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('onRadio', 'checked');
      component.set('checked', false);
    });

    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has been checked');
      }
    });

    this.$(label).click();
  });

  qunit.test('can not be unselected by clicking on label', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('selected', true);
    });

    this.$(label).click();
    assert.equal(component.get('checked'), true, 'it has not been unselected');
  });

  qunit.test('can not be unselected by clicking on label (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('onRadio', 'checked');
      component.set('checked', true);
    });

    component.set('targetObject', {
      checked: function checked(value) {
        assert.equal(value, true, 'it has not been unselected');
      }
    });

    this.$(label).click();
  });

  qunit.test('when disabled radio can\'t be selected', function (assert) {
    var _this4 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('disabled', true);
    });

    Ember['default'].run(function () {
      _this4.$(radio).click();
    });

    assert.equal(component.value === component.checked, false, 'radio cant be selected');
  });

  qunit.test('when disabled radio can\'t be selected (DDAU)', function (assert) {
    var _this5 = this;

    assert.expect(0);

    this.render();

    Ember['default'].run(function () {
      component.set('disabled', true);
    });

    Ember['default'].run(function () {
      component.set('onRadio', 'selected');
      component.set('checked', 'one');
    });

    component.set('targetObject', {
      selected: function selected() {
        assert.equal(true, false, 'it can\'t be selected');
      }
    });

    Ember['default'].run(function () {
      _this5.$(radio).click();
    });
  });

});
define('frontend-cp/tests/unit/components/ko-table/component-test', ['frontend-cp/tests/helpers/qunit', 'ember'], function (qunit, Ember) {

  'use strict';

  var component = undefined;
  var rows = undefined;

  qunit.moduleForComponent('ko-table', 'Unit | Component | ko table', {
    // Specify the other units that are required for this test
    // needs: ['component:foo', 'helper:bar']
    unit: true,
    setup: function setup() {
      component = this.subject();
      rows = [Ember['default'].Object.create({ selected: false }), Ember['default'].Object.create({ selected: false }), Ember['default'].Object.create({ selected: false })];
      rows.forEach(function (row) {
        return component.send('registerRow', row);
      });
    }
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('it tracks the selected state of rows', function (assert) {
    assert.equal(component.get('allRowsSelected'), false);

    rows[0].set('selected', true);
    rows[1].set('selected', true);
    assert.equal(component.get('allRowsSelected'), false);

    rows[2].set('selected', true);
    assert.equal(component.get('allRowsSelected'), true);

    rows[0].set('selected', false);
    assert.equal(component.get('allRowsSelected'), false);
  });

  qunit.test('it selects all rows', function (assert) {
    component.send('selectAll');
    rows.forEach(function (row) {
      return assert.equal(row.get('selected'), true);
    });

    component.send('deselectAll');
    rows.forEach(function (row) {
      return assert.equal(row.get('selected'), false);
    });
  });

});
define('frontend-cp/tests/unit/components/ko-table-column/component-test', ['ember-qunit'], function (ember_qunit) {

  'use strict';

  var component = undefined;

  ember_qunit.moduleForComponent('ko-table/column', 'Unit | Component | ko table column', {
    // Specify the other units that are required for this test
    // needs: ['helper:eq']
    unit: true,
    setup: function setup() {
      component = this.subject();
    }
  });

  ember_qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

  ember_qunit.test('it is unsortable by default', function (assert) {
    assert.expect(0);
    this.render();
    component.set('parentView', {
      send: function send() {
        throw new Error('Should not be sorted');
      }
    });

    component.click();
  });

  // test('it emits sort action', function (assert) {
  //   let columnName = 'name';
  //   assert.expect(2);
  //
  //   component.set('parentView', {
  //     send(action, column) {
  //       assert.equal(action, 'sort');
  //       assert.equal(column, columnName);
  //     }
  //   });
  //
  //   Ember.run(() => {
  //     component.set('sortable', columnName);
  //   });
  //
  //   component.click();
  // });

});
define('frontend-cp/tests/unit/components/ko-table-header/component-test', function () {

	'use strict';

	// import { moduleForComponent, test } from 'frontend-cp/tests/helpers/qunit';
	// import Ember from 'ember';
	//
	// let component;
	// let table;
	//
	// moduleForComponent('ko-table/header', 'Unit | Component | ko table header', {
	//   // Specify the other units that are required for this test
	//   needs: ['component:ko-checkbox'],
	//   setup() {
	//     component = this.subject();
	//     table = Ember.Object.create();
	//     component.set('parentView', table);
	//   }
	// });
	//
	// test('it renders', function (assert) {
	//   assert.expect(2);
	//
	//   // Creates the component instance
	//   assert.equal(component._state, 'preRender');
	//
	//   // Renders the component to the page
	//   this.render();
	//   assert.equal(component._state, 'inDOM');
	// });
	//
	// test('it doesn\'t have a checkbox by default', function (assert) {
	//   assert.equal(this.$('th').length, 0);
	// });
	//
	// test('it displays a checkbox when table\'s selectable=true', function (assert) {
	//   Ember.run(() => {
	//     table.set('selectable', true);
	//   });
	//   assert.equal(this.$('th').length, 1);
	// });
	//
	// test('it emits an action on the table when checkbox is clicked', function (assert) {
	//   assert.expect(2);
	//   Ember.run(() => {
	//     table.set('selectable', true);
	//   });
	//
	//   table.set('send', (action) => {
	//     assert.equal(action, 'selectAll');
	//   });
	//
	//   Ember.run(() => {
	//     component.send('selectAll', true);
	//   });
	//
	//   table.set('send', (action) => {
	//     assert.equal(action, 'deselectAll');
	//   });
	//
	//   Ember.run(() => {
	//     component.send('selectAll', false);
	//   });
	// });
	//
	// test('it modifies sorting order and column and emits an action when sorted', function (assert) {
	//   assert.expect(14);
	//   component.set('onSort', 'onSort');
	//
	//   // initial values
	//   assert.equal(component.get('sortColumn'), '');
	//   assert.equal(component.get('sortOrder'), '');
	//
	//   // initial sort
	//   component.set('targetObject', {
	//     onSort(sortColumn, sortOrder) {
	//       assert.equal(sortColumn, 'foo');
	//       assert.equal(sortOrder, 'asc');
	//     }
	//   });
	//   component.send('sort', 'foo');
	//   assert.equal(component.get('sortColumn'), 'foo');
	//   assert.equal(component.get('sortOrder'), 'asc');
	//
	//   // desc sort
	//   component.set('targetObject', {
	//     onSort(sortColumn, sortOrder) {
	//       assert.equal(sortOrder, 'desc');
	//     }
	//   });
	//   component.send('sort', 'foo');
	//   assert.equal(component.get('sortOrder'), 'desc');
	//
	//   // back to asc
	//   component.set('targetObject', {
	//     onSort(sortColumn, sortOrder) {
	//       assert.equal(sortOrder, 'asc');
	//     }
	//   });
	//   component.send('sort', 'foo');
	//   assert.equal(component.get('sortOrder'), 'asc');
	//
	//   // different column
	//   component.set('targetObject', {
	//     onSort(sortColumn, sortOrder) {
	//       assert.equal(sortColumn, 'bar');
	//       assert.equal(sortOrder, 'asc');
	//     }
	//   });
	//   component.send('sort', 'bar');
	//   assert.equal(component.get('sortColumn'), 'bar');
	//   assert.equal(component.get('sortOrder'), 'asc');
	// });

});
define('frontend-cp/tests/unit/components/ko-table-row/component-test', function () {

	'use strict';

	// import { moduleForComponent, test } from 'frontend-cp/tests/helpers/qunit';
	// import Ember from 'ember';
	//
	// let component;
	// let table;
	// let body;
	//
	// moduleForComponent('ko-table/row', 'Unit | Component | ko table row', {
	//   // Specify the other units that are required for this test
	//   needs: ['component:ko-checkbox'],
	//   setup() {
	//     component = this.subject();
	//     table = Ember.Object.create({
	//       send() {}
	//     });
	//     body = Ember.Object.create({
	//       table: table
	//     });
	//     component.set('parentView', body);
	//   }
	// });
	//
	// test('it renders', function(assert) {
	//   assert.expect(2);
	//
	//   // Creates the component instance
	//   assert.equal(component._state, 'preRender');
	//
	//   // Renders the component to the page
	//   this.render();
	//   assert.equal(component._state, 'inDOM');
	// });
	//
	// test('it is selectable whenever the table is', function (assert) {
	//   this.render();
	//   assert.equal(this.$('td').length, 0);
	//
	//   Ember.run(() => {
	//     table.set('selectable', true);
	//   });
	//
	//   assert.equal(this.$('td').length, 1);
	// });
	//
	// test('it emits registerRow on the table when inserted into dom', function (assert) {
	//   assert.expect(2);
	//
	//   table.set('send', (action, row) => {
	//     assert.equal(action, 'registerRow');
	//     assert.equal(row, component);
	//     table.set('send', () => {});
	//   });
	//
	//   this.render();
	// });
	//
	// test('it emits unregisterRow on the table when removed from dom', function (assert) {
	//   assert.expect(2);
	//   this.render();
	//
	//   table.set('send', (action, row) => {
	//     assert.equal(action, 'unregisterRow');
	//     assert.equal(row, component);
	//   });
	// });

});
define('frontend-cp/tests/unit/components/ko-text-editor/component-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleForComponent('ko-text-editor', {
    needs: ['component:ko-file-field', 'component:ko-draggable-dropzone', 'component:ko-channel-select', 'component:ko-text-editor/toggle-button', 'component:ko-file-upload', 'component:ko-people']
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    // Creates the component instance
    var component = this.subject();
    assert.equal(component._state, 'preRender');

    // Renders the component to the page
    this.render();
    assert.equal(component._state, 'inDOM');
  });

});
define('frontend-cp/tests/unit/components/ko-toggle/component-test', ['ember', 'frontend-cp/tests/helpers/qunit', 'frontend-cp/lib/keycodes'], function (Ember, qunit, KeyCodes) {

  'use strict';

  var component = undefined;
  var radio = 'div:first';
  var label = 'label:first';

  qunit.moduleForComponent('ko-toggle', {
    unit: true,
    setup: function setup() {
      component = this.subject();
      component.set('label', 'Nuclear bomb switch');
      component.set('tabindex', 0);
    },
    teardown: function teardown() {}
  });

  qunit.test('it renders', function (assert) {
    assert.expect(2);

    assert.equal(component._state, 'preRender');

    this.render();
    assert.equal(component._state, 'inDOM');
  });

  qunit.test('can be activated by pressing spacebar', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });

    assert.equal(component.activated, true, 'it has been activated');
  });

  qunit.test('can be activated by pressing spacebar (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, true, 'it has been activated');
      }
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });
  });

  qunit.test('can be deactivated by pressing spacebar', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });

    assert.equal(component.activated, false, 'it has been deactivated');
  });

  qunit.test('can be deactivated by pressing spacebar (DDAU)', function (assert) {
    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, false, 'it has been deactivated');
      }
    });

    Ember['default'].run(function () {
      component.keyUp({ keyCode: KeyCodes.space });
    });
  });

  qunit.test('can be activated by clicking on radio', function (assert) {
    var _this = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this.$(radio).click();
    });

    assert.equal(component.activated, true, 'it has been activated');
  });

  qunit.test('can be activated by clicking on toggle (DDAU)', function (assert) {
    var _this2 = this;

    assert.expect(1);

    this.render();

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, true, 'it has been activated');
      }
    });

    Ember['default'].run(function () {
      _this2.$(radio).click();
    });
  });

  qunit.test('can be deactivated by clicking on radio', function (assert) {
    var _this3 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    Ember['default'].run(function () {
      _this3.$(radio).click();
    });

    assert.equal(component.activated, false, 'it has been deactivated');
  });

  qunit.test('can be deactivated by clicking on radio (DDAU)', function (assert) {
    var _this4 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, false, 'it has been deactivated');
      }
    });

    Ember['default'].run(function () {
      _this4.$(radio).click();
    });
  });

  qunit.test('can be activated by clicking on label', function (assert) {
    var _this5 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      _this5.$(label).click();
    });

    assert.equal(component.activated, true, 'it has been activated');
  });

  qunit.test('can be activated by clicking on label (DDAU)', function (assert) {
    var _this6 = this;

    assert.expect(1);

    this.render();

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, true, 'it has been activated');
      }
    });

    Ember['default'].run(function () {
      _this6.$(label).click();
    });
  });

  qunit.test('can be deactivated by clicking on label', function (assert) {
    var _this7 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    Ember['default'].run(function () {
      _this7.$(label).click();
    });

    assert.equal(component.activated, false, 'it has been deactivated');
  });

  qunit.test('can be deactivated by clicking on label (DDAU)', function (assert) {
    var _this8 = this;

    assert.expect(1);

    this.render();

    Ember['default'].run(function () {
      component.set('activated', true);
    });

    component.set('onToggle', 'activated');
    component.set('targetObject', {
      activated: function activated(value) {
        assert.equal(value, false, 'it has been deactivated');
      }
    });

    Ember['default'].run(function () {
      _this8.$(label).click();
    });
  });

});
define('frontend-cp/tests/unit/components/mixins/drop-down-keyboard-nav-test', ['ember', 'frontend-cp/components/mixins/drop-down-keyboard-nav', 'qunit'], function (Ember, DropDownKeyboardNavMixin, qunit) {

  'use strict';

  qunit.module('DropDownKeyboardNavMixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var DropDownKeyboardNavObject = Ember['default'].Object.extend(DropDownKeyboardNavMixin['default']);
    var subject = DropDownKeyboardNavObject.create();
    assert.ok(subject);
  });

});
define('frontend-cp/tests/unit/components/mixins/suggestions-test', ['ember', 'frontend-cp/components/mixins/suggestions', 'qunit'], function (Ember, SuggestionsMixin, qunit) {

  'use strict';

  var SuggestionsObject = undefined;
  var subject = undefined;
  var source = undefined;

  qunit.module('SuggestionsMixin', {
    setup: function setup() {
      SuggestionsObject = Ember['default'].Object.extend(SuggestionsMixin['default']);
      subject = SuggestionsObject.create();
      source = new Ember['default'].A(['pig', 'dog', 'chicken']);
    }
  });

  qunit.test('searching for a unique string in the source returns only that string', function (assert) {
    assert.expect(1);

    var results = subject.matches('dog', source);

    assert.equal(results, 'dog');
  });

  qunit.test('searching for a single character in the source returns any string that contains that character', function (assert) {
    assert.expect(1);

    var results = subject.matches('i', source);

    assert.equal(results, 'pig,chicken');
  });

  qunit.test('can handle empty source', function (assert) {
    assert.expect(1);

    source = new Ember['default'].A();

    var results = subject.matches('i', source);

    assert.equal(results, '');
  });

});
define('frontend-cp/tests/unit/mixins/has-basic-identities-test', ['ember', 'frontend-cp/mixins/has-basic-identities', 'qunit'], function (Ember, HasBasicIdentitiesMixin, qunit) {

  'use strict';

  qunit.module('Unit | Mixin | has basic identities');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var HasEmailIdentitiesObject = Ember['default'].Object.extend(HasBasicIdentitiesMixin['default']);
    var subject = HasEmailIdentitiesObject.create();
    assert.ok(subject);
  });

});
define('frontend-cp/tests/unit/mixins/simple-state-test', ['ember', 'frontend-cp/mixins/simple-state', 'qunit'], function (Ember, SimpleStateMixin, qunit) {

  'use strict';

  qunit.module('SimpleStateMixin');

  // Replace this with your real tests.
  qunit.test('it works', function (assert) {
    var SimpleStateObject = Ember['default'].Object.extend(SimpleStateMixin['default']);
    var subject = SimpleStateObject.create();
    assert.ok(subject);
  });

});
define('frontend-cp/tests/unit/services/context-modal-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleFor('service:context-modal', {
    // Specify the other units that are required for this test.
    // needs: ['service:foo']
  });

  // Replace this with your real tests.
  qunit.test('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });

});
define('frontend-cp/tests/unit/services/custom-fields/options-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('service:custom-fields/options', 'Unit | Service | custom-fields/options', {
    needs: ['model:user-field', 'model:field-option', 'model:field', 'model:case-priority', 'model:case-status', 'model:case-type']
  });

  ember_qunit.test('it can save options', function (assert) {
    assert.expect(3);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var option1 = undefined,
        option2 = undefined,
        option3 = undefined;

    Ember['default'].run(function () {
      option1 = store.createRecord('field-option', { value: 'option1', tag: 'value1' });
      option2 = store.createRecord('field-option', { value: 'option2', tag: 'value2' });
      option3 = store.createRecord('field-option', { value: 'option3', tag: 'value3' });
    });

    var sequence = 0;

    [option1, option2, option3].forEach(function (option) {
      option.reopen({
        save: function save() {
          sequence++;

          return new Ember['default'].RSVP.Promise(function (resolve) {
            return resolve();
          });
        }
      });
    });

    var options = [option1, option2, option3];

    var promises = [];
    Ember['default'].run(function () {
      promises = service.save(options);
    });

    assert.equal(3, sequence);
    assert.equal(3, promises.length);

    Ember['default'].RSVP.allSettled(promises).then(function (results) {
      assert.equal(3, results.length);
    });
  });

  ember_qunit.test('it add option with sortOrder = 1, when there is no options', function (assert) {
    assert.expect(2);

    var service = this.subject();

    var options = [];

    Ember['default'].run(function () {
      service.add(options);
    });

    assert.equal(1, options.length);
    assert.equal(1, options.get('firstObject').get('sortOrder'));
  });

  ember_qunit.test('it add option with sortOrder = sortOrder+1, when there are options', function (assert) {
    assert.expect(2);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var option1 = undefined,
        option2 = undefined,
        option3 = undefined;

    Ember['default'].run(function () {
      option1 = store.createRecord('field-option', { sortOrder: 1, value: 'option1', tag: 'value1' });
      option2 = store.createRecord('field-option', { sortOrder: 2, value: 'option2', tag: 'value2' });
      option3 = store.createRecord('field-option', { sortOrder: 3, value: 'option3', tag: 'value3' });
    });

    var options = [option1, option2, option3];

    Ember['default'].run(function () {
      service.add(options);
    });

    assert.equal(4, options.length);
    assert.equal(4, options.get('lastObject').get('sortOrder'));
  });

  ember_qunit.test('it can remove option (rollback) when it is a new option', function (assert) {
    assert.expect(3);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.set('optionsToBeDeleted', []);

    var option = undefined;
    Ember['default'].run(function () {
      option = store.createRecord('field-option', { sortOrder: 1, value: 'option1', tag: 'value1' });
    });

    option.reopen({
      rollbackAttributes: function rollbackAttributes() {
        assert.equal(true, true);
      }
    });

    assert.equal(0, service.get('optionsToBeDeleted.length'));

    service.remove(option);

    assert.equal(1, service.get('optionsToBeDeleted.length'));
  });

  ember_qunit.test('it can remove option (mark for deletion) when it is an existing option', function (assert) {
    assert.expect(3);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.set('optionsToBeDeleted', []);

    var option = undefined;
    Ember['default'].run(function () {
      option = store.push('field-option', {
        id: 1,
        sortOrder: 1,
        value: 'option1',
        tag: 'value1'
      }, true);
    });

    assert.equal(false, option.get('markedForDeletion'));

    Ember['default'].run(function () {
      service.remove(option);
    });

    assert.equal(true, option.get('markedForDeletion'));
    assert.equal(1, service.get('optionsToBeDeleted.length'));
  });

  ember_qunit.test('it can clear options and persist them to store', function (assert) {
    assert.expect(8);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.set('optionsToBeDeleted', []);

    var option1 = undefined,
        option2 = undefined,
        option3 = undefined;
    Ember['default'].run(function () {
      option1 = store.push('field-option', {
        id: 1,
        sortOrder: 1,
        value: 'option1',
        tag: 'value1'
      }, true);
      option2 = store.push('field-option', {
        id: 2,
        sortOrder: 2,
        value: 'option2',
        tag: 'value2'
      }, true);
      option3 = store.push('field-option', {
        id: 3,
        sortOrder: 3,
        value: 'option3',
        tag: 'value3'
      }, true);
    });

    var sequence = 0;
    var deletedSequence = 0;
    var options = [option1, option2, option3];

    options.forEach(function (option) {
      option.reopen({
        save: function save() {
          sequence++;

          return new Ember['default'].RSVP.Promise(function (resolve) {
            resolve();
          });
        },
        deleteRecord: function deleteRecord() {
          deletedSequence++;
        }
      });
    });

    Ember['default'].run(function () {
      service.remove(option1);
      service.remove(option2);
      service.remove(option3);
    });

    assert.equal(3, options.length);
    assert.equal(3, service.get('optionsToBeDeleted.length'));

    var promises = [];
    Ember['default'].run(function () {
      promises = service.clear(options);
    });

    assert.equal(0, service.get('optionsToBeDeleted.length'));
    assert.equal(3, sequence);
    assert.equal(3, deletedSequence);
    assert.equal(3, promises.length);
    assert.equal(0, options.length);

    Ember['default'].RSVP.allSettled(promises).then(function (results) {
      assert.equal(3, results.length);
    });
  });

  ember_qunit.test('it can clear options, cleanup if there are deleted records', function (assert) {
    assert.expect(6);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.set('optionsToBeDeleted', []);

    var option = undefined;
    Ember['default'].run(function () {
      option = store.push('field-option', {
        id: 1,
        sortOrder: 1,
        value: 'option1',
        tag: 'value1'
      }, true);
    });

    assert.equal(false, option.get('isDeleted'));

    Ember['default'].run(function () {
      option.deleteRecord();
    });

    assert.equal(true, option.get('isDeleted'));

    var sequence = 0;
    option.reopen({
      deleteRecord: function deleteRecord() {
        // this should never be executed.
        assert.equal(true, true);
      },
      save: function save() {
        sequence++;

        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve();
        });
      }
    });

    Ember['default'].run(function () {
      service.remove(option);
    });

    var options = [option];

    var promises = [];
    Ember['default'].run(function () {
      promises = service.clear(options);
    });

    assert.equal(0, service.get('optionsToBeDeleted.length'));
    assert.equal(0, options.length);
    assert.equal(1, promises.length);
    assert.equal(1, sequence);
  });

  ember_qunit.test('it can rollback options', function (assert) {
    assert.expect(1);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var option = undefined;
    Ember['default'].run(function () {
      option = store.push('field-option', {
        id: 1,
        sortOrder: 1,
        value: 'option1',
        tag: 'value1'
      }, true);
    });

    option.reopen({
      rollbackAttributes: function rollbackAttributes() {
        assert.equal(true, true);
      }
    });

    service.rollback([]);
    service.rollback([option]);
  });

  ember_qunit.test('it can save fields by different type', function (assert) {
    assert.expect(20);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var types = {};

    store.reopen({
      peekAll: function peekAll(type) {
        return types[type];
      }
    });

    Ember['default'].run(function () {
      types['case-priority'] = [store.push('case-priority', {
        id: 1,
        label: 'priority',
        level: 1
      }, true)];
      types['case-status'] = [store.push('case-status', {
        id: 1,
        label: 'status',
        level: 1,
        statusType: 'CUSTOM'
      }, true)];
      types['case-type'] = [store.push('case-type', {
        id: 1,
        label: 'type',
        level: 1
      }, true)];
    });

    var promises = [];
    var prioritySequence = 0;
    var statusSequence = 0;
    var typeSequence = 0;

    types['case-priority'][0].reopen({
      save: function save() {
        prioritySequence++;

        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve();
        });
      }
    });

    types['case-status'][0].reopen({
      save: function save() {
        statusSequence++;

        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve();
        });
      }
    });

    types['case-type'][0].reopen({
      save: function save() {
        typeSequence++;

        return new Ember['default'].RSVP.Promise(function (resolve) {
          resolve();
        });
      }
    });

    Ember['default'].run(function () {
      promises = service.saveByFieldType('case-', 'PRIORITY');
    });

    assert.equal(1, prioritySequence, 'PRIORITY: prioritySequence to be 1');
    assert.equal(0, statusSequence, 'PRIORITY: statusSequence to be 0');
    assert.equal(0, typeSequence, 'PRIORITY: typeSequence to be 0');
    assert.equal(1, promises.length, 'PRIORITY: promises.length to be 1');

    prioritySequence = 0;

    Ember['default'].run(function () {
      promises = service.saveByFieldType('case-', 'STATUS');
    });

    assert.equal(0, prioritySequence, 'STATUS: prioritySequence to be 0');
    assert.equal(1, statusSequence, 'STATUS: statusSequence to be 1');
    assert.equal(0, typeSequence, 'STATUS: typeSequence to be 0');
    assert.equal(1, promises.length, 'STATUS: promises.length to be 1');

    statusSequence = 0;

    Ember['default'].run(function () {
      types['case-type'][0].set('id', 1);
      promises = service.saveByFieldType('case-', 'TYPE');
    });

    assert.equal(0, prioritySequence, 'TYPE: prioritySequence to be 0');
    assert.equal(0, statusSequence, 'TYPE: statusSequence to be 0');
    assert.equal(0, typeSequence, 'TYPE: typeSequence to be 0');
    assert.equal(0, promises.length, 'TYPE: promises.length to be 0');

    typeSequence = 0;

    Ember['default'].run(function () {
      // do not save case-status if its not 'CUSTOM' type
      types['case-status'][0].set('statusType', 'NOT-CUSTOM');
      promises = service.saveByFieldType('case-', 'STATUS');
    });

    assert.equal(0, prioritySequence, 'STATUS (NOT CUSTOM): prioritySequence to be 0');
    assert.equal(0, statusSequence, 'STATUS (NOT CUSTOM): statusSequence to be 0');
    assert.equal(0, typeSequence, 'STATUS (NOT CUSTOM): typeSequence to be 0');
    assert.equal(0, promises.length, 'STATUS (NOT CUSTOM): promises.length to be 0');

    Ember['default'].run(function () {
      // do not save case-type if it is NOT a system field with id 1|2|3|4
      types['case-type'][0].set('id', 50);
      promises = service.saveByFieldType('case-', 'TYPE');
    });

    assert.equal(0, prioritySequence, 'TYPE (NOT SYSTEM): prioritySequence to be 0');
    assert.equal(0, statusSequence, 'TYPE (NOT SYSTEM): statusSequence to be 0');
    assert.equal(1, typeSequence, 'TYPE (NOT SYSTEM): typeSequence to be 0');
    assert.equal(1, promises.length, 'TYPE (NOT SYSTEM): promises.length to be 0');
  });

});
define('frontend-cp/tests/unit/services/custom-fields-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('service:custom-fields', 'Unit | Service | custom-fields', {
    needs: ['model:user-field', 'model:field-option', 'model:field', 'service:custom-fields/types', 'service:custom-fields/options', 'service:intl', 'service:notification', 'ember-intl@adapter:-intl-adapter'],
    beforeEach: function beforeEach() {
      var intl = this.container.lookup('service:intl');
      var localeId = 'en-test';
      var keys = ['admin.userfields', 'admin.fields.new.heading', 'admin.fields.edit.heading', 'admin.casefields.type.dropdown.name', 'admin.fields.type.field_options.missing_options'];

      intl.set('locales', [localeId]);
      intl.createLocale(localeId, {});
      intl.addMessages(localeId, keys.reduce(function (payload, key) {
        payload['frontend.api.' + key] = key;
        return payload;
      }, {}));
    }
  });

  ember_qunit.test('it renders correct title breadcrumbs for new record', function (assert) {
    assert.expect(1);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var model = undefined;
    Ember['default'].run(function () {
      model = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: []
      });
    });

    assert.equal('admin.userfields / admin.casefields.type.dropdown.name / admin.fields.new.heading', service.getTitleBreadcrumbs(model));
  });

  ember_qunit.test('it renders correct title breadcrumbs for existed record', function (assert) {
    assert.expect(1);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var model = undefined;
    Ember['default'].run(function () {
      model = store.push('user-field', {
        id: 1,
        title: 'Test Select',
        fieldType: 'SELECT',
        options: []
      }, true);
    });

    assert.equal('admin.userfields / Test Select', service.getTitleBreadcrumbs(model));
  });

  ember_qunit.test('it persist new record through save method', function (assert) {
    assert.expect(1);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.reopen({
      save: function save(model) {
        assert.equal(true, model.get('isNew'));
      }
    });

    var model = undefined;
    Ember['default'].run(function () {
      model = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: []
      });
    });

    service.persist(model);
  });

  ember_qunit.test('it persist existed record through edit method', function (assert) {
    assert.expect(1);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    service.reopen({
      edit: function edit(model) {
        assert.equal(false, model.get('isNew'));
      }
    });

    var model = undefined;
    Ember['default'].run(function () {
      model = store.push('user-field', {
        id: 1,
        title: 'Test Select',
        fieldType: 'SELECT',
        options: []
      }, true);
    });

    service.persist(model);
  });

  ember_qunit.test('it cant save new choice field if there is no options', function (assert) {
    assert.expect(5);

    var service = this.subject();
    var store = this.container.lookup('service:store');
    var notification = this.container.lookup('service:notification');

    var model = undefined;
    Ember['default'].run(function () {
      model = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: []
      });
    });

    model.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          return resolve();
        });
      }
    });

    assert.equal(true, model.get('isChoiceField'));
    assert.equal(0, model.get('options').get('length'));

    var promise = service.save(model);

    notification.reopen({
      add: function add(options) {
        assert.deepEqual({
          type: 'error',
          dismissable: true,
          autodismiss: true,
          title: 'admin.fields.type.field_options.missing_options',
          body: null
        }, options);
      }
    });

    promise['catch'](function () {
      assert.equal(true, model.get('isNew'));
      assert.equal(0, model.get('options').get('length'));
    });
  });

  ember_qunit.test('it can save new choice field with options', function (assert) {
    assert.expect(8);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var userField = undefined;
    var fieldOption = undefined;

    // Sequence controls that models are saved in the right order
    // user-field -> field-option -> user-field
    // to avoid dirty user-field after everything is saved
    var sequence = 0;

    Ember['default'].run(function () {
      fieldOption = store.createRecord('field-option', { value: 'value', tag: 'tag' });

      userField = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: [fieldOption]
      });
    });

    userField.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          // we need to check that save is called twice

          if (sequence === 1) {
            assert.equal(1, sequence++);
          } else {
            assert.equal(3, sequence++);
          }

          return resolve();
        });
      }
    });

    fieldOption.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          // we need to check that save is called once
          assert.equal(2, sequence++);
          return resolve();
        });
      }
    });

    assert.equal(true, userField.get('isChoiceField'));
    assert.equal(1, userField.get('options').get('length'));
    assert.equal(0, sequence++);

    var promise = service.save(userField);

    promise.then(function () {
      assert.equal(1, userField.get('options').get('length'));
      assert.equal(4, sequence++);
    });
  });

  ember_qunit.test('it can edit choice field with options in the right order', function (assert) {
    assert.expect(7);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var userField = undefined;
    var fieldOption = undefined;

    // Sequence controls that models are saved in the edit order
    // field-option -> user-field
    // to avoid dirty user-field after everything is saved
    var sequence = 0;

    Ember['default'].run(function () {
      fieldOption = store.createRecord('field-option', { value: 'value', tag: 'tag' });

      userField = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: [fieldOption]
      });
    });

    userField.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          // we need to check that save is called once for edit
          // and after options where saved

          assert.equal(2, sequence++);

          return resolve();
        });
      }
    });

    fieldOption.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          // we need to check that save is called once
          assert.equal(1, sequence++);
          return resolve();
        });
      }
    });

    assert.equal(true, userField.get('isChoiceField'));
    assert.equal(1, userField.get('options').get('length'));
    assert.equal(0, sequence++);

    var promise = service.edit(userField);

    promise.then(function () {
      assert.equal(1, userField.get('options').get('length'));
      assert.equal(3, sequence++);
    });
  });

  ember_qunit.test('it can rollback model', function (assert) {
    assert.expect(2);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var userField = undefined;
    var fieldOption = undefined;

    Ember['default'].run(function () {
      fieldOption = store.createRecord('field-option', { value: 'value', tag: 'tag' });

      userField = store.createRecord('user-field', {
        fieldType: 'SELECT',
        options: [fieldOption]
      });
    });

    service.reopen({
      customFieldsOptions: {
        rollback: function rollback() {
          assert.equal(true, true);
        }
      }
    });

    userField.reopen({
      rollback: function rollback() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          assert.equal(true, true);
          return resolve();
        });
      }
    });

    service.rollback(userField);
  });

  ember_qunit.test('it can reorder fields', function (assert) {
    assert.expect(2);

    var service = this.subject();
    var store = this.container.lookup('service:store');
    var sessionId = 'test-session-id';

    var userFields = [];
    var userFieldsReordered = [];
    var userField1 = undefined,
        userField2 = undefined,
        userField3 = undefined;
    var orderedIds = undefined;

    Ember['default'].run(function () {
      userField1 = store.createRecord('user-field', {
        fieldType: 'SELECT',
        sortOrder: 1,
        options: []
      });
      userField2 = store.createRecord('user-field', {
        fieldType: 'SELECT',
        sortOrder: 2,
        options: []
      });
      userField3 = store.createRecord('user-field', {
        fieldType: 'SELECT',
        sortOrder: 3,
        options: []
      });

      userFields = [userField1, userField2, userField3];
      userFieldsReordered = [userField3, userField2, userField1];

      orderedIds = userFieldsReordered.map(function (field) {
        return field.get('id');
      });
    });

    var payload = {
      field_ids: orderedIds.toString()
    };

    service.reopen({
      _saveReorder: function _saveReorder(url, options) {
        assert.equal('/api/v1/users/fields/reorder', url);
        assert.deepEqual({
          method: 'PUT',
          contentType: 'application/json',
          data: JSON.stringify(payload),
          headers: {
            'Content-Type': 'application/json',
            'X-Session-ID': sessionId
          }
        }, options);
      }
    });

    Ember['default'].run(function () {
      service.reorder(userFields, userFieldsReordered, sessionId);
    });
  });

  ember_qunit.test('it can toggle enabled state on the record', function (assert) {
    assert.expect(3);

    var service = this.subject();
    var store = this.container.lookup('service:store');

    var model = undefined;

    Ember['default'].run(function () {
      model = store.createRecord('user-field', {
        fieldType: 'SELECT',
        sortOrder: 1,
        options: []
      });
    });

    model.reopen({
      save: function save() {
        return new Ember['default'].RSVP.Promise(function (resolve) {
          // we need to check that save is called once
          assert.equal(true, true);
          return resolve();
        });
      }
    });

    assert.equal(true, model.get('isEnabled'));

    Ember['default'].run(function () {
      service.toggleEnabled(model);
    });

    assert.equal(false, model.get('isEnabled'));
  });

});
define('frontend-cp/tests/unit/services/route-state-test', ['frontend-cp/tests/helpers/qunit', 'frontend-cp/tests/fixtures/router/mock-router', 'frontend-cp/tests/fixtures/location/mock-location'], function (qunit, MockRouter, MockLocation) {

  'use strict';

  qunit.moduleFor('service:route-state', {
    beforeEach: function beforeEach() {
      this.container.register('router:main', MockRouter['default'].create(), { instantiate: false });
    }
  });

  qunit.test('it exists', function (assert) {
    assert.expect(1);

    var service = this.subject();

    assert.ok(service);
  });

  qunit.test('it gets the history API state', function (assert) {
    assert.expect(1);

    var location = createMockLocation({
      rootUrl: '/root/',
      path: '/initial',
      state: {
        initial: true
      }
    });
    this.container.lookup('router:main').set('location', location);

    var service = this.subject();

    assert.deepEqual(service.getState(), { path: '/root/initial', initial: true });
  });

  qunit.test('it extends the history API state', function (assert) {
    assert.expect(6);

    var location = createMockLocation({
      rootUrl: '/root/',
      path: '/initial'
    });
    this.container.lookup('router:main').set('location', location);

    var service = this.subject();

    assert.equal(location.get('history').length, 1);
    assert.deepEqual(service.getState(), { path: '/root/initial' });

    service.updateState({ update1: true, update2: true });

    assert.equal(location.get('history').length, 1);
    assert.deepEqual(service.getState(), { path: '/root/initial', update1: true, update2: true });

    service.updateState({ update3: true, update4: true });

    assert.equal(location.get('history').length, 1);
    assert.deepEqual(service.getState(), { path: '/root/initial', update1: true, update2: true, update3: true, update4: true });
  });

  qunit.test('it transitions to a history API state', function (assert) {
    assert.expect(6);

    var location = createMockLocation({
      rootUrl: '/root/',
      path: '/initial'
    });
    this.container.lookup('router:main').set('location', location);

    var done = assert.async();

    var service = this.subject();

    assert.equal(location.get('history').length, 1);
    assert.deepEqual(service.getState(), { path: '/root/initial' });

    service.transitionToState('/state', { state: true }).then(function () {
      assert.equal(location.get('history').length, 2);
      assert.deepEqual(service.getState(), { path: '/root/state', state: true });

      service.transitionToState('/stateless').then(function () {
        assert.equal(location.get('history').length, 3);
        assert.deepEqual(service.getState(), { path: '/root/stateless' });
        done();
      });
    });
  });

  function createMockLocation() {
    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var _ref$rootUrl = _ref.rootUrl;
    var rootUrl = _ref$rootUrl === undefined ? '/' : _ref$rootUrl;
    var _ref$path = _ref.path;
    var path = _ref$path === undefined ? '/' : _ref$path;
    var _ref$state = _ref.state;
    var state = _ref$state === undefined ? null : _ref$state;

    var location = MockLocation['default'].create({
      rootURL: rootUrl
    });

    location.replaceState(location.formatURL(path));

    if (state) {
      var _history = location.get('history');
      var currentState = location.getState();
      var updatedState = Object.assign({}, currentState, state);
      _history.replaceState(updatedState, null, currentState.path);
    }

    return location;
  }

});
define('frontend-cp/tests/unit/services/suggestion/exclusion-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('service:suggestion/exclusion', 'Unit | Service | suggestion/exclusion');

  ember_qunit.test('it excludes same records when they are strings', function (assert) {
    assert.expect(1);

    var service = this.subject();

    var data = [Ember['default'].Object.create({ name: 'maintenance' }), Ember['default'].Object.create({ name: 'rejected' }), Ember['default'].Object.create({ name: 'approved' }), Ember['default'].Object.create({ name: 'hello-kitty' })];
    var exclusions = ['hello-kitty'];

    var excluded = service.exclude(data, exclusions);

    excluded = excluded.map(function (record) {
      return record.get('name');
    });

    assert.deepEqual(excluded, ['maintenance', 'rejected', 'approved']);
  });

  ember_qunit.test('it excludes same records when they are emails', function (assert) {
    assert.expect(1);

    var service = this.subject();

    var data = [Ember['default'].Object.create({ name: 'demo@demo.com' }), Ember['default'].Object.create({ name: 'demo.demo@demo.com' }), Ember['default'].Object.create({ name: 'any.random.email+demo@demo.com' })];
    var exclusions = ['any.random.email+demo@demo.com'];

    var excluded = service.exclude(data, exclusions);

    excluded = excluded.map(function (record) {
      return record.get('name');
    });

    assert.deepEqual(excluded, ['demo@demo.com', 'demo.demo@demo.com']);
  });

  ember_qunit.test('it do not fail if data or exclusions are null or empty', function (assert) {
    assert.expect(3);

    var service = this.subject();

    var data = [Ember['default'].Object.create({ name: 'maintenance' }), Ember['default'].Object.create({ name: 'rejected' }), Ember['default'].Object.create({ name: 'approved' })];

    assert.deepEqual(service.exclude(data, null).map(function (record) {
      return record.get('name');
    }), ['maintenance', 'rejected', 'approved']);

    assert.deepEqual(service.exclude(null, null).map(function (record) {
      return record.get('name');
    }), []);
    assert.deepEqual(service.exclude(null, ['approved']).map(function (record) {
      return record.get('name');
    }), []);
  });

});
define('frontend-cp/tests/unit/services/suggestion/promise-queue-test', ['ember', 'ember-qunit'], function (Ember, ember_qunit) {

  'use strict';

  ember_qunit.moduleFor('service:suggestion/promise-queue', 'Unit | Service | suggestion/promise queue');

  ember_qunit.test('it stores promises by name and term', function (assert) {
    var service = this.subject();
    service.queue = {};

    var promise = new Ember['default'].RSVP.Promise(function (resolve, reject) {
      resolve();
    });

    var nameOne = 'testName';
    var nameTwo = 'anotherName';

    service.push(nameOne, 'a', promise);
    service.push(nameOne, 'ab', promise);
    service.push(nameOne, 'abc', promise);

    service.push(nameTwo, 'a', promise);
    service.push(nameTwo, 'ab', promise);

    assert.equal(3, service.queue[nameOne].length);
    assert.equal(2, service.queue[nameTwo].length);
  });

  ember_qunit.test('it validates if promise is discarded (not the last one)', function (assert) {
    var service = this.subject();
    service.queue = {};

    var promise = new Ember['default'].RSVP.Promise(function (resolve, reject) {
      resolve();
    });

    service.push('testName', 'a', promise);
    service.push('testName', 'ab', promise);
    service.push('testName', 'abc', promise);

    assert.equal(true, service.isDiscarded('testName', 'a'));
    assert.equal(true, service.isDiscarded('testName', 'ab'));
    assert.equal(false, service.isDiscarded('testName', 'abc'));
  });

  ember_qunit.test('it flushes all promise queue by name', function (assert) {
    var service = this.subject();
    service.queue = {};

    var promise = new Ember['default'].RSVP.Promise(function (resolve, reject) {
      resolve();
    });

    var nameOne = 'testName';
    var nameTwo = 'anotherName';

    service.push(nameOne, 'a', promise);
    service.push(nameOne, 'ab', promise);
    service.push(nameOne, 'abc', promise);

    service.push(nameTwo, 'a', promise);
    service.push(nameTwo, 'ab', promise);

    assert.equal(3, service.queue[nameOne].length);
    assert.equal(2, service.queue[nameTwo].length);

    service.flush(nameOne);

    assert.equal(undefined, service.queue[nameOne]);
    assert.equal(2, service.queue[nameTwo].length);

    service.flush(nameTwo);
    assert.equal(undefined, service.queue[nameOne]);
    assert.equal(undefined, service.queue[nameTwo]);

    assert.deepEqual({}, service.queue);
  });

});
define('frontend-cp/tests/unit/services/tabs-test', ['frontend-cp/tests/helpers/qunit', 'frontend-cp/tests/fixtures/services/mock-local-store'], function (qunit, MockLocalStoreService) {

  'use strict';

  qunit.moduleFor('service:tabs', {
    beforeEach: function beforeEach() {
      this.container.register('service:localStore', MockLocalStoreService['default']);
    }
  });

  qunit.test('it exists', function (assert) {
    assert.expect(1);

    var service = this.subject();

    assert.ok(service);
  });

  qunit.test('it creates new tabs', function (assert) {
    assert.expect(2);

    var service = this.subject();

    var defaultTab = service.createTab();

    assert.propertiesEqual(defaultTab, {
      url: null,
      baseUrl: null,
      label: null,
      selected: false,
      state: null
    });

    var tab = service.createTab({
      url: '/cases/1/user',
      baseUrl: '/cases/1',
      label: 'Case 1'
    });

    assert.propertiesEqual(tab, {
      url: '/cases/1/user',
      baseUrl: '/cases/1',
      label: 'Case 1',
      selected: false,
      state: null
    });
  });

  qunit.test('it loads tabs from session storage', function (assert) {
    assert.expect(5);

    var localStoreService = MockLocalStoreService['default'].create();
    this.container.register('service:localStore', localStoreService, { instantiate: false });

    var service = this.subject();

    service.loadTabsFromStorage();
    assert.deepEqual(service.get('tabModels'), []);

    localStoreService.setItem('tabs', [{
      baseUrl: '/cases/1',
      url: '/cases/1/user',
      label: 'Case 1'
    }, {
      baseUrl: '/cases/2',
      url: '/cases/2/user',
      label: 'Case 2'
    }, {
      baseUrl: '/cases/3',
      url: '/cases/3/user',
      label: 'Case 3'
    }]);

    service.loadTabsFromStorage();
    var tabs = service.get('tabModels');
    var expectedTabs = [{
      baseUrl: '/cases/1',
      url: '/cases/1/user',
      label: 'Case 1'
    }, {
      baseUrl: '/cases/2',
      url: '/cases/2/user',
      label: 'Case 2'
    }, {
      baseUrl: '/cases/3',
      url: '/cases/3/user',
      label: 'Case 3'
    }];
    assert.equal(tabs.length, expectedTabs.length);
    expectedTabs.forEach(function (expected, index) {
      var tab = tabs[index];
      assert.propertiesEqual(tab, expected);
    });
  });

  qunit.test('it saves tabs to session storage', function (assert) {
    assert.expect(1);

    this.container.register('service:localStore', MockLocalStoreService['default']);

    var service = this.subject();

    var localStoreService = MockLocalStoreService['default'].create();
    this.container.register('service:localStore', localStoreService, { instantiate: false });

    service.saveTabsToStorage([service.createTab({
      baseUrl: '/cases/1',
      url: '/cases/1/user',
      label: 'Case 1',
      selected: true,
      state: {}
    }), service.createTab({
      baseUrl: '/cases/2',
      url: '/cases/2/user',
      label: 'Case 2',
      selected: false,
      state: {}
    }), service.createTab({
      baseUrl: '/cases/3',
      url: '/cases/3/user',
      label: 'Case 3',
      selected: false,
      state: {}
    })]);

    assert.deepEqual(localStoreService.getItem('tabs'), [{
      baseUrl: '/cases/1',
      url: '/cases/1/user',
      label: 'Case 1'
    }, {
      baseUrl: '/cases/2',
      url: '/cases/2/user',
      label: 'Case 2'
    }, {
      baseUrl: '/cases/3',
      url: '/cases/3/user',
      label: 'Case 3'
    }]);
  });

});
define('frontend-cp/tests/unit/services/url-test', ['frontend-cp/tests/helpers/qunit'], function (qunit) {

  'use strict';

  qunit.moduleFor('service:url', {
    // Specify the other units that are required for this test.
    // needs: ['service:foo']
  });

  // Replace this with your real tests.
  qunit.test('it exists', function (assert) {
    var service = this.subject();
    assert.ok(service);
  });

});
define('frontend-cp/transforms/array', ['exports', 'ember-data'], function (exports, DS) {

  'use strict';

  exports['default'] = DS['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized;
    },

    serialize: function serialize(deserialized) {
      return deserialized;
    }
  });

});
define('frontend-cp/transforms/fragment-array', ['exports'], function (exports) {

	'use strict';

	exports['default'] = DS.FragmentArrayTransform;

});
define('frontend-cp/transforms/fragment', ['exports'], function (exports) {

	'use strict';

	exports['default'] = DS.FragmentTransform;

});
define('frontend-cp/utils/format-validations', ['exports'], function (exports) {

  'use strict';

  exports.validateEmailFormat = validateEmailFormat;
  exports.validateTwitterHandleFormat = validateTwitterHandleFormat;

  var EMAIL_REGEX = /^[^@]+@([^@\.]+\.)+[^@\.]{2,}$/;
  var TWITTER_REGEX = /(^|[^@\w])@(\w{1,15})\b$/;

  function validateEmailFormat(email) {
    return EMAIL_REGEX.test(email);
  }

  function validateTwitterHandleFormat(email) {
    return TWITTER_REGEX.test(email);
  }

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('frontend-cp/config/environment', ['ember'], function(Ember) {
  var prefix = 'frontend-cp';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("frontend-cp/tests/test-helper");
} else {
  require("frontend-cp/app")["default"].create({"PUSHER_OPTIONS":{"logEvents":false,"encrypted":true,"key":"e5ba08ab0174c8e64c81","authEndpoint":"/api/v1/realtime/auth","wsHost":"ws.realtime.kayako.com","httpHost":"sockjs.realtime.kayako.com"},"name":"frontend-cp","version":"0.0.0+dfb171ed"});
}

/* jshint ignore:end */
//# sourceMappingURL=frontend-cp.map