"use strict";
/* jshint ignore:start */

/* jshint ignore:end */

define('frontend-cp/acceptance-tests/sinon', ['exports', 'ember-sinon/acceptance-tests/sinon'], function (exports, _emberSinonAcceptanceTestsSinon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberSinonAcceptanceTestsSinon['default'];
    }
  });
});
define('frontend-cp/adapters/access-log', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'accesslogs';
    }
  });
});
define('frontend-cp/adapters/activity', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, _ember, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query, modelName) {
      if (query.parent) {
        var id = query.parent.id;
        var pluralParentType = _ember['default'].String.pluralize(query.parent.constructor.modelName);
        var url = this._super.apply(this, arguments);
        Reflect.deleteProperty(query, 'parent');
        return url.replace('/activities', '/' + pluralParentType + '/' + id + '/activities');
      }
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/adapters/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, _ember, _emberData, _npmLodash) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  exports['default'] = _emberData['default'].RESTAdapter.extend({
    namespace: 'api/v1',
    session: service(),
    errorHandler: service(),
    notificationHandler: service('error-handler/notification-strategy'),

    // CPs
    headers: computed('session.sessionId', function () {
      var headers = {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };
      var sessionId = this.get('session.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    handleResponse: function handleResponse(status, headers, payload) {
      if (this.isSuccess(status, headers, payload)) {
        return payload;
      } else {
        var errors = this.normalizeErrorResponse(status, headers, payload);
        if (this.isInvalid(status, headers, payload)) {
          return new _emberData['default'].InvalidError(errors);
        } else {
          return new _emberData['default'].AdapterError(errors);
        }
      }
    },

    normalizeErrorResponse: function normalizeErrorResponse(status, headers) {
      var payload = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var errors = payload.errors || [];

      // Sneaks the auth token into auth-related errors
      if (payload.auth_token) {
        errors.filter(function (e) {
          return ['CREDENTIAL_EXPIRED', 'OTP_EXPECTED'].includes(e.code);
        }).forEach(function (error) {
          return error.authToken = payload.auth_token;
        });
      }

      // Since we can only return array, we have to merge notifications
      // into errors and assign NOTIFICATION code to tell them apart
      var notifications = payload.notifications || [];
      notifications.forEach(function (n) {
        n.code = 'NOTIFICATION';
      });

      return errors.concat(notifications);
    },

    handleErrors: function handleErrors(promise) {
      var _this = this;

      return promise.then(function (data) {
        _this.get('notificationHandler').processAll(data.notifications);
        return data;
      }, function (e) {
        return _this.get('errorHandler').process(e);
      });
    },

    isInvalid: function isInvalid(status, header, payload) {
      var isValidationError = function isValidationError(responseError) {
        return ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'].includes(responseError.code);
      };

      var hasValidationErrors = function hasValidationErrors(responseErrors) {
        return _npmLodash['default'].some(responseErrors, isValidationError);
      };

      return status === 422 || hasValidationErrors(payload.errors);
    },

    ajax: function ajax() {
      return this.handleErrors(this._super.apply(this, arguments));
    },

    shouldReloadAll: function shouldReloadAll() {
      return true;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    }
  });
});
define('frontend-cp/adapters/business-hour', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'businesshours';
    }
  });
});
define('frontend-cp/adapters/businesshour-holiday', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'holidays';
    }
  });
});
define('frontend-cp/adapters/case-field-type', ['exports', 'frontend-cp/adapters/static-model'], function (exports, _frontendCpAdaptersStaticModel) {
  exports['default'] = _frontendCpAdaptersStaticModel['default'].extend({});
});
define('frontend-cp/adapters/case-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/fields';
    }
  });
});
define('frontend-cp/adapters/case-form', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/forms';
    }
  });
});
define('frontend-cp/adapters/case-message', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'messages';
    }
  });
});
define('frontend-cp/adapters/case-note', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    }
  });
});
define('frontend-cp/adapters/case-priority', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/priorities';
    }
  });
});
define('frontend-cp/adapters/case-reply', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'reply';
    },

    urlForCreateRecord: function urlForCreateRecord(modelType, snapshot) {
      var pathForType = this.pathForType();
      var url = this._super.apply(this, arguments);
      return url.replace(pathForType, 'cases/' + snapshot.record.get('case.id') + '/' + pathForType);
    }
  });
});
define('frontend-cp/adapters/case-status', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/statuses';
    }
  });
});
define('frontend-cp/adapters/case-type', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/types';
    }
  });
});
define('frontend-cp/adapters/case', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query, modelName) {
      if (query.parent) {
        var id = query.parent.id;
        var url = this._super.apply(this, arguments);
        Reflect.deleteProperty(query, 'parent');
        return url.replace('/cases', '/views/' + id + '/cases');
      }
      return this._super.apply(this, arguments);
    },
    /*
     * Pusher will keep this record up to date
     */
    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    }
  });
});
define('frontend-cp/adapters/channel', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/channels';
    }
  });
});
define('frontend-cp/adapters/column', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/columns';
    }
  });
});
define('frontend-cp/adapters/credential', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    headers: {
      Accept: 'application/json',
      'X-Options': 'flat',
      'X-Requested-With': 'XMLHttpRequest'
    }
  });
});
define('frontend-cp/adapters/definition', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/definition';
    }
  });
});
define('frontend-cp/adapters/event', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, _ember, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query, modelName) {
      if (query.parent) {
        var id = query.parent.id;
        var pluralParentType = _ember['default'].String.pluralize(query.parent.constructor.modelName);
        var url = this._super.apply(this, arguments);
        Reflect.deleteProperty(query, 'parent');
        return url.replace('/events', '/' + pluralParentType + '/' + id + '/events');
      }
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/adapters/facebook-account', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'facebook/accounts';
    }
  });
});
define('frontend-cp/adapters/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].LSAdapter.extend({
    namespace: 'novo'
  });
});
define('frontend-cp/adapters/identity-autocomplete-email', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'autocomplete/emails';
    }
  });
});
define('frontend-cp/adapters/identity-domain', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/domains';
    }
  });
});
define('frontend-cp/adapters/identity-email', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/emails';
    }
  });
});
define('frontend-cp/adapters/identity-facebook', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/facebook';
    }
  });
});
define('frontend-cp/adapters/identity-phone', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/phones';
    }
  });
});
define('frontend-cp/adapters/identity-twitter', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'identities/twitter';
    }
  });
});
define('frontend-cp/adapters/intl', ['exports', 'ember-intl/adapters/-intl-adapter', 'frontend-cp/locales/new-locale'], function (exports, _emberIntlAdaptersIntlAdapter, _frontendCpLocalesNewLocale) {
  exports['default'] = _emberIntlAdaptersIntlAdapter['default'].extend({
    locales: {},

    findLanguage: function findLanguage(locale) {
      if (locale instanceof _frontendCpLocalesNewLocale['default']) {
        return locale;
      }

      if (typeof locale === 'string') {
        if (!this.locales[locale]) {
          this.locales[locale] = new (_frontendCpLocalesNewLocale['default'].extend({
            locale: locale
          }))();
        }
        return this.locales[locale];
      }
    }
  });
});
define('frontend-cp/adapters/locale-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'locale/fields';
    }
  });
});
define('frontend-cp/adapters/locale', ['exports', 'frontend-cp/adapters/application', 'ember'], function (exports, _frontendCpAdaptersApplication, _ember) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    headers: _ember['default'].computed('sessionService.sessionId', function () {
      return {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };
    })
  });
});
define('frontend-cp/adapters/macro', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/macros';
    }
  });
});
define('frontend-cp/adapters/metric', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/metrics';
    }
  });
});
define('frontend-cp/adapters/oauth-link', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/account/link.json';
    }
  });
});
define('frontend-cp/adapters/organization-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'organizations/fields';
    }
  });
});
define('frontend-cp/adapters/organization-note', ['exports', 'frontend-cp/adapters/application', 'ember'], function (exports, _frontendCpAdaptersApplication, _ember) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    },

    urlForQuery: function urlForQuery(query, modelName) {
      var parent = query.parent;
      if (parent) {
        Reflect.deleteProperty(query, 'parent');
        var id = parent.id;
        var url = this._super.apply(this, arguments);
        var pathForType = this.pathForType();
        return url.replace(pathForType, _ember['default'].String.pluralize(parent._internalModel.modelName) + '/' + id + '/' + pathForType);
      }
      return this._super.apply(this, arguments);
    },

    urlForCreateRecord: function urlForCreateRecord(modelType, snapshot) {
      var pathForType = this.pathForType();
      var url = this._super.apply(this, arguments);
      return url.replace(pathForType, 'organizations/' + snapshot.record.get('organization.id') + '/' + pathForType);
    },

    query: function query(store, type, _query) {
      var organization = _query.parent;

      return this._super.apply(this, arguments).then(function (payload) {
        payload.data.forEach(function (entry) {
          entry.parent = {
            id: organization.get('id'),
            type: 'organization'
          };
        });

        // Need to unload posts for the current organization when we request new organization notes
        // because currently the API gives us notes, and we don't have the same API as in
        // case posts to draw the Profile Timeline. To reuse the current Timeline code
        // we have to push a "post" model. So when we request organization-notes, we
        // actually create a post model and we don't push the organization-note into the store.
        // @see serializers/organization-note
        store.peekAll('post').forEach(function (post) {
          if (parseInt(organization.get('id')) === parseInt(post.get('original.parent.id'))) {
            store.unloadRecord(post);
          }
        });

        return payload;
      });
    }
  });
});
define('frontend-cp/adapters/plan', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'plan';
    }
  });
});
define('frontend-cp/adapters/post', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, _ember, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query, modelName) {
      if (query.parent) {
        var id = query.parent.id;
        var url = this._super.apply(this, arguments);
        Reflect.deleteProperty(query, 'parent');
        return url.replace('/posts', '/cases/' + id + '/posts');
      }
      return this._super.apply(this, arguments);
    },

    urlForFindRecord: function urlForFindRecord(id, modelName, snapshot) {
      var parent = snapshot.belongsTo('parent');
      var sup = this._super.apply(this, arguments);
      return sup.replace('posts', _ember['default'].String.pluralize(parent.type.modelName) + '/' + parent.id + '/posts');
    }
  });
});
define('frontend-cp/adapters/rating', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'cases/ratings/recent';
    }
  });
});
define('frontend-cp/adapters/session', ['exports', 'ember', 'frontend-cp/adapters/application'], function (exports, _ember, _frontendCpAdaptersApplication) {

  function b64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, p1) {
      return String.fromCharCode('0x' + p1);
    }));
  }

  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    // CPs
    headers: _ember['default'].computed('session.{email,password,sessionId}', function () {
      var sessionId = this.get('session.sessionId');
      var email = this.get('session.email');
      var password = this.get('session.password');
      var authorizationHeader = 'Basic ' + b64EncodeUnicode(email + ':' + password);
      var withPassword = email && password;

      var headers = {
        Accept: 'application/json',
        'X-Options': 'flat',
        'X-Requested-With': 'XMLHttpRequest'
      };

      if (withPassword) {
        headers.Authorization = authorizationHeader;
      } else {
        headers['X-Session-ID'] = sessionId;
      }

      return headers;
    }),

    // Methods
    pathForType: function pathForType() {
      return 'session';
    }
  });
});
define('frontend-cp/adapters/static-model', ['exports', 'ember-data', 'npm:lodash'], function (exports, _emberData, _npmLodash) {
  /*
   * Static model adapter
   *
   * Records will never be loaded or persisted the backend
   * Initialize any models in initializers
   * See case-field-type for implementation example
   */

  exports['default'] = _emberData['default'].Adapter.extend({
    findAll: function findAll(store, typeClass) {
      return store.peekAll(typeClass);
    },

    find: function find(store, typeClass, id) {
      var records = this.findAll(store, typeClass);

      var matchingRecords = _npmLodash['default'].select(records, function (record) {
        return record.id === id;
      });

      if (matchingRecords.length) {
        return matchingRecords.firstObject;
      }
    }
  });
});
define('frontend-cp/adapters/tag', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query, modelName) {
      var urlParts = [this.urlPrefix()];
      if (query.caseId) {
        urlParts.push('cases/' + query.caseId + '/tags');
        Reflect.deleteProperty(query, 'caseId');
      } else if (query.userId) {
        urlParts.push('users/' + query.userId + '/tags');
        Reflect.deleteProperty(query, 'userId');
      } else if (query.organizationId) {
        urlParts.push('organizations/' + query.organizationId + '/tags');
        Reflect.deleteProperty(query, 'organizationId');
      } else {
        urlParts.push('autocomplete/tags');
      }
      return urlParts.join('/');
    }
  });
});
define('frontend-cp/adapters/twitter-account-callback', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/account/callback';
    }
  });
});
define('frontend-cp/adapters/twitter-account', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'twitter/accounts';
    }
  });
});
define('frontend-cp/adapters/user-field', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'users/fields';
    }
  });
});
define('frontend-cp/adapters/user-note', ['exports', 'frontend-cp/adapters/application', 'ember'], function (exports, _frontendCpAdaptersApplication, _ember) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'notes';
    },

    urlForQuery: function urlForQuery(query, modelName) {
      var parent = query.parent;
      if (parent) {
        Reflect.deleteProperty(query, 'parent');
        var id = parent.id;
        var url = this._super.apply(this, arguments);
        var pathForType = this.pathForType();
        return url.replace(pathForType, _ember['default'].String.pluralize(parent._internalModel.modelName) + '/' + id + '/' + pathForType);
      }
      return this._super.apply(this, arguments);
    },

    urlForCreateRecord: function urlForCreateRecord(modelType, snapshot) {
      var pathForType = this.pathForType();
      var url = this._super.apply(this, arguments);
      return url.replace(pathForType, 'users/' + snapshot.record.get('user.id') + '/' + pathForType);
    },

    query: function query(store, type, _query) {
      var user = _query.parent;
      return this._super.apply(this, arguments).then(function (payload) {
        payload.data.forEach(function (entry) {
          entry.parent = { id: user.get('id'), type: 'user' };
        });

        // Need to unload posts for current user when we request new user notes
        // because currently API gives us notes, and don't have same API as in
        // case posts to draw Profile Timeline. To reuse current Timeline code
        // we have to push "post" model. So when we request user-notes, we
        // actually create post model and don't push user-note into the store.
        // @see serializers/user-note
        store.peekAll('post').forEach(function (post) {
          if (parseInt(user.get('id')) === parseInt(post.get('original.parent.id'))) {
            store.unloadRecord(post);
          }
        });

        return payload;
      });
    }
  });
});
define('frontend-cp/adapters/user', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    urlForQuery: function urlForQuery(query) {
      return query.name ? this.urlPrefix() + '/autocomplete/users' : this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/adapters/view-count', ['exports', 'frontend-cp/adapters/application'], function (exports, _frontendCpAdaptersApplication) {
  exports['default'] = _frontendCpAdaptersApplication['default'].extend({
    pathForType: function pathForType() {
      return 'views/counts';
    }
  });
});
define('frontend-cp/app', ['exports', 'ember', 'frontend-cp/resolver', 'ember/load-initializers', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpResolver, _emberLoadInitializers, _frontendCpConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _frontendCpConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _frontendCpConfigEnvironment['default'].podModulePrefix,
    Resolver: _frontendCpResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _frontendCpConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('frontend-cp/application/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    urlService: _ember['default'].inject.service('url'),
    notificationService: _ember['default'].inject.service('notification'),

    currentPathDidChange: _ember['default'].observer('currentPath', function () {
      this.get('urlService').set('currentPath', this.get('currentPath'));
    }),

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: _ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    actions: {
      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });
});
define('frontend-cp/application/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    session: _ember['default'].inject.service(),
    locale: _ember['default'].inject.service(),
    featureFlags: _ember['default'].inject.service('feature-flags'),
    errorHandler: _ember['default'].inject.service('error-handler'),

    beforeModel: function beforeModel() {
      var _this = this;

      // we suppress errors before locale strings are loaded
      this.get('errorHandler').set('enabled', false);

      return new _ember['default'].RSVP.Promise(function (resolve) {
        var logout = function logout() {
          _this.get('session').logout();
          resolve();
        };
        _this.get('session').getSession().then(function () {
          _this._finalizeSetup(resolve, logout);
        }, function () {
          _this._finalizeSetup(logout, logout);
        });
      });
    },

    _finalizeSetup: function _finalizeSetup(success, failure) {
      var _this2 = this;

      _ember['default'].RSVP.all([this.get('featureFlags').setup(), this.get('locale').setup()]).then(function () {
        _this2.get('errorHandler').set('enabled', true);
        return success();
      }, function () {
        _this2.get('errorHandler').set('enabled', true);
        return failure();
      });
    }
  });
});
define("frontend-cp/application/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/application/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-toast", [], ["type", ["subexpr", "@mut", [["get", "notification.type", ["loc", [null, [6, 9], [6, 26]]]]], [], []], "dismissable", ["subexpr", "@mut", [["get", "notification.dismissable", ["loc", [null, [7, 16], [7, 40]]]]], [], []], "autodismiss", ["subexpr", "@mut", [["get", "notification.autodismiss", ["loc", [null, [8, 16], [8, 40]]]]], [], []], "title", ["subexpr", "@mut", [["get", "notification.title", ["loc", [null, [9, 10], [9, 28]]]]], [], []], "body", ["subexpr", "@mut", [["get", "notification.body", ["loc", [null, [10, 9], [10, 26]]]]], [], []], "close", ["subexpr", "action", ["onNotificationClosed", ["get", "notification", ["loc", [null, [11, 41], [11, 53]]]]], [], ["loc", [null, [11, 10], [11, 54]]]]], ["loc", [null, [5, 4], [12, 6]]]]],
        locals: ["notification"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/application/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "application__notifications");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]], ["inline", "outlet", ["modals"], [], ["loc", [null, [2, 0], [2, 19]]]], ["block", "each", [["get", "notifications", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [13, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/blueprints/page-object-component', ['exports', 'ember-cli-page-object/blueprints/page-object-component'], function (exports, _emberCliPageObjectBlueprintsPageObjectComponent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObjectComponent['default'];
    }
  });
});
define('frontend-cp/blueprints/page-object-helper', ['exports', 'ember-cli-page-object/blueprints/page-object-helper'], function (exports, _emberCliPageObjectBlueprintsPageObjectHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObjectHelper['default'];
    }
  });
});
define('frontend-cp/blueprints/page-object', ['exports', 'ember-cli-page-object/blueprints/page-object'], function (exports, _emberCliPageObjectBlueprintsPageObject) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliPageObjectBlueprintsPageObject['default'];
    }
  });
});
define("frontend-cp/cldrs/en-001", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-001", "parentLocale": "en" };
});
define("frontend-cp/cldrs/en-gb", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-GB", "parentLocale": "en-001" };
});
define("frontend-cp/cldrs/en-us", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en-US", "parentLocale": "en" };
});
define("frontend-cp/cldrs/en", ["exports"], function (exports) {
  /*jslint eqeq: true*/
  exports["default"] = { "locale": "en", "pluralRuleFunction": function pluralRuleFunction(n, ord) {
      var s = String(n).split("."),
          v0 = !s[1],
          t0 = Number(s[0]) == n,
          n10 = t0 && s[0].slice(-1),
          n100 = t0 && s[0].slice(-2);if (ord) return n10 == 1 && n100 != 11 ? "one" : n10 == 2 && n100 != 12 ? "two" : n10 == 3 && n100 != 13 ? "few" : "other";return n == 1 && v0 ? "one" : "other";
    }, "fields": { "year": { "displayName": "Year", "relative": { "0": "this year", "1": "next year", "-1": "last year" }, "relativeTime": { "future": { "one": "in {0} year", "other": "in {0} years" }, "past": { "one": "{0} year ago", "other": "{0} years ago" } } }, "month": { "displayName": "Month", "relative": { "0": "this month", "1": "next month", "-1": "last month" }, "relativeTime": { "future": { "one": "in {0} month", "other": "in {0} months" }, "past": { "one": "{0} month ago", "other": "{0} months ago" } } }, "day": { "displayName": "Day", "relative": { "0": "today", "1": "tomorrow", "-1": "yesterday" }, "relativeTime": { "future": { "one": "in {0} day", "other": "in {0} days" }, "past": { "one": "{0} day ago", "other": "{0} days ago" } } }, "hour": { "displayName": "Hour", "relativeTime": { "future": { "one": "in {0} hour", "other": "in {0} hours" }, "past": { "one": "{0} hour ago", "other": "{0} hours ago" } } }, "minute": { "displayName": "Minute", "relativeTime": { "future": { "one": "in {0} minute", "other": "in {0} minutes" }, "past": { "one": "{0} minute ago", "other": "{0} minutes ago" } } }, "second": { "displayName": "Second", "relative": { "0": "now" }, "relativeTime": { "future": { "one": "in {0} second", "other": "in {0} seconds" }, "past": { "one": "{0} second ago", "other": "{0} seconds ago" } } } } };
});
define('frontend-cp/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'frontend-cp/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _frontendCpConfigEnvironment) {

  var name = _frontendCpConfigEnvironment['default'].APP.name;
  var version = _frontendCpConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('frontend-cp/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _emberBasicDropdownComponentsBasicDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdown['default'];
    }
  });
});
define('frontend-cp/components/copy-button', ['exports', 'ember-cli-clipboard/components/copy-button'], function (exports, _emberCliClipboardComponentsCopyButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliClipboardComponentsCopyButton['default'];
    }
  });
});
define('frontend-cp/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('frontend-cp/components/ko-admin/businesshours/edit/component', ['exports', 'ember', 'npm:lodash', 'moment'], function (exports, _ember, _npmLodash, _moment) {

  // Weekday codes that match with model.zones keys in order matching moment.weekdays()
  var localeWeekdays = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
  _npmLodash['default'].times(_moment['default'].localeData().firstDayOfWeek(), function () {
    return localeWeekdays.push(localeWeekdays.shift());
  });

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    model: null,

    // Services
    intl: _ember['default'].inject.service(),
    store: _ember['default'].inject.service(),
    errorHandler: _ember['default'].inject.service('error-handler'),

    // State
    newHoliday: null,

    titles: _ember['default'].computed('model.zones', function () {
      var weekdays = _moment['default'].weekdays();
      _npmLodash['default'].times(_moment['default'].localeData().firstDayOfWeek(), function () {
        return weekdays.push(weekdays.shift());
      });
      return weekdays;
    }).readOnly(),

    businessHourGrid: _ember['default'].computed('model', function () {
      var _this = this;

      return localeWeekdays.map(function (weekday) {
        return _npmLodash['default'].range(24).map(function (col) {
          return _this.get('model.zones')[weekday].contains(col);
        });
      });
    }).readOnly(),

    hoursLegend: _ember['default'].computed(function () {
      return _npmLodash['default'].range(24).map(function (hour) {
        var label = hour + ':00';
        return hour < 10 ? '0' + label : label;
      });
    }),

    actions: {
      save: function save() {
        var _this2 = this;

        return this.get('model').save().then(function () {
          var duplicated = _this2.get('model.holidays').filterBy('id', null);
          duplicated.forEach(function (holiday) {
            return holiday.destroy();
          });
        });
      },

      businessHourRangeSelect: function businessHourRangeSelect(grid) {
        var zones = {};
        localeWeekdays.forEach(function (weekday, index) {
          zones[weekday] = grid[index].map(function (col, index) {
            return col ? index : col;
          }).filter(function (col) {
            return col !== false;
          });
        });
        this.set('model.zones', zones);
      },

      showHolidayForm: function showHolidayForm() {
        this.set('newHoliday', this.get('store').createRecord('businesshour-holiday'));
      },

      cancelAddingHoliday: function cancelAddingHoliday() {
        this.set('newHoliday', null);
      },

      deleteHoliday: function deleteHoliday(holiday) {
        this.get('model.holidays').removeObject(holiday);
      },

      addHoliday: function addHoliday(holiday) {
        this.get('model.holidays').pushObject(holiday);
        this.set('newHoliday', null);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/businesshours/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 69
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.businesshours.label.title"], [], ["loc", [null, [13, 30], [13, 69]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 93]]]], ["inline", "input", [], ["class", "input input-text", "name", "title", "type", "text", "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [17, 14], [17, 25]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [18, 17], [18, 29]]]]], [], []]], ["loc", [null, [14, 6], [18, 31]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "model.errors.title", ["loc", [null, [19, 36], [19, 54]]]]], [], []]], ["loc", [null, [19, 6], [19, 56]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [12, 4], [20, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 6
                  },
                  "end": {
                    "line": 36,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-admin_businesshours__grid-title t-bold");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["content", "title", ["loc", [null, [34, 10], [34, 19]]]]],
              locals: ["title"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "titles", ["loc", [null, [32, 14], [32, 20]]]]], [], 0, null, ["loc", [null, [32, 6], [36, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h5");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["admin.businesshours"], [], ["loc", [null, [24, 8], [24, 35]]]], ["inline", "t", ["admin.businesshours.info"], [], ["loc", [null, [25, 7], [25, 39]]]], ["block", "ko-grid-picker", [], ["initialGrid", ["subexpr", "@mut", [["get", "businessHourGrid", ["loc", [null, [28, 18], [28, 34]]]]], [], []], "legend", ["subexpr", "@mut", [["get", "hoursLegend", ["loc", [null, [29, 13], [29, 24]]]]], [], []], "onRangeSelect", ["subexpr", "action", ["businessHourRangeSelect"], [], ["loc", [null, [30, 20], [30, 54]]]]], 0, null, ["loc", [null, [27, 4], [37, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 45,
                    "column": 6
                  },
                  "end": {
                    "line": 49,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-admin/holidays/row", [], ["model", ["subexpr", "@mut", [["get", "holiday", ["loc", [null, [47, 16], [47, 23]]]]], [], []], "onHolidayDelete", ["subexpr", "action", ["deleteHoliday"], [], ["loc", [null, [48, 26], [48, 50]]]]], ["loc", [null, [46, 8], [48, 52]]]]],
              locals: ["holiday"],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 52,
                        "column": 8
                      },
                      "end": {
                        "line": 57,
                        "column": 8
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("          ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-admin/holidays/edit", [], ["model", ["subexpr", "@mut", [["get", "newHoliday", ["loc", [null, [54, 18], [54, 28]]]]], [], []], "onSave", ["subexpr", "action", ["addHoliday"], [], ["loc", [null, [55, 19], [55, 40]]]], "onCancel", ["subexpr", "action", ["cancelAddingHoliday"], [], ["loc", [null, [56, 21], [56, 51]]]]], ["loc", [null, [53, 10], [56, 53]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 51,
                      "column": 6
                    },
                    "end": {
                      "line": 58,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [52, 8], [57, 32]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 6
                  },
                  "end": {
                    "line": 59,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [51, 6], [58, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 4
                },
                "end": {
                  "line": 60,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "model.holidays", ["loc", [null, [45, 14], [45, 28]]]]], [], 0, null, ["loc", [null, [45, 6], [49, 15]]]], ["block", "if", [["get", "newHoliday", ["loc", [null, [50, 12], [50, 22]]]]], [], 1, null, ["loc", [null, [50, 6], [59, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-admin_businesshours__add-holiday");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              dom.setAttribute(el2, "type", "button");
              dom.setAttribute(el2, "class", "button button--default");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["showHolidayForm"], [], ["loc", [null, [65, 17], [65, 45]]]]], ["inline", "t", ["admin.businesshours.holidays.addaholiday"], [], ["loc", [null, [67, 10], [67, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 40,
                "column": 2
              },
              "end": {
                "line": 72,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h5");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.businesshours.holidays"], [], ["loc", [null, [41, 8], [41, 44]]]], ["inline", "t", ["admin.businesshours.holidays.info"], [], ["loc", [null, [42, 7], [42, 48]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [44, 4], [60, 23]]]], ["block", "if", [["subexpr", "not", [["get", "newHoliday", ["loc", [null, [62, 15], [62, 25]]]]], [], ["loc", [null, [62, 10], [62, 26]]]]], [], 1, null, ["loc", [null, [62, 4], [70, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 74,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [9, 15], [9, 33]]]]], ["loc", [null, [6, 2], [9, 35]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.businesshours.heading.details"], [], ["loc", [null, [11, 33], [11, 74]]]]], 0, null, ["loc", [null, [11, 2], [21, 27]]]], ["block", "ko-admin/forms/group", [], [], 1, null, ["loc", [null, [23, 2], [38, 27]]]], ["block", "ko-admin/forms/group", [], [], 2, null, ["loc", [null, [40, 2], [72, 27]]]], ["inline", "ko-admin/page-footer", [], ["buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [73, 36], [73, 54]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [73, 64], [73, 72]]]]], [], []]], ["loc", [null, [73, 2], [73, 74]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/businesshours/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["save"], [], ["loc", [null, [2, 11], [2, 26]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [74, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    caseField: null,
    title: null,
    onOptionAddition: null,
    onOptionRemoval: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,
    agentCaseSettings: false,

    isApiFieldKeyAvailable: _ember['default'].computed('caseField.id', function () {
      return !this.get('caseField.id');
    }),
    isStatusKeyAvailable: true,
    isCustomerEditAvailable: true,

    isStatusOrApiFieldAvailable: _ember['default'].computed('isApiFieldKeyAvailable', 'isStatusKeyAvailable', function () {
      return this.get('isApiFieldKeyAvailable') || this.get('isStatusKeyAvailable');
    }),

    optionsList: _ember['default'].computed('caseField.options', 'caseField.options.[]', 'caseField.options.@each.markedForDeletion', function () {
      return this.get('caseField.options').filterBy('markedForDeletion', false);
    }),

    getAdminComponentForFieldType: function getAdminComponentForFieldType(fieldType) {
      switch (fieldType) {
        case 'REGEX':
          return 'ko-admin/case-fields/edit/regex';
        case 'PRIORITY':
          return 'ko-admin/case-fields/edit/priorities';
        case 'STATUS':
          return 'ko-admin/case-fields/edit/statuses';
        case 'TYPE':
          return 'ko-admin/case-fields/edit/types';
      }
    },

    onCustomerEditableChange: _ember['default'].observer('caseField.isCustomerEditable', function () {
      if (!this.get('caseField.isCustomerEditable')) {
        this.set('caseField.isRequiredForCustomers', false);
      }
    }),

    disabledString: function disabledString(isEditable) {
      return isEditable ? '' : 'disabled';
    },

    isTitleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isRequiredWhenCreatingEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerVisibleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
          return false;
        default:
          return true;
      }
    }),

    isCustomerFieldTitleEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'MESSAGE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerEditableEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    }),

    isCustomerRequiredEditable: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'SUBJECT':
        case 'TEAM':
        case 'ASSIGNEE':
        case 'STATUS':
          return false;
        default:
          return true;
      }
    }),

    isCustomerDescriptionsVisible: _ember['default'].computed('caseField.fieldType', function () {
      switch (this.get('caseField.fieldType')) {
        case 'TEAM':
        case 'ASSIGNEE':
          return false;
        default:
          return true;
      }
    })
  });
});
define('frontend-cp/components/ko-admin/case-fields/edit/options/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    options: [],

    orderedOptionList: _ember['default'].computed('options', 'options.@each.sortOrder', function () {
      return this.get('options').sortBy('sortOrder');
    }),

    actions: {
      reorderList: function reorderList(list) {
        var order = 1;
        list.forEach(function (option) {
          option.set('sortOrder', order);
          order++;
        });
      },

      createOption: function createOption() {
        this.sendAction('onOptionAddition');
      },
      removeOption: function removeOption(option) {
        this.sendAction('onOptionRemoval', option);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-reorderable-crud-list-item__values");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-reorderable-crud-list-item__values");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", "input-text", "value", ["subexpr", "@mut", [["get", "option.value", ["loc", [null, [8, 49], [8, 61]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.casefields.type.checkbox.field_options.title"], [], ["loc", [null, [8, 74], [8, 130]]]]], ["loc", [null, [8, 4], [8, 132]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "option.errors.value", ["loc", [null, [9, 34], [9, 53]]]]], [], []]], ["loc", [null, [9, 4], [9, 55]]]], ["inline", "ko-admin/inline-locale-edit", [], ["class", "ko-reorderable-crud-list-item__values", "localeFields", ["subexpr", "@mut", [["get", "option.values", ["loc", [null, [11, 91], [11, 104]]]]], [], []], "field", "label"], ["loc", [null, [11, 2], [11, 120]]]], ["inline", "input", [], ["type", "text", "class", "input-text", "value", ["subexpr", "@mut", [["get", "option.tag", ["loc", [null, [13, 49], [13, 59]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.casefields.type.checkbox.field_options.tag"], [], ["loc", [null, [13, 72], [13, 126]]]]], ["loc", [null, [13, 4], [13, 128]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "option.errors.tag", ["loc", [null, [14, 34], [14, 51]]]]], [], []]], ["loc", [null, [14, 4], [14, 53]]]]],
        locals: ["option"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/options/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-reorderable-crud-list", [], ["removeItemAction", "removeOption", "createItemAction", "createOption", "reorderListAction", "reorderList", "items", ["subexpr", "@mut", [["get", "orderedOptionList", ["loc", [null, [5, 8], [5, 25]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [16, 29]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/priorities/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedPriority: null,
    sorter: _ember['default'].inject.service('sorter'),
    intl: _ember['default'].inject.service('intl'),

    priorities: _ember['default'].computed('caseField.priorities.@each.level', function () {
      return this.get('caseField.priorities').sortBy('level');
    }),

    actions: {
      reorderList: function reorderList(casePriorities) {
        this.get('sorter').sort(casePriorities);
      },

      createPriority: function createPriority() {
        if (this.get('editedPriority.isNew')) {
          return;
        }

        this.send('cancelEditing');

        var priority = this.get('caseField.priorities').createRecord({
          level: this.get('caseField.priorities.length') + 1
        });

        this.set('editedPriority', priority);
      },

      removePriority: function removePriority(priority, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          priority.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedPriority').save().then(function () {
          _this.set('editedPriority', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedPriority')) {
          return;
        }

        if (this.get('editedPriority.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedPriority.isNew')) {
              this.get('editedPriority').destroyRecord();
            } else {
              this.get('editedPriority').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedPriority', null);
      },

      startEditing: function startEditing(priority) {
        this.send('cancelEditing');
        this.set('editedPriority', priority);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/priorities/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.label.priorities"], [], ["loc", [null, [5, 4], [5, 50]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 11,
                      "column": 8
                    },
                    "end": {
                      "line": 13,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-priority-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "priority.label", ["loc", [null, [12, 107], [12, 121]]]]], [], []]], ["loc", [null, [12, 10], [12, 123]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 8
                    },
                    "end": {
                      "line": 17,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "type", "button");
                  dom.setAttribute(el1, "class", "button t-small qa-custom-priority-cancel");
                  dom.setAttribute(el1, "name", "cancel");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "type", "button");
                  dom.setAttribute(el1, "class", "button button--primary qa-custom-priority-save");
                  dom.setAttribute(el1, "name", "submit");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var element3 = dom.childAt(fragment, [3]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2, 0, 0);
                  morphs[2] = dom.createAttrMorph(element3, 'onclick');
                  morphs[3] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [15, 103], [15, 129]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [15, 130], [15, 152]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [16, 109], [16, 132]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [16, 133], [16, 153]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [11, 8], [13, 32]]]], ["block", "ko-simple-list/cell", [], ["class", "t-right"], 1, null, ["loc", [null, [14, 8], [17, 32]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 19,
                      "column": 8
                    },
                    "end": {
                      "line": 21,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-bold qa-custom-priority-label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "priority.label", ["loc", [null, [20, 56], [20, 74]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 25,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "qa-custom-priority-edit");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "qa-custom-priority-delete");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "priority", ["loc", [null, [23, 45], [23, 53]]]]], [], ["loc", [null, [23, 21], [23, 55]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [23, 88], [23, 108]]]], ["attribute", "onclick", ["subexpr", "action", ["removePriority", ["get", "priority", ["loc", [null, [24, 49], [24, 57]]]]], [], ["loc", [null, [24, 23], [24, 59]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [24, 94], [24, 116]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [19, 8], [21, 32]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [22, 8], [25, 35]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "priority", ["loc", [null, [10, 16], [10, 24]]]], ["get", "editedPriority", ["loc", [null, [10, 25], [10, 39]]]]], [], ["loc", [null, [10, 12], [10, 40]]]]], [], 0, 1, ["loc", [null, [10, 6], [26, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "priority", ["loc", [null, [9, 47], [9, 55]]]], ["get", "editedPriority", ["loc", [null, [9, 56], [9, 70]]]]], [], ["loc", [null, [9, 43], [9, 71]]]]], [], ["loc", [null, [9, 38], [9, 72]]]], ["subexpr", "action", ["startEditing", ["get", "priority", ["loc", [null, [9, 96], [9, 104]]]]], [], ["loc", [null, [9, 73], [9, 105]]]]], [], ["loc", [null, [9, 34], [9, 106]]]]], 0, null, ["loc", [null, [9, 4], [27, 27]]]]],
          locals: ["priority"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "priorities__add-priority-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createAttrMorph(element4, 'onclick');
          morphs[4] = dom.createMorphAt(element4, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.priorities"], [], ["loc", [null, [2, 46], [2, 94]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderList"], [], ["loc", [null, [8, 35], [8, 57]]]], "items", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [8, 64], [8, 74]]]]], [], []]], 1, null, ["loc", [null, [8, 2], [28, 26]]]], ["attribute", "onclick", ["subexpr", "action", ["createPriority"], [], ["loc", [null, [30, 110], [30, 137]]]]], ["inline", "t", ["admin.casefields.edit.add_new_priority"], [], ["loc", [null, [31, 4], [31, 50]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/priorities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [33, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/regex/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    caseField: null
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/regex/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 4,
                  "column": 62
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["admin.casefields.help.regex"], [], ["loc", [null, [4, 27], [4, 62]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "input", [], ["class", "input input-text", "name", "regex", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.regularExpression", ["loc", [null, [3, 68], [3, 95]]]]], [], []]], ["loc", [null, [3, 4], [3, 97]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 4], [4, 85]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [2, 2], [5, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.regex"], [], ["loc", [null, [1, 31], [1, 72]]]]], 0, null, ["loc", [null, [1, 0], [6, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/statuses/component', ['exports', 'ember'], function (exports, _ember) {

  var OPEN_STATUS_TYPES = ['NEW', 'OPEN', 'PENDING'];
  var CLOSED_STATUS_TYPES = ['CLOSED', 'COMPLETED'];

  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedStatus: null,
    sorter: _ember['default'].inject.service('sorter'),
    intl: _ember['default'].inject.service('intl'),

    openStatuses: _ember['default'].computed('caseField.statuses.[]', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    closedStatuses: _ember['default'].computed('caseField.statuses.[]', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) !== -1;
      });
    }),

    customStatuses: _ember['default'].computed('caseField.statuses.@each.sortOrder', function () {
      return this.get('caseField.statuses').filter(function (status) {
        return OPEN_STATUS_TYPES.indexOf(status.get('statusType')) === -1 && CLOSED_STATUS_TYPES.indexOf(status.get('statusType')) === -1;
      }).sortBy('sortOrder');
    }),

    actions: {
      reorderList: function reorderList(caseStatuses) {
        this.get('sorter').sort(caseStatuses);
      },

      createStatus: function createStatus() {
        if (this.get('editedStatus.isNew')) {
          return;
        }

        this.send('cancelEditing');
        var status = this.get('caseField.statuses').createRecord({
          statusType: 'CUSTOM',
          sortOrder: this.get('customStatuses.lastObject.sortOrder') + 1
        });
        this.set('editedStatus', status);
      },

      removeStatus: function removeStatus(status, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          status.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedStatus').save().then(function () {
          _this.set('editedStatus', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedStatus')) {
          return;
        }

        if (this.get('editedStatus.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedStatus.isNew')) {
              this.get('editedStatus').destroyRecord();
            } else {
              this.get('editedStatus').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedStatus', null);
      },

      startEditing: function startEditing(status) {
        this.send('cancelEditing');
        this.set('editedStatus', status);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/statuses/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.statuses.1"], [], ["loc", [null, [5, 4], [5, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.statuses.2"], [], ["loc", [null, [9, 4], [9, 49]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 16,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "status.label", ["loc", [null, [15, 29], [15, 45]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [15, 77], [15, 113]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 17,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["inline", "if", [["get", "status.isSlaActive", ["loc", [null, [18, 37], [18, 55]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [18, 56], [18, 112]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [18, 113], [18, 171]]]]], [], ["loc", [null, [18, 32], [18, 173]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [14, 6], [16, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [17, 6], [19, 30]]]], ["content", "ko-simple-list/cell", ["loc", [null, [20, 6], [20, 29]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [13, 4], [21, 27]]]]],
          locals: ["status"],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 28,
                        "column": 10
                      },
                      "end": {
                        "line": 30,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-status-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "status.label", ["loc", [null, [29, 107], [29, 119]]]]], [], []]], ["loc", [null, [29, 12], [29, 121]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 31,
                        "column": 10
                      },
                      "end": {
                        "line": 38,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "statuses__is-sla-active");
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "ko-toggle", [], ["class", "qa-custom-status-sla-toggle", "activated", ["subexpr", "@mut", [["get", "status.isSlaActive", ["loc", [null, [35, 26], [35, 44]]]]], [], []], "label", ["subexpr", "if", [["get", "status.isSlaActive", ["loc", [null, [36, 26], [36, 44]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [36, 45], [36, 101]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [36, 102], [36, 160]]]]], [], ["loc", [null, [36, 22], [36, 161]]]]], ["loc", [null, [33, 14], [36, 163]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 39,
                        "column": 10
                      },
                      "end": {
                        "line": 42,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "type", "button");
                    dom.setAttribute(el1, "class", "button t-small qa-custom-status-cancel");
                    dom.setAttribute(el1, "name", "cancel");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("button");
                    dom.setAttribute(el1, "type", "button");
                    dom.setAttribute(el1, "class", "button button--primary qa-custom-status-save");
                    dom.setAttribute(el1, "name", "submit");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element2 = dom.childAt(fragment, [1]);
                    var element3 = dom.childAt(fragment, [3]);
                    var morphs = new Array(4);
                    morphs[0] = dom.createAttrMorph(element2, 'onclick');
                    morphs[1] = dom.createMorphAt(element2, 0, 0);
                    morphs[2] = dom.createAttrMorph(element3, 'onclick');
                    morphs[3] = dom.createMorphAt(element3, 0, 0);
                    return morphs;
                  },
                  statements: [["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [40, 103], [40, 129]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [40, 130], [40, 152]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [41, 109], [41, 132]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [41, 133], [41, 153]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 27,
                      "column": 8
                    },
                    "end": {
                      "line": 43,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [28, 10], [30, 34]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [31, 10], [38, 34]]]], ["block", "ko-simple-list/cell", [], ["class", "t-right"], 2, null, ["loc", [null, [39, 10], [42, 34]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 44,
                        "column": 10
                      },
                      "end": {
                        "line": 46,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-bold qa-custom-status-label");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "status.label", ["loc", [null, [45, 56], [45, 72]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 47,
                        "column": 10
                      },
                      "end": {
                        "line": 51,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-caption qa-custom-status-sla-active");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n            ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "if", [["get", "status.isSlaActive", ["loc", [null, [49, 21], [49, 39]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_active"], [], ["loc", [null, [49, 40], [49, 96]]]], ["subexpr", "t", ["admin.casefields.edit.statuses.label.is_sla_inactive"], [], ["loc", [null, [49, 97], [49, 155]]]]], [], ["loc", [null, [49, 16], [49, 157]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 52,
                        "column": 10
                      },
                      "end": {
                        "line": 55,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "class", "qa-custom-status-edit");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            | ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("a");
                    dom.setAttribute(el1, "class", "qa-custom-status-delete");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element0 = dom.childAt(fragment, [1]);
                    var element1 = dom.childAt(fragment, [3]);
                    var morphs = new Array(4);
                    morphs[0] = dom.createAttrMorph(element0, 'onclick');
                    morphs[1] = dom.createMorphAt(element0, 0, 0);
                    morphs[2] = dom.createAttrMorph(element1, 'onclick');
                    morphs[3] = dom.createMorphAt(element1, 0, 0);
                    return morphs;
                  },
                  statements: [["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "status", ["loc", [null, [53, 47], [53, 53]]]]], [], ["loc", [null, [53, 23], [53, 55]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [53, 86], [53, 106]]]], ["attribute", "onclick", ["subexpr", "action", ["removeStatus", ["get", "status", ["loc", [null, [54, 49], [54, 55]]]]], [], ["loc", [null, [54, 25], [54, 57]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [54, 90], [54, 112]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 43,
                      "column": 8
                    },
                    "end": {
                      "line": 56,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [44, 10], [46, 34]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [47, 10], [51, 34]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [52, 10], [55, 37]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "status", ["loc", [null, [27, 18], [27, 24]]]], ["get", "editedStatus", ["loc", [null, [27, 25], [27, 37]]]]], [], ["loc", [null, [27, 14], [27, 38]]]]], [], 0, 1, ["loc", [null, [27, 8], [56, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "status", ["loc", [null, [26, 49], [26, 55]]]], ["get", "editedStatus", ["loc", [null, [26, 56], [26, 68]]]]], [], ["loc", [null, [26, 45], [26, 69]]]]], [], ["loc", [null, [26, 40], [26, 70]]]], ["subexpr", "action", ["startEditing", ["get", "status", ["loc", [null, [26, 94], [26, 100]]]]], [], ["loc", [null, [26, 71], [26, 101]]]]], [], ["loc", [null, [26, 36], [26, 102]]]]], 0, null, ["loc", [null, [26, 6], [57, 29]]]]],
            locals: ["status"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderList"], [], ["loc", [null, [25, 37], [25, 59]]]], "items", ["subexpr", "@mut", [["get", "customStatuses", ["loc", [null, [25, 66], [25, 80]]]]], [], []]], 0, null, ["loc", [null, [25, 4], [58, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 63,
                    "column": 6
                  },
                  "end": {
                    "line": 65,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "status.label", ["loc", [null, [64, 29], [64, 45]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [64, 77], [64, 113]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [63, 6], [65, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 67,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [62, 4], [66, 27]]]]],
          locals: ["status"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 72,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "statuses__add-status-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [13]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createAttrMorph(element4, 'onclick');
          morphs[7] = dom.createMorphAt(element4, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.statuses"], [], ["loc", [null, [2, 46], [2, 92]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [8, 2], [10, 25]]]], ["block", "each", [["get", "openStatuses", ["loc", [null, [12, 10], [12, 22]]]]], [], 2, null, ["loc", [null, [12, 2], [22, 11]]]], ["block", "if", [["get", "customStatuses.length", ["loc", [null, [24, 8], [24, 29]]]]], [], 3, null, ["loc", [null, [24, 2], [59, 9]]]], ["block", "each", [["get", "closedStatuses", ["loc", [null, [61, 10], [61, 24]]]]], [], 4, null, ["loc", [null, [61, 2], [67, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["createStatus"], [], ["loc", [null, [69, 106], [69, 131]]]]], ["inline", "t", ["admin.casefields.edit.add_new_status"], [], ["loc", [null, [70, 4], [70, 48]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 73,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/statuses/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [72, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-admin/case-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 8
                    },
                    "end": {
                      "line": 15,
                      "column": 79
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.label.field_title"], [], ["loc", [null, [15, 32], [15, 79]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 77
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.help.field_title"], [], ["loc", [null, [18, 31], [18, 77]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [15, 8], [15, 103]]]], ["inline", "input", [], ["type", "text", "class", "input-text u-1/1", "name", "title", "value", ["subexpr", "@mut", [["get", "caseField.title", ["loc", [null, [16, 72], [16, 87]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [16, 112], [16, 126]]]], ["get", "isTitleEditable", ["loc", [null, [16, 127], [16, 142]]]]], [], ["loc", [null, [16, 101], [16, 143]]]], ["get", "isSubmitting", ["loc", [null, [16, 144], [16, 156]]]]], [], ["loc", [null, [16, 97], [16, 157]]]]], ["loc", [null, [16, 8], [16, 159]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.title", ["loc", [null, [17, 38], [17, 60]]]]], [], []]], ["loc", [null, [17, 8], [17, 62]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [18, 8], [18, 100]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 23,
                        "column": 10
                      },
                      "end": {
                        "line": 23,
                        "column": 92
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.label.is_required_for_agents"], [], ["loc", [null, [23, 34], [23, 92]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 25,
                        "column": 10
                      },
                      "end": {
                        "line": 32,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_agents_when_updating_case"], [], ["loc", [null, [27, 20], [27, 95]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredForAgents", ["loc", [null, [28, 22], [28, 51]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [29, 38], [29, 52]]]], ["get", "isRequiredWhenCreatingEditable", ["loc", [null, [29, 53], [29, 83]]]]], [], ["loc", [null, [29, 27], [29, 84]]]], ["get", "isSubmitting", ["loc", [null, [29, 85], [29, 97]]]]], [], ["loc", [null, [29, 23], [29, 98]]]]], ["loc", [null, [26, 12], [30, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredForAgents", ["loc", [null, [31, 42], [31, 78]]]]], [], []]], ["loc", [null, [31, 12], [31, 80]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 34,
                        "column": 10
                      },
                      "end": {
                        "line": 41,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(2);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_agents_when_resolving_case"], [], ["loc", [null, [36, 20], [36, 96]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredOnResolution", ["loc", [null, [37, 22], [37, 54]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [38, 38], [38, 52]]]], ["get", "isRequiredWhenCreatingEditable", ["loc", [null, [38, 53], [38, 83]]]]], [], ["loc", [null, [38, 27], [38, 84]]]], ["get", "isSubmitting", ["loc", [null, [38, 85], [38, 97]]]]], [], ["loc", [null, [38, 23], [38, 98]]]]], ["loc", [null, [35, 12], [39, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredOnResolution", ["loc", [null, [40, 42], [40, 81]]]]], [], []]], ["loc", [null, [40, 12], [40, 83]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 42,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [23, 10], [23, 116]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [25, 10], [32, 28]]]], ["block", "ko-form/field", [], ["nogap", true], 2, null, ["loc", [null, [34, 10], [41, 28]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [22, 23], [22, 42]]]], "STATUS"], [], ["loc", [null, [22, 19], [22, 52]]]]], [], ["loc", [null, [22, 14], [22, 53]]]]], [], 0, null, ["loc", [null, [22, 8], [42, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [14, 6], [19, 24]]]], ["block", "if", [["get", "agentCaseSettings", ["loc", [null, [21, 12], [21, 29]]]]], [], 1, null, ["loc", [null, [21, 6], [43, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 46,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.agent_settings"], [], ["loc", [null, [13, 35], [13, 85]]]]], 0, null, ["loc", [null, [13, 4], [45, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_visible_to_customers"], [], ["loc", [null, [52, 16], [52, 73]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isVisibleToCustomers", ["loc", [null, [53, 18], [53, 48]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [54, 34], [54, 48]]]], ["get", "isCustomerVisibleEditable", ["loc", [null, [54, 49], [54, 74]]]]], [], ["loc", [null, [54, 23], [54, 75]]]], ["get", "isSubmitting", ["loc", [null, [54, 76], [54, 88]]]]], [], ["loc", [null, [54, 19], [54, 89]]]]], ["loc", [null, [51, 8], [55, 10]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isCustomerVisibleEditable", ["loc", [null, [56, 38], [56, 80]]]]], [], []]], ["loc", [null, [56, 8], [56, 82]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [50, 6], [57, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 62,
                      "column": 8
                    },
                    "end": {
                      "line": 62,
                      "column": 88
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.casefields.edit.label.customer_field_title"], [], ["loc", [null, [62, 32], [62, 88]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 61,
                    "column": 6
                  },
                  "end": {
                    "line": 66,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [62, 8], [62, 112]]]], ["inline", "input", [], ["class", "input input-text", "name", "customerTitle", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.customerTitle", ["loc", [null, [63, 80], [63, 103]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [63, 128], [63, 142]]]], ["get", "isCustomerFieldTitleEditable", ["loc", [null, [63, 143], [63, 171]]]]], [], ["loc", [null, [63, 117], [63, 172]]]], ["get", "isSubmitting", ["loc", [null, [63, 173], [63, 185]]]]], [], ["loc", [null, [63, 113], [63, 186]]]]], ["loc", [null, [63, 8], [63, 188]]]], ["inline", "ko-admin/inline-locale-edit", [], ["localeFields", ["subexpr", "@mut", [["get", "caseField.customerTitles", ["loc", [null, [64, 51], [64, 75]]]]], [], []], "field", "title"], ["loc", [null, [64, 8], [64, 91]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.customerTitle", ["loc", [null, [65, 38], [65, 68]]]]], [], []]], ["loc", [null, [65, 8], [65, 70]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 70,
                        "column": 10
                      },
                      "end": {
                        "line": 70,
                        "column": 96
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.label.customer_field_description"], [], ["loc", [null, [70, 34], [70, 96]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 79,
                        "column": 10
                      },
                      "end": {
                        "line": 79,
                        "column": 79
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.help.field_title"], [], ["loc", [null, [79, 33], [79, 79]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 69,
                      "column": 8
                    },
                    "end": {
                      "line": 80,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "input input-text-area-wrapper");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [3]);
                  var morphs = new Array(5);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(element1, 1, 1);
                  morphs[2] = dom.createMorphAt(element1, 3, 3);
                  morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                  return morphs;
                },
                statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [70, 10], [70, 120]]]], ["inline", "textarea", [], ["class", "input-text", "name", "description", "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.description", ["loc", [null, [72, 79], [72, 100]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [72, 110], [72, 122]]]]], [], []]], ["loc", [null, [72, 12], [72, 124]]]], ["inline", "ko-admin/inline-locale-edit", [], ["localeFields", ["subexpr", "@mut", [["get", "caseField.descriptions", ["loc", [null, [74, 27], [74, 49]]]]], [], []], "field", "description", "inputType", "textArea"], ["loc", [null, [73, 12], [76, 36]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.description", ["loc", [null, [78, 40], [78, 68]]]]], [], []]], ["loc", [null, [78, 10], [78, 70]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [79, 10], [79, 102]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 68,
                    "column": 6
                  },
                  "end": {
                    "line": 81,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [69, 8], [80, 26]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 91,
                        "column": 10
                      },
                      "end": {
                        "line": 91,
                        "column": 92
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.casefields.edit.help.is_editable_by_customers"], [], ["loc", [null, [91, 33], [91, 92]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 84,
                      "column": 8
                    },
                    "end": {
                      "line": 92,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_editable_by_customers"], [], ["loc", [null, [86, 18], [86, 76]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isCustomerEditable", ["loc", [null, [87, 20], [87, 48]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [88, 36], [88, 50]]]], ["get", "isCustomerEditableEditable", ["loc", [null, [88, 51], [88, 77]]]]], [], ["loc", [null, [88, 25], [88, 78]]]], ["get", "isSubmitting", ["loc", [null, [88, 79], [88, 91]]]]], [], ["loc", [null, [88, 21], [88, 92]]]]], ["loc", [null, [85, 10], [89, 12]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isCustomerEditable", ["loc", [null, [90, 40], [90, 75]]]]], [], []]], ["loc", [null, [90, 10], [90, 77]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [91, 10], [91, 115]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.0.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 102,
                          "column": 12
                        },
                        "end": {
                          "line": 102,
                          "column": 95
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.is_required_for_customers"], [], ["loc", [null, [102, 35], [102, 95]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 95,
                        "column": 10
                      },
                      "end": {
                        "line": 103,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", ["admin.casefields.edit.label.is_required_for_customers"], [], ["loc", [null, [97, 20], [97, 79]]]], "checked", ["subexpr", "@mut", [["get", "caseField.isRequiredForCustomers", ["loc", [null, [98, 22], [98, 54]]]]], [], []], "disabled", ["subexpr", "or", [["subexpr", "ko-helper", [["get", "disabledString", ["loc", [null, [99, 38], [99, 52]]]], ["get", "isCustomerRequiredEditable", ["loc", [null, [99, 53], [99, 79]]]]], [], ["loc", [null, [99, 27], [99, 80]]]], ["get", "isSubmitting", ["loc", [null, [99, 81], [99, 93]]]]], [], ["loc", [null, [99, 23], [99, 94]]]]], ["loc", [null, [96, 12], [100, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isRequiredForCustomers", ["loc", [null, [101, 42], [101, 81]]]]], [], []]], ["loc", [null, [101, 12], [101, 83]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [102, 12], [102, 118]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 94,
                      "column": 8
                    },
                    "end": {
                      "line": 104,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [95, 10], [103, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 6
                  },
                  "end": {
                    "line": 105,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [84, 8], [92, 26]]]], ["block", "if", [["get", "caseField.isCustomerEditable", ["loc", [null, [94, 14], [94, 42]]]]], [], 1, null, ["loc", [null, [94, 8], [104, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 4
                },
                "end": {
                  "line": 107,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [61, 6], [66, 24]]]], ["block", "if", [["get", "isCustomerDescriptionsVisible", ["loc", [null, [68, 12], [68, 41]]]]], [], 1, null, ["loc", [null, [68, 6], [81, 13]]]], ["block", "if", [["subexpr", "and", [["get", "isCustomerEditAvailable", ["loc", [null, [83, 17], [83, 40]]]], ["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [83, 50], [83, 69]]]], "MESSAGE"], [], ["loc", [null, [83, 46], [83, 80]]]]], [], ["loc", [null, [83, 41], [83, 81]]]]], [], ["loc", [null, [83, 12], [83, 82]]]]], [], 2, null, ["loc", [null, [83, 6], [105, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 2
              },
              "end": {
                "line": 108,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [49, 19], [49, 38]]]], "MESSAGE"], [], ["loc", [null, [49, 15], [49, 49]]]]], [], ["loc", [null, [49, 10], [49, 50]]]]], [], 0, null, ["loc", [null, [49, 4], [58, 11]]]], ["block", "if", [["get", "caseField.isVisibleToCustomers", ["loc", [null, [60, 10], [60, 40]]]]], [], 1, null, ["loc", [null, [60, 4], [107, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 110,
                "column": 2
              },
              "end": {
                "line": 112,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "getAdminComponentForFieldType", ["loc", [null, [111, 27], [111, 56]]]], ["get", "caseField.fieldType", ["loc", [null, [111, 57], [111, 76]]]]], [], ["loc", [null, [111, 16], [111, 77]]]]], ["caseField", ["subexpr", "@mut", [["get", "caseField", ["loc", [null, [111, 88], [111, 97]]]]], [], []], "options", ["subexpr", "@mut", [["get", "caseField.options", ["loc", [null, [111, 106], [111, 123]]]]], [], []], "onOptionAddition", ["subexpr", "@mut", [["get", "onOptionAddition", ["loc", [null, [111, 141], [111, 157]]]]], [], []], "onOptionRemoval", ["subexpr", "@mut", [["get", "onOptionRemoval", ["loc", [null, [111, 174], [111, 189]]]]], [], []]], ["loc", [null, [111, 4], [111, 191]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 116,
                    "column": 6
                  },
                  "end": {
                    "line": 116,
                    "column": 78
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.casefields.edit.label.field_options"], [], ["loc", [null, [116, 29], [116, 78]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 118,
                    "column": 6
                  },
                  "end": {
                    "line": 120,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-admin/case-fields/edit/options", [], ["options", ["subexpr", "@mut", [["get", "optionsList", ["loc", [null, [119, 52], [119, 63]]]]], [], []], "onOptionAddition", ["subexpr", "@mut", [["get", "onOptionAddition", ["loc", [null, [119, 81], [119, 97]]]]], [], []], "onOptionRemoval", ["subexpr", "@mut", [["get", "onOptionRemoval", ["loc", [null, [119, 114], [119, 129]]]]], [], []]], ["loc", [null, [119, 8], [119, 131]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 120,
                    "column": 6
                  },
                  "end": {
                    "line": 124,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "class", "u-pointer");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["get", "onOptionAddition", ["loc", [null, [121, 21], [121, 37]]]]], ["inline", "t", ["admin.fields.type.field_options.add_option"], [], ["loc", [null, [122, 10], [122, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 115,
                  "column": 4
                },
                "end": {
                  "line": 125,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [116, 6], [116, 101]]]], ["block", "if", [["get", "optionsList", ["loc", [null, [118, 12], [118, 23]]]]], [], 1, 2, ["loc", [null, [118, 6], [124, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 114,
                "column": 2
              },
              "end": {
                "line": 126,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.field_options"], [], ["loc", [null, [115, 35], [115, 84]]]]], 0, null, ["loc", [null, [115, 4], [125, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.0.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 140,
                          "column": 12
                        },
                        "end": {
                          "line": 140,
                          "column": 80
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.is_enabled"], [], ["loc", [null, [140, 35], [140, 80]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 134,
                        "column": 10
                      },
                      "end": {
                        "line": 141,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(3);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "caseField.isEnabled", ["loc", [null, [136, 24], [136, 43]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "caseField.isEnabled", ["loc", [null, [137, 27], [137, 46]]]], "admin.casefields.edit.description_on.is_enabled", "admin.casefields.edit.description_off.is_enabled"], [], ["loc", [null, [137, 23], [137, 148]]]]], [], ["loc", [null, [137, 20], [137, 149]]]]], ["loc", [null, [135, 12], [138, 14]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.isEnabled", ["loc", [null, [139, 42], [139, 68]]]]], [], []]], ["loc", [null, [139, 12], [139, 70]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [140, 12], [140, 103]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 133,
                      "column": 8
                    },
                    "end": {
                      "line": 142,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [134, 10], [141, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.0.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 148,
                          "column": 12
                        },
                        "end": {
                          "line": 148,
                          "column": 79
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.label.api_key"], [], ["loc", [null, [148, 36], [148, 79]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                var child1 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.0.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 155,
                          "column": 12
                        },
                        "end": {
                          "line": 155,
                          "column": 77
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["inline", "t", ["admin.casefields.edit.help.api_key"], [], ["loc", [null, [155, 35], [155, 77]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 147,
                        "column": 10
                      },
                      "end": {
                        "line": 156,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(4);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                    morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                    morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                    return morphs;
                  },
                  statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [148, 12], [148, 103]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input-text", ["subexpr", "qa-cls", [" qa-admin_case-fields_edit__api-key"], [], ["loc", [null, [150, 41], [150, 87]]]]], [], ["loc", [null, [150, 20], [150, 88]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseField.key", ["loc", [null, [152, 20], [152, 33]]]]], [], []], "disabled", true], ["loc", [null, [149, 12], [153, 29]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseField.errors.key", ["loc", [null, [154, 42], [154, 62]]]]], [], []]], ["loc", [null, [154, 12], [154, 64]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [155, 12], [155, 100]]]]],
                  locals: [],
                  templates: [child0, child1]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 144,
                      "column": 8
                    },
                    "end": {
                      "line": 157,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [147, 10], [156, 28]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 131,
                    "column": 6
                  },
                  "end": {
                    "line": 159,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["block", "if", [["get", "isStatusKeyAvailable", ["loc", [null, [133, 14], [133, 34]]]]], [], 0, null, ["loc", [null, [133, 8], [142, 15]]]], ["block", "if", [["subexpr", "not", [["get", "isApiFieldKeyAvailable", ["loc", [null, [144, 19], [144, 41]]]]], [], ["loc", [null, [144, 14], [144, 42]]]]], [], 1, null, ["loc", [null, [144, 8], [157, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 130,
                  "column": 4
                },
                "end": {
                  "line": 160,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.field_settings"], [], ["loc", [null, [131, 37], [131, 87]]]]], 0, null, ["loc", [null, [131, 6], [159, 31]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 129,
                "column": 2
              },
              "end": {
                "line": 161,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isStatusOrApiFieldAvailable", ["loc", [null, [130, 10], [130, 37]]]]], [], 0, null, ["loc", [null, [130, 4], [160, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 164,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 17], [8, 35]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [9, 15], [9, 23]]]]], [], []]], ["loc", [null, [6, 2], [10, 4]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "caseField.fieldType", ["loc", [null, [12, 17], [12, 36]]]], "MESSAGE"], [], ["loc", [null, [12, 13], [12, 47]]]]], [], ["loc", [null, [12, 8], [12, 48]]]]], [], 0, null, ["loc", [null, [12, 2], [46, 9]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.casefields.edit.heading.customer_settings"], [], ["loc", [null, [48, 33], [48, 86]]]]], 1, null, ["loc", [null, [48, 2], [108, 27]]]], ["block", "if", [["subexpr", "ko-helper", [["get", "getAdminComponentForFieldType", ["loc", [null, [110, 19], [110, 48]]]], ["get", "caseField.fieldType", ["loc", [null, [110, 49], [110, 68]]]]], [], ["loc", [null, [110, 8], [110, 69]]]]], [], 2, null, ["loc", [null, [110, 2], [112, 9]]]], ["block", "if", [["get", "caseField.isChoiceField", ["loc", [null, [114, 8], [114, 31]]]]], [], 3, null, ["loc", [null, [114, 2], [126, 9]]]], ["block", "if", [["subexpr", "not", [["get", "caseField.isSystem", ["loc", [null, [129, 13], [129, 31]]]]], [], ["loc", [null, [129, 8], [129, 32]]]]], [], 4, null, ["loc", [null, [129, 2], [161, 9]]]], ["inline", "ko-admin/page-footer", [], ["buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [163, 36], [163, 54]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [163, 64], [163, 72]]]]], [], []]], ["loc", [null, [163, 2], [163, 74]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 165,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [2, 11], [2, 17]]]]], [], []], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [164, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/edit/types/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //attrs
    caseField: null,
    editedType: null,

    intl: _ember['default'].inject.service('intl'),

    systemTypes: _ember['default'].computed('caseField.types.[]', function () {
      return this.get('caseField.types').rejectBy('type', 'CUSTOM');
    }),

    customTypes: _ember['default'].computed('caseField.types.[]', function () {
      return this.get('caseField.types').filterBy('type', 'CUSTOM');
    }),

    actions: {
      createType: function createType() {
        if (this.get('editedType.isNew')) {
          return;
        }

        this.send('cancelEditing');
        var type = this.get('caseField.types').createRecord({ type: 'CUSTOM' });
        this.set('editedType', type);
      },

      removeType: function removeType(type, event) {
        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          type.destroyRecord();
        }
      },

      saveEdited: function saveEdited() {
        var _this = this;

        this.get('editedType').save().then(function () {
          _this.set('editedType', null);
        });
      },

      cancelEditing: function cancelEditing() {
        if (!this.get('editedType')) {
          return;
        }

        if (this.get('editedType.hasDirtyAttributes')) {
          var message = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');

          if (confirm(message)) {
            if (this.get('editedType.isNew')) {
              this.get('editedType').destroyRecord();
            } else {
              this.get('editedType').rollbackAttributes();
            }
          } else {
            return;
          }
        }

        this.set('editedType', null);
      },

      startEditing: function startEditing(type) {
        this.send('cancelEditing');
        this.set('editedType', type);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/edit/types/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.casefields.edit.help.types"], [], ["loc", [null, [5, 4], [5, 44]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "type.label", ["loc", [null, [11, 29], [11, 43]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [11, 75], [11, 111]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [10, 6], [12, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [9, 4], [13, 27]]]]],
          locals: ["type"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 19,
                      "column": 10
                    },
                    "end": {
                      "line": 21,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "class", "input input-text qa-custom-type-label-input", "autofocus", true, "value", ["subexpr", "@mut", [["get", "type.label", ["loc", [null, [20, 105], [20, 115]]]]], [], []]], ["loc", [null, [20, 12], [20, 117]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 10
                    },
                    "end": {
                      "line": 25,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "type", "button");
                  dom.setAttribute(el1, "class", "button t-small qa-custom-type-cancel");
                  dom.setAttribute(el1, "name", "cancel");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  dom.setAttribute(el1, "type", "button");
                  dom.setAttribute(el1, "class", "button button--primary qa-custom-type-save");
                  dom.setAttribute(el1, "name", "submit");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var element3 = dom.childAt(fragment, [3]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2, 0, 0);
                  morphs[2] = dom.createAttrMorph(element3, 'onclick');
                  morphs[3] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [23, 101], [23, 127]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [23, 128], [23, 150]]]], ["attribute", "onclick", ["subexpr", "action", ["saveEdited"], [], ["loc", [null, [24, 107], [24, 130]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [24, 131], [24, 151]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [19, 10], [21, 34]]]], ["block", "ko-simple-list/cell", [], ["class", "t-right"], 1, null, ["loc", [null, [22, 10], [25, 34]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 27,
                      "column": 10
                    },
                    "end": {
                      "line": 29,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-bold qa-custom-type-label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "type.label", ["loc", [null, [28, 54], [28, 68]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 10
                    },
                    "end": {
                      "line": 33,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "qa-custom-type-edit");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n            | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "qa-custom-type-delete");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["startEditing", ["get", "type", ["loc", [null, [31, 47], [31, 51]]]]], [], ["loc", [null, [31, 23], [31, 53]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [31, 82], [31, 102]]]], ["attribute", "onclick", ["subexpr", "action", ["removeType", ["get", "type", ["loc", [null, [32, 47], [32, 51]]]]], [], ["loc", [null, [32, 25], [32, 53]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [32, 84], [32, 106]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 26,
                    "column": 6
                  },
                  "end": {
                    "line": 34,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [27, 10], [29, 34]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [30, 10], [33, 37]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "type", ["loc", [null, [18, 16], [18, 20]]]], ["get", "editedType", ["loc", [null, [18, 21], [18, 31]]]]], [], ["loc", [null, [18, 12], [18, 32]]]]], [], 0, 1, ["loc", [null, [18, 6], [34, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "type", ["loc", [null, [17, 47], [17, 51]]]], ["get", "editedType", ["loc", [null, [17, 52], [17, 62]]]]], [], ["loc", [null, [17, 43], [17, 63]]]]], [], ["loc", [null, [17, 38], [17, 64]]]], ["subexpr", "action", ["startEditing", ["get", "type", ["loc", [null, [17, 88], [17, 92]]]]], [], ["loc", [null, [17, 65], [17, 93]]]]], [], ["loc", [null, [17, 34], [17, 94]]]]], 0, null, ["loc", [null, [17, 4], [35, 27]]]]],
          locals: ["type"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("legend");
          dom.setAttribute(el1, "class", "ko-admin-form-group__legend");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "types__add-type-message button button--default");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [9]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createAttrMorph(element4, 'onclick');
          morphs[5] = dom.createMorphAt(element4, 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields.edit.heading.types"], [], ["loc", [null, [2, 46], [2, 89]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [4, 2], [6, 25]]]], ["block", "each", [["get", "systemTypes", ["loc", [null, [8, 10], [8, 21]]]]], [], 1, null, ["loc", [null, [8, 2], [14, 11]]]], ["block", "each", [["get", "customTypes", ["loc", [null, [16, 10], [16, 21]]]]], [], 2, null, ["loc", [null, [16, 2], [36, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["createType"], [], ["loc", [null, [38, 101], [38, 124]]]]], ["inline", "t", ["admin.casefields.edit.add_new_type"], [], ["loc", [null, [39, 4], [39, 46]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/edit/types/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [1, 0], [41, 25]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/index/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    model: null,

    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),

    systemfields: _ember['default'].computed('model.@each.isSystem', function () {
      return this.get('model').filter(function (field) {
        return field.get('isSystem');
      });
    }),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      toggleEnabledStatus: function toggleEnabledStatus(casefield, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(casefield).then(function () {
          var notificationMessage = undefined;
          if (casefield.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.casefields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.casefields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin Case Fields State Changed',
          category: 'Admin Case Fields',
          action: casefield.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
        return false;
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin Case Field Remove',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.casefields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.container.lookup('router:main').transitionTo('session.admin.manage.case-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin Case Field Reorder',
          category: 'Admin Case Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 6
                  },
                  "end": {
                    "line": 11,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "t-bold");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "t-caption");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element10, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "systemfield.title", ["loc", [null, [9, 31], [9, 52]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [9, 84], [9, 120]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 13,
                      "column": 8
                    },
                    "end": {
                      "line": 15,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element9 = dom.childAt(fragment, [1]);
                  var morphs = new Array(1);
                  morphs[0] = dom.createAttrMorph(element9, 'class');
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [14, 79], [14, 111]]]], ["get", "systemfield.fieldType", ["loc", [null, [14, 112], [14, 133]]]]], [], ["loc", [null, [14, 67], [14, 135]]]]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 15,
                      "column": 8
                    },
                    "end": {
                      "line": 17,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  dom.setAttribute(el1, "class", "t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [16, 43], [16, 79]]]], ["get", "systemfield.fieldType", ["loc", [null, [16, 80], [16, 101]]]]], [], ["loc", [null, [16, 32], [16, 102]]]]], [], ["loc", [null, [16, 28], [16, 104]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [13, 8], [17, 20]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 6
                  },
                  "end": {
                    "line": 21,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element8 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element8, 'onclick');
                morphs[1] = dom.createMorphAt(element8, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "systemfield", ["loc", [null, [20, 40], [20, 51]]]]], [], ["loc", [null, [20, 19], [20, 53]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [20, 54], [20, 74]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 22,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [7, 6], [11, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [12, 6], [18, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [19, 6], [21, 33]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 23,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "systemfield", ["loc", [null, [6, 54], [6, 65]]]]], [], ["loc", [null, [6, 34], [6, 66]]]]], 0, null, ["loc", [null, [6, 4], [22, 27]]]]],
          locals: ["systemfield"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold qa-custom-case-field-label");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [28, 56], [28, 77]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 31,
                      "column": 8
                    },
                    "end": {
                      "line": 33,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(1);
                  morphs[0] = dom.createAttrMorph(element7, 'class');
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [32, 79], [32, 111]]]], ["get", "customfield.fieldType", ["loc", [null, [32, 112], [32, 133]]]]], [], ["loc", [null, [32, 67], [32, 135]]]]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 33,
                      "column": 8
                    },
                    "end": {
                      "line": 35,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  dom.setAttribute(el1, "class", "t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [34, 43], [34, 79]]]], ["get", "customfield.fieldType", ["loc", [null, [34, 80], [34, 101]]]]], [], ["loc", [null, [34, 32], [34, 102]]]]], [], ["loc", [null, [34, 28], [34, 104]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 36,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [31, 8], [35, 20]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(fragment, [3]);
                var element6 = dom.childAt(fragment, [5]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element4, 'onclick');
                morphs[1] = dom.createMorphAt(element4, 0, 0);
                morphs[2] = dom.createAttrMorph(element5, 'onclick');
                morphs[3] = dom.createMorphAt(element5, 0, 0);
                morphs[4] = dom.createAttrMorph(element6, 'onclick');
                morphs[5] = dom.createMorphAt(element6, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [38, 40], [38, 51]]]]], [], ["loc", [null, [38, 19], [38, 53]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [38, 54], [38, 74]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [39, 50], [39, 61]]]]], [], ["loc", [null, [39, 19], [39, 63]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [39, 64], [39, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [40, 53], [40, 64]]]]], [], ["loc", [null, [40, 19], [40, 66]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [40, 67], [40, 89]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [27, 6], [29, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [30, 6], [36, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [37, 6], [41, 33]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [26, 54], [26, 65]]]]], [], ["loc", [null, [26, 34], [26, 66]]]]], 0, null, ["loc", [null, [26, 4], [42, 27]]]]],
          locals: ["customfield"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 44,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [3, 4], [3, 27]]]], ["block", "each", [["get", "systemfields", ["loc", [null, [5, 10], [5, 22]]]]], [], 0, null, ["loc", [null, [5, 2], [23, 11]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderCustomFields"], [], ["loc", [null, [25, 35], [25, 65]]]], "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [25, 72], [25, 84]]]]], [], []]], 1, null, ["loc", [null, [25, 2], [43, 26]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 53,
                      "column": 8
                    },
                    "end": {
                      "line": 55,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [54, 43], [54, 66]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 57,
                        "column": 10
                      },
                      "end": {
                        "line": 59,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element3, 'class');
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [58, 81], [58, 113]]]], ["get", "disabledfield.fieldType", ["loc", [null, [58, 114], [58, 137]]]]], [], ["loc", [null, [58, 69], [58, 139]]]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 59,
                        "column": 10
                      },
                      "end": {
                        "line": 61,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "t-caption");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [60, 48], [60, 84]]]], ["get", "disabledfield.fieldType", ["loc", [null, [60, 85], [60, 108]]]]], [], ["loc", [null, [60, 37], [60, 109]]]]], [], ["loc", [null, [60, 33], [60, 111]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 56,
                      "column": 8
                    },
                    "end": {
                      "line": 62,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [57, 10], [61, 22]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 63,
                      "column": 8
                    },
                    "end": {
                      "line": 67,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var element2 = dom.childAt(fragment, [5]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  morphs[4] = dom.createAttrMorph(element2, 'onclick');
                  morphs[5] = dom.createMorphAt(element2, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [64, 42], [64, 55]]]]], [], ["loc", [null, [64, 21], [64, 57]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [64, 58], [64, 78]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [65, 52], [65, 65]]]]], [], ["loc", [null, [65, 21], [65, 67]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [65, 68], [65, 90]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [66, 55], [66, 68]]]]], [], ["loc", [null, [66, 21], [66, 70]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [66, 71], [66, 93]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 52,
                    "column": 6
                  },
                  "end": {
                    "line": 68,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [53, 8], [55, 32]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [56, 8], [62, 32]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [63, 8], [67, 35]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 69,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [52, 56], [52, 69]]]]], [], ["loc", [null, [52, 36], [52, 70]]]]], 0, null, ["loc", [null, [52, 6], [68, 29]]]]],
            locals: ["disabledfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 47,
                "column": 2
              },
              "end": {
                "line": 70,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [49, 6], [49, 30]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [51, 12], [51, 26]]]]], [], 0, null, ["loc", [null, [51, 4], [69, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 46,
              "column": 0
            },
            "end": {
              "line": 71,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [47, 2], [70, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 72,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [1, 0], [44, 19]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [46, 6], [46, 27]]]]], [], 1, null, ["loc", [null, [46, 0], [71, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/select-type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    customFieldsTypes: _ember['default'].inject.service('custom-fields/types'),

    availableTypes: _ember['default'].computed.alias('customFieldsTypes.availableTypes'),

    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.attrs.onFieldTypeSelect(caseFieldType);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["get", "availableType.name", ["loc", [null, [4, 65], [4, 83]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "t-bold u-mb--");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "t-caption");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", [["get", "availableType.nameIntlKey", ["loc", [null, [6, 35], [6, 60]]]]], [], ["loc", [null, [6, 31], [6, 62]]]], ["inline", "t", [["get", "availableType.descriptionIntlKey", ["loc", [null, [7, 31], [7, 63]]]]], [], ["loc", [null, [7, 27], [7, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_case-fields_select-type");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-admin_case-fields_select-type__action");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "i-chevron-large-right i-color-grey");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["setCaseFieldType", ["get", "availableType.name", ["loc", [null, [2, 84], [2, 102]]]]], [], ["loc", [null, [2, 56], [2, 104]]]]], ["block", "ko-flag", [], [], 0, 1, ["loc", [null, [3, 4], [8, 16]]]]],
        locals: ["availableType"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "availableTypes", ["loc", [null, [1, 8], [1, 22]]]]], [], 0, null, ["loc", [null, [1, 0], [13, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/case-fields/type-icon/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    fieldType: null,

    iconClass: _ember['default'].computed.readOnly('fieldType'),
    classNameBindings: [':ko-admin_case-fields_type-icon', 'iconClass']
  });
});
define("frontend-cp/components/ko-admin/case-fields/type-icon/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-fields/type-icon/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-admin/case-forms/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    caseForm: null,
    title: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},

    fields: null,

    initFields: _ember['default'].on('init', function () {
      this.set('fields', _ember['default'].Object.create({
        case_field_ids: {}
      }));
    }),

    actions: {
      addCaseFieldToForm: function addCaseFieldToForm(caseField) {
        this.get('caseForm.fields').pushObject(caseField);
      },

      removeCaseFieldFromForm: function removeCaseFieldFromForm(caseField) {
        this.get('caseForm.fields').removeObject(caseField);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('caseForm').save().then(function () {
          _this.get('caseForm').cacheRelationships();
        });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/components/ko-admin/case-forms/edit/fields/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    caseFields: [],
    onCaseFieldAddition: function onCaseFieldAddition() {},
    onCaseFieldRemoval: function onCaseFieldRemoval() {},

    store: _ember['default'].inject.service(),
    availableCaseFields: [],

    initAvailableCaseFields: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-field').then(function (caseFields) {
        _this.set('availableCaseFields', caseFields);
      });
    }),

    systemCaseFields: _ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return caseField.get('isSystem');
      });
    }),

    customCaseFields: _ember['default'].computed('caseFields', 'caseFields.@each.isSystem', function () {
      return this.get('caseFields').filter(function (caseField) {
        return !caseField.get('isSystem');
      });
    }),

    unusedCaseFields: _ember['default'].computed('customCaseFields', 'availableCaseFields', function () {
      var usedCustomFields = this.get('customCaseFields');

      var availableCustomFields = this.get('availableCaseFields').filter(function (field) {
        return !field.get('isSystem');
      });

      return availableCustomFields.filter(function (customField) {
        return usedCustomFields.indexOf(customField) === -1;
      });
    }),

    actions: {
      reorderFields: function reorderFields(reorderedFields) {
        var sortOrder = this.get('systemCaseFields.length') - 1;

        reorderedFields.forEach(function (reorderedField) {
          reorderedField.set('sortOrder', sortOrder);
          sortOrder++;
        });
      }
    }
  });
});
define("frontend-cp/components/ko-admin/case-forms/edit/fields/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createElement("span");
            dom.setAttribute(el4, "class", "t-bold");
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode(" ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
            morphs[1] = dom.createMorphAt(element3, 2, 2);
            morphs[2] = dom.createMorphAt(dom.childAt(element2, [3, 1]), 0, 0);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [5, 53], [5, 68]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [5, 76], [5, 112]]]], ["inline", "t", [["subexpr", "ko-intl-key-for-field-type", [["get", "field.fieldType", ["loc", [null, [8, 65], [8, 80]]]]], [], ["loc", [null, [8, 37], [8, 81]]]]], [], ["loc", [null, [8, 33], [8, 83]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-box-row", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit_fields__row"], [], ["loc", [null, [2, 29], [2, 76]]]]], 0, null, ["loc", [null, [2, 2], [11, 24]]]]],
        locals: ["field"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "layout");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption t-bold");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            dom.setAttribute(el3, "class", "t-caption");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/3");
            var el3 = dom.createTextNode("\n         ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-admin_case-forms_edit_fields__action");
            var el4 = dom.createTextNode("\n           ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n         ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 0, 0);
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [18, 39], [18, 54]]]], ["inline", "t", [["subexpr", "ko-intl-key-for-field-type", [["get", "field.fieldType", ["loc", [null, [21, 65], [21, 80]]]]], [], ["loc", [null, [21, 37], [21, 81]]]]], [], ["loc", [null, [21, 33], [21, 83]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onCaseFieldRemoval", ["loc", [null, [24, 31], [24, 49]]]], ["get", "field", ["loc", [null, [24, 50], [24, 55]]]]], [], ["loc", [null, [24, 22], [24, 58]]]]], ["inline", "t", ["admin.caseforms.remove_from_form"], [], ["loc", [null, [25, 11], [25, 51]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-box-row", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit_fields__row"], [], ["loc", [null, [15, 29], [15, 76]]]]], 0, null, ["loc", [null, [15, 2], [29, 24]]]]],
        locals: ["field"],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "field.title", ["loc", [null, [40, 4], [40, 19]]]]],
          locals: ["field"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-select", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit_fields__configure-dropdown"], [], ["loc", [null, [34, 10], [34, 72]]]], "placeholder", ["subexpr", "t", ["admin.caseforms.label.add_new_field"], [], ["loc", [null, [35, 16], [35, 57]]]], "options", ["subexpr", "@mut", [["get", "unusedCaseFields", ["loc", [null, [36, 12], [36, 28]]]]], [], []], "onChange", ["subexpr", "@mut", [["get", "onCaseFieldAddition", ["loc", [null, [37, 13], [37, 32]]]]], [], []], "size", "medium"], 0, null, ["loc", [null, [33, 2], [41, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/fields/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "systemCaseFields", ["loc", [null, [1, 8], [1, 24]]]]], [], 0, null, ["loc", [null, [1, 0], [12, 9]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderFields"], [], ["loc", [null, [14, 33], [14, 57]]]], "items", ["subexpr", "@mut", [["get", "customCaseFields", ["loc", [null, [14, 64], [14, 80]]]]], [], []]], 1, null, ["loc", [null, [14, 0], [30, 24]]]], ["block", "if", [["get", "unusedCaseFields", ["loc", [null, [32, 6], [32, 22]]]]], [], 2, null, ["loc", [null, [32, 0], [42, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/components/ko-admin/case-forms/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 16,
                    "column": 71
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.caseforms.label.field_title"], [], ["loc", [null, [16, 30], [16, 71]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [16, 6], [16, 95]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms_edit__title-input"], [], ["loc", [null, [17, 47], [17, 96]]]]], [], ["loc", [null, [17, 20], [17, 97]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseForm.title", ["loc", [null, [17, 116], [17, 130]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [17, 140], [17, 152]]]]], [], []]], ["loc", [null, [17, 6], [17, 154]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.title", ["loc", [null, [18, 36], [18, 57]]]]], [], []]], ["loc", [null, [18, 6], [18, 59]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 22,
                    "column": 6
                  },
                  "end": {
                    "line": 28,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "caseForm.isEnabled", ["loc", [null, [24, 20], [24, 38]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "caseForm.isEnabled", ["loc", [null, [25, 23], [25, 41]]]], "admin.caseforms.edit.description_on.is_enabled", "admin.caseforms.edit.description_off.is_enabled"], [], ["loc", [null, [25, 19], [25, 141]]]]], [], ["loc", [null, [25, 16], [25, 142]]]]], ["loc", [null, [23, 8], [26, 10]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.isEnabled", ["loc", [null, [27, 38], [27, 63]]]]], [], []]], ["loc", [null, [27, 8], [27, 65]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [22, 6], [28, 24]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [15, 4], [19, 22]]]], ["block", "if", [["get", "caseForm.canBeDisabled", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [29, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 81
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.caseforms.help.is_visible_to_customers"], [], ["loc", [null, [43, 29], [43, 81]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 44,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-checkbox", [], ["checkboxClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__customer-available-checkbox"], [], ["loc", [null, [36, 22], [36, 81]]]], "label", ["subexpr", "t", ["admin.caseforms.label.is_visible_to_customers"], [], ["loc", [null, [37, 14], [37, 65]]]], "checked", ["subexpr", "@mut", [["get", "caseForm.isVisibleToCustomers", ["loc", [null, [38, 16], [38, 45]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [39, 17], [39, 29]]]]], [], []]], ["loc", [null, [35, 6], [40, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.isVisibleToCustomers", ["loc", [null, [42, 36], [42, 72]]]]], [], []]], ["loc", [null, [42, 6], [42, 74]]]], ["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [43, 6], [43, 104]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 48,
                      "column": 8
                    },
                    "end": {
                      "line": 48,
                      "column": 81
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.caseforms.label.customer_form_title"], [], ["loc", [null, [48, 32], [48, 81]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [48, 8], [48, 105]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms__customer-title"], [], ["loc", [null, [49, 49], [49, 96]]]]], [], ["loc", [null, [49, 22], [49, 97]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "caseForm.customerTitle", ["loc", [null, [49, 116], [49, 138]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [49, 148], [49, 160]]]]], [], []]], ["loc", [null, [49, 8], [49, 162]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.customerTitle", ["loc", [null, [50, 38], [50, 67]]]]], [], []]], ["loc", [null, [50, 8], [50, 69]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 8
                    },
                    "end": {
                      "line": 54,
                      "column": 87
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.caseforms.label.customer_form_description"], [], ["loc", [null, [54, 32], [54, 87]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                return morphs;
              },
              statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [54, 8], [54, 111]]]], ["inline", "textarea", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_case-forms__customer-description"], [], ["loc", [null, [55, 52], [55, 105]]]]], [], ["loc", [null, [55, 25], [55, 106]]]], "value", ["subexpr", "@mut", [["get", "caseForm.description", ["loc", [null, [55, 113], [55, 133]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [55, 143], [55, 155]]]]], [], []]], ["loc", [null, [55, 8], [55, 157]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "caseForm.errors.description", ["loc", [null, [56, 38], [56, 65]]]]], [], []]], ["loc", [null, [56, 8], [56, 67]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 58,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [47, 6], [51, 24]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [53, 6], [57, 24]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 2
              },
              "end": {
                "line": 59,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [34, 4], [44, 22]]]], ["block", "if", [["get", "caseForm.isVisibleToCustomers", ["loc", [null, [46, 10], [46, 39]]]]], [], 1, null, ["loc", [null, [46, 4], [58, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 4
                },
                "end": {
                  "line": 68,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-admin/case-forms/edit/fields", [], ["caseFields", ["subexpr", "@mut", [["get", "caseForm.fields", ["loc", [null, [64, 19], [64, 34]]]]], [], []], "onCaseFieldAddition", ["subexpr", "action", ["addCaseFieldToForm"], [], ["loc", [null, [65, 28], [65, 57]]]], "onCaseFieldRemoval", ["subexpr", "action", ["removeCaseFieldFromForm"], [], ["loc", [null, [66, 27], [66, 61]]]]], ["loc", [null, [63, 6], [67, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 61,
                "column": 2
              },
              "end": {
                "line": 69,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.case_field_ids", ["loc", [null, [62, 27], [62, 48]]]]], [], []]], 0, null, ["loc", [null, [62, 4], [68, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 77,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "submitClass", ["subexpr", "qa-cls", ["qa-admin_case-forms_edit__submit-button"], [], ["loc", [null, [9, 16], [9, 66]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__cancel-button"], [], ["loc", [null, [10, 22], [10, 67]]]], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [11, 15], [11, 33]]]]], ["loc", [null, [6, 2], [12, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.agent_settings"], [], ["loc", [null, [14, 33], [14, 77]]]]], 0, null, ["loc", [null, [14, 2], [30, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.customer_settings"], [], ["loc", [null, [33, 33], [33, 80]]]]], 1, null, ["loc", [null, [33, 2], [59, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.caseforms.heading.configure_form"], [], ["loc", [null, [61, 33], [61, 77]]]]], 2, null, ["loc", [null, [61, 2], [69, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [72, 13], [72, 21]]]]], [], []], "submitClass", "qa-admin_case-forms_edit__submit-button", "cancelButtonClass", "qa-admin_case-forms__cancel-button", "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [75, 15], [75, 33]]]]], ["loc", [null, [71, 2], [76, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 78,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [2, 9], [2, 15]]]]], [], []], "onSubmit", ["subexpr", "action", ["saveField"], [], ["loc", [null, [3, 11], [3, 31]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [4, 12], [4, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [77, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/forms/group/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['form-section', 'ko-admin-forms-group']
  });
});
define("frontend-cp/components/ko-admin/forms/group/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/4");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("legend");
          dom.setAttribute(el2, "class", "ko-admin-form-group__legend");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-3/4");
          var el2 = dom.createTextNode("\n     ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "legend", ["loc", [null, [4, 52], [4, 62]]]], ["content", "yield", ["loc", [null, [7, 5], [7, 14]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [11, 6], [11, 15]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/forms/group/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "legend", ["loc", [null, [2, 8], [2, 14]]]]], [], 0, 1, ["loc", [null, [2, 2], [13, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/holidays/edit/component', ['exports', 'ember', 'npm:lodash', 'moment'], function (exports, _ember, _npmLodash, _moment) {
  exports['default'] = _ember['default'].Component.extend({

    // Attributes
    model: null,
    onCancel: null,

    classNames: ['ko-admin_holidays_edit'],

    // State
    selectedGrid: null,

    initGrid: _ember['default'].on('init', function () {
      this.set('selectedGrid', this.get('holidayGrid'));
    }),

    holidayGrid: _ember['default'].computed('model', function () {
      var openHours = this.get('model.openHours');
      return [_npmLodash['default'].range(24).map(function (hour) {
        return openHours.contains(hour);
      })];
    }).readOnly(),

    hoursLegend: _ember['default'].computed(function () {
      return _npmLodash['default'].range(24).map(function (hour) {
        var label = hour + ':00';
        return hour < 10 ? '0' + label : label;
      });
    }),

    holidayDate: _ember['default'].computed('model.date', function () {
      return (0, _moment['default'])(this.get('model.date'), 'DD/MM/YYYY').toDate();
    }),

    actions: {
      selectHolidayDate: function selectHolidayDate(date) {
        this.set('model.date', (0, _moment['default'])(date).format('DD/MM/YYYY'));
      },

      selectRange: function selectRange(grid) {
        this.set('selectedGrid', grid);
        if (this.attrs.onRangeSelect) {
          this.attrs.onRangeSelect(this.get('model'));
        }
      },

      save: function save(event) {
        event.stopPropagation();
        if (!this.get('model.date')) {
          this.set('model.date', (0, _moment['default'])().format('DD/MM/YYYY'));
        }

        var hours = this.get('selectedGrid.firstObject').map(function (col, index) {
          return col ? index : col;
        });
        this.set('model.openHours', hours.filter(function (col) {
          return col !== false;
        }));
        this.attrs.onSave(this.get('model'));
      },

      cancelEditing: function cancelEditing(event) {
        event.stopPropagation();
        this.attrs.onCancel();
      }
    }
  });
});
define("frontend-cp/components/ko-admin/holidays/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 2,
                "column": 74
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/holidays/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["admin.businesshours.holidays.label.title"], [], ["loc", [null, [2, 26], [2, 74]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/holidays/edit/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          return morphs;
        },
        statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [2, 2], [2, 98]]]], ["inline", "input", [], ["class", "input input-text", "name", "title", "type", "text", "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [6, 10], [6, 21]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [7, 13], [7, 25]]]]], [], []]], ["loc", [null, [3, 2], [7, 27]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "model.errors.title", ["loc", [null, [8, 32], [8, 50]]]]], [], []]], ["loc", [null, [8, 2], [8, 52]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/holidays/edit/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-admin_holidays_edit__title ", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [16, 47], [16, 64]]]], "error"], [], ["loc", [null, [16, 42], [16, 74]]]]]]], ["inline", "ko-date-select", [], ["value", ["subexpr", "@mut", [["get", "holidayDate", ["loc", [null, [18, 12], [18, 23]]]]], [], []], "placeholder", "Add date", "onChange", ["subexpr", "action", ["selectHolidayDate"], [], ["loc", [null, [20, 15], [20, 43]]]]], ["loc", [null, [17, 4], [20, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/holidays/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "button button--default");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "button t-small");
        dom.setAttribute(el2, "name", "cancel");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [4]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createAttrMorph(element2, 'onclick');
        morphs[4] = dom.createMorphAt(element2, 1, 1);
        morphs[5] = dom.createAttrMorph(element3, 'onclick');
        morphs[6] = dom.createMorphAt(element3, 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [1, 0], [9, 18]]]], ["block", "ko-grid-picker", [], ["initialGrid", ["subexpr", "@mut", [["get", "holidayGrid", ["loc", [null, [12, 14], [12, 25]]]]], [], []], "legend", ["subexpr", "@mut", [["get", "hoursLegend", ["loc", [null, [13, 9], [13, 20]]]]], [], []], "onRangeSelect", ["subexpr", "action", ["selectRange"], [], ["loc", [null, [14, 16], [14, 38]]]]], 1, null, ["loc", [null, [11, 0], [22, 19]]]], ["attribute", "class", ["concat", [["subexpr", "qa-cls", ["ko-admin_holidays_edit__buttons"], [], ["loc", [null, [24, 12], [24, 56]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["save"], [], ["loc", [null, [26, 11], [26, 28]]]]], ["inline", "t", ["admin.businesshours.holidays.saveholiday"], [], ["loc", [null, [28, 4], [28, 52]]]], ["attribute", "onclick", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [32, 26], [32, 52]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [33, 4], [33, 26]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/holidays/row/component', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Component.extend({
    model: null,
    tagName: '',

    formattedDate: _ember['default'].computed('model.date', function () {
      return (0, _moment['default'])(this.get('model.date'), 'DD/MM/YYYY');
    }),

    actions: {
      editHoliday: function editHoliday() {
        this.set('isEditing', true);
      },

      cancelEditing: function cancelEditing() {
        this.set('isEditing', false);
      },

      deleteHoliday: function deleteHoliday() {
        this.attrs.onHolidayDelete(this.get('model'));
      },

      saveHoliday: function saveHoliday() {
        this.set('isEditing', false);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/holidays/row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-admin/holidays/edit", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 14], [5, 19]]]]], [], []], "onSave", ["subexpr", "action", ["saveHoliday"], [], ["loc", [null, [6, 15], [6, 37]]]], "onCancel", ["subexpr", "action", ["cancelEditing"], [], ["loc", [null, [7, 17], [7, 41]]]]], ["loc", [null, [4, 6], [7, 43]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [3, 4], [8, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-bold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "model.title", ["loc", [null, [11, 27], [11, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["inline", "format-date", [["get", "formattedDate", ["loc", [null, [14, 44], [14, 57]]]]], ["format", "full"], ["loc", [null, [14, 30], [14, 73]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createTextNode("|");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(fragment, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              morphs[2] = dom.createAttrMorph(element1, 'onclick');
              morphs[3] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["editHoliday", ["get", "model", ["loc", [null, [18, 40], [18, 45]]]]], [], ["loc", [null, [18, 17], [18, 47]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [18, 48], [18, 68]]]], ["attribute", "onclick", ["subexpr", "action", ["deleteHoliday", ["get", "model", ["loc", [null, [20, 42], [20, 47]]]]], [], ["loc", [null, [20, 17], [20, 49]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [20, 50], [20, 72]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [10, 4], [12, 28]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [13, 4], [15, 28]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [17, 4], [21, 31]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isEditing", ["loc", [null, [2, 8], [2, 17]]]]], [], 0, 1, ["loc", [null, [2, 2], [22, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/holidays/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "if", [["subexpr", "not", [["get", "isEditing", ["loc", [null, [1, 39], [1, 48]]]]], [], ["loc", [null, [1, 34], [1, 49]]]], ["subexpr", "action", ["editHoliday", ["get", "model", ["loc", [null, [1, 72], [1, 77]]]]], [], ["loc", [null, [1, 50], [1, 78]]]]], [], ["loc", [null, [1, 30], [1, 79]]]]], 0, null, ["loc", [null, [1, 0], [23, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/inline-locale-edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    localeFields: null,
    inputType: 'text',

    // State
    translationEditProxy: null,
    defaultLocale: '',

    // HTML
    tagName: 'div',
    classNames: ['ko-admin_inline-locale-edit'],
    classNameBindings: ['isTextArea:ko-admin_inline-locale-edit--text-area'],

    store: _ember['default'].inject.service(),

    getDefaultLocale: _ember['default'].on('didInitAttrs', function () {
      this.set('translationEditProxy', _ember['default'].Object.create({}));
      this.set('defaultLocale', this.get('store').peekAll('locale').get('firstObject.locale'));
    }),

    isVisible: _ember['default'].computed('localeFields', function () {
      return this.get('localeFields').length > 1;
    }),

    isTextArea: _ember['default'].computed.equal('inputType', 'textArea'),

    translationsForField: _ember['default'].computed('localeFields', function () {
      var currentLocale = this.get('store').peekAll('locale').get('firstObject.id');
      var localeFields = this.get('localeFields');

      return localeFields.filter(function (localeField) {
        return localeField.get('locale') !== currentLocale;
      });
    }),

    isEdited: _ember['default'].computed('localeFields.@each.hasDirtyAttributes', 'localeFields.@each.translation', function () {
      var fieldLocales = this.get('translationsForField');
      var populatedFieldLocales = fieldLocales.find(function (fieldLocale) {
        return fieldLocale.get('translation');
      });

      return populatedFieldLocales && fieldLocales.isAny('hasDirtyAttributes', true);
    })
  });
});
define("frontend-cp/components/ko-admin/inline-locale-edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-select");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'class');
            morphs[2] = dom.createMorphAt(element4, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-admin_inline-locale-edit__modal-button ", ["subexpr", "if", [["get", "isEdited", ["loc", [null, [4, 66], [4, 74]]]], "ko-admin_inline-locale-edit__modal-button--is-edited"], [], ["loc", [null, [4, 61], [4, 131]]]]]]], ["attribute", "class", ["concat", [["subexpr", "locale-flag", [["get", "defaultLocale", ["loc", [null, [5, 35], [5, 48]]]]], [], ["loc", [null, [5, 21], [5, 50]]]]]]], ["content", "defaultLocale", ["loc", [null, [5, 52], [5, 69]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 10
                  },
                  "end": {
                    "line": 14,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "input", [], ["type", "text", "class", "ko-admin_inline-locale-edit__text input input-text input-text--full", "value", ["subexpr", "@mut", [["get", "localeField.translation", ["loc", [null, [13, 114], [13, 137]]]]], [], []]], ["loc", [null, [13, 12], [13, 139]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 10
                  },
                  "end": {
                    "line": 17,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "textarea", [], ["type", "text", "class", "ko-admin_inline-locale-edit__text input-text input-text--full", "value", ["subexpr", "@mut", [["get", "localeField.translation", ["loc", [null, [16, 111], [16, 134]]]]], [], []]], ["loc", [null, [16, 12], [16, 136]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["attribute", "class", ["subexpr", "locale-flag", [["get", "localeField.locale", ["loc", [null, [11, 36], [11, 54]]]]], [], ["loc", [null, [11, 22], [11, 56]]]]], ["content", "localeField.locale", ["loc", [null, [11, 57], [11, 79]]]], ["block", "if", [["subexpr", "eq", [["get", "inputType", ["loc", [null, [12, 20], [12, 29]]]], "text"], [], ["loc", [null, [12, 16], [12, 37]]]]], [], 0, null, ["loc", [null, [12, 10], [14, 17]]]], ["block", "if", [["subexpr", "eq", [["get", "inputType", ["loc", [null, [15, 20], [15, 29]]]], "textArea"], [], ["loc", [null, [15, 16], [15, 41]]]]], [], 1, null, ["loc", [null, [15, 10], [17, 17]]]]],
            locals: ["localeField"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin_inline-locale-edit__popover");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item u-1/1 t-right");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-admin_inline-locale-edit__item button button--primary");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3, 1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element1, 1, 1);
            morphs[1] = dom.createAttrMorph(element2, 'onClick');
            morphs[2] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "translationsForField", ["loc", [null, [10, 16], [10, 36]]]]], [], 0, null, ["loc", [null, [10, 8], [18, 17]]]], ["attribute", "onClick", ["get", "translationEditProxy.close", ["loc", [null, [21, 90], [21, 116]]]]], ["inline", "t", ["admin.casefields.buttons.complete_locale_edit"], [], ["loc", [null, [22, 12], [22, 65]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin_inline-locale-edit__container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "ko-context-modal", [], ["proxy", ["subexpr", "@mut", [["get", "translationEditProxy", ["loc", [null, [3, 30], [3, 50]]]]], [], []], "closeOnClickOutside", true], 0, 1, ["loc", [null, [3, 4], [26, 25]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/inline-locale-edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isVisible", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [28, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/add-tags/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),

    selectedTags: _ember['default'].computed('macro.addTags.[]', function () {
      return this.get('macro.addTags').map(function (tag) {
        return _ember['default'].Object.create({
          name: tag
        });
      });
    }),

    actions: {
      addTag: function addTag(tag) {
        this.get('macro.addTags').addObject(tag);
      },

      removeTag: function removeTag(tag) {
        this.get('macro.addTags').removeObject(tag);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/add-tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/add-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-tags-input", [], ["selectedTags", ["subexpr", "@mut", [["get", "selectedTags", ["loc", [null, [3, 17], [3, 29]]]]], [], []], "addTag", ["subexpr", "action", ["addTag"], [], ["loc", [null, [4, 11], [4, 28]]]], "removeTag", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [5, 14], [5, 34]]]]], ["loc", [null, [2, 2], [5, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/add-tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/assignee/component', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, _ember, _emberData, _npmLodash) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    store: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service(),

    agents: _ember['default'].computed(function () {
      return _emberData['default'].PromiseArray.create({
        promise: this.get('store').query('user', { role: 'agent', limit: 500 })
      });
    }),

    teams: _ember['default'].computed(function () {
      return _emberData['default'].PromiseArray.create({
        promise: this.get('storeCache').query('team', { limit: 10000 })
      });
    }),

    agentValues: _ember['default'].computed('agents.[]', function () {
      return _npmLodash['default'].flatten(this.get('agents').map(function (agent) {
        return agent.get('teams').map(function (team) {
          return { agent: agent, team: team };
        });
      }));
    }),

    teamValues: _ember['default'].computed('teams.[]', function () {
      return this.get('teams').map(function (team) {
        return { team: team };
      });
    }),

    availableAssignees: _ember['default'].computed('teamValues.[]', 'agentValues.[]', function () {
      var agentValues = this.get('agentValues');

      return this.get('teamValues').map(function (teamValue) {
        return {
          label: teamValue.team.get('title'),

          children: [{
            value: teamValue,
            path: teamValue.team.get('title')
          }].concat(agentValues.filter(function (agentValue) {
            return agentValue.team === teamValue.team;
          }).map(function (agentValue) {
            return {
              value: agentValue,
              label: agentValue.agent.get('fullName')
            };
          }))
        };
      });
    }),

    assignee: _ember['default'].computed('agentValues', 'teamValues', 'macro.{assigneeType,assigneeAgent,assigneeTeam}', function () {
      var _this = this;

      var assigneeType = this.get('macro.assigneeType');
      var assigneeTeam = this.get('macro.assigneeTeam');

      if (assigneeType === 'AGENT') {
        return this.get('agentValues').find(function (agentValue) {
          return _this.get('macro.assigneeAgent') === agentValue.agent && assigneeTeam === agentValue.team;
        });
      } else if (assigneeType === 'TEAM') {
        return this.get('teamValues').findBy('team', assigneeTeam);
      }

      return null;
    }),

    actions: {
      selectAssignee: function selectAssignee(value) {
        var macro = this.get('macro');

        if (value.agent) {
          macro.setProperties({
            assigneeAgent: value.agent,
            assigneeTeam: value.team,
            assigneeType: 'AGENT'
          });
        } else {
          macro.setProperties({
            assigneeAgent: null,
            assigneeTeam: value.team,
            assigneeType: 'TEAM'
          });
        }
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/assignee/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-dropdown/basic-drill-down", [], ["rootNodes", ["subexpr", "@mut", [["get", "availableAssignees", ["loc", [null, [3, 14], [3, 32]]]]], [], []], "value", ["subexpr", "@mut", [["get", "assignee", ["loc", [null, [4, 10], [4, 18]]]]], [], []], "onChange", ["subexpr", "action", ["selectAssignee"], [], ["loc", [null, [5, 13], [5, 38]]]]], ["loc", [null, [2, 2], [5, 40]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/component', ['exports', 'ember'], function (exports, _ember) {
  exports.actionType = actionType;

  var ActionType = _ember['default'].Object.extend({
    context: null,
    macro: _ember['default'].computed.readOnly('context.action.macro')
  });

  function actionType(context, params) {
    return ActionType.extend({
      context: context
    }, params).create();
  }

  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-admin-macros-action'],
    action: null,
    intl: _ember['default'].inject.service(),

    activeType: _ember['default'].computed('types.@each.isActive', function () {
      return this.get('types').findBy('isActive', true);
    }),

    types: _ember['default'].computed(function () {
      return [actionType(this, {
        label: this.get('intl').findTranslationByKey('admin.macros.label.change_to'),
        isActive: true
      })];
    }),

    actions: {
      remove: function remove() {
        this.get('action').deactivate();
      },

      selectType: function selectType(type) {
        if (typeof type.activate === 'function') {
          type.activate();
        }
      }
    }
  });
});
define('frontend-cp/components/ko-admin/macros/action/priority/component', ['exports', 'ember', 'frontend-cp/components/ko-admin/macros/action/component'], function (exports, _ember, _frontendCpComponentsKoAdminMacrosActionComponent) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    priority: _ember['default'].computed.readOnly('macro.priority'),
    priorities: null,
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),

    types: _ember['default'].computed(function () {
      return [(0, _frontendCpComponentsKoAdminMacrosActionComponent.actionType)(this, {
        label: this.get('intl').findTranslationByKey('admin.macros.label.change_to'),
        isActive: _ember['default'].computed.none('macro.priorityAction'),

        activate: function activate() {
          this.set('macro.priorityAction', null);
        }
      }), (0, _frontendCpComponentsKoAdminMacrosActionComponent.actionType)(this, {
        label: this.get('intl').findTranslationByKey('admin.macros.actions.priority.increase_one_level'),
        isActive: _ember['default'].computed.equal('macro.priorityAction', 'INCREASE_ONE_LEVEL'),

        activate: function activate() {
          this.get('macro').setProperties({
            priorityAction: 'INCREASE_ONE_LEVEL',
            priority: null
          });
        }
      }), (0, _frontendCpComponentsKoAdminMacrosActionComponent.actionType)(this, {
        label: this.get('intl').findTranslationByKey('admin.macros.actions.priority.decrease_one_level'),
        isActive: _ember['default'].computed.equal('macro.priorityAction', 'DECREASE_ONE_LEVEL'),

        activate: function activate() {
          this.get('macro').setProperties({
            priorityAction: 'DECREASE_ONE_LEVEL',
            priority: null
          });
        }
      })];
    }),

    initPriorities: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-priority').then(function (priorities) {
        _this.set('priorities', priorities);
      });
    }),

    actions: {
      selectPriority: function selectPriority(priority) {
        this.set('macro.priority', priority);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/priority/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/action/priority/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "priority.label", ["loc", [null, [4, 6], [4, 24]]]]],
            locals: ["priority"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/action/priority/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [3, 25], [3, 35]]]]], [], []], "onChange", ["subexpr", "action", ["selectPriority"], [], ["loc", [null, [3, 45], [3, 70]]]], "selected", ["subexpr", "@mut", [["get", "priority", ["loc", [null, [3, 80], [3, 88]]]]], [], []]], 0, null, ["loc", [null, [3, 4], [5, 18]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/priority/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "macro.priorityAction", ["loc", [null, [2, 12], [2, 32]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [1, 46], [1, 51]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [7, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/remove-tags/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),

    selectedTags: _ember['default'].computed('macro.removeTags.[]', function () {
      return this.get('macro.removeTags').map(function (tag) {
        return _ember['default'].Object.create({
          name: tag
        });
      });
    }),

    actions: {
      addTag: function addTag(tag) {
        this.get('macro.removeTags').addObject(tag);
      },

      removeTag: function removeTag(tag) {
        this.get('macro.removeTags').removeObject(tag);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/remove-tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/remove-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-tags-input", [], ["selectedTags", ["subexpr", "@mut", [["get", "selectedTags", ["loc", [null, [3, 17], [3, 29]]]]], [], []], "addTag", ["subexpr", "action", ["addTag"], [], ["loc", [null, [4, 11], [4, 28]]]], "removeTag", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [5, 14], [5, 34]]]]], ["loc", [null, [2, 2], [5, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/remove-tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [6, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/reply-contents/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    classNames: ['ko-admin_macros_action_reply-contents']
  });
});
define("frontend-cp/components/ko-admin/macros/action/reply-contents/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/reply-contents/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "textarea", [], ["class", "input-text ko-admin-macros-action-reply-contents__textarea", "value", ["subexpr", "@mut", [["get", "macro.replyContents", ["loc", [null, [4, 10], [4, 29]]]]], [], []]], ["loc", [null, [2, 2], [4, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/reply-contents/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["types", null, "action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 44], [1, 50]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [5, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/reply-type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    selectedTypeId: _ember['default'].computed.readOnly('macro.replyType'),
    intl: _ember['default'].inject.service(),

    selectedType: _ember['default'].computed('selectedTypeId', function () {
      return this.get('availableTypes').findBy('id', this.get('selectedTypeId'));
    }),

    availableTypes: _ember['default'].computed(function () {
      return [{
        id: 'REPLY',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.reply_type.reply')
      }, {
        id: 'NOTE',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.reply_type.note')
      }];
    }),

    actions: {
      selectType: function selectType(type) {
        this.set('macro.replyType', type.id);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/reply-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/action/reply-type/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "type.label", ["loc", [null, [3, 4], [3, 18]]]]],
          locals: ["type"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/reply-type/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "availableTypes", ["loc", [null, [2, 23], [2, 37]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedType", ["loc", [null, [2, 47], [2, 59]]]]], [], []], "onChange", ["subexpr", "action", ["selectType"], [], ["loc", [null, [2, 69], [2, 90]]]]], 0, null, ["loc", [null, [2, 2], [4, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/reply-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [5, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/status/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    status: _ember['default'].computed.readOnly('macro.status'),
    statuses: null,
    store: _ember['default'].inject.service(),

    initStatuses: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-status').then(function (statuses) {
        _this.set('statuses', statuses);
      });
    }),

    actions: {
      selectStatus: function selectStatus(status) {
        this.set('macro.status', status);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/status/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/action/status/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "status.label", ["loc", [null, [3, 4], [3, 20]]]]],
          locals: ["status"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/status/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [2, 23], [2, 31]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "status", ["loc", [null, [2, 41], [2, 47]]]]], [], []], "onChange", ["subexpr", "action", ["selectStatus"], [], ["loc", [null, [2, 57], [2, 80]]]]], 0, null, ["loc", [null, [2, 2], [4, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [5, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-admin/macros/action/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 16,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/action/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "type.label", ["loc", [null, [15, 8], [15, 22]]]]],
          locals: ["type"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-macros-action__types");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "types", ["loc", [null, [14, 27], [14, 32]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "activeType", ["loc", [null, [14, 42], [14, 52]]]]], [], []], "onChange", ["subexpr", "action", ["selectType"], [], ["loc", [null, [14, 62], [14, 83]]]]], 0, null, ["loc", [null, [14, 6], [16, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-admin-macros-action__remove i-minus-square");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-macros-action__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-admin-macros-action__label");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ember-power-select ember-basic-dropdown ember-basic-dropdown--disabled");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ember-basic-dropdown-trigger ember-power-select-trigger");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-admin-macros-action__form");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "onclick", ["subexpr", "action", ["remove"], [], ["loc", [null, [1, 68], [1, 87]]]]], ["content", "action.label", ["loc", [null, [7, 8], [7, 24]]]], ["block", "if", [["get", "types", ["loc", [null, [12, 8], [12, 13]]]]], [], 0, null, ["loc", [null, [12, 2], [18, 9]]]], ["content", "yield", ["loc", [null, [21, 4], [21, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/action/type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    action: null,
    macro: _ember['default'].computed.readOnly('action.macro'),
    type: _ember['default'].computed.readOnly('macro.caseType'),
    types: null,
    store: _ember['default'].inject.service(),

    initTypes: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('case-type').then(function (types) {
        _this.set('types', types);
      });
    }),

    actions: {
      selectType: function selectType(type) {
        this.set('macro.caseType', type);
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/action/type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/action/type/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "type.label", ["loc", [null, [3, 4], [3, 18]]]]],
          locals: ["type"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/action/type/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "types", ["loc", [null, [2, 23], [2, 28]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 38], [2, 42]]]]], [], []], "onChange", ["subexpr", "action", ["selectType"], [], ["loc", [null, [2, 52], [2, 73]]]]], 0, null, ["loc", [null, [2, 2], [4, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/action/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin/macros/action", [], ["action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [1, 33], [1, 39]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [5, 27]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/macros/edit/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Component.extend({
    macro: null,
    title: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},

    store: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service(),

    teams: null,
    statuses: null,
    priorities: null,
    types: null,
    selectedTeam: _ember['default'].computed.readOnly('macro.visibleToTeam'),

    macroActions: _ember['default'].computed(function () {
      var _this = this;

      var macroAction = function macroAction(params) {
        return _ember['default'].Object.extend({
          id: null,
          label: null,
          context: _this,
          macro: _ember['default'].computed.readOnly('context.macro'),
          activeMacroActions: _ember['default'].computed.readOnly('context.activeMacroActions'),

          component: _ember['default'].computed('id', function () {
            return 'ko-admin/macros/action/' + this.get('id');
          }),

          activate: function activate() {
            this.set('isActive', true);

            if (typeof this.onActivate === 'function') {
              this.onActivate();
            }
          },

          deactivate: function deactivate() {
            this.set('isActive', false);

            if (typeof this.onDeactivate === 'function') {
              this.onDeactivate();
            }
          }
        }, params).create();
      };

      return [macroAction({
        id: 'reply-contents',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.reply_contents.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.replyContents'));
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.replyContents', null);
        }
      }), macroAction({
        id: 'reply-type',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.reply_type.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.replyType'));
        }),

        onActivate: function onActivate() {
          this.set('macro.replyType', 'REPLY');
        },

        onDeactivate: function onDeactivate() {
          this.set('macro.replyType', null);
        }
      }), macroAction({
        id: 'assignee',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.assignee.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.assigneeType'));
        }),

        onDeactivate: function onDeactivate() {
          this.get('macro').setProperties({
            assigneeType: null,
            assigneeAgent: null,
            assigneeTeam: null
          });
        }
      }), macroAction({
        id: 'status',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.status.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.status'));
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.status', null);
        }
      }), macroAction({
        id: 'type',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.type.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.caseType'));
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.caseType', null);
        }
      }), macroAction({
        id: 'add-tags',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.add_tags.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.addTags'));
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.addTags', null);
        }
      }), macroAction({
        id: 'remove-tags',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.remove_tags.label'),

        isActive: _ember['default'].computed('macro', function () {
          return _ember['default'].isPresent(this.get('macro.removeTags'));
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.removeTags', null);
        }
      }), macroAction({
        id: 'priority',
        label: this.get('intl').findTranslationByKey('admin.macros.actions.priority.label'),

        // this needs to depend only on macro
        // so that it doesn't deactivate when we set both properties to null
        isActive: _ember['default'].computed('macro', function () {
          return this.get('macro.priorityAction') || this.get('macro.priority');
        }),

        onDeactivate: function onDeactivate() {
          this.set('macro.priority', null);
          this.set('macro.priorityAction', null);
        }
      })];
    }),

    activeMacroActions: _ember['default'].computed.filterBy('macroActions', 'isActive'),

    initTeams: _ember['default'].on('init', function () {
      var _this2 = this;

      this.get('storeCache').query('team', { limit: 10000 }).then(function (teams) {
        _this2.set('teams', teams);
      });
    }),

    initPriorities: _ember['default'].on('init', function () {
      var _this3 = this;

      this.get('store').findAll('case-priority').then(function (priorities) {
        _this3.set('priorities', priorities);
      });
    }),

    selectableMacroActions: _ember['default'].computed('activeMacroActions.[]', function () {
      return _npmLodash['default'].difference(this.get('macroActions'), this.get('activeMacroActions'));
    }),

    actions: {
      saveMacro: function saveMacro() {
        var _this4 = this;

        return this.get('macro').save()['catch'](function (error) {
          if (error.errors.findBy('code', 'ANY_FIELD_REQUIRED')) {
            _this4.get('notification').add({
              type: 'error',
              title: _this4.get('intl').findTranslationByKey('admin.macros.errors.actions.required'),
              autodismiss: true,
              dismissable: true
            });
          }

          throw error;
        });
      },

      setMacroSharing: function setMacroSharing(sharing) {
        var macro = this.get('macro');

        switch (sharing) {
          case 'PRIVATE':
            macro.set('visibleToTeam', null);
            macro.set('visibilityType', 'PRIVATE');
            break;
          case 'ALL':
            macro.set('visibleToTeam', null);
            macro.set('visibilityType', 'ALL');
            break;
          case 'TEAM':
            macro.set('visibilityType', 'TEAM');
            break;
        }
      },

      selectTeam: function selectTeam(team) {
        this.get('macro').set('visibleToTeam', team);
      },

      addNewAction: function addNewAction(macroAction) {
        macroAction.activate();
      }
    }
  });
});
define("frontend-cp/components/ko-admin/macros/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 15,
                    "column": 62
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.macros.label.title"], [], ["loc", [null, [15, 30], [15, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [15, 6], [15, 86]]]], ["inline", "input", [], ["class", ["subexpr", "concat", ["input input-text", ["subexpr", "qa-cls", [" qa-admin_macros_edit__title-input"], [], ["loc", [null, [16, 47], [16, 92]]]]], [], ["loc", [null, [16, 20], [16, 93]]]], "type", "text", "value", ["subexpr", "@mut", [["get", "macro.title", ["loc", [null, [16, 112], [16, 123]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [16, 133], [16, 145]]]]], [], []]], ["loc", [null, [16, 6], [16, 147]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "macro.errors.title", ["loc", [null, [17, 36], [17, 54]]]]], [], []]], ["loc", [null, [17, 6], [17, 56]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [14, 4], [18, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 72
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.macros.label.visibility_type"], [], ["loc", [null, [23, 30], [23, 72]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 8
                  },
                  "end": {
                    "line": 39,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "team.title", ["loc", [null, [38, 12], [38, 26]]]]],
              locals: ["team"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block ko-admin_macros_edit__team-selector");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
              morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [23, 6], [23, 96]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-just-myself"], [], ["loc", [null, [24, 23], [24, 49]]]], "label", ["subexpr", "t", ["admin.macros.radio.label.me"], [], ["loc", [null, [24, 56], [24, 89]]]], "checked", ["subexpr", "eq", [["get", "macro.visibilityType", ["loc", [null, [24, 102], [24, 122]]]], "PRIVATE"], [], ["loc", [null, [24, 98], [24, 133]]]], "onRadio", ["subexpr", "action", ["setMacroSharing", "PRIVATE"], [], ["loc", [null, [24, 142], [24, 178]]]], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [24, 188], [24, 200]]]]], [], []]], ["loc", [null, [24, 6], [24, 202]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-every-agent"], [], ["loc", [null, [25, 23], [25, 49]]]], "label", ["subexpr", "t", ["admin.macros.radio.label.all"], [], ["loc", [null, [25, 56], [25, 90]]]], "checked", ["subexpr", "eq", [["get", "macro.visibilityType", ["loc", [null, [25, 103], [25, 123]]]], "ALL"], [], ["loc", [null, [25, 99], [25, 130]]]], "onRadio", ["subexpr", "action", ["setMacroSharing", "ALL"], [], ["loc", [null, [25, 139], [25, 171]]]], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [25, 181], [25, 193]]]]], [], []]], ["loc", [null, [25, 6], [25, 195]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-specific-team"], [], ["loc", [null, [28, 25], [28, 53]]]], "label", ["subexpr", "t", ["admin.macros.radio.label.specific"], [], ["loc", [null, [28, 60], [28, 99]]]], "checked", ["subexpr", "eq", [["get", "macro.visibilityType", ["loc", [null, [28, 112], [28, 132]]]], "TEAM"], [], ["loc", [null, [28, 108], [28, 140]]]], "onRadio", ["subexpr", "action", ["setMacroSharing", "TEAM"], [], ["loc", [null, [28, 149], [28, 182]]]], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [28, 192], [28, 204]]]]], [], []]], ["loc", [null, [28, 8], [28, 206]]]], ["block", "ko-select", [], ["size", "medium", "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [33, 22], [33, 54]]]], "options", ["subexpr", "@mut", [["get", "teams", ["loc", [null, [34, 18], [34, 23]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedTeam", ["loc", [null, [35, 19], [35, 31]]]]], [], []], "onChange", ["subexpr", "action", ["selectTeam"], [], ["loc", [null, [36, 19], [36, 40]]]], "disabled", ["subexpr", "not-eq", [["get", "macro.visibilityType", ["loc", [null, [37, 27], [37, 47]]]], "TEAM"], [], ["loc", [null, [37, 19], [37, 55]]]]], 1, null, ["loc", [null, [31, 8], [39, 22]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "macro.errors.visibilityType", ["loc", [null, [41, 36], [41, 63]]]]], [], []]], ["loc", [null, [41, 6], [41, 65]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [22, 4], [42, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 6
                },
                "end": {
                  "line": 47,
                  "column": 66
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["admin.macros.heading.actions"], [], ["loc", [null, [47, 30], [47, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 6
                },
                "end": {
                  "line": 56,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "macroAction.label", ["loc", [null, [55, 10], [55, 31]]]]],
            locals: ["macroAction"],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 59,
                  "column": 4
                },
                "end": {
                  "line": 64,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "macroAction.component", ["loc", [null, [61, 8], [61, 29]]]]], ["action", ["subexpr", "@mut", [["get", "macroAction", ["loc", [null, [62, 15], [62, 26]]]]], [], []], "class", ["subexpr", "concat", ["qa-ko-admin-macros-action-", ["get", "macroAction.id", ["loc", [null, [63, 51], [63, 65]]]]], [], ["loc", [null, [63, 14], [63, 66]]]]], ["loc", [null, [60, 6], [63, 68]]]]],
            locals: ["macroAction"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin_macros_edit__actions-selector");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [47, 6], [47, 90]]]], ["block", "ko-select", [], ["disabled", ["subexpr", "not", [["get", "selectableMacroActions", ["loc", [null, [50, 22], [50, 44]]]]], [], ["loc", [null, [50, 17], [50, 45]]]], "size", "medium", "options", ["subexpr", "@mut", [["get", "selectableMacroActions", ["loc", [null, [52, 16], [52, 38]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.macros.label.new_action"], [], ["loc", [null, [53, 20], [53, 55]]]], "onChange", ["subexpr", "action", ["addNewAction"], [], ["loc", [null, [54, 17], [54, 40]]]]], 1, null, ["loc", [null, [49, 6], [56, 20]]]], ["block", "each", [["get", "activeMacroActions", ["loc", [null, [59, 12], [59, 30]]]]], [], 2, null, ["loc", [null, [59, 4], [64, 13]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [7, 13], [7, 21]]]]], [], []], "submitClass", ["subexpr", "qa-cls", ["qa-admin_macros_edit__submit-button"], [], ["loc", [null, [8, 16], [8, 62]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_macros__cancel-button"], [], ["loc", [null, [9, 22], [9, 63]]]], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [10, 15], [10, 33]]]]], ["loc", [null, [5, 2], [11, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.macros.heading.details"], [], ["loc", [null, [13, 33], [13, 67]]]]], 0, null, ["loc", [null, [13, 2], [19, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.macros.heading.sharing"], [], ["loc", [null, [21, 33], [21, 67]]]]], 1, null, ["loc", [null, [21, 2], [43, 27]]]], ["block", "ko-admin/forms/group", [], [], 2, null, ["loc", [null, [45, 2], [65, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [68, 13], [68, 21]]]]], [], []], "submitClass", "qa-admin_macros_edit__submit-button", "cancelButtonClass", "qa-admin_macros__cancel-button", "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [71, 15], [71, 33]]]]], ["loc", [null, [67, 2], [72, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/macros/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["saveMacro"], [], ["loc", [null, [2, 11], [2, 31]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [73, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/page-container/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // State
    resizeSidebarsRequestID: null,

    resizeSidebarAndContent: _ember['default'].on('willInsertElement', function () {
      var _this = this;

      this.set('resizeSidebarsRequestID', window.requestAnimationFrame(function () {
        var sideBar = _ember['default'].$('.ko-admin-sidebar');
        var content = _ember['default'].$('.ko-admin-content');
        sideBar.css('min-height', content.height());

        _this.resizeSidebarAndContent();
      }));
    }),

    cleanup: _ember['default'].on('willDestroyElement', function () {
      window.cancelAnimationFrame(this.get('resizeSidebarsRequestID'));
    })
  });
});
define("frontend-cp/components/ko-admin/page-container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 5,
              "column": 27
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h3");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-admin-index");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-session-admin-index__sidebar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-session-admin-index__content content__main content__main--has-sidebar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ko-admin-content");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [3]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["admin.administration"], [], ["loc", [null, [2, 6], [2, 34]]]], ["block", "ko-admin/sidebar", [], [], 0, null, ["loc", [null, [5, 6], [5, 48]]]], ["content", "outlet", ["loc", [null, [9, 8], [9, 18]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/page-footer/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null,

    // HTML
    classNames: ['ko-admin_page-footer']
  });
});
define("frontend-cp/components/ko-admin/page-footer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-footer/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-form/buttons", [], ["submitLabel", ["subexpr", "@mut", [["get", "buttonText", ["loc", [null, [1, 30], [1, 40]]]]], [], []], "submitClass", ["subexpr", "@mut", [["get", "submitClass", ["loc", [null, [1, 53], [1, 64]]]]], [], []], "cancelLabel", ["subexpr", "@mut", [["get", "cancelButtonText", ["loc", [null, [1, 77], [1, 93]]]]], [], []], "onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [1, 103], [1, 109]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [1, 119], [1, 127]]]]], [], []]], ["loc", [null, [1, 0], [1, 129]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-admin/page-header/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    title: null,
    buttonText: null,
    cancelButtonText: 'Cancel',
    onCancel: null,
    onSave: null,

    // HTML
    classNames: ['ko-admin_page-header'],

    titleTrail: _ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(0, title.lastIndexOf('/') + 1);
    }),

    pageTitle: _ember['default'].computed('title', function () {
      var title = this.get('title');
      return title.slice(title.lastIndexOf('/') + 1).trim();
    })
  });
});
define("frontend-cp/components/ko-admin/page-header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 8
            },
            "end": {
              "line": 7,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-caption");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "titleTrail", ["loc", [null, [6, 34], [6, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-header__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "pageCopy", ["loc", [null, [19, 4], [19, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-header__spacer");
          var el2 = dom.createTextNode(" ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/page-header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-2/3 u-v-align");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h3");
        dom.setAttribute(el4, "class", "ko-admin-header__title");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/3 t-right");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0, 1]);
        var element1 = dom.childAt(element0, [1, 1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element1, 1, 1);
        morphs[1] = dom.createMorphAt(element1, 3, 3);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "titleTrail", ["loc", [null, [5, 14], [5, 24]]]]], [], 0, null, ["loc", [null, [5, 8], [7, 15]]]], ["content", "pageTitle", ["loc", [null, [8, 8], [8, 21]]]], ["inline", "ko-form/buttons", [], ["submitLabel", ["subexpr", "@mut", [["get", "buttonText", ["loc", [null, [12, 38], [12, 48]]]]], [], []], "submitClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [12, 61], [12, 72]]]]], [], []], "cancelButtonClass", ["subexpr", "@mut", [["get", "cancelButtonClass", ["loc", [null, [12, 91], [12, 108]]]]], [], []], "cancelLabel", ["subexpr", "@mut", [["get", "cancelButtonText", ["loc", [null, [12, 121], [12, 137]]]]], [], []], "onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [12, 147], [12, 153]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [12, 163], [12, 171]]]]], [], []]], ["loc", [null, [12, 8], [12, 173]]]], ["block", "if", [["get", "pageCopy", ["loc", [null, [17, 6], [17, 14]]]]], [], 1, 2, ["loc", [null, [17, 0], [23, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-admin/roles/form/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;

  var Permission = _ember['default'].Object.extend({
    context: null,
    name: null,
    values: null,
    hasHelpText: false,
    role: computed.readOnly('context.role'),

    translationKey: computed('name', function () {
      return _ember['default'].String.underscore(this.get('name'));
    }),

    isEnabled: computed('values.[]', 'role.permissions.@each.value', function () {
      var _this = this;

      return this.get('values').every(function (name) {
        var permission = _this.get('role.permissions').findBy('name', name);
        return !!permission && permission.get('value');
      });
    })
  });

  var PermissionGroup = _ember['default'].Object.extend({
    context: null,
    name: null,
    isAvailable: true,
    permissions: null,
    role: computed.readOnly('context.role'),

    translationKey: computed('name', function () {
      return _ember['default'].String.underscore(this.get('name'));
    })
  });

  var AdminPermissionGroup = PermissionGroup.extend({
    isAvailable: computed('role.roleType', function () {
      return ['ADMIN', 'OWNER'].contains(this.get('role.roleType'));
    })
  });

  exports['default'] = _ember['default'].Component.extend({
    notification: inject.service(),
    intl: inject.service(),
    roles: inject.service(),
    role: null,
    availablePermissionGroups: computed.filterBy('permissionGroups', 'isAvailable'),

    initializePermissions: _ember['default'].on('init', function () {
      if (!this.get('role.isNew')) {
        return;
      }

      _npmLodash['default'].flatMap(this.get('permissionGroups'), function (group) {
        return group.get('permissions');
      }).forEach(function (permission) {
        permission.set('isEnabled', true);
      });
    }),

    roleType: computed('role.roleType', 'roles.allTypes', function () {
      return this.get('roles.allTypes').findBy('id', this.get('role.roleType'));
    }),

    agentCaseAccessType: computed('role.agentCaseAccess', 'roles.availableAgentCaseAccessTypes', function () {
      return this.get('roles.availableAgentCaseAccessTypes').findBy('id', this.get('role.agentCaseAccess'));
    }),

    permissionGroups: computed(function () {
      var _this2 = this;

      var permissionGroup = function permissionGroup(name) {
        for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        return PermissionGroup.create.apply(PermissionGroup, [{ context: _this2, name: name }].concat(params));
      };

      var permission = function permission(name) {
        for (var _len2 = arguments.length, params = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          params[_key2 - 1] = arguments[_key2];
        }

        return Permission.create.apply(Permission, [{ context: _this2, name: name }].concat(params));
      };

      var adminPermissionGroup = function adminPermissionGroup(name) {
        for (var _len3 = arguments.length, params = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          params[_key3 - 1] = arguments[_key3];
        }

        return AdminPermissionGroup.create.apply(AdminPermissionGroup, [{ context: _this2, name: name }].concat(params));
      };

      return [permissionGroup('cases', {
        permissions: [permission('cases-create', { values: ['case.create'] }), permission('cases-reply', {
          values: ['case.view', 'case.reply', 'case.reply.create']
        }), permission('cases-add-notes', { values: ['note.create'] }), permission('cases-update', {
          hasHelpText: true,
          values: ['case.update']
        }), permission('cases-split-and-merge', {
          hasHelpText: true,
          values: ['case.merge', 'case.merge.create', 'case.split', 'case.split.create']
        }), permission('cases-trash', {
          hasHelpText: true,
          values: ['case.trash']
        })]
      }), permissionGroup('chats', {
        permissions: [permission('chats-accept', {
          hasHelpText: true,
          values: ['chat.manage', 'chat.observe', 'chat.transfer']
        })]
      }), permissionGroup('users-and-orgs', {
        permissions: [permission('users-and-orgs-create', {
          values: ['user.create', 'organization.create']
        }), permission('users-and-orgs-update', {
          hasHelpText: true,
          values: ['user.update', 'organization.update']
        }), permission('users-and-orgs-delete', {
          hasHelpText: true,
          values: ['user.delete', 'organization.delete']
        })]
      }), permissionGroup('help-center', {
        permissions: [permission('help-center-manage', {
          hasHelpText: true,
          values: ['help_center.manage']
        }), permission('help-center-manage-articles', {
          hasHelpText: true,
          values: ['help_center.articles.manage']
        }), permission('help-center-publish-articles', {
          hasHelpText: true,
          values: ['help_center.publish']
        })]
      }), adminPermissionGroup('user-administration', {
        permissions: [permission('teams-manage', {
          hasHelpText: true,
          values: ['team.create', 'team.delete', 'team.update', 'team.view']
        }), permission('roles-and-permissions-manage', {
          hasHelpText: true,
          values: ['role.create', 'role.delete', 'role.permission.update', 'role.update', 'role.view']
        })]
      }), adminPermissionGroup('system-administration', {
        permissions: [permission('apps-manage', { values: ['apps.manage'] }), permission('endpoints-manage', { values: ['endpoints.manage'] }), permission('channels-manage', {
          hasHelpText: true,
          values: ['channels.manage']
        }), permission('brands-manage', {
          values: ['brand.create', 'brand.delete', 'brand.update', 'brand.view']
        }), permission('case-views-manage', {
          values: ['case.view.manage', 'case.view.view']
        }), permission('case-macros-manage', {
          values: ['macro.create', 'macro.delete', 'macro.update', 'macro.view']
        }), permission('business-rules-manage', {
          hasHelpText: true,
          values: ['automations.manage']
        }), permission('slas-and-business-hours-manage', {
          hasHelpText: true,
          values: ['sla.manage', 'businesshour.manage']
        }), permission('case-fields-manage', {
          hasHelpText: true,
          values: ['case.field.manage', 'case.field.reorder', 'case.field.value.view', 'case.field.view']
        }), permission('users-and-organization-fields-manage', {
          hasHelpText: true,
          values: ['organization.field.manage', 'user.field.manage']
        }), permission('settings-manage', {
          hasHelpText: true,
          values: ['setting.update', 'setting.view']
        })]
      })];
    }),

    actions: {
      save: function save() {
        var _this3 = this;

        return this.get('role').save().then(function (role) {
          var adapter = _this3.container.lookup('adapter:application');

          var permissions = _this3.get('availablePermissionGroups').reduce(function (memo, permissionGroup) {
            permissionGroup.get('permissions').forEach(function (permission) {
              permission.get('values').forEach(function (name) {
                memo[name] = permission.get('isEnabled') ? 1 : 0;
              });
            });

            return memo;
          }, {});

          return adapter.ajax(adapter.namespace + '/roles/' + role.get('id') + '/permissions', 'PUT', { data: { permission: permissions } }).then(function () {
            return role.get('permissions').reload();
          });
        });
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        if (this.attrs.onSave) {
          this.attrs.onSave();
        }
      },

      cancel: function cancel() {
        if (this.attrs.onCancel) {
          this.attrs.onCancel();
        }
      },

      selectRoleType: function selectRoleType(roleType) {
        this.set('role.roleType', roleType.get('id'));
      },

      selectAgentCaseAccessType: function selectAgentCaseAccessType(agentCaseAccessType) {
        this.set('role.agentCaseAccess', agentCaseAccessType.get('id'));
      }
    }
  });
});
define("frontend-cp/components/ko-admin/roles/form/styles", ["exports"], function (exports) {
  exports["default"] = {
    "help-link": "_help-link_1nljr2"
  };
});
define("frontend-cp/components/ko-admin/roles/form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 72
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.roles.form.title_field_label"], [], ["loc", [null, [12, 30], [12, 72]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [12, 6], [12, 96]]]], ["inline", "input", [], ["type", "text", "class", "input-text", "name", "title", "value", ["subexpr", "@mut", [["get", "role.title", ["loc", [null, [13, 64], [13, 74]]]]], [], []]], ["loc", [null, [13, 6], [13, 76]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "role.errors.title", ["loc", [null, [14, 36], [14, 53]]]]], [], []]], ["loc", [null, [14, 6], [14, 55]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 76
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.roles.form.role_type_field_label"], [], ["loc", [null, [18, 30], [18, 76]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 31,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "roleType.label", ["loc", [null, [30, 10], [30, 28]]]]],
              locals: ["roleType"],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 40,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "href", "");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(".\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [3]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createAttrMorph(element0, 'class');
                morphs[2] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["inline", "format-html-message", ["admin.roles.form.role_type_field_help"], [], ["loc", [null, [36, 8], [36, 71]]]], ["attribute", "class", ["get", "styles.help-link", ["loc", [null, [38, 24], [38, 40]]]]], ["inline", "t", ["admin.roles.form.role_type_field_help_link"], [], ["loc", [null, [39, 10], [39, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [18, 6], [18, 100]]]], ["block", "power-select", [], ["searchEnabled", false, "class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", ["subexpr", "qa-cls", [" qa-ko-admin_roles_form__role-type"], [], ["loc", [null, [24, 10], [24, 55]]]]], [], ["loc", [null, [22, 14], [24, 56]]]], "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [25, 20], [25, 52]]]], "options", ["subexpr", "@mut", [["get", "roles.availableTypes", ["loc", [null, [26, 16], [26, 36]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "roleType", ["loc", [null, [27, 17], [27, 25]]]]], [], []], "disabled", ["subexpr", "not", [["get", "role.isNew", ["loc", [null, [28, 22], [28, 32]]]]], [], ["loc", [null, [28, 17], [28, 33]]]], "onchange", ["subexpr", "action", ["selectRoleType"], [], ["loc", [null, [29, 17], [29, 42]]]]], 1, null, ["loc", [null, [20, 6], [31, 23]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "role.errors.roleType", ["loc", [null, [33, 36], [33, 56]]]]], [], []]], ["loc", [null, [33, 6], [33, 58]]]], ["block", "ko-form/field/help", [], [], 2, null, ["loc", [null, [35, 6], [40, 29]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [11, 4], [15, 22]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [17, 4], [41, 22]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 48,
                        "column": 10
                      },
                      "end": {
                        "line": 48,
                        "column": 88
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.roles.form.agent_case_access_field_label"], [], ["loc", [null, [48, 34], [48, 88]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 50,
                        "column": 10
                      },
                      "end": {
                        "line": 60,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                  },
                  arity: 1,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["content", "agentCaseAccessType.label", ["loc", [null, [59, 14], [59, 43]]]]],
                  locals: ["agentCaseAccessType"],
                  templates: []
                };
              })();
              var child2 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 62,
                        "column": 10
                      },
                      "end": {
                        "line": 62,
                        "column": 86
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.roles.form.agent_case_access_field_help"], [], ["loc", [null, [62, 33], [62, 86]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 47,
                      "column": 8
                    },
                    "end": {
                      "line": 64,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(4);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                  morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                  return morphs;
                },
                statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [48, 10], [48, 112]]]], ["block", "power-select", [], ["searchEnabled", false, "class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", ["subexpr", "qa-cls", [" qa-ko-admin_roles_form__agent-case-access-type"], [], ["loc", [null, [54, 14], [54, 72]]]]], [], ["loc", [null, [52, 18], [54, 73]]]], "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [55, 24], [55, 56]]]], "options", ["subexpr", "@mut", [["get", "roles.availableAgentCaseAccessTypes", ["loc", [null, [56, 20], [56, 55]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "agentCaseAccessType", ["loc", [null, [57, 21], [57, 40]]]]], [], []], "onchange", ["subexpr", "action", ["selectAgentCaseAccessType"], [], ["loc", [null, [58, 21], [58, 57]]]]], 1, null, ["loc", [null, [50, 10], [60, 27]]]], ["block", "ko-form/field/help", [], [], 2, null, ["loc", [null, [62, 10], [62, 109]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "role.errors.agentCaseAccess", ["loc", [null, [63, 40], [63, 67]]]]], [], []]], ["loc", [null, [63, 10], [63, 69]]]]],
                locals: [],
                templates: [child0, child1, child2]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 46,
                    "column": 6
                  },
                  "end": {
                    "line": 65,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [47, 8], [64, 26]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.0.3",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 74,
                          "column": 12
                        },
                        "end": {
                          "line": 76,
                          "column": 12
                        }
                      },
                      "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                    },
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("              ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                      return morphs;
                    },
                    statements: [["inline", "t", [["subexpr", "concat", ["admin.roles.form.", ["get", "permission.translationKey", ["loc", [null, [75, 46], [75, 71]]]], "_permission_help"], [], ["loc", [null, [75, 18], [75, 91]]]]], [], ["loc", [null, [75, 14], [75, 93]]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 73,
                        "column": 10
                      },
                      "end": {
                        "line": 77,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [74, 12], [76, 35]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 68,
                      "column": 8
                    },
                    "end": {
                      "line": 78,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "ko-checkbox", [], ["label", ["subexpr", "t", [["subexpr", "concat", ["admin.roles.form.", ["get", "permission.translationKey", ["loc", [null, [70, 49], [70, 74]]]], "_permission_label"], [], ["loc", [null, [70, 21], [70, 95]]]]], [], ["loc", [null, [70, 18], [70, 96]]]], "checked", ["subexpr", "@mut", [["get", "permission.isEnabled", ["loc", [null, [71, 20], [71, 40]]]]], [], []]], ["loc", [null, [69, 10], [71, 42]]]], ["block", "if", [["get", "permission.hasHelpText", ["loc", [null, [73, 16], [73, 38]]]]], [], 0, null, ["loc", [null, [73, 10], [77, 17]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 67,
                    "column": 6
                  },
                  "end": {
                    "line": 79,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [68, 8], [78, 26]]]]],
              locals: ["permission"],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 80,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "permissionGroup.name", ["loc", [null, [46, 16], [46, 36]]]], "cases"], [], ["loc", [null, [46, 12], [46, 45]]]]], [], 0, null, ["loc", [null, [46, 6], [65, 13]]]], ["block", "each", [["get", "permissionGroup.permissions", ["loc", [null, [67, 14], [67, 41]]]]], [], 1, null, ["loc", [null, [67, 6], [79, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 2
              },
              "end": {
                "line": 81,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", [["subexpr", "concat", ["admin.roles.form.", ["get", "permissionGroup.translationKey", ["loc", [null, [45, 66], [45, 96]]]], "_group_legend"], [], ["loc", [null, [45, 38], [45, 113]]]]], [], ["loc", [null, [45, 35], [45, 114]]]]], 0, null, ["loc", [null, [45, 4], [80, 29]]]]],
          locals: ["permissionGroup"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 84,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "concat", [["subexpr", "t", ["admin.roles"], [], ["loc", [null, [5, 18], [5, 35]]]], " / ", ["subexpr", "if", [["get", "role.isNew", ["loc", [null, [6, 14], [6, 24]]]], ["subexpr", "t", ["admin.roles.form.new_title"], [], ["loc", [null, [6, 25], [6, 57]]]], ["get", "role.title", ["loc", [null, [6, 58], [6, 68]]]]], [], ["loc", [null, [6, 10], [6, 69]]]]], [], ["loc", [null, [5, 10], [6, 70]]]], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [7, 15], [7, 33]]]], "onCancel", ["subexpr", "@mut", [["get", "attrs.onCancel", ["loc", [null, [8, 13], [8, 27]]]]], [], []]], ["loc", [null, [4, 2], [8, 29]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.roles.form.details_group_legend"], [], ["loc", [null, [10, 33], [10, 76]]]]], 0, null, ["loc", [null, [10, 2], [42, 27]]]], ["block", "each", [["get", "availablePermissionGroups", ["loc", [null, [44, 10], [44, 35]]]]], [], 1, null, ["loc", [null, [44, 2], [81, 11]]]], ["inline", "ko-admin/page-footer", [], ["buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [83, 36], [83, 54]]]], "onCancel", ["subexpr", "action", ["cancel"], [], ["loc", [null, [83, 64], [83, 81]]]]], ["loc", [null, [83, 2], [83, 83]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 85,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/roles/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["save"], [], ["loc", [null, [2, 11], [2, 26]]]], "onSuccess", ["subexpr", "action", ["success"], [], ["loc", [null, [3, 12], [3, 30]]]]], 0, null, ["loc", [null, [1, 0], [84, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/roles/list-item/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = _ember['default'].Component.extend({
    notification: inject.service(),
    intl: inject.service(),
    roles: inject.service(),
    role: null,
    canDelete: computed.not('role.isSystem'),

    canEdit: computed('role.roleType', 'role.isSystem', 'roles.editableSystemTypes', function () {
      return !this.get('role.isSystem') || this.get('roles.editableSystemTypes').findBy('id', this.get('role.roleType'));
    }),

    roleType: computed('role.roleType', function () {
      return this.get('roles.allTypes').findBy('id', this.get('role.roleType'));
    }),

    actions: {
      edit: function edit(role, event) {
        event.stopPropagation();

        if (this.attrs.onEdit) {
          this.attrs.onEdit(role);
        }
      },

      'delete': function _delete(role, event) {
        var _this = this;

        event.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          role.destroyRecord().then(function () {
            _this.get('notification').success(_this.get('intl').findTranslationByKey('admin.roles.index.deletion_successful_notification'));
          });
        }
      }
    }
  });
});
define("frontend-cp/components/ko-admin/roles/list-item/styles", ["exports"], function (exports) {
  exports["default"] = {
    "action": "_action_1ubcxi"
  };
});
define("frontend-cp/components/ko-admin/roles/list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 12,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode("\n          (System)\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element5, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["t-caption ", ["subexpr", "qa-cls", ["qa-ko-admin_roles_list-item__title-caption"], [], ["loc", [null, [9, 31], [9, 86]]]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element7, 'class');
            morphs[1] = dom.createMorphAt(element7, 1, 1);
            morphs[2] = dom.createMorphAt(element6, 3, 3);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["t-bold ", ["subexpr", "qa-cls", ["qa-ko-admin_roles_list-item__title"], [], ["loc", [null, [4, 26], [4, 73]]]]]]], ["content", "role.title", ["loc", [null, [5, 8], [5, 22]]]], ["block", "if", [["get", "role.isSystem", ["loc", [null, [8, 12], [8, 25]]]]], [], 0, null, ["loc", [null, [8, 6], [12, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["t-caption ", ["subexpr", "qa-cls", ["qa-ko-admin_roles_list-item__label"], [], ["loc", [null, [17, 27], [17, 74]]]]]]], ["content", "roleType.label", ["loc", [null, [18, 6], [18, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element2, 'class');
              morphs[1] = dom.createAttrMorph(element3, 'onclick');
              morphs[2] = dom.createAttrMorph(element3, 'class');
              morphs[3] = dom.createMorphAt(element3, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["get", "styles.action", ["loc", [null, [24, 20], [24, 33]]]]], ["attribute", "onclick", ["subexpr", "action", ["edit", ["get", "role", ["loc", [null, [25, 35], [25, 39]]]]], [], ["loc", [null, [25, 19], [25, 41]]]]], ["attribute", "class", ["subexpr", "qa-cls", ["qa-ko-admin_roles_list-item__edit"], [], ["loc", [null, [26, 17], [26, 63]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [27, 10], [27, 30]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createAttrMorph(element1, 'onclick');
              morphs[2] = dom.createAttrMorph(element1, 'class');
              morphs[3] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["get", "styles.action", ["loc", [null, [33, 20], [33, 33]]]]], ["attribute", "onclick", ["subexpr", "action", ["delete", ["get", "role", ["loc", [null, [34, 37], [34, 41]]]]], [], ["loc", [null, [34, 19], [34, 43]]]]], ["attribute", "class", ["subexpr", "qa-cls", ["qa-ko-admin_roles_list-item__delete"], [], ["loc", [null, [35, 17], [35, 65]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [36, 10], [36, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "canEdit", ["loc", [null, [23, 10], [23, 17]]]]], [], 0, null, ["loc", [null, [23, 4], [30, 11]]]], ["block", "if", [["get", "canDelete", ["loc", [null, [32, 10], [32, 19]]]]], [], 1, null, ["loc", [null, [32, 4], [39, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [2, 2], [14, 26]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [16, 2], [20, 26]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [22, 2], [40, 29]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 42,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/roles/list-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "if", [["get", "canEdit", ["loc", [null, [1, 34], [1, 41]]]], ["subexpr", "action", ["edit", ["get", "role", ["loc", [null, [1, 57], [1, 61]]]]], [], ["loc", [null, [1, 42], [1, 62]]]]], [], ["loc", [null, [1, 30], [1, 63]]]]], 0, null, ["loc", [null, [1, 0], [41, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNameBindings: ['styles.sidebar']
  });
});
define("frontend-cp/components/ko-admin/sidebar/styles", ["exports"], function (exports) {
  exports["default"] = {
    "sidebar": "_sidebar_1a61wp",
    "group": "_group_1a61wp",
    "header": "_header_1a61wp",
    "item": "_item_1a61wp"
  };
});
define("frontend-cp/components/ko-admin/sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.twitter"], [], ["loc", [null, [8, 6], [8, 27]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var element3 = dom.childAt(element2, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'class');
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "styles.group", ["loc", [null, [2, 15], [2, 27]]]]], ["attribute", "class", ["get", "styles.header", ["loc", [null, [3, 15], [3, 28]]]]], ["inline", "t", ["admin.navigation.channels"], [], ["loc", [null, [4, 6], [4, 39]]]], ["block", "link-to", ["session.admin.channels.twitter"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [7, 54], [7, 65]]]]], [], []]], 0, null, ["loc", [null, [7, 4], [9, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.views"], [], ["loc", [null, [18, 4], [18, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.casefields"], [], ["loc", [null, [22, 4], [22, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.caseforms"], [], ["loc", [null, [26, 4], [26, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 31,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.macros"], [], ["loc", [null, [30, 4], [30, 24]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 39,
              "column": 2
            },
            "end": {
              "line": 41,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.teams"], [], ["loc", [null, [40, 4], [40, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.userfields"], [], ["loc", [null, [44, 4], [44, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 4
              },
              "end": {
                "line": 50,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.roles"], [], ["loc", [null, [49, 6], [49, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["session.admin.people.roles"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [48, 50], [48, 61]]]]], [], []]], 0, null, ["loc", [null, [48, 4], [50, 16]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 53,
              "column": 2
            },
            "end": {
              "line": 55,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["admin.organizationfields"], [], ["loc", [null, [54, 4], [54, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 63,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["admin.businesshours"], [], ["loc", [null, [64, 4], [64, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element1, 1, 1);
          morphs[3] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "styles.group", ["loc", [null, [59, 13], [59, 25]]]]], ["attribute", "class", ["get", "styles.header", ["loc", [null, [60, 13], [60, 26]]]]], ["inline", "t", ["admin.navigation.automation"], [], ["loc", [null, [61, 4], [61, 39]]]], ["block", "link-to", ["session.admin.automation.businesshours"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [63, 60], [63, 71]]]]], [], []]], 0, null, ["loc", [null, [63, 2], [65, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 68,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(fragment, [4]);
        var element7 = dom.childAt(element6, [1]);
        var morphs = new Array(16);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element4, 'class');
        morphs[2] = dom.createAttrMorph(element5, 'class');
        morphs[3] = dom.createMorphAt(element5, 1, 1);
        morphs[4] = dom.createMorphAt(element4, 3, 3);
        morphs[5] = dom.createMorphAt(element4, 5, 5);
        morphs[6] = dom.createMorphAt(element4, 7, 7);
        morphs[7] = dom.createMorphAt(element4, 9, 9);
        morphs[8] = dom.createAttrMorph(element6, 'class');
        morphs[9] = dom.createAttrMorph(element7, 'class');
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(element6, 3, 3);
        morphs[12] = dom.createMorphAt(element6, 5, 5);
        morphs[13] = dom.createMorphAt(element6, 7, 7);
        morphs[14] = dom.createMorphAt(element6, 9, 9);
        morphs[15] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "features.adminTwitter", ["loc", [null, [1, 6], [1, 27]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["get", "styles.group", ["loc", [null, [13, 13], [13, 25]]]]], ["attribute", "class", ["get", "styles.header", ["loc", [null, [14, 13], [14, 26]]]]], ["inline", "t", ["admin.navigation.manage"], [], ["loc", [null, [15, 4], [15, 35]]]], ["block", "link-to", ["session.admin.manage.views"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [17, 48], [17, 59]]]]], [], []]], 1, null, ["loc", [null, [17, 2], [19, 14]]]], ["block", "link-to", ["session.admin.manage.case-fields"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [21, 54], [21, 65]]]]], [], []]], 2, null, ["loc", [null, [21, 2], [23, 14]]]], ["block", "link-to", ["session.admin.manage.case-forms"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [25, 53], [25, 64]]]]], [], []]], 3, null, ["loc", [null, [25, 2], [27, 14]]]], ["block", "link-to", ["session.admin.manage.macros"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [29, 49], [29, 60]]]]], [], []]], 4, null, ["loc", [null, [29, 2], [31, 14]]]], ["attribute", "class", ["get", "styles.group", ["loc", [null, [35, 13], [35, 25]]]]], ["attribute", "class", ["get", "styles.header", ["loc", [null, [36, 13], [36, 26]]]]], ["inline", "t", ["admin.navigation.people"], [], ["loc", [null, [37, 4], [37, 35]]]], ["block", "link-to", ["session.admin.people.teams"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [39, 48], [39, 59]]]]], [], []]], 5, null, ["loc", [null, [39, 2], [41, 14]]]], ["block", "link-to", ["session.admin.people.user-fields"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [43, 54], [43, 65]]]]], [], []]], 6, null, ["loc", [null, [43, 2], [45, 14]]]], ["block", "if", [["get", "features.roles", ["loc", [null, [47, 8], [47, 22]]]]], [], 7, null, ["loc", [null, [47, 2], [51, 9]]]], ["block", "link-to", ["session.admin.people.organization-fields"], ["class", ["subexpr", "@mut", [["get", "styles.item", ["loc", [null, [53, 62], [53, 73]]]]], [], []]], 8, null, ["loc", [null, [53, 2], [55, 14]]]], ["block", "if", [["get", "features.adminBusinessHours", ["loc", [null, [58, 6], [58, 33]]]]], [], 9, null, ["loc", [null, [58, 0], [67, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9]
    };
  })());
});
define('frontend-cp/components/ko-admin/team/component', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  var RSVP = _ember['default'].RSVP;
  exports['default'] = _ember['default'].Component.extend({
    title: null,
    team: null,
    onCancel: function onCancel() {},
    onSuccess: function onSuccess() {},
    injectIntoParent: null,

    intl: inject.service(),
    session: inject.service(),
    store: inject.service(),
    errorHandler: inject.service('error-handler'),
    storeCache: inject.service('store-cache'),

    filter: '',
    agents: [],
    membersToAdd: null,
    membersToRemove: null,

    businessHours: null,
    selectedBusinessHour: null,

    isMembersLoading: true,

    initFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('membersToRemove', []);
      this.set('membersToAdd', []);

      this.get('store').query('business-hour', { limit: 10000 }).then(function (businessHours) {
        _this.set('businessHours', businessHours);
        var businessHour = _this.get('team.businesshour');
        if (businessHour) {
          _this.set('selectedBusinessHour', businessHours.findBy('id', businessHour.get('id')));
        } else {
          _this.set('selectedBusinessHour', businessHours.findBy('isDefault', true));
        }
      });

      this.get('storeCache').query('user', { role: 'AGENT', limit: 500, is_enabled: true }).then(function (agents) {
        // we filter for isEnabled because /users endpoint do not support is_enabled
        // attribute yet
        _this.set('agents', agents.filter(function (agent) {
          return agent.get('isEnabled');
        }));
        _this.set('isMembersLoading', false);
      });

      this.get('injectIntoParent')(this);
    }),

    nonMembers: computed('agents.[]', 'team.members.[]', function () {
      var _this2 = this;

      return this.get('agents').filter(function (agent) {
        return !_this2.get('team.members').contains(agent);
      });
    }),

    filteredMembers: computed('filter', function () {
      var members = this.get('team.members');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    filteredNonMembers: computed('filter', 'nonMembers', function () {
      var members = this.get('nonMembers');
      if (this.get('filter') === '') {
        return members;
      } else {
        return this.filterByFullName(members);
      }
    }),

    userHasChangedModel: function userHasChangedModel() {
      var bufferedChanges = this.get('membersToAdd').length > 0 || this.get('membersToRemove').length > 0;
      if (this.get('team.isDeleted')) {
        return false;
      } else {
        return this.get('team.hasDirtyAttributes') || bufferedChanges;
      }
    },

    matchesFilter: function matchesFilter(text) {
      var regEx = new RegExp(this.get('filter').trim(), 'i');
      return regEx.test(text);
    },

    filterByFullName: function filterByFullName(members) {
      var _this3 = this;

      return members.filter(function (member) {
        return _this3.matchesFilter(member.get('fullName'));
      });
    },

    addMembers: function addMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToAdd').map(function (member) {
        return member.get('id');
      }).join(',');

      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/teams/' + teamId + '/members';

      var options = {
        data: {
          agent_ids: ids
        }
      };

      return adapter.ajax(url, 'POST', options);
    },

    removeMembers: function removeMembers() {
      var teamId = this.get('team.id');
      var ids = this.get('membersToRemove').map(function (member) {
        return member.get('id');
      }).join(',');
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/teams/' + teamId + '/members?agent_ids=' + ids;

      return adapter.ajax(url, 'DELETE');
    },

    getNonMemberSelectedValue: function getNonMemberSelectedValue(agent) {
      return this.get('membersToAdd').contains(agent);
    },

    getMemberSelectedValue: function getMemberSelectedValue(agent) {
      return !this.get('membersToRemove').contains(agent);
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('team').rollbackAttributes();
        this.set('membersToAdd', []);
        this.set('membersToRemove', []);
      },

      saveTeam: function saveTeam() {
        var _this4 = this;

        // Update the model straight away, and then perform
        // the API requests in the background.
        this.get('team.members').pushObjects(this.get('membersToAdd'));
        this.get('team.members').removeObjects(this.get('membersToRemove'));
        return this.get('team').save().then(function () {
          var promises = [];
          if (_this4.get('membersToAdd.length') > 0) {
            promises.push(_this4.addMembers());
          }
          if (_this4.get('membersToRemove.length') > 0) {
            promises.push(_this4.removeMembers());
          }
          return RSVP.all(promises).then(function () {
            _this4.set('membersToAdd', []);
            _this4.set('membersToRemove', []);
          })['catch'](function (e) {
            return _this4.get('errorHandler').process({ errors: e.responseJSON });
          });
        });
      },

      onUserSelected: function onUserSelected(user, isSelected) {
        var membersToAdd = this.get('membersToAdd');
        var membersToRemove = this.get('membersToRemove');
        if (this.get('nonMembers').contains(user)) {
          if (isSelected) {
            membersToAdd.pushObject(user);
          } else {
            membersToAdd.removeObject(user);
          }
        } else {
          if (isSelected) {
            membersToRemove.removeObject(user);
          } else {
            membersToRemove.pushObject(user);
          }
        }
      },

      deleteTeam: function deleteTeam(team) {
        var _this5 = this;

        var msg = this.get('intl').findTranslationByKey('admin.teams.labels.delete_team_confirmation');
        if (confirm(msg)) {
          // eslint-disable-line
          team.destroyRecord().then(function () {
            _this5.attrs.onSuccess();
          });
        }
      },

      selectBusinessHours: function selectBusinessHours(businessHour) {
        this.set('selectedBusinessHour', businessHour);
        this.set('team.businesshour', businessHour);
      }
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-admin/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.teams.labels.edit.name"], [], ["loc", [null, [13, 30], [13, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 90]]]], ["inline", "input", [], ["class", "input-text qa-ko-admin_team__input-title", "type", "text", "value", ["subexpr", "@mut", [["get", "team.title", ["loc", [null, [14, 81], [14, 91]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 101], [14, 113]]]]], [], []]], ["loc", [null, [14, 6], [14, 115]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 19,
                  "column": 57
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["admin.businesshours"], [], ["loc", [null, [19, 30], [19, 57]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "value.title", ["loc", [null, [27, 8], [27, 23]]]]],
            locals: ["value"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin_team__businesshours");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [4]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(element1, 1, 1);
            morphs[3] = dom.createMorphAt(element1, 3, 3);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [12, 4], [15, 22]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "team.errors.title", ["loc", [null, [16, 34], [16, 51]]]]], [], []]], ["loc", [null, [16, 4], [16, 53]]]], ["block", "ko-form/field/label", [], [], 1, null, ["loc", [null, [19, 6], [19, 81]]]], ["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [21, 97], [21, 133]]]]], [], ["loc", [null, [21, 14], [21, 134]]]], "selected", ["subexpr", "@mut", [["get", "selectedBusinessHour", ["loc", [null, [22, 17], [22, 37]]]]], [], []], "searchField", "title", "options", ["subexpr", "@mut", [["get", "businessHours", ["loc", [null, [24, 16], [24, 29]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [25, 17], [25, 29]]]]], [], []], "onchange", ["subexpr", "action", ["selectBusinessHours"], [], ["loc", [null, [26, 17], [26, 47]]]]], 2, null, ["loc", [null, [20, 6], [28, 23]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 49,
                  "column": 8
                },
                "end": {
                  "line": 49,
                  "column": 46
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [49, 22], [49, 46]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 47,
                "column": 4
              },
              "end": {
                "line": 51,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-admin-card-user__loader");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [49, 8], [49, 60]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 7
                  },
                  "end": {
                    "line": 60,
                    "column": 7
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("         ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "layout__item u-1/3 ko-admin-card-user--small");
                var el2 = dom.createTextNode("\n           ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n         ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "ko-admin-card-user", [], ["user", ["subexpr", "@mut", [["get", "agent", ["loc", [null, [56, 19], [56, 24]]]]], [], []], "isSelected", ["subexpr", "ko-contextual-helper", [["get", "getMemberSelectedValue", ["loc", [null, [57, 47], [57, 69]]]], ["get", "this", ["loc", [null, [57, 70], [57, 74]]]], ["get", "agent", ["loc", [null, [57, 75], [57, 80]]]]], [], ["loc", [null, [57, 25], [57, 81]]]], "userSelectedAction", "onUserSelected"], ["loc", [null, [55, 11], [58, 51]]]]],
              locals: ["agent"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 6
                },
                "end": {
                  "line": 61,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "filteredMembers", ["loc", [null, [53, 15], [53, 30]]]]], [], 0, null, ["loc", [null, [53, 7], [60, 16]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 6
                },
                "end": {
                  "line": 69,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("       ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "layout__item u-1/3 ko-admin-card-user--small");
              var el2 = dom.createTextNode("\n         ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n       ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-admin-card-user", [], ["user", ["subexpr", "@mut", [["get", "agent", ["loc", [null, [65, 17], [65, 22]]]]], [], []], "isSelected", ["subexpr", "ko-contextual-helper", [["get", "getNonMemberSelectedValue", ["loc", [null, [66, 45], [66, 70]]]], ["get", "this", ["loc", [null, [66, 71], [66, 75]]]], ["get", "agent", ["loc", [null, [66, 76], [66, 81]]]]], [], ["loc", [null, [66, 23], [66, 82]]]], "userSelectedAction", "onUserSelected"], ["loc", [null, [64, 9], [67, 49]]]]],
            locals: ["agent"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 4
              },
              "end": {
                "line": 70,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "not", [["get", "team.isNew", ["loc", [null, [52, 17], [52, 27]]]]], [], ["loc", [null, [52, 12], [52, 28]]]]], [], 0, null, ["loc", [null, [52, 6], [61, 13]]]], ["block", "each", [["get", "filteredNonMembers", ["loc", [null, [62, 14], [62, 32]]]]], [], 1, null, ["loc", [null, [62, 6], [69, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 77,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "button button--alert qa-ko-admin_team__button-delete");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["deleteTeam", ["get", "team", ["loc", [null, [74, 100], [74, 104]]]]], [], ["loc", [null, [74, 78], [74, 106]]]]], ["inline", "t", ["admin.teams.labels.delete_team"], [], ["loc", [null, [75, 6], [75, 44]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 78,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mv");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout u-mb");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "layout__item u-1/1");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "input--search t-right");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-search i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(fragment, [7, 1, 1]), 1, 1);
          morphs[5] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
          morphs[6] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [6, 10], [6, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [7, 13], [7, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 15], [8, 33]]]]], ["loc", [null, [5, 2], [9, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.teams.legend.edit.details"], [], ["loc", [null, [11, 33], [11, 70]]]]], 0, null, ["loc", [null, [11, 2], [30, 27]]]], ["inline", "t", ["admin.teams.info.title"], [], ["loc", [null, [33, 8], [33, 38]]]], ["inline", "t", ["admin.teams.info.content"], [], ["loc", [null, [34, 7], [34, 39]]]], ["inline", "input", [], ["class", "input-text input-text--search", "type", "text", "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [40, 72], [40, 78]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.teams.labels.filter_agents"], [], ["loc", [null, [40, 91], [40, 129]]]]], ["loc", [null, [40, 8], [40, 131]]]], ["block", "if", [["get", "isMembersLoading", ["loc", [null, [47, 10], [47, 26]]]]], [], 1, 2, ["loc", [null, [47, 4], [70, 11]]]], ["block", "if", [["get", "team.id", ["loc", [null, [73, 8], [73, 15]]]]], [], 3, null, ["loc", [null, [73, 2], [77, 9]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 79,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["saveTeam"], [], ["loc", [null, [2, 11], [2, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [78, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/twitter/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    account: null,
    onCancel: null,
    onSave: null,
    onSuccess: null,

    store: _ember['default'].inject.service(),

    brands: [],
    initBrands: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('brand').then(function (brands) {
        _this.set('brands', brands);
      });
    }),

    actions: {
      setBrand: function setBrand(brand) {
        this.set('account.brand', brand);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/twitter/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 63
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.brand"], [], ["loc", [null, [14, 30], [14, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "brand.name", ["loc", [null, [17, 8], [17, 22]]]]],
              locals: ["brand"],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 20,
                    "column": 61
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.help.brand"], [], ["loc", [null, [20, 29], [20, 61]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [14, 6], [14, 87]]]], ["block", "ko-select", [], ["options", ["subexpr", "@mut", [["get", "brands", ["loc", [null, [16, 27], [16, 33]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "account.brand", ["loc", [null, [16, 43], [16, 56]]]]], [], []], "size", "medium", "onChange", ["subexpr", "action", ["setBrand"], [], ["loc", [null, [16, 80], [16, 99]]]]], 1, null, ["loc", [null, [16, 6], [18, 20]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.brand", ["loc", [null, [19, 36], [19, 56]]]]], [], []]], ["loc", [null, [19, 6], [19, 58]]]], ["block", "ko-form/field/help", [], [], 2, null, ["loc", [null, [20, 6], [20, 84]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [13, 4], [21, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["admin.twitter.help.capture"], [], ["loc", [null, [26, 6], [26, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.mentions"], [], ["loc", [null, [30, 30], [30, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [30, 6], [30, 90]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeMentions", ["loc", [null, [32, 18], [32, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeMentions", ["loc", [null, [33, 21], [33, 42]]]], "admin.twitter.description_on.mentions", "admin.twitter.description_off.mentions"], [], ["loc", [null, [33, 17], [33, 124]]]]], [], ["loc", [null, [33, 14], [33, 125]]]]], ["loc", [null, [31, 6], [34, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeMentions", ["loc", [null, [35, 36], [35, 64]]]]], [], []]], ["loc", [null, [35, 6], [35, 66]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 6
                  },
                  "end": {
                    "line": 39,
                    "column": 73
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.direct_messages"], [], ["loc", [null, [39, 30], [39, 73]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 45,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [39, 6], [39, 97]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeMessages", ["loc", [null, [41, 18], [41, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeMessages", ["loc", [null, [42, 21], [42, 42]]]], "admin.twitter.description_on.direct_messages", "admin.twitter.description_off.direct_messages"], [], ["loc", [null, [42, 17], [42, 138]]]]], [], ["loc", [null, [42, 14], [42, 139]]]]], ["loc", [null, [40, 6], [43, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeMessages", ["loc", [null, [44, 36], [44, 64]]]]], [], []]], ["loc", [null, [44, 6], [44, 66]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 6
                  },
                  "end": {
                    "line": 48,
                    "column": 75
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.favourited_tweets"], [], ["loc", [null, [48, 30], [48, 75]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 4
                },
                "end": {
                  "line": 54,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [48, 6], [48, 99]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.routeFavorites", ["loc", [null, [50, 18], [50, 40]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.routeFavorites", ["loc", [null, [51, 21], [51, 43]]]], "admin.twitter.description_on.favourited_tweets", "admin.twitter.description_off.favourited_tweets"], [], ["loc", [null, [51, 17], [51, 143]]]]], [], ["loc", [null, [51, 14], [51, 144]]]]], ["loc", [null, [49, 6], [52, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.routeFavorites", ["loc", [null, [53, 36], [53, 65]]]]], [], []]], ["loc", [null, [53, 6], [53, 67]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 2
              },
              "end": {
                "line": 55,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [25, 4], [27, 27]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [29, 4], [36, 22]]]], ["block", "ko-form/field", [], [], 2, null, ["loc", [null, [38, 4], [45, 22]]]], ["block", "ko-form/field", [], [], 3, null, ["loc", [null, [47, 4], [54, 22]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 59,
                    "column": 6
                  },
                  "end": {
                    "line": 59,
                    "column": 79
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.label.display_public_tweets"], [], ["loc", [null, [59, 30], [59, 79]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 65,
                    "column": 6
                  },
                  "end": {
                    "line": 65,
                    "column": 77
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.twitter.help.display_public_tweets"], [], ["loc", [null, [65, 29], [65, 77]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 58,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [59, 6], [59, 103]]]], ["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "account.showInHelpCenter", ["loc", [null, [61, 18], [61, 42]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "account.showInHelpCenter", ["loc", [null, [62, 21], [62, 45]]]], "admin.twitter.description_on.display_public_tweets", "admin.twitter.description_off.display_public_tweets"], [], ["loc", [null, [62, 17], [62, 153]]]]], [], ["loc", [null, [62, 14], [62, 154]]]]], ["loc", [null, [60, 6], [63, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "account.errors.showInHelpCenter", ["loc", [null, [64, 36], [64, 67]]]]], [], []]], ["loc", [null, [64, 6], [64, 69]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [65, 6], [65, 100]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 57,
                "column": 2
              },
              "end": {
                "line": 67,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [58, 4], [66, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 73,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.twitter.edit.heading"], ["screenName", ["get", "account.screenName", ["loc", [null, [6, 53], [6, 71]]]]], ["loc", [null, [6, 10], [6, 72]]]], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [7, 13], [7, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [8, 15], [8, 33]]]], "pageCopy", null], ["loc", [null, [5, 2], [10, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.account_settings"], [], ["loc", [null, [12, 33], [12, 77]]]]], 0, null, ["loc", [null, [12, 2], [22, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.capture_settings"], [], ["loc", [null, [24, 33], [24, 77]]]]], 1, null, ["loc", [null, [24, 2], [55, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.twitter.heading.help_settings"], [], ["loc", [null, [57, 33], [57, 74]]]]], 2, null, ["loc", [null, [57, 2], [67, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [70, 13], [70, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [71, 15], [71, 33]]]]], ["loc", [null, [69, 2], [72, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "@mut", [["get", "onSave", ["loc", [null, [2, 11], [2, 17]]]]], [], []], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [3, 12], [3, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [73, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin/views/edit/columns/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    columns: null,

    store: _ember['default'].inject.service(),
    intlService: _ember['default'].inject.service('intl'),
    availableColumns: [],

    // HTML
    classNames: ['ko-views-column'],

    initAvailableColumns: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('column').then(function (columns) {
        _this.set('availableColumns', columns);
      });
    }),

    unusedColumns: _ember['default'].computed('availableColumns.[]', 'columns.[]', function () {
      var usedColumns = this.get('columns');
      if (!usedColumns) {
        return this.get('availableColumns');
      }

      return this.get('availableColumns').filter(function (availableColumn) {
        return !usedColumns.contains(availableColumn);
      });
    }),

    columnTitleTranslation: function columnTitleTranslation(columnName) {
      return this.get('intlService').findTranslationByKey('admin.case_column_title.' + columnName);
    },

    actions: {
      reorderColumns: function reorderColumns(list) {
        var order = 1;
        list.forEach(function (option) {
          option.set('sortOrder', order);
          order++;
        });
      },

      addViewColumn: function addViewColumn(column) {
        this.get('columns').pushObject(column);
      },

      removeColumn: function removeColumn(column) {
        this.get('columns').removeObject(column);
      }
    }

  });
});
define("frontend-cp/components/ko-admin/views/edit/columns/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-contextual-helper", [["get", "columnTitleTranslation", ["loc", [null, [8, 25], [8, 47]]]], ["get", "this", ["loc", [null, [8, 48], [8, 52]]]], ["get", "column.id", ["loc", [null, [8, 53], [8, 62]]]]], [], ["loc", [null, [8, 2], [8, 64]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 1
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-views-column__item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "ko-views-column__content");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-views-column__action i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'onclick');
          return morphs;
        },
        statements: [["inline", "ko-contextual-helper", [["get", "columnTitleTranslation", ["loc", [null, [15, 29], [15, 51]]]], ["get", "this", ["loc", [null, [15, 52], [15, 56]]]], ["get", "column.id", ["loc", [null, [15, 57], [15, 66]]]]], [], ["loc", [null, [15, 6], [15, 68]]]], ["attribute", "onclick", ["subexpr", "action", ["removeColumn", ["get", "column", ["loc", [null, [17, 108], [17, 114]]]]], [], ["loc", [null, [17, 84], [17, 116]]]]]],
        locals: ["column"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/columns/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-views-column");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-select", [], ["class", ["subexpr", "qa-cls", ["qa-configure-column"], [], ["loc", [null, [2, 8], [2, 38]]]], "options", ["subexpr", "@mut", [["get", "unusedColumns", ["loc", [null, [3, 10], [3, 23]]]]], [], []], "onChange", ["subexpr", "action", ["addViewColumn"], [], ["loc", [null, [4, 11], [4, 35]]]], "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [5, 14], [5, 46]]]], "size", "medium"], 0, null, ["loc", [null, [1, 0], [9, 14]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderColumns"], [], ["loc", [null, [12, 33], [12, 58]]]], "items", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [12, 65], [12, 72]]]]], [], []]], 1, null, ["loc", [null, [12, 0], [19, 25]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin/views/edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    currentView: null,
    title: null,
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    // state
    teams: null,
    definitions: null,
    sortOrderDirections: null,

    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),

    sharedWithSelf: _ember['default'].computed.equal('currentView.visibilityType', 'SELF'),
    sharedWithAll: _ember['default'].computed.equal('currentView.visibilityType', 'ALL'),
    sharedWithTeam: _ember['default'].computed.equal('currentView.visibilityType', 'TEAM'),

    sortingDirections: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({ id: 'ASC', value: this.get('intl').findTranslationByKey('generic.sort.ASC') }), _ember['default'].Object.create({ id: 'DESC', value: this.get('intl').findTranslationByKey('generic.sort.DESC') })];
    }),

    initFields: _ember['default'].on('init', function () {
      this.set('fields', _ember['default'].Object.create({
        predicate_collections: {}
      }));

      this.set('sortOrderDirections', [{
        label: this.get('intl').findTranslationByKey('generic.sort.ASC'),
        direction: 'ASC'
      }, {
        label: this.get('intl').findTranslationByKey('generic.sort.DESC'),
        direction: 'DESC'
      }]);
    }),

    initDefinitions: _ember['default'].on('init', function () {
      this.set('definitions', this.get('store').findAll('definition'));
    }),

    initTeams: _ember['default'].on('init', function () {
      var _this = this;

      this.get('store').findAll('team').then(function (teams) {
        _this.set('teams', teams);
      });
    }),

    selectedTeams: _ember['default'].computed.reads('currentView.visibilityToTeams'),
    canDeleteCollection: _ember['default'].computed.gt('currentView.predicateCollections.length', 1),

    orderedColumnList: _ember['default'].computed('currentView.columns', 'currentView.columns.@each.sortOrder', function () {
      return this.get('currentView.columns').sortBy('sortOrder');
    }),

    sortableColumns: _ember['default'].computed('orderedColumnList.[]', function () {
      var _this2 = this;

      var columns = this.get('orderedColumnList');
      var columnList = [];

      columns.forEach(function (column) {
        columnList.push({
          id: column.id,
          label: _this2.get('intl').findTranslationByKey('admin.case_column_title.' + column.id)
        });
      });

      return columnList;
    }),

    selectedSortableColumn: _ember['default'].computed('currentView.orderByColumn', 'currentView.columns.[]', function () {
      var columns = this.get('sortableColumns');
      var selectedColumn = this.get('currentView.orderByColumn');

      return columns.find(function (column) {
        if (column.id === selectedColumn) {
          return column;
        }
      });
    }),

    selectedSortingDirection: _ember['default'].computed('currentView.orderBy', function () {
      var sortOrderDirections = this.get('sortOrderDirections');
      var sortDirection = this.get('currentView.orderBy');

      return sortOrderDirections.find(function (element) {
        if (element.direction === sortDirection) {
          return element;
        }
      });
    }),

    actions: {
      setViewSharingSelf: function setViewSharingSelf() {
        this.set('currentView.visibilityType', 'SELF');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingAll: function setViewSharingAll() {
        this.set('currentView.visibilityType', 'ALL');
        this.get('currentView.visibilityToTeams').clear();
      },
      setViewSharingTeam: function setViewSharingTeam() {
        this.set('currentView.visibilityType', 'TEAM');
      },
      addCollection: function addCollection() {
        var newProposition = this.get('store').createFragment('proposition', {});
        var newCollection = this.get('store').createRecord('predicate-collection', { propositions: [newProposition] });

        this.get('currentView.predicateCollections').pushObject(newCollection);
      },

      removeCollection: function removeCollection(collection) {
        this.get('currentView.predicateCollections').removeObject(collection);
      },

      createRuleForCollection: function createRuleForCollection(collection) {
        var newProposition = this.get('store').createFragment('proposition', {});
        collection.get('propositions').pushObject(newProposition);
      },

      removeRuleFromCollection: function removeRuleFromCollection(collection, rule) {
        collection.get('propositions').removeObject(rule);
      },

      selectOrderByColumn: function selectOrderByColumn(column) {
        this.set('currentView.orderByColumn', column.id);
      },

      selectOrderByDirection: function selectOrderByDirection(sortOrder) {
        this.set('currentView.orderBy', sortOrder.direction);
      },

      saveView: function saveView() {
        var currentView = this.get('currentView');
        this.set('currentView.columns', this.get('orderedColumnList'));

        return currentView.save().then(function (view) {
          view.get('predicateCollections').filter(function (predicate) {
            return !predicate.get('id');
          }).forEach(function (predicate) {
            predicate.unloadRecord();
          });

          view.cacheRelationships(); //TODO: this should be done when didUpdate event is fired on the model. But it's not. Work out why
          return view;
        });
      },

      selectTeam: function selectTeam(team) {
        this.set('currentView.visibilityType', 'TEAM');
        this.get('currentView.visibilityToTeams').setObjects(team);
      }
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-admin/views/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 66
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.label.view_title"], [], ["loc", [null, [14, 30], [14, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [14, 6], [14, 90]]]], ["inline", "input", [], ["class", "input input-text", "name", "title", "type", "text", "value", ["subexpr", "@mut", [["get", "currentView.title", ["loc", [null, [15, 70], [15, 87]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [15, 97], [15, 109]]]]], [], []]], ["loc", [null, [15, 6], [15, 111]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.title", ["loc", [null, [16, 36], [16, 60]]]]], [], []]], ["loc", [null, [16, 6], [16, 62]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-toggle", [], ["activated", ["subexpr", "@mut", [["get", "currentView.isEnabled", ["loc", [null, [21, 18], [21, 39]]]]], [], []], "label", ["subexpr", "t", [["subexpr", "if", [["get", "currentView.isEnabled", ["loc", [null, [22, 21], [22, 42]]]], "admin.views.edit.description_on.is_enabled", "admin.views.edit.description_off.is_enabled"], [], ["loc", [null, [22, 17], [22, 134]]]]], [], ["loc", [null, [22, 14], [22, 135]]]]], ["loc", [null, [20, 6], [23, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.isEnabled", ["loc", [null, [24, 36], [24, 64]]]]], [], []]], ["loc", [null, [24, 6], [24, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [13, 4], [17, 22]]]], ["block", "ko-form/field", [], [], 1, null, ["loc", [null, [19, 4], [25, 22]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 63
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.label.sharing"], [], ["loc", [null, [30, 30], [30, 63]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 38,
                    "column": 8
                  },
                  "end": {
                    "line": 47,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "team.title", ["loc", [null, [46, 12], [46, 26]]]]],
              locals: ["team"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 50,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "u-inline-block ko-admin_views_edit_team-selector");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(6);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(dom.childAt(fragment, [7]), 1, 1);
              morphs[4] = dom.createMorphAt(dom.childAt(fragment, [9]), 1, 1);
              morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
              return morphs;
            },
            statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [30, 6], [30, 87]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-just-myself"], [], ["loc", [null, [31, 23], [31, 49]]]], "label", ["subexpr", "t", ["admin.views.radio.label.me"], [], ["loc", [null, [31, 56], [31, 88]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithSelf", ["loc", [null, [31, 97], [31, 111]]]]], [], []], "onRadio", "setViewSharingSelf", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [31, 150], [31, 162]]]]], [], []]], ["loc", [null, [31, 6], [31, 164]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-every-agent"], [], ["loc", [null, [32, 23], [32, 49]]]], "label", ["subexpr", "t", ["admin.views.radio.label.all"], [], ["loc", [null, [32, 56], [32, 89]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithAll", ["loc", [null, [32, 98], [32, 111]]]]], [], []], "onRadio", "setViewSharingAll", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [32, 149], [32, 161]]]]], [], []]], ["loc", [null, [32, 6], [32, 163]]]], ["inline", "ko-radio", [], ["class", ["subexpr", "qa-cls", [" qa-specific-team"], [], ["loc", [null, [35, 25], [35, 53]]]], "label", ["subexpr", "t", ["admin.views.radio.label.specific"], [], ["loc", [null, [35, 60], [35, 98]]]], "checked", ["subexpr", "@mut", [["get", "sharedWithTeam", ["loc", [null, [35, 107], [35, 121]]]]], [], []], "onRadio", "setViewSharingTeam", "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [35, 160], [35, 172]]]]], [], []]], ["loc", [null, [35, 8], [35, 174]]]], ["block", "power-select-multiple", [], ["searchEnabled", false, "class", "ember-power-select-wrapper--ko", "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [41, 22], [41, 54]]]], "options", ["subexpr", "@mut", [["get", "teams", ["loc", [null, [42, 18], [42, 23]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedTeams", ["loc", [null, [43, 19], [43, 32]]]]], [], []], "searchField", "title", "onchange", ["subexpr", "action", ["selectTeam"], [], ["loc", [null, [45, 19], [45, 40]]]]], 1, null, ["loc", [null, [38, 8], [47, 34]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.visibilityType", ["loc", [null, [49, 36], [49, 69]]]]], [], []]], ["loc", [null, [49, 6], [49, 71]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 51,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [29, 4], [50, 22]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 54,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-admin_views_edit_predicate-header");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["inline", "format-message", ["admin.views.heading.predicate_builder"], [], ["loc", [null, [55, 56], [55, 114]]]], ["inline", "ko-predicate-builder", [], ["definitions", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [57, 20], [57, 31]]]]], [], []], "collections", ["subexpr", "@mut", [["get", "currentView.predicateCollections", ["loc", [null, [58, 20], [58, 52]]]]], [], []], "onCollectionAddition", ["subexpr", "action", ["addCollection"], [], ["loc", [null, [59, 29], [59, 53]]]], "onCollectionRemoval", ["subexpr", "action", ["removeCollection"], [], ["loc", [null, [60, 28], [60, 55]]]], "onAdditionOfRuleToCollection", ["subexpr", "action", ["createRuleForCollection"], [], ["loc", [null, [61, 37], [61, 71]]]], "onRuleDeletion", ["subexpr", "action", ["removeRuleFromCollection"], [], ["loc", [null, [62, 23], [62, 58]]]], "canDeleteCollection", ["subexpr", "@mut", [["get", "canDeleteCollection", ["loc", [null, [63, 28], [63, 47]]]]], [], []]], ["loc", [null, [56, 6], [64, 8]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "fields.predicate_collections.errors", ["loc", [null, [65, 36], [65, 71]]]]], [], []]], ["loc", [null, [65, 6], [65, 73]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 2
              },
              "end": {
                "line": 67,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-admin/forms/group", [], [], 0, null, ["loc", [null, [54, 4], [66, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 69,
                "column": 2
              },
              "end": {
                "line": 71,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-admin/views/edit/columns", [], ["columns", ["subexpr", "@mut", [["get", "orderedColumnList", ["loc", [null, [70, 42], [70, 59]]]]], [], []]], ["loc", [null, [70, 4], [70, 61]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 76,
                      "column": 8
                    },
                    "end": {
                      "line": 76,
                      "column": 64
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.views.label.sorting"], [], ["loc", [null, [76, 31], [76, 64]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 78,
                      "column": 10
                    },
                    "end": {
                      "line": 87,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "column.label", ["loc", [null, [86, 12], [86, 28]]]]],
                locals: ["column"],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 92,
                      "column": 10
                    },
                    "end": {
                      "line": 100,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "direction.label", ["loc", [null, [99, 12], [99, 31]]]]],
                locals: ["direction"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 75,
                    "column": 6
                  },
                  "end": {
                    "line": 103,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "u-inline-block");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "u-inline-block");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [3]);
                var element1 = dom.childAt(fragment, [5]);
                var morphs = new Array(5);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                morphs[3] = dom.createMorphAt(element1, 1, 1);
                morphs[4] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
                return morphs;
              },
              statements: [["block", "ko-form/field/help", [], [], 0, null, ["loc", [null, [76, 8], [76, 87]]]], ["block", "ko-select", [], ["class", ["subexpr", "qa-cls", ["qa-sorted-by"], [], ["loc", [null, [79, 18], [79, 41]]]], "placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [80, 24], [80, 56]]]], "options", ["subexpr", "@mut", [["get", "sortableColumns", ["loc", [null, [81, 20], [81, 35]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedSortableColumn", ["loc", [null, [82, 21], [82, 43]]]]], [], []], "onChange", ["subexpr", "action", ["selectOrderByColumn"], [], ["loc", [null, [83, 21], [83, 51]]]], "size", "medium"], 1, null, ["loc", [null, [78, 10], [87, 24]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.orderByColumn", ["loc", [null, [88, 45], [88, 77]]]]], [], []]], ["loc", [null, [88, 15], [88, 79]]]], ["block", "ko-select", [], ["placeholder", ["subexpr", "t", ["generic.select_placeholder"], [], ["loc", [null, [93, 24], [93, 56]]]], "options", ["subexpr", "@mut", [["get", "sortOrderDirections", ["loc", [null, [94, 20], [94, 39]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedSortingDirection", ["loc", [null, [95, 21], [95, 45]]]]], [], []], "onChange", ["subexpr", "action", ["selectOrderByDirection"], [], ["loc", [null, [96, 21], [96, 54]]]], "size", "medium"], 2, null, ["loc", [null, [92, 10], [100, 24]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "currentView.errors.orderBy", ["loc", [null, [101, 45], [101, 71]]]]], [], []]], ["loc", [null, [101, 15], [101, 73]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 104,
                    "column": 6
                  },
                  "end": {
                    "line": 104,
                    "column": 68
                  }
                },
                "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.views.description.sorting"], [], ["loc", [null, [104, 29], [104, 68]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 74,
                  "column": 4
                },
                "end": {
                  "line": 105,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [75, 6], [103, 24]]]], ["block", "ko-form/field/help", [], [], 1, null, ["loc", [null, [104, 6], [104, 91]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 105,
                  "column": 4
                },
                "end": {
                  "line": 107,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["admin.views.edit.select_columns"], [], ["loc", [null, [106, 6], [106, 45]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 108,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "currentView.columns.length", ["loc", [null, [74, 10], [74, 36]]]]], [], 0, 1, ["loc", [null, [74, 4], [107, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 114,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [8, 13], [8, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [9, 15], [9, 33]]]]], ["loc", [null, [6, 2], [10, 4]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.view_details"], [], ["loc", [null, [12, 33], [12, 71]]]]], 0, null, ["loc", [null, [12, 2], [26, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.sharing"], [], ["loc", [null, [28, 33], [28, 66]]]]], 1, null, ["loc", [null, [28, 2], [51, 27]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "currentView.viewType", ["loc", [null, [53, 17], [53, 37]]]], "TRASH"], [], ["loc", [null, [53, 13], [53, 46]]]]], [], ["loc", [null, [53, 8], [53, 47]]]]], [], 2, null, ["loc", [null, [53, 2], [67, 9]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.configure_layout"], [], ["loc", [null, [69, 33], [69, 75]]]]], 3, null, ["loc", [null, [69, 2], [71, 27]]]], ["block", "ko-admin/forms/group", [], ["legend", ["subexpr", "t", ["admin.views.heading.sorting"], [], ["loc", [null, [73, 33], [73, 66]]]]], 4, null, ["loc", [null, [73, 2], [108, 27]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [111, 13], [111, 21]]]]], [], []], "buttonText", ["subexpr", "t", ["generic.save"], [], ["loc", [null, [112, 15], [112, 33]]]]], ["loc", [null, [110, 2], [113, 4]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 115,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [2, 9], [2, 15]]]]], [], []], "onSubmit", ["subexpr", "action", ["saveView"], [], ["loc", [null, [3, 11], [3, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onSuccess", ["loc", [null, [4, 12], [4, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [114, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin-card-team/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-admin-card-team'],
    team: null,

    showMembers: false,

    hasMembers: _ember['default'].computed.gt('team.memberCount', 0),
    limitedMembers: _ember['default'].computed('team.members.[]', function () {
      return this.get('team.members').slice(0, 9);
    })
  });
});
define("frontend-cp/components/ko-admin-card-team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-card-team__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h4");
          dom.setAttribute(el2, "class", "ko-admin-card-team__title");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("p");
          dom.setAttribute(el2, "class", "t-caption");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element2, 'class');
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["content", "team.title", ["loc", [null, [4, 6], [4, 20]]]], ["attribute", "class", ["concat", [["subexpr", "qa-cls", ["qa-admin-card-team__member-count"], [], ["loc", [null, [7, 19], [7, 64]]]]]]], ["content", "team.memberCount", ["loc", [null, [7, 66], [7, 86]]]], ["inline", "t", ["admin.teams.agent"], ["numAgents", ["subexpr", "@mut", [["get", "team.memberCount", ["loc", [null, [7, 128], [7, 144]]]]], [], []]], ["loc", [null, [7, 94], [7, 146]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 6
              },
              "end": {
                "line": 17,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-admin-card-team-members__item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "member.avatar", ["loc", [null, [16, 72], [16, 85]]]]], [], []]], ["loc", [null, [16, 53], [16, 87]]]]],
          locals: ["member"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-admin-card-team__content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          dom.setAttribute(el2, "class", "ko-admin-card-team-members");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "limitedMembers", ["loc", [null, [15, 14], [15, 28]]]]], [], 0, null, ["loc", [null, [15, 6], [17, 15]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["session.admin.people.teams.edit", ["get", "team.id", ["loc", [null, [1, 45], [1, 52]]]]], ["class", "t-naked-link"], 0, null, ["loc", [null, [1, 0], [10, 12]]]], ["block", "if", [["subexpr", "and", [["get", "showMembers", ["loc", [null, [12, 11], [12, 22]]]], ["get", "hasMembers", ["loc", [null, [12, 23], [12, 33]]]]], [], ["loc", [null, [12, 6], [12, 34]]]]], [], 1, null, ["loc", [null, [12, 0], [20, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-admin-card-user/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-admin-card-user'],
    userSelectedAction: null,
    isSelected: false,
    actions: {
      onUserSelected: function onUserSelected(user, isSelected) {
        this.sendAction('userSelectedAction', user, isSelected);
      }
    }
  });
});
define("frontend-cp/components/ko-admin-card-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "user.avatar", ["loc", [null, [3, 23], [3, 34]]]]], [], []]], ["loc", [null, [3, 4], [3, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "t-bold");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "t-caption");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["content", "user.fullName", ["loc", [null, [6, 6], [6, 23]]]], ["content", "user.role.title", ["loc", [null, [9, 6], [9, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [2, 2], [11, 14]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-card-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-admin-selectable-card", [], ["model", ["subexpr", "@mut", [["get", "user", ["loc", [null, [1, 34], [1, 38]]]]], [], []], "isSelected", ["subexpr", "@mut", [["get", "isSelected", ["loc", [null, [1, 50], [1, 60]]]]], [], []], "onSelectedAction", "onUserSelected"], 0, null, ["loc", [null, [1, 0], [12, 29]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-admin-selectable-card/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-admin-selectable-card'],
    onSelectedAction: null,
    isActive: true,
    isSelected: false,

    classNameBindings: ['isActive::ko-admin-selectable-card--inactive', 'isSelected:ko-admin-selectable-card--selected'],

    click: function click(e) {
      e.preventDefault();
      this.send('onSelected', !this.get('isSelected'));
    },

    actions: {
      onSelected: function onSelected(isSelected) {
        this.toggleProperty('isSelected');
        this.sendAction('onSelectedAction', this.get('model'), isSelected);
      }
    }
  });
});
define("frontend-cp/components/ko-admin-selectable-card/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-admin-selectable-card/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-selectable-card__checkbox");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-admin-selectable-card__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "ko-checkbox", [], ["large", true, "checked", ["subexpr", "@mut", [["get", "isSelected", ["loc", [null, [2, 36], [2, 46]]]]], [], []], "onCheck", "onSelected"], ["loc", [null, [2, 2], [2, 69]]]], ["content", "yield", ["loc", [null, [6, 2], [6, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var inject = _ember['default'].inject;
  var Component = _ember['default'].Component;
  exports['default'] = Component.extend({
    notification: inject.service(),
    intl: inject.service(),
    routing: inject.service('-routing'),
    classNames: ['u-inline-block', 'ko-agent-dropdown'],
    transitionToRouteAction: 'transitionToRoute',
    navItems: [{ name: 'case', text: 'Case', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/case.svg' }, { name: 'user', text: 'User', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/user.svg' }, { name: 'organization', text: 'Organization', path: null, icon: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/organization.svg' }],

    // Actions
    actions: {
      reset: function reset() {
        this.set('selectedNavItem', null);
      },

      onTabCreateComplete: function onTabCreateComplete(route, model) {
        this._createSuccessNotification(route);
        this.get('routing').transitionTo(route, [model]);
      },

      transitionToRoute: function transitionToRoute(dropdown) {
        for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          rest[_key - 1] = arguments[_key];
        }

        this.sendAction.apply(this, ['transitionToRouteAction'].concat(rest));
        dropdown.actions.close();
      }
    },

    // Methods

    _createSuccessNotification: function _createSuccessNotification(route) {
      var notificationMessage = null;

      switch (route) {
        case 'session.agent.users.user':
          notificationMessage = this.get('intl').findTranslationByKey('users.user.created');
          break;
        case 'session.agent.cases.case':
          // intentionally left blank, because at this step we do not create a Case
          break;
        case 'session.agent.organisations.organisation':
          notificationMessage = this.get('intl').findTranslationByKey('organisation.organisation.created');
          break;
      }

      if (notificationMessage) {
        this.get('notification').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    }
  });
});
define('frontend-cp/components/ko-agent-dropdown/create-case/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus', 'moment'], function (exports, _ember, _frontendCpMixinsAutofocus, _moment) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend(_frontendCpMixinsAutofocus['default'], {
    isDisabled: false,
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),
    fields: null,
    filteredUsers: null,

    // HTML
    classNames: ['ko-agent-dropdown_create-case'],

    // Lifecycle hooks
    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);
      var intl = this.get('intl');
      var requesterErrorText = intl.findTranslationByKey('generic.create_case_panel.requester_required');
      this.set('fields', _ember['default'].Object.create({
        requester: {
          value: null,
          validator: function validator(value) {
            return value ? null : requesterErrorText;
          }
        }
      }));
      this.set('filteredUsers', null);

      _ember['default'].run.next(function () {
        _this.$('.ember-power-select-typeahead-input').focus();
      });
    },

    // CPs
    requesterName: computed('fields.requester.value.fullName', {
      get: function get() {
        return this.get('fields.requester.value.fullName');
      },
      set: function set(_, v) {
        return v;
      }
    }),

    // Actions
    actions: {
      searchUsers: function searchUsers(filterString) {
        var _this2 = this;

        if (this.get('fields.requester.value')) {
          this.set('fields.requester.value', null);
          this.set('requesterName', filterString);
        }

        return new _ember['default'].RSVP.Promise(function (resolve) {
          _ember['default'].run.debounce(_this2, _this2._searchUsers, filterString, resolve, 200);
        });
      },

      selectRequester: function selectRequester(user) {
        this.set('fields.requester.value', user);
        _ember['default'].run.schedule('afterRender', this.$('.button--primary'), 'focus');
      },

      submit: function submit() {
        this.get('onSubmit')('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: this.get('fields.requester.value.id') } });

        this.get('metrics').trackEvent({
          event: 'Case Draft Created',
          category: 'Case',
          action: 'click',
          label: '+ button'
        });
      }
    },

    // Methods
    _searchUsers: function _searchUsers(filterString, resolve) {
      if (filterString.length === 0) {
        return resolve([]);
      }

      return this.get('store').query('user', {
        name: filterString
      }).then(function (results) {
        return resolve(results);
      }, function () {
        return resolve([]);
      });
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/components/ko-agent-dropdown/create-case/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 79
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.create_case_panel.requester_label"], [], ["loc", [null, [8, 30], [8, 79]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 10
                },
                "end": {
                  "line": 13,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "ko-agent-dropdown-create-case__dropdown-user-image");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element0, 'src');
              return morphs;
            },
            statements: [["attribute", "src", ["concat", [["get", "user.avatar", ["loc", [null, [12, 83], [12, 94]]]]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 14,
                    "column": 57
                  },
                  "end": {
                    "line": 14,
                    "column": 141
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(", ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "user.organization.name", ["loc", [null, [14, 108], [14, 134]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 10
                },
                "end": {
                  "line": 18,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-bold");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
              return morphs;
            },
            statements: [["content", "user.fullName", ["loc", [null, [14, 33], [14, 50]]]], ["block", "if", [["get", "user.organization", ["loc", [null, [14, 63], [14, 80]]]]], [], 0, null, ["loc", [null, [14, 57], [14, 148]]]], ["content", "user.primaryEmailAddress", ["loc", [null, [16, 14], [16, 42]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown-create-case__dropdown-user");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [11, 10], [18, 22]]]]],
          locals: ["user"],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 6
              },
              "end": {
                "line": 24,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ember-power-select-option");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["generic.search.no_results"], [], ["loc", [null, [22, 10], [22, 43]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [8, 6], [8, 103]]]], ["block", "power-select-typeahead", [], ["selected", ["subexpr", "@mut", [["get", "requesterName", ["loc", [null, [9, 41], [9, 54]]]]], [], []], "search", ["subexpr", "action", ["searchUsers"], [], ["loc", [null, [9, 62], [9, 84]]]], "onchange", ["subexpr", "action", ["selectRequester"], [], ["loc", [null, [9, 94], [9, 120]]]], "renderInPlace", true], 1, 2, ["loc", [null, [9, 6], [24, 33]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 34
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "ko-loader", ["loc", [null, [26, 21], [26, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-agent-dropdown-create-case__input");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__footer");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item u-1/1 t-right");
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button t-small");
        dom.setAttribute(el4, "name", "cancel");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n        ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button button--primary");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [5, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[4] = dom.createAttrMorph(element4, 'onclick');
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createAttrMorph(element5, 'disabled');
        morphs[7] = dom.createAttrMorph(element5, 'onclick');
        morphs[8] = dom.createMorphAt(element5, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_case_panel.title"], [], ["loc", [null, [2, 39], [2, 78]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.requester", ["loc", [null, [7, 27], [7, 43]]]]], [], []]], 0, null, ["loc", [null, [7, 4], [25, 22]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [26, 10], [26, 19]]]]], [], 1, null, ["loc", [null, [26, 4], [26, 41]]]], ["inline", "t", ["generic.create_case_panel.info"], [], ["loc", [null, [28, 39], [28, 77]]]], ["attribute", "onclick", ["get", "onCancel", ["loc", [null, [31, 77], [31, 85]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [32, 10], [32, 32]]]], ["attribute", "disabled", ["subexpr", "not", [["get", "fields.requester.value.id", ["loc", [null, [34, 76], [34, 101]]]]], [], ["loc", [null, [34, 70], [34, 103]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [34, 112], [34, 131]]]]], ["inline", "t", ["generic.next"], [], ["loc", [null, [35, 10], [35, 30]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/create-organisation/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},

    store: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    fields: null,
    erroredDomains: null,

    init: function init() {
      var _this = this;

      this._super();
      this.set('erroredDomains', []);
      this.set('organization', this.get('store').createRecord('organization'));

      this.set('fields', _ember['default'].Object.create({
        domains: {
          value: []
        }
      }));

      _ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-organisation__name').focus();
      });
    },

    actions: {
      addDomain: function addDomain(domainName) {
        if (!domainName) {
          return;
        }

        if (this.get('fields.domains.value').any(function (addedDomain) {
          return addedDomain.get('domain') === domainName;
        })) {
          return;
        }
        var domain = this.get('store').createRecord('identity-domain', { domain: domainName });
        this.get('fields.domains.value').pushObject(domain);
      },

      removeDomain: function removeDomain(domain) {
        this.get('fields.domains.value').removeObject(domain);

        this.$('.js-tag-input').focus();
        return false;
      },

      submit: function submit() {
        var _this2 = this;

        var organization = this.get('organization');
        var onSubmit = this.get('onSubmit');
        organization.set('domains', this.get('fields.domains.value'));
        if (onSubmit) {
          onSubmit();
        }
        return organization.save().then(function (organization) {
          organization.set('domains', organization.get('domains').filter(function (domain) {
            return domain.get('id');
          }));
          _this2.get('dropdown.actions').close();

          _this2.get('metrics').trackEvent({
            event: 'Organization Created',
            category: 'Organization',
            action: 'click',
            label: '+ button'
          });

          return organization;
        });
      },

      error: function error() {
        this.get('metrics').trackEvent({
          event: 'Organization Creation Failed',
          category: 'Organization',
          action: 'click',
          label: '+ button'
        });
      }
    }
  });
});
define("frontend-cp/components/ko-agent-dropdown/create-organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 13,
                  "column": 82
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_organisation_panel.name_label"], [], ["loc", [null, [13, 30], [13, 82]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 106]]]], ["inline", "input", [], ["type", "text", "tabindex", 1, "class", "ko-agent-dropdown-create-organisation__name input-text u-1/1", "name", "name", "value", ["subexpr", "@mut", [["get", "organization.name", ["loc", [null, [14, 124], [14, 141]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 151], [14, 163]]]]], [], []]], ["loc", [null, [14, 6], [14, 165]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "organization.errors.name", ["loc", [null, [15, 36], [15, 60]]]]], [], []]], ["loc", [null, [15, 6], [15, 62]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 19,
                  "column": 84
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_organisation_panel.domain_label"], [], ["loc", [null, [19, 30], [19, 84]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown-create-organisation__tags-input");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [19, 6], [19, 108]]]], ["inline", "ko-tags", [], ["inputTabindex", 2, "errorTags", ["subexpr", "@mut", [["get", "erroredDomains", ["loc", [null, [23, 20], [23, 34]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "fields.domains.value", ["loc", [null, [24, 23], [24, 43]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addDomain"], [], ["loc", [null, [25, 24], [25, 44]]]], "onTagRemoval", ["subexpr", "action", ["removeDomain"], [], ["loc", [null, [26, 23], [26, 46]]]]], ["loc", [null, [21, 8], [26, 48]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], [], 0, null, ["loc", [null, [12, 4], [16, 22]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.domains", ["loc", [null, [18, 27], [18, 41]]]]], [], []]], 1, null, ["loc", [null, [18, 4], [28, 22]]]], ["inline", "t", ["generic.create_organisation_panel.info"], [], ["loc", [null, [30, 41], [30, 87]]]], ["inline", "ko-form/buttons", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [32, 15], [32, 23]]]]], [], []], "submitLabel", ["subexpr", "t", ["generic.create_organisation_panel.submit"], [], ["loc", [null, [33, 18], [33, 64]]]], "cancelLabel", ["subexpr", "t", ["generic.cancel"], [], ["loc", [null, [34, 18], [34, 38]]]]], ["loc", [null, [31, 4], [34, 40]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_organisation_panel.title"], [], ["loc", [null, [2, 39], [2, 86]]]], ["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [7, 11], [7, 17]]]]], [], []], "onSubmit", ["subexpr", "action", ["submit"], [], ["loc", [null, [8, 13], [8, 30]]]], "onError", ["subexpr", "action", ["error"], [], ["loc", [null, [9, 12], [9, 28]]]], "onSuccess", ["subexpr", "@mut", [["get", "onCreate", ["loc", [null, [10, 14], [10, 22]]]]], [], []]], 0, null, ["loc", [null, [6, 2], [35, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-agent-dropdown/create-user/component', ['exports', 'ember', 'frontend-cp/mixins/autofocus', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpMixinsAutofocus, _frontendCpUtilsFormatValidations) {

  var composeValidators = function composeValidators() {
    for (var _len = arguments.length, validators = Array(_len), _key = 0; _key < _len; _key++) {
      validators[_key] = arguments[_key];
    }

    return function (value) {
      return validators.reduce(function (acc, validator) {
        return acc || validator(value);
      }, null);
    };
  };

  exports['default'] = _ember['default'].Component.extend(_frontendCpMixinsAutofocus['default'], {
    // params
    onCreate: function onCreate() {},
    onCancel: function onCancel() {},

    fields: null,

    intlService: _ember['default'].inject.service('intl'),
    notificationService: _ember['default'].inject.service('notification'),
    metrics: _ember['default'].inject.service(),
    store: _ember['default'].inject.service(),

    init: function init() {
      var _this = this;

      this._super();
      var intlService = this.get('intlService');
      var nameRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.name_required');
      var emailRequiredTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_required');
      var invalidEmailTranslation = intlService.findTranslationByKey('generic.create_user_panel.email_invalid');

      this.set('fields', _ember['default'].Object.create({
        full_name: {
          value: '',
          validator: function validator(name) {
            return Boolean(name) ? null : nameRequiredTranslation;
          }
        },
        email: {
          value: '',
          validator: composeValidators(function (email) {
            return Boolean(email) ? null : emailRequiredTranslation;
          }, function (email) {
            return (0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email) ? null : invalidEmailTranslation;
          })
        }
      }));

      _ember['default'].run.next(function () {
        _this.$('.ko-agent-dropdown-create-user__first-name').focus();
      });
    },

    actions: {
      onError: function onError(error) {
        if (error.errors.findBy('code', 'FIELD_DUPLICATE')) {
          var intlService = this.get('intlService');
          this.get('notificationService').removeAll();
          this.get('notificationService').add({
            type: 'error',
            title: intlService.findTranslationByKey('generic.create_user_panel.user_exists_toast'),
            autodismiss: true,
            dismissable: false
          });
          this.set('fields.email.errors', [{
            message: intlService.findTranslationByKey('generic.create_user_panel.user_exists')
          }]);
        }

        this.get('metrics').trackEvent({
          event: 'User Creation Failed',
          category: 'User',
          action: 'click',
          label: '+ button'
        });
      },

      submit: function submit() {
        var _this2 = this;

        var fields = this.get('fields');
        var store = this.get('store');
        var onSubmit = this.get('onSubmit');
        if (onSubmit) {
          onSubmit();
        }
        var savePromise = store.findRecord('role', 4).then(function (roleModel) {
          var email = store.createRecord('identity-email', {
            isPrimary: true,
            email: fields.get('email.value')
          });
          return store.createRecord('user', {
            role: roleModel,
            fullName: fields.get('full_name.value'),
            emails: [email]
          }).save();
        });

        savePromise.then(function () {
          _this2.get('metrics').trackEvent({
            event: 'User Created',
            category: 'User',
            action: 'click',
            label: '+ button'
          });

          return _this2.get('dropdown.actions').close();
        });

        return savePromise;
      }
    }
  });
});
/* eslint-disable camelcase */
define("frontend-cp/components/ko-agent-dropdown/create-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 6
                },
                "end": {
                  "line": 13,
                  "column": 74
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_user_panel.name_label"], [], ["loc", [null, [13, 30], [13, 74]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [13, 6], [13, 98]]]], ["inline", "input", [], ["type", "text", "tabindex", 1, "class", "ko-agent-dropdown-create-user__first-name input-text u-1/1", "name", "full_name", "value", ["subexpr", "@mut", [["get", "fields.full_name.value", ["loc", [null, [14, 127], [14, 149]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [14, 159], [14, 171]]]]], [], []]], ["loc", [null, [14, 6], [14, 173]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 75
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "t", ["generic.create_user_panel.email_label"], [], ["loc", [null, [18, 30], [18, 75]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-form/field/label", [], [], 0, null, ["loc", [null, [18, 6], [18, 99]]]], ["inline", "input", [], ["type", "text", "tabindex", 2, "class", "input-text u-1/1", "name", "email", "value", ["subexpr", "@mut", [["get", "fields.email.value", ["loc", [null, [19, 81], [19, 99]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isSubmitting", ["loc", [null, [19, 109], [19, 121]]]]], [], []]], ["loc", [null, [19, 6], [19, 123]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__footer");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.full_name", ["loc", [null, [12, 27], [12, 43]]]]], [], []]], 0, null, ["loc", [null, [12, 4], [15, 22]]]], ["block", "ko-form/field", [], ["field", ["subexpr", "@mut", [["get", "fields.email", ["loc", [null, [17, 27], [17, 39]]]]], [], []]], 1, null, ["loc", [null, [17, 4], [20, 22]]]], ["inline", "t", ["generic.create_user_panel.info"], [], ["loc", [null, [22, 41], [22, 79]]]], ["inline", "ko-form/buttons", [], ["onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [24, 15], [24, 23]]]]], [], []], "submitLabel", ["subexpr", "t", ["generic.create_user_panel.submit"], [], ["loc", [null, [25, 18], [25, 56]]]], "cancelLabel", ["subexpr", "t", ["generic.cancel"], [], ["loc", [null, [26, 18], [26, 38]]]]], ["loc", [null, [23, 4], [26, 40]]]]],
        locals: ["_", "isSubmitting"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/create-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-agent-dropdown__header box box--secondary");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h5");
        dom.setAttribute(el2, "class", "ko-agent-dropdown__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box box--secondary");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.create_user_panel.title"], [], ["loc", [null, [2, 39], [2, 78]]]], ["block", "ko-form", [], ["fields", ["subexpr", "@mut", [["get", "fields", ["loc", [null, [7, 11], [7, 17]]]]], [], []], "onSubmit", ["subexpr", "action", ["submit"], [], ["loc", [null, [8, 13], [8, 30]]]], "onSuccess", ["subexpr", "@mut", [["get", "onCreate", ["loc", [null, [9, 14], [9, 22]]]]], [], []], "onError", ["subexpr", "action", ["onError"], [], ["loc", [null, [10, 12], [10, 30]]]]], 0, null, ["loc", [null, [6, 2], [27, 14]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-agent-dropdown/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-agent-dropdown/create-user", [], ["dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [5, 17], [5, 25]]]]], [], []], "onCreate", ["subexpr", "action", ["onTabCreateComplete", "session.agent.users.user"], [], ["loc", [null, [6, 17], [6, 74]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [7, 17], [7, 33]]]]], ["loc", [null, [4, 6], [7, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 4
                  },
                  "end": {
                    "line": 12,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-agent-dropdown/create-case", [], ["onSubmit", ["subexpr", "action", ["transitionToRoute", ["get", "dropdown", ["loc", [null, [10, 45], [10, 53]]]]], [], ["loc", [null, [10, 17], [10, 54]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [11, 17], [11, 33]]]]], ["loc", [null, [9, 6], [11, 35]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 4
                    },
                    "end": {
                      "line": 17,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n    ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-agent-dropdown/create-organisation", [], ["dropdown", ["subexpr", "@mut", [["get", "dropdown", ["loc", [null, [14, 17], [14, 25]]]]], [], []], "onCreate", ["subexpr", "action", ["onTabCreateComplete", "session.agent.organisations.organisation"], [], ["loc", [null, [15, 17], [15, 90]]]], "onCancel", ["subexpr", "action", ["reset"], [], ["loc", [null, [16, 17], [16, 33]]]]], ["loc", [null, [13, 6], [16, 35]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 4
                  },
                  "end": {
                    "line": 17,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [12, 18], [12, 38]]]], "organization"], [], ["loc", [null, [12, 14], [12, 54]]]]], [], 0, null, ["loc", [null, [12, 4], [17, 4]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [8, 18], [8, 38]]]], "case"], [], ["loc", [null, [8, 14], [8, 46]]]]], [], 0, 1, ["loc", [null, [8, 4], [17, 4]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "selectedNavItem.name", ["loc", [null, [3, 14], [3, 34]]]], "user"], [], ["loc", [null, [3, 10], [3, 42]]]]], [], 0, 1, ["loc", [null, [3, 4], [17, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 6
                },
                "end": {
                  "line": 25,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ko-agent-dropdown__nav-item button-naked");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("img");
              dom.setAttribute(el2, "class", "ko-agent-dropdown__nav-item-img");
              dom.setAttribute(el2, "width", "75");
              dom.setAttribute(el2, "height", "75");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "t-center u-mt--");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createAttrMorph(element1, 'src');
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedNavItem", ["loc", [null, [21, 101], [21, 116]]]]], [], ["loc", [null, [21, 96], [21, 117]]]], ["get", "navItem", ["loc", [null, [21, 118], [21, 125]]]]], [], ["loc", [null, [21, 87], [21, 127]]]]], ["attribute", "src", ["concat", [["get", "navItem.icon", ["loc", [null, [22, 85], [22, 97]]]]]]], ["content", "navItem.text", ["loc", [null, [23, 39], [23, 55]]]]],
            locals: ["navItem"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-agent-dropdown__nav-items box box--secondary");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "navItems", ["loc", [null, [20, 14], [20, 22]]]]], [], 0, null, ["loc", [null, [20, 6], [25, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "selectedNavItem", ["loc", [null, [2, 8], [2, 23]]]]], [], 0, 1, ["loc", [null, [2, 2], [27, 9]]]]],
        locals: ["dropdown"],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-agent-dropdown__icon-square");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "ko-agent-dropdown__add-icon u-pointer i-plus i-size-18");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-agent-dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "dropdownClass", "ko-agent-dropdown__drop", "onClose", ["subexpr", "action", ["reset"], [], ["loc", [null, [1, 85], [1, 101]]]], "triggerClass", "ko-agent-dropdown__trigger"], 0, 1, ["loc", [null, [1, 0], [32, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-avatar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNameBindings: ['styles.avatar'],
    avatar: null,
    size: 'normal', // [small | medium | large]

    avatarSizeClass: _ember['default'].computed('size', function () {
      switch (this.get('size')) {
        case 'small':
          return this.get('styles.sizeSmall');
        case 'medium':
          return this.get('styles.sizeMedium');
        case 'large':
          return this.get('styles.sizeLarge');
      }
    })
  });
});
define("frontend-cp/components/ko-avatar/styles", ["exports"], function (exports) {
  exports["default"] = {
    "avatar": "_avatar_6hgxvb",
    "image": "_image_6hgxvb",
    "sizeSmall": "_sizeSmall_6hgxvb",
    "sizeMedium": "_sizeMedium_6hgxvb",
    "sizeLarge": "_sizeLarge_6hgxvb"
  };
});
define("frontend-cp/components/ko-avatar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-avatar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("img");
        dom.setAttribute(el1, "alt", "");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element0, 'src');
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "styles.image", ["loc", [null, [1, 14], [1, 26]]]], " ", ["get", "avatarSizeClass", ["loc", [null, [1, 31], [1, 46]]]]]]], ["attribute", "src", ["concat", [["get", "avatar", ["loc", [null, [1, 57], [1, 63]]]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-breadcrumbs/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-breadcrumbs/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 10
                  },
                  "end": {
                    "line": 8,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "breadcrumb.label", ["loc", [null, [7, 12], [7, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 9,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [6, 21], [6, 41]]]], ["subexpr", "hash-to-query-params", [["get", "breadcrumb.queryParams", ["loc", [null, [6, 64], [6, 86]]]]], [], ["loc", [null, [6, 42], [6, 87]]]]], ["class", "breadcrumbs__item", "current-when", ["subexpr", "readonly", [["get", "breadcrumb.routeName", ["loc", [null, [6, 137], [6, 157]]]]], [], ["loc", [null, [6, 127], [6, 158]]]]], 0, null, ["loc", [null, [6, 10], [8, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 10,
                      "column": 10
                    },
                    "end": {
                      "line": 12,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "breadcrumb.label", ["loc", [null, [11, 12], [11, 32]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 9,
                    "column": 8
                  },
                  "end": {
                    "line": 13,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [10, 21], [10, 41]]]], ["get", "breadcrumb.dynamicSegments.firstObject", ["loc", [null, [10, 42], [10, 80]]]], ["subexpr", "hash-to-query-params", [["get", "breadcrumb.queryParams", ["loc", [null, [10, 103], [10, 125]]]]], [], ["loc", [null, [10, 81], [10, 126]]]]], ["class", "breadcrumbs__item", "current-when", ["subexpr", "readonly", [["get", "breadcrumb.routeName", ["loc", [null, [10, 176], [10, 196]]]]], [], ["loc", [null, [10, 166], [10, 197]]]]], 0, null, ["loc", [null, [10, 10], [12, 22]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 8
                },
                "end": {
                  "line": 13,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [9, 22], [9, 55]]]], 1], [], ["loc", [null, [9, 18], [9, 58]]]]], [], 0, null, ["loc", [null, [9, 8], [13, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 6
              },
              "end": {
                "line": 14,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [5, 18], [5, 51]]]], 0], [], ["loc", [null, [5, 14], [5, 54]]]]], [], 0, 1, ["loc", [null, [5, 8], [13, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 10
                  },
                  "end": {
                    "line": 18,
                    "column": 10
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "breadcrumb.label", ["loc", [null, [17, 12], [17, 32]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 19,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [16, 21], [16, 41]]]]], ["class", "breadcrumbs__item"], 0, null, ["loc", [null, [16, 10], [18, 22]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 10
                    },
                    "end": {
                      "line": 22,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "breadcrumb.label", ["loc", [null, [21, 12], [21, 32]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 8
                  },
                  "end": {
                    "line": 23,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "breadcrumb.routeName", ["loc", [null, [20, 21], [20, 41]]]], ["get", "breadcrumb.dynamicSegments.firstObject", ["loc", [null, [20, 42], [20, 80]]]]], ["class", "breadcrumbs__item"], 0, null, ["loc", [null, [20, 10], [22, 22]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 8
                },
                "end": {
                  "line": 23,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [19, 22], [19, 55]]]], 1], [], ["loc", [null, [19, 18], [19, 58]]]]], [], 0, null, ["loc", [null, [19, 8], [23, 8]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 6
              },
              "end": {
                "line": 24,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "breadcrumb.dynamicSegments.length", ["loc", [null, [15, 18], [15, 51]]]], 0], [], ["loc", [null, [15, 14], [15, 54]]]]], [], 0, 1, ["loc", [null, [15, 8], [23, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "breadcrumb.queryParams", ["loc", [null, [4, 12], [4, 34]]]]], [], 0, 1, ["loc", [null, [4, 6], [24, 13]]]]],
        locals: ["breadcrumb"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-breadcrumbs/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "breadcrumbs");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "breadcrumbs", ["loc", [null, [3, 12], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 4], [25, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-bulk-sidebar/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  exports['default'] = _ember['default'].Component.extend({
    //Attributes
    selectedCaseIds: null,

    //State
    assigneeTeam: null,
    assigneeAgent: null,
    caseStatus: null,
    casePriority: null,
    caseType: null,
    tags: [],
    statuses: [],
    types: [],
    priorities: [],
    suggestedTags: [],
    assigneeField: { title: 'Assignee' },
    statusNoChangesItem: null,
    typeNoChangesItem: null,
    priorityNoChangesItem: null,
    noChangesString: null,
    isAssigneeEdited: false,
    isCaseStatusEdited: false,
    isCaseTypeEdited: false,
    isCasePriorityEdited: false,
    isTagsFieldEdited: false,

    // HTML
    classNames: ['ko-bulk-sidebar'],

    //Serivces
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service('intl'),
    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    bulkService: _ember['default'].inject.service('case-bulk-update'),
    notification: _ember['default'].inject.service(),

    //Initializers
    fetchReferenceData: _ember['default'].on('init', function () {
      this._super.apply(this, arguments);
      var store = this.get('store');

      this.set('statuses', store.findAll('case-status'));
      this.set('types', store.findAll('case-type'));
      this.set('priorities', store.findAll('case-priority'));
    }),

    createNoChangeItemsAndSetDefaultSelections: _ember['default'].on('init', function () {
      this._super.apply(this, arguments);
      var noChangesString = this.get('intl').findTranslationByKey('generic.no_changes');

      this.set('noChangesString', noChangesString);
      this.set('statusNoChangesItem', _ember['default'].Object.create({
        id: -1,
        label: noChangesString,
        statusType: 'No Changes'
      }));
      this.set('typeNoChangesItem', _ember['default'].Object.create({
        id: -1,
        label: noChangesString
      }));
      this.set('priorityNoChangesItem', _ember['default'].Object.create({
        id: -1,
        label: noChangesString
      }));

      this.set('caseStatus', this.get('statusNoChangesItem'));
      this.set('caseType', this.get('typeNoChangesItem'));
      this.set('casePriority', this.get('priorityNoChangesItem'));
    }),

    //CP's
    bulkCaseStatuses: _ember['default'].computed('statuses.[]', function () {
      var apiCaseStatuses = this.get('statuses').toArray();

      return [this.get('statusNoChangesItem')].concat(_toConsumableArray(apiCaseStatuses.filter(function (caseStatus) {
        return caseStatus.get('statusType') !== 'NEW';
      })));
    }),

    bulkCaseTypes: _ember['default'].computed('types.[]', function () {
      return [this.get('typeNoChangesItem'), _ember['default'].Object.create({ label: '-' })].concat(_toConsumableArray(this.get('types').toArray()));
    }),

    bulkCasePriorities: _ember['default'].computed('priorities.[]', function () {
      return [this.get('priorityNoChangesItem'), _ember['default'].Object.create({ label: '-' })].concat(_toConsumableArray(this.get('priorities').toArray()));
    }),

    isEdited: _ember['default'].computed.or('isAssigneeEdited', 'isCaseStatusEdited', 'isCaseTypeEdited', 'isCasePriorityEdited', 'isTagsFieldEdited'),

    //Methods
    suggestTagsCallback: function suggestTagsCallback(searchTerm) {
      var _this = this;

      var tagSuggestionService = this.get('tagSuggestionService');
      tagSuggestionService.suggest(searchTerm).then(function (data) {
        if (tagSuggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        var exclusions = _this.get('tags').mapBy('name');

        _this.set('suggestedTags', _npmLodash['default'].difference(data.mapBy('name'), exclusions));
        tagSuggestionService.flushQueue();
      });
    },

    //Actions
    actions: {
      setAssignee: function setAssignee(team, agent) {
        if (team === null && agent === null) {
          this.set('assigneeTeam', null);
          this.set('assigneeAgent', null);
          this.set('isAssigneeEdited', false);
        } else {
          this.set('assigneeTeam', team);
          this.set('assigneeAgent', agent);
          this.set('isAssigneeEdited', true);
        }
      },

      setCaseStatus: function setCaseStatus(caseStatus) {
        if (caseStatus && caseStatus.get('id') === -1) {
          this.set('caseStatus', this.get('statusNoChangesItem'));
          this.set('isCaseStatusEdited', false);
        } else {
          this.set('caseStatus', caseStatus);
          this.set('isCaseStatusEdited', true);
        }
      },

      setCaseType: function setCaseType(caseType) {
        if (caseType && caseType.get('id') === -1) {
          this.set('caseType', this.get('typeNoChangesItem'));
          this.set('isCaseTypeEdited', false);
        } else {
          this.set('caseType', caseType);
          this.set('isCaseTypeEdited', true);
        }
      },

      setCasePriority: function setCasePriority(casePriority) {
        if (casePriority && casePriority.get('id') === -1) {
          this.set('casePriority', this.get('priorityNoChangesItem'));
          this.set('isCasePriorityEdited', false);
        } else {
          this.set('casePriority', casePriority);
          this.set('isCasePriorityEdited', true);
        }
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        _ember['default'].run.debounce(this, this.suggestTagsCallback, searchTerm, 300);
      },

      addTag: function addTag(tagName) {
        var editedTags = this.get('tags');
        if (editedTags.find(function (tag) {
          return tag.get('name') === tagName;
        })) {
          return;
        }
        var newTag = _ember['default'].Object.create({
          name: tagName
        });
        editedTags.pushObject(newTag);
        this.set('isTagsFieldEdited', true);
      },

      removeTag: function removeTag(tag) {
        var tags = this.get('tags');
        tags.removeObject(tag);
        if (!tags.length) {
          this.set('isTagsFieldEdited', false);
        }
      },

      submit: function submit() {
        var _this2 = this;

        var bulkService = this.get('bulkService');
        var options = {};
        if (this.get('assigneeTeam')) {
          options.assigneeTeam = this.get('assigneeTeam');
        }
        if (this.get('assigneeAgent')) {
          options.assigneeAgent = this.get('assigneeAgent');
        }
        if (this.get('caseStatus.id') !== -1) {
          options.caseStatus = this.get('caseStatus');
        }
        if (this.get('casePriority.id') !== -1) {
          options.casePriority = this.get('casePriority');
        }
        if (this.get('caseType.id') !== -1) {
          options.caseType = this.get('caseType');
        }
        if (this.get('tags').length) {
          options.tags = this.get('tags');
        }

        bulkService.updateCases(this.get('selectedCaseIds'), options).then(function () {
          _this2.get('notification').add({
            type: 'success',
            title: _this2.get('intl').findTranslationByKey('cases.cases.updated'),
            autodismiss: true
          });

          _this2.sendAction('onBulkUpdateCases');
        })['catch'](function (e) {
          _this2.get('notification').add({
            type: 'error',
            title: e.message,
            autodismiss: true
          });
        });
      },

      cancel: function cancel() {
        this.sendAction('onCancel');
      }
    }
  });
});
define("frontend-cp/components/ko-bulk-sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 4
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-bulk-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-layout_advanced__button-loading"], ["loc", [null, [63, 6], [63, 62]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-bulk-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["cases.list.bulkupdate.updatecases"], [], ["loc", [null, [65, 6], [65, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 69,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-bulk-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-bulk-sidebar__title");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        var el3 = dom.createTextNode("Update Cases");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "fields");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-bulk-sidebar__button-bar");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "class", "button t-small");
        dom.setAttribute(el2, "name", "cancel");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "type", "button");
        dom.setAttribute(el2, "name", "update-cases");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(fragment, [4]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element1, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createAttrMorph(element2, 'onclick');
        morphs[6] = dom.createMorphAt(element2, 1, 1);
        morphs[7] = dom.createAttrMorph(element3, 'class');
        morphs[8] = dom.createAttrMorph(element3, 'onclick');
        morphs[9] = dom.createMorphAt(element3, 1, 1);
        return morphs;
      },
      statements: [["inline", "ko-case-content/field/assignee", [], ["team", ["subexpr", "@mut", [["get", "assigneeTeam", ["loc", [null, [6, 9], [6, 21]]]]], [], []], "agent", ["subexpr", "@mut", [["get", "assigneeAgent", ["loc", [null, [7, 10], [7, 23]]]]], [], []], "field", ["subexpr", "@mut", [["get", "assigneeField", ["loc", [null, [8, 10], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", ["setAssignee"], [], ["loc", [null, [9, 18], [9, 40]]]], "isEdited", ["subexpr", "@mut", [["get", "isAssigneeEdited", ["loc", [null, [10, 13], [10, 29]]]]], [], []], "emptyLabel", ["subexpr", "t", ["generic.no_changes"], [], ["loc", [null, [11, 15], [11, 39]]]], "hasEmptyOption", true], ["loc", [null, [5, 2], [13, 4]]]], ["inline", "ko-info-bar/field/select", [], ["title", "Status", "options", ["subexpr", "@mut", [["get", "bulkCaseStatuses", ["loc", [null, [17, 12], [17, 28]]]]], [], []], "value", ["subexpr", "@mut", [["get", "caseStatus", ["loc", [null, [18, 10], [18, 20]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isCaseStatusEdited", ["loc", [null, [19, 13], [19, 31]]]]], [], []], "onValueChange", ["subexpr", "action", ["setCaseStatus"], [], ["loc", [null, [20, 18], [20, 42]]]], "labelPath", "label", "hasEmptyOption", false], ["loc", [null, [15, 2], [23, 4]]]], ["inline", "ko-info-bar/field/select", [], ["title", "Type", "options", ["subexpr", "@mut", [["get", "bulkCaseTypes", ["loc", [null, [27, 12], [27, 25]]]]], [], []], "value", ["subexpr", "@mut", [["get", "caseType", ["loc", [null, [28, 10], [28, 18]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isCaseTypeEdited", ["loc", [null, [29, 13], [29, 29]]]]], [], []], "onValueChange", ["subexpr", "action", ["setCaseType"], [], ["loc", [null, [30, 18], [30, 40]]]], "labelPath", "label", "hasEmptyOption", false], ["loc", [null, [25, 2], [33, 4]]]], ["inline", "ko-info-bar/field/select", [], ["title", "Priority", "options", ["subexpr", "@mut", [["get", "bulkCasePriorities", ["loc", [null, [37, 12], [37, 30]]]]], [], []], "value", ["subexpr", "@mut", [["get", "casePriority", ["loc", [null, [38, 10], [38, 22]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isCasePriorityEdited", ["loc", [null, [39, 13], [39, 33]]]]], [], []], "onValueChange", ["subexpr", "action", ["setCasePriority"], [], ["loc", [null, [40, 18], [40, 44]]]], "labelPath", "label", "hasEmptyOption", false], ["loc", [null, [35, 2], [43, 4]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["cases.tags"], [], ["loc", [null, [46, 10], [46, 26]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [47, 13], [47, 30]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "tags", ["loc", [null, [48, 17], [48, 21]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [49, 18], [49, 31]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addTag"], [], ["loc", [null, [50, 18], [50, 35]]]], "onTagRemoval", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [51, 17], [51, 37]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [52, 20], [52, 42]]]], "newTagText", ["subexpr", "t", ["cases.newtag"], [], ["loc", [null, [53, 15], [53, 33]]]], "addTagText", ["subexpr", "t", ["cases.addtag"], [], ["loc", [null, [54, 15], [54, 33]]]]], ["loc", [null, [45, 2], [55, 4]]]], ["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [58, 69], [58, 88]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [59, 4], [59, 26]]]], ["attribute", "class", ["concat", ["button button--primary ", ["subexpr", "if", [["subexpr", "not", [["get", "isEdited", ["loc", [null, [61, 64], [61, 72]]]]], [], ["loc", [null, [61, 59], [61, 73]]]], "disabled"], [], ["loc", [null, [61, 54], [61, 86]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [61, 116], [61, 135]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [62, 10], [62, 18]]]]], [], 0, 1, ["loc", [null, [62, 4], [66, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-case/macro-selector/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var map = _npmLodash['default'].map;
  var groupBy = _npmLodash['default'].groupBy;
  var partition = _npmLodash['default'].partition;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onMacroSelect: null,
    isDisabled: false,
    macros: [],

    // HTML
    classNames: ['ko-case_macro-selector'],

    // build a value list for the option drilldown
    macroValueList: _ember['default'].computed('macros.[]', function () {
      var items = this.get('macros').map(function (macro) {
        return {
          id: _ember['default'].get(macro, 'id'),
          value: _ember['default'].get(macro, 'title').split(/\\/)
        };
      });

      var group = function group(items) {
        return map(groupBy(items, function (item) {
          return item.value[0];
        }), function (items, label) {
          var _partition = partition(items, function (item) {
            return item.value.length > 1;
          });

          var _partition2 = _slicedToArray(_partition, 2);

          var children = _partition2[0];

          var _partition2$1 = _slicedToArray(_partition2[1], 1);

          var current = _partition2$1[0];

          return {
            id: current ? current.id : null,
            value: label,
            children: children.length ? group(children.map(function (item) {
              return {
                id: item.id,
                value: item.value.slice(1)
              };
            })) : null
          };
        });
      };

      return group(items);
    }),

    actions: {
      onMacroSelect: function onMacroSelect(macroId) {
        var selectedMacro = this.get('macros').filter(function (macro) {
          return macro.get('id') === macroId;
        }).get('firstObject');
        this.attrs.onMacroSelect(selectedMacro);
      }
    }
  });
});
define("frontend-cp/components/ko-case/macro-selector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/drill-down", [], ["options", ["subexpr", "@mut", [["get", "macroValueList", ["loc", [null, [2, 10], [2, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onValueChange", ["subexpr", "action", ["onMacroSelect"], [], ["loc", [null, [4, 16], [4, 40]]]], "hasEmptyOption", false, "searchPlaceholder", ["subexpr", "t", ["cases.applymacroplaceholder"], [], ["loc", [null, [6, 20], [6, 53]]]], "searchEnabled", true, "triggerComponent", "ko-case/macro-selector/trigger", "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "extra", ["subexpr", "hash", [], ["label", ["subexpr", "t", ["cases.macro"], [], ["loc", [null, [11, 10], [11, 27]]]]], ["loc", [null, [10, 8], [12, 3]]]]], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-case/macro-selector/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/macro-selector/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/select/button", [], ["label", ["subexpr", "@mut", [["get", "extra.label", ["loc", [null, [1, 34], [1, 45]]]]], [], []]], ["loc", [null, [1, 0], [1, 47]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case/sla-sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    sla: null,
    slaMetrics: null,

    // HTML
    classNames: ['ko-case_sla-sidebar']
  });
});
define('frontend-cp/components/ko-case/sla-sidebar/metric/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    intl: _ember['default'].inject.service(),

    metric: null,

    tagName: 'tr',

    statusClassName: _ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');
      return 'ko-case_sla-sidebar__data--' + status.toLowerCase();
    }),

    title: _ember['default'].computed('metric.title', function () {
      var title = this.get('metric.title');
      return this.get('intl').findTranslationByKey('cases.sla.title.' + title);
    }),

    iconClass: _ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state');
      var status = this.get('metric.status');

      var iconClass = this.getIconClassName(state, status);
      return iconClass + ' t-' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });
});
define("frontend-cp/components/ko-case/sla-sidebar/metric/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    -\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "metric.numberOfWholeDaysRemaining", ["loc", [null, [13, 4], [13, 41]]]], ["inline", "t", ["generic.day_abbreviation"], [], ["loc", [null, [13, 41], [13, 73]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          return morphs;
        },
        statements: [["content", "metric.numberOfWholeHoursRemaining", ["loc", [null, [17, 4], [17, 42]]]], ["inline", "t", ["generic.hour_abbreviation"], [], ["loc", [null, [17, 42], [17, 75]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/metric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "ko-case_sla-sidebar__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        dom.setAttribute(el1, "class", "u-pr- t-right");
        var el2 = dom.createTextNode("\n  in\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("td");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(element0, [10]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        morphs[3] = dom.createMorphAt(element0, 3, 3);
        morphs[4] = dom.createMorphAt(element0, 5, 5);
        morphs[5] = dom.createMorphAt(element0, 7, 7);
        morphs[6] = dom.createMorphAt(element0, 8, 8);
        morphs[7] = dom.createAttrMorph(element1, 'class');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [2, 2], [2, 11]]]], ["attribute", "class", ["concat", ["ko-case_sla-sidebar__data ", ["get", "statusClassName", ["loc", [null, [7, 39], [7, 54]]]]]]], ["block", "if", [["get", "metric.isBreached", ["loc", [null, [8, 8], [8, 25]]]]], [], 0, null, ["loc", [null, [8, 2], [10, 9]]]], ["block", "if", [["get", "metric.numberOfWholeDaysRemaining", ["loc", [null, [12, 8], [12, 41]]]]], [], 1, null, ["loc", [null, [12, 2], [14, 9]]]], ["block", "if", [["get", "metric.numberOfWholeHoursRemaining", ["loc", [null, [16, 8], [16, 42]]]]], [], 2, null, ["loc", [null, [16, 2], [18, 9]]]], ["content", "metric.numberOfWholeMinutesRemaining", ["loc", [null, [20, 2], [20, 42]]]], ["inline", "t", ["generic.minute_abbreviation"], [], ["loc", [null, [20, 42], [20, 77]]]], ["attribute", "class", ["concat", [["get", "iconClass", ["loc", [null, [22, 14], [22, 23]]]], " i-size-18 i-after"]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/components/ko-case/sla-sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-case/sla-sidebar/metric", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [5, 40], [5, 46]]]]], [], []]], ["loc", [null, [5, 4], [5, 48]]]]],
        locals: ["metric"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case/sla-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("b");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        dom.setAttribute(el1, "class", "ko-case_sla-sidebar__table");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.SLA"], [], ["loc", [null, [1, 3], [1, 22]]]], ["content", "sla.title", ["loc", [null, [1, 27], [1, 40]]]], ["block", "each", [["get", "slaMetrics", ["loc", [null, [4, 10], [4, 20]]]]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNameBindings: ['menuActive', 'noItems:u-hidden'],
    menuActive: false,
    isCaseNew: false,

    permissionService: _ember['default'].inject.service('permissions'),
    sessionService: _ember['default'].inject.service('session'),

    noItems: _ember['default'].computed('canTrashCase', function () {
      var _this = this;

      var items = ['canTrashCase'];
      return items.filter(function (item) {
        return _this.get(item);
      }).length === 0;
    }),

    canTrashCase: _ember['default'].computed('isCaseNew', 'caseState', 'sessionService.permissions', function () {
      var permission = this.get('permissionService').has('app.case.trash', this.get('case'));
      return !this.get('isCaseNew') && permission && this.get('caseState') !== 'TRASH';
    }),

    actions: {
      onTrashCase: function onTrashCase() {
        this.attrs.onTrashCase();
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-case-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onTrashCase", ["loc", [null, [6, 54], [6, 65]]]]], [], ["loc", [null, [6, 45], [6, 67]]]]], ["inline", "t", ["cases.trash"], [], ["loc", [null, [7, 4], [7, 23]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "canTrashCase", ["loc", [null, [5, 8], [5, 20]]]]], [], 0, null, ["loc", [null, [5, 2], [9, 9]]]]],
        locals: ["dropdown"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "button button--default button--dropdown");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "i-chevron-large-down");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "horizontalPosition", "left", "class", "ko-case-action-menu__dropdown"], 0, 1, ["loc", [null, [1, 0], [14, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-case-content/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slice = Array.prototype.slice;

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var readOnly = _ember['default'].computed.readOnly;

  var dimensions = {
    pageHeaderHeight: 83
  };

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    'case': null,
    postId: null,
    sortOrder: '',
    filter: '',
    caseFields: null,
    priorities: [],
    statuses: [],
    types: [],
    onTabNameUpdate: null,
    onStateUpdate: null,
    onQueryParamsUpdate: null,
    onCaseCreate: null,
    tabState: null,

    // State
    suggestedTags: null,
    suggestedPeople: null,
    suggestedPeopleLoading: false,
    suggestedPeopleTotal: 0,
    ccPopupProxy: null,

    // HTML
    classNames: ['ko-case-content'],

    // Services
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    notificationService: _ember['default'].inject.service('notification'),
    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    peopleSuggestionService: _ember['default'].inject.service('suggestion/people'),
    intlService: _ember['default'].inject.service('intl'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    pusherService: _ember['default'].inject.service('pusher'),
    metrics: _ember['default'].inject.service(),
    apiAdapter: _ember['default'].inject.service('api-adapter'),
    permissionService: _ember['default'].inject.service('permissions'),
    caseTab: _ember['default'].inject.service(),
    sessionService: _ember['default'].inject.service('session'),
    tabStoreService: _ember['default'].inject.service('tab-store'),

    // Lifecycle hooks
    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);
      if (!oldAttrs || newAttrs['case'].value !== oldAttrs['case'].value) {
        this.get('caseTab').initState(this.get('tabId'), this.get('case'), this.get('defaultReplyChannel'));
        this.set('tabState', this.get('caseTab').getState(this.get('tabId')));

        this.set('suggestedPeople', null);
        this.set('suggestedPeopleLoading', false);
        this.set('suggestedPeopleTotal', 0);
        if (this.get('ccPopupProxy') && this.get('ccPopupProxy').close) {
          this.get('ccPopupProxy').close();
        }

        // TODO where is unsubscribe???
        this.get('pusherService').subscribeTo(this.get('case.realtimeChannel'), 'CHANGE', this.get('caseTab'), this.get('caseTab').updateCaseFromPusher, newAttrs.tabId.value, this.get('case.id'));

        if (this.get('case.isNew')) {
          _ember['default'].run.scheduleOnce('afterRender', function () {
            _ember['default'].$('.ql-editor').focus();
          });
        }
      }

      if (!oldAttrs || newAttrs['case'].value !== oldAttrs['case'].value || newAttrs.sortOrder.value !== oldAttrs.sortOrder.value || newAttrs.filter.value !== oldAttrs.filter.value) {
        this.get('caseTab').loadPosts(this.get('tabId'), {
          model: this.get('case'),
          filter: this.get('filter'),
          sortOrder: this.get('sortOrder'),
          postId: this.get('postId')
        });
      }
    },

    // Initializers
    initCcPopupProxy: _ember['default'].on('init', function () {
      this.set('ccPopupProxy', _ember['default'].Object.create());
    }),

    // State attributes
    channelId: readOnly('tabState.channelId'),
    postContent: readOnly('tabState.postContent'),
    attachedPostFiles: readOnly('tabState.attachedPostFiles'),

    posts: readOnly('tabState.posts'),

    errorMap: readOnly('tabState.errorMap'),
    isSaving: readOnly('tabState.isSaving'),
    replyOptions: readOnly('tabState.replyOptions'),
    editedTags: readOnly('tabState.editedTags'),
    localCustomFields: readOnly('tabState.localCustomFields'),
    propertiesChangeViaPusher: readOnly('tabState.propertiesChangeViaPusher'),
    editedCase: readOnly('tabState.editedCase'),
    isEditInProgress: readOnly('tabState.isEditInProgress'),

    isRequesterDisabled: _ember['default'].computed('isCaseDisabled', 'features.canEditRequester', function () {
      return this.get('isCaseDisabled') || !this.get('features.canEditRequester');
    }),

    stickyOptions: _ember['default'].computed(function () {
      return {
        topSpacing: dimensions.pageHeaderHeight
      };
    }),

    macros: _ember['default'].computed(function () {
      return this.get('store').peekAll('macro');
    }),

    caseForms: _ember['default'].computed(function () {
      return this.get('store').findAll('case-form');
    }),

    enabledCaseForms: _ember['default'].computed('caseForms.[]', function () {
      return this.get('caseForms').filterBy('isEnabled');
    }),

    isPeopleAutoCompleteAvailable: _ember['default'].computed('channel', 'channel.isChannelTypeMailbox', function () {
      return this.get('channel.channelType') !== 'NOTE' && this.get('channel.isChannelTypeMailbox');
    }),

    tags: _ember['default'].computed('case.tags.@each.name', function () {
      return this.get('case.tags').map(function (tag) {
        return tag.get('name');
      });
    }),

    availableChannels: _ember['default'].computed('case.id', 'case.replyChannels', 'case.channels', function () {
      if (!this.get('case.isNew')) {
        return this.get('case.replyChannels');
      } else {
        return this.get('case.channels');
      }
    }),

    availableReplyChannels: _ember['default'].computed('availableChannels', function () {
      return this.get('availableChannels').filter(function (channel) {
        return channel.get('channelType') !== 'NOTE';
      });
    }),

    caseOrFormFields: _ember['default'].computed('caseFields', 'editedCase.form', function () {
      var caseFields = this.get('caseFields');
      var form = this.get('editedCase.form');
      return form ? form.get('fields') : caseFields.sortBy('sortOrder');
    }),

    statusField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'STATUS');
    }),

    typeField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'TYPE');
    }),

    priorityField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'PRIORITY');
    }),

    assigneeField: _ember['default'].computed('caseOrFormFields.[]', function () {
      return this.get('caseOrFormFields').findBy('fieldType', 'ASSIGNEE');
    }),

    hasBrand: _ember['default'].computed('case.brand.companyName', function () {
      return Boolean(this.get('case.brand.companyName'));
    }),

    defaultReplyChannel: _ember['default'].computed('case.sourceChannel', 'availableReplyChannels.firstObject', function () {
      var defaultChannel = this.get('availableReplyChannels').findBy('id', this.get('case.lastPublicChannel.id'));
      if (defaultChannel) {
        return defaultChannel;
      }

      defaultChannel = this.get('availableReplyChannels').findBy('account.isDefault');
      return defaultChannel || this.get('availableReplyChannels.firstObject');
    }),

    channel: _ember['default'].computed('channelId', 'availableChannels.[]', function () {
      var channelId = this.get('channelId');
      return this.get('availableChannels').find(function (channel) {
        return channel.get('id') === channelId;
      });
    }),

    hasChannel: _ember['default'].computed('case.sourceChannel.channelType', function () {
      return !!this.get('case.sourceChannel.channelType');
    }),

    isCaseDisabled: _ember['default'].computed('case.state', function () {
      return this.get('case.state') === 'TRASH';
    }),

    caseDates: _ember['default'].computed('case.createdAt', 'case.updatedAt', 'case.activityAt', function () {
      return [{ title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('case.createdAt') }, { title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('case.updatedAt') }];
    }),

    replyType: _ember['default'].computed('channel', function () {
      var channelType = this.get('channel.channelType');
      return channelType === 'NOTE' ? 'NOTE' : 'REPLY';
    }),

    canRestoreCase: _ember['default'].computed('case.state', function () {
      return this.get('permissionService').has('app.case.untrash');
    }),

    isContentEdited: _ember['default'].computed('postContent', function () {
      return this.get('postContent').trim() !== '';
    }),

    isSubjectEdited: _ember['default'].computed('editedCase.subject', 'case.subject', function () {
      return this.get('case.subject') !== this.get('editedCase.subject');
    }),

    isRequesterEdited: _ember['default'].computed('editedCase.requester', 'case.requester', function () {
      return this.get('case.requester') !== this.get('editedCase.requester');
    }),

    isAssigneeEdited: _ember['default'].computed('editedCase.assigneeAgent', 'case.assigneeAgent', 'editedCase.assigneeTeam', 'case.assigneeTeam', function () {
      return this.get('case.assigneeAgent') !== this.get('editedCase.assigneeAgent') || this.get('case.assigneeTeam') !== this.get('editedCase.assigneeTeam');
    }),

    isStatusEdited: _ember['default'].computed('editedCase.status', 'case.status', function () {
      return this.get('case.status') !== this.get('editedCase.status');
    }),

    isTypeEdited: _ember['default'].computed('editedCase.caseType', 'case.caseType', function () {
      return this.get('case.caseType') !== this.get('editedCase.caseType');
    }),

    isPriorityEdited: _ember['default'].computed('editedCase.priority', 'case.priority', function () {
      return this.get('case.priority') !== this.get('editedCase.priority');
    }),

    isTagsFieldEdited: _ember['default'].computed('editedTags.[]', 'case.tags.@each.name', function () {
      var editedTags = this.get('editedTags');
      var tags = this.get('case.tags');
      if (editedTags.get('length') !== tags.get('length')) {
        return true;
      }

      var editedTagNames = editedTags.mapBy('name');
      return tags.any(function (tag) {
        return !editedTagNames.includes(tag.get('name'));
      });
    }),

    isFormEdited: _ember['default'].computed('editedCase.form', 'case.form', function () {
      return this.get('case.form') !== this.get('editedCase.form');
    }),

    localCustomFieldsMap: _ember['default'].computed('localCustomFields.@each.value', function () {
      var map = _ember['default'].Object.create();
      this.get('localCustomFields').forEach(function (field) {
        map.set(field.get('field.id'), field.get('value'));
      });
      return map;
    }),

    editedCustomFields: _ember['default'].computed('case.customFields.@each.value', 'localCustomFields.@each.value', function () {
      var _this = this;

      return this.get('localCustomFields').filter(function (fieldObject) {
        var originalFieldObject = _this.get('case.customFields').find(function (field) {
          return field.get('field.id') === fieldObject.get('field.id');
        });
        if (!originalFieldObject) {
          // we do not consider field to be edited if it was undefined and became an empty string
          return Boolean(fieldObject.get('value'));
        }
        if (fieldObject.get('field.fieldType') === 'CHECKBOX') {
          // Special treatment of checkbox values since 10,12 is the same as 12,10
          var sort = function sort(value) {
            return (value || '').split(',').sort().join(',');
          };
          return sort(originalFieldObject.get('value')) !== sort(fieldObject.get('value'));
        } else {
          return originalFieldObject.get('value') !== fieldObject.get('value');
        }
      }).map(function (fieldObject) {
        return fieldObject.get('field.id');
      });
    }),

    editedCustomFieldsMap: _ember['default'].computed('editedCustomFields.[]', function () {
      var map = _ember['default'].Object.create();
      this.get('editedCustomFields').forEach(function (field) {
        map.set(field, true);
      });
      return map;
    }),

    isCustomFieldsEdited: _ember['default'].computed('editedCustomFields.[]', function () {
      return this.get('editedCustomFields.length') > 0;
    }),

    isEdited: _ember['default'].computed.or('isContentEdited', 'isSubjectEdited', 'isRequesterEdited', 'isAssigneeEdited', 'isStatusEdited', 'isTypeEdited', 'isPriorityEdited', 'isTagsFieldEdited', 'isFormEdited', 'isCustomFieldsEdited'),

    isPristine: _ember['default'].computed.not('isEdited'),

    submitDisabled: _ember['default'].computed.or('isSaving', 'isPristine', 'isCaseDisabled'),

    // Actions
    actions: {
      submit: function submit(tabId, model, channel) {
        var _this2 = this;

        if (this.get('caseTab').isUploadInProgress(tabId)) {
          this.get('notificationService').add({
            type: 'warning',
            title: 'Upload in progress',
            autodismiss: true
          });
          return;
        }

        if (model.get('isNew')) {
          this.get('caseTab').create(tabId, model, channel).then(function () {
            _this2.getCaseSaveNotification('create');
            _this2.attrs.onCaseCreate(model);
          });
        } else {
          (function () {
            var action = _this2.get('caseTab').hasReply(tabId) ? 'reply' : 'update';
            var sortOrder = _this2.get('sortOrder');

            _this2.get('caseTab')[action](tabId, model, channel, sortOrder).then(function () {
              _this2.getCaseSaveNotification(action);

              if (action === 'reply') {
                window.document.body.scrollTop = 0;
              }
            });
          })();
        }
      },

      dispatch: function dispatch(method, tabId) {
        var _get;

        (_get = this.get('caseTab'))[method].apply(_get, [tabId].concat(_toConsumableArray([].concat(_slice.call(arguments)).slice(2))));
      },

      textAreaFocusActivate: function textAreaFocusActivate() {
        if (!this.get('isContentEdited')) {
          _ember['default'].run.scheduleOnce('afterRender', function () {
            _ember['default'].$('.ql-editor').focus();
          });
        }
      },

      textEditorFocusStateChange: function textEditorFocusStateChange(tabId, state) {
        if (!state) {
          this.get('caseTab').setEditInProgress(tabId, false);
        }
      },

      beginReply: function beginReply(type, tabId, channels) {
        var _this3 = this;

        this.get('caseTab').setEditInProgress(tabId, true);

        var tab = this.get('caseTab').getState(tabId);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          if (type === 'note') {
            _this3.get('caseTab').setNote(tabId, channels);
          } else {
            _this3.get('caseTab').setChannel(tabId, tab.get('lastChannel'));
          }

          _ember['default'].$('.ql-editor').focus();
        });
      },

      trashCase: function trashCase(caseId) {
        var _this4 = this;

        if (confirm(this.get('intl').findTranslationByKey('cases.confirm.trash'))) {
          // eslint-disable-line
          this.get('apiAdapter').trashCase(caseId).then(function () {
            _this4.get('notificationService').success(_this4.get('intl').findTranslationByKey('cases.trash.success_message'));
          });
        }
      },

      restoreCase: function restoreCase(caseId) {
        var _this5 = this;

        this.get('apiAdapter').restoreCase(caseId).then(function () {
          _this5.get('notificationService').success(_this5.get('intl').findTranslationByKey('cases.trash.restore.success_message'));
        });
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        _ember['default'].run.debounce(this, this.suggestTagsCallback, searchTerm, 300);
      },

      replyWithQuote: function replyWithQuote(tabId, post) {
        var content = post.get('contents').split('\n').map(function (line) {
          return '> ' + line;
        }).join('\n');
        this.get('caseTab').setPostContent(tabId, '\n' + content);

        this.get('caseTab').setEditInProgress(tabId, true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });

        this.get('metrics').trackEvent({
          event: 'Case Reply Quote Added',
          category: 'Case',
          action: 'click',
          label: 'quote icon'
        });
      },

      replyToPost: function replyToPost(tabId, post) {
        var original = post.get('original');
        var channel = post.get('sourceChannel');

        if (channel) {
          var caseTab = this.get('caseTab');
          caseTab.setChannel(tabId, channel);
          caseTab.setInReplyTo(tabId, original.get('uuid'));
          caseTab.setEditInProgress(tabId, true);

          var recipients = original.get('recipients');
          if (recipients) {
            var ccs = recipients.filterBy('isCC');
            caseTab.setCCs(tabId, ccs.getEach('identity.email'));
          }

          _ember['default'].run.scheduleOnce('afterRender', function () {
            _ember['default'].$('.ql-editor').focus();
          });
        }

        this.get('metrics').trackEvent({
          event: 'Reply To Post',
          category: 'Case Feed',
          action: 'click',
          label: 'reply button'
        });
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        var _this6 = this;

        if (!searchTerm) {
          this.set('suggestedPeople', null);
          this.set('suggestedPeopleLoading', false);
          return;
        }

        this.set('suggestedPeopleLoading', true);
        var peopleSuggestionService = this.get('peopleSuggestionService');
        var promise = peopleSuggestionService.suggest(searchTerm, selectedPeople);

        promise.then(function (data) {
          if (peopleSuggestionService.isPromiseDiscarded(searchTerm)) {
            return;
          }

          _this6.set('suggestedPeople', data.mapBy('identity').filter(function (identity) {
            return selectedPeople.indexOf(identity.get('email')) === -1;
          }));
          _this6.set('suggestedPeopleTotal', data.get('meta.total'));

          peopleSuggestionService.flushQueue();

          _this6.set('suggestedPeopleLoading', false);
        });
      }
    },

    // Methods

    suggestTagsCallback: function suggestTagsCallback(searchTerm) {
      var _this7 = this;

      var tagSuggestionService = this.get('tagSuggestionService');
      tagSuggestionService.suggest(searchTerm).then(function (data) {
        if (tagSuggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        var exclusions = _this7.get('editedTags').mapBy('name');

        _this7.set('suggestedTags', _npmLodash['default'].difference(data.mapBy('name'), exclusions));
        tagSuggestionService.flushQueue();
      });
    },

    getCaseSaveNotification: function getCaseSaveNotification(type) {
      var notificationMessage = null;

      // TODO: update messages later, for now all are the same.
      switch (type) {
        case 'create':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.created');
          break;
        case 'update':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
        case 'note':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
        case 'reply':
          notificationMessage = this.get('intlService').findTranslationByKey('cases.case.updated');
          break;
      }

      if (notificationMessage) {
        this.get('notificationService').add({
          type: 'success',
          title: notificationMessage,
          autodismiss: true
        });
      }
    }
  });
});
define('frontend-cp/components/ko-case-content/dropdown/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    label: '',
    onChange: null,
    options: null,
    value: null,

    contentStyle: null,

    // HTML
    classNames: ['ko-case-content_dropdown'],

    currentValueLabel: _ember['default'].computed('value', 'options', function () {
      var content = this.get('value');
      var option = this.get('options').find(function (option) {
        return option.content === content;
      });
      if (option) {
        return option.label;
      } else {
        return '';
      }
    })
  });
});
define("frontend-cp/components/ko-case-content/dropdown/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-case-content_dropdown__label");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(": ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "ko-case-content_dropdown__current-value");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-select");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element1, 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [2]), 0, 0);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [3, 50], [3, 59]]]], ["content", "currentValueLabel", ["loc", [null, [3, 115], [3, 136]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 6
                  },
                  "end": {
                    "line": 11,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", [["get", "attrs.onChange", ["loc", [null, [8, 60], [8, 74]]]], ["get", "option.content", ["loc", [null, [8, 75], [8, 89]]]]], [], ["loc", [null, [8, 51], [8, 91]]]]], ["content", "option.label", ["loc", [null, [9, 10], [9, 26]]]]],
              locals: ["option"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "options", ["loc", [null, [7, 14], [7, 21]]]]], [], 0, null, ["loc", [null, [7, 6], [11, 15]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], [], 0, null, ["loc", [null, [6, 4], [12, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [5, 12], [5, 16]]]], "content"], [], ["loc", [null, [5, 8], [5, 27]]]]], [], 1, null, ["loc", [null, [5, 2], [13, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/dropdown/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["hideOnClick", true, "hideOnChildFocus", true], 0, null, ["loc", [null, [1, 0], [14, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/assignee/component', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    agent: null,
    admin: null,
    field: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,
    hasEmptyOption: false,
    emptyLabel: null,

    // State
    assigneeValues: [],

    // HTML
    tagName: '',

    // Services
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service('intl'),
    storeCache: _ember['default'].inject.service('store-cache'),

    // Lifecycle hooks
    setDefaultEmptyLabel: _ember['default'].on('init', function () {
      if (this.get('emptyLabel') === null) {
        this.set('emptyLabel', this.get('intl').findTranslationByKey('cases.unassigned'));
      }
    }),

    setAssigneeValues: _ember['default'].on('init', function () {
      var _this = this;

      var assigneeValuePromises = {
        agents: this.get('store').query('user', { role: 'agent', limit: 500 }),
        teams: this.get('storeCache').query('team', { limit: 10000 })
      };

      _ember['default'].RSVP.hash(assigneeValuePromises).then(function (_ref) {
        var teams = _ref.teams;
        var agents = _ref.agents;

        if (_this.get('isDestroyed')) {
          return;
        }

        var assigneeValues = teams.map(function (team) {
          return {
            value: team.get('title'),
            id: team.get('id'),
            children: []
          };
        });

        agents.forEach(function (agent) {
          var teams = agent.get('teams');
          teams.forEach(function (team) {
            var teamObject = assigneeValues.find(function (i) {
              return i.value === team.get('title');
            }).children;
            teamObject.pushObject({
              id: _this.generateTeamAgentId(team.get('id'), agent.get('id')),
              value: agent.get('fullName')
            });
          });
        });
        _this.set('assigneeValues', assigneeValues);
      });
    }),

    // CPs
    currentlySelectedValue: _ember['default'].computed('agent.id', 'team.id', function () {
      return this.generateTeamAgentId(this.get('team.id'), this.get('agent.id'));
    }),

    placeholder: _ember['default'].computed('team.title', 'agent.fullName', function () {
      var pieces = [this.get('team.title')];
      if (this.get('agent.fullName')) {
        pieces.push(this.get('agent.fullName'));
      }
      return pieces.join(' / ');
    }),

    // Methods
    generateTeamAgentId: function generateTeamAgentId(teamId, agentId) {
      return agentId ? teamId + '-' + agentId : teamId;
    },

    actions: {
      assigneeSelected: function assigneeSelected(agentTeamId) {
        if (agentTeamId !== null) {
          var _agentTeamId$split = agentTeamId.split('-');

          var _agentTeamId$split2 = _slicedToArray(_agentTeamId$split, 2);

          var teamId = _agentTeamId$split2[0];
          var agentId = _agentTeamId$split2[1];

          var team = this.get('store').peekRecord('team', teamId);
          var agent = agentId ? this.get('store').peekRecord('user', agentId) : null;
          this.attrs.onValueChange(team, agent);
        } else {
          this.attrs.onValueChange(null, null);
        }
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/drill-down", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 14], [3, 25]]]]], [], []], "options", ["subexpr", "@mut", [["get", "assigneeValues", ["loc", [null, [4, 10], [4, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "currentlySelectedValue", ["loc", [null, [5, 8], [5, 30]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [6, 11], [6, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [8, 12], [8, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "onValueChange", ["subexpr", "action", ["assigneeSelected"], [], ["loc", [null, [10, 16], [10, 43]]]], "emptyLabel", ["subexpr", "@mut", [["get", "emptyLabel", ["loc", [null, [11, 13], [11, 23]]]]], [], []], "hasEmptyOption", ["subexpr", "@mut", [["get", "hasEmptyOption", ["loc", [null, [12, 17], [12, 31]]]]], [], []]], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/forms/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',
    // Attributes
    onFormSelected: null,
    selectedForm: null,
    forms: null,
    isEdited: false,
    isErrored: false,
    isDisabled: false
  });
});
define("frontend-cp/components/ko-case-content/field/forms/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/field/forms/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["cases.form-select"], [], ["loc", [null, [3, 10], [3, 33]]]], "class", "ko-case-content_field_forms", "value", ["subexpr", "@mut", [["get", "selectedForm", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "forms", ["loc", [null, [6, 12], [6, 17]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "attrs.onFormSelected", ["loc", [null, [7, 18], [7, 38]]]]], [], []], "labelPath", "title", "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [9, 13], [9, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [10, 19], [10, 33]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [11, 14], [11, 23]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [12, 15], [12, 25]]]]], [], []], "hasEmptyOption", false, "showBottomArrow", true], ["loc", [null, [2, 2], [15, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/forms/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "forms.length", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/post/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    tabId: null,
    channels: null,
    channel: null,
    replyType: null, // REPLY | NOTE
    addCC: null,
    onPostContentChanged: null,
    onCancelAttachment: null,
    postContent: '',
    peopleCCd: null,
    onChannelChange: null,
    ccPopupProxy: null,

    intl: _ember['default'].inject.service(),

    classNameBindings: ['activeModeClass'],

    twitterSendReply: false,

    onTextEditorFocusStateChange: function onTextEditorFocusStateChange() {},
    onTextEditorFocusActivate: function onTextEditorFocusActivate() {},

    isShowingControls: _ember['default'].computed('replyType', 'channel', 'twitterSendReply', function () {
      // TODO: current behaviour, to hide controls, while they are not implemented.
      return false;

      //if (this.get('replyType') === 'REPLY') {
      //  const isTwitter = this.get('channel.channelType') === 'TWITTER';
      //  const isFacebook = this.get('channel.channelType') === 'FACEBOOK';
      //
      //  return !(isTwitter || isFacebook) || this.get('twitterSendReply');
      //}
      //return true;
    }),

    isTimerAvailable: _ember['default'].computed('replyType', 'channel.isChannelTypeMailbox', function () {
      // @TODO: add logic, when timer gets implemented
      return false;
    }),

    placeholderMessage: _ember['default'].computed('replyType', function () {
      // @TODO extending Quill to support MULTIPLE placeholders will be tricky
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder');
      } else {
        return this.get('intl').findTranslationByKey('cases.contents.placeholder');
      }
    }),

    activeModeClass: _ember['default'].computed('replyType', function () {
      return 'ko-text-editor--' + this.get('replyType').toLowerCase();
    }),

    infoMessage: _ember['default'].computed('replyType', function () {
      if (this.get('replyType') === 'NOTE') {
        return this.get('intl').findTranslationByKey('generic.texteditor.notes_reminder');
      }
    }),

    textAreaIsSmall: _ember['default'].computed('channel.channelType', 'infoMessage', function () {
      return this.get('channel.channelType') === 'TWITTER' || this.get('infoMessage');
    }),

    actions: {
      setNote: function setNote() {
        this.attrs.onSetNote();
      },

      onAttachFiles: function onAttachFiles(files) {
        this.get('attachedUploads').send('uploadFiles', files);
      },

      setReply: function setReply() {
        this.attrs.onChannelChange();
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/post/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 2
                },
                "end": {
                  "line": 36,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-channel-selector", [], ["tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [29, 12], [29, 17]]]]], [], []], "class", ["subexpr", "concat", ["ko-text-editor-header-group__item t-base ", ["subexpr", "if", [["subexpr", "eq", ["REPLY", ["get", "replyType", ["loc", [null, [30, 80], [30, 89]]]]], [], ["loc", [null, [30, 68], [30, 90]]]], "ko-text-editor-header-group__item--active", ""], [], ["loc", [null, [30, 64], [30, 138]]]]], [], ["loc", [null, [30, 12], [30, 139]]]], "onclick", ["subexpr", "action", ["setReply"], [], ["loc", [null, [31, 14], [31, 33]]]], "channels", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [32, 15], [32, 23]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [33, 14], [33, 21]]]]], [], []], "onchange", ["subexpr", "@mut", [["get", "onChannelChange", ["loc", [null, [34, 15], [34, 30]]]]], [], []]], ["loc", [null, [28, 4], [35, 6]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 0
              },
              "end": {
                "line": 41,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [2]);
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createAttrMorph(element1, 'class');
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 1, 1);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["get", "channels.length", ["loc", [null, [27, 8], [27, 23]]]]], [], 0, null, ["loc", [null, [27, 2], [36, 9]]]], ["attribute", "class", ["concat", ["ko-text-editor-header-group__item ", ["subexpr", "if", [["subexpr", "not", [["get", "channels.length", ["loc", [null, [38, 58], [38, 73]]]]], [], ["loc", [null, [38, 53], [38, 74]]]], "ko-text-editor-header-group__item--single"], [], ["loc", [null, [38, 48], [38, 120]]]], " t-base ko-text-editor-header-group__item__set-note ", ["subexpr", "if", [["subexpr", "eq", ["NOTE", ["get", "replyType", ["loc", [null, [38, 188], [38, 197]]]]], [], ["loc", [null, [38, 177], [38, 198]]]], "ko-text-editor-header-group__item--active"], [], ["loc", [null, [38, 172], [38, 244]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["setNote"], [], ["loc", [null, [38, 254], [38, 274]]]]], ["inline", "t", ["cases.notes"], [], ["loc", [null, [39, 4], [39, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 2
                },
                "end": {
                  "line": 50,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-layout_advanced__editor-overlay");
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-layout_advanced__note-reminder");
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n      ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n    ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
              return morphs;
            },
            statements: [["content", "infoMessage", ["loc", [null, [47, 8], [47, 23]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 51,
                    "column": 4
                  },
                  "end": {
                    "line": 65,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-case-content_field_post--editor-overlay");
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-case-content_field_post--twitter-message");
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n          ");
                dom.appendChild(el2, el3);
                var el3 = dom.createElement("span");
                dom.setAttribute(el3, "class", "ko-case-content_field_post__icon i-help");
                var el4 = dom.createTextNode("\n            ");
                dom.appendChild(el3, el4);
                var el4 = dom.createElement("div");
                dom.setAttribute(el4, "class", "ko-case-content_field_post__tooltip");
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createComment("");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n              ");
                dom.appendChild(el4, el5);
                var el5 = dom.createElement("div");
                dom.setAttribute(el5, "class", "arrow arrow--top");
                dom.appendChild(el4, el5);
                var el5 = dom.createTextNode("\n            ");
                dom.appendChild(el4, el5);
                dom.appendChild(el3, el4);
                var el4 = dom.createTextNode("\n          ");
                dom.appendChild(el3, el4);
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n        ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element0, 1, 1);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "ko-checkbox", [], ["class", "u-inline-block", "checked", ["subexpr", "@mut", [["get", "twitterSendReply", ["loc", [null, [55, 20], [55, 36]]]]], [], []], "label", ["subexpr", "t", ["cases.reply-twitter-message"], [], ["loc", [null, [56, 18], [56, 51]]]]], ["loc", [null, [54, 10], [56, 53]]]], ["inline", "t", ["cases.reply-twitter-tooltip"], [], ["loc", [null, [59, 14], [59, 49]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 2
                },
                "end": {
                  "line": 66,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "channel.channelType", ["loc", [null, [51, 14], [51, 33]]]], "TWITTER"], [], ["loc", [null, [51, 10], [51, 44]]]]], [], 0, null, ["loc", [null, [51, 4], [65, 11]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 0
              },
              "end": {
                "line": 67,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "infoMessage", ["loc", [null, [44, 8], [44, 19]]]]], [], 0, 1, ["loc", [null, [44, 2], [66, 9]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 69,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [26, 6], [26, 21]]]]], [], 0, null, ["loc", [null, [26, 0], [41, 7]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [43, 6], [43, 26]]]]], [], 1, null, ["loc", [null, [43, 0], [67, 7]]]]],
        locals: ["editor"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 76,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/post/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [2, 20], [2, 35]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [3, 14], [3, 23]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [4, 25], [4, 45]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [5, 27], [5, 49]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [6, 26], [6, 55]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [7, 25], [7, 41]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "channels", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [10, 13], [10, 21]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [11, 12], [11, 19]]]]], [], []], "onChannelChange", "setChannel", "placeholder", ["subexpr", "@mut", [["get", "placeholderMessage", ["loc", [null, [13, 16], [13, 34]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [14, 14], [14, 23]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [15, 17], [15, 34]]]]], [], []], "textAreaIsSmall", ["subexpr", "@mut", [["get", "textAreaIsSmall", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [17, 21], [17, 32]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [18, 20], [18, 34]]]]], [], []], "onTextChanged", ["subexpr", "@mut", [["get", "attrs.onPostContentChanged", ["loc", [null, [19, 18], [19, 44]]]]], [], []], "value", ["subexpr", "@mut", [["get", "postContent", ["loc", [null, [20, 10], [20, 21]]]]], [], []], "onFocusStateChange", ["subexpr", "@mut", [["get", "onTextEditorFocusStateChange", ["loc", [null, [21, 23], [21, 51]]]]], [], []], "onFocusActivate", ["subexpr", "@mut", [["get", "onTextEditorFocusActivate", ["loc", [null, [22, 20], [22, 45]]]]], [], []], "ccPopupProxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [23, 17], [23, 29]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [69, 19]]]], ["inline", "ko-file-upload", [], ["viewName", "attachedUploads", "onCancel", ["subexpr", "@mut", [["get", "onCancelAttachment", ["loc", [null, [74, 10], [74, 28]]]]], [], []], "uploads", ["subexpr", "@mut", [["get", "attachedFiles", ["loc", [null, [75, 9], [75, 22]]]]], [], []]], ["loc", [null, [72, 0], [75, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/priority/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    value: null,
    field: null,
    priorities: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-case-content/field/priority/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/priority/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [3, 10], [3, 20]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/requester/component', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var service = _ember['default'].inject.service;
  var PromiseArray = _emberData['default'].PromiseArray;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    requester: null,
    isPusherEdited: false,
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    onValueChange: null,

    // State
    results: [],

    // HTML
    tagName: '',

    // Services
    storeService: service('store'),

    actions: {
      search: function search(searchTerm) {
        var results = PromiseArray.create({
          promise: this.get('storeService').query('users', {
            name: searchTerm
          })
        });

        this.set('results', results);
      }
    }
  });
});
define("frontend-cp/components/ko-case-content/field/requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/search", [], ["title", ["subexpr", "t", ["cases.field_title.requester"], [], ["loc", [null, [2, 8], [2, 41]]]], "value", ["subexpr", "@mut", [["get", "requester", ["loc", [null, [3, 8], [3, 17]]]]], [], []], "labelPath", "fullName", "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onSearch", ["subexpr", "action", ["search"], [], ["loc", [null, [9, 11], [9, 28]]]], "results", ["subexpr", "@mut", [["get", "results", ["loc", [null, [10, 10], [10, 17]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [11, 16], [11, 29]]]]], [], []]], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/status/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    'case': null,
    value: null,
    field: null,
    statuses: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    // Services
    store: _ember['default'].inject.service(),

    filteredStatuses: _ember['default'].computed('case.id', 'statuses.[]', function () {
      var caseIsPersisted = !this.get('case.isNew');

      return this.get('statuses').filter(function (status) {

        // statuses can only be NEW if they've never been saved
        if (caseIsPersisted && status.get('statusType') === 'NEW') {
          return false;
        }

        return status.get('statusType') !== 'CLOSED';
      });
    })
  });
});
define("frontend-cp/components/ko-case-content/field/status/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/status/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "filteredStatuses", ["loc", [null, [3, 10], [3, 26]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label", "hasEmptyOption", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-case-content/field/type/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    value: null,
    field: null,
    types: [],
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-case-content/field/type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/field/type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [2, 8], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "types", ["loc", [null, [3, 10], [3, 15]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "labelPath", "label"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-case-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 7,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-loader", [], ["class", "ko-layout_advanced__button-loading"], ["loc", [null, [6, 10], [6, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [8, 10], [8, 30]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element8, 'class');
              morphs[1] = dom.createAttrMorph(element8, 'onclick');
              morphs[2] = dom.createMorphAt(element8, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [4, 69], [4, 83]]]], "disabled"], [], ["loc", [null, [4, 64], [4, 96]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit", ["get", "tabId", ["loc", [null, [4, 124], [4, 129]]]], ["get", "case", ["loc", [null, [4, 130], [4, 134]]]], ["get", "channel", ["loc", [null, [4, 135], [4, 142]]]]], [], ["loc", [null, [4, 106], [4, 144]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [5, 14], [5, 22]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-info-bar/item", [], [], 0, null, ["loc", [null, [3, 4], [11, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-case-content/field/assignee", [], ["team", ["subexpr", "@mut", [["get", "editedCase.assigneeTeam", ["loc", [null, [26, 13], [26, 36]]]]], [], []], "agent", ["subexpr", "@mut", [["get", "editedCase.assigneeAgent", ["loc", [null, [27, 14], [27, 38]]]]], [], []], "field", ["subexpr", "@mut", [["get", "assigneeField", ["loc", [null, [28, 14], [28, 27]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setAssignee", ["get", "tabId", ["loc", [null, [29, 55], [29, 60]]]]], [], ["loc", [null, [29, 22], [29, 61]]]], "isEdited", ["subexpr", "@mut", [["get", "isAssigneeEdited", ["loc", [null, [30, 17], [30, 33]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.assignee", ["loc", [null, [31, 23], [31, 57]]]]], [], []], "isErrored", ["subexpr", "or", [["get", "errorMap.assignee_agent_id", ["loc", [null, [32, 22], [32, 48]]]], ["get", "errorMap.assignee_team_id", ["loc", [null, [32, 49], [32, 74]]]]], [], ["loc", [null, [32, 18], [32, 75]]]], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [33, 19], [33, 33]]]]], [], []]], ["loc", [null, [25, 6], [34, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-case-content/field/status", [], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [39, 13], [39, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "editedCase.status", ["loc", [null, [40, 14], [40, 31]]]]], [], []], "field", ["subexpr", "@mut", [["get", "statusField", ["loc", [null, [41, 14], [41, 25]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [42, 17], [42, 25]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setStatus", ["get", "tabId", ["loc", [null, [43, 53], [43, 58]]]]], [], ["loc", [null, [43, 22], [43, 59]]]], "isEdited", ["subexpr", "@mut", [["get", "isStatusEdited", ["loc", [null, [44, 17], [44, 31]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.status", ["loc", [null, [45, 23], [45, 55]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.status_id", ["loc", [null, [46, 18], [46, 36]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [47, 19], [47, 33]]]]], [], []]], ["loc", [null, [38, 6], [48, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 4
                },
                "end": {
                  "line": 62,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-case-content/field/type", [], ["value", ["subexpr", "@mut", [["get", "editedCase.caseType", ["loc", [null, [53, 14], [53, 33]]]]], [], []], "field", ["subexpr", "@mut", [["get", "typeField", ["loc", [null, [54, 14], [54, 23]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [55, 14], [55, 19]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setType", ["get", "tabId", ["loc", [null, [56, 51], [56, 56]]]]], [], ["loc", [null, [56, 22], [56, 57]]]], "isEdited", ["subexpr", "@mut", [["get", "isTypeEdited", ["loc", [null, [57, 17], [57, 29]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.caseType", ["loc", [null, [58, 23], [58, 57]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.type_id", ["loc", [null, [59, 18], [59, 34]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [60, 19], [60, 33]]]]], [], []]], ["loc", [null, [52, 6], [61, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 64,
                  "column": 4
                },
                "end": {
                  "line": 75,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-case-content/field/priority", [], ["value", ["subexpr", "@mut", [["get", "editedCase.priority", ["loc", [null, [66, 14], [66, 33]]]]], [], []], "field", ["subexpr", "@mut", [["get", "priorityField", ["loc", [null, [67, 14], [67, 27]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [68, 19], [68, 29]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setPriority", ["get", "tabId", ["loc", [null, [69, 55], [69, 60]]]]], [], ["loc", [null, [69, 22], [69, 61]]]], "isEdited", ["subexpr", "@mut", [["get", "isPriorityEdited", ["loc", [null, [70, 17], [70, 33]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.priority", ["loc", [null, [71, 23], [71, 57]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.priority_id", ["loc", [null, [72, 18], [72, 38]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [73, 19], [73, 33]]]]], [], []]], ["loc", [null, [65, 6], [74, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 104,
                      "column": 8
                    },
                    "end": {
                      "line": 118,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [105, 33], [105, 62]]]], ["get", "field.fieldType", ["loc", [null, [105, 63], [105, 78]]]]], [], ["loc", [null, [105, 22], [105, 79]]]]], ["value", ["subexpr", "get", [["get", "localCustomFieldsMap", ["loc", [null, [106, 23], [106, 43]]]], ["get", "field.id", ["loc", [null, [106, 44], [106, 52]]]]], [], ["loc", [null, [106, 18], [106, 53]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [107, 20], [107, 33]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [108, 18], [108, 29]]]]], [], []], "isEdited", ["subexpr", "get", [["get", "editedCustomFieldsMap", ["loc", [null, [109, 26], [109, 47]]]], ["get", "field.id", ["loc", [null, [109, 48], [109, 56]]]]], [], ["loc", [null, [109, 21], [109, 57]]]], "isPusherEdited", ["subexpr", "get", [["get", "propertiesChangeViaPusher.customFields", ["loc", [null, [110, 32], [110, 70]]]], ["get", "field.id", ["loc", [null, [110, 71], [110, 79]]]]], [], ["loc", [null, [110, 27], [110, 80]]]], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [111, 23], [111, 37]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [112, 27], [112, 35]]]], ["get", "field.key", ["loc", [null, [112, 36], [112, 45]]]]], [], ["loc", [null, [112, 22], [112, 46]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [113, 32], [113, 57]]]]], [], ["loc", [null, [113, 27], [113, 58]]]], "onValueChange", ["subexpr", "action", ["dispatch", "setCustomField", ["get", "tabId", ["loc", [null, [114, 62], [114, 67]]]], ["get", "field", ["loc", [null, [114, 68], [114, 73]]]]], [], ["loc", [null, [114, 26], [114, 74]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [105, 10], [117, 12]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 103,
                    "column": 6
                  },
                  "end": {
                    "line": 119,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [104, 14], [104, 29]]]]], [], 0, null, ["loc", [null, [104, 8], [118, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 4
                },
                "end": {
                  "line": 120,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [103, 23], [103, 52]]]], ["get", "field.fieldType", ["loc", [null, [103, 53], [103, 68]]]]], [], ["loc", [null, [103, 12], [103, 69]]]]], [], 0, null, ["loc", [null, [103, 6], [119, 13]]]]],
            locals: ["field"],
            templates: [child0]
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 122,
                  "column": 4
                },
                "end": {
                  "line": 124,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-case/sla-sidebar", [], ["sla", ["subexpr", "@mut", [["get", "case.sla", ["loc", [null, [123, 32], [123, 40]]]]], [], []], "slaMetrics", ["subexpr", "@mut", [["get", "case.slaMetrics", ["loc", [null, [123, 52], [123, 67]]]]], [], []]], ["loc", [null, [123, 6], [123, 69]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 127,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(10);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
            morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
            morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
            morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-case-content/field/requester", [], ["isDisabled", ["subexpr", "@mut", [["get", "isRequesterDisabled", ["loc", [null, [16, 17], [16, 36]]]]], [], []], "requester", ["subexpr", "@mut", [["get", "editedCase.requester", ["loc", [null, [17, 16], [17, 36]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setRequester", ["get", "tabId", ["loc", [null, [18, 54], [18, 59]]]]], [], ["loc", [null, [18, 20], [18, 60]]]], "isEdited", ["subexpr", "@mut", [["get", "isRequesterEdited", ["loc", [null, [19, 15], [19, 32]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.requester", ["loc", [null, [20, 16], [20, 34]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.requester", ["loc", [null, [21, 21], [21, 56]]]]], [], []]], ["loc", [null, [15, 4], [22, 6]]]], ["block", "if", [["get", "assigneeField", ["loc", [null, [24, 10], [24, 23]]]]], [], 0, null, ["loc", [null, [24, 4], [35, 11]]]], ["block", "if", [["get", "statusField", ["loc", [null, [37, 10], [37, 21]]]]], [], 1, null, ["loc", [null, [37, 4], [49, 11]]]], ["block", "if", [["get", "typeField", ["loc", [null, [51, 10], [51, 19]]]]], [], 2, null, ["loc", [null, [51, 4], [62, 11]]]], ["block", "if", [["get", "priorityField", ["loc", [null, [64, 10], [64, 23]]]]], [], 3, null, ["loc", [null, [64, 4], [75, 11]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["cases.tags"], [], ["loc", [null, [78, 12], [78, 28]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [79, 15], [79, 32]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [80, 17], [80, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.tags", ["loc", [null, [81, 16], [81, 29]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.tags", ["loc", [null, [82, 21], [82, 51]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "editedTags", ["loc", [null, [83, 19], [83, 29]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [84, 20], [84, 33]]]]], [], []], "onTagAddition", ["subexpr", "action", ["dispatch", "addTag", ["get", "tabId", ["loc", [null, [85, 48], [85, 53]]]], ["get", "case", ["loc", [null, [85, 54], [85, 58]]]]], [], ["loc", [null, [85, 20], [85, 59]]]], "onTagRemoval", ["subexpr", "action", ["dispatch", "removeTag", ["get", "tabId", ["loc", [null, [86, 50], [86, 55]]]]], [], ["loc", [null, [86, 19], [86, 56]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [87, 22], [87, 44]]]], "newTagText", ["subexpr", "t", ["cases.newtag"], [], ["loc", [null, [88, 17], [88, 35]]]], "addTagText", ["subexpr", "t", ["cases.addtag"], [], ["loc", [null, [89, 17], [89, 35]]]]], ["loc", [null, [77, 4], [90, 6]]]], ["inline", "ko-case-content/field/forms", [], ["selectedForm", ["subexpr", "@mut", [["get", "editedCase.form", ["loc", [null, [93, 19], [93, 34]]]]], [], []], "forms", ["subexpr", "@mut", [["get", "enabledCaseForms", ["loc", [null, [94, 12], [94, 28]]]]], [], []], "onFormSelected", ["subexpr", "action", ["dispatch", "setForm", ["get", "tabId", ["loc", [null, [95, 50], [95, 55]]]]], [], ["loc", [null, [95, 21], [95, 56]]]], "isEdited", ["subexpr", "@mut", [["get", "isFormEdited", ["loc", [null, [96, 15], [96, 27]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.form", ["loc", [null, [97, 21], [97, 51]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.form_id", ["loc", [null, [98, 16], [98, 32]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [99, 17], [99, 31]]]]], [], []]], ["loc", [null, [92, 4], [100, 6]]]], ["block", "each", [["get", "caseOrFormFields", ["loc", [null, [102, 12], [102, 28]]]]], [], 4, null, ["loc", [null, [102, 4], [120, 13]]]], ["block", "if", [["get", "case.id", ["loc", [null, [122, 10], [122, 17]]]]], [], 5, null, ["loc", [null, [122, 4], [124, 11]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "caseDates", ["loc", [null, [126, 32], [126, 41]]]]], [], []]], ["loc", [null, [126, 4], [126, 43]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 148,
                  "column": 12
                },
                "end": {
                  "line": 158,
                  "column": 12
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "ko-layout_advanced_section__subtitle");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "t", ["cases.subheader"], ["time", ["subexpr", "@mut", [["get", "case.createdAt", ["loc", [null, [151, 23], [151, 37]]]]], [], []], "channel", ["subexpr", "t", [["subexpr", "concat", ["cases.channelType.", ["subexpr", "or", [["get", "case.sourceChannel.channelType", ["loc", [null, [152, 62], [152, 92]]]], "none"], [], ["loc", [null, [152, 58], [152, 100]]]]], [], ["loc", [null, [152, 29], [152, 101]]]]], [], ["loc", [null, [152, 26], [152, 102]]]], "hasChannel", ["subexpr", "@mut", [["get", "hasChannel", ["loc", [null, [153, 29], [153, 39]]]]], [], []], "hasBrand", ["subexpr", "@mut", [["get", "hasBrand", ["loc", [null, [154, 27], [154, 35]]]]], [], []], "brand", ["subexpr", "@mut", [["get", "case.brand.companyName", ["loc", [null, [155, 24], [155, 46]]]]], [], []]], ["loc", [null, [150, 16], [156, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 164,
                  "column": 10
                },
                "end": {
                  "line": 177,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "u-v-align-top");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["cases.trashed"], [], ["loc", [null, [167, 27], [167, 46]]]], "activeHoverText", ["subexpr", "t", ["cases.untrash"], [], ["loc", [null, [168, 32], [168, 51]]]], "inactiveText", ["subexpr", "t", ["cases.trashed"], [], ["loc", [null, [169, 29], [169, 48]]]], "inactiveHoverText", ["subexpr", "t", ["cases.untrash"], [], ["loc", [null, [170, 34], [170, 53]]]], "isActive", false, "isEnabled", ["subexpr", "@mut", [["get", "canRestoreCase", ["loc", [null, [172, 26], [172, 40]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isSaving", ["loc", [null, [173, 26], [173, 34]]]]], [], []], "onClick", ["subexpr", "action", ["restoreCase", ["get", "case.id", ["loc", [null, [174, 46], [174, 53]]]]], [], ["loc", [null, [174, 24], [174, 54]]]]], ["loc", [null, [166, 14], [175, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 179,
                  "column": 10
                },
                "end": {
                  "line": 186,
                  "column": 10
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "u-v-align-top");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-case/macro-selector", [], ["macros", ["subexpr", "@mut", [["get", "macros", ["loc", [null, [181, 46], [181, 52]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [182, 27], [182, 41]]]]], [], []], "onMacroSelect", ["subexpr", "action", ["dispatch", "applyMacro", ["get", "tabId", ["loc", [null, [183, 62], [183, 67]]]], ["get", "case", ["loc", [null, [183, 68], [183, 72]]]], ["get", "sessionService.user", ["loc", [null, [183, 73], [183, 92]]]], ["get", "availableChannels", ["loc", [null, [183, 93], [183, 110]]]]], [], ["loc", [null, [183, 30], [183, 111]]]]], ["loc", [null, [181, 14], [184, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 129,
                "column": 2
              },
              "end": {
                "line": 198,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-layout_advanced_heading");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__left");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-layout_advanced_section");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__image");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("img");
            dom.setAttribute(el5, "alt", "");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__img");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__body");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("h3");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__subject");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__right");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "list-inline t-right");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var element4 = dom.childAt(element3, [1, 1]);
            var element5 = dom.childAt(element4, [1, 1]);
            var element6 = dom.childAt(element4, [3]);
            var element7 = dom.childAt(element3, [3, 1]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element5, 'src');
            morphs[1] = dom.createMorphAt(dom.childAt(element6, [1]), 1, 1);
            morphs[2] = dom.createMorphAt(element6, 3, 3);
            morphs[3] = dom.createMorphAt(element7, 1, 1);
            morphs[4] = dom.createMorphAt(element7, 3, 3);
            morphs[5] = dom.createMorphAt(dom.childAt(element7, [5]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "editedCase.requester.avatar", ["loc", [null, [134, 24], [134, 51]]]]]]], ["inline", "ko-editable-text", [], ["value", ["subexpr", "@mut", [["get", "editedCase.subject", ["loc", [null, [139, 22], [139, 40]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isSubjectEdited", ["loc", [null, [140, 25], [140, 40]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "propertiesChangeViaPusher.subject", ["loc", [null, [141, 31], [141, 64]]]]], [], []], "onValueChange", ["subexpr", "action", ["dispatch", "setSubject", ["get", "tabId", ["loc", [null, [142, 62], [142, 67]]]]], [], ["loc", [null, [142, 30], [142, 68]]]], "isErrored", ["subexpr", "@mut", [["get", "errorMap.subject", ["loc", [null, [143, 26], [143, 42]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [144, 27], [144, 41]]]]], [], []], "placeholder", ["subexpr", "t", ["cases.new_case_subject_placeholder"], [], ["loc", [null, [145, 28], [145, 68]]]]], ["loc", [null, [138, 14], [146, 16]]]], ["block", "if", [["get", "case.id", ["loc", [null, [148, 18], [148, 25]]]]], [], 0, null, ["loc", [null, [148, 12], [158, 19]]]], ["block", "if", [["subexpr", "eq", [["get", "case.state", ["loc", [null, [164, 20], [164, 30]]]], "TRASH"], [], ["loc", [null, [164, 16], [164, 39]]]]], [], 1, null, ["loc", [null, [164, 10], [177, 17]]]], ["block", "if", [["get", "features.applyMacro", ["loc", [null, [179, 16], [179, 35]]]]], [], 2, null, ["loc", [null, [179, 10], [186, 17]]]], ["inline", "ko-case-action-menu", [], ["caseState", ["subexpr", "@mut", [["get", "case.state", ["loc", [null, [190, 22], [190, 32]]]]], [], []], "isCaseNew", ["subexpr", "@mut", [["get", "case.isNew", ["loc", [null, [191, 22], [191, 32]]]]], [], []], "onTrashCase", ["subexpr", "action", ["trashCase", ["get", "case.id", ["loc", [null, [192, 44], [192, 51]]]]], [], ["loc", [null, [192, 24], [192, 52]]]]], ["loc", [null, [189, 12], [193, 14]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 203,
                    "column": 8
                  },
                  "end": {
                    "line": 228,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-case-content/field/post", [], ["tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [205, 18], [205, 23]]]]], [], []], "channels", ["subexpr", "@mut", [["get", "availableReplyChannels", ["loc", [null, [206, 21], [206, 43]]]]], [], []], "channel", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [207, 20], [207, 27]]]]], [], []], "onChannelChange", ["subexpr", "action", ["dispatch", "setChannel", ["get", "tabId", ["loc", [null, [208, 60], [208, 65]]]]], [], ["loc", [null, [208, 28], [208, 66]]]], "onSetNote", ["subexpr", "action", ["dispatch", "setNote", ["get", "tabId", ["loc", [null, [209, 51], [209, 56]]]], ["get", "availableChannels", ["loc", [null, [209, 57], [209, 74]]]]], [], ["loc", [null, [209, 22], [209, 75]]]], "replyType", ["subexpr", "@mut", [["get", "replyType", ["loc", [null, [210, 22], [210, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.contents", ["loc", [null, [211, 22], [211, 39]]]]], [], []], "suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [212, 28], [212, 43]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "replyOptions.cc", ["loc", [null, [213, 22], [213, 37]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [214, 33], [214, 53]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [215, 35], [215, 57]]]]], [], []], "isPeopleAutoCompleteAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [216, 42], [216, 71]]]]], [], []], "onPeopleSuggestion", ["subexpr", "action", ["onPeopleSuggestion"], [], ["loc", [null, [217, 31], [217, 60]]]], "addCC", ["subexpr", "action", ["dispatch", "addCC", ["get", "tabId", ["loc", [null, [218, 45], [218, 50]]]]], [], ["loc", [null, [218, 18], [218, 51]]]], "removeCC", ["subexpr", "action", ["dispatch", "removeCC", ["get", "tabId", ["loc", [null, [219, 51], [219, 56]]]]], [], ["loc", [null, [219, 21], [219, 57]]]], "postContent", ["subexpr", "@mut", [["get", "postContent", ["loc", [null, [220, 24], [220, 35]]]]], [], []], "onPostContentChanged", ["subexpr", "action", ["dispatch", "setPostContent", ["get", "tabId", ["loc", [null, [221, 69], [221, 74]]]]], [], ["loc", [null, [221, 33], [221, 75]]]], "attachedFiles", ["subexpr", "@mut", [["get", "attachedPostFiles", ["loc", [null, [222, 26], [222, 43]]]]], [], []], "ccPopupProxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [223, 25], [223, 37]]]]], [], []], "onTextEditorFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange", ["get", "tabId", ["loc", [null, [224, 78], [224, 83]]]]], [], ["loc", [null, [224, 41], [224, 84]]]], "onTextEditorFocusActivate", ["subexpr", "action", ["textAreaFocusActivate", ["get", "tabId", ["loc", [null, [225, 70], [225, 75]]]]], [], ["loc", [null, [225, 38], [225, 76]]]], "onCancelAttachment", ["subexpr", "action", ["dispatch", "cancelAttachment", ["get", "tabId", ["loc", [null, [226, 69], [226, 74]]]]], [], ["loc", [null, [226, 31], [226, 75]]]]], ["loc", [null, [204, 10], [227, 12]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 228,
                    "column": 8
                  },
                  "end": {
                    "line": 232,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-layout_advanced_editor__placeholder");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-layout_advanced_editor__action");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-layout_advanced_editor__action");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("...\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3]);
                var element2 = dom.childAt(element0, [7]);
                var morphs = new Array(7);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                morphs[2] = dom.createElementMorph(element1);
                morphs[3] = dom.createMorphAt(element1, 0, 0);
                morphs[4] = dom.createMorphAt(element0, 5, 5);
                morphs[5] = dom.createElementMorph(element2);
                morphs[6] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["beginReply", "reply", ["get", "tabId", ["loc", [null, [229, 45], [229, 50]]]], ["get", "availableChannels", ["loc", [null, [229, 51], [229, 68]]]]], [], ["loc", [null, [229, 15], [229, 70]]]], ["inline", "t", ["cases.reply.click_to_start"], [], ["loc", [null, [230, 12], [230, 46]]]], ["element", "action", ["beginReply", "reply", ["get", "tabId", ["loc", [null, [230, 125], [230, 130]]]], ["get", "availableChannels", ["loc", [null, [230, 131], [230, 148]]]]], [], ["loc", [null, [230, 95], [230, 150]]]], ["inline", "t", ["cases.reply.reply"], [], ["loc", [null, [230, 151], [230, 176]]]], ["inline", "t", ["cases.reply.or_leave_a"], [], ["loc", [null, [230, 184], [230, 214]]]], ["element", "action", ["beginReply", "note", ["get", "tabId", ["loc", [null, [230, 250], [230, 255]]]], ["get", "availableChannels", ["loc", [null, [230, 256], [230, 273]]]]], [], ["loc", [null, [230, 221], [230, 275]]]], ["inline", "t", ["cases.reply.note"], [], ["loc", [null, [230, 318], [230, 342]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 201,
                  "column": 4
                },
                "end": {
                  "line": 234,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-layout_advanced_editor");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "or", [["get", "isEditInProgress", ["loc", [null, [203, 18], [203, 34]]]], ["get", "case.isNew", ["loc", [null, [203, 35], [203, 45]]]]], [], ["loc", [null, [203, 14], [203, 46]]]]], [], 0, 1, ["loc", [null, [203, 8], [232, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 200,
                "column": 2
              },
              "end": {
                "line": 235,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [201, 14], [201, 18]]]], "reply-area"], [], ["loc", [null, [201, 10], [201, 32]]]]], [], 0, null, ["loc", [null, [201, 4], [234, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 237,
                "column": 2
              },
              "end": {
                "line": 255,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-timeline", [], ["model", ["subexpr", "@mut", [["get", "case", ["loc", [null, [239, 12], [239, 16]]]]], [], []], "availableReplyChannels", ["subexpr", "@mut", [["get", "availableReplyChannels", ["loc", [null, [240, 29], [240, 51]]]]], [], []], "loadingTop", ["subexpr", "@mut", [["get", "tabState.loadingTop", ["loc", [null, [241, 17], [241, 36]]]]], [], []], "loadingBottom", ["subexpr", "@mut", [["get", "tabState.loadingBottom", ["loc", [null, [242, 20], [242, 42]]]]], [], []], "bottomPostsAvailable", ["subexpr", "@mut", [["get", "tabState.bottomPostsAvailable", ["loc", [null, [243, 27], [243, 56]]]]], [], []], "topPostsAvailable", ["subexpr", "@mut", [["get", "tabState.topPostsAvailable", ["loc", [null, [244, 24], [244, 50]]]]], [], []], "posts", ["subexpr", "@mut", [["get", "tabState.posts", ["loc", [null, [245, 12], [245, 26]]]]], [], []], "sortOrder", ["subexpr", "@mut", [["get", "sortOrder", ["loc", [null, [246, 16], [246, 25]]]]], [], []], "filter", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [247, 13], [247, 19]]]]], [], []], "isReplyDisabled", ["subexpr", "@mut", [["get", "isCaseDisabled", ["loc", [null, [248, 22], [248, 36]]]]], [], []], "onQueryParamsUpdate", ["subexpr", "@mut", [["get", "onQueryParamsUpdate", ["loc", [null, [249, 26], [249, 45]]]]], [], []], "onReplyToPost", ["subexpr", "action", ["replyToPost", ["get", "tabId", ["loc", [null, [250, 42], [250, 47]]]]], [], ["loc", [null, [250, 20], [250, 48]]]], "onReplyWithQuote", ["subexpr", "action", ["replyWithQuote", ["get", "tabId", ["loc", [null, [251, 48], [251, 53]]]]], [], ["loc", [null, [251, 23], [251, 54]]]], "onLoadPostsBelow", ["subexpr", "action", ["dispatch", "loadPostsBelow", ["get", "tabId", ["loc", [null, [252, 59], [252, 64]]]]], [], ["loc", [null, [252, 23], [252, 65]]]], "onLoadPostsAbove", ["subexpr", "action", ["dispatch", "loadPostsAbove", ["get", "tabId", ["loc", [null, [253, 59], [253, 64]]]]], [], ["loc", [null, [253, 23], [253, 65]]]]], ["loc", [null, [238, 4], [254, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 256,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "sidebar-sticky"], [], ["loc", [null, [2, 8], [2, 34]]]]], [], 0, null, ["loc", [null, [2, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [14, 12], [14, 16]]]], "sidebar"], [], ["loc", [null, [14, 8], [14, 27]]]]], [], 1, null, ["loc", [null, [14, 2], [127, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [129, 12], [129, 16]]]], "heading"], [], ["loc", [null, [129, 8], [129, 27]]]]], [], 2, null, ["loc", [null, [129, 2], [198, 9]]]], ["block", "if", [["subexpr", "not", [["get", "isCaseDisabled", ["loc", [null, [200, 13], [200, 27]]]]], [], ["loc", [null, [200, 8], [200, 28]]]]], [], 3, null, ["loc", [null, [200, 2], [235, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [237, 12], [237, 16]]]], "timeline-area"], [], ["loc", [null, [237, 8], [237, 33]]]]], [], 4, null, ["loc", [null, [237, 2], [255, 9]]]]],
        locals: ["name"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 257,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-case-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-layout/advanced", [], ["isNew", ["subexpr", "@mut", [["get", "case.isNew", ["loc", [null, [1, 28], [1, 38]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [256, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/assigneeagentid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/assigneeagentid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/assigneeagentid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeAgent.fullName", ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/assigneebrandid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define('frontend-cp/components/ko-cases-list/column/assigneeteamid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/assigneeteamid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/assigneeteamid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeTeam.title", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/avatar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/avatar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-avatar", [], ["class", "u-mr-", "avatar", ["subexpr", "@mut", [["get", "case.creator.avatar", ["loc", [null, [1, 33], [1, 52]]]]], [], []]], ["loc", [null, [1, 0], [1, 54]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/brandid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/brandid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/brandid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.brand.name", ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/case-form/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/case-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.form.title", ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/caseid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/caseid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 11
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/caseid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.id", ["loc", [null, [1, 0], [1, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/casepriorityid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/casepriorityid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casepriorityid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.priority.label", ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/casestatusid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/casestatusid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casestatusid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.status.label", ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/casetypeid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/casetypeid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/casetypeid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.caseType.label", ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/channeltype/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/channeltype/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/channeltype/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.sourceChannel.channelType", ["loc", [null, [1, 0], [1, 34]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/createdat/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/createdat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/createdat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["concat", [["get", "case.createdAt", ["loc", [null, [1, 15], [1, 29]]]]]]], ["inline", "moment-from-now", [["get", "case.createdAt", ["loc", [null, [2, 20], [2, 34]]]]], [], ["loc", [null, [2, 2], [2, 36]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/first-reply-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'FIRST_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/first-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/last-update-by-a-user/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/last-update-by-assignee/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/last-update-by-requester/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/last-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/column/lastcompletedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/lastcompletedat/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["concat", [["get", "case.lastCompletedAt", ["loc", [null, [2, 17], [2, 37]]]]]]], ["inline", "moment-from-now", [["get", "case.lastCompletedAt", ["loc", [null, [3, 22], [3, 42]]]]], [], ["loc", [null, [3, 4], [3, 44]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/lastcompletedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "case.lastCompletedAt", ["loc", [null, [1, 6], [1, 26]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/next-breach/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/next-breach/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/next-reply-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis'],
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'NEXT_REPLY_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/next-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("???");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/organization/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/organization/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 36
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.organization.name", ["loc", [null, [1, 0], [1, 36]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/requester-language/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/requester-language/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.locale", ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/requesterid/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/requesterid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/requesterid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.requester.fullName", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/resolution-time/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis'],
    'case': null,

    metric: _ember['default'].computed('case.slaMetrics', function () {
      var metrics = this.get('case.slaMetrics') || [];

      var filtered = metrics.filter(function (metric) {
        return metric.get('title') === 'RESOLUTION_TIME';
      }) || [];

      return filtered.length ? filtered[0] : null;
    })
  });
});
define("frontend-cp/components/ko-cases-list/column/resolution-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 24
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sla", [], ["metric", ["subexpr", "@mut", [["get", "metric", ["loc", [null, [1, 16], [1, 22]]]]], [], []]], ["loc", [null, [1, 0], [1, 24]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/sla-name/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/sla-name/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.sla.title", ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/subject/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/subject/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "case.subject", ["loc", [null, [1, 0], [1, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/team/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "case.assigneeTeam.title", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-cases-list/column/updatedat/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-table_cell--ellipsis']
  });
});
define("frontend-cp/components/ko-cases-list/column/updatedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/column/updatedat/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'title');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "title", ["concat", [["get", "case.updatedAt", ["loc", [null, [2, 17], [2, 31]]]]]]], ["inline", "moment-from-now", [["get", "case.updatedAt", ["loc", [null, [3, 22], [3, 36]]]]], [], ["loc", [null, [3, 4], [3, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/column/updatedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "case.updatedAt", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-cases-list/component', ['exports', 'ember'], function (exports, _ember) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  exports['default'] = _ember['default'].Component.extend({
    // Attrs
    cases: [],
    onCaseListSort: null,
    columns: [],
    trashable: false,
    selectedCaseIds: null,

    bulkService: _ember['default'].inject.service('case-bulk-update'),
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service(),
    isUpdatingCases: false,

    //State
    isSomeChecked: false,

    // HTML
    classNames: ['ko-cases-list'],

    //Lifecycle Hooks
    setIsSomeChecked: _ember['default'].on('didReceiveAttrs', function (_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (newAttrs) {
        this.set('isSomeChecked', newAttrs.selectedCaseIds.value.length > 0);
      }
    }),

    //CP's
    columnList: _ember['default'].computed('columns.[]', function () {
      return [_ember['default'].Object.create({ id: 'avatar', name: 'avatar' })].concat(_toConsumableArray(this.get('columns').toArray()));
    }),

    classForHeader: function classForHeader(column) {
      return 'ko-cases-list__table-th ko-cases-list__header--' + _ember['default'].String.dasherize(column.get('name'));
    },

    classForColumn: function classForColumn(column) {
      var classes = ['ko-table_cell--ellipsis'];

      classes.push('ko-cases-list__table-column--' + _ember['default'].String.dasherize(column.get('name')));

      return classes.join(' ');
    },

    componentForHeader: function componentForHeader(column) {
      return 'ko-cases-list/header/' + _ember['default'].String.dasherize(column.get('name'));
    },

    componentForColumn: function componentForColumn(column) {
      return 'ko-cases-list/column/' + _ember['default'].String.dasherize(column.get('name'));
    },

    classForRow: function classForRow(rowCase, trashable) {
      var classes = ['ko-cases-list__row'];
      if (trashable && rowCase.get('state') === 'TRASH') {
        classes.push('ko-cases-list__row--trashed');
      }
      return classes.join(' ');
    },

    isFixed: function isFixed(column) {
      return column.get('name') === 'subject';
    },

    actions: {
      tableSorted: function tableSorted(column, order) {
        this.sendAction('onCaseListSort', column, order);
      },

      toggleCheck: function toggleCheck(rowCase, checked) {
        var selectedCaseIds = [].concat(_toConsumableArray(this.get('selectedCaseIds')));
        if (checked) {
          selectedCaseIds.push(rowCase.id);
        } else {
          selectedCaseIds.removeObject(rowCase.id);
        }

        this.set('isSomeChecked', selectedCaseIds.length > 0);
        this.attrs.onSetSelectedCaseIds(selectedCaseIds);
      },

      selectionChanged: function selectionChanged(rows, checked) {
        var selectedCaseIds = [];

        if (checked) {
          selectedCaseIds = this.get('cases').filter(function (item) {
            return item.get('state') !== 'TRASH';
          }).getEach('id');
        }

        this.set('isSomeChecked', selectedCaseIds.length > 0);
        this.attrs.onSetSelectedCaseIds(selectedCaseIds);
      },

      trashCases: function trashCases() {
        var _this = this;

        var trashConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.trashcases');

        if (confirm(trashConfirmationMessage)) {
          this.set('isUpdatingCases', true);
          this.get('bulkService').trashCases(this.get('selectedCaseIds')).then(function () {
            _this.set('isUpdatingCases', false);
            _this.attrs.onTrashCases();
            _this.get('notification').success(_this.get('intl').findTranslationByKey('generic.casestrashed'));
          }, function (error) {
            _this.set('isUpdatingCases', false);
          });
        }
      }
    }
  });
});
define("frontend-cp/components/ko-cases-list/header/assigneeagentid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/assigneeagentid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.assignee.agent"], [], ["loc", [null, [1, 0], [1, 28]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/assigneeteamid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 27
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/assigneeteamid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.assignee.team"], [], ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/avatar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/avatar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/brandid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 19
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/brandid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.brand"], [], ["loc", [null, [1, 0], [1, 19]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/case-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/case-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.form-select"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/caseid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/caseid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.ticketid"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casepriorityid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casepriorityid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.priority"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casestatusid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 20
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casestatusid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.status"], [], ["loc", [null, [1, 0], [1, 20]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/casetypeid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/casetypeid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.type"], [], ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/channeltype/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/channeltype/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.channeltype"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/createdat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/createdat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.created"], [], ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/first-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 30
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/first-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.first-reply-time"], [], ["loc", [null, [1, 0], [1, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 35
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-a-user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-a-user"], [], ["loc", [null, [1, 0], [1, 35]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 37
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-assignee/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-assignee"], [], ["loc", [null, [1, 0], [1, 37]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/last-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 38
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/last-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update-by-requester"], [], ["loc", [null, [1, 0], [1, 38]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/lastcompletedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 31
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/lastcompletedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last_completed_at"], [], ["loc", [null, [1, 0], [1, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/next-breach/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-breach/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.next-breach"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/next-reply-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 29
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/next-reply-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.next-reply-time"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 40
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/oldest-update-by-requester/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.oldest-update-by-requester"], [], ["loc", [null, [1, 0], [1, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/organization/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/organization/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "t", ["cases.organization"], [], ["loc", [null, [1, 0], [1, 26]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/requester-language/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 32
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requester-language/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.requester-language"], [], ["loc", [null, [1, 0], [1, 32]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/requesterid/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/requesterid/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.requester"], [], ["loc", [null, [1, 0], [1, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/resolution-time/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 29
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/resolution-time/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.resolution-time"], [], ["loc", [null, [1, 0], [1, 29]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/sla-name/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 22
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/sla-name/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.sla-name"], [], ["loc", [null, [1, 0], [1, 22]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/subject/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 21
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/subject/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.subject"], [], ["loc", [null, [1, 0], [1, 21]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/team/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 18
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/team/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.team"], [], ["loc", [null, [1, 0], [1, 18]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/header/updatedat/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 25
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/header/updatedat/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["cases.last-update"], [], ["loc", [null, [1, 0], [1, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-cases-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 10
                },
                "end": {
                  "line": 13,
                  "column": 37
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "ko-loader", ["loc", [null, [13, 24], [13, 37]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 14,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [13, 10], [13, 51]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 16,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", ["cases.trashcases"], [], ["loc", [null, [15, 10], [15, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 18,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "button button--default ko-cases-list__action-button");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          morphs[1] = dom.createAttrMorph(element0, 'disabled');
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["trashCases"], [], ["loc", [null, [9, 14], [9, 37]]]]], ["attribute", "disabled", ["get", "isUpdatingCases", ["loc", [null, [10, 17], [10, 32]]]]], ["block", "if", [["get", "isUpdatingCases", ["loc", [null, [12, 14], [12, 29]]]]], [], 0, 1, ["loc", [null, [12, 8], [16, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 28,
                    "column": 6
                  },
                  "end": {
                    "line": 36,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "componentForHeader", ["loc", [null, [35, 31], [35, 49]]]], ["get", "column", ["loc", [null, [35, 50], [35, 56]]]]], [], ["loc", [null, [35, 20], [35, 57]]]]], ["tagName", "span"], ["loc", [null, [35, 8], [35, 74]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 37,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/column", [], ["column", ["subexpr", "@mut", [["get", "column", ["loc", [null, [29, 15], [29, 21]]]]], [], []], "class", ["subexpr", "ko-helper", [["get", "classForHeader", ["loc", [null, [30, 25], [30, 39]]]], ["get", "column", ["loc", [null, [30, 40], [30, 46]]]]], [], ["loc", [null, [30, 14], [30, 47]]]], "sortable", true, "onSort", "tableSorted", "orderBy", ["subexpr", "@mut", [["get", "orderBy", ["loc", [null, [33, 16], [33, 23]]]]], [], []], "orderByColumn", ["subexpr", "@mut", [["get", "orderByColumn", ["loc", [null, [34, 22], [34, 35]]]]], [], []]], 0, null, ["loc", [null, [28, 6], [36, 26]]]]],
            locals: ["column"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "columnList", ["loc", [null, [27, 12], [27, 22]]]]], [], 0, null, ["loc", [null, [27, 4], [37, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 51,
                        "column": 10
                      },
                      "end": {
                        "line": 53,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "componentForColumn", ["loc", [null, [52, 35], [52, 53]]]], ["get", "column", ["loc", [null, [52, 54], [52, 60]]]]], [], ["loc", [null, [52, 24], [52, 61]]]]], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [52, 67], [52, 71]]]]], [], []]], ["loc", [null, [52, 12], [52, 73]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 50,
                      "column": 8
                    },
                    "end": {
                      "line": 54,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-table/cell", [], ["class", ["subexpr", "ko-contextual-helper", [["get", "classForColumn", ["loc", [null, [51, 55], [51, 69]]]], ["get", "this", ["loc", [null, [51, 70], [51, 74]]]], ["get", "column", ["loc", [null, [51, 75], [51, 81]]]]], [], ["loc", [null, [51, 33], [51, 82]]]]], 0, null, ["loc", [null, [51, 10], [53, 28]]]]],
                locals: ["column"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 6
                  },
                  "end": {
                    "line": 55,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "columnList", ["loc", [null, [50, 16], [50, 26]]]]], [], 0, null, ["loc", [null, [50, 8], [54, 17]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/row", [], ["class", ["subexpr", "ko-helper", [["get", "classForRow", ["loc", [null, [42, 25], [42, 36]]]], ["get", "case", ["loc", [null, [42, 37], [42, 41]]]], ["get", "trashable", ["loc", [null, [42, 42], [42, 51]]]]], [], ["loc", [null, [42, 14], [42, 52]]]], "table", ["subexpr", "@mut", [["get", "table", ["loc", [null, [43, 14], [43, 19]]]]], [], []], "clickable", true, "rowContext", ["subexpr", "@mut", [["get", "case", ["loc", [null, [45, 19], [45, 23]]]]], [], []], "selectableDisabled", ["subexpr", "or", [["get", "isUpdatingCases", ["loc", [null, [46, 31], [46, 46]]]], ["subexpr", "eq", [["get", "case.state", ["loc", [null, [46, 51], [46, 61]]]], "TRASH"], [], ["loc", [null, [46, 47], [46, 70]]]]], [], ["loc", [null, [46, 27], [46, 71]]]], "onSelectChange", ["subexpr", "action", ["toggleCheck", ["get", "case", ["loc", [null, [47, 45], [47, 49]]]]], [], ["loc", [null, [47, 23], [47, 50]]]], "selected", ["subexpr", "contains", [["get", "case.id", ["loc", [null, [48, 27], [48, 34]]]], ["get", "selectedCaseIds", ["loc", [null, [48, 35], [48, 50]]]]], [], ["loc", [null, [48, 17], [48, 51]]]], "onClick", ["subexpr", "@mut", [["get", "onClick", ["loc", [null, [49, 16], [49, 23]]]]], [], []]], 0, null, ["loc", [null, [41, 6], [55, 23]]]]],
            locals: ["case"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 2
              },
              "end": {
                "line": 57,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "cases", ["loc", [null, [40, 12], [40, 17]]]]], [], 0, null, ["loc", [null, [40, 4], [56, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 58,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/header", [], ["class", "ko-cases-list__table-header"], 0, null, ["loc", [null, [26, 2], [38, 22]]]], ["block", "ko-table/body", [], [], 1, null, ["loc", [null, [39, 2], [57, 20]]]]],
        locals: ["table"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 59,
              "column": 0
            },
            "end": {
              "line": 63,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mt");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["cases.list.casesnotfound"], [], ["loc", [null, [61, 2], [61, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-cases-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-cases-list__title");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h4");
        dom.setAttribute(el2, "class", "ko-cases-list__heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "i-chevron-large-down i-color-grey--dark");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-cases-list__actions");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [3, 4], [3, 13]]]], ["block", "if", [["get", "isSomeChecked", ["loc", [null, [7, 10], [7, 23]]]]], [], 0, null, ["loc", [null, [7, 4], [18, 11]]]], ["block", "ko-table", [], ["selectable", ["subexpr", "@mut", [["get", "trashable", ["loc", [null, [24, 13], [24, 22]]]]], [], []], "onSelectionChange", ["subexpr", "action", ["selectionChanged"], [], ["loc", [null, [25, 20], [25, 47]]]]], 1, null, ["loc", [null, [23, 0], [58, 13]]]], ["block", "if", [["subexpr", "not", [["get", "cases", ["loc", [null, [59, 11], [59, 16]]]]], [], ["loc", [null, [59, 6], [59, 17]]]]], [], 2, null, ["loc", [null, [59, 0], [63, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-center/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-center']
  });
});
define("frontend-cp/components/ko-center/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 48
          }
        },
        "moduleName": "frontend-cp/components/ko-center/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-center__contents");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 33], [1, 42]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-channel-selector/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tabId: null,

    // HTML
    classNames: ['ko-channel-selector'],

    disabled: _ember['default'].computed('channel.channelType', function () {
      return this.get('channel.channelType') === 'NOTE';
    }),

    mouseDown: function mouseDown(e) {
      if (this.get('disabled')) {
        e.stopPropagation();
        this.attrs.onclick();
      }
    }
  });
});
define('frontend-cp/components/ko-channel-selector/selected-channel/component', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend({
    caseTab: inject.service(),

    options: null,
    selected: null,

    extra: null,

    replyChannel: computed('selected', 'options', 'extra.tabId', function () {
      var tabId = this.get('extra.tabId');
      var state = this.get('caseTab').getState(tabId);
      var channels = this.get('options');
      return channels.findBy('id', state.get('lastReplyChannelId'));
    })
  });
});
define("frontend-cp/components/ko-channel-selector/selected-channel/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-selector/selected-channel/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.setAttribute(el1, "class", "i-select");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["attribute", "class", ["get", "replyChannel.iconClass", ["loc", [null, [1, 11], [1, 33]]]]], ["content", "replyChannel.handle", ["loc", [null, [2, 0], [2, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-channel-selector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-channel-selector/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["attribute", "class", ["get", "channel.iconClass", ["loc", [null, [2, 13], [2, 30]]]]], ["content", "channel.handle", ["loc", [null, [2, 38], [2, 56]]]]],
        locals: ["channel"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 17
          }
        },
        "moduleName": "frontend-cp/components/ko-channel-selector/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [1, 25], [1, 33]]]]], [], []], "options", ["subexpr", "@mut", [["get", "channels", ["loc", [null, [1, 42], [1, 50]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "channel", ["loc", [null, [1, 60], [1, 67]]]]], [], []], "renderInPlace", true, "searchEnabled", false, "onchange", ["subexpr", "@mut", [["get", "onchange", ["loc", [null, [1, 116], [1, 124]]]]], [], []], "extra", ["subexpr", "hash", [], ["tabId", ["get", "tabId", ["loc", [null, [1, 143], [1, 148]]]]], ["loc", [null, [1, 131], [1, 149]]]], "triggerComponent", "ko-channel-selector/selected-channel"], 0, null, ["loc", [null, [1, 0], [3, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-checkbox/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    disabled: false,
    large: false,
    checked: false,
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',
    classNames: ['ko-checkbox'],

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleCheckbox');
      }
      return false;
    },

    click: function click() {
      return false;
    },

    actions: {
      toggleCheckbox: function toggleCheckbox() {
        if (!this.disabled) {
          if (this.get('onCheck')) {
            this.sendAction('onCheck', !this.get('checked'));
          } else {
            this.toggleProperty('checked');
          }
        }
      }
    }
  });
});
define("frontend-cp/components/ko-checkbox/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-checkbox__tick i-tick ", ["subexpr", "if", [["get", "large", ["loc", [null, [3, 44], [3, 49]]]], "ko-checkbox__tick--large"], [], ["loc", [null, [3, 39], [3, 78]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-checkbox__label ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [7, 40], [7, 48]]]], "ko-checkbox__label--disabled"], [], ["loc", [null, [7, 35], [7, 81]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [7, 90], [7, 99]]]], "-checkbox"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleCheckbox"], [], ["loc", [null, [7, 120], [7, 147]]]]], ["content", "label", ["loc", [null, [7, 148], [7, 157]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "checkbox");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createAttrMorph(element2, 'onclick');
        morphs[7] = dom.createMorphAt(element2, 1, 1);
        morphs[8] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-checkbox__checkbox ", ["get", "checkboxClass", ["loc", [null, [1, 36], [1, 49]]]], " ", ["subexpr", "if", [["get", "large", ["loc", [null, [1, 57], [1, 62]]]], "ko-checkbox__checkbox--large"], [], ["loc", [null, [1, 52], [1, 95]]]], " ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 101], [1, 109]]]], "ko-checkbox__checkbox--disabled"], [], ["loc", [null, [1, 96], [1, 145]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "checked", ["loc", [null, [1, 179], [1, 186]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 202], [1, 210]]]]]]], ["attribute", "aria-disabled", ["concat", [["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 234], [1, 242]]]], "true", "false"], [], ["loc", [null, [1, 229], [1, 259]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 274], [1, 282]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 292], [1, 301]]]], "-checkbox"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleCheckbox"], [], ["loc", [null, [1, 322], [1, 349]]]]], ["block", "if", [["get", "checked", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["get", "label", ["loc", [null, [6, 6], [6, 11]]]]], [], 1, null, ["loc", [null, [6, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-context-modal/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  var htmlSafe = _ember['default'].String.htmlSafe;

  var POSITION_MARGIN = 18; // Padding around window bounds to apply if modal's natural position is outside the bounds and it gets moved inside.
  var ARROW_OFFSET = 3; // Distance between the originating element and the modal
  var ARROW_SIZE = 9; // Size of the arrow in pixels (can be confirmed in _arrow.scss)

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    closeOnClickOutside: false,
    proxy: null,

    target: null,
    title: null,
    visible: false,

    $modal: null,

    globalX: null,
    globalY: null,
    localX: null,
    localY: null,
    buttonWidth: null,
    buttonHeight: null,
    windowWidth: null,
    windowHeight: null,
    documentWidth: null,
    documentHeight: null,
    modalWidth: null,
    naturalModalHeight: null,
    modalVisible: false,

    didReceiveAttrs: function didReceiveAttrs() {
      var _this = this;

      var proxy = this.get('proxy');
      proxy.open = function () {
        for (var _len = arguments.length, rest = Array(_len), _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }

        return Reflect.apply(_this.open, _this, rest);
      };
      proxy.close = function () {
        for (var _len2 = arguments.length, rest = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          rest[_key2] = arguments[_key2];
        }

        return Reflect.apply(_this.close, _this, rest);
      };
      proxy.reposition = function () {
        for (var _len3 = arguments.length, rest = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          rest[_key3] = arguments[_key3];
        }

        return Reflect.apply(_this.reposition, _this, rest);
      };
    },

    willInsertElement: function willInsertElement() {
      var _this2 = this;

      this.set('$modal', this.$().find('.ko-context-modal__container'));
      (0, _jquery['default'])(window).on('resize.contextModal', function () {
        _this2.set('modalVisible', false);
        _ember['default'].run.next(_this2, _this2.updatePositionInputs);
      });
    },

    willDestroyElement: function willDestroyElement() {
      (0, _jquery['default'])(window).off('resize.contextModal');
    },

    close: function close() {
      this.setProperties({
        visible: false
      });
    },

    open: function open(target, options) {
      this.setProperties({
        target: this.$('.ko-context-modal__trigger').get(0),
        visible: true
      });
      this.reposition();
    },

    // Ask for the modal window to be repositioned.
    // Useful in auto completes, when you need to use full vertical
    // space between different queries and data responses.
    reposition: function reposition() {
      _ember['default'].run.scheduleOnce('afterRender', this, this.updatePositionInputs);
    },

    updatePositionInputs: function updatePositionInputs() {
      var _this3 = this;

      var target = this.get('target');

      if (typeof target === 'undefined' || target === null) {
        return;
      }

      var $modal = this.get('$modal');

      var targetPosition = this.getPosition(target);
      _ember['default'].run(function () {
        _this3.set('isResetting', true);
      });
      _ember['default'].run(function () {
        _this3.set('globalX', targetPosition.globalX);
        _this3.set('globalY', targetPosition.globalY);
        _this3.set('localX', targetPosition.localX);
        _this3.set('localY', targetPosition.localY);
        _this3.set('buttonHeight', (0, _jquery['default'])(target).outerHeight());
        _this3.set('buttonWidth', (0, _jquery['default'])(target).width());
        _this3.set('windowWidth', (0, _jquery['default'])(window).width());
        _this3.set('windowHeight', (0, _jquery['default'])(window).height());
        _this3.set('documentWidth', (0, _jquery['default'])(document).width());
        _this3.set('documentHeight', (0, _jquery['default'])(document).height());
        _this3.set('modalWidth', $modal.outerWidth(true));
        _this3.set('naturalModalHeight', $modal.outerHeight());
        _this3.set('modalVisible', true);
        _this3.set('isResetting', false);
      });
    },

    /**
     * Calculates the x position of the arrow, relative to the left of the modal.
     * Limits to the bounds of the width of the modal
     * @return {Number} Arrow x Position
     */
    arrowX: _ember['default'].computed('modalWidth', 'boundingOffsetX', function () {
      var pos = this.get('modalWidth') / 2 + this.get('boundingOffsetX') - ARROW_SIZE / 2;

      return Math.max(2, Math.min(pos, this.get('modalWidth') - Math.sqrt(ARROW_SIZE * ARROW_SIZE + ARROW_SIZE * ARROW_SIZE)) - 2);
    }),

    /**
     * Based on the vertical position of the modal, set the arrow to appear on the top or bottom of the modal
     * @return {[type]} [description]
     */
    arrowClass: _ember['default'].computed('isArrowUnderneath', function () {
      //if title is empty arrow should be grey
      var title = this.get('title');
      var arrowUnderneath = this.get('isArrowUnderneath');
      if (!title && !arrowUnderneath) {
        return 'arrow--top arrow--no-title arrow';
      }
      return 'arrow--' + (this.get('isArrowUnderneath') ? 'bottom' : 'top') + ' arrow';
    }),

    targetModalOriginX: _ember['default'].computed('localX', 'buttonWidth', 'modalWidth', function () {
      return this.get('localX') - this.get('modalWidth') / 2 + this.get('buttonWidth') / 2; // Move the modal 50% of its width to the left of the centre of element clicked
    }),

    globalVsLocalXDisplacement: _ember['default'].computed('globalX', 'localX', function () {
      return this.get('globalX') - this.get('localX');
    }),

    positionX: _ember['default'].computed('targetModalOriginX', 'windowWidth', 'modalWidth', 'globalVsLocalXDisplacement', function () {
      var min = POSITION_MARGIN;
      var max = this.get('windowWidth') - this.get('modalWidth') - POSITION_MARGIN;
      var gvl = this.get('globalVsLocalXDisplacement');

      return Math.max(min - gvl, Math.min(this.get('targetModalOriginX'), max - gvl));
    }),

    positionY: _ember['default'].computed('isModalBelowClickedElement', 'localY', 'buttonHeight', 'naturalModalHeight', function () {
      var y = this.get('localY');
      if (this.get('isModalBelowClickedElement')) {
        return y + this.get('buttonHeight') + ARROW_OFFSET + ARROW_SIZE;
      } else {
        return y - this.get('naturalModalHeight') - ARROW_OFFSET - ARROW_SIZE;
      }
    }),

    isArrowUnderneath: _ember['default'].computed.not('isModalBelowClickedElement'),

    /**
     * Will place the modal above if there is enough space and there is more space above than below
     * @return {Boolean} [description]
     */
    isModalBelowClickedElement: _ember['default'].computed('spaceAbove', 'spaceBelow', 'naturalModalHeight', function () {
      return !(this.get('spaceAbove') > this.get('spaceBelow') && this.get('naturalModalHeight') < this.get('spaceAbove'));
    }),

    spaceAbove: _ember['default'].computed('globalY', function () {
      return this.get('globalY') - POSITION_MARGIN - ARROW_SIZE;
    }),

    spaceBelow: _ember['default'].computed('windowHeight', 'globalY', 'buttonHeight', function () {
      return this.get('windowHeight') - this.get('globalY') - this.get('buttonHeight') - POSITION_MARGIN - ARROW_SIZE;
    }),

    /**
     * Distance between where we want to put the modal, and where the bounding logic has moved it
     * @return {Number} X Distance in px between bounded and unbounded modal position
     */
    boundingOffsetX: _ember['default'].computed('targetModalOriginX', 'positionX', function () {
      return this.get('targetModalOriginX') - this.get('positionX');
    }),

    /**
     * Returns the x and y coordinates of the element passed in.
     * For a detailed breakdown and analysis of what is going on and why, please see:
     * http://www.kirupa.com/html5/get_element_position_using_javascript.htm
     *
     * @param {{HTMLElement}} element - DOM node to base positioning off of.
     * @returns {{x: number, y: number}}
     */
    getPosition: function getPosition(element) {
      if (!element) {
        throw new Error('No element found, cannot calculate coordinates');
      }

      var globalX = 0;
      var globalY = 0;
      var localX = element.offsetLeft;
      var localY = element.offsetTop;

      while (element) {
        globalX += element.offsetLeft - element.scrollLeft + element.clientLeft;
        globalY += element.offsetTop - element.scrollTop + element.clientTop;
        element = element.offsetParent;
      }
      return { globalX: globalX, globalY: globalY, localX: localX, localY: localY };
    },

    /**
     * Need to SafeString all bound style attributes
     */

    overlayStyle: _ember['default'].computed('globalX', 'globalY', 'documentWidth', 'documentHeight', function () {
      return htmlSafe('position: fixed; top: 0; left:0; right: 0; bottom: 0;');
    }),

    containerStyle: _ember['default'].computed('positionY', 'positionX', 'modalVisible', function () {
      return htmlSafe('top: ' + this.get('positionY') + 'px; left: ' + this.get('positionX') + 'px; ' + (this.get('modalVisible') ? '' : 'visibility: hidden;'));
    }),

    arrowStyle: _ember['default'].computed('arrowX', function () {
      return htmlSafe('left: ' + this.get('arrowX') + 'px;');
    })
  });
});
define("frontend-cp/components/ko-context-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-context-modal__overlay");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'style');
          morphs[1] = dom.createAttrMorph(element2, 'onclick');
          return morphs;
        },
        statements: [["attribute", "style", ["get", "overlayStyle", ["loc", [null, [4, 51], [4, 63]]]]], ["attribute", "onclick", ["get", "proxy.close", ["loc", [null, [4, 76], [4, 87]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box box--secondary ko-context-modal__header-container");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h5");
          dom.setAttribute(el2, "class", "ko-context-modal__header");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          dom.setAttribute(el2, "class", "ko-context-modal__action");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createAttrMorph(element1, 'onclick');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [9, 45], [9, 54]]]], ["attribute", "onclick", ["get", "proxy.close", ["loc", [null, [10, 54], [10, 65]]]]], ["inline", "t", ["generic.close"], [], ["loc", [null, [10, 68], [10, 89]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-context-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-context-modal__trigger");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-context-modal__container");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "box box--context-modal ko-context-modal__content");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element5, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element3, 'onclick');
        morphs[1] = dom.createMorphAt(element3, 0, 0);
        morphs[2] = dom.createAttrMorph(element4, 'class');
        morphs[3] = dom.createMorphAt(element4, 1, 1);
        morphs[4] = dom.createAttrMorph(element5, 'style');
        morphs[5] = dom.createMorphAt(element5, 1, 1);
        morphs[6] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
        morphs[7] = dom.createAttrMorph(element6, 'class');
        morphs[8] = dom.createAttrMorph(element6, 'style');
        return morphs;
      },
      statements: [["attribute", "onclick", ["get", "proxy.open", ["loc", [null, [1, 49], [1, 59]]]]], ["content", "yield", ["loc", [null, [1, 62], [1, 71]]]], ["attribute", "class", ["concat", ["ko-context-modal__dropdown overlay ", ["subexpr", "if", [["get", "visible", ["loc", [null, [2, 52], [2, 59]]]], "u-visible"], [], ["loc", [null, [2, 47], [2, 73]]]]]]], ["block", "if", [["get", "closeOnClickOutside", ["loc", [null, [3, 8], [3, 27]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 9]]]], ["attribute", "style", ["get", "containerStyle", ["loc", [null, [6, 51], [6, 65]]]]], ["block", "if", [["get", "title", ["loc", [null, [7, 10], [7, 15]]]]], [], 1, null, ["loc", [null, [7, 4], [12, 11]]]], ["inline", "yield", [], ["to", "inverse"], ["loc", [null, [14, 6], [14, 28]]]], ["attribute", "class", ["concat", [["get", "arrowClass", ["loc", [null, [16, 18], [16, 28]]]]]]], ["attribute", "style", ["get", "arrowStyle", ["loc", [null, [16, 40], [16, 50]]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-date-select/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-date-select'],
    value: null,
    placeholder: null,
    onChange: null
  });
});
define("frontend-cp/components/ko-date-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-datepicker", [], ["date", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 23], [7, 28]]]]], [], []], "onDateChange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [7, 42], [7, 50]]]]], [], []], "onClose", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [7, 59], [7, 81]]]]], [], []]], ["loc", [null, [7, 2], [7, 83]]]]],
        locals: ["dropdown"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "format-date", [["get", "value", ["loc", [null, [10, 18], [10, 23]]]]], ["format", "full"], ["loc", [null, [10, 4], [10, 39]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "or", [["get", "placeholder", ["loc", [null, [12, 9], [12, 20]]]], ["subexpr", "t", ["generic.dateselect.placeholder"], [], ["loc", [null, [12, 21], [12, 57]]]]], [], ["loc", [null, [12, 4], [12, 59]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "ko-date-select__trigger-icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "value", ["loc", [null, [9, 8], [9, 13]]]]], [], 0, 1, ["loc", [null, [9, 2], [13, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-date-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["class", "ko-date-select__dropdown", "triggerClass", "ko-date-select__trigger", "dropdownClass", "ko-date-select__content", "horizontalPosition", "left"], 0, 1, ["loc", [null, [1, 0], [16, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-datepicker/component', ['exports', 'ember', 'npm:lodash', 'moment', 'frontend-cp/config/environment', 'frontend-cp/lib/keycodes'], function (exports, _ember, _npmLodash, _moment, _frontendCpConfigEnvironment, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onDateChange: null,
    onClose: null,
    date: (0, _moment['default'])(''),

    // State
    today: (0, _moment['default'])(),
    shownDate: null,
    assetRoot: _frontendCpConfigEnvironment['default'].assetRoot,

    // HTML
    attributeBindings: ['tabindex'],
    tabindex: '-1',
    classNames: ['ko-datepicker'],

    onDateParamChange: _ember['default'].on('init', _ember['default'].observer('momentDate', function () {
      this.set('shownDate', (0, _moment['default'])(this.get('momentDate').isValid() ? this.get('momentDate') : this.get('today')).toDate());
    })),

    momentDate: _ember['default'].computed('date', function () {
      return (0, _moment['default'])(this.get('date'));
    }),

    month: _ember['default'].computed('shownDate', function () {
      return (0, _moment['default'])(this.get('shownDate')).month();
    }),

    year: _ember['default'].computed('shownDate', function () {
      return (0, _moment['default'])(this.get('shownDate')).year();
    }),

    weekdays: _ember['default'].computed(function () {
      var weekdays = _moment['default'].weekdaysShort();
      var firstDayOfWeek = _moment['default'].localeData().firstDayOfWeek();
      _npmLodash['default'].times(firstDayOfWeek, function () {
        return weekdays.push(weekdays.shift());
      });
      return weekdays;
    }),

    days: _ember['default'].computed('year', 'month', 'today', 'momentDate', function () {
      var date = (0, _moment['default'])({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).startOf('week');

      var end = (0, _moment['default'])({
        year: this.get('year'),
        month: this.get('month'),
        day: 1
      }).add(1, 'month').endOf('week');

      var dates = [];
      while (date.isBefore(end, 'day') || date.isSame(end, 'day')) {
        dates.push({
          date: date.date(),
          month: date.month(),
          year: date.year(),
          currentMonth: date.month() === this.get('month'),
          today: this.get('today').isSame(date, 'day'),
          selected: date.isSame(this.get('momentDate'), 'day')
        });
        date.add(1, 'day');
      }
      return dates;
    }),

    jumpDateBy: function jumpDateBy(method, range) {
      if (this.get('momentDate').isValid()) {
        this.setDate((0, _moment['default'])(this.get('momentDate'))[method](1, range));
      }
      return false;
    },

    setDate: function setDate(date) {
      this.attrs.onDateChange(date ? date.toDate() : null);
    },

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case _frontendCpLibKeycodes.up:
          {
            return this.jumpDateBy('subtract', 'week');
          }
        case _frontendCpLibKeycodes.down:
          {
            return this.jumpDateBy('add', 'week');
          }
        case _frontendCpLibKeycodes.left:
          {
            return this.jumpDateBy('subtract', 'day');
          }
        case _frontendCpLibKeycodes.right:
          {
            return this.jumpDateBy('add', 'day');
          }
      }
    },

    actions: {
      previousMonth: function previousMonth() {
        this.set('shownDate', (0, _moment['default'])(this.get('shownDate')).subtract(1, 'month').toDate());
      },

      nextMonth: function nextMonth() {
        this.set('shownDate', (0, _moment['default'])(this.get('shownDate')).add(1, 'month').toDate());
      },

      selectDate: function selectDate(date) {
        this.setDate((0, _moment['default'])({
          year: date.year,
          month: date.month,
          day: date.date
        }));
      },

      today: function today() {
        this.setDate((0, _moment['default'])(this.get('today')));
      },

      clear: function clear() {
        this.setDate(null);
      }
    }
  });
});
define("frontend-cp/components/ko-datepicker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-datepicker__weekday");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "weekday", ["loc", [null, [10, 41], [10, 52]]]]],
        locals: ["weekday"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-datepicker__date ", ["subexpr", "if", [["get", "date.currentMonth", ["loc", [null, [13, 42], [13, 59]]]], "ko-datepicker__date--current-month"], [], ["loc", [null, [13, 37], [13, 98]]]], "\n      ", ["subexpr", "if", [["get", "date.today", ["loc", [null, [14, 11], [14, 21]]]], "ko-datepicker__date--today"], [], ["loc", [null, [14, 6], [14, 52]]]], " ", ["subexpr", "if", [["get", "date.selected", ["loc", [null, [14, 58], [14, 71]]]], "ko-datepicker__date--selected"], [], ["loc", [null, [14, 53], [14, 105]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["selectDate", ["get", "date", ["loc", [null, [15, 36], [15, 40]]]]], [], ["loc", [null, [15, 14], [15, 42]]]]], ["content", "date.date", ["loc", [null, [15, 43], [15, 56]]]]],
        locals: ["date"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-datepicker/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__month");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__year");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__previous i-chevron-large-left");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-datepicker__next i-chevron-large-right");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__calendar");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-datepicker__actions");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-triangle ko-datepicker__icon--today");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-minus ko-datepicker__icon--clear");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-datepicker__action");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-cross-bold ko-datepicker__icon--close");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [5]);
        var element3 = dom.childAt(element1, [7]);
        var element4 = dom.childAt(fragment, [2]);
        var element5 = dom.childAt(fragment, [4]);
        var element6 = dom.childAt(element5, [1, 1]);
        var element7 = dom.childAt(element5, [3, 1]);
        var element8 = dom.childAt(element5, [5, 1]);
        var morphs = new Array(12);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
        morphs[2] = dom.createAttrMorph(element2, 'onclick');
        morphs[3] = dom.createAttrMorph(element3, 'onclick');
        morphs[4] = dom.createMorphAt(element4, 1, 1);
        morphs[5] = dom.createMorphAt(element4, 2, 2);
        morphs[6] = dom.createAttrMorph(element6, 'onclick');
        morphs[7] = dom.createMorphAt(element6, 3, 3);
        morphs[8] = dom.createAttrMorph(element7, 'onclick');
        morphs[9] = dom.createMorphAt(element7, 3, 3);
        morphs[10] = dom.createAttrMorph(element8, 'onclick');
        morphs[11] = dom.createMorphAt(element8, 3, 3);
        return morphs;
      },
      statements: [["inline", "format-date", [["get", "shownDate", ["loc", [null, [2, 51], [2, 60]]]]], ["format", "month"], ["loc", [null, [2, 37], [2, 77]]]], ["inline", "format-date", [["get", "shownDate", ["loc", [null, [3, 50], [3, 59]]]]], ["format", "year"], ["loc", [null, [3, 36], [3, 75]]]], ["attribute", "onclick", ["subexpr", "action", ["previousMonth"], [], ["loc", [null, [4, 69], [4, 95]]]]], ["attribute", "onclick", ["subexpr", "action", ["nextMonth"], [], ["loc", [null, [5, 66], [5, 88]]]]], ["block", "each", [["get", "weekdays", ["loc", [null, [9, 10], [9, 18]]]]], [], 0, null, ["loc", [null, [9, 2], [11, 11]]]], ["block", "each", [["get", "days", ["loc", [null, [12, 10], [12, 14]]]]], ["key", "@index"], 1, null, ["loc", [null, [12, 2], [16, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["today"], [], ["loc", [null, [21, 18], [21, 36]]]]], ["inline", "t", ["generic.datepicker.today"], [], ["loc", [null, [23, 6], [23, 38]]]], ["attribute", "onclick", ["subexpr", "action", ["clear"], [], ["loc", [null, [27, 18], [27, 36]]]]], ["inline", "t", ["generic.datepicker.clear"], [], ["loc", [null, [29, 6], [29, 38]]]], ["attribute", "onclick", ["get", "onClose", ["loc", [null, [33, 20], [33, 27]]]]], ["inline", "t", ["generic.datepicker.close"], [], ["loc", [null, [35, 6], [35, 38]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-draggable-dropzone/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    totalSize: 0,
    dragCounter: 0,
    classNames: ['koDraggableDropzone'],
    classNameBindings: ['dragClass:ko-draggable-dropzone--activated:ko-draggable-dropzone--deactivated'],
    dragClass: false,

    dragEnter: function dragEnter(event) {
      event.preventDefault();
      this.incrementProperty('dragCounter');
      this.set('dragClass', true);
    },

    dragOver: function dragOver(event) {
      event.preventDefault();
    },

    dragLeave: function dragLeave(event) {
      event.preventDefault();
      this.decrementProperty('dragCounter');
      if (this.dragCounter === 0) {
        this.set('dragClass', false);
      }
    },

    drop: function drop(event) {
      var _this = this;

      event.preventDefault();
      var file = event.dataTransfer.files[0];
      var reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = function () {
        _this.sendAction('dropped', reader.result);
      };
      this.set('dragClass', false);
    }

  });
});
define("frontend-cp/components/ko-draggable-dropzone/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-draggable-dropzone/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-draggable-dropzone__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-draggable-dropzone__border");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/basic-drill-down/component', ['exports', 'ember', 'npm:lodash', 'ember-power-select/utils/group-utils'], function (exports, _ember, _npmLodash, _emberPowerSelectUtilsGroupUtils) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var computed = _ember['default'].computed;
  var isPresent = _ember['default'].isPresent;

  var Node = _ember['default'].Object.extend({
    parent: null,
    content: null,
    label: computed.reads('content.label'),
    value: computed.reads('content.value'),

    path: computed('content.path', 'parent.path', 'label', function () {
      var contentPath = this.get('content.path');

      if (contentPath) {
        return contentPath;
      }

      var parent = this.get('parent');
      var label = this.get('label');

      if (parent) {
        return [parent.get('path'), label].compact().join(' / ');
      }

      return label;
    }),

    children: computed('content.children.[]', function () {
      var _this = this;

      return (this.get('content.children') || []).map(function (node) {
        return Node.create({ content: node, parent: _this });
      });
    }),

    leafs: computed('children.@each.leafs', function () {
      var children = this.get('children');

      if (isPresent(children)) {
        return _npmLodash['default'].flatten(children.mapBy('leafs'));
      }

      if (this.get('parent')) {
        return [this];
      }

      return [];
    })
  });

  exports['default'] = _ember['default'].Component.extend({
    rootNodes: null,
    value: null,
    searchEnabled: true,
    searchPlaceholder: null,
    disabled: null,
    openNode: computed.or('selectedNode.parent', '_rootNode'),
    backNode: _ember['default'].Object.create({ isBack: true }),

    visibleNodes: computed('openNode.{parent,children.[]}', 'backNode', function () {
      var children = this.get('openNode.children');

      if (this.get('openNode.parent')) {
        return [this.get('backNode')].concat(_toConsumableArray(children));
      }

      return children;
    }),

    selectedNode: computed('_rootNode.leafs.@each.value', 'value', function () {
      return this.get('_rootNode.leafs').findBy('value', this.get('value'));
    }),

    _rootNode: computed('rootNodes', function () {
      return Node.create({
        content: { children: this.get('rootNodes') }
      });
    }),

    _search: function _search(searchTerm, resolve) {
      resolve(this.get('_rootNode.leafs').filter(function (leaf) {
        return (0, _emberPowerSelectUtilsGroupUtils.defaultMatcher)(leaf.get('path'), searchTerm);
      }));
    },

    actions: {
      selectNode: function selectNode(node, dropdown) {
        if (node.get('isBack')) {
          this.set('openNode', this.get('openNode.parent'));
        } else if (isPresent(node.get('children'))) {
          this.set('openNode', node);
        } else if (this.attrs.onChange) {
          this.attrs.onChange(node.get('value'));
          dropdown.actions.close();
        }
      },

      search: function search(searchTerm) {
        var _this2 = this;

        return new _ember['default'].RSVP.Promise(function (resolve) {
          _ember['default'].run.debounce(_this2, _this2._search, searchTerm, resolve, 200);
        });
      }
    }
  });
});
define("frontend-cp/components/ko-dropdown/basic-drill-down/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/basic-drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "i-chevron-large-left i-color-grey--dark");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-dropdown-basic-drill-down__node-label");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", ["generic.drilldown.back"], [], ["loc", [null, [15, 61], [15, 91]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-dropdown/basic-drill-down/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("i");
              dom.setAttribute(el1, "class", "i-chevron-large-right i-color-grey--dark");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/basic-drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "sanitize-html", [["subexpr", "ko-embolden", [["get", "node.path", ["loc", [null, [17, 35], [17, 44]]]], ["get", "searchTerm", ["loc", [null, [17, 45], [17, 55]]]]], [], ["loc", [null, [17, 22], [17, 56]]]], "bold"], [], ["loc", [null, [17, 6], [17, 65]]]], ["block", "if", [["get", "node.children", ["loc", [null, [19, 12], [19, 25]]]]], [], 0, null, ["loc", [null, [19, 6], [21, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/basic-drill-down/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-dropdown-basic-drill-down__node");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["get", "node.isBack", ["loc", [null, [13, 10], [13, 21]]]]], [], 0, 1, ["loc", [null, [13, 4], [22, 11]]]]],
        locals: ["node", "searchTerm"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/basic-drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["onchange", ["subexpr", "action", ["selectNode"], [], ["loc", [null, [2, 11], [2, 32]]]], "options", ["subexpr", "@mut", [["get", "visibleNodes", ["loc", [null, [3, 10], [3, 22]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "selectedNode", ["loc", [null, [4, 11], [4, 23]]]]], [], []], "search", ["subexpr", "action", ["search"], [], ["loc", [null, [5, 9], [5, 26]]]], "searchEnabled", ["subexpr", "@mut", [["get", "searchEnabled", ["loc", [null, [6, 16], [6, 29]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [7, 11], [7, 19]]]]], [], []], "searchPlaceholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [8, 20], [8, 37]]]]], [], []], "closeOnSelect", false, "class", "ember-power-select-wrapper--ko ember-power-select-wrapper--size-medium", "loadingMessage", null], 0, null, ["loc", [null, [1, 0], [24, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/container/button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNames: ['ko-dropdown_container_button']
  });
});
define("frontend-cp/components/ko-dropdown/container/button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/container/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  var Component = _ember['default'].Component;
  var observer = _ember['default'].observer;
  var run = _ember['default'].run;

  /**
   * Rules:
   *   Always closes when you click outside of it
   *   Always open while it or its children are focussed
   *   hideOnChildFocus will unfocus children if a link
   *
   *   {{#ko-dropdown/container as |name dropdownContext|}}
   *     {{#if (eq name 'button')}}
   *       <div>Button</div>
   *     {{/if}}
   *     {{#if (eq name 'content')}}
   *       Content
   *       <button onclick={{action "hide" target=dropdownContext}}>hideme</button>
   *     {{/if}}
   *   {{/ko-dropdown/container}}
   */

  exports['default'] = Component.extend({
    // Params
    // Set to true if you include links in the content and you want to hide the dropdown when the links are clicked
    hideOnChildFocus: null,
    // Set to true if you want non link clicks to also hide the dropdown
    hideOnClick: null,
    //Allows components that need to signal when the dropdown should close
    hideDropdown: null,
    onFocusChanged: null,

    tabindex: 0,
    isFocussed: null,
    attributeBindings: ['tabindex'],
    classNames: ['ko-dropdown-container'],
    classNameBindings: ['alignRight', 'isFocussed:focused'],

    onHideDropdown: observer('hideDropdown', function () {
      var hideDropdown = this.get('hideDropdown');
      if (hideDropdown) {
        this.send('onContentRequestClose');
      }
    }),

    focusOut: function focusOut(event) {
      var _this = this;

      // Ignore focusOut events that are focusing on another item which is a child of this one
      // Also ignore events where the button itself has been clicked on (event.relatedTarget === context.element)
      if (event.relatedTarget === null || !_jquery['default'].contains(this.get('context.element'), event.relatedTarget) && this.get('context.element') !== event.relatedTarget) {
        run.next(function () {
          if (!_this.get('isDestroyed')) {
            _this.set('isFocussed', false);
            _this.sendAction('onFocusChanged', false);
            _this.sendAction('onFocusOut');
          }
        });
      }
    },

    focusIn: function focusIn() {
      this.set('isFocussed', true);
      this.sendAction('onFocusChanged', true);
      this.sendAction('onFocusIn');
    },

    actions: {
      onContentRequestClose: function onContentRequestClose() {
        this.$().blur();
        this.set('hideDropdown', false);
      },

      hide: function hide() {
        this.get('contentComponent').send('hide');
      }
    }
  });
});
define('frontend-cp/components/ko-dropdown/container/content/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    // hideOnChildFocus is useful because links become focussed when clicked so you can
    // hide the dropdown when someone clicks a link
    hideOnChildFocus: null,
    hideOnClick: null,
    // registerAs allows this component to be registered with its parent so the parent can call actions on it
    registerAs: null,

    role: 'menu',
    attributeBindings: ['role'],
    isFocussed: false,
    focussedObject: null,

    classNames: ['ko-dropdown-container-content'],

    registerOnParent: _ember['default'].on('init', function () {
      this.set('registerAs', this);
    }),

    mouseUp: function mouseUp() {
      if (this.get('hideOnChildFocus') || this.get('hideOnClick')) {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else if (this.get('hideOnClick')) {
          this.sendAction('onClose');
        }
      }
    },

    focusOut: function focusOut() {
      this.set('focussedObject', null);
      this.set('isFocussed', false);
    },

    focusIn: function focusIn(event) {
      this.set('focussedObject', event.target);
      this.set('isFocussed', true);
    },

    actions: {
      hide: function hide() {
        if (this.get('isFocussed') && this.get('focussedObject')) {
          this.$(this.get('focussedObject')).blur();
        } else {
          this.sendAction('onClose');
        }
      }
    }
  });
});
define("frontend-cp/components/ko-dropdown/container/content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-dropdown/container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", ["button", ["get", "this", ["loc", [null, [2, 19], [2, 23]]]]], [], ["loc", [null, [2, 2], [2, 25]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", ["content", ["get", "this", ["loc", [null, [7, 22], [7, 26]]]]], [], ["loc", [null, [7, 4], [7, 28]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-dropdown/container/content", [], ["registerAs", ["subexpr", "@mut", [["get", "contentComponent", ["loc", [null, [6, 46], [6, 62]]]]], [], []], "hideOnChildFocus", ["subexpr", "@mut", [["get", "hideOnChildFocus", ["loc", [null, [6, 80], [6, 96]]]]], [], []], "hideOnClick", ["subexpr", "@mut", [["get", "hideOnClick", ["loc", [null, [6, 109], [6, 120]]]]], [], []], "onClose", "onContentRequestClose"], 0, null, ["loc", [null, [6, 2], [8, 36]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/container/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container/button", [], [], 0, null, ["loc", [null, [1, 0], [3, 33]]]], ["block", "if", [["get", "isFocussed", ["loc", [null, [5, 6], [5, 16]]]]], [], 1, null, ["loc", [null, [5, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/drill-down/component', ['exports', 'ember', 'npm:lodash', 'ember-sanitize/utils/sanitize'], function (exports, _ember, _npmLodash, _emberSanitizeUtilsSanitize) {
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    options: [],
    value: null,
    onValueChange: null,
    emptyLabel: '',
    hasEmptyOption: true,
    extra: null,
    triggerComponent: null,
    searchPlaceholder: null,
    searchEnabled: false,
    isDisabled: false,

    // State
    currentPath: null,
    sanitizedOptions: [],

    // HTML
    classNames: ['ko-dropdown_drill-down'],

    mouseDown: function mouseDown(e) {
      e.preventDefault();
      e.stopPropagation();
    },

    resetState: _ember['default'].on('init', 'didReceiveAttrs', function () {
      this.set('currentPath', []);

      var options = this.get('options');

      var sanitizedOptions = options.map(function (option) {
        return { id: option.id, value: (0, _emberSanitizeUtilsSanitize.sanitize)(option.value), children: option.children };
      });

      this.set('sanitizedOptions', sanitizedOptions);
    }),

    // CPs
    currentHierarchyLevel: _ember['default'].computed('sanitizedOptions', 'currentPath.[]', function () {
      var find = function find(_x, _x2, _x3) {
        var _again = true;

        _function: while (_again) {
          var item = _x,
              pathLeft = _x2,
              pathTraversed = _x3;
          _again = false;

          if (pathLeft.length === 0) {
            var children = item.children.map(function (child) {
              return _extends({}, child, {
                value: pathTraversed.concat(child.value).join(' / '),
                levelValue: get(child, 'value')
              });
            });

            if (item.id) {
              return [{
                value: pathTraversed.join(' / '),
                levelValue: item.value,
                id: item.id
              }].concat(_toConsumableArray(children));
            } else {
              return children;
            }
          } else {
            _x = item.children.find(function (option) {
              return get(option, 'value') === pathLeft[0];
            });
            _x2 = pathLeft.slice(1);
            _x3 = [].concat(_toConsumableArray(pathTraversed), [pathLeft[0]]);
            _again = true;
            children = undefined;
            continue _function;
          }
        }
      };

      var items = find({ children: this.get('sanitizedOptions') }, this.get('currentPath'), []);
      if (this.get('hasEmptyOption') && this.get('currentPath').length === 0) {
        items.unshift({
          type: 'empty',
          value: this.get('emptyLabel')
        });
      }

      if (this.get('currentPath').length > 0) {
        items.unshift({
          type: 'back',
          value: 'Back'
        });
      }
      return items;
    }),

    flatOptions: _ember['default'].computed('sanitizedOptions', function () {
      var flatten = function flatten(options) {
        return _npmLodash['default'].flatten(options.map(function (option) {
          var children = flatten(option.children || []).map(function (item) {
            return { id: item.id, value: option.value + ' / ' + item.value };
          });
          if (option.id) {
            return [{ id: option.id, value: option.value }].concat(_toConsumableArray(children));
          } else {
            return children;
          }
        }));
      };

      return flatten(this.get('sanitizedOptions'));
    }),

    // We can't listen for deeply nested changes in a data structure which can go
    // infinitely deep. Thus the implicit contract between this and parent is
    // immutability of `options`.
    formattedValue: _ember['default'].computed('sanitizedOptions', 'value', function () {
      var value = this.get('value');
      if (!value) {
        return this.get('emptyLabel');
      }

      var find = function find(options) {
        var item = options.find(function (option) {
          return get(option, 'id') === value;
        });
        if (item) {
          return [get(item, 'value')];
        } else {
          return options.filter(function (option) {
            return get(option, 'children');
          }).map(function (option) {
            return [get(option, 'value')].concat(_toConsumableArray(find(get(option, 'children'))));
          }).find(function (option) {
            return option.length > 1;
          }) || [];
        }
      };

      return find(this.get('sanitizedOptions')).join(' / ');
    }),

    computedExtra: _ember['default'].computed('extra', 'formattedValue', function () {
      return _extends({}, this.get('extra') || {}, {
        labelPath: 'value',
        formattedValue: this.get('formattedValue')
      });
    }),

    actions: {
      search: function search(term) {
        var _this = this;

        return new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _ember['default'].run.debounce(_this, _this._performSearch, term, resolve, reject, 300);
        });
      },

      selectItem: function selectItem(item, dropdown) {
        if (get(item, 'children.length')) {
          this.get('currentPath').pushObject(get(item, 'levelValue'));
        } else if (get(item, 'id')) {
          this.resetState();
          dropdown.actions.close();
          this.get('onValueChange')(get(item, 'id'));
        } else if (get(item, 'type') === 'empty') {
          this.resetState();
          dropdown.actions.close();
          this.get('onValueChange')(null);
        } else if (get(item, 'type') === 'back') {
          this.get('currentPath').popObject();
        }
      }
    },

    _performSearch: function _performSearch(term, resolve) {
      var termLowerCase = term.toLowerCase();
      var matches = function matches(option) {
        return option.value.toLowerCase().indexOf(termLowerCase) !== -1;
      };
      resolve(this.get('flatOptions').filter(matches));
    }
  });
});
define("frontend-cp/components/ko-dropdown/drill-down/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "i-chevron-large-left i-color-grey--dark");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "i-chevron-large-right i-color-grey--dark");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "option.type", ["loc", [null, [16, 12], [16, 23]]]], "back"], [], ["loc", [null, [16, 8], [16, 31]]]]], [], 0, null, ["loc", [null, [16, 2], [18, 9]]]], ["inline", "sanitize-html", [["subexpr", "ko-embolden", [["get", "option.value", ["loc", [null, [19, 31], [19, 43]]]], ["get", "lastSearchedText", ["loc", [null, [19, 44], [19, 60]]]]], [], ["loc", [null, [19, 18], [19, 61]]]], "bold"], [], ["loc", [null, [19, 2], [19, 70]]]], ["block", "if", [["get", "option.children", ["loc", [null, [20, 8], [20, 23]]]]], [], 1, null, ["loc", [null, [20, 2], [22, 9]]]]],
        locals: ["option", "lastSearchedText"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["onchange", ["subexpr", "action", ["selectItem"], [], ["loc", [null, [2, 11], [2, 32]]]], "verticalPosition", "below", "options", ["subexpr", "@mut", [["get", "currentHierarchyLevel", ["loc", [null, [4, 10], [4, 31]]]]], [], []], "tabindex", "-1", "renderInPlace", true, "searchEnabled", ["subexpr", "@mut", [["get", "searchEnabled", ["loc", [null, [7, 16], [7, 29]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 11], [8, 21]]]]], [], []], "triggerComponent", ["subexpr", "@mut", [["get", "triggerComponent", ["loc", [null, [9, 19], [9, 35]]]]], [], []], "searchPlaceholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [10, 20], [10, 37]]]]], [], []], "searchMessage", false, "search", ["subexpr", "action", ["search"], [], ["loc", [null, [12, 9], [12, 26]]]], "extra", ["subexpr", "@mut", [["get", "computedExtra", ["loc", [null, [13, 8], [13, 21]]]]], [], []], "closeOnSelect", false], 0, null, ["loc", [null, [1, 0], [23, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-dropdown/list/component', ['exports', 'ember'], function (exports, _ember) {

  // Although you can yield any content inside this component, ensure
  // that the options have the class .ko-dropdown_list__item
  //
  // Example:
  //
  //  ```hbs
  //  {{#ko-dropdown/list}}
  //    {{each options as |option|}}
  //      <li class="ko-dropdown_list__item" onclick={{action "myAction" option}}>
  //        {{option}}
  //      </li>
  //    {{/each}}
  //  {{/ko-dropdown/list}}
  //  ```
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    // Allow users of dropdown list to set style directly in template eg:
    // {{#ko-dropdown/list style="width: 1000px;"}}
    //    {{yield}}
    // {{/ko-dropdown/list}}
    attributeBindings: ['style'],

    classNames: ['ko-dropdown_list']
  });
});
define("frontend-cp/components/ko-dropdown/list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-dropdown/select/button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    label: '',
    displayIcon: true,

    // HTML
    classNames: ['ko-dropdown_select_button']
  });
});
define("frontend-cp/components/ko-dropdown/select/button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 83
            }
          },
          "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-dropdown-select__icon i-select");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 90
          }
        },
        "moduleName": "frontend-cp/components/ko-dropdown/select/button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [1, 0], [1, 9]]]], ["block", "if", [["get", "displayIcon", ["loc", [null, [1, 15], [1, 26]]]]], [], 0, null, ["loc", [null, [1, 9], [1, 90]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-editable-text/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var run = _ember['default'].run;
  var Component = _ember['default'].Component;
  exports['default'] = Component.extend({
    //Params:
    onValueChange: null,
    placeholder: null,
    value: null,
    isErrored: false,
    isPusherEdited: false,
    isDisabled: false,

    classNames: ['editable-text'],
    classNameBindings: ['isErrored:error', 'isEmpty:editable-text--empty'],

    isEditing: false,
    isEdited: false,

    // CPs
    isEmpty: computed.not('value'),
    displayText: computed.or('value', 'placeholder'),
    valueToSave: computed('value', {
      get: function get() {
        return this.get('value');
      },
      set: function set(_, v) {
        return v;
      }
    }),

    // Actions
    actions: {
      edit: function edit() {
        if (!this.get('isDisabled')) {
          this.startEditing();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        if (e.keyCode === 13) {
          // ENTER
          this.stopEditing();
        }
      }
    },

    focusOut: function focusOut() {
      this.stopEditing();
    },

    startEditing: function startEditing() {
      var _this = this;

      this.set('isEditing', true);
      this.set('valueToSave', this.get('value'));
      run.scheduleOnce('afterRender', this, function () {
        _this.$().find('.editable-text__input').focus();
      });
    },

    stopEditing: function stopEditing() {
      this.set('isEditing', false);

      if (this.get('onValueChange')) {
        this.sendAction('onValueChange', this.get('valueToSave'));
      } else {
        this.set('value', this.get('valueToSave'));
      }
    }
  });
});
define("frontend-cp/components/ko-editable-text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editable-text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "class", "editable-text__input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [2]);
        var element2 = dom.childAt(fragment, [2]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        morphs[3] = dom.createAttrMorph(element1, 'class');
        morphs[4] = dom.createAttrMorph(element2, 'class');
        morphs[5] = dom.createAttrMorph(element3, 'value');
        morphs[6] = dom.createAttrMorph(element3, 'oninput');
        morphs[7] = dom.createAttrMorph(element3, 'onkeydown');
        return morphs;
      },
      statements: [["attribute", "onclick", ["subexpr", "action", ["edit"], [], ["loc", [null, [1, 13], [1, 30]]]]], ["attribute", "class", ["concat", ["editable-text__text ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [1, 63], [1, 73]]]], "editable-text__text--disabled"], [], ["loc", [null, [1, 58], [1, 107]]]], " ", ["subexpr", "if", [["get", "isEditing", ["loc", [null, [1, 113], [1, 122]]]], "u-hidden"], [], ["loc", [null, [1, 108], [1, 135]]]], " ", ["subexpr", "if", [["get", "isPusherEdited", ["loc", [null, [1, 141], [1, 155]]]], "editable-text__text--pusher-edited"], [], ["loc", [null, [1, 136], [1, 194]]]], " ", ["subexpr", "if", [["get", "isEdited", ["loc", [null, [1, 201], [1, 209]]]], "editable-text__text--edited"], [], ["loc", [null, [1, 195], [1, 242]]]]]]], ["content", "displayText", ["loc", [null, [1, 244], [1, 259]]]], ["attribute", "class", ["concat", ["editable-text__pencil i-pencil i-color-grey i-size-14 u-invisible ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [2, 86], [2, 96]]]], "u-hidden"], [], ["loc", [null, [2, 81], [2, 109]]]]]]], ["attribute", "class", ["concat", ["editable-text__input-field ", ["subexpr", "unless", [["get", "isEditing", ["loc", [null, [5, 48], [5, 57]]]], "u-hidden"], [], ["loc", [null, [5, 39], [5, 70]]]]]]], ["attribute", "value", ["get", "value", ["loc", [null, [6, 29], [6, 34]]]]], ["attribute", "oninput", ["subexpr", "action", [["subexpr", "mut", [["get", "valueToSave", ["loc", [null, [6, 59], [6, 70]]]]], [], ["loc", [null, [6, 54], [6, 71]]]]], ["value", "target.value"], ["loc", [null, [6, 45], [6, 94]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [6, 105], [6, 131]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-editor-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    title: null,

    // HTML
    classNames: ['ko-editor-modal']
  });
});
define("frontend-cp/components/ko-editor-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-editor-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-editor-modal__overlay");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-editor-modal__modal u-h-center");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("h4");
        dom.setAttribute(el3, "class", "ko-editor-modal__title");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1, 1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [5, 39], [5, 48]]]], ["content", "yield", ["loc", [null, [7, 2], [7, 11]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-feed/activity/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //params
    activity: null,

    classNames: ['ko-feed_activity'],

    // body comes from events, plainTextSummary comes from activities
    summary: _ember['default'].computed('activity.body', 'activity.plainTextSummary', function () {
      return this.get('activity.body') || this.get('activity.plainTextSummary');
    })
  });
});
define("frontend-cp/components/ko-feed/activity/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/activity/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_activity__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-feed_activity__contents");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-feed_activity__summary");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" at ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        return morphs;
      },
      statements: [["content", "summary", ["loc", [null, [3, 42], [3, 53]]]], ["inline", "format-relative", [["get", "activity.createdAt", ["loc", [null, [4, 20], [4, 38]]]]], [], ["loc", [null, [4, 2], [4, 40]]]], ["inline", "format-time", [["get", "activity.createdAt", ["loc", [null, [4, 58], [4, 76]]]]], ["format", "time"], ["loc", [null, [4, 44], [4, 92]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-feed/item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //params
    event: null,
    parent: null,
    isReplyDisabled: false,
    canReplyToPost: false,

    sessionService: _ember['default'].inject.service('session'),

    classNames: ['ko-feed_item'],
    classNameBindings: ['isNote:ko-feed_item--note:ko-feed_item--post'],
    attributeBindings: ['event.id:data-id'],

    isNote: _ember['default'].computed.equal('event.original.postType', 'note'),

    isCarbonCopyCollapsed: true,

    showMenu: false,

    mouseEnter: function mouseEnter() {
      this.set('showMenu', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('showMenu', false);
    },

    ccRecipients: _ember['default'].computed('event.original.recipients.[]', function () {
      var recipients = this.get('event.original.recipients') || [];
      return recipients.filterBy('isCC').mapBy('identity.email').join(', ');
    }),

    actions: {
      expandCarbonCopy: function expandCarbonCopy() {
        this.toggleProperty('isCarbonCopyCollapsed');
      }
    }
  });
});
define('frontend-cp/components/ko-feed/item/link-to/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',

    href: computed('model.id', 'parent.id', function () {
      var model = this.get('model');
      var parent = this.get('parent');

      // there is detailed mesage only for email, so we don't need to show popup for notes.
      var isMessage = ['message'].indexOf(model.get('original.postType')) > -1;

      if (model && parent && isMessage) {
        var modelName = parent.constructor.modelName;

        switch (modelName) {
          case 'case':
            return '/agent/case/display/original/' + parent.get('id') + '/' + model.get('id');
        }
      }

      return null;
    })
  });
});
define("frontend-cp/components/ko-feed/item/link-to/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/link-to/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "ko-link-to-message ko-feed_item__title--small");
          dom.setAttribute(el1, "onclick", "window.open(this.href, '', 'width=800, height=500');return false;");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'href');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "href", ["loc", [null, [2, 13], [2, 17]]]]]]], ["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/link-to/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-link-to-message ko-feed_item__title--small");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [6, 62], [6, 71]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/link-to/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "href", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-feed/item/menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onReplyWithQuote: null,
    onReplyToPost: null,
    showMenu: false,
    canReplyToPost: false,

    // HTML
    classNameBindings: ['showMenu::u-hidden'],
    tagName: 'ul',
    classNames: ['list-inline', 'ko-feed_item_menu']
  });
});
define("frontend-cp/components/ko-feed/item/menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "ko-feed-item_menu__item i-reply i-color-grey--dark");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["get", "onReplyToPost", ["loc", [null, [2, 14], [2, 27]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-feed-item_menu__item i-quote i-color-grey--dark");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element1, 'onclick');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "canReplyToPost", ["loc", [null, [1, 6], [1, 20]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["attribute", "onclick", ["get", "onReplyWithQuote", ["loc", [null, [4, 14], [4, 30]]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-feed/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-feed_item__image");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "event.creator.avatar", ["loc", [null, [4, 54], [4, 74]]]]], [], []], "size", "medium"], ["loc", [null, [4, 35], [4, 90]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 13,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "moment-from-now", [["get", "event.createdAt", ["loc", [null, [12, 26], [12, 41]]]]], [], ["loc", [null, [12, 8], [12, 43]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("From:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element4, 'title');
            morphs[1] = dom.createMorphAt(element4, 2, 2);
            return morphs;
          },
          statements: [["attribute", "title", ["get", "event.original.mailbox.address", ["loc", [null, [21, 20], [21, 50]]]]], ["content", "event.identity.email", ["loc", [null, [21, 66], [21, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createElement("b");
            var el3 = dom.createTextNode("CC:");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element3, 'title');
            morphs[1] = dom.createElementMorph(element3);
            morphs[2] = dom.createMorphAt(element3, 2, 2);
            return morphs;
          },
          statements: [["attribute", "title", ["get", "ccRecipients", ["loc", [null, [25, 50], [25, 62]]]]], ["element", "action", ["expandCarbonCopy"], [], ["loc", [null, [25, 12], [25, 41]]]], ["content", "ccRecipients", ["loc", [null, [25, 76], [25, 92]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element5, 'class');
          morphs[1] = dom.createMorphAt(element5, 1, 1);
          morphs[2] = dom.createMorphAt(element5, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-feed_item__cc ", ["subexpr", "if", [["get", "isCarbonCopyCollapsed", ["loc", [null, [19, 36], [19, 57]]]], "ko-feed_item__cc--collapsed"], [], ["loc", [null, [19, 31], [19, 89]]]]]]], ["block", "if", [["get", "event.original.mailbox.address", ["loc", [null, [20, 10], [20, 40]]]]], [], 0, null, ["loc", [null, [20, 4], [22, 11]]]], ["block", "if", [["get", "ccRecipients", ["loc", [null, [24, 10], [24, 22]]]]], [], 1, null, ["loc", [null, [24, 4], [26, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 42,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-feed_item__attachment");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("img");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode(" ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("br");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-feed_item__attachment-name");
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-feed_item__attachment-size");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(element0, [1]);
            var element2 = dom.childAt(element0, [5, 1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element1, 'src');
            morphs[1] = dom.createAttrMorph(element2, 'href');
            morphs[2] = dom.createMorphAt(element2, 0, 0);
            morphs[3] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "attachment.thumbnails.firstObject.url", ["loc", [null, [36, 16], [36, 53]]]], "&_session_id=", ["get", "sessionService.sessionId", ["loc", [null, [36, 70], [36, 94]]]]]]], ["attribute", "href", ["concat", [["get", "attachment.urlDownload", ["loc", [null, [38, 17], [38, 39]]]], "?_session_id=", ["get", "sessionService.sessionId", ["loc", [null, [38, 56], [38, 80]]]]]]], ["content", "attachment.name", ["loc", [null, [38, 84], [38, 103]]]], ["inline", "ko-file-size", [], ["size", ["subexpr", "@mut", [["get", "attachment.size", ["loc", [null, [40, 67], [40, 82]]]]], [], []]], ["loc", [null, [40, 47], [40, 84]]]]],
          locals: ["attachment"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "event.attachments", ["loc", [null, [34, 10], [34, 27]]]]], [], 0, null, ["loc", [null, [34, 2], [42, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 0
            },
            "end": {
              "line": 49,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-feed/item/menu", [], ["showMenu", ["subexpr", "@mut", [["get", "showMenu", ["loc", [null, [45, 31], [45, 39]]]]], [], []], "canReplyToPost", ["subexpr", "@mut", [["get", "canReplyToPost", ["loc", [null, [46, 19], [46, 33]]]]], [], []], "onReplyWithQuote", ["subexpr", "action", [["get", "onReplyWithQuote", ["loc", [null, [47, 29], [47, 45]]]], ["get", "event", ["loc", [null, [47, 46], [47, 51]]]]], [], ["loc", [null, [47, 21], [47, 52]]]], "onReplyToPost", ["subexpr", "action", [["get", "onReplyToPost", ["loc", [null, [48, 26], [48, 39]]]], ["get", "event", ["loc", [null, [48, 40], [48, 45]]]]], [], ["loc", [null, [48, 18], [48, 46]]]]], ["loc", [null, [45, 2], [48, 48]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feed/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__border");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__title");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-feed_item__title--small");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("span");
        dom.setAttribute(el3, "class", "ko-feed_item__time-ago");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-feed_item__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [4]);
        var element7 = dom.childAt(element6, [2]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element6, 0, 0);
        morphs[2] = dom.createMorphAt(element7, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element7, [3]), 1, 1);
        morphs[4] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[6] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 11, 11, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "event.creator.avatar", ["loc", [null, [3, 6], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 7]]]], ["content", "event.creator.fullName", ["loc", [null, [7, 33], [7, 59]]]], ["inline", "if", [["get", "isNote", ["loc", [null, [9, 9], [9, 15]]]], ["subexpr", "t", ["feed.added"], [], ["loc", [null, [9, 16], [9, 32]]]], ["subexpr", "t", ["feed.replied"], [], ["loc", [null, [9, 33], [9, 51]]]]], [], ["loc", [null, [9, 4], [9, 53]]]], ["block", "ko-feed/item/link-to", [], ["model", ["subexpr", "@mut", [["get", "event", ["loc", [null, [11, 36], [11, 41]]]]], [], []], "parent", ["subexpr", "@mut", [["get", "parent", ["loc", [null, [11, 49], [11, 55]]]]], [], []]], 1, null, ["loc", [null, [11, 6], [13, 31]]]], ["block", "if", [["subexpr", "or", [["get", "event.original.mailbox.address", ["loc", [null, [18, 10], [18, 40]]]], ["get", "ccRecipients", ["loc", [null, [18, 41], [18, 53]]]]], [], ["loc", [null, [18, 6], [18, 54]]]]], [], 2, null, ["loc", [null, [18, 0], [28, 7]]]], ["inline", "ko-breaklines", [["subexpr", "linkify", [["get", "event.contents", ["loc", [null, [31, 27], [31, 41]]]], "_blank"], [], ["loc", [null, [31, 18], [31, 51]]]]], [], ["loc", [null, [31, 2], [31, 53]]]], ["block", "if", [["get", "event.attachments", ["loc", [null, [33, 6], [33, 23]]]]], [], 3, null, ["loc", [null, [33, 0], [43, 7]]]], ["block", "if", [["subexpr", "not", [["get", "isReplyDisabled", ["loc", [null, [44, 11], [44, 26]]]]], [], ["loc", [null, [44, 6], [44, 27]]]]], [], 4, null, ["loc", [null, [44, 0], [49, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/components/ko-feedback/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-feedback', 'ko-info-bar_item', 'ko-info-bar_item--no-hover', 'u-no-bottom-border'],
    classNameBindings: ['separator::ko-info-bar_item--no-separator'],
    separator: false
  });
});
define("frontend-cp/components/ko-feedback/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 6
                },
                "end": {
                  "line": 8,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-feedback__metric t-good i-happy-outline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-feedback__metric t-bad i-sad-outline");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-feedback__caption");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "feedbackItem.score", ["loc", [null, [6, 16], [6, 34]]]], "GOOD"], [], ["loc", [null, [6, 12], [6, 42]]]]], [], 0, 1, ["loc", [null, [6, 6], [10, 13]]]], ["inline", "ago", [["get", "feedbackItem.createdAt", ["loc", [null, [11, 46], [11, 68]]]]], [], ["loc", [null, [11, 40], [11, 70]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 13,
              "column": 8
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/3");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.case", ["get", "feedbackItem.case", ["loc", [null, [5, 42], [5, 59]]]]], [], 0, null, ["loc", [null, [5, 4], [12, 16]]]]],
        locals: ["feedbackItem"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["users.no_feedback_available"], [], ["loc", [null, [17, 2], [17, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-feedback/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 31], [1, 40]]]], ["block", "each", [["get", "feedback", ["loc", [null, [4, 10], [4, 18]]]]], [], 0, null, ["loc", [null, [4, 2], [13, 17]]]], ["block", "if", [["subexpr", "not", [["get", "feedback.length", ["loc", [null, [16, 11], [16, 26]]]]], [], ["loc", [null, [16, 6], [16, 27]]]]], [], 1, null, ["loc", [null, [16, 0], [18, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-file-field/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'input',
    attributeBindings: ['type', 'multiple', 'disabled'],
    type: 'file',
    multiple: true,
    change: function change() {
      var files = this.element.files;
      this.sendAction('on-change', files);
    }
  });
});
define("frontend-cp/components/ko-file-field/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-file-size/component', ['exports', 'ember'], function (exports, _ember) {

  function readableFilesize(bytes, intl) {
    // this is correct for kilo, 1024 is for kibi
    var thresh = 1000;

    if (Math.abs(bytes) < thresh) {
      return {
        size: String(bytes),
        unit: intl.findTranslationByKey('generic.units.B')
      };
    }
    var units = [intl.findTranslationByKey('generic.units.kB'), intl.findTranslationByKey('generic.units.MB'), intl.findTranslationByKey('generic.units.GB')];
    var u = -1;
    do {
      bytes /= thresh;
      ++u;
    } while (Math.abs(bytes) >= thresh && u < units.length - 1);
    return {
      size: String(bytes.toFixed(2)),
      unit: units[u]
    };
  }

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    size: null,
    intl: _ember['default'].inject.service(),

    options: _ember['default'].computed('size', function () {
      return readableFilesize(this.get('size'), this.get('intl'));
    })
  });
});
define("frontend-cp/components/ko-file-size/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 60
          }
        },
        "moduleName": "frontend-cp/components/ko-file-size/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["generic.filesize"], ["size", ["subexpr", "@mut", [["get", "options.size", ["loc", [null, [1, 28], [1, 40]]]]], [], []], "unit", ["subexpr", "@mut", [["get", "options.unit", ["loc", [null, [1, 46], [1, 58]]]]], [], []]], ["loc", [null, [1, 0], [1, 60]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-file-upload/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    uploadService: _ember['default'].inject.service('fileUpload'),
    intlService: _ember['default'].inject.service('intl'),
    notificationService: _ember['default'].inject.service('notification'),
    uploads: null,
    previousErrorCount: 0,

    classNames: ['ko-file-upload'],
    classNameBindings: ['empty:u-hidden'],
    empty: _ember['default'].computed.empty('uploads'),

    uploadStatus: _ember['default'].observer('uploads.@each.status', function () {
      var errorCount = this.get('uploads').filterBy('status', 'ERROR').length;
      if (errorCount > this.get('previousErrorCount')) {
        this.get('notificationService').add({
          type: 'error',
          title: this.get('intlService').findTranslationByKey('generic.uploads.failed'),
          autodismiss: true,
          dismissable: false
        });
      }
      this.set('previousErrorCount', errorCount);
    }),

    uploadFile: function uploadFile(file) {
      var upload = this.get('uploadService').uploadFile(file);
      this.get('uploads').pushObject(upload);
    },

    actions: {
      uploadFiles: function uploadFiles(files) {
        var _this = this;

        files.forEach(function (file) {
          return _this.uploadFile(file);
        });
      }
    }
  });
});
define("frontend-cp/components/ko-file-upload/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-file-upload/upload-item", [], ["upload", ["subexpr", "@mut", [["get", "upload", ["loc", [null, [4, 42], [4, 48]]]]], [], []], "onCancel", ["subexpr", "@mut", [["get", "onCancel", ["loc", [null, [4, 58], [4, 66]]]]], [], []]], ["loc", [null, [4, 6], [4, 68]]]]],
        locals: ["upload"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("output");
        dom.setAttribute(el1, "class", "files-list");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        dom.setAttribute(el2, "class", "list-bare");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "uploads", ["loc", [null, [3, 12], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 4], [5, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-file-upload/upload-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    sessionService: _ember['default'].inject.service('session'),
    tagName: 'li',
    classNames: ['upload-item'],
    classNameBindings: ['success', 'inProgress', 'error', 'cancelled:u-hidden'],
    upload: null,

    inProgress: _ember['default'].computed.equal('upload.status', 'PROGRESS'),
    success: _ember['default'].computed.equal('upload.status', 'SUCCESS'),
    cancelled: _ember['default'].computed.equal('upload.status', 'CANCELLED'),
    error: _ember['default'].computed.equal('upload.status', 'ERROR'),

    uploadProgress: _ember['default'].computed('upload.progress', function () {
      return Math.round(this.get('upload.progress'));
    }),

    uploadUrl: _ember['default'].computed('upload.contentUrl', function () {
      return this.get('upload.contentUrl') + '?_session_id=' + this.get('sessionService.sessionId');
    }),

    actions: {
      cancel: function cancel() {
        this.get('upload').cancel();
        this.sendAction('onCancel', this.get('upload'));
      }
    }
  });
});
define("frontend-cp/components/ko-file-upload/upload-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "upload.name", ["loc", [null, [4, 4], [4, 19]]]], ["inline", "t", ["generic.uploads.toolarge"], [], ["loc", [null, [5, 4], [5, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "upload.name", ["loc", [null, [7, 4], [7, 19]]]], ["inline", "t", ["generic.uploads.unknown"], [], ["loc", [null, [8, 4], [8, 35]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "upload.error", ["loc", [null, [3, 12], [3, 24]]]], "TOO_LARGE"], [], ["loc", [null, [3, 8], [3, 37]]]]], [], 0, 1, ["loc", [null, [3, 2], [9, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "upload-item__name upload-item__name--is-progressing");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "t-good");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("%");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element2, 'onclick');
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [14, 57], [14, 76]]]]], ["content", "upload.name", ["loc", [null, [15, 68], [15, 83]]]], ["content", "uploadProgress", ["loc", [null, [16, 23], [16, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-cross-bold upload-item__action");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "upload-item__name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "upload-item__size");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          morphs[1] = dom.createAttrMorph(element1, 'href');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [5]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [20, 57], [20, 76]]]]], ["attribute", "href", ["concat", [["get", "uploadUrl", ["loc", [null, [21, 39], [21, 48]]]]]]], ["content", "upload.name", ["loc", [null, [21, 52], [21, 67]]]], ["inline", "ko-file-size", [], ["size", ["subexpr", "@mut", [["get", "upload.size", ["loc", [null, [22, 54], [22, 65]]]]], [], []]], ["loc", [null, [22, 34], [22, 67]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-file-upload/upload-item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [1, 10], [1, 23]]]], "ERROR"], [], ["loc", [null, [1, 6], [1, 32]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [13, 10], [13, 23]]]], "PROGRESS"], [], ["loc", [null, [13, 6], [13, 35]]]]], [], 1, null, ["loc", [null, [13, 0], [17, 7]]]], ["block", "if", [["subexpr", "eq", [["get", "upload.status", ["loc", [null, [19, 10], [19, 23]]]], "SUCCESS"], [], ["loc", [null, [19, 6], [19, 34]]]]], [], 2, null, ["loc", [null, [19, 0], [23, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-flag/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNameBindings: ['styles.flag']
  });
});
define("frontend-cp/components/ko-flag/styles", ["exports"], function (exports) {
  exports["default"] = {
    "flag": "_flag_ild85m",
    "image": "_image_ild85m",
    "body": "_body_ild85m"
  };
});
define("frontend-cp/components/ko-flag/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-flag/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "styles.image", ["loc", [null, [1, 14], [1, 26]]]]]]], ["content", "yield", ["loc", [null, [1, 30], [1, 39]]]], ["attribute", "class", ["concat", [["get", "styles.body", ["loc", [null, [2, 14], [2, 25]]]]]]], ["inline", "yield", [], ["to", "inverse"], ["loc", [null, [2, 29], [2, 51]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-form/buttons/component', ['exports', 'ember', 'frontend-cp/components/ko-form/component'], function (exports, _ember, _frontendCpComponentsKoFormComponent) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    submitLabel: null,
    cancelLabel: null,
    onCancel: null,
    onSubmit: null,

    koForm: _ember['default'].computed(function () {
      return this.nearestOfType(_frontendCpComponentsKoFormComponent['default']);
    }),

    isSubmitting: _ember['default'].computed.oneWay('koForm.isSubmitting')
  });
});
define("frontend-cp/components/ko-form/buttons/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 5,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-form_buttons__loader");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "ko-loader", ["loc", [null, [4, 43], [4, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 6
              },
              "end": {
                "line": 8,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "name", "cancel");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            morphs[1] = dom.createAttrMorph(element1, 'onclick');
            morphs[2] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["button t-small ", ["get", "cancelButtonClass", ["loc", [null, [7, 54], [7, 71]]]]]]], ["attribute", "onclick", ["get", "onCancel", ["loc", [null, [7, 99], [7, 107]]]]], ["content", "cancelLabel", ["loc", [null, [7, 110], [7, 125]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 4
            },
            "end": {
              "line": 9,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "onCancel", ["loc", [null, [6, 12], [6, 20]]]]], [], 0, null, ["loc", [null, [6, 6], [8, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "name", "submit");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'type');
          morphs[1] = dom.createAttrMorph(element0, 'class');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "type", ["subexpr", "if", [["get", "onSubmit", ["loc", [null, [11, 24], [11, 32]]]], "button", "submit"], [], ["loc", [null, [11, 19], [11, 52]]]]], ["attribute", "class", ["concat", ["button button--primary ", ["get", "submitClass", ["loc", [null, [11, 85], [11, 96]]]]]]], ["attribute", "onclick", ["get", "onSubmit", ["loc", [null, [11, 124], [11, 132]]]]], ["content", "submitLabel", ["loc", [null, [11, 135], [11, 150]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-form/buttons/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1 t-right");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        return morphs;
      },
      statements: [["block", "if", [["get", "isSubmitting", ["loc", [null, [3, 10], [3, 22]]]]], [], 0, 1, ["loc", [null, [3, 4], [9, 11]]]], ["block", "if", [["get", "submitLabel", ["loc", [null, [10, 10], [10, 21]]]]], [], 2, null, ["loc", [null, [10, 4], [12, 11]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-form/component', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  var set = _ember['default'].set;
  exports['default'] = _ember['default'].Component.extend({
    // Params
    fields: _ember['default'].Object.create({}), // it's ok for this to be in the class definition since this object
    // is never mutated
    onSubmit: function onSubmit() {},
    onError: function onError() {},
    onSuccess: function onSuccess() {},
    onCancel: function onCancel() {},

    isSubmitting: false,

    notificationService: _ember['default'].inject.service('notification'),
    intlService: _ember['default'].inject.service('intl'),

    tagName: 'form',
    classNameBindings: ['isValid:ko-form--is-valid', 'isSubmitting:ko-form--is-submitting'],

    fieldsArray: _ember['default'].computed('fields.[]', function () {
      var fields = this.get('fields');
      return Object.keys(fields).map(function (key) {
        return fields[key];
      });
    }),

    fieldValuesArray: _ember['default'].computed('fieldsArray.@each.value', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.value;
      });
    }),

    fieldValidatorsArray: _ember['default'].computed('fieldsArray.@each.validator', function () {
      return this.get('fieldsArray').map(function (field) {
        return field.validator;
      });
    }),

    isFormValid: _ember['default'].computed('fieldValuesArray.[]', 'fieldValidatorsArray.[]', function () {
      // TODO: Fix flaky Ember watching
      this.get('fieldValuesArray');
      this.get('fieldValidatorsArray');

      var fields = this.get('fields');
      return getAreFieldsValid(fields);

      function getAreFieldsValid(fields) {
        return Object.keys(fields).every(function (key) {
          var field = fields[key];
          return isFieldValid(field.value, field.validator);
        });
      }

      function isFieldValid(value, validator) {
        if (!validator || !value) {
          return true;
        }
        var errors = validator(value);
        var hasErrors = errors && (typeof errors === 'string' || Array.isArray(errors) && errors.length > 0);
        return !hasErrors;
      }
    }),

    isSubmitDisabled: _ember['default'].computed('isFormValid', 'isSubmitting', function () {
      return !this.get('isFormValid') || this.get('isSubmitting');
    }),

    submit: function submit(e) {
      var _this = this;

      e.preventDefault();
      e.stopPropagation();
      if (!this.get('isFormValid')) {
        return false;
      }
      if (this.get('isSubmitting')) {
        return false;
      }
      var fields = this.get('fields');

      var fieldValues = Object.keys(fields).reduce(function (fieldValues, key) {
        fieldValues[key] = fields[key].value;
        return fieldValues;
      }, {});
      this.set('isSubmitting', true);
      return this.attrs.onSubmit(fieldValues).then(function (response) {
        if (_this.attrs.onSuccess) {
          _this.attrs.onSuccess(response);
        }
        return response;
      })['catch'](function (error) {
        Object.keys(fields).forEach(function (field) {
          set(get(fields, field), 'errors', []);
        });
        if (error && error.errors && error.errors.length) {
          error.errors.filter(function (errorData) {
            return Boolean(errorData.parameter);
          }).forEach(function (errorData) {
            var fieldName = errorData.parameter;
            var relatedField = get(fields, fieldName);
            if (relatedField) {
              relatedField.errors.pushObject(_ember['default'].Object.create({
                message: errorData.message
              }));
            }
          });
        }
        if (_this.attrs.onError) {
          _this.attrs.onError(error);
        }
      })['finally'](function () {
        _this.set('isSubmitting', false);
      });
    },

    actions: {
      cancel: function cancel() {
        this.attrs.onCancel();
      }
    }
  });
});
define('frontend-cp/components/ko-form/field/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    field: null,
    nogap: false,

    // HTML
    classNames: ['ko-form_field'],
    classNameBindings: ['nogap::ko-form_field--gap'],

    tagName: 'label',

    shouldShowValidationErrors: false,

    validationErrors: _ember['default'].computed('field.value', 'field.validator', function () {
      var value = this.get('field.value');
      var validator = this.get('field.validator');
      if (!validator || !value) {
        return null;
      }
      var errors = validator(value);
      if (errors && !Array.isArray(errors)) {
        errors = [errors];
      }
      return errors;
    }),

    focusOut: function focusOut(event) {
      var isFocusStillInsideElement = _ember['default'].$.contains(this.$()[0], event.relatedTarget);
      if (isFocusStillInsideElement) {
        return;
      }
      this.set('shouldShowValidationErrors', true);
    }
  });
});
define('frontend-cp/components/ko-form/field/errors/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // params
    errors: null
  });
});
define("frontend-cp/components/ko-form/field/errors/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-form_field_errors__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [2, 39], [2, 56]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/errors/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "errors", ["loc", [null, [1, 8], [1, 14]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-form/field/help/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    tagName: 'p',
    classNames: ['ko-form_field_help']
  });
});
define("frontend-cp/components/ko-form/field/help/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/help/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-form/field/label/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    tagName: 'p',
    classNames: ['ko-form_field_label']
  });
});
define("frontend-cp/components/ko-form/field/label/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/label/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-form/field/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 3,
                "column": 84
              }
            },
            "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createElement("p");
            dom.setAttribute(el1, "class", "ko-form_field__error");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
            return morphs;
          },
          statements: [["content", "error", ["loc", [null, [3, 71], [3, 80]]]]],
          locals: ["error"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "each", [["get", "validationErrors", ["loc", [null, [3, 10], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 2], [3, 93]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 86
            }
          },
          "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-form_field__error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "error.message", ["loc", [null, [5, 65], [5, 82]]]]],
        locals: ["error"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 95
          }
        },
        "moduleName": "frontend-cp/components/ko-form/field/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]], ["block", "if", [["get", "shouldShowValidationErrors", ["loc", [null, [2, 6], [2, 32]]]]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]], ["block", "each", [["get", "field.errors", ["loc", [null, [5, 8], [5, 20]]]]], [], 1, null, ["loc", [null, [5, 0], [5, 95]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("frontend-cp/components/ko-form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 34
          }
        },
        "moduleName": "frontend-cp/components/ko-form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "isFormValid", ["loc", [null, [1, 8], [1, 19]]]], ["get", "isSubmitting", ["loc", [null, [1, 20], [1, 32]]]]], [], ["loc", [null, [1, 0], [1, 34]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-grid-picker/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Component.extend({

    // Attributes
    initialGrid: null,
    legend: null,
    classNames: ['ko-grid-picker'],

    // State
    grid: null,
    startRow: null,
    startCol: null,
    prevRow: null,
    prevCol: null,
    rowCount: null,
    colCount: null,

    isSelecting: false,

    gridCopy: null,

    initGrid: _ember['default'].on('init', function () {
      var initialGrid = this.get('initialGrid');
      this.set('rowCount', initialGrid.get('length'));
      this.set('colCount', _npmLodash['default'].max(initialGrid.map(function (row) {
        return row.length;
      })));
      this.set('grid', this.getFreshGrid(initialGrid));
    }),

    cols: _ember['default'].computed('colCount', function () {
      return _npmLodash['default'].range(this.get('colCount'));
    }),

    displayLegend: _ember['default'].computed('legend.[]', function () {
      if (this.get('legend.length')) {
        return this.get('legend');
      } else {
        return this.get('cols');
      }
    }),

    getFreshGrid: function getFreshGrid(grid) {
      var _this = this;

      return _npmLodash['default'].range(this.get('rowCount')).map(function (index) {
        return _this.get('cols').map(function (hour) {
          return grid[index][hour];
        });
      });
    },

    toggleCell: function toggleCell(grid, row, col) {
      var isSelected = this.get('gridCopy')[row][col];
      grid[row][col] = !isSelected;
    },

    isPrevCell: function isPrevCell(row, col) {
      return row === this.get('prevRow') && col === this.get('prevCol');
    },

    mouseMove: function mouseMove(event) {
      var target = event.target;
      if (_ember['default'].isNone(target.dataset.row) || _ember['default'].isNone(target.dataset.col)) {
        return;
      }
      var row = parseInt(target.dataset.row, 10);
      var col = parseInt(target.dataset.col, 10);

      if (this.get('isSelecting') && !this.isPrevCell(row, col)) {
        this.highlightRegion(this.get('startRow'), this.get('startCol'), row, col);
        this.set('prevRow', row);
        this.set('prevCol', col);
      }
    },

    mouseUp: function mouseUp() {
      this.set('isSelecting', false);
      this.attrs.onRangeSelect(this.get('grid'));
    },

    mouseDown: function mouseDown(event) {
      event.preventDefault();
      var target = event.target;
      if (_ember['default'].isNone(target.dataset.row) || _ember['default'].isNone(target.dataset.col)) {
        return;
      }

      var row = parseInt(target.dataset.row, 10);
      var col = parseInt(target.dataset.col, 10);

      this.set('gridCopy', this.getFreshGrid(this.get('grid')));

      this.set('isSelecting', true);
      this.set('startRow', row);
      this.set('startCol', col);
      this.set('prevRow', row);
      this.set('prevCol', col);

      this.highlightRegion(row, col, row, col);
    },

    highlightRegion: function highlightRegion(startRow, startCol, endRow, endCol) {
      if (startRow > endRow) {
        var _ref = [endRow, startRow];
        startRow = _ref[0];
        endRow = _ref[1];
      }
      if (startCol > endCol) {
        var _ref2 = [endCol, startCol];
        startCol = _ref2[0];
        endCol = _ref2[1];
      }

      var grid = this.getFreshGrid(this.get('gridCopy'));

      for (var i = startRow; i <= endRow; i++) {
        for (var j = startCol; j <= endCol; j++) {
          this.toggleCell(grid, i, j);
        }
      }
      this.set('grid', grid);
    }
  });
});
define("frontend-cp/components/ko-grid-picker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-grid-picker/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'data-col');
            morphs[2] = dom.createAttrMorph(element0, 'data-row');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-grid-picker__cell ", ["subexpr", "if", [["get", "col", ["loc", [null, [9, 44], [9, 47]]]], "selected"], [], ["loc", [null, [9, 39], [9, 60]]]]]]], ["attribute", "data-col", ["concat", [["get", "colIndex", ["loc", [null, [10, 22], [10, 30]]]]]]], ["attribute", "data-row", ["concat", [["get", "rowIndex", ["loc", [null, [11, 22], [11, 30]]]]]]]],
          locals: ["col", "colIndex"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-grid-picker/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-grid-picker__row");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "row", ["loc", [null, [8, 12], [8, 15]]]]], [], 0, null, ["loc", [null, [8, 4], [13, 13]]]]],
        locals: ["row", "rowIndex"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 22,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-grid-picker/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-grid-picker__legend-cell");
          var el2 = dom.createTextNode("\n       ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [20, 7], [20, 16]]]]],
        locals: ["label"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-grid-picker/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-grid-picker__titles");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-grid-picker__grid");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-grid-picker__legend");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]], ["block", "each", [["get", "grid", ["loc", [null, [6, 10], [6, 14]]]]], [], 0, null, ["loc", [null, [6, 2], [15, 11]]]], ["block", "each", [["get", "displayLegend", ["loc", [null, [18, 12], [18, 25]]]]], [], 1, null, ["loc", [null, [18, 4], [22, 13]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-identities/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  var dasherize = _ember['default'].String.dasherize;
  exports['default'] = _ember['default'].Component.extend({
    store: service(),
    intl: service(),

    classNames: ['ko-identities', 'ko-info-bar_item', 'ko-info-bar_item--no-hover'],
    classNameBindings: ['separator::ko-info-bar_item--no-separator'],
    separator: false,

    notification: service('error-handler/notification-strategy'),
    notificationService: service('notification'),

    // CPs
    emailIdentities: computed.filterBy('parent.emails', 'isNew', false),
    twitterIdentities: computed.filterBy('parent.twitter', 'isNew', false),
    phoneIdentities: computed.filterBy('parent.phones', 'isNew', false),
    facebookIdentities: computed.filterBy('parent.facebook', 'isNew', false),

    // Actions
    actions: {
      makePrimaryIdentity: function makePrimaryIdentity(identity, dropdown) {
        var _this = this;

        var identities = undefined;
        if (identity.constructor.modelName === 'identity-email') {
          identities = this.get('parent.emails');
        } else if (identity.constructor.modelName === 'identity-twitter') {
          identities = this.get('parent.twitter');
        } else if (identity.constructor.modelName === 'identity-phone') {
          identities = this.get('parent.phones');
        } else if (identity.constructor.modelName === 'identity-facebook') {
          identities = this.get('parent.facebook');
        }

        identity.set('isPrimary', true);
        dropdown.actions.close();
        identity.save().then(function (identity) {
          return _this._handleMarkAsPrimaryResponse(identities, identity);
        })['catch'](function () {
          return dropdown.actions.open();
        });
      },

      validateIdentity: function validateIdentity(identity, dropdown) {
        dropdown.actions.close();
        if (identity.constructor.modelName === 'identity-email') {
          var adapter = this.container.lookup('adapter:application');
          var url = adapter.namespace + '/identities/emails/' + identity.get('id') + '/send_verification_email';
          adapter.ajax(url, 'PUT')['catch'](function () {
            return dropdown.actions.open();
          });
        }
      },

      // sendValidationEmail(identity, dropdown) {
      //   dropdown.actions.close();
      //   const adapter = this.container.lookup('adapter:application');
      //   adapter.ajax(`${adapter.namespace}/identities/emails/${identity.get('id')}/send_validation_email`, 'POST').catch(() => dropdown.actions.open());
      // },

      removeIdentity: function removeIdentity(identity, dropdown) {
        var _this2 = this;

        dropdown.actions.close();
        var message = this.get('intl').findTranslationByKey('generic.identities.confirm_remove');
        if (identity.get('isNew') || confirm(message)) {
          identity.destroyRecord().then(function () {
            _this2.get('notificationService').success(_this2.get('intl').findTranslationByKey('generic.identities.removed.success_message'));
          })['catch'](function () {
            return dropdown.actions.open();
          });
        }
      },

      addEmail: function addEmail(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-email'));
      },

      addTwitter: function addTwitter(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-twitter'));
      },

      addPhone: function addPhone(dropdown) {
        dropdown.actions.close();
        this.set('newIdentity', this.get('store').createRecord('identity-phone'));
      },

      saveIdentity: function saveIdentity(identity) {
        var _this3 = this;

        identity.set(this.get('parent').constructor.modelName, this.get('parent'));
        return identity.save().then(function () {
          _this3.get('notificationService').success(_this3.get('intl').findTranslationByKey('generic.identities.added.success_message'));
          return _this3.set('newIdentity', null);
        }, function (e) {
          identity.set('parent', null);
          throw e;
        });
      },

      removeNewIdentity: function removeNewIdentity() {
        var identity = this.get('newIdentity');
        this.send('removeIdentity', identity);
        this.set('newIdentity', null);
      }
    },

    // Marking an identity as primary means that all other identities of the same type for the same
    // user have to me marked as non primary.
    //
    // Presumably, the backend already takes care of that, but the payload only returns the data of
    // the identity being modified, so the changes in other identities are implicit.
    //
    // Due to this, we need to push to the store the updates in the other identitities. That way
    // those identies are modified without making them as dirty for ember-data.
    //
    _handleMarkAsPrimaryResponse: function _handleMarkAsPrimaryResponse(identities, updatedIdentity) {
      var store = this.get('store');

      identities.forEach(function (identity) {
        if (updatedIdentity !== identity) {
          var nonPrimaryPayload = {
            status: 200,
            data: {
              id: identity.get('id'),
              type: dasherize(updatedIdentity.constructor.modelName),
              attributes: {
                isPrimary: false
              }
            }
          };

          store.push(nonPrimaryPayload);
        }
      });
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/components/ko-identities/form/component', ['exports', 'ember', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpUtilsFormatValidations) {
  var computed = _ember['default'].computed;
  var isBlank = _ember['default'].isBlank;
  var inject = _ember['default'].inject;

  var placeholders = {
    'identity-email': 'generic.identities.placeholders.email',
    'identity-twitter': 'generic.identities.placeholders.twitter',
    'identity-phone': 'generic.identities.placeholders.phone'
  };
  var inputTypes = {
    'identity-email': 'email',
    'identity-twitter': 'text',
    'identity-phone': 'tel'
  };

  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-identities_form'],
    intl: inject.service(),
    // CPs
    placeholder: computed('identity', function () {
      return placeholders[this.get('identity.constructor.modelName')];
    }),

    inputType: computed('identity', function () {
      return inputTypes[this.get('identity.constructor.modelName')];
    }),

    didInsertElement: function didInsertElement() {
      this.$('input').focus();
    },

    // Actions
    actions: {
      save: function save() {
        var identity = this.get('identity');
        identity.get('errors').clear();
        if (identity.constructor.modelName === 'identity-email') {
          return this.saveEmail(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-twitter') {
          return this.saveTwitter(this.get('mainField').trim());
        } else if (identity.constructor.modelName === 'identity-phone') {
          return this.savePhone(this.get('mainField').trim());
        }
      },

      cancel: function cancel(e) {
        e.preventDefault();
        this.attrs.cancel();
      }
    },

    // Methods
    saveEmail: function saveEmail(email) {
      var identity = this.get('identity');
      if ((0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email)) {
        identity.set('email', email);
        return this.attrs.save(identity);
      } else {
        var message = this.get('intl').findTranslationByKey('generic.identities.errors.invalid_email_format');
        identity.get('errors').add('email', message);
        return _ember['default'].RSVP.Promise.reject();
      }
    },

    saveTwitter: function saveTwitter(screenName) {
      var identity = this.get('identity');
      if (screenName.indexOf('@') !== 0) {
        screenName = '@' + screenName; // Add @sign for validation
      }
      if ((0, _frontendCpUtilsFormatValidations.validateTwitterHandleFormat)(screenName)) {
        identity.set('screenName', screenName.slice(1)); // Remove @ before save
        return this.attrs.save(identity);
      } else {
        var message = this.get('intl').findTranslationByKey('generic.identities.errors.invalid_twitter_handle_format');
        identity.get('errors').add('screenName', message);
        return _ember['default'].RSVP.Promise.reject();
      }
    },

    savePhone: function savePhone(number) {
      var sanitizedNumber = number.replace(/[^0-9+]/g, '');
      if (isBlank(sanitizedNumber)) {
        return _ember['default'].RSVP.Promise.reject();
      }
      var identity = this.get('identity');
      identity.set('number', sanitizedNumber);
      return this.attrs.save(identity);
    }
  });
});
define("frontend-cp/components/ko-identities/form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "u-mt-");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "submit");
          dom.setAttribute(el2, "class", "button button--default");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "button");
          dom.setAttribute(el2, "class", "button-naked t-bad");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [5]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(8);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createAttrMorph(element1, 'disabled');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element0, 3, 3);
          morphs[5] = dom.createAttrMorph(element2, 'onclick');
          morphs[6] = dom.createAttrMorph(element2, 'disabled');
          morphs[7] = dom.createMorphAt(element2, 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "inputType", ["loc", [null, [2, 15], [2, 24]]]]], [], []], "value", ["subexpr", "@mut", [["get", "mainField", ["loc", [null, [2, 31], [2, 40]]]]], [], []], "placeholder", ["subexpr", "t", [["get", "placeholder", ["loc", [null, [2, 56], [2, 67]]]]], [], ["loc", [null, [2, 53], [2, 68]]]], "disabled", ["subexpr", "@mut", [["get", "identity.isSaving", ["loc", [null, [2, 78], [2, 95]]]]], [], []], "class", "input-text--full"], ["loc", [null, [2, 2], [2, 122]]]], ["inline", "ko-form/field/errors", [], ["errors", ["subexpr", "@mut", [["get", "identity.errors", ["loc", [null, [3, 32], [3, 47]]]]], [], []]], ["loc", [null, [3, 2], [3, 49]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [5, 68], [5, 78]]]]], ["inline", "t", ["generic.save"], [], ["loc", [null, [6, 6], [6, 26]]]], ["inline", "t", ["generic.or"], [], ["loc", [null, [8, 4], [8, 22]]]], ["attribute", "onclick", ["subexpr", "action", ["cancel"], [], ["loc", [null, [9, 34], [9, 53]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [9, 92], [9, 102]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [10, 6], [10, 28]]]]],
        locals: ["_", "isDisabled"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-form", [], ["onSubmit", ["subexpr", "action", ["save"], [], ["loc", [null, [1, 20], [1, 35]]]]], 0, null, ["loc", [null, [1, 0], [13, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-identities/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 16
                  },
                  "end": {
                    "line": 15,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element17 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element17, 'onclick');
                morphs[1] = dom.createMorphAt(element17, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "emailIdentity", ["loc", [null, [12, 89], [12, 102]]]], ["get", "dropdown", ["loc", [null, [12, 103], [12, 111]]]]], [], ["loc", [null, [12, 63], [12, 113]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [13, 20], [13, 62]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 16
                  },
                  "end": {
                    "line": 20,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element16 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element16, 'onclick');
                morphs[1] = dom.createMorphAt(element16, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "emailIdentity", ["loc", [null, [17, 94], [17, 107]]]], ["get", "dropdown", ["loc", [null, [17, 108], [17, 116]]]]], [], ["loc", [null, [17, 63], [17, 118]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [18, 20], [18, 59]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 16
                  },
                  "end": {
                    "line": 30,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element15 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element15, 'onclick');
                morphs[1] = dom.createMorphAt(element15, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["validateIdentity", ["get", "emailIdentity", ["loc", [null, [22, 91], [22, 104]]]], ["get", "dropdown", ["loc", [null, [22, 105], [22, 113]]]]], [], ["loc", [null, [22, 63], [22, 115]]]]], ["inline", "t", ["generic.identities.validate_identity"], [], ["loc", [null, [23, 20], [23, 64]]]]],
              locals: [],
              templates: []
            };
          })();
          var child3 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 16
                  },
                  "end": {
                    "line": 33,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [32, 18], [32, 58]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 14
                },
                "end": {
                  "line": 34,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "emailIdentity.canBeRemoved", ["loc", [null, [11, 22], [11, 48]]]]], [], 0, null, ["loc", [null, [11, 16], [15, 23]]]], ["block", "if", [["get", "emailIdentity.canBePrimarized", ["loc", [null, [16, 22], [16, 51]]]]], [], 1, null, ["loc", [null, [16, 16], [20, 23]]]], ["block", "if", [["get", "emailIdentity.canBeValidated", ["loc", [null, [21, 22], [21, 50]]]]], [], 2, null, ["loc", [null, [21, 16], [30, 23]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "emailIdentity.email", ["loc", [null, [31, 91], [31, 110]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [31, 119], [31, 141]]]]], [], []]], 3, null, ["loc", [null, [31, 16], [33, 32]]]]],
            locals: ["dropdown"],
            templates: [child0, child1, child2, child3]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 18
                  },
                  "end": {
                    "line": 39,
                    "column": 80
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createElement("i");
                dom.setAttribute(el1, "class", "i-caution");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 14
                },
                "end": {
                  "line": 42,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-identities__list-item");
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                  ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1]);
              var element14 = dom.childAt(element13, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element14, 'title');
              morphs[1] = dom.createMorphAt(element14, 1, 1);
              morphs[2] = dom.createMorphAt(element14, 3, 3);
              morphs[3] = dom.createMorphAt(element13, 3, 3);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["get", "emailIdentity.email", ["loc", [null, [36, 65], [36, 84]]]]]]], ["content", "emailIdentity.email", ["loc", [null, [37, 20], [37, 43]]]], ["inline", "if", [["get", "emailIdentity.isPrimary", ["loc", [null, [37, 49], [37, 72]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [37, 73], [37, 113]]]]], [], ["loc", [null, [37, 44], [37, 115]]]], ["block", "unless", [["get", "emailIdentity.isValidated", ["loc", [null, [39, 28], [39, 53]]]]], [], 0, null, ["loc", [null, [39, 18], [39, 91]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 10
              },
              "end": {
                "line": 44,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [10, 14], [42, 33]]]]],
          locals: ["emailIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--emails");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.email_identities_title"], [], ["loc", [null, [6, 11], [6, 60]]]], ["block", "each", [["get", "emailIdentities", ["loc", [null, [8, 18], [8, 33]]]]], [], 0, null, ["loc", [null, [8, 10], [44, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 18
                  },
                  "end": {
                    "line": 55,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element11 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element11, 'onclick');
                morphs[1] = dom.createMorphAt(element11, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "twitterIdentity", ["loc", [null, [54, 91], [54, 106]]]], ["get", "dropdown", ["loc", [null, [54, 107], [54, 115]]]]], [], ["loc", [null, [54, 65], [54, 117]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [54, 118], [54, 160]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 56,
                    "column": 18
                  },
                  "end": {
                    "line": 58,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "identities-dropdown_item");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element10, 'onclick');
                morphs[1] = dom.createMorphAt(element10, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "twitterIdentity", ["loc", [null, [57, 96], [57, 111]]]], ["get", "dropdown", ["loc", [null, [57, 112], [57, 120]]]]], [], ["loc", [null, [57, 65], [57, 122]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [57, 123], [57, 162]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 62,
                    "column": 18
                  },
                  "end": {
                    "line": 64,
                    "column": 18
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                    ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [63, 20], [63, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 14
                },
                "end": {
                  "line": 65,
                  "column": 16
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "identities-dropdown_item");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              dom.setAttribute(el2, "taget", "_blank");
              var el3 = dom.createTextNode("See profile");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [3, 1]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createAttrMorph(element12, 'href');
              morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "twitterIdentity.canBeRemoved", ["loc", [null, [53, 24], [53, 52]]]]], [], 0, null, ["loc", [null, [53, 18], [55, 25]]]], ["block", "if", [["get", "twitterIdentity.canBePrimarized", ["loc", [null, [56, 24], [56, 55]]]]], [], 1, null, ["loc", [null, [56, 18], [58, 25]]]], ["attribute", "href", ["concat", ["https://twitter.com/", ["get", "twitterIdentity.screenName", ["loc", [null, [60, 51], [60, 77]]]]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "twitterIdentity.screenName", ["loc", [null, [62, 93], [62, 119]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [62, 128], [62, 150]]]]], [], []]], 2, null, ["loc", [null, [62, 18], [64, 34]]]]],
            locals: ["dropdown"],
            templates: [child0, child1, child2]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 65,
                  "column": 16
                },
                "end": {
                  "line": 72,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-identities__list-item");
              var el3 = dom.createTextNode("\n                      @");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode(" ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n                    ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                    ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element9 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element9, 'title');
              morphs[1] = dom.createMorphAt(element9, 1, 1);
              morphs[2] = dom.createMorphAt(element9, 3, 3);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", ["@", ["get", "twitterIdentity.screenName", ["loc", [null, [67, 68], [67, 94]]]]]]], ["content", "twitterIdentity.screenName", ["loc", [null, [68, 23], [68, 53]]]], ["inline", "if", [["get", "twitterIdentity.isPrimary", ["loc", [null, [68, 59], [68, 84]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [68, 85], [68, 125]]]]], [], ["loc", [null, [68, 54], [68, 127]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 10
              },
              "end": {
                "line": 74,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [52, 14], [72, 33]]]]],
          locals: ["twitterIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 6
            },
            "end": {
              "line": 76,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--twitters");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.twitter_identities_title"], [], ["loc", [null, [48, 11], [48, 62]]]], ["block", "each", [["get", "twitterIdentities", ["loc", [null, [50, 18], [50, 35]]]]], [], 0, null, ["loc", [null, [50, 10], [74, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 84,
                      "column": 18
                    },
                    "end": {
                      "line": 86,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element8 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element8, 'onclick');
                  morphs[1] = dom.createMorphAt(element8, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "phoneIdentity", ["loc", [null, [85, 91], [85, 104]]]], ["get", "dropdown", ["loc", [null, [85, 105], [85, 113]]]]], [], ["loc", [null, [85, 65], [85, 115]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [85, 116], [85, 158]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 87,
                      "column": 18
                    },
                    "end": {
                      "line": 89,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element7, 'onclick');
                  morphs[1] = dom.createMorphAt(element7, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "phoneIdentity", ["loc", [null, [88, 96], [88, 109]]]], ["get", "dropdown", ["loc", [null, [88, 110], [88, 118]]]]], [], ["loc", [null, [88, 65], [88, 120]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [88, 121], [88, 160]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 90,
                      "column": 18
                    },
                    "end": {
                      "line": 92,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [91, 20], [91, 60]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 83,
                    "column": 16
                  },
                  "end": {
                    "line": 93,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "phoneIdentity.canBeRemoved", ["loc", [null, [84, 24], [84, 50]]]]], [], 0, null, ["loc", [null, [84, 18], [86, 25]]]], ["block", "if", [["get", "phoneIdentity.canBePrimarized", ["loc", [null, [87, 24], [87, 53]]]]], [], 1, null, ["loc", [null, [87, 18], [89, 25]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "phoneIdentity.number", ["loc", [null, [90, 93], [90, 113]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [90, 122], [90, 144]]]]], [], []]], 2, null, ["loc", [null, [90, 18], [92, 34]]]]],
              locals: ["dropdown"],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 93,
                    "column": 16
                  },
                  "end": {
                    "line": 100,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-identities__list-item");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element6, 'title');
                morphs[1] = dom.createMorphAt(element6, 1, 1);
                morphs[2] = dom.createMorphAt(element6, 3, 3);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["get", "phoneIdentity.number", ["loc", [null, [95, 67], [95, 87]]]]]]], ["content", "phoneIdentity.number", ["loc", [null, [96, 22], [96, 46]]]], ["inline", "if", [["get", "phoneIdentity.isPrimary", ["loc", [null, [96, 52], [96, 75]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [96, 76], [96, 116]]]]], [], ["loc", [null, [96, 47], [96, 118]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 82,
                  "column": 14
                },
                "end": {
                  "line": 101,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [83, 16], [100, 35]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 101,
                  "column": 14
                },
                "end": {
                  "line": 103,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["content", "phoneIdentity.number", ["loc", [null, [102, 16], [102, 40]]]], ["inline", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [102, 41], [102, 83]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 10
              },
              "end": {
                "line": 105,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "phoneIdentity.canBeModified", ["loc", [null, [82, 20], [82, 47]]]]], [], 0, 1, ["loc", [null, [82, 14], [103, 21]]]]],
          locals: ["phoneIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 107,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--phones");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.phones_identities_title"], [], ["loc", [null, [78, 11], [78, 61]]]], ["block", "each", [["get", "phoneIdentities", ["loc", [null, [80, 18], [80, 33]]]]], [], 0, null, ["loc", [null, [80, 10], [105, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 115,
                      "column": 18
                    },
                    "end": {
                      "line": 117,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element5, 'onclick');
                  morphs[1] = dom.createMorphAt(element5, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["removeIdentity", ["get", "facebookIdentity", ["loc", [null, [116, 91], [116, 107]]]], ["get", "dropdown", ["loc", [null, [116, 108], [116, 116]]]]], [], ["loc", [null, [116, 65], [116, 118]]]]], ["inline", "t", ["generic.identities.remove_identity"], [], ["loc", [null, [116, 119], [116, 161]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 118,
                      "column": 18
                    },
                    "end": {
                      "line": 120,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  dom.setAttribute(el1, "class", "identities-dropdown_item");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element4, 'onclick');
                  morphs[1] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makePrimaryIdentity", ["get", "facebookIdentity", ["loc", [null, [119, 96], [119, 112]]]], ["get", "dropdown", ["loc", [null, [119, 113], [119, 121]]]]], [], ["loc", [null, [119, 65], [119, 123]]]]], ["inline", "t", ["generic.identities.make_primary"], [], ["loc", [null, [119, 124], [119, 163]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 121,
                      "column": 18
                    },
                    "end": {
                      "line": 123,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-identities/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.identities.copy_identity"], [], ["loc", [null, [122, 20], [122, 60]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 114,
                    "column": 16
                  },
                  "end": {
                    "line": 124,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "facebookIdentity.canBeRemoved", ["loc", [null, [115, 24], [115, 53]]]]], [], 0, null, ["loc", [null, [115, 18], [117, 25]]]], ["block", "if", [["get", "facebookIdentity.canBePrimarized", ["loc", [null, [118, 24], [118, 56]]]]], [], 1, null, ["loc", [null, [118, 18], [120, 25]]]], ["block", "copy-button", [], ["tagName", "li", "class", "identities-dropdown_item", "clipboardText", ["subexpr", "@mut", [["get", "facebookIdentity.userName", ["loc", [null, [121, 93], [121, 118]]]]], [], []], "success", ["subexpr", "@mut", [["get", "dropdown.actions.close", ["loc", [null, [121, 127], [121, 149]]]]], [], []]], 2, null, ["loc", [null, [121, 18], [123, 34]]]]],
              locals: ["dropdown"],
              templates: [child0, child1, child2]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 124,
                    "column": 16
                  },
                  "end": {
                    "line": 131,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/components/ko-identities/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-identities__list-item");
                var el3 = dom.createTextNode("\n                      ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode(" ");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("\n                    ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                    ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("div");
                dom.setAttribute(el2, "class", "ko-dropdown__item-chevron i-chevron-large-down");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                  ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element3 = dom.childAt(fragment, [1, 1]);
                var morphs = new Array(3);
                morphs[0] = dom.createAttrMorph(element3, 'title');
                morphs[1] = dom.createMorphAt(element3, 1, 1);
                morphs[2] = dom.createMorphAt(element3, 3, 3);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["get", "facebookIdentity.userName", ["loc", [null, [126, 67], [126, 92]]]]]]], ["content", "facebookIdentity.userName", ["loc", [null, [127, 22], [127, 51]]]], ["inline", "if", [["get", "facebookIdentity.isPrimary", ["loc", [null, [127, 57], [127, 83]]]], ["subexpr", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [127, 84], [127, 124]]]]], [], ["loc", [null, [127, 52], [127, 126]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 113,
                  "column": 14
                },
                "end": {
                  "line": 132,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container"], 0, 1, ["loc", [null, [114, 16], [131, 35]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 132,
                  "column": 14
                },
                "end": {
                  "line": 134,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/components/ko-identities/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode(" ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              return morphs;
            },
            statements: [["content", "facebookIdentity.userName", ["loc", [null, [133, 16], [133, 45]]]], ["inline", "t", ["generic.identities.primary_comment"], [], ["loc", [null, [133, 46], [133, 88]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 111,
                "column": 10
              },
              "end": {
                "line": 136,
                "column": 10
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "u-pb-");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "facebookIdentity.canBeModified", ["loc", [null, [113, 20], [113, 50]]]]], [], 0, 1, ["loc", [null, [113, 14], [134, 21]]]]],
          locals: ["facebookIdentity"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 6
            },
            "end": {
              "line": 138,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-identities__list ko-identities__list--facebooks");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["generic.identities.facebook_identities_title"], [], ["loc", [null, [109, 11], [109, 63]]]], ["block", "each", [["get", "facebookIdentities", ["loc", [null, [111, 18], [111, 36]]]]], [], 0, null, ["loc", [null, [111, 10], [136, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 140,
                "column": 8
              },
              "end": {
                "line": 144,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "identities-dropdown_item");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var element1 = dom.childAt(fragment, [3]);
            var element2 = dom.childAt(fragment, [5]);
            var morphs = new Array(6);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            morphs[2] = dom.createAttrMorph(element1, 'onclick');
            morphs[3] = dom.createMorphAt(element1, 0, 0);
            morphs[4] = dom.createAttrMorph(element2, 'onclick');
            morphs[5] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["addEmail", ["get", "dropdown", ["loc", [null, [141, 75], [141, 83]]]]], [], ["loc", [null, [141, 55], [141, 85]]]]], ["inline", "t", ["generic.identities.add_email_identity"], [], ["loc", [null, [141, 86], [141, 131]]]], ["attribute", "onclick", ["subexpr", "action", ["addPhone", ["get", "dropdown", ["loc", [null, [142, 75], [142, 83]]]]], [], ["loc", [null, [142, 55], [142, 85]]]]], ["inline", "t", ["generic.identities.add_phone_identity"], [], ["loc", [null, [142, 86], [142, 131]]]], ["attribute", "onclick", ["subexpr", "action", ["addTwitter", ["get", "dropdown", ["loc", [null, [143, 77], [143, 85]]]]], [], ["loc", [null, [143, 55], [143, 87]]]]], ["inline", "t", ["generic.identities.add_twitter_identity"], [], ["loc", [null, [143, 88], [143, 135]]]]],
          locals: ["dropdown"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 144,
                "column": 8
              },
              "end": {
                "line": 151,
                "column": 8
              }
            },
            "moduleName": "frontend-cp/components/ko-identities/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item-wrapper");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-identities__list-item");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-dropdown__item-chevron i-chevron-large-down");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "t", ["generic.identities.add_new"], [], ["loc", [null, [147, 14], [147, 48]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 139,
              "column": 6
            },
            "end": {
              "line": 152,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "class", "ko-dropdown-container ko-identities__create-dropdown"], 0, 1, ["loc", [null, [140, 8], [151, 27]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 153,
              "column": 2
            },
            "end": {
              "line": 155,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-identities/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-identities/form", [], ["identity", ["subexpr", "@mut", [["get", "newIdentity", ["loc", [null, [154, 34], [154, 45]]]]], [], []], "save", ["subexpr", "action", ["saveIdentity"], [], ["loc", [null, [154, 51], [154, 74]]]], "cancel", ["subexpr", "action", ["removeNewIdentity"], [], ["loc", [null, [154, 82], [154, 110]]]]], ["loc", [null, [154, 4], [154, 112]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 157,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-identities/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-info-bar_item ko-info-bar_item--no-hover");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "info-bar__heading");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element18 = dom.childAt(fragment, [0]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element18, 3, 3);
        morphs[2] = dom.createMorphAt(element18, 4, 4);
        morphs[3] = dom.createMorphAt(element18, 5, 5);
        morphs[4] = dom.createMorphAt(element18, 6, 6);
        morphs[5] = dom.createMorphAt(element18, 7, 7);
        morphs[6] = dom.createMorphAt(element18, 8, 8);
        return morphs;
      },
      statements: [["inline", "t", ["generic.identities.component_title"], [], ["loc", [null, [3, 4], [3, 46]]]], ["block", "if", [["get", "emailIdentities.length", ["loc", [null, [5, 12], [5, 34]]]]], [], 0, null, ["loc", [null, [5, 6], [46, 13]]]], ["block", "if", [["get", "twitterIdentities.length", ["loc", [null, [47, 12], [47, 36]]]]], [], 1, null, ["loc", [null, [47, 6], [76, 13]]]], ["block", "if", [["get", "phoneIdentities.length", ["loc", [null, [77, 12], [77, 34]]]]], [], 2, null, ["loc", [null, [77, 6], [107, 13]]]], ["block", "if", [["get", "facebookIdentities.length", ["loc", [null, [108, 12], [108, 37]]]]], [], 3, null, ["loc", [null, [108, 6], [138, 13]]]], ["block", "unless", [["get", "newIdentity", ["loc", [null, [139, 16], [139, 27]]]]], [], 4, null, ["loc", [null, [139, 6], [152, 17]]]], ["block", "if", [["get", "newIdentity", ["loc", [null, [153, 8], [153, 19]]]]], [], 5, null, ["loc", [null, [153, 2], [155, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['info-bar', 'list-bare']
  });
});
define('frontend-cp/components/ko-info-bar/field/cascadingselect/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var map = _npmLodash['default'].map;
  var groupBy = _npmLodash['default'].groupBy;
  var partition = _npmLodash['default'].partition;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    tree: _ember['default'].computed('options', function () {
      var items = this.get('options').filter(function (option) {
        return option && _ember['default'].get(option, 'value');
      }).map(function (option) {
        return {
          id: _ember['default'].get(option, 'id'),
          value: _ember['default'].get(option, 'value').split(' / ')
        };
      });

      var group = function group(items) {
        return map(groupBy(items, function (item) {
          return item.value[0];
        }), function (items, label) {
          var _partition = partition(items, function (item) {
            return item.value.length > 1;
          });

          var _partition2 = _slicedToArray(_partition, 2);

          var children = _partition2[0];

          var _partition2$1 = _slicedToArray(_partition2[1], 1);

          var current = _partition2$1[0];

          return {
            id: current ? current.id : null,
            value: label,
            children: children ? group(children.map(function (item) {
              return {
                id: item.id,
                value: item.value.slice(1)
              };
            })) : null
          };
        });
      };

      return group(items);
    })
  });
});
define("frontend-cp/components/ko-info-bar/field/cascadingselect/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/cascadingselect/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/drill-down", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "tree", ["loc", [null, [3, 10], [3, 14]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "hasEmptyOption", ["subexpr", "@mut", [["get", "hasEmptyOption", ["loc", [null, [10, 17], [10, 31]]]]], [], []]], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/checkbox/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {

  var valueToArray = function valueToArray(value) {
    return (value || '').split(',').filter(function (v) {
      return v !== '';
    });
  };

  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    options: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: null,
    onValueChange: null,

    tagName: 'div',
    classNames: ['ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isDisabled:ko-info-bar_item--disabled'],

    isChecked: function isChecked(value, id) {
      return valueToArray(value).contains(id.toString());
    },

    actions: {
      valueChanged: function valueChanged(id, checked) {
        var value = valueToArray(_npmLodash['default'].clone(this.get('value')));
        if (checked) {
          value.push(id.toString());
        } else {
          value.splice(value.indexOf(id.toString()), 1);
        }
        value.sort();
        this.sendAction('onValueChange', value.toString());
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/checkbox/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/checkbox/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-checkbox", [], ["checked", ["subexpr", "ko-helper", [["get", "isChecked", ["loc", [null, [3, 35], [3, 44]]]], ["get", "value", ["loc", [null, [3, 45], [3, 50]]]], ["get", "option.id", ["loc", [null, [3, 51], [3, 60]]]]], [], ["loc", [null, [3, 24], [3, 61]]]], "label", ["subexpr", "@mut", [["get", "option.value", ["loc", [null, [4, 10], [4, 22]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], []], "onCheck", ["subexpr", "action", ["valueChanged", ["get", "option.id", ["loc", [null, [6, 35], [6, 44]]]]], [], ["loc", [null, [6, 12], [6, 45]]]]], ["loc", [null, [3, 2], [6, 47]]]]],
        locals: ["option"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/checkbox/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 39], [1, 48]]]], ["block", "each", [["get", "options", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 0], [7, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/date/component', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    value: null,
    onValueChange: null,

    // State
    isFocused: false,
    isCalendarShown: false,

    // HTML
    tagName: 'div',
    classNames: ['ko-info-bar_field_date', 'ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isCalendarShown:ko-info-bar_item--active', 'isDisabled:ko-info-bar_item--disabled'],
    attributeBindings: ['role'],
    role: 'menuitem',

    mouseDown: function mouseDown(e) {
      if (!this.get('isDisabled') && !this.get('isCalendarShown')) {
        e.preventDefault();
        this.$('.ko-info-bar_field_date__focus').focus();
      }
    },

    actions: {
      focus: function focus() {
        this.set('isCalendarShown', true);
      },

      blur: function blur() {
        this.set('isCalendarShown', false);
      },

      hide: function hide() {
        this.set('isCalendarShown', false);
      },

      preserveFocus: function preserveFocus(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      dateChange: function dateChange(value) {
        var date = value ? (0, _moment['default'])(value).format('YYYY-MM-DDTHH:mm:ss') + 'Z' : '';
        this.attrs.onValueChange(date);
        this.set('isCalendarShown', false);
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/date/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "format-date", [["get", "value", ["loc", [null, [10, 16], [10, 21]]]]], ["format", "full"], ["loc", [null, [10, 2], [10, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'onmousedown');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["preserveFocus"], [], ["loc", [null, [13, 53], [13, 79]]]]], ["inline", "ko-datepicker", [], ["date", ["subexpr", "@mut", [["get", "value", ["loc", [null, [14, 25], [14, 30]]]]], [], []], "onDateChange", ["subexpr", "action", ["dateChange"], [], ["loc", [null, [14, 44], [14, 65]]]], "onClose", ["subexpr", "action", ["hide"], [], ["loc", [null, [14, 74], [14, 89]]]]], ["loc", [null, [14, 4], [14, 91]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/date/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.setAttribute(el1, "class", "ko-info-bar_field_date__icon i-select");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_field_date__focus");
        dom.setAttribute(el1, "tabindex", "0");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'onfocus');
        morphs[1] = dom.createAttrMorph(element1, 'onblur');
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [5, 10], [5, 28]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [6, 9], [6, 26]]]]], ["content", "title", ["loc", [null, [8, 39], [8, 48]]]], ["block", "if", [["get", "value", ["loc", [null, [9, 6], [9, 11]]]]], [], 0, null, ["loc", [null, [9, 0], [11, 7]]]], ["block", "if", [["get", "isCalendarShown", ["loc", [null, [12, 6], [12, 21]]]]], [], 1, null, ["loc", [null, [12, 0], [16, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/decimal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/decimal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/decimal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/drill-down/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: null,
    placeholder: null,
    options: [],
    value: null,
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    onValueChange: null,
    hasEmptyOption: true,
    emptyLabel: '-',

    // HTML
    tagName: 'div',
    classNames: ['ko-info-bar_field_drill-down']
  });
});
define("frontend-cp/components/ko-info-bar/field/drill-down/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-dropdown/drill-down", [], ["options", ["subexpr", "@mut", [["get", "options", ["loc", [null, [2, 10], [2, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onValueChange", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [4, 16], [4, 29]]]]], [], []], "emptyLabel", ["subexpr", "@mut", [["get", "emptyLabel", ["loc", [null, [5, 13], [5, 23]]]]], [], []], "hasEmptyOption", ["subexpr", "@mut", [["get", "hasEmptyOption", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "triggerComponent", "ko-info-bar/field/drill-down/trigger", "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "extra", ["subexpr", "hash", [], ["title", ["get", "title", ["loc", [null, [10, 10], [10, 15]]]], "placeholder", ["get", "placeholder", ["loc", [null, [11, 16], [11, 27]]]], "isEdited", ["get", "isEdited", ["loc", [null, [12, 13], [12, 21]]]], "isPusherEdited", ["get", "isPusherEdited", ["loc", [null, [13, 19], [13, 33]]]], "isErrored", ["get", "isErrored", ["loc", [null, [14, 14], [14, 23]]]]], ["loc", [null, [9, 8], [15, 3]]]]], ["loc", [null, [1, 0], [16, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/drill-down/trigger/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var run = _ember['default'].run;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    extra: null,
    select: null,

    // HTML
    classNames: ['ko-info-bar_field_drill-down', 'ko-info-bar_item'],
    classNameBindings: ['extra.isEdited:ko-info-bar_item--edited', 'extra.isPusherEdited:ko-info-bar_item--pusher-edited', 'extra.isErrored:ko-info-bar_item--error', 'select.isOpen:ko-info-bar_item--active'],

    didUpdateAttrs: function didUpdateAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (!oldAttrs.select.isOpen && newAttrs.select.isOpen) {
        run.schedule('afterRender', this, function () {
          this.element.querySelector('input').focus();
        });
      } else if (oldAttrs.select.isOpen && !newAttrs.select.isOpen) {
        newAttrs.select.actions.search('');
      }
    },

    value: computed('select.isOpen', 'extra.formattedValue', function () {
      if (this.get('select.isOpen')) {
        return '';
      } else {
        return this.get('extra.formattedValue');
      }
    }),

    actions: {
      handleMouseDown: function handleMouseDown(e) {
        if (this.get('select.isOpen')) {
          e.stopPropagation();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        var select = this.get('select');
        if (e.keyCode === 13 && select.isOpen) {
          select.actions.choose(this.get('highlighted'), e);
          e.stopPropagation();
        }
        if (!this.get('select.isOpen') && e.keyCode !== 9 && e.keyCode !== 13) {
          e.preventDefault();
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/drill-down/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-info-bar_field_drill-down__placeholder");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "extra.placeholder", ["loc", [null, [19, 60], [19, 81]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-info-bar_field_drill-down__placeholder");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "not", [["get", "value", ["loc", [null, [18, 13], [18, 18]]]]], [], ["loc", [null, [18, 8], [18, 19]]]]], [], 0, null, ["loc", [null, [18, 2], [20, 9]]]], ["content", "value", ["loc", [null, [21, 58], [21, 67]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/drill-down/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "text");
        dom.setAttribute(el1, "autocomplete", "off");
        dom.setAttribute(el1, "autocorrect", "off");
        dom.setAttribute(el1, "autocapitalize", "off");
        dom.setAttribute(el1, "spellcheck", "false");
        dom.setAttribute(el1, "role", "textbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createAttrMorph(element1, 'value');
        morphs[4] = dom.createAttrMorph(element1, 'onmousedown');
        morphs[5] = dom.createAttrMorph(element1, 'onkeydown');
        morphs[6] = dom.createAttrMorph(element1, 'onfocus');
        morphs[7] = dom.createAttrMorph(element1, 'oninput');
        morphs[8] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-info-bar_field_drill-down_trigger__icon ", ["subexpr", "if", [["get", "select.isOpen", ["loc", [null, [1, 58], [1, 71]]]], "i-search", "i-select"], [], ["loc", [null, [1, 53], [1, 95]]]]]]], ["content", "extra.title", ["loc", [null, [2, 39], [2, 54]]]], ["attribute", "class", ["concat", ["ko-info-bar_field_drill-down_trigger__input ", ["subexpr", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [10, 63], [10, 76]]]]], [], ["loc", [null, [10, 58], [10, 77]]]], "ko-info-bar_field_drill-down_trigger__input--hidden"], [], ["loc", [null, [10, 53], [10, 133]]]]]]], ["attribute", "value", ["get", "value", ["loc", [null, [11, 10], [11, 15]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["handleMouseDown"], [], ["loc", [null, [12, 14], [12, 42]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [13, 12], [13, 38]]]]], ["attribute", "onfocus", ["get", "select.actions.open", ["loc", [null, [14, 12], [14, 31]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "select.actions.search", ["loc", [null, [15, 19], [15, 40]]]]], ["value", "target.value"], ["loc", [null, [15, 10], [15, 63]]]]], ["block", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [17, 11], [17, 24]]]]], [], ["loc", [null, [17, 6], [17, 25]]]]], [], 0, null, ["loc", [null, [17, 0], [22, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/file/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: '',
    onValueChange: null,

    tagName: 'div',
    classNames: ['ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isDisabled:ko-info-bar_item--disabled']
  });
});
define("frontend-cp/components/ko-info-bar/field/file/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/file/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 39], [1, 48]]]], ["inline", "ko-file-field", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 24], [3, 29]]]]], [], []], "on-change", ["subexpr", "@mut", [["get", "onValueChange", ["loc", [null, [4, 14], [4, 27]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], []]], ["loc", [null, [3, 2], [5, 25]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/multiline-text/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    value: '',
    onValueChange: null,

    // State
    isActive: false,

    tagName: 'div',
    classNames: ['ko-info-bar_multiline-text', 'ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isActive:ko-info-bar_item--active', 'isDisabled:ko-info-bar_item--disabled'],

    click: function click() {
      this.$('textarea').focus();
    },

    actions: {
      focus: function focus() {
        this.set('isActive', true);
      },

      blur: function blur(textarea) {
        this.set('isActive', false);
        textarea.scrollTop = 0;
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/multiline-text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/multiline-text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("textarea");
        dom.setAttribute(el2, "class", "ko-field-text__multiline-text");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'value');
        morphs[2] = dom.createAttrMorph(element0, 'oninput');
        morphs[3] = dom.createAttrMorph(element0, 'onfocus');
        morphs[4] = dom.createAttrMorph(element0, 'onblur');
        morphs[5] = dom.createAttrMorph(element0, 'disabled');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 39], [1, 48]]]], ["attribute", "value", ["get", "value", ["loc", [null, [5, 12], [5, 17]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [6, 21], [6, 34]]]]], ["value", "target.value"], ["loc", [null, [6, 12], [6, 57]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [7, 12], [7, 30]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], ["value", "target"], ["loc", [null, [8, 11], [8, 43]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [9, 15], [9, 25]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/numeric/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/numeric/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/numeric/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/radio/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/radio/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "options", ["loc", [null, [3, 10], [3, 17]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "idPath", "id", "labelPath", "value", "hasEmptyOption", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/regex/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: ''
  });
});
define("frontend-cp/components/ko-info-bar/field/regex/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/regex/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/text", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [5, 17], [5, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [8, 24], [8, 37]]]]], [], ["loc", [null, [8, 16], [8, 38]]]]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/search/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    onSearch: null,
    results: [],
    value: null,
    labelPath: null,
    onValueChange: null,
    isPusherEdited: false,
    isErrored: false,
    isEdited: false,
    isDisabled: false,

    // State
    isDropdownShown: false,
    searchTerm: '',
    currentResults: [],
    selectedIndex: 0,

    // HTML
    tagName: 'div',
    classNames: ['ko-info-bar_field_search', 'ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isDropdownShown:ko-info-bar_item--active', 'isDisabled:ko-info-bar_item--disabled'],
    attributeBindings: ['role'],
    role: 'menuitem',

    currentLabel: _ember['default'].computed('value', 'labelPath', function () {
      var value = this.get('value');
      var labelPath = this.get('labelPath');
      if (value) {
        return labelPath ? get(value, labelPath) : value;
      } else {
        return '';
      }
    }),

    inputValue: _ember['default'].computed('currentLabel', 'isDropdownShown', 'searchTerm', function () {
      var currentLabel = this.get('currentLabel');
      var isDropdownShown = this.get('isDropdownShown');
      var searchTerm = this.get('searchTerm');
      return isDropdownShown ? searchTerm : currentLabel;
    }),

    isLoading: _ember['default'].computed('results.isSettled', function () {
      return this.get('results.isSettled') === false;
    }),

    resultsAvailable: _ember['default'].computed('currentResults.length', 'inputValue', function () {
      var inputValue = this.get('inputValue');
      return this.get('currentResults.length') > 0 && inputValue;
    }),

    updateCurrentResults: _ember['default'].observer('results', 'results.isSettled', function () {
      var results = this.get('results');
      var isSettled = this.get('results.isSettled');
      if (isSettled !== false) {
        this.set('currentResults', results);
        this.set('selectedIndex', 0);
      }
    }),

    updateResults: function updateResults() {
      if (this.get('searchTerm')) {
        this.attrs.onSearch(this.get('searchTerm'));
      }
    },

    moveSelectedItem: function moveSelectedItem(direction) {
      var results = this.get('currentResults');
      var selectedIndex = this.get('selectedIndex');
      selectedIndex = selectedIndex + direction;
      if (selectedIndex >= 0 && selectedIndex < _ember['default'].get(results, 'length')) {
        this.set('selectedIndex', selectedIndex);
      }
    },

    // Events
    mouseDown: function mouseDown(e) {
      if (!this.get('isDropdownShown')) {
        e.preventDefault();
        this.$('.ko-info-bar_field_search__input').focus();
      }
    },

    actions: {
      focus: function focus() {
        this.set('isDropdownShown', true);
      },

      blur: function blur() {
        this.set('isDropdownShown', false);
        this.set('searchTerm', '');
        this.set('selectedIndex', 0);
        this.set('currentResults', []);
      },

      keyDown: function keyDown(e) {
        switch (e.keyCode) {
          case _frontendCpLibKeycodes.up:
            {
              this.moveSelectedItem(-1);
              return false;
            }

          case _frontendCpLibKeycodes.down:
            {
              this.moveSelectedItem(1);
              return false;
            }

          case _frontendCpLibKeycodes.escape:
            {
              this.$('.ko-info-bar_field_search__input').blur();
              return false;
            }

          case _frontendCpLibKeycodes.enter:
            {
              var selectedIndex = this.get('selectedIndex');
              var results = this.get('currentResults');
              if (selectedIndex >= 0) {
                this.send('selectItem', results.objectAt(selectedIndex));
              }
              return false;
            }
        }
      },

      highlight: function highlight(index) {
        this.set('selectedIndex', index);
      },

      updateSearchTerm: function updateSearchTerm(searchTerm) {
        this.set('searchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.updateResults, 150);
      },

      listMouseDown: function listMouseDown(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      selectItem: function selectItem(item) {
        this.attrs.onValueChange(item);
        this.$('.ko-info-bar_field_search__input').blur();
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-info-bar_field_search__loader-icon");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "ko-loader", ["loc", [null, [2, 53], [2, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ko-info-bar_field_search__icon ", ["subexpr", "if", [["get", "isDropdownShown", ["loc", [null, [4, 48], [4, 63]]]], "i-search", "i-select"], [], ["loc", [null, [4, 43], [4, 87]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [3, 15], [3, 25]]]]], [], ["loc", [null, [3, 10], [3, 26]]]]], [], 0, null, ["loc", [null, [3, 0], [5, 0]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "role", "menuitemradio");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'onclick');
            morphs[2] = dom.createAttrMorph(element0, 'onmousemove');
            morphs[3] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["dropdown-menu__item ", ["subexpr", "if", [["subexpr", "eq", [["get", "index", ["loc", [null, [22, 44], [22, 49]]]], ["get", "selectedIndex", ["loc", [null, [22, 50], [22, 63]]]]], [], ["loc", [null, [22, 40], [22, 64]]]], "dropdown-menu__item--selected"], [], ["loc", [null, [22, 35], [22, 98]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["selectItem", ["get", "item", ["loc", [null, [23, 38], [23, 42]]]]], [], ["loc", [null, [23, 16], [23, 44]]]]], ["attribute", "onmousemove", ["subexpr", "action", ["highlight", ["get", "index", ["loc", [null, [24, 41], [24, 46]]]]], [], ["loc", [null, [24, 20], [24, 48]]]]], ["inline", "sanitize-html", [["subexpr", "ko-embolden", [["subexpr", "if", [["get", "labelPath", ["loc", [null, [26, 41], [26, 50]]]], ["subexpr", "get", [["get", "item", ["loc", [null, [26, 56], [26, 60]]]], ["get", "labelPath", ["loc", [null, [26, 61], [26, 70]]]]], [], ["loc", [null, [26, 51], [26, 71]]]], ["get", "item", ["loc", [null, [26, 72], [26, 76]]]]], [], ["loc", [null, [26, 37], [26, 77]]]], ["get", "searchTerm", ["loc", [null, [26, 78], [26, 88]]]]], [], ["loc", [null, [26, 24], [26, 89]]]], "bold"], [], ["loc", [null, [26, 8], [26, 98]]]]],
          locals: ["item", "index"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onmousedown');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["listMouseDown"], [], ["loc", [null, [19, 40], [19, 66]]]]], ["block", "each", [["get", "currentResults", ["loc", [null, [20, 12], [20, 26]]]]], [], 0, null, ["loc", [null, [20, 4], [28, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "text");
        dom.setAttribute(el1, "class", "ko-info-bar_field_search__input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
        morphs[2] = dom.createAttrMorph(element3, 'value');
        morphs[3] = dom.createAttrMorph(element3, 'onfocus');
        morphs[4] = dom.createAttrMorph(element3, 'onblur');
        morphs[5] = dom.createAttrMorph(element3, 'onkeydown');
        morphs[6] = dom.createAttrMorph(element3, 'oninput');
        morphs[7] = dom.createAttrMorph(element3, 'disabled');
        morphs[8] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]], ["content", "title", ["loc", [null, [6, 39], [6, 48]]]], ["attribute", "value", ["get", "inputValue", ["loc", [null, [10, 10], [10, 20]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [11, 10], [11, 28]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [12, 9], [12, 26]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [13, 12], [13, 32]]]]], ["attribute", "oninput", ["subexpr", "action", ["updateSearchTerm"], ["value", "target.value"], ["loc", [null, [14, 10], [14, 60]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [15, 13], [15, 23]]]]], ["block", "if", [["subexpr", "and", [["get", "isDropdownShown", ["loc", [null, [18, 11], [18, 26]]]], ["get", "resultsAvailable", ["loc", [null, [18, 27], [18, 43]]]]], [], ["loc", [null, [18, 6], [18, 44]]]]], [], 2, null, ["loc", [null, [18, 0], [30, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/select/component', ['exports', 'ember'], function (exports, _ember) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var computed = _ember['default'].computed;
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: '',
    value: null,
    options: [],
    onValueChange: null,
    labelPath: null,
    idPath: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    hasEmptyOption: true,
    showBottomArrow: false,

    // HTML
    tagName: 'div',
    attributeBindings: ['role'],
    role: 'menuitem',
    classNames: ['ko-info-bar_field_select'],

    // CPs
    normalizedOptions: computed('hasEmptyOption', 'labelPath', 'options.[]', function () {
      var opts = this.get('options').toArray();
      if (this.get('hasEmptyOption')) {
        var labelPath = this.get('labelPath');
        var emptyOpt = undefined;
        if (labelPath) {
          emptyOpt = _defineProperty({ __id__: '__empty_option__' }, labelPath, '-');
        } else {
          emptyOpt = '-';
        }
        opts.unshift(emptyOpt);
      }
      return opts;
    }),

    normalizedValue: computed('idPath', 'value', 'options.[]', function () {
      var idPath = this.get('idPath');
      var value = this.get('value');
      if (idPath) {
        return this.get('options').findBy(idPath, value);
      } else {
        return value;
      }
    }),

    // Actions
    actions: {
      selectItem: function selectItem(item) {
        this.element.querySelector('input').focus();
        var normalizedItem = item;
        if (this.get('labelPath')) {
          if (!item || item.__id__ === '__empty_option__') {
            normalizedItem = null;
          }
        } else if (item === '-') {
          normalizedItem = null;
        }
        var action = this.get('onValueChange');
        var idPath = this.get('idPath');
        if (idPath) {
          action(normalizedItem && get(normalizedItem, idPath));
        } else {
          action(normalizedItem);
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/select/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "sanitize-html", [["subexpr", "ko-embolden", [["subexpr", "if", [["get", "labelPath", ["loc", [null, [24, 39], [24, 48]]]], ["subexpr", "get", [["get", "option", ["loc", [null, [24, 54], [24, 60]]]], ["get", "labelPath", ["loc", [null, [24, 61], [24, 70]]]]], [], ["loc", [null, [24, 49], [24, 71]]]], ["get", "option", ["loc", [null, [24, 72], [24, 78]]]]], [], ["loc", [null, [24, 35], [24, 79]]]], ["get", "searchTerm", ["loc", [null, [24, 80], [24, 90]]]]], [], ["loc", [null, [24, 22], [24, 91]]]], "bold"], [], ["loc", [null, [24, 6], [24, 100]]]]],
        locals: ["option", "searchTerm"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "showBottomArrow", ["loc", [null, [1, 17], [1, 32]]]], "ko-info-bar_field_select__arrow-inset"], [], ["loc", [null, [1, 12], [1, 74]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "showBottomArrow", ["loc", [null, [2, 19], [2, 34]]]], "ko-info-bar_field_select__arrow"], [], ["loc", [null, [2, 14], [2, 70]]]]]]], ["block", "power-select", [], ["options", ["subexpr", "@mut", [["get", "normalizedOptions", ["loc", [null, [4, 14], [4, 31]]]]], [], []], "selected", ["subexpr", "@mut", [["get", "normalizedValue", ["loc", [null, [5, 15], [5, 30]]]]], [], []], "searchEnabled", false, "search", ["subexpr", "@mut", [["get", "search", ["loc", [null, [7, 13], [7, 19]]]]], [], []], "searchField", ["subexpr", "@mut", [["get", "labelPath", ["loc", [null, [8, 18], [8, 27]]]]], [], []], "verticalPosition", "below", "onchange", ["subexpr", "action", ["selectItem"], [], ["loc", [null, [10, 15], [10, 36]]]], "renderInPlace", true, "tabindex", -1, "disabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [13, 15], [13, 25]]]]], [], []], "loadingMessage", ["subexpr", "@mut", [["get", "loadingMessage", ["loc", [null, [14, 21], [14, 35]]]]], [], []], "extra", ["subexpr", "hash", [], ["title", ["get", "title", ["loc", [null, [16, 14], [16, 19]]]], "labelPath", ["get", "labelPath", ["loc", [null, [17, 18], [17, 27]]]], "isErrored", ["get", "isErrored", ["loc", [null, [18, 18], [18, 27]]]], "isEdited", ["get", "isEdited", ["loc", [null, [19, 17], [19, 25]]]], "isPusherEdited", ["get", "isPusherEdited", ["loc", [null, [20, 23], [20, 37]]]], "placeholder", ["get", "inputPlaceholder", ["loc", [null, [21, 20], [21, 36]]]]], ["loc", [null, [15, 12], [22, 7]]]], "triggerComponent", "ko-info-bar/field/select/trigger"], 0, null, ["loc", [null, [3, 4], [25, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/select/trigger/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var get = _ember['default'].get;
  var run = _ember['default'].run;
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    extra: null,
    select: null,

    // HTML
    classNames: ['ko-info-bar_field_select_trigger', 'ko-info-bar_item'],
    classNameBindings: ['extra.isEdited:ko-info-bar_item--edited', 'extra.isPusherEdited:ko-info-bar_item--pusher-edited', 'extra.isErrored:ko-info-bar_item--error', 'select.isOpen:ko-info-bar_item--active'],

    didUpdateAttrs: function didUpdateAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      if (!oldAttrs.select.isOpen && newAttrs.select.isOpen) {
        run.schedule('afterRender', this, function () {
          this.element.querySelector('input').focus();
        });
      } else if (oldAttrs.select.isOpen && !newAttrs.select.isOpen) {
        newAttrs.select.actions.search('');
      }
    },

    value: computed('extra.labelPath', 'select.isOpen', 'selected', function () {
      var isOpen = this.get('select.isOpen');
      if (isOpen) {
        return '';
      }
      var selected = this.get('selected');
      if (!selected) {
        return '-';
      }
      var labelPath = this.get('extra.labelPath');
      if (labelPath) {
        return get(selected, labelPath);
      } else {
        return selected;
      }
    }),

    actions: {
      handleMouseDown: function handleMouseDown(e) {
        if (this.get('select.isOpen')) {
          e.stopPropagation();
        }
      },

      handleKeyDown: function handleKeyDown(e) {
        var select = this.get('select');
        if (e.keyCode === 13 && select.isOpen) {
          select.actions.choose(this.get('highlighted'), e);
          e.stopPropagation();
        }
        if (!this.get('select.isOpen') && e.keyCode !== 9 && e.keyCode !== 13) {
          e.preventDefault();
        }
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/select/trigger/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/field/select/trigger/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-info-bar_field_select__placeholder");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "value", ["loc", [null, [15, 54], [15, 63]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/select/trigger/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "search");
        dom.setAttribute(el1, "tabindex", "0");
        dom.setAttribute(el1, "autocomplete", "off");
        dom.setAttribute(el1, "autocorrect", "off");
        dom.setAttribute(el1, "autocapitalize", "off");
        dom.setAttribute(el1, "spellcheck", "false");
        dom.setAttribute(el1, "role", "textbox");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createAttrMorph(element1, 'value');
        morphs[4] = dom.createAttrMorph(element1, 'placeholder');
        morphs[5] = dom.createAttrMorph(element1, 'onmousedown');
        morphs[6] = dom.createAttrMorph(element1, 'oninput');
        morphs[7] = dom.createAttrMorph(element1, 'onfocus');
        morphs[8] = dom.createAttrMorph(element1, 'onkeydown');
        morphs[9] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-info-bar_field_select__icon ", ["subexpr", "if", [["get", "select.isOpen", ["loc", [null, [1, 46], [1, 59]]]], "i-search", "i-select"], [], ["loc", [null, [1, 41], [1, 83]]]]]]], ["content", "extra.title", ["loc", [null, [2, 39], [2, 54]]]], ["attribute", "class", ["concat", ["ko-info-bar_field_select_trigger-input ", ["subexpr", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [4, 58], [4, 71]]]]], [], ["loc", [null, [4, 53], [4, 72]]]], "ko-info-bar_field_select_trigger-input--hidden"], [], ["loc", [null, [4, 48], [4, 123]]]]]]], ["attribute", "value", ["get", "value", ["loc", [null, [8, 10], [8, 15]]]]], ["attribute", "placeholder", ["get", "extra.placeholder", ["loc", [null, [9, 16], [9, 33]]]]], ["attribute", "onmousedown", ["subexpr", "action", ["handleMouseDown"], [], ["loc", [null, [10, 14], [10, 42]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "select.actions.search", ["loc", [null, [11, 19], [11, 40]]]]], ["value", "target.value"], ["loc", [null, [11, 10], [11, 63]]]]], ["attribute", "onfocus", ["get", "select.actions.open", ["loc", [null, [12, 12], [12, 31]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["handleKeyDown"], [], ["loc", [null, [13, 12], [13, 38]]]]], ["block", "if", [["subexpr", "not", [["get", "select.isOpen", ["loc", [null, [14, 11], [14, 24]]]]], [], ["loc", [null, [14, 6], [14, 25]]]]], [], 0, null, ["loc", [null, [14, 0], [16, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/tags/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isEdited: false,
    isPusherEdited: false,
    isErrored: false,
    isDisabled: false,
    selectedTags: [],
    errorTags: [],
    suggestedTags: [],
    onTagAddition: null,
    onTagRemoval: null,
    onTagSuggestion: null,
    newTagText: '',
    addTagText: '',
    forceLowerCase: null,

    tagName: 'div',
    classNames: ['ko-info-bar_field_tags', 'ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isDisabled:ko-info-bar_item--disabled']
  });
});
define("frontend-cp/components/ko-info-bar/field/tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 39], [1, 48]]]], ["inline", "ko-tags", [], ["isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [3, 13], [3, 23]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "selectedTags", ["loc", [null, [4, 15], [4, 27]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "errorTags", ["subexpr", "@mut", [["get", "errorTags", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "forceLowerCase", ["subexpr", "@mut", [["get", "forceLowerCase", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "onTagAddition", ["subexpr", "@mut", [["get", "onTagAddition", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "onTagRemoval", ["subexpr", "@mut", [["get", "onTagRemoval", ["loc", [null, [9, 15], [9, 27]]]]], [], []], "onTagSuggestion", ["subexpr", "@mut", [["get", "onTagSuggestion", ["loc", [null, [10, 18], [10, 33]]]]], [], []], "newTagText", ["subexpr", "@mut", [["get", "newTagText", ["loc", [null, [11, 13], [11, 23]]]]], [], []], "addTagText", ["subexpr", "@mut", [["get", "addTagText", ["loc", [null, [12, 13], [12, 23]]]]], [], []]], ["loc", [null, [2, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/text/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    title: '',
    isErrored: false,
    isEdited: false,
    isDisabled: false,
    isPusherEdited: false,
    value: '',
    onValueChange: null,

    // State
    isActive: false,

    tagName: 'div',
    classNames: ['ko-info-bar_field_text', 'ko-info-bar_item'],
    classNameBindings: ['isEdited:ko-info-bar_item--edited', 'isPusherEdited:ko-info-bar_item--pusher-edited', 'isErrored:ko-info-bar_item--error', 'isActive:ko-info-bar_item--active', 'isDisabled:ko-info-bar_item--disabled'],

    click: function click() {
      this.$('input').focus();
    },

    actions: {
      focus: function focus() {
        this.set('isActive', true);
      },

      blur: function blur() {
        this.set('isActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-info-bar/field/text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/text/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "ko-info-bar_item__header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "text");
        dom.setAttribute(el2, "class", "ko-field-text__input");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'value');
        morphs[2] = dom.createAttrMorph(element0, 'oninput');
        morphs[3] = dom.createAttrMorph(element0, 'onfocus');
        morphs[4] = dom.createAttrMorph(element0, 'onblur');
        morphs[5] = dom.createAttrMorph(element0, 'disabled');
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 39], [1, 48]]]], ["attribute", "value", ["get", "value", ["loc", [null, [6, 12], [6, 17]]]]], ["attribute", "oninput", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [7, 21], [7, 34]]]]], ["value", "target.value"], ["loc", [null, [7, 12], [7, 57]]]]], ["attribute", "onfocus", ["subexpr", "action", ["focus"], [], ["loc", [null, [8, 12], [8, 30]]]]], ["attribute", "onblur", ["subexpr", "action", ["blur"], [], ["loc", [null, [9, 11], [9, 28]]]]], ["attribute", "disabled", ["get", "isDisabled", ["loc", [null, [10, 15], [10, 25]]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/field/yesno/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    title: null,
    options: null,
    value: null,
    isErrored: false,
    isEdited: false,
    isPusherEdited: false,
    isDisabled: false,
    onValueChange: null,

    // HTML
    tagName: '',

    optionsList: [_ember['default'].Object.create({ id: 'yes', value: 'Yes' }), _ember['default'].Object.create({ id: 'no', value: 'No' })]
  });
});
define("frontend-cp/components/ko-info-bar/field/yesno/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/field/yesno/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "options", ["subexpr", "@mut", [["get", "optionsList", ["loc", [null, [3, 10], [3, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 8], [4, 13]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [6, 17], [6, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [7, 12], [7, 21]]]]], [], []], "isDisabled", ["subexpr", "@mut", [["get", "isDisabled", ["loc", [null, [8, 13], [8, 23]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onValueChange", ["loc", [null, [9, 24], [9, 37]]]]], [], ["loc", [null, [9, 16], [9, 38]]]], "idPath", "id", "labelPath", "value", "hasEmptyOption", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-info-bar_item']
  });
});
define("frontend-cp/components/ko-info-bar/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-info-bar/metadata/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-info-bar_metadata'],
    classNameBindings: ['separator::ko-info-bar_item--no-separator'],
    separator: false
  });
});
define("frontend-cp/components/ko-info-bar/metadata/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "info-bar-metadata__title layout__item u-1/3");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "info-bar-metadata__value layout__item u-2/3");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("strong");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "row.title", ["loc", [null, [4, 6], [4, 19]]]], ["inline", "if", [["get", "row.value", ["loc", [null, [7, 19], [7, 28]]]], ["subexpr", "ko-datetime-format", [["get", "row.value", ["loc", [null, [7, 49], [7, 58]]]]], [], ["loc", [null, [7, 29], [7, 59]]]], "-"], [], ["loc", [null, [7, 14], [7, 65]]]]],
        locals: ["row"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/metadata/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("section");
        dom.setAttribute(el1, "class", "info-bar-metadata layout");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "rows", ["loc", [null, [2, 10], [2, 14]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-info-bar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-info-bar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-layout/advanced/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-layout_advanced'],
    classNameBindings: ['isNew:ko-layout_advanced--is-new'],
    isNew: false,

    stickyOptions: {
      topSpacing: 83
    }
  });
});
define("frontend-cp/components/ko-layout/advanced/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-layout/advanced/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", ["reply-area"], [], ["loc", [null, [9, 8], [9, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 6
              },
              "end": {
                "line": 21,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-layout/advanced/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", ["sidebar-sticky"], [], ["loc", [null, [20, 8], [20, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-layout/advanced/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "sticky-container", [], ["options", ["subexpr", "@mut", [["get", "stickyOptions", ["loc", [null, [19, 34], [19, 47]]]]], [], []]], 0, null, ["loc", [null, [19, 6], [21, 27]]]], ["inline", "yield", ["sidebar"], [], ["loc", [null, [23, 6], [23, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-layout/advanced/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-layout_advanced__heading");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-layout_advanced__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-layout_advanced__main");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-layout_advanced__reply-area");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-layout_advanced__timeline-area");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-layout_advanced__sidebar");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "yield", ["heading"], [], ["loc", [null, [2, 2], [2, 21]]]], ["block", "sticky-container", [], ["options", ["subexpr", "@mut", [["get", "stickyOptions", ["loc", [null, [8, 34], [8, 47]]]]], [], []]], 0, null, ["loc", [null, [8, 6], [10, 27]]]], ["inline", "yield", ["timeline-area"], [], ["loc", [null, [14, 6], [14, 31]]]], ["block", "ko-info-bar", [], [], 1, null, ["loc", [null, [18, 4], [24, 20]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-loader/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    large: false,

    // HTML
    tagName: 'ul',
    classNames: ['ko-loader'],
    classNameBindings: ['large:ko-loader--large']
  });
});
define("frontend-cp/components/ko-loader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 99
          }
        },
        "moduleName": "frontend-cp/components/ko-loader/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "ko-loader__item");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-otp/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-otp/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-otp/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "otp-form login-form__wrapper js-otp-form");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [2, 30], [2, 33]]]]], [], []], "name", "otp-code", "class", "login__input u-intimate", "placeholder", ["subexpr", "t", ["login.verificationcode"], [], ["loc", [null, [4, 18], [4, 46]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [5, 15], [5, 24]]]]], [], []]], ["loc", [null, [2, 4], [5, 26]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-password/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-password/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-login-password/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "email", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [2, 31], [2, 42]]]]], [], []], "name", "email", "autofocus", "autofocus", "class", "login__input", "placeholder", ["subexpr", "t", ["login.email"], [], ["loc", [null, [2, 111], [2, 128]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [2, 138], [2, 147]]]]], [], []]], ["loc", [null, [2, 4], [2, 149]]]], ["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "model.password", ["loc", [null, [3, 34], [3, 48]]]]], [], []], "name", "password", "class", "login__input", "placeholder", ["subexpr", "t", ["login.password"], [], ["loc", [null, [3, 98], [3, 118]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [3, 128], [3, 137]]]]], [], []]], ["loc", [null, [3, 4], [3, 139]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-login-reset/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-login-reset/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-login-reset/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "reset-password-form login-form__wrapper");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [2, 34], [2, 46]]]]], [], []], "name", "reset-password", "class", "login__input", "placeholder", ["subexpr", "t", ["login.newpassword"], [], ["loc", [null, [2, 102], [2, 125]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [2, 135], [2, 144]]]]], [], []]], ["loc", [null, [2, 4], [2, 146]]]], ["inline", "input", [], ["type", "password", "value", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [3, 34], [3, 46]]]]], [], []], "name", "reset-password-2", "class", "login__input u-intimate", "placeholder", ["subexpr", "t", ["login.repeatpassword"], [], ["loc", [null, [3, 115], [3, 141]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [3, 151], [3, 160]]]]], [], []]], ["loc", [null, [3, 4], [3, 162]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-modal/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-modal__overlay");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-modal__content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-notification-badge/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNames: ['ko-notification-badge']
  });
});
define("frontend-cp/components/ko-notification-badge/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-notification-badge/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "i-bell");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-organisation-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    organisation: null,
    canDelete: false,

    // HTML
    classNames: ['ko-organisation-action-menu'],
    classNameBindings: ['hasNoOptions:u-hidden'],

    sessionService: _ember['default'].inject.service('session'),
    permissionService: _ember['default'].inject.service('permissions'),
    intlService: _ember['default'].inject.service('intl'),

    hasDeleteOrganisationPermission: _ember['default'].computed('sessionService.permissions', 'organisation', function () {
      return this.get('canDelete') && this.get('permissionService').has('app.organisation.delete', this.get('organisation'));
    }),

    hasNoOptions: _ember['default'].computed('hasDeleteOrganisationPermission', function () {
      return !this.get('hasDeleteOrganisationPermission');
    }),

    actions: {
      deleteOrganisation: function deleteOrganisation() {
        var _this = this;

        if (confirm(this.get('intlService').findTranslationByKey('generic.confirm.delete'))) {
          this.get('organisation').destroyRecord().then(function () {
            _this.get('closeTab')();
          });
        }
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }

  });
});
define("frontend-cp/components/ko-organisation-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "button");
            dom.setAttribute(el1, "class", "button button--default button--dropdown");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "i-chevron-large-down");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element1 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["deleteOrganisation"], [], ["loc", [null, [16, 53], [16, 84]]]]], ["inline", "t", ["organisation.delete_organisation"], [], ["loc", [null, [17, 12], [17, 52]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                dom.setAttribute(el1, "class", "ko-dropdown_list__item");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element0, 'onclick');
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["changeUserPassword"], [], ["loc", [null, [22, 53], [22, 84]]]]], ["inline", "t", ["users.changepassword"], [], ["loc", [null, [23, 12], [23, 40]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasDeleteOrganisationPermission", ["loc", [null, [15, 12], [15, 43]]]]], [], 0, null, ["loc", [null, [15, 6], [19, 13]]]], ["block", "if", [["get", "hasChangePasswordEmailPermission", ["loc", [null, [21, 12], [21, 44]]]]], [], 1, null, ["loc", [null, [21, 6], [25, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [14, 66], [14, 78]]]]], [], []]], 0, null, ["loc", [null, [14, 4], [26, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [8, 12], [8, 16]]]], "button"], [], ["loc", [null, [8, 8], [8, 26]]]]], [], 0, null, ["loc", [null, [8, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [13, 12], [13, 16]]]], "content"], [], ["loc", [null, [13, 8], [13, 27]]]]], [], 1, null, ["loc", [null, [13, 2], [27, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["alignRight", true, "onFocusOut", "hideMenu", "onFocusIn", "showMenu", "hideOnChildFocus", true, "hideOnClick", true], 0, null, ["loc", [null, [1, 0], [28, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-organisation-content/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-organisation-content'],

    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service('notification'),
    sessionService: _ember['default'].inject.service('session'),
    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    tagService: _ember['default'].inject.service('tags'),
    metrics: _ember['default'].inject.service(),

    suggestedTags: [],
    erroredDomains: [],
    errors: [],
    errorMap: null,

    isDomainEdited: false,
    isSaving: false,
    editedCustomFields: null,
    isOrganisationEdited: false,
    isCaseAccessEdited: false,

    organizationIconPath: _frontendCpConfigEnvironment['default'].assetRoot + '/images/icons/organization.svg',
    // Params
    canDelete: false,

    isEditInProgress: false,

    replyContent: '',
    notes: [],
    totalNotes: 0,

    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);

      if (!oldAttrs || newAttrs.model.value !== oldAttrs.model.value) {
        this.set('notes', []);
        this.set('totalNotes', 0);

        this.requestOrganizationNotes();
      }
    },

    isContentEdited: _ember['default'].computed('replyContent', function () {
      return this.get('replyContent').trim() !== '';
    }),

    isEdited: _ember['default'].computed('isContentEdited', 'isOrganisationEdited', function () {
      return this.get('isContentEdited') || this.get('isOrganisationEdited');
    }),

    caseAccessList: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('organisation.infobar.cases.shared.true'),
        value: true
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('organisation.infobar.cases.shared.false'),
        value: false
      })];
    }),

    initErrorMap: _ember['default'].on('init', function () {
      this.set('errorMap', _ember['default'].Object.create());
    }),

    initCustomFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('editedCustomFields', new _ember['default'].Object());
      this.get('model.tags').then(function (tags) {
        _this.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    }),

    domains: _ember['default'].computed('model.domains.[]', function () {
      return this.get('model.domains'); //.map(domain => domain.get('domain')).uniq();
    }),

    isTagsFieldEdited: _ember['default'].computed('cachedTags.[]', 'model.tags.@each.id', function () {
      var cachedTagNames = this.get('cachedTags');
      var tags = this.get('model.tags');
      return this.get('tagService').areTagNamesMatchingCache(cachedTagNames, tags);
    }),

    submitDisabled: _ember['default'].computed('isSaving', 'isEdited', function () {
      return this.get('isSaving') || !this.get('isEdited');
    }),

    customFieldValueHash: _ember['default'].computed('model.customFields.@each.value', function () {
      var values = _ember['default'].Object.create();
      this.get('model.customFields').forEach(function (field) {
        values.set(field.get('field.id'), field.get('value'));
      });
      return values;
    }),

    convertErrorsToMap: function convertErrorsToMap(errors) {
      return (errors || []).filter(function (error) {
        return error.parameter;
      }).reduce(function (errorMap, error) {
        errorMap.set(error.parameter, true);
        return errorMap;
      }, _ember['default'].Object.create({}));
    },

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('errorMap', _ember['default'].Object.create());
      this.set('isDomainEdited', false);
      this.set('isNameEdited', false);
      this.set('isDomainErrored', false);
      this.set('isSaving', false);
      this.set('replyContent', '');
      this.set('isEditInProgress', false);

      this.updateDirtyFieldHash();
    },

    refreshTags: function refreshTags() {
      var _this2 = this;

      this.get('tagService').refreshTagsForOrganization(this.get('model')).then(function (tags) {
        _this2.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    },

    organisationDates: _ember['default'].computed('model.createdAt', 'model.updatedAt', function () {
      return [{
        title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('model.createdAt'),
        type: 'created'
      }, {
        title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('model.updatedAt'),
        type: 'updated'
      }];
    }),

    updatedDate: _ember['default'].computed('organisationDates.[]', function () {
      return this.get('organisationDates').findBy('type', 'updated');
    }),

    customFields: _ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    requestOrganizationNotes: function requestOrganizationNotes() {
      var _this3 = this;

      var store = this.get('store');
      var organization = this.get('model');

      // when we request organization notes, we convert them to post models
      // that can be used by ko-feed/item component
      store.query('organization-note', { parent: organization, limit: 20 }).then(function (notes) {
        _this3.set('totalNotes', notes.get('meta.total'));

        var notesList = store.peekAll('post').filter(function (post) {
          return post.get('original.parent.id') === organization.get('id');
        });

        _this3.set('notes', notesList);
      });
    },

    suggestTagsCallback: function suggestTagsCallback() {
      var _this4 = this;

      var searchTerm = this.get('tagSearchTerm');
      var selectedTags = this.get('model.tags');
      var suggestionService = this.get('tagSuggestionService');
      suggestionService.suggest(searchTerm).then(function (data) {
        if (suggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        data = suggestionService.exclude(data, selectedTags.mapBy('name'));

        _this4.set('suggestedTags', data.map(function (tag) {
          return tag.get('name');
        }));
        suggestionService.flushQueue();
      });
    },

    updateDirtyFieldHash: function updateDirtyFieldHash() {
      var _this5 = this;

      var editedCustomFields = this.get('editedCustomFields');
      this.get('model.customFields').forEach(function (customField) {
        var id = customField.get('field.id');
        var changed = Boolean(customField.changedAttributes().value);
        editedCustomFields.set(id, changed);
      });

      var fields = ['isDomainEdited', 'isTagsFieldEdited', 'isNameEdited', 'isCaseAccessEdited'];
      var systemFieldEdited = fields.any(function (field) {
        return _this5.get(field);
      });
      var customEdited = Object.values(editedCustomFields).reduce(function (accum, current) {
        return accum || current;
      }, false);

      this.set('isOrganisationEdited', systemFieldEdited || customEdited);
    },

    actions: {
      textEditorFocusStateChange: function textEditorFocusStateChange(state) {
        if (!state) {
          this.set('isEditInProgress', false);
        }
      },

      beginReply: function beginReply() {
        this.set('isEditInProgress', true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });
      },

      addTag: function addTag(tagName) {
        var newTag = this.get('tagService').getTagByName(tagName);
        newTag.set('isNew', true);
        this.get('model.tags').pushObject(newTag);
        this.set('errorMap.tags', null);
        this.updateDirtyFieldHash();
      },

      removeTag: function removeTag(tag) {
        this.get('model.tags').removeObject(tag);
        this.set('errorMap.tags', null);
        this.updateDirtyFieldHash();
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        this.set('tagSearchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.suggestTagsCallback, 300);
      },

      addDomain: function addDomain(domainName) {
        if (!domainName) {
          return;
        }
        if (this.get('model.domains').any(function (domain) {
          return domain.get('domain') === domainName;
        })) {
          // don't add duplicate domains
          return;
        }
        var domain = this.get('store').createRecord('identityDomain', {
          domain: domainName
        });
        this.get('model.domains').pushObject(domain);
        this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        this.set('errorMap.domains', null);
        this.updateDirtyFieldHash();
      },

      removeDomain: function removeDomain(domain) {
        this.get('model.domains').removeObject(domain);
        this.set('isDomainEdited', this.get('model').hasDirtyHasManyRelationship('domains'));
        this.set('errorMap.domains', null);
        this.updateDirtyFieldHash();
      },

      casesSharedStateSelect: function casesSharedStateSelect(sharedState) {
        this.set('model.isShared', sharedState);
        this.set('isCaseAccessEdited', this.get('model').hasDirtyAttribute('isShared'));
        this.updateDirtyFieldHash();
      },

      setName: function setName(name) {
        this.set('model.name', name);
        this.set('isNameEdited', this.get('model').hasDirtyAttribute('name'));
        this.set('errorMap.name', null);
        this.updateDirtyFieldHash();
      },

      submit: function submit() {
        var _this6 = this;

        this.set('isSaving', true);
        this.get('model').saveWithNote(this.get('replyContent')).then(function (organization) {
          // Get rid of unsaved domains hanging around
          organization.set('domains', organization.get('domains').filter(function (domain) {
            return domain.get('id');
          }));

          _this6.get('notification').add({
            type: 'success',
            title: _this6.get('intl').findTranslationByKey('organisation.organisation.updated'),
            autodismiss: true
          });
          _this6.resetForm();
          _this6.refreshTags();
          _this6.requestOrganizationNotes();

          _this6.get('metrics').trackEvent({
            event: 'Organization Updated',
            category: 'Organization',
            action: 'click',
            label: 'submit button'
          });
        }, function (e) {
          _this6.set('errors', e.errors);
          _this6.set('errorMap', _this6.convertErrorsToMap(e.errors));
          _this6.set('isSaving', false);

          _this6.get('metrics').trackEvent({
            event: 'Organization Update Failed',
            category: 'Organization',
            action: 'click',
            label: 'submit button'
          });
        });
      },

      fieldUpdated: function fieldUpdated(field, value) {
        this.get('errorMap').set(field.get('key'), false);
        var valueObject = this.get('model.customFields').find(function (value) {
          return value.get('field.id') === field.get('id');
        });

        if (!valueObject) {
          valueObject = this.get('model.customFields').createFragment({
            fieldFragment: this.get('store').createFragment('relationship-fragment', {
              relationshipId: field.id,
              relationshipType: field.type
            })
          });
        }
        valueObject.set('value', value);
        this.updateDirtyFieldHash();
      },

      updatePostContent: function updatePostContent(newContent) {
        this.set('replyContent', newContent);
      }
    }
  });
});
define("frontend-cp/components/ko-organisation-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 7,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-loader", [], ["class", "ko-layout_advanced__button-loading"], ["loc", [null, [6, 10], [6, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [8, 10], [8, 30]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element7, 'class');
              morphs[1] = dom.createAttrMorph(element7, 'onclick');
              morphs[2] = dom.createMorphAt(element7, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [4, 69], [4, 83]]]], "disabled"], [], ["loc", [null, [4, 64], [4, 96]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [4, 106], [4, 125]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [5, 14], [5, 22]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-info-bar/item", [], [], 0, null, ["loc", [null, [3, 4], [11, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 52,
                      "column": 8
                    },
                    "end": {
                      "line": 64,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [53, 33], [53, 62]]]], ["get", "field.fieldType", ["loc", [null, [53, 63], [53, 78]]]]], [], ["loc", [null, [53, 22], [53, 79]]]]], ["value", ["subexpr", "get", [["get", "customFieldValueHash", ["loc", [null, [54, 21], [54, 41]]]], ["get", "field.id", ["loc", [null, [54, 42], [54, 50]]]]], [], ["loc", [null, [54, 16], [54, 51]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [55, 18], [55, 31]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [56, 16], [56, 27]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [57, 25], [57, 33]]]], ["get", "field.key", ["loc", [null, [57, 34], [57, 43]]]]], [], ["loc", [null, [57, 20], [57, 44]]]], "isEdited", ["subexpr", "get", [["get", "editedCustomFields", ["loc", [null, [58, 24], [58, 42]]]], ["get", "field.id", ["loc", [null, [58, 43], [58, 51]]]]], [], ["loc", [null, [58, 19], [58, 52]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [59, 30], [59, 55]]]]], [], ["loc", [null, [59, 25], [59, 56]]]], "onValueChange", ["subexpr", "action", ["fieldUpdated", ["get", "field", ["loc", [null, [60, 47], [60, 52]]]]], [], ["loc", [null, [60, 24], [60, 53]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [53, 10], [63, 12]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 51,
                    "column": 6
                  },
                  "end": {
                    "line": 65,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [52, 14], [52, 29]]]]], [], 0, null, ["loc", [null, [52, 8], [64, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 50,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [51, 23], [51, 52]]]], ["get", "field.fieldType", ["loc", [null, [51, 53], [51, 68]]]]], [], ["loc", [null, [51, 12], [51, 69]]]]], [], 0, null, ["loc", [null, [51, 6], [65, 13]]]]],
            locals: ["field"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 69,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.tags"], [], ["loc", [null, [16, 12], [16, 28]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [17, 15], [17, 32]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.tags", ["loc", [null, [18, 16], [18, 29]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.tags", ["loc", [null, [19, 19], [19, 29]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [20, 20], [20, 33]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newtag"], [], ["loc", [null, [21, 17], [21, 35]]]], "addTagText", ["subexpr", "t", ["users.addtag"], [], ["loc", [null, [22, 17], [22, 35]]]], "onTagAddition", ["subexpr", "action", ["addTag"], [], ["loc", [null, [23, 20], [23, 37]]]], "onTagRemoval", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [24, 19], [24, 39]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [25, 22], [25, 44]]]]], ["loc", [null, [15, 4], [26, 6]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["organisation.domains"], [], ["loc", [null, [29, 12], [29, 38]]]], "isEdited", ["subexpr", "@mut", [["get", "isDomainEdited", ["loc", [null, [30, 15], [30, 29]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.domains", ["loc", [null, [31, 16], [31, 32]]]]], [], []], "errorTags", ["subexpr", "@mut", [["get", "erroredDomains", ["loc", [null, [32, 16], [32, 30]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.domains", ["loc", [null, [33, 19], [33, 32]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addDomain"], [], ["loc", [null, [34, 20], [34, 40]]]], "onTagRemoval", ["subexpr", "action", ["removeDomain"], [], ["loc", [null, [35, 19], [35, 42]]]]], ["loc", [null, [28, 4], [36, 6]]]], ["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["organisation.infobar.accesslevel"], [], ["loc", [null, [39, 12], [39, 50]]]], "options", ["subexpr", "@mut", [["get", "caseAccessList", ["loc", [null, [40, 14], [40, 28]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.isShared", ["loc", [null, [41, 12], [41, 26]]]]], [], []], "onValueChange", ["subexpr", "action", ["casesSharedStateSelect"], [], ["loc", [null, [42, 20], [42, 53]]]], "hasEmptyOption", false, "renderInPlace", true, "searchEnabled", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [38, 4], [48, 6]]]], ["block", "each", [["get", "customFields", ["loc", [null, [50, 12], [50, 24]]]]], [], 0, null, ["loc", [null, [50, 4], [66, 13]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "organisationDates", ["loc", [null, [68, 32], [68, 49]]]]], [], []]], ["loc", [null, [68, 4], [68, 51]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 71,
                "column": 2
              },
              "end": {
                "line": 110,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-layout_advanced_heading");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__left");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-layout_advanced_section");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__image");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("img");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__img");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__body");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("h3");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__subject");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("p");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__subtitle");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__right");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "list-inline t-right");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var element3 = dom.childAt(element2, [1, 1]);
            var element4 = dom.childAt(element3, [1, 1]);
            var element5 = dom.childAt(element3, [3]);
            var element6 = dom.childAt(element5, [3]);
            var morphs = new Array(5);
            morphs[0] = dom.createAttrMorph(element4, 'src');
            morphs[1] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
            morphs[2] = dom.createMorphAt(element6, 1, 1);
            morphs[3] = dom.createMorphAt(element6, 3, 3);
            morphs[4] = dom.createMorphAt(dom.childAt(element2, [3, 1, 5]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "organizationIconPath", ["loc", [null, [76, 24], [76, 44]]]]]]], ["inline", "ko-editable-text", [], ["value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [81, 22], [81, 32]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isNameEdited", ["loc", [null, [82, 25], [82, 37]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.name", ["loc", [null, [83, 26], [83, 39]]]]], [], []], "onValueChange", "setName", "placeholder", ["subexpr", "t", ["organisation.new_organisation_placeholder"], [], ["loc", [null, [85, 28], [85, 75]]]]], ["loc", [null, [80, 14], [86, 16]]]], ["content", "updatedDate.title", ["loc", [null, [90, 14], [90, 35]]]], ["inline", "ko-datetime-format", [["get", "updatedDate.value", ["loc", [null, [90, 57], [90, 74]]]]], [], ["loc", [null, [90, 36], [90, 76]]]], ["inline", "ko-organisation-action-menu", [], ["permissions", ["subexpr", "@mut", [["get", "sessionService.permissions", ["loc", [null, [101, 26], [101, 52]]]]], [], []], "canDelete", ["subexpr", "@mut", [["get", "canDelete", ["loc", [null, [102, 24], [102, 33]]]]], [], []], "organisation", ["subexpr", "@mut", [["get", "model", ["loc", [null, [103, 27], [103, 32]]]]], [], []], "closeTab", ["subexpr", "@mut", [["get", "closeTab", ["loc", [null, [104, 23], [104, 31]]]]], [], []]], ["loc", [null, [100, 12], [105, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 136,
                        "column": 12
                      },
                      "end": {
                        "line": 140,
                        "column": 12
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "ko-text-editor-header-group__item ko-text-editor-header-group__item--single t-base ko-text-editor-header-group__item__set-note ko-text-editor-header-group__item--active");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["users.notes"], [], ["loc", [null, [138, 16], [138, 35]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 142,
                        "column": 12
                      },
                      "end": {
                        "line": 148,
                        "column": 12
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "ko-layout_advanced__editor-overlay");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2, "class", "ko-layout_advanced__note-reminder");
                    var el3 = dom.createTextNode("\n                  ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("\n                ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["generic.texteditor.notes_reminder"], [], ["loc", [null, [145, 18], [145, 59]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 116,
                      "column": 10
                    },
                    "end": {
                      "line": 150,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  return morphs;
                },
                statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [136, 18], [136, 33]]]]], [], 0, null, ["loc", [null, [136, 12], [140, 19]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [142, 18], [142, 38]]]]], [], 1, null, ["loc", [null, [142, 12], [148, 19]]]]],
                locals: ["editor"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 114,
                    "column": 6
                  },
                  "end": {
                    "line": 152,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-layout_advanced_editor");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [117, 28], [117, 43]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [118, 22], [118, 31]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [119, 33], [119, 53]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [120, 35], [120, 57]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [121, 34], [121, 63]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [122, 33], [122, 49]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "placeholder", ["subexpr", "t", ["users.add_a_note"], [], ["loc", [null, [125, 24], [125, 46]]]], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [126, 22], [126, 31]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [127, 25], [127, 42]]]]], [], []], "textAreaIsSmall", true, "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [129, 29], [129, 40]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [130, 28], [130, 42]]]]], [], []], "onTextChanged", ["subexpr", "action", ["updatePostContent"], [], ["loc", [null, [131, 26], [131, 54]]]], "value", ["subexpr", "@mut", [["get", "replyContent", ["loc", [null, [132, 18], [132, 30]]]]], [], []], "onFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange"], [], ["loc", [null, [133, 31], [133, 68]]]]], 0, null, ["loc", [null, [116, 10], [150, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 152,
                    "column": 6
                  },
                  "end": {
                    "line": 156,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-layout_advanced_editor__placeholder");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-layout_advanced_editor__action");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("...\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [3]);
                var morphs = new Array(4);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 1, 1);
                morphs[2] = dom.createElementMorph(element1);
                morphs[3] = dom.createMorphAt(element1, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["beginReply"], [], ["loc", [null, [153, 13], [153, 36]]]], ["inline", "t", ["generic.reply.click_to_leave_a"], [], ["loc", [null, [154, 10], [154, 48]]]], ["element", "action", ["beginReply"], [], ["loc", [null, [154, 97], [154, 120]]]], ["inline", "t", ["generic.reply.note"], [], ["loc", [null, [154, 121], [154, 147]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 113,
                  "column": 4
                },
                "end": {
                  "line": 157,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditInProgress", ["loc", [null, [114, 12], [114, 28]]]]], [], 0, 1, ["loc", [null, [114, 6], [156, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 112,
                "column": 2
              },
              "end": {
                "line": 158,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [113, 14], [113, 18]]]], "reply-area"], [], ["loc", [null, [113, 10], [113, 32]]]]], [], 0, null, ["loc", [null, [113, 4], [157, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 160,
                "column": 2
              },
              "end": {
                "line": 168,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-timeline", [], ["controlsVisible", false, "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [163, 10], [163, 15]]]]], [], []], "posts", ["subexpr", "@mut", [["get", "notes", ["loc", [null, [164, 10], [164, 15]]]]], [], []], "totalNotes", ["subexpr", "@mut", [["get", "totalNotes", ["loc", [null, [165, 15], [165, 25]]]]], [], []], "isReplyDisabled", true], ["loc", [null, [161, 4], [167, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 169,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "sidebar-sticky"], [], ["loc", [null, [2, 8], [2, 34]]]]], [], 0, null, ["loc", [null, [2, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [14, 12], [14, 16]]]], "sidebar"], [], ["loc", [null, [14, 8], [14, 27]]]]], [], 1, null, ["loc", [null, [14, 2], [69, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [71, 12], [71, 16]]]], "heading"], [], ["loc", [null, [71, 8], [71, 27]]]]], [], 2, null, ["loc", [null, [71, 2], [110, 9]]]], ["block", "if", [["get", "features.organizationNote", ["loc", [null, [112, 8], [112, 33]]]]], [], 3, null, ["loc", [null, [112, 2], [158, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [160, 12], [160, 16]]]], "timeline-area"], [], ["loc", [null, [160, 8], [160, 33]]]]], [], 4, null, ["loc", [null, [160, 2], [168, 9]]]]],
        locals: ["name"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 169,
            "column": 23
          }
        },
        "moduleName": "frontend-cp/components/ko-organisation-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-layout/advanced", [], [], 0, null, ["loc", [null, [1, 0], [169, 23]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-pagination/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    currentPage: 1,
    loadingPage: null,
    pageCount: 1,

    // HTML
    classNames: ['ko-pagination'],

    previousPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') - 1;
    }),

    nextPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') + 1;
    }),

    hasPreviousPage: _ember['default'].computed('currentPage', function () {
      return this.get('currentPage') > 1;
    }),

    hasNextPage: _ember['default'].computed('currentPage', 'pageCount', function () {
      return this.get('currentPage') < this.get('pageCount');
    })
  });
});
define("frontend-cp/components/ko-pagination/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-pagination/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-pagination__container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-pagination__pageNumber");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "ko-pagination__pageCount");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [5]);
        var element2 = dom.childAt(element0, [7]);
        var element3 = dom.childAt(element0, [9]);
        var element4 = dom.childAt(element0, [11]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createAttrMorph(element2, 'class');
        morphs[5] = dom.createMorphAt(element2, 1, 1);
        morphs[6] = dom.createAttrMorph(element3, 'class');
        morphs[7] = dom.createMorphAt(element3, 1, 1);
        morphs[8] = dom.createAttrMorph(element4, 'class');
        morphs[9] = dom.createMorphAt(element4, 1, 1);
        return morphs;
      },
      statements: [["content", "currentPage", ["loc", [null, [2, 42], [2, 57]]]], ["inline", "t", ["generic.paginatorof"], ["number", ["subexpr", "or", [["get", "pageCount", ["loc", [null, [3, 78], [3, 87]]]], 1], [], ["loc", [null, [3, 74], [3, 90]]]]], ["loc", [null, [3, 41], [3, 92]]]], ["attribute", "class", ["concat", ["ko-pagination__first i-chevron-double-up i-center ", ["subexpr", "if", [["get", "hasPreviousPage", ["loc", [null, [4, 69], [4, 84]]]], "ko-pagination__first--available", ""], [], ["loc", [null, [4, 64], [4, 123]]]]]]], ["inline", "yield", [1], [], ["loc", [null, [5, 4], [5, 15]]]], ["attribute", "class", ["concat", ["ko-pagination__previous i-chevron-large-up i-center i-size-18 ", ["subexpr", "if", [["get", "hasPreviousPage", ["loc", [null, [7, 81], [7, 96]]]], "ko-pagination__previous--available", ""], [], ["loc", [null, [7, 76], [7, 138]]]]]]], ["inline", "yield", [["get", "previousPage", ["loc", [null, [8, 12], [8, 24]]]]], [], ["loc", [null, [8, 4], [8, 26]]]], ["attribute", "class", ["concat", ["ko-pagination__next i-chevron-large-down i-center i-size-18 ", ["subexpr", "if", [["get", "hasNextPage", ["loc", [null, [10, 79], [10, 90]]]], "ko-pagination__next--available", ""], [], ["loc", [null, [10, 74], [10, 128]]]]]]], ["inline", "yield", [["get", "nextPage", ["loc", [null, [11, 12], [11, 20]]]]], [], ["loc", [null, [11, 4], [11, 22]]]], ["attribute", "class", ["concat", ["ko-pagination__last i-chevron-double-down i-center ", ["subexpr", "if", [["get", "hasNextPage", ["loc", [null, [13, 70], [13, 81]]]], "ko-pagination__last--available", ""], [], ["loc", [null, [13, 65], [13, 119]]]]]]], ["inline", "yield", [["get", "pageCount", ["loc", [null, [14, 12], [14, 21]]]]], [], ["loc", [null, [14, 4], [14, 23]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-people-popover/component', ['exports', 'ember', 'frontend-cp/lib/keycodes', 'frontend-cp/utils/format-validations'], function (exports, _ember, _frontendCpLibKeycodes, _frontendCpUtilsFormatValidations) {

  var debounceQueryTimeout = 150;

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    suggestedPeople: null,
    selectedPeople: null,
    suggestedPeopleTotal: 0,
    isLoading: true,
    filterNotFoundText: '',
    helpText: '',
    inputPlaceholderText: '',
    emailErrorText: '',
    isShowing: false,
    onPeopleSuggestion: null,
    onPersonSelect: null,
    onPersonRemove: null,

    // State
    keyboardIndexPosition: 0,
    searchTerm: null,
    searchTermEmailNotValid: false,

    // HTML
    classNames: ['ko-people-popover'],

    // Services
    intl: _ember['default'].inject.service(),

    searchAttempt: _ember['default'].computed('searchTerm', 'suggestedPeople', function () {
      return Boolean(this.get('searchTerm') && this.get('suggestedPeople') !== null);
    }),

    didShowingChange: _ember['default'].on('init', _ember['default'].observer('isShowing', function () {
      if (this.get('isShowing')) {
        this.$('.input-text').focus();
      }
    })),

    onSearchTerm: _ember['default'].observer('searchTerm', function () {
      _ember['default'].run.debounce(this, this.suggestPeople, debounceQueryTimeout);
    }),

    suggestPeople: function suggestPeople() {
      this.attrs.onPeopleSuggestion(this.get('searchTerm'), this.get('selectedPeople'));
    },

    keyDown: function keyDown(e) {
      var searchTerm = this.get('searchTerm');

      var keyboardIndexPosition = this.get('keyboardIndexPosition');
      var suggestedPeople = this.get('suggestedPeople');
      var suggestedPeopleLength = suggestedPeople ? suggestedPeople.length : 0;
      var suggestionsListSelector = '.ko-people-popover__filtered-list';

      this.set('searchTermEmailNotValid', false);

      switch (e.keyCode) {
        case _frontendCpLibKeycodes.up:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'up', 'keyboardIndexPosition');

          if (keyboardIndexPosition - 1 === 0) {
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          return false;

        case _frontendCpLibKeycodes.down:
          this.moveSelectedItem(suggestedPeopleLength, suggestionsListSelector, 'down', 'keyboardIndexPosition');
          return false;

        case _frontendCpLibKeycodes.enter:
          if (keyboardIndexPosition === 0) {
            this.send('addPerson', searchTerm);
          } else {
            this.send('addPersonFromSuggestion', suggestedPeople.objectAt(keyboardIndexPosition - 1));
            this.set('keyboardIndexPosition', 0);
            this.$('input').focus();
          }

          break;
      }
    },

    resetSearchQuery: function resetSearchQuery() {
      this.attrs.onPeopleSuggestion(null);
      this.set('searchTerm', null);
      this.$('input').focus();
    },

    moveSelectedItem: function moveSelectedItem(listLength, ulSelector, direction, positionProperty) {
      var position = this.get(positionProperty);
      switch (direction) {
        case 'down':
          {
            position = ++position;
            if (position <= listLength) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
        case 'up':
          {
            position = --position;
            if (position > 0) {
              this.$(ulSelector + ' li:nth-of-type(' + position + ')').focus();
              this.set(positionProperty, position);
            }
            break;
          }
      }
    },

    actions: {
      addPerson: function addPerson(email) {
        email = email.replace(/\s+/, '');

        if (!email || !(0, _frontendCpUtilsFormatValidations.validateEmailFormat)(email)) {
          this.set('searchTermEmailNotValid', true);
          return;
        }
        this.set('searchTermEmailNotValid', false);

        if (this.get('selectedPeople').indexOf(email) !== -1) {
          this.resetSearchQuery();
          return;
        }

        this.attrs.onPersonSelect(email);
        this.resetSearchQuery();
      },

      addPersonFromSuggestion: function addPersonFromSuggestion(person) {
        this.attrs.onPersonSelect(person.get('email'));
        this.resetSearchQuery();
      }
    }
  });
});
define("frontend-cp/components/ko-people-popover/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-people-popover__input-error");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "emailErrorText", ["loc", [null, [17, 48], [17, 66]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 4
              },
              "end": {
                "line": 32,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "ko-people-popover__selected-list");
            dom.setAttribute(el1, "role", "menu");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "ko-people-popover__selected-list-item");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "u-inline-block ko-people-popover__selected-item-name");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "ko-people-popover__cross i-cross-bold i-color-grey--light");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1, 1]);
            var element3 = dom.childAt(element2, [3]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
            morphs[1] = dom.createAttrMorph(element3, 'onclick');
            return morphs;
          },
          statements: [["content", "email", ["loc", [null, [27, 12], [27, 21]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onPersonRemove", ["loc", [null, [29, 96], [29, 110]]]], ["get", "email", ["loc", [null, [29, 111], [29, 116]]]]], [], ["loc", [null, [29, 87], [29, 118]]]]]],
          locals: ["email"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box ko-people-popover__selected-list-container");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "selectedPeople", ["loc", [null, [23, 12], [23, 26]]]]], [], 0, null, ["loc", [null, [23, 4], [32, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 40,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "box ko-people-popover__loader-block");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-people-popover__loader"], ["loc", [null, [38, 4], [38, 51]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 12
                  },
                  "end": {
                    "line": 50,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-avatar", [], ["size", "large", "class", "ko-people-popover__image", "avatar", ["subexpr", "@mut", [["get", "person.user.avatar", ["loc", [null, [49, 79], [49, 97]]]]], [], []]], ["loc", [null, [49, 14], [49, 99]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 18
                    },
                    "end": {
                      "line": 56,
                      "column": 18
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                    , ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "person.user.organization.name", ["loc", [null, [55, 22], [55, 55]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 50,
                    "column": 12
                  },
                  "end": {
                    "line": 60,
                    "column": 12
                  }
                },
                "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("strong");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "ko-people-popover__caption");
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-people-popover__org-caption");
                var el3 = dom.createTextNode("\n");
                dom.appendChild(el2, el3);
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                var el3 = dom.createTextNode("                ");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-people-popover__email-caption");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [3]);
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
                morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
                return morphs;
              },
              statements: [["content", "person.user.fullName", ["loc", [null, [51, 22], [51, 46]]]], ["block", "if", [["get", "person.user.organization.name", ["loc", [null, [54, 24], [54, 53]]]]], [], 0, null, ["loc", [null, [54, 18], [56, 25]]]], ["content", "person.email", ["loc", [null, [58, 63], [58, 79]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 44,
                  "column": 8
                },
                "end": {
                  "line": 62,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 2,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              dom.setAttribute(el1, "class", "ko-people-popover__filtered-list-item");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element1, 'onclick');
              morphs[1] = dom.createAttrMorph(element1, 'tabindex');
              morphs[2] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", ["addPersonFromSuggestion", ["get", "person", ["loc", [null, [45, 57], [45, 63]]]]], [], ["loc", [null, [45, 22], [45, 65]]]]], ["attribute", "tabindex", ["concat", [["get", "index", ["loc", [null, [46, 26], [46, 31]]]]]]], ["block", "ko-flag", [], [], 0, 1, ["loc", [null, [48, 12], [60, 24]]]]],
            locals: ["person", "index"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 2
              },
              "end": {
                "line": 65,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-people-popover__filtered-list-container");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("ul");
            dom.setAttribute(el2, "class", "ko-people-popover__filtered-list");
            dom.setAttribute(el2, "role", "menu");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "suggestedPeople", ["loc", [null, [44, 16], [44, 31]]]]], [], 0, null, ["loc", [null, [44, 8], [62, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 68,
                  "column": 4
                },
                "end": {
                  "line": 72,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "box header__subtitle ko-people-popover__not-found");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["content", "filterNotFoundText", ["loc", [null, [70, 8], [70, 30]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 2
              },
              "end": {
                "line": 73,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "suggestedPeople", ["loc", [null, [68, 14], [68, 29]]]]], [], 0, null, ["loc", [null, [68, 4], [72, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 2
              },
              "end": {
                "line": 77,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "box header__subtitle ko-people-popover__subtitle");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "helpText", ["loc", [null, [75, 6], [75, 18]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 40,
              "column": 0
            },
            "end": {
              "line": 78,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "searchAttempt", ["loc", [null, [41, 8], [41, 21]]]]], [], 0, null, ["loc", [null, [41, 2], [65, 9]]]], ["block", "if", [["get", "searchAttempt", ["loc", [null, [67, 8], [67, 21]]]]], [], 1, 2, ["loc", [null, [67, 2], [77, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 79,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-people-popover/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "box");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "input i--search-small");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ko-people-popover__button-space");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "button");
        dom.setAttribute(el4, "class", "button button--default ko-people-popover__button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [4, 1]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(element5, 1, 1);
        morphs[1] = dom.createAttrMorph(element6, 'onclick');
        morphs[2] = dom.createMorphAt(element6, 0, 0);
        morphs[3] = dom.createMorphAt(element4, 3, 3);
        morphs[4] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "input", [], ["class", "ko-people-popover__input input-text u-1/1", "type", "text", "placeholder", ["subexpr", "@mut", [["get", "inputPlaceholderText", ["loc", [null, [5, 18], [5, 38]]]]], [], []], "value", ["subexpr", "@mut", [["get", "searchTerm", ["loc", [null, [6, 12], [6, 22]]]]], [], []]], ["loc", [null, [3, 6], [7, 8]]]], ["attribute", "onclick", ["subexpr", "action", ["addPerson", ["get", "searchTerm", ["loc", [null, [10, 57], [10, 67]]]]], [], ["loc", [null, [10, 36], [10, 69]]]]], ["inline", "t", ["generic.add"], [], ["loc", [null, [11, 65], [11, 84]]]], ["block", "if", [["get", "searchTermEmailNotValid", ["loc", [null, [16, 8], [16, 31]]]]], [], 0, null, ["loc", [null, [16, 2], [18, 9]]]], ["block", "if", [["get", "selectedPeople", ["loc", [null, [21, 6], [21, 20]]]]], [], 1, null, ["loc", [null, [21, 0], [34, 7]]]], ["block", "if", [["get", "isLoading", ["loc", [null, [36, 6], [36, 15]]]]], [], 2, 3, ["loc", [null, [36, 0], [78, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define('frontend-cp/components/ko-predicate-builder/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    definitions: [],
    collections: [],
    onCollectionAddition: null,
    onCollectionRemoval: null,
    onAdditionOfRuleToCollection: null,
    onRuleDeletion: null,
    canDeleteCollection: false
  });
});
define('frontend-cp/components/ko-predicate-builder/rule/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  var observer = _ember['default'].observer;
  var on = _ember['default'].on;
  exports['default'] = _ember['default'].Component.extend({
    intl: inject.service(),
    store: inject.service(),

    canDeleteRule: false,
    definitions: [],
    onRuleDeletion: null,
    rule: null,
    currentUserString: 'current user',

    // HTML
    classNames: ['ko-predicate-builder_rule'],

    definition: computed('definitions.@each.id', 'rule.field', function () {
      return this.get('definitions').findBy('id', this.get('rule.field'));
    }),

    definitionInputType: computed('definition.inputType', function () {
      var inputType = this.get('definition.inputType');

      if (inputType) {
        return _ember['default'].String.dasherize(inputType);
      } else {
        return null;
      }
    }),

    value: computed('rule.value', 'definition.values.@each.value', 'definitionInputType', 'autocompleteType', function () {
      var ruleValue = this.get('rule.value');

      switch (this.get('definitionInputType')) {
        case 'options':
          {
            var definitionValues = this.get('definition.values');

            if (definitionValues) {
              return definitionValues.findBy('value', ruleValue);
            } else {
              return null;
            }
          }
        case 'autocomplete':
          {
            var currentUserString = '(' + this.get('currentUserString') + ')';
            if (ruleValue) {
              if (ruleValue === currentUserString) {
                return _ember['default'].Object.create({ id: currentUserString, fullName: currentUserString });
              } else {
                return this.get('store').findRecord(this.get('autocompleteType'), ruleValue);
              }
            } else {
              return null;
            }
          }
        case 'tags':
          {
            if (ruleValue) {
              return ruleValue.split(',').map(function (t) {
                return _ember['default'].Object.create({ name: t });
              });
            } else {
              return [];
            }
          }
        default:
          return ruleValue;
      }
    }),

    autocompleteType: computed('rule.field', function () {
      switch (this.get('rule.field')) {
        case 'cases.organizationid':
          return 'organization';
        default:
          return 'user';
      }
    }),

    autocompleteQueryOptions: computed('rule.field', function () {
      switch (this.get('rule.field')) {
        case 'cases.assigneeagentid':
          return { 'in': 'ADMINS,AGENTS,COLLABORATORS' };
        default:
          return {};
      }
    }),

    autocompleteOptionLabelPath: computed('autocompleteType', function () {
      switch (this.get('autocompleteType')) {
        case 'user':
          return 'fullName';
        default:
          return 'name';
      }
    }),

    initializeRuleField: observer('definitions.firstObject', on('init', function () {
      if (!this.get('rule.field')) {
        this.set('rule.field', this.get('definitions.firstObject.id'));
      }
    })),

    initializeRuleOperator: observer('rule.field', function () {
      var definitionOperators = this.get('definition.operators');

      if (definitionOperators) {
        if (!definitionOperators.contains(this.get('rule.operator'))) {
          this.set('rule.operator', definitionOperators.get('firstObject'));
        }
      } else {
        this.set('rule.operator', null);
      }
    }),

    initializeRuleValue: observer('rule.field', function () {
      switch (this.get('definitionInputType')) {
        case 'options':
          {
            this.set('rule.value', this.get('definition.values').get('firstObject.value'));
            return;
          }
        case 'date-absolute':
          {
            this.set('rule.value', new Date());
            return;
          }
        case 'tags':
          {
            this.set('rule.value', '');
            return;
          }
        default:
          this.set('rule.value', null);
      }
    }),

    actions: {
      selectDefinition: function selectDefinition(definition) {
        this.set('rule.field', definition.get('id'));
      },

      selectValue: function selectValue(value) {
        this.set('rule.value', value.get('value'));
      },

      selectAutocompleteValue: function selectAutocompleteValue(value) {
        this.set('rule.value', value.get('id'));
      },

      addTagToValue: function addTagToValue(tag) {
        this.set('rule.value', this.get('value').mapBy('name').concat(tag).join(','));
      },

      removeTagFromValue: function removeTagFromValue(tag) {
        this.set('rule.value', _npmLodash['default'].without(this.get('value'), tag).mapBy('name').join(','));
      },

      searchAutocomplete: function searchAutocomplete(text) {
        var currentUserString = this.get('currentUserString');
        var autocompleteType = this.get('autocompleteType');
        var results = new _ember['default'].A();

        this.get('store').query(autocompleteType, _npmLodash['default'].extend({}, this.get('autocompleteQueryOptions'), { name: text })).then(function (searchResults) {
          if (autocompleteType === 'user' && currentUserString.indexOf(text) !== -1) {
            results.pushObject(_ember['default'].Object.create({
              id: '(' + currentUserString + ')',
              fullName: '(' + currentUserString + ')'
            }));
          }
          return searchResults.forEach(function (searchResult) {
            results.pushObject(searchResult);
          });
        });

        return results;
      }
    }
  });
});
define("frontend-cp/components/ko-predicate-builder/rule/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 4
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["subexpr", "concat", ["admin.predicate_builder.", ["get", "definition.id", ["loc", [null, [13, 45], [13, 58]]]]], [], ["loc", [null, [13, 10], [13, 59]]]]], [], ["loc", [null, [13, 6], [13, 61]]]]],
        locals: ["definition"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 4
            },
            "end": {
              "line": 24,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", [["subexpr", "concat", ["admin.predicate_builder.operators.", ["subexpr", "or", [["get", "operator", ["loc", [null, [23, 59], [23, 67]]]], "none"], [], ["loc", [null, [23, 55], [23, 75]]]]], [], ["loc", [null, [23, 10], [23, 76]]]]], [], ["loc", [null, [23, 6], [23, 78]]]]],
        locals: ["operator"],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 6
              },
              "end": {
                "line": 37,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "value.string", ["loc", [null, [36, 10], [36, 26]]]]],
          locals: ["value"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "power-select-multiple", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [29, 97], [29, 133]]]]], [], ["loc", [null, [29, 14], [29, 134]]]], "searchField", "string", "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [31, 17], [31, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.values", ["loc", [null, [32, 16], [32, 33]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "onchange", ["subexpr", "action", ["selectValue"], [], ["loc", [null, [35, 17], [35, 39]]]]], 0, null, ["loc", [null, [28, 6], [37, 32]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 6
                },
                "end": {
                  "line": 47,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "get", [["get", "value", ["loc", [null, [46, 16], [46, 21]]]], ["get", "autocompleteOptionLabelPath", ["loc", [null, [46, 22], [46, 49]]]]], [], ["loc", [null, [46, 10], [46, 51]]]]],
            locals: ["value"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 4
              },
              "end": {
                "line": 48,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [40, 97], [40, 133]]]]], [], ["loc", [null, [40, 14], [40, 134]]]], "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [41, 17], [41, 22]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "search", ["subexpr", "action", ["searchAutocomplete"], [], ["loc", [null, [44, 15], [44, 44]]]], "onchange", ["subexpr", "action", ["selectAutocompleteValue"], [], ["loc", [null, [45, 17], [45, 51]]]]], 0, null, ["loc", [null, [39, 6], [47, 23]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 48,
                  "column": 4
                },
                "end": {
                  "line": 55,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ko-predicate-builder__tags-input");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "ko-tags", [], ["selectedTags", ["subexpr", "@mut", [["get", "value", ["loc", [null, [51, 23], [51, 28]]]]], [], []], "onTagAddition", ["subexpr", "action", ["addTagToValue"], [], ["loc", [null, [52, 24], [52, 48]]]], "onTagRemoval", ["subexpr", "action", ["removeTagFromValue"], [], ["loc", [null, [53, 23], [53, 52]]]]], ["loc", [null, [50, 8], [53, 54]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 56,
                      "column": 6
                    },
                    "end": {
                      "line": 65,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "value.string", ["loc", [null, [64, 10], [64, 26]]]]],
                locals: ["value"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 4
                  },
                  "end": {
                    "line": 66,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "power-select", [], ["class", ["subexpr", "concat", ["ember-power-select-wrapper--ko ember-power-select-wrapper--height-medium", ["subexpr", "qa-cls", [" qa-proposition--property"], [], ["loc", [null, [57, 97], [57, 133]]]]], [], ["loc", [null, [57, 14], [57, 134]]]], "searchField", "string", "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [59, 17], [59, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.values", ["loc", [null, [60, 16], [60, 33]]]]], [], []], "searchEnabled", true, "renderInPlace", true, "onchange", ["subexpr", "action", ["selectValue"], [], ["loc", [null, [63, 17], [63, 39]]]]], 0, null, ["loc", [null, [56, 6], [65, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 66,
                      "column": 4
                    },
                    "end": {
                      "line": 68,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "ko-date-select", [], ["value", ["subexpr", "@mut", [["get", "rule.value", ["loc", [null, [67, 29], [67, 39]]]]], [], []], "onChange", ["subexpr", "action", [["subexpr", "mut", [["get", "rule.value", ["loc", [null, [67, 62], [67, 72]]]]], [], ["loc", [null, [67, 57], [67, 73]]]]], [], ["loc", [null, [67, 49], [67, 74]]]]], ["loc", [null, [67, 6], [67, 76]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 68,
                      "column": 4
                    },
                    "end": {
                      "line": 70,
                      "column": 4
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("      ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n    ");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "class", "ko-predicate-builder_rule__input input-text", "value", ["subexpr", "@mut", [["get", "rule.value", ["loc", [null, [69, 84], [69, 94]]]]], [], []]], ["loc", [null, [69, 6], [69, 96]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 66,
                    "column": 4
                  },
                  "end": {
                    "line": 70,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [66, 18], [66, 37]]]], "date-absolute"], [], ["loc", [null, [66, 14], [66, 54]]]]], [], 0, 1, ["loc", [null, [66, 4], [70, 4]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 55,
                  "column": 4
                },
                "end": {
                  "line": 70,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [55, 18], [55, 37]]]], "options"], [], ["loc", [null, [55, 14], [55, 48]]]]], [], 0, 1, ["loc", [null, [55, 4], [70, 4]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 48,
                "column": 4
              },
              "end": {
                "line": 70,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [48, 18], [48, 37]]]], "tags"], [], ["loc", [null, [48, 14], [48, 45]]]]], [], 0, 1, ["loc", [null, [48, 4], [70, 4]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 70,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [38, 18], [38, 37]]]], "autocomplete"], [], ["loc", [null, [38, 14], [38, 53]]]]], [], 0, 1, ["loc", [null, [38, 4], [70, 4]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 77,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-predicate-builder_rule__remove");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "i-minus-circle i-color-grey--light");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onRuleDeletion", ["loc", [null, [75, 76], [75, 90]]]], ["get", "rule", ["loc", [null, [75, 91], [75, 95]]]]], [], ["loc", [null, [75, 67], [75, 97]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/rule/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-predicate-builder_rule__label");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__item layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-predicate-builder_rule__actions layout__item");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["generic.or"], [], ["loc", [null, [2, 2], [2, 20]]]], ["block", "ko-select", [], ["class", ["subexpr", "qa-cls", ["qa-proposition--column"], [], ["loc", [null, [8, 12], [8, 45]]]], "selected", ["subexpr", "@mut", [["get", "definition", ["loc", [null, [9, 15], [9, 25]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [10, 14], [10, 25]]]]], [], []], "onChange", ["subexpr", "action", ["selectDefinition"], [], ["loc", [null, [11, 15], [11, 42]]]]], 0, null, ["loc", [null, [7, 4], [14, 18]]]], ["block", "ko-select", [], ["class", ["subexpr", "qa-cls", ["qa-proposition--operator"], [], ["loc", [null, [18, 12], [18, 47]]]], "selected", ["subexpr", "@mut", [["get", "rule.operator", ["loc", [null, [19, 15], [19, 28]]]]], [], []], "options", ["subexpr", "@mut", [["get", "definition.operators", ["loc", [null, [20, 14], [20, 34]]]]], [], []], "onChange", ["subexpr", "action", [["subexpr", "mut", [["get", "rule.operator", ["loc", [null, [21, 28], [21, 41]]]]], [], ["loc", [null, [21, 23], [21, 42]]]]], [], ["loc", [null, [21, 15], [21, 43]]]]], 1, null, ["loc", [null, [17, 4], [24, 18]]]], ["block", "if", [["subexpr", "eq", [["get", "definitionInputType", ["loc", [null, [27, 14], [27, 33]]]], "multiple"], [], ["loc", [null, [27, 10], [27, 45]]]]], [], 2, 3, ["loc", [null, [27, 4], [70, 11]]]], ["block", "if", [["get", "canDeleteRule", ["loc", [null, [73, 12], [73, 25]]]]], [], 4, null, ["loc", [null, [73, 6], [77, 13]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define("frontend-cp/components/ko-predicate-builder/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 8,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-predicate-builder__remove");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            dom.setAttribute(el2, "class", "i-minus-square");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onCollectionRemoval", ["loc", [null, [5, 63], [5, 82]]]], ["get", "collection", ["loc", [null, [5, 83], [5, 93]]]]], [], ["loc", [null, [5, 54], [5, 95]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 4
              },
              "end": {
                "line": 18,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-predicate-builder/rule", [], ["class", ["subexpr", "qa-cls", ["qa-predicate-builder--proposition"], [], ["loc", [null, [12, 16], [12, 60]]]], "definitions", ["subexpr", "@mut", [["get", "definitions", ["loc", [null, [13, 22], [13, 33]]]]], [], []], "rule", ["subexpr", "@mut", [["get", "proposition", ["loc", [null, [14, 15], [14, 26]]]]], [], []], "canDeleteRule", ["subexpr", "not", [["subexpr", "eq", [["get", "collection.propositions.length", ["loc", [null, [15, 33], [15, 63]]]], 1], [], ["loc", [null, [15, 29], [15, 66]]]]], [], ["loc", [null, [15, 24], [15, 67]]]], "onRuleDeletion", ["subexpr", "action", [["get", "onRuleDeletion", ["loc", [null, [16, 33], [16, 47]]]], ["get", "collection", ["loc", [null, [16, 48], [16, 58]]]]], [], ["loc", [null, [16, 25], [16, 59]]]]], ["loc", [null, [11, 6], [17, 8]]]]],
          locals: ["proposition"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-predicate-builder");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-predicate-builder__label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-predicate-builder__add");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [7]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element1, 3, 3);
          morphs[2] = dom.createMorphAt(element1, 5, 5);
          morphs[3] = dom.createAttrMorph(element2, 'onclick');
          morphs[4] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["generic.and"], [], ["loc", [null, [3, 45], [3, 64]]]], ["block", "if", [["get", "canDeleteCollection", ["loc", [null, [4, 10], [4, 29]]]]], [], 0, null, ["loc", [null, [4, 4], [8, 11]]]], ["block", "each", [["get", "collection.propositions", ["loc", [null, [10, 12], [10, 35]]]]], [], 1, null, ["loc", [null, [10, 4], [18, 13]]]], ["attribute", "onclick", ["subexpr", "action", [["get", "onAdditionOfRuleToCollection", ["loc", [null, [19, 60], [19, 88]]]], ["get", "collection", ["loc", [null, [19, 89], [19, 99]]]]], [], ["loc", [null, [19, 51], [19, 101]]]]], ["inline", "t", ["admin.predicate_builder.label.addition_of_rule"], [], ["loc", [null, [19, 102], [19, 156]]]]],
        locals: ["collection"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 23,
            "column": 97
          }
        },
        "moduleName": "frontend-cp/components/ko-predicate-builder/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-predicate-builder__new");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element3, 'onclick');
        morphs[2] = dom.createMorphAt(element3, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "collections", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [21, 9]]]], ["attribute", "onclick", ["get", "onCollectionAddition", ["loc", [null, [23, 49], [23, 69]]]]], ["inline", "t", ["generic.and"], [], ["loc", [null, [23, 72], [23, 91]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-radio/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    disabled: false,
    large: false,

    checked: false,

    // HTML
    classNames: ['ko-radio'],
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    selected: _ember['default'].computed('value', 'checked', function () {
      return this.value === this.checked;
    }),

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.get('disabled')) {
          return;
        }

        if (this.get('onRadio')) {
          this.sendAction('onRadio', true);
        } else {
          this.set('checked', true);
        }
      }
    }

  });
});
define("frontend-cp/components/ko-radio/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-radio__radio ", ["subexpr", "if", [["get", "large", ["loc", [null, [3, 37], [3, 42]]]], "ko-radio__radio--large"], [], ["loc", [null, [3, 32], [3, 69]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-radio/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-radio__label ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [7, 37], [7, 45]]]], "ko-radio__label--disabled"], [], ["loc", [null, [7, 32], [7, 75]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [7, 84], [7, 93]]]], "-radio"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [7, 111], [7, 135]]]]], ["content", "label", ["loc", [null, [7, 136], [7, 145]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-radio/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "radio");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element2, 'class');
        morphs[1] = dom.createAttrMorph(element2, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element2, 'tabindex');
        morphs[3] = dom.createAttrMorph(element2, 'aria-disabled');
        morphs[4] = dom.createAttrMorph(element2, 'aria-live');
        morphs[5] = dom.createAttrMorph(element2, 'id');
        morphs[6] = dom.createAttrMorph(element2, 'onclick');
        morphs[7] = dom.createMorphAt(element2, 1, 1);
        morphs[8] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-radio__container ", ["subexpr", "if", [["get", "large", ["loc", [null, [1, 37], [1, 42]]]], "ko-radio__container--large"], [], ["loc", [null, [1, 32], [1, 73]]]], " ", ["subexpr", "if", [["get", "disabled", ["loc", [null, [1, 79], [1, 87]]]], "ko-radio__radio--disabled"], [], ["loc", [null, [1, 74], [1, 117]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "checked", ["loc", [null, [1, 148], [1, 155]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 171], [1, 179]]]]]]], ["attribute", "aria-disabled", ["concat", [["get", "disabled", ["loc", [null, [1, 200], [1, 208]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 225], [1, 233]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 243], [1, 252]]]], "-radio"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [1, 270], [1, 294]]]]], ["block", "if", [["get", "checked", ["loc", [null, [2, 8], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["get", "label", ["loc", [null, [6, 6], [6, 11]]]]], [], 1, null, ["loc", [null, [6, 0], [8, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-recent-cases/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'div',
    classNames: ['ko-info-bar_item', 'ko-info-bar_item--no-hover', 'ko-recent-cases', 'u-no-bottom-border'],
    classNameBindings: ['separator::ko-info-bar_item--no-separator'],
    separator: false,

    cases: null,

    last3Cases: _ember['default'].computed('cases', function () {
      return this.get('cases').slice(0, 3);
    })
  });
});
define("frontend-cp/components/ko-recent-cases/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "t-italic t-caption t-small");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(",\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "case.subject", ["loc", [null, [7, 8], [7, 24]]]], ["content", "case.status.label", ["loc", [null, [11, 29], [11, 50]]]], ["inline", "t", ["cases.lastupdated"], ["time", ["subexpr", "moment-from-now", [["get", "case.createdAt", ["loc", [null, [12, 60], [12, 74]]]]], [], ["loc", [null, [12, 43], [12, 75]]]]], ["loc", [null, [12, 14], [12, 77]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "link-to", ["session.agent.cases.case", ["get", "case", ["loc", [null, [5, 42], [5, 46]]]]], ["class", "ko-recent-cases__item"], 0, null, ["loc", [null, [5, 4], [14, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "case.subject", ["loc", [null, [4, 8], [4, 20]]]]], [], 0, null, ["loc", [null, [4, 2], [15, 9]]]]],
        locals: ["case", "i"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-recent-case__missing");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["users.no_recent_cases"], [], ["loc", [null, [18, 4], [18, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-recent-cases/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-recent-cases__heading info-bar__heading");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "title", ["loc", [null, [1, 56], [1, 65]]]], ["block", "each", [["get", "last3Cases", ["loc", [null, [3, 8], [3, 18]]]]], [], 0, 1, ["loc", [null, [3, 0], [20, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-reorderable-crud-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    removeItemAction: null,
    createItemAction: null,
    classNames: ['ko-reorderable-crud-list'],
    firstItem: {},

    reorderListAction: null,
    userWantsToSeeNewItemForm: false,

    isShowingNewItemForm: _ember['default'].computed('userWantsToSeeNewItemForm', function () {
      return this.get('userWantsToSeeNewItemForm');
    }),

    actions: {
      removeItem: function removeItem(item) {
        this.sendAction('removeItemAction', item);
      },
      createItem: function createItem() {
        this.sendAction('createItemAction');
      },
      reorderList: function reorderList(itemModels) {
        this.sendAction('reorderListAction', itemModels);
      }
    }
  });
});
define("frontend-cp/components/ko-reorderable-crud-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-reorderable-crud-list__item");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-reorderable-crud-list-item__values ko-reorderable-crud-list-actions");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-minus-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ko-reorderable-crud-list-actions__item");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "class", "i-add-circle i-color-grey--light");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "item", ["loc", [null, [3, 10], [3, 14]]]]], [], ["loc", [null, [3, 2], [3, 16]]]], ["element", "action", ["removeItem", ["get", "item", ["loc", [null, [5, 78], [5, 82]]]]], [], ["loc", [null, [5, 56], [5, 84]]]], ["element", "action", ["createItem", ["get", "item", ["loc", [null, [8, 78], [8, 82]]]]], [], ["loc", [null, [8, 56], [8, 84]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-crud-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderList"], [], ["loc", [null, [1, 33], [1, 55]]]], "items", ["subexpr", "@mut", [["get", "items", ["loc", [null, [1, 62], [1, 67]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [13, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-reorderable-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    items: null,
    onReorder: null,

    // HTML
    classNames: ['ko-reorderable-list']
  });
});
define("frontend-cp/components/ko-reorderable-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "form-input-draggable ko-reorderable-list-item");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "i-dragstrip ko-reorderable-list_item_handle");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 3, 3);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "item", ["loc", [null, [6, 16], [6, 20]]]]], [], ["loc", [null, [6, 8], [6, 22]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "sortable-item", [], ["tagName", "li", "model", ["subexpr", "@mut", [["get", "item", ["loc", [null, [3, 40], [3, 44]]]]], [], []], "group", ["subexpr", "@mut", [["get", "group", ["loc", [null, [3, 51], [3, 56]]]]], [], []], "handle", ".i-dragstrip"], 0, null, ["loc", [null, [3, 4], [8, 22]]]]],
          locals: ["item"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "items", ["loc", [null, [2, 10], [2, 15]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 11]]]]],
        locals: ["group"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-reorderable-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "sortable-group", [], ["classNames", "ko-reorderable-list", "tagName", "ul", "onChange", ["subexpr", "@mut", [["get", "onReorder", ["loc", [null, [1, 73], [1, 82]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [10, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-select/component', ['exports', 'ember'], function (exports, _ember) {
  var Component = _ember['default'].Component;
  var computed = _ember['default'].computed;
  exports['default'] = Component.extend({
    // Attributes
    onChange: null,
    options: null,
    selected: null,
    size: null,
    placeholder: null,
    disabled: false,

    // HTML
    classNames: ['ko-select'],
    classNameBindings: ['sizeClass'],

    // CPs
    sizeClass: computed('size', function () {
      var size = this.get('size');
      if (size === 'medium') {
        return 'ko-select--medium';
      }
    })
  });
});
define("frontend-cp/components/ko-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-select/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "option", ["loc", [null, [11, 10], [11, 16]]]]], [], ["loc", [null, [11, 2], [11, 18]]]]],
        locals: ["option"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "power-select", [], ["selected", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [2, 11], [2, 19]]]]], [], []], "options", ["subexpr", "@mut", [["get", "options", ["loc", [null, [3, 10], [3, 17]]]]], [], []], "onchange", ["subexpr", "@mut", [["get", "onChange", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "searchEnabled", false, "renderInPlace", true, "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 14], [7, 25]]]]], [], []], "disabled", ["subexpr", "@mut", [["get", "disabled", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "class", "ko-select__select"], 0, null, ["loc", [null, [1, 0], [12, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-session-widgets/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Component.extend({
    session: service(),
    routing: service('-routing'),
    permissions: service('permissions'),

    // HTML
    classNames: ['ko-session-widgets'],

    // CPs
    user: computed.readOnly('session.user'),
    isAdmin: computed('session.permissions', function () {
      return this.get('permissions').has('app.admin.access');
    }),

    // Actions
    actions: {
      logout: function logout(dropdown) {
        dropdown.actions.close();
        this.get('session').logout(false);
      },
      profile: function profile(dropdown) {
        dropdown.actions.close();
        this.get('routing').transitionTo('session.agent.users.user', [this.get('session.user')]);
      },
      admin: function admin(dropdown) {
        dropdown.actions.close();
        this.get('routing').transitionTo('session.admin');
      }
    }
  });
});
define("frontend-cp/components/ko-session-widgets/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["admin", ["get", "dropdown", ["loc", [null, [8, 66], [8, 74]]]]], [], ["loc", [null, [8, 49], [8, 76]]]]], ["inline", "t", ["admin.administration"], [], ["loc", [null, [9, 8], [9, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "ko-dropdown-container-content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "ko-dropdown_list__item");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("li");
          dom.setAttribute(el2, "class", "ko-dropdown_list__item");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element1, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element2, 'onclick');
          morphs[1] = dom.createMorphAt(element2, 1, 1);
          morphs[2] = dom.createMorphAt(element1, 3, 3);
          morphs[3] = dom.createAttrMorph(element3, 'onclick');
          morphs[4] = dom.createMorphAt(element3, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["profile", ["get", "dropdown", ["loc", [null, [3, 66], [3, 74]]]]], [], ["loc", [null, [3, 47], [3, 76]]]]], ["inline", "t", ["generic.view_your_profile"], [], ["loc", [null, [4, 6], [4, 39]]]], ["block", "if", [["get", "isAdmin", ["loc", [null, [7, 10], [7, 17]]]]], [], 0, null, ["loc", [null, [7, 4], [11, 11]]]], ["attribute", "onclick", ["subexpr", "action", ["logout", ["get", "dropdown", ["loc", [null, [13, 65], [13, 73]]]]], [], ["loc", [null, [13, 47], [13, 75]]]]], ["inline", "t", ["generic.logout"], [], ["loc", [null, [14, 6], [14, 28]]]]],
        locals: ["dropdown"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-session-widgets__avatar-container");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "class", "ko-session-widget_user-name");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-chevron-large-down");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["inline", "ko-avatar", [], ["avatar", ["subexpr", "@mut", [["get", "user.avatar", ["loc", [null, [18, 71], [18, 82]]]]], [], []]], ["loc", [null, [18, 52], [18, 84]]]], ["content", "user.fullName", ["loc", [null, [19, 41], [19, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "ko-notification-badge", ["loc", [null, [23, 2], [23, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-session-widgets/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "tabIndex", null, "class", "ko-session-widgets_user-dropdown ko-dropdown-container"], 0, 1, ["loc", [null, [1, 0], [21, 19]]]], ["block", "if", [["get", "features.notificationBadge", ["loc", [null, [22, 6], [22, 32]]]]], [], 2, null, ["loc", [null, [22, 0], [24, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-sidebar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNames: ['ko-sidebar'],

    filteredViews: _ember['default'].computed('customViews', function () {
      return this.get('customViews').filter(function (view) {
        return view.get('viewType') !== 'TRASH';
      });
    }),

    trashView: _ember['default'].computed('customViews', function () {
      return this.get('customViews').findBy('viewType', 'TRASH');
    })
  });
});
define('frontend-cp/components/ko-sidebar/item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("frontend-cp/components/ko-sidebar/item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 5,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element1, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["sidebar__icon sidebar__i ", ["get", "icon", ["loc", [null, [4, 39], [4, 43]]]], " i-size-14 i-color-grey--light"]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "sidebar__value");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element0, 1, 1);
            morphs[1] = dom.createMorphAt(element0, 2, 2);
            return morphs;
          },
          statements: [["inline", "if", [["get", "hasRelativeAccuracy", ["loc", [null, [10, 11], [10, 30]]]], "~"], [], ["loc", [null, [10, 6], [10, 36]]]], ["content", "casesView.viewCount.count", ["loc", [null, [10, 36], [10, 65]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "sidebar__title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [2]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createAttrMorph(element2, 'title');
          morphs[2] = dom.createMorphAt(element2, 0, 0);
          morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "icon", ["loc", [null, [3, 8], [3, 12]]]]], [], 0, null, ["loc", [null, [3, 2], [5, 9]]]], ["attribute", "title", ["concat", [["get", "casesView.title", ["loc", [null, [7, 39], [7, 54]]]]]]], ["content", "casesView.title", ["loc", [null, [7, 58], [7, 77]]]], ["block", "if", [["subexpr", "and", [["get", "casesView.viewCount.hasKnownAccuracy", ["loc", [null, [8, 13], [8, 49]]]], ["get", "casesView.viewCount.count", ["loc", [null, [8, 50], [8, 75]]]]], [], ["loc", [null, [8, 8], [8, 76]]]]], [], 1, null, ["loc", [null, [8, 2], [12, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-sidebar/item/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "link-to", ["session.agent.cases.index.view", ["get", "casesView", ["loc", [null, [1, 44], [1, 53]]]]], ["class", ["subexpr", "concat", ["sidebar__link sidebar__link--is-default t-naked-link", ["subexpr", "if", [["subexpr", "eq", [["get", "casesView.viewCount.count", ["loc", [null, [2, 79], [2, 104]]]], 0], [], ["loc", [null, [2, 75], [2, 107]]]], " disabled", ""], [], ["loc", [null, [2, 71], [2, 123]]]]], [], ["loc", [null, [2, 8], [2, 124]]]]], 0, null, ["loc", [null, [1, 0], [13, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-sidebar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "casesView", ["loc", [null, [7, 32], [7, 41]]]]], [], []]], ["loc", [null, [7, 4], [7, 43]]]]],
          locals: ["casesView"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("hr");
          dom.setAttribute(el1, "class", "sidebar__separator");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "filteredViews", ["loc", [null, [6, 10], [6, 23]]]]], [], 0, null, ["loc", [null, [6, 2], [8, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessages.title"], [], ["loc", [null, [14, 2], [14, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "trashView", ["loc", [null, [18, 30], [18, 39]]]]], [], []]], ["loc", [null, [18, 2], [18, 41]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-sidebar/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("hr");
        dom.setAttribute(el1, "class", "sidebar__separator");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-sidebar/item", [], ["casesView", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [1, 28], [1, 37]]]]], [], []], "icon", "i-inbox", "class", "sidebar__first-item"], ["loc", [null, [1, 0], [1, 82]]]], ["block", "if", [["get", "customViews.length", ["loc", [null, [3, 6], [3, 24]]]]], [], 0, null, ["loc", [null, [3, 0], [9, 7]]]], ["block", "link-to", ["session.agent.cases.index.suspended-messages"], ["class", "sidebar__link t-naked-link"], 1, null, ["loc", [null, [13, 0], [15, 12]]]], ["block", "if", [["get", "trashView", ["loc", [null, [17, 6], [17, 15]]]]], [], 2, null, ["loc", [null, [17, 0], [19, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-simple-box-row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNames: ['ko-simple-box-row']
  });
});
define("frontend-cp/components/ko-simple-box-row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-box-row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-simple-list/actions/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: ''
  });
});
define("frontend-cp/components/ko-simple-list/actions/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-simple-list/actions/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__actions");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/actions/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [1, 0], [5, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-simple-list/cell/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-simple-list_cell']
  });
});
define("frontend-cp/components/ko-simple-list/cell/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/cell/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-simple-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // HTML
    classNames: ['ko-simple-list']
  });
});
define('frontend-cp/components/ko-simple-list/row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    onClick: null,

    // HTML
    classNames: ['ko-simple-list_row'],
    classNameBindings: ['onClick:ko-simple-list--actionable'],

    click: function click(e) {
      if (this.get('onClick')) {
        this.get('onClick')(e);
      }
    }
  });
});
define("frontend-cp/components/ko-simple-list/row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-simple-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-simple-list/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-sla/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    metric: null,

    classNames: ['ko-sla'],

    statusClassName: _ember['default'].computed('metric.status', function () {
      var status = this.get('metric.status');

      return status ? 'ko-sla--' + status.toLowerCase() : '';
    }),

    iconClass: _ember['default'].computed('metric.state', 'metric.status', function () {
      var state = this.get('metric.state') || '',
          status = this.get('metric.status') || '';

      if (!state) {
        return '';
      }

      var iconClass = this.getIconClassName(state, status);

      return iconClass + ' t-' + status.toLowerCase() + ' ko-sla__icon--' + status.toLowerCase();
    }),

    getIconClassName: function getIconClassName(state, status) {
      if (state === 'PAUSED') {
        return 'i-paused';
      }
      if (state === 'ACTIVE') {
        return 'i-clock';
      }
      // state must be COMPLETED
      if (status === 'GOOD') {
        return 'i-tick';
      }
      return 'i-cross-bold';
    }
  });
});
define("frontend-cp/components/ko-sla/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 6
              },
              "end": {
                "line": 9,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        -\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ~");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            return morphs;
          },
          statements: [["content", "metric.numberOfWholeDaysRemaining", ["loc", [null, [12, 9], [12, 46]]]], ["inline", "t", ["generic.day_abbreviation"], [], ["loc", [null, [12, 46], [12, 78]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 8
                },
                "end": {
                  "line": 16,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["content", "metric.numberOfWholeHoursRemaining", ["loc", [null, [15, 10], [15, 48]]]], ["inline", "t", ["generic.hour_abbreviation"], [], ["loc", [null, [15, 48], [15, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-sla/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              return morphs;
            },
            statements: [["content", "metric.numberOfWholeMinutesRemaining", ["loc", [null, [17, 10], [17, 50]]]], ["inline", "t", ["generic.minute_abbreviation"], [], ["loc", [null, [17, 50], [17, 85]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 19,
                "column": 6
              }
            },
            "moduleName": "frontend-cp/components/ko-sla/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "metric.numberOfWholeHoursRemaining", ["loc", [null, [14, 14], [14, 48]]]]], [], 0, 1, ["loc", [null, [14, 8], [18, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 22,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-sla/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-sla__icon");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-sla__metric");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1, 1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createMorphAt(element2, 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-sla__container ", ["get", "statusClassName", ["loc", [null, [2, 34], [2, 49]]]]]]], ["attribute", "class", ["concat", ["ko-sla__i ", ["get", "iconClass", ["loc", [null, [4, 28], [4, 37]]]], " i-size-11"]]], ["block", "if", [["get", "metric.isBreached", ["loc", [null, [7, 12], [7, 29]]]]], [], 0, null, ["loc", [null, [7, 6], [9, 13]]]], ["block", "if", [["get", "metric.numberOfWholeDaysRemaining", ["loc", [null, [11, 12], [11, 45]]]]], [], 1, 2, ["loc", [null, [11, 6], [19, 13]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 7
          }
        },
        "moduleName": "frontend-cp/components/ko-sla/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "metric", ["loc", [null, [1, 6], [1, 12]]]]], [], 0, null, ["loc", [null, [1, 0], [22, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-stateful-button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    activeText: null,
    inactiveText: null,
    activeHoverText: null,
    inactiveHoverText: null,
    isLoading: false,

    tagName: 'button',
    classNames: ['ko-stateful-button', 'button', 'button--highlight'],
    classNameBindings: ['isActive'],
    attributeBindings: ['disabled'],

    buttonText: _ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeText') : this.get('inactiveText');
    }),

    buttonHoverText: _ember['default'].computed('isActive', function () {
      return this.get('isActive') ? this.get('activeHoverText') : this.get('inactiveHoverText');
    }),

    disabled: _ember['default'].computed('isEnabled', function () {
      return this.get('isEnabled') ? '' : 'disabled';
    }),

    click: function click() {
      this.sendAction('onClick');
    }
  });
});
define("frontend-cp/components/ko-stateful-button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-stateful-button__button-loading"], ["loc", [null, [2, 2], [2, 58]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-stateful-button__button-text");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "ko-stateful-button__button-text--hover");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "buttonText", ["loc", [null, [5, 4], [5, 18]]]], ["content", "buttonHoverText", ["loc", [null, [8, 4], [8, 23]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-stateful-button/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isLoading", ["loc", [null, [1, 6], [1, 15]]]]], [], 0, 1, ["loc", [null, [1, 0], [10, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-suggest/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params:
    searchTerm: null,
    isFocussed: false,
    hideOnClick: true,
    shouldAutoFocus: false,
    displayIcon: true,

    filterResults: _ember['default'].observer('searchTerm', function () {
      this.sendAction('onSearchTermUpdated', this.get('searchTerm'));
    }),

    willRender: function willRender() {
      if (this.get('shouldAutoFocus')) {
        if (this.$('.ko-suggest__input')) {
          this.set('isFocussed', true);
          this.$('.ko-suggest__input').focus();
        }
      }
    },

    actions: {
      onFocusChanged: function onFocusChanged(focusState) {
        this.set('isFocussed', focusState);
      }
    }

  });
});
define("frontend-cp/components/ko-suggest/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "searchTerm", ["loc", [null, [5, 32], [5, 42]]]]], [], []], "class", "input-text ko-suggest__input"], ["loc", [null, [5, 6], [5, 81]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-dropdown/select/button", [], ["label", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [7, 40], [7, 52]]]]], [], []], "displayIcon", ["subexpr", "@mut", [["get", "displayIcon", ["loc", [null, [7, 65], [7, 76]]]]], [], []]], ["loc", [null, [7, 6], [7, 78]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "or", [["get", "isFocussed", ["loc", [null, [4, 14], [4, 24]]]], ["subexpr", "not", [["get", "selectedItem", ["loc", [null, [4, 30], [4, 42]]]]], [], ["loc", [null, [4, 25], [4, 43]]]]], [], ["loc", [null, [4, 10], [4, 44]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [13, 6], [13, 15]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-dropdown/list", [], ["class", "ko-dropdown-select__content", "style", ["subexpr", "@mut", [["get", "contentStyle", ["loc", [null, [12, 66], [12, 78]]]]], [], []]], 0, null, ["loc", [null, [12, 4], [14, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
        },
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "button"], [], ["loc", [null, [2, 8], [2, 26]]]]], [], 0, null, ["loc", [null, [2, 2], [9, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [11, 12], [11, 16]]]], "content"], [], ["loc", [null, [11, 8], [11, 27]]]]], [], 1, null, ["loc", [null, [11, 2], [15, 9]]]]],
        locals: ["name", "dropdownContext"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-suggest/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-dropdown/container", [], ["hideOnClick", ["subexpr", "@mut", [["get", "hideOnClick", ["loc", [null, [1, 37], [1, 48]]]]], [], []], "hideOnChildFocus", true, "onFocusChanged", "onFocusChanged"], 0, null, ["loc", [null, [1, 0], [17, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/body/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tbody'
  });
});
define("frontend-cp/components/ko-table/body/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "frontend-cp/components/ko-table/body/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-table/cell/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'td',
    classNames: ['ko-table_cell'],

    click: function click(event) {
      if (this.attrs.onClick) {
        event.preventDefault();
        event.stopPropagation();
        this.attrs.onClick(event);
      }
    }
  });
});
define("frontend-cp/components/ko-table/cell/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/cell/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-table/column/component', ['exports', 'ember'], function (exports, _ember) {
  var htmlSafe = _ember['default'].String.htmlSafe;
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'th',
    column: null,
    orderBy: null,
    orderByColumn: null,
    sortable: false,

    classNames: ['ko-table_column'],
    classNameBindings: ['selected:ko-table_column--selected'],
    attributeBindings: 'style',

    // CPs
    style: _ember['default'].computed('width', function () {
      var width = this.get('width');
      return htmlSafe(width ? 'width: ' + width : '');
    }),

    selected: _ember['default'].computed('orderByColumn', 'column.name', function () {
      return this.get('orderByColumn') === this.get('column.name');
    }),

    // Events
    mouseDown: function mouseDown(e) {
      if (this.get('sortable')) {
        e.preventDefault();
      }
    },

    click: function click() {
      if (!this.get('sortable')) {
        return null;
      }

      var sortOrder = 'asc';
      var sortColumn = this.get('column');

      if (this.get('orderBy') === 'asc') {
        sortOrder = 'desc';
      } else if (this.get('orderBy') === 'desc' && this.get('selected')) {
        /*eslint-disable no-undefined */
        sortColumn = undefined;
        sortOrder = undefined;
        /*eslint-enable no-undefined */
      }

      this.sendAction('onSort', sortColumn, sortOrder);
    }
  });
});
define("frontend-cp/components/ko-table/column/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "i-chevron-small-up");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "i-chevron-small-down");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "orderBy", ["loc", [null, [5, 14], [5, 21]]]], "asc"], [], ["loc", [null, [5, 10], [5, 28]]]]], [], 0, null, ["loc", [null, [5, 4], [7, 11]]]], ["block", "if", [["subexpr", "eq", [["get", "orderBy", ["loc", [null, [9, 14], [9, 21]]]], "desc"], [], ["loc", [null, [9, 10], [9, 29]]]]], [], 1, null, ["loc", [null, [9, 4], [11, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/column/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-table_column--wrapper");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]]], ["block", "if", [["get", "selected", ["loc", [null, [4, 8], [4, 16]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/component', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'table',
    classNames: ['ko-table'],
    rows: [],
    onSelectionChange: null,

    // Lifecycle hooks
    init: function init() {
      this._super.apply(this, arguments);
      this.set('rows', []);
    },

    // CPs
    rowStatuses: computed.mapBy('rows', 'selected'),
    unselectedRowStatuses: computed.filter('rowStatuses', function (status) {
      return !status;
    }),
    allRowsSelected: computed('rows.@each.selected', function () {
      var rows = this.get('rows').filter(function (row) {
        return !row.get('selectableDisabled');
      });
      return rows.length > 0 && rows.every(function (row) {
        return row.get('selected');
      });
    }),

    // Actions
    actions: {
      registerRow: function registerRow(row) {
        this.get('rows').addObject(row);
      },

      unregisterRow: function unregisterRow(row) {
        this.get('rows').removeObject(row);
        if (row.get('selected')) {
          _ember['default'].run.scheduleOnce('actions', this, 'send', 'rowSelectionChanged');
        }
      },

      selectAll: function selectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', true);
        });
        var selectionAction = this.get('onSelectionChange');
        if (selectionAction) {
          var models = this.get('rows').filterBy('selected').mapBy('rowContext');
          selectionAction(models, true);
        }
      },

      deselectAll: function deselectAll() {
        this.get('rows').forEach(function (row) {
          return row.set('selected', false);
        });
        var selectionAction = this.get('onSelectionChange');
        if (selectionAction) {
          var models = this.get('rows').filterBy('selected').mapBy('rowContext');
          selectionAction(models, false);
        }
      },

      rowSelectionChanged: function rowSelectionChanged() {
        var selectedItems = this.get('rows').filterBy('selected').mapBy('rowContext');
        var action = this.get('onSelectionChange');
        return action && action(selectedItems);
      }
    }
  });
});
define('frontend-cp/components/ko-table/header/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'thead',
    classNames: ['ko-table__header'],
    selectable: _ember['default'].computed.readOnly('parentView.selectable'),

    actions: {
      selectAll: function selectAll(value) {
        this.get('parentView').send(value ? 'selectAll' : 'deselectAll');
      }
    }
  });
});
define("frontend-cp/components/ko-table/header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "parentView.allRowsSelected", ["loc", [null, [4, 28], [4, 54]]]]], [], []], "onCheck", "selectAll"], ["loc", [null, [4, 6], [4, 76]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/column", [], ["class", "ko-table__header__column--selectable"], 0, null, ["loc", [null, [3, 4], [5, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/header/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "selectable", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 9]]]], ["content", "yield", ["loc", [null, [8, 2], [8, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-table/row/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'tr',
    classNames: ['ko-table_row'],
    rowContext: null,
    clickable: false,

    // TODO BUG when component is reusing existing dom (via Glimmer), selectable
    // will be undefined
    selectable: _ember['default'].computed.readOnly('parentView.parentView.selectable'),
    selected: false,
    selectableDisabled: false,

    classNameBindings: [':ko-table_row', 'selected'],

    // Lifecycle hooks
    willInsertElement: function willInsertElement() {
      this._super.apply(this, arguments);
      var action = this.get('table.actions.registerRow');
      if (action) {
        action(this);
      }
    },

    willDestroyElement: function willDestroyElement() {
      var action = this.get('table.actions.unregisterRow');
      if (action) {
        action(this);
      }
      this._super.apply(this, arguments);
    },

    // Event handlers
    click: function click(event) {
      if (this.get('clickable')) {
        var hasModifier = event.metaKey || event.ctrlKey || event.shiftKey;
        this.attrs.onClick(this.get('rowContext'), hasModifier);
      }
    },

    // Actions
    actions: {
      toggleRow: function toggleRow() {
        if (!this.get('selectableDisabled')) {
          this.toggleProperty('selected');
          var action = this.get('onSelectChange');
          if (action) {
            action(this.get('selected'));
          }
        }
      }
    }
  });
});
define("frontend-cp/components/ko-table/row/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-checkbox", [], ["disabled", ["subexpr", "@mut", [["get", "selectableDisabled", ["loc", [null, [3, 27], [3, 45]]]]], [], []], "checked", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [3, 54], [3, 62]]]]], [], []], "onCheck", ["subexpr", "action", ["toggleRow"], [], ["loc", [null, [3, 71], [3, 91]]]]], ["loc", [null, [3, 4], [3, 93]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/cell", [], ["class", "ko-table_cell--selectable", "onClick", ["subexpr", "action", ["toggleRow"], [], ["loc", [null, [2, 61], [2, 81]]]]], 0, null, ["loc", [null, [2, 2], [4, 20]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-table/row/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "selectable", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]], ["content", "yield", ["loc", [null, [6, 0], [6, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/components/ko-table/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 3
          }
        },
        "moduleName": "frontend-cp/components/ko-table/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["subexpr", "hash", [], ["actions", ["subexpr", "hash", [], ["rowSelectionChanged", ["subexpr", "action", ["rowSelectionChanged"], [], ["loc", [null, [3, 24], [3, 54]]]], "registerRow", ["subexpr", "action", ["registerRow"], [], ["loc", [null, [4, 16], [4, 38]]]], "unregisterRow", ["subexpr", "action", ["unregisterRow"], [], ["loc", [null, [5, 18], [5, 42]]]]], ["loc", [null, [2, 10], [6, 3]]]]], ["loc", [null, [1, 8], [7, 1]]]]], [], ["loc", [null, [1, 0], [7, 3]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-tags/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    suggestionQueryDebounce: 150,

    // Params
    selectedTags: [],
    suggestedTags: [],
    errorTags: [],
    forceLowerCase: true,
    nameField: 'name',
    inputTabindex: 0,
    onTagSuggestion: null,
    onTagAddition: null,
    onTagRemoval: null,
    newTagText: '',
    addTagText: '',
    isDisabled: false,

    // HTML
    classNames: ['ko-tags'],
    classNameBindings: ['showDropdown:active', 'isDisabled:disabled'],
    attributeBindings: ['tabindex', 'role'],
    tabindex: null,
    role: 'menuitem',
    title: 'Tags',

    // State
    searchTerm: '',
    isMouseAccess: false,
    showDropdown: false,
    selection: -1,

    resetSuggestedTagKeyboardPosition: function resetSuggestedTagKeyboardPosition() {
      this.set('selection', -1);
    },

    statusTags: _ember['default'].computed('selectedTags.[]', 'errorTags.[]', function () {
      var statusTags = [];
      var tags = this.get('selectedTags') || [];
      var errors = this.get('errorTags') || [];

      var nameField = this.get('nameField');
      tags.forEach(function (tag) {
        var tagName = nameField ? get(tag, nameField) : tag;
        if (nameField) {
          // if tag is an object and not a string
          tag.set('isError', errors.indexOf(tagName) > -1);
        }
        statusTags.push(tag);
      });
      return statusTags;
    }),

    lastTag: _ember['default'].computed('statusTags.[]', function () {
      return this.get('statusTags.lastObject');
    }),

    isSuggested: _ember['default'].computed('searchTerm', 'suggestedTags', function () {
      var searchTerm = this.get('searchTerm');
      var suggestedTags = this.get('suggestedTags');
      return suggestedTags.contains(searchTerm);
    }),

    isSelected: _ember['default'].computed('searchTerm', 'selectedTags', function () {
      var searchTerm = this.get('searchTerm');
      var selectedTags = this.get('selectedTags');
      return selectedTags.contains(searchTerm);
    }),

    onSearchTermChange: _ember['default'].observer('searchTerm', function () {
      this.resetSuggestedTagKeyboardPosition();
    }),

    didReceiveAttrs: function didReceiveAttrs() {
      this.resetSuggestedTagKeyboardPosition();
    },

    click: function click() {
      this.updateSuggestions();
      this.set('isMouseAccess', true);
    },

    focusIn: function focusIn(e) {
      var mouseAccess = this.get('isMouseAccess');
      if (!mouseAccess) {
        this.set('showDropdown', true);
      }
    },

    focusOut: function focusOut() {
      this.set('isMouseAccess', false);
      this.set('showDropdown', false);
      this.send('addTag', this.get('searchTerm'));
    },

    updateSuggestions: function updateSuggestions() {
      _ember['default'].run.debounce(this, this.updateSuggestionsCallback, this.get('suggestionQueryDebounce'));
    },

    updateSuggestionsCallback: function updateSuggestionsCallback() {
      this.sendAction('onTagSuggestion', this.get('searchTerm'), this.get('selectedTags'));
    },

    moveSuggestionsDropdownSelection: function moveSuggestionsDropdownSelection(direction) {
      var suggestedTags = this.get('suggestedTags');
      var position = this.get('selection');
      var nextPosition = position + direction;
      if (nextPosition >= 0 && nextPosition < suggestedTags.length) {
        this.set('selection', nextPosition);
      }
    },

    // Events

    mouseDown: function mouseDown(e) {
      this.$('.ko-tags__input').focus();
    },

    actions: {
      keyDown: function keyDown(e) {
        switch (e.keyCode) {
          case _frontendCpLibKeycodes.up:
            {
              this.moveSuggestionsDropdownSelection(-1);
              return false;
            }

          case _frontendCpLibKeycodes.down:
            {
              this.set('showDropdown', true);
              this.moveSuggestionsDropdownSelection(1);
              return false;
            }

          case _frontendCpLibKeycodes.tab:
            {
              this.set('showDropdown', false);
              break;
            }

          case _frontendCpLibKeycodes.space:
            {
              var searchTerm = this.get('searchTerm');
              this.send('addTag', searchTerm);
              return false;
            }

          case _frontendCpLibKeycodes.enter:
            {
              var searchTerm = this.get('searchTerm');
              var selection = this.get('selection');
              if (selection > -1) {
                var tag = this.get('suggestedTags').objectAt(selection);
                this.send('addTag', tag);
              } else {
                this.send('addTag', searchTerm);
              }
              return false;
            }

          case _frontendCpLibKeycodes.backspace:
            {
              var input = this.$('.ko-tags__input').get(0);
              if (input.selectionStart === 0 && input.selectionEnd === 0) {
                var tag = this.get('lastTag');
                if (tag) {
                  this.sendAction('onTagRemoval', tag);
                  return false;
                }
              }
              break;
            }
        }
      },

      keyUp: function keyUp(e) {
        if (e.keyCode !== _frontendCpLibKeycodes.up && e.keyCode !== _frontendCpLibKeycodes.down && e.keyCode !== _frontendCpLibKeycodes.enter && e.keyCode !== _frontendCpLibKeycodes.tab) {
          this.updateSuggestions();
          this.set('showDropdown', true);
        }
      },

      highlight: function highlight(index) {
        this.set('selection', index);
      },

      removeTag: function removeTag(tag, e) {
        e.stopPropagation();
        this.sendAction('onTagRemoval', tag);
      },

      preventFocusLostOnSuggestionClick: function preventFocusLostOnSuggestionClick(e) {
        e.preventDefault();
        e.stopPropagation();
      },

      addTag: function addTag(tag) {
        if (!tag) {
          return;
        }

        if (this.get('forceLowerCase')) {
          tag = tag.toLowerCase();
        }
        this.set('searchTerm', '');
        this.set('showDropdown', false);

        // We should always compare tags in lower case
        var lowerCasedTags = this.get('selectedTags').map(function (tag) {
          return tag.get('name').toLowerCase();
        });
        if (!lowerCasedTags.contains(tag.toLowerCase())) {
          this.sendAction('onTagAddition', tag);
          this.updateSuggestions();
        }
        this.resetSuggestedTagKeyboardPosition();
      }
    }
  });
});
define("frontend-cp/components/ko-tags/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-tags/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            dom.setAttribute(el1, "class", "ko-tags__action i-cross");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element3, 'onclick');
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["removeTag", ["get", "tag", ["loc", [null, [6, 39], [6, 42]]]]], [], ["loc", [null, [6, 18], [6, 44]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "tabindex", "-1");
          dom.setAttribute(el1, "role", "menuitem");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "ko-tags__title");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var element5 = dom.childAt(element4, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element5, 'title');
          morphs[2] = dom.createMorphAt(element5, 0, 0);
          morphs[3] = dom.createMorphAt(element4, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-tags__item ", ["subexpr", "if", [["get", "tag.isPusherEdited", ["loc", [null, [3, 32], [3, 50]]]], "ko-tags__item--pusher"], [], ["loc", [null, [3, 27], [3, 76]]]], " ", ["subexpr", "if", [["get", "tag.isNew", ["loc", [null, [3, 82], [3, 91]]]], "ko-tags__item--new"], [], ["loc", [null, [3, 77], [3, 114]]]], " ", ["subexpr", "if", [["get", "tag.isError", ["loc", [null, [3, 120], [3, 131]]]], "ko-tags__item--error"], [], ["loc", [null, [3, 115], [3, 156]]]], " ", ["subexpr", "if", [["get", "isDisabled", ["loc", [null, [3, 162], [3, 172]]]], "ko-tags__item--disabled"], [], ["loc", [null, [3, 157], [3, 200]]]]]]], ["attribute", "title", ["concat", [["subexpr", "if", [["get", "nameField", ["loc", [null, [4, 47], [4, 56]]]], ["subexpr", "get", [["get", "tag", ["loc", [null, [4, 62], [4, 65]]]], ["get", "nameField", ["loc", [null, [4, 66], [4, 75]]]]], [], ["loc", [null, [4, 57], [4, 76]]]], ["get", "tag", ["loc", [null, [4, 77], [4, 80]]]]], [], ["loc", [null, [4, 42], [4, 82]]]]]]], ["inline", "if", [["get", "nameField", ["loc", [null, [4, 89], [4, 98]]]], ["subexpr", "get", [["get", "tag", ["loc", [null, [4, 104], [4, 107]]]], ["get", "nameField", ["loc", [null, [4, 108], [4, 117]]]]], [], ["loc", [null, [4, 99], [4, 118]]]], ["get", "tag", ["loc", [null, [4, 119], [4, 122]]]]], [], ["loc", [null, [4, 84], [4, 124]]]], ["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [5, 13], [5, 23]]]]], [], ["loc", [null, [5, 8], [5, 24]]]]], [], 0, null, ["loc", [null, [5, 2], [7, 9]]]]],
        locals: ["tag"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 21,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "class", "ko-tags__input js-tag-input");
          dom.setAttribute(el1, "role", "textbox");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(6);
          morphs[0] = dom.createAttrMorph(element2, 'placeholder');
          morphs[1] = dom.createAttrMorph(element2, 'value');
          morphs[2] = dom.createAttrMorph(element2, 'tabindex');
          morphs[3] = dom.createAttrMorph(element2, 'onkeydown');
          morphs[4] = dom.createAttrMorph(element2, 'onkeyup');
          morphs[5] = dom.createAttrMorph(element2, 'oninput');
          return morphs;
        },
        statements: [["attribute", "placeholder", ["get", "addTagText", ["loc", [null, [13, 18], [13, 28]]]]], ["attribute", "value", ["get", "searchTerm", ["loc", [null, [14, 12], [14, 22]]]]], ["attribute", "tabindex", ["get", "inputTabindex", ["loc", [null, [15, 15], [15, 28]]]]], ["attribute", "onkeydown", ["subexpr", "action", ["keyDown"], [], ["loc", [null, [17, 14], [17, 34]]]]], ["attribute", "onkeyup", ["subexpr", "action", ["keyUp"], [], ["loc", [null, [18, 12], [18, 30]]]]], ["attribute", "oninput", ["subexpr", "action", [["subexpr", "mut", [["get", "searchTerm", ["loc", [null, [19, 26], [19, 36]]]]], [], ["loc", [null, [19, 21], [19, 37]]]]], ["value", "target.value"], ["loc", [null, [19, 12], [19, 60]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 4
              },
              "end": {
                "line": 34,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-tags/template.hbs"
          },
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "tabindex", "-1");
            dom.setAttribute(el1, "role", "menuitem");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'onclick');
            morphs[2] = dom.createAttrMorph(element0, 'onmousemove');
            morphs[3] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["dropdown-menu__item ", ["subexpr", "if", [["subexpr", "eq", [["get", "index", ["loc", [null, [28, 44], [28, 49]]]], ["get", "selection", ["loc", [null, [28, 50], [28, 59]]]]], [], ["loc", [null, [28, 40], [28, 60]]]], "dropdown-menu__item--selected"], [], ["loc", [null, [28, 35], [28, 94]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["addTag", ["get", "tag", ["loc", [null, [29, 34], [29, 37]]]]], [], ["loc", [null, [29, 16], [29, 39]]]]], ["attribute", "onmousemove", ["subexpr", "action", ["highlight", ["get", "index", ["loc", [null, [30, 41], [30, 46]]]]], [], ["loc", [null, [30, 20], [30, 48]]]]], ["content", "tag", ["loc", [null, [33, 7], [33, 14]]]]],
          locals: ["tag", "index"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-tags/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("ul");
          dom.setAttribute(el1, "class", "dropdown-menu list-bare");
          dom.setAttribute(el1, "role", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onmousedown');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onmousedown", ["subexpr", "action", ["preventFocusLostOnSuggestionClick"], [], ["loc", [null, [25, 18], [25, 64]]]]], ["block", "each", [["get", "suggestedTags", ["loc", [null, [26, 12], [26, 25]]]]], [], 0, null, ["loc", [null, [26, 4], [34, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-tags/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "ko-tags__root");
        dom.setAttribute(el1, "role", "menu");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element6, 1, 1);
        morphs[1] = dom.createMorphAt(element6, 2, 2);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "statusTags", ["loc", [null, [2, 8], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 0], [9, 9]]]], ["block", "if", [["subexpr", "not", [["get", "isDisabled", ["loc", [null, [10, 11], [10, 21]]]]], [], ["loc", [null, [10, 6], [10, 22]]]]], [], 1, null, ["loc", [null, [10, 0], [21, 7]]]], ["block", "if", [["subexpr", "and", [["get", "onTagSuggestion", ["loc", [null, [24, 11], [24, 26]]]], ["subexpr", "and", [["get", "showDropdown", ["loc", [null, [24, 32], [24, 44]]]], ["get", "suggestedTags.length", ["loc", [null, [24, 45], [24, 65]]]]], [], ["loc", [null, [24, 27], [24, 66]]]]], [], ["loc", [null, [24, 6], [24, 67]]]]], [], 2, null, ["loc", [null, [24, 0], [36, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-tags-input/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    selectedTags: [],

    // HTML
    classNames: ['ko-tags-input'],

    actions: {
      onTagAddition: function onTagAddition(tag) {
        this.attrs.addTag(tag);
      },

      onTagRemoval: function onTagRemoval(tag) {
        this.attrs.removeTag(tag.get('name'));
      }
    }
  });
});
define("frontend-cp/components/ko-tags-input/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-tags-input/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-tags", [], ["selectedTags", ["subexpr", "@mut", [["get", "selectedTags", ["loc", [null, [2, 15], [2, 27]]]]], [], []], "onTagAddition", ["subexpr", "action", ["onTagAddition"], [], ["loc", [null, [3, 16], [3, 40]]]], "onTagRemoval", ["subexpr", "action", ["onTagRemoval"], [], ["loc", [null, [4, 15], [4, 38]]]]], ["loc", [null, [1, 0], [4, 40]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/components/ko-text-editor/component', ['exports', 'ember', 'npm:quill'], function (exports, _ember, _npmQuill) {

  // TODO HACK remove when https://github.com/quilljs/quill/issues/471 is resolved
  _npmQuill['default'].themes.snow.prototype.extendToolbar = function () {};

  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    suggestedPeople: null,
    peopleCCd: null,
    suggestedPeopleTotal: null,
    suggestedPeopleLoading: null,
    isPeopleIconAvailable: true,
    isTimerIconAvailable: null,
    onPeopleSuggestion: null,
    onAttachFiles: null,
    channels: null,
    channel: null,
    onChannelChange: null,
    placeholder: null,
    isErrored: null,
    showControls: null,
    textAreaIsSmall: null,
    textAreaIsSimple: null,
    onPersonSelected: null,
    onPersonRemoved: null,
    onTextChanged: null, //optional, fired whenever text changes
    onEditorReady: null, //optional, fired when quill is inserted into DOM
    value: '',

    // State
    quill: null,
    cursor: 0,
    inlineFiles: null,
    totalSize: 0,
    maxFileSize: 5 * 1024 * 1024, // 5 MB
    maxTotalSize: 20 * 1024 * 1024, // 20 MB,
    header: { isHeader: true },
    infomessage: { isInfoMessage: true },
    isFocused: false,
    ccPopupProxy: null,
    tagDictionary: null,

    // HTML
    classNames: ['ko-text-editor'],
    classNameBindings: ['isErrored'],

    onFocusStateChange: function onFocusStateChange() {},

    // Services
    intl: _ember['default'].inject.service(),

    // Lifecycle hooks
    initFiles: _ember['default'].on('init', function () {
      this.set('inlineFiles', new _ember['default'].A([]));
    }),

    setupFocusEvents: _ember['default'].on('didInsertElement', function () {
      var _this = this;

      this.$(document).on('click.' + this.get('elementId'), function (event) {
        var isPlaceholder = $(event.target).parents('.ko-layout_advanced_editor__placeholder').length || $(event.target).hasClass('ko-layout_advanced_editor__placeholder') || $(event.target).hasClass('ko-feed_item_menu') || $(event.target).parents('.ko-feed_item_menu').length || $(event.target).hasClass('ko-file-upload') || $(event.target).parents('.ko-file-upload').length;

        if (isPlaceholder || _ember['default'].$.contains(_this.$()[0], event.target)) {
          return;
        }

        _this.onFocusStateChange(_this.get('showHidePlaceholder'));
      });
    }),

    tearDownFocusEvents: _ember['default'].on('willDestroyElement', function () {
      this.$(document).off('click.' + this.get('elementId'));
    }),

    setupQuill: _ember['default'].on('didInsertElement', function () {
      var _this2 = this;

      var tagDictionary = {
        div: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '', '');
          }
        },
        span: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '', '');
          }
        },
        li: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem);
          }
        },
        ul: {
          markdownable: true,
          process: function process(elem) {
            return _this2.list(elem, 'unordered');
          }
        },
        ol: {
          markdownable: true,
          process: function process(elem) {
            return _this2.list(elem, 'ordered');
          }
        },
        blockquote: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n> ', '\n');
          }
        },
        pre: {
          markdownable: true,
          process: function process(elem) {
            return _this2.code(elem);
          }
        },
        code: {
          markdownable: true,
          process: function process(elem) {
            return _this2.code(elem);
          }
        },
        a: {
          markdownable: true,
          process: function process(elem) {
            return _this2.link(elem);
          }
        },
        hr: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n------', '\n');
          }
        },
        em: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' *', '* ');
          }
        },
        i: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' *', '* ');
          }
        },
        strong: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        b: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        u: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, ' **', '** ');
          }
        },
        p: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '\n', '\n');
          }
        },
        br: {
          markdownable: true,
          process: function process(elem) {
            return _this2.process(elem, '    \n', '');
          }
        },
        img: {
          markdownable: true,
          process: function process(elem) {
            return _this2.image(elem);
          }
        },
        _text: {
          markdownable: true,
          process: function process(elem) {
            return typeof elem === 'undefined' ? '' : _this2.getTextFromNode(elem);
          }
        }
      };

      this.set('tagDictionary', tagDictionary);

      this.quill = new _npmQuill['default']('.js-editor', {
        modules: {
          'multi-cursor': true,
          toolbar: { container: '.js-toolbar' },
          'link-tooltip': true
          // 'image-tooltip': true
        },
        theme: 'snow',
        styles: {
          '.ql-editor': {
            'font-family': "'Source Sans Pro', Sans-Serif"
          },
          '.ql-editor a': {
            'text-decoration': 'none'
          }
        }
      });

      //update text every time we type so we've got a proper ember variable to observe
      this.quill.on('text-change', function () {
        if (_this2.attrs.onTextChanged) {
          _this2.attrs.onTextChanged(_this2.quill.getText());
        }
      });

      _ember['default'].$('.ql-editor').on('blur', function () {
        if (_this2.quill.getSelection() === null) {
          _this2.set('cursor', 0);
        } else {
          _this2.set('cursor', _this2.quill.getSelection().start);
        }
        _this2.set('isFocused', false);
      });

      _ember['default'].$('.ql-editor').on('focus', function () {
        _this2.set('isFocused', true);
      });

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.quill.setContents([{ 'delete': 999999999 }]);
        _this2.quill.setText(_this2.get('value'));
      });
    }),

    cleanUpQuill: _ember['default'].on('willDestroyElement', function () {
      this.quill.destroy();
    }),

    // Observers
    repositionPopupProxy: _ember['default'].observer('peopleCCd.[]', 'suggestedPeopleLoading', function () {
      if (this.get('ccPopupProxy') && this.get('ccPopupProxy').reposition) {
        this.get('ccPopupProxy').reposition();
      }
    }),

    updateValue: _ember['default'].observer('value', function () {
      if (this.quill && this.quill.getText() !== this.get('value')) {
        // We have to manually clear contents to avoid text collision
        this.quill.setContents([{ 'delete': 999999999 }]);
        this.quill.setText(this.get('value'));
      }
    }),

    // CPs
    showHidePlaceholder: _ember['default'].computed('isFocused', 'value', function () {
      return this.get('isFocused') || this.get('value').trim();
    }),

    fileIsNotTooBig: function fileIsNotTooBig(file) {
      return file.size < this.maxFileSize && this.totalSize < this.maxFileSize;
    },

    fileIsImage: function fileIsImage(file) {
      return file.type.match(/^image\//i);
    },

    process: function process(elem, prefix, postfix) {
      return prefix + this.parseChildren(elem) + postfix;
    },

    link: function link(elem) {
      var result = ' [';
      result += this.parseChildren(elem);
      return result + '](' + elem.getAttribute('href') + ') ';
    },

    list: function list(elem, type) {
      var count = 1;
      var result = '\n';
      var children = elem.getElementsByTagName('li');

      for (var i = 0; i < children.length; ++i) {
        // add the list item
        if (type === 'ordered') {
          result += count + '. ';
          count++;
        } else {
          result += '- ';
        }
        // add the child elements
        result += this.parseChildren(children[i]) + '\n';
      }
      return result + '\n';
    },

    code: function code(elem) {
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (elem.childNodes.length === 1) {
        if (tagName === 'code') {
          return ' `' + this.getTextFromNode(elem, true, true) + '` ';
        }
      }
      return '\n' + ('    ' + this.getTextFromNode(elem, true, true)).replace(/\n/g, '\n    ') + '\n';
    },

    image: function image(elem) {
      var alt = elem.getAttribute('alt');
      var title = elem.getAttribute('title');
      var url = elem.getAttribute('src');
      if (alt === null) {
        alt = url;
      }
      var op = ' ![' + alt + '](' + url;
      if (title !== null) {
        op += ' "' + title + ' "';
      }
      return op + ') ';
    },

    hasClass: function hasClass(elem, klass) {
      return (' ' + elem.className + ' ').replace(/[\n\t]/g, ' ').indexOf(' ' + klass + ' ') > -1;
    },

    getTextFromNode: function getTextFromNode(elem, allowNewlines, preserveWhitespace) {
      var txt = elem.innerText || elem.textContent;
      txt = txt.trim();
      if (typeof allowNewlines === 'undefined' || !allowNewlines) {
        txt = txt.replace(/\n/g, ' ');
      }
      if (typeof preserveWhitespace === 'undefined' || !preserveWhitespace) {
        txt = txt.replace(/\s{2,}/g, ' ');
      }
      return txt;
    },

    parseChildren: function parseChildren(elem) {
      var result = '';
      var children = elem.childNodes;

      for (var i = 0; i < children.length; ++i) {
        var node = children[i];
        var nodeType = node.nodeType;
        var tagName = undefined;
        if (nodeType === 3) {
          tagName = '_text';
        } else {
          // No tag name, nothing to convert.
          if (!node.tagName) {
            continue;
          }
          tagName = node.tagName.toLowerCase();
        }
        if (tagName !== '_text') {
          if (!(tagName in this.tagDictionary)) {
            continue;
          }
          if (!this.tagDictionary[tagName].markdownable) {
            continue;
          }
          if (tagName === 'div') {
            if (this.hasClass(node, 'toc')) {
              result += '\n[TOC]\n';
              continue;
            }
          }
        }
        result += this.tagDictionary[tagName].process(node);
      }
      return result;
    },

    getMarkdown: function getMarkdown() {
      var text = this.quill.getText().trim();
      if (text === this.get('placeholder')) {
        return '';
      }

      var elem = this.$('.ql-editor').get(0);
      var tagName = elem.nodeType === 3 ? '_text' : elem.tagName.toLowerCase();
      if (!(tagName in this.tagDictionary)) {
        return '';
      }
      return this.tagDictionary[tagName].process(elem).trim();
    },

    actions: {
      insertImage: function insertImage() {
        this.quill.insertEmbed(this.cursor, 'image', 'http://quilljs.com/images/cloud.png');
      },
      imageDropped: function imageDropped(file) {
        this.quill.insertEmbed(this.cursor, 'image', file);
      },
      handleInlineFiles: function handleInlineFiles(files) {
        var _this3 = this;

        for (var i = 0, total = files.length; i < total; i++) {
          var f = files[i];

          if (this.fileIsNotTooBig(f) && this.fileIsImage(f)) {
            (function () {
              _this3.inlineFiles.pushObject(f);
              var reader = new FileReader();
              reader.onload = function () {
                _this3.quill.insertEmbed(_this3.cursor + 1, 'image', reader.result);
              };
              reader.readAsDataURL(f);
            })();
          } else {// eslint-disable-line no-empty
            // TODO: Ask design team where they want file is too big message to appear
          }
        }
      },

      handleAttachmentFiles: function handleAttachmentFiles(files) {
        this.sendAction('onAttachFiles', Array.slice(files));
      },

      onPeopleSuggestion: function onPeopleSuggestion(searchTerm, selectedPeople) {
        this.sendAction('onPeopleSuggestion', searchTerm, selectedPeople);
      }
    }
  });
});
define("frontend-cp/components/ko-text-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 19
                },
                "end": {
                  "line": 51,
                  "column": 123
                }
              },
              "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "ko-text-editor-header-group__item-text");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
              return morphs;
            },
            statements: [["content", "peopleCCd.length", ["loc", [null, [51, 96], [51, 116]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 16
              },
              "end": {
                "line": 52,
                "column": 16
              }
            },
            "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element2, 'class');
            morphs[1] = dom.createAttrMorph(element2, 'title');
            morphs[2] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["i-users ko-text-editor__right-group-item-icon ", ["subexpr", "if", [["get", "peopleCCd.length", ["loc", [null, [49, 78], [49, 94]]]], "ko-text-editor-header-group__users-item--active"], [], ["loc", [null, [49, 73], [49, 146]]]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.cc"], [], ["loc", [null, [50, 26], [50, 55]]]]], ["block", "if", [["get", "peopleCCd.length", ["loc", [null, [51, 25], [51, 41]]]]], [], 0, null, ["loc", [null, [51, 19], [51, 130]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 16
              },
              "end": {
                "line": 66,
                "column": 16
              }
            },
            "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("                  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-people-popover", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [54, 36], [54, 51]]]]], [], []], "inputPlaceholderText", ["subexpr", "t", ["cases.copy-someone-in.input-placeholder"], [], ["loc", [null, [55, 41], [55, 86]]]], "helpText", ["subexpr", "format-html-message", ["cases.copy-someone-in.help-text"], [], ["loc", [null, [56, 29], [56, 84]]]], "filterNotFoundText", ["subexpr", "format-html-message", ["cases.copy-someone-in.not-found"], [], ["loc", [null, [57, 39], [57, 94]]]], "emailErrorText", ["subexpr", "t", ["cases.copy-someone-in.email-error"], [], ["loc", [null, [58, 35], [58, 74]]]], "selectedPeople", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [59, 35], [59, 44]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [60, 41], [60, 61]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [61, 30], [61, 52]]]]], [], []], "onPeopleSuggestion", ["subexpr", "action", ["onPeopleSuggestion"], [], ["loc", [null, [62, 39], [62, 68]]]], "onPersonSelect", ["subexpr", "@mut", [["get", "attrs.onPersonSelected", ["loc", [null, [63, 35], [63, 57]]]]], [], []], "onPersonRemove", ["subexpr", "@mut", [["get", "attrs.onPersonRemoved", ["loc", [null, [64, 35], [64, 56]]]]], [], []]], ["loc", [null, [53, 18], [65, 20]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 43,
              "column": 12
            },
            "end": {
              "line": 68,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-text-editor__right-group-item");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "ko-context-modal", [], ["proxy", ["subexpr", "@mut", [["get", "ccPopupProxy", ["loc", [null, [46, 26], [46, 38]]]]], [], []], "title", ["subexpr", "t", ["cases.copy-someone-in.title"], [], ["loc", [null, [47, 26], [47, 59]]]]], 0, 1, ["loc", [null, [45, 16], [66, 37]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 70,
              "column": 12
            },
            "end": {
              "line": 74,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-text-editor__right-group-item");
          var el2 = dom.createTextNode("\n                ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ko-text-editor__right-group-item-icon i-stopwatch");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n              ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'title');
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["generic.texteditor.billing"], [], ["loc", [null, [72, 85], [72, 119]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 85,
              "column": 2
            },
            "end": {
              "line": 87,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-text-editor__text-area text-area--clean js-editor ", ["subexpr", "if", [["get", "textAreaIsSmall", ["loc", [null, [86, 72], [86, 87]]]], "ko-text-editor__text-area--small"], [], ["loc", [null, [86, 67], [86, 124]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 90,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-text-editor/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-text-editor-header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "js-toolbar ql-snow");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout__item u-1/2");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-text-editor-header-group");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "layout__item u-1/2 t-right");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-bold");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-italic");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-bullet-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-number-list");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item ko-text-editor__image-upload");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("label");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "i-camera");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-link");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor-header-group__item i-quote");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "u-inline-block u-mh");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("span");
        dom.setAttribute(el6, "class", "ko-text-editor-header__spacer");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ko-text-editor-header-group ko-text-editor-header-group--single");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ko-text-editor__right-group");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "class", "ko-text-editor__right-group-item ko-text-editor__file-upload");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("label");
        var el9 = dom.createTextNode("\n                ");
        dom.appendChild(el8, el9);
        var el9 = dom.createElement("div");
        dom.setAttribute(el9, "class", "ko-text-editor__right-group-item-icon i-clip");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("\n              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment(" Create the editor container ");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0, 1, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element4, [1]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(element5, [3]);
        var element8 = dom.childAt(element5, [5]);
        var element9 = dom.childAt(element5, [7]);
        var element10 = dom.childAt(element5, [9]);
        var element11 = dom.childAt(element10, [1]);
        var element12 = dom.childAt(element11, [1]);
        var element13 = dom.childAt(element5, [11]);
        var element14 = dom.childAt(element5, [13]);
        var element15 = dom.childAt(element4, [5, 1]);
        var element16 = dom.childAt(element15, [1]);
        var element17 = dom.childAt(element16, [1]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(fragment, [4]);
        var element20 = dom.childAt(element19, [1]);
        var morphs = new Array(21);
        morphs[0] = dom.createMorphAt(dom.childAt(element3, [1, 1]), 2, 2);
        morphs[1] = dom.createAttrMorph(element5, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element7, 'title');
        morphs[4] = dom.createAttrMorph(element8, 'title');
        morphs[5] = dom.createAttrMorph(element9, 'title');
        morphs[6] = dom.createAttrMorph(element11, 'for');
        morphs[7] = dom.createAttrMorph(element12, 'title');
        morphs[8] = dom.createMorphAt(element10, 3, 3);
        morphs[9] = dom.createAttrMorph(element13, 'title');
        morphs[10] = dom.createAttrMorph(element14, 'title');
        morphs[11] = dom.createAttrMorph(element17, 'for');
        morphs[12] = dom.createAttrMorph(element18, 'title');
        morphs[13] = dom.createMorphAt(element16, 3, 3);
        morphs[14] = dom.createMorphAt(element15, 3, 3);
        morphs[15] = dom.createMorphAt(element15, 5, 5);
        morphs[16] = dom.createAttrMorph(element19, 'class');
        morphs[17] = dom.createAttrMorph(element20, 'class');
        morphs[18] = dom.createMorphAt(element20, 0, 0);
        morphs[19] = dom.createMorphAt(element19, 3, 3);
        morphs[20] = dom.createMorphAt(element19, 5, 5);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "header", ["loc", [null, [7, 18], [7, 24]]]]], [], ["loc", [null, [7, 10], [7, 26]]]], ["attribute", "class", ["concat", ["ko-text-editor-header-group ", ["subexpr", "unless", [["get", "showControls", ["loc", [null, [11, 57], [11, 69]]]], "u-hidden"], [], ["loc", [null, [11, 48], [11, 82]]]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.bold"], [], ["loc", [null, [12, 70], [12, 101]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.italic"], [], ["loc", [null, [13, 72], [13, 105]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.bullet"], [], ["loc", [null, [14, 77], [14, 110]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.list"], [], ["loc", [null, [15, 77], [15, 108]]]]], ["attribute", "for", ["get", "filesInline.elementId", ["loc", [null, [17, 25], [17, 46]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.image"], [], ["loc", [null, [18, 42], [18, 74]]]]], ["inline", "ko-file-field", [], ["viewName", "filesInline", "on-change", "handleInlineFiles"], ["loc", [null, [20, 12], [23, 14]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.link"], [], ["loc", [null, [25, 70], [25, 101]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.authorship"], [], ["loc", [null, [26, 71], [26, 108]]]]], ["attribute", "for", ["get", "attachFile.elementId", ["loc", [null, [34, 27], [34, 47]]]]], ["attribute", "title", ["subexpr", "t", ["generic.texteditor.image"], [], ["loc", [null, [35, 80], [35, 112]]]]], ["inline", "ko-file-field", [], ["viewName", "attachFile", "on-change", "handleAttachmentFiles"], ["loc", [null, [37, 14], [40, 16]]]], ["block", "if", [["get", "isPeopleIconAvailable", ["loc", [null, [43, 18], [43, 39]]]]], [], 0, null, ["loc", [null, [43, 12], [68, 19]]]], ["block", "if", [["get", "isTimerIconAvailable", ["loc", [null, [70, 18], [70, 38]]]]], [], 1, null, ["loc", [null, [70, 12], [74, 19]]]], ["attribute", "class", ["concat", ["ko-text-editor__dropzone-and-editor-container ", ["subexpr", "if", [["get", "textAreaIsSmall", ["loc", [null, [83, 63], [83, 78]]]], "ko-text-editor__dropzone-and-editor-container--small"], [], ["loc", [null, [83, 58], [83, 135]]]]]]], ["attribute", "class", ["concat", ["ko-text-editor__placeholder ", ["subexpr", "if", [["get", "showHidePlaceholder", ["loc", [null, [84, 47], [84, 66]]]], "u-hidden"], [], ["loc", [null, [84, 42], [84, 79]]]]]]], ["content", "placeholder", ["loc", [null, [84, 81], [84, 96]]]], ["block", "ko-draggable-dropzone", [], ["dropped", "imageDropped", "click", ["subexpr", "@mut", [["get", "onFocusActivate", ["loc", [null, [85, 56], [85, 71]]]]], [], []]], 2, null, ["loc", [null, [85, 2], [87, 28]]]], ["inline", "yield", [["get", "infomessage", ["loc", [null, [88, 10], [88, 21]]]]], [], ["loc", [null, [88, 2], [88, 23]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/components/ko-timeline/component', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Component.extend({
    metrics: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),

    classNames: ['ko-timeline'],

    onReplyWithQuote: null,
    onLoadPostsBelow: null,
    onLoadPostsAbove: null,
    onQueryParamsUpdate: null,
    availableReplyChannels: null,

    topPostsAvailable: null,
    bottomPostsAvailable: null,

    loadingTop: null,
    loadingBottom: null,
    posts: null,
    isReplyDisabled: false,

    controlsVisible: true,
    sortOrder: '',
    filter: '',

    model: null,

    scroller: _ember['default'].computed(function () {
      return document.querySelector(this.container.lookup('application:main').rootElement);
    }),

    willInsertElement: function willInsertElement() {
      this._super.apply(this, arguments);
      this.handleScroll = this.handleScroll.bind(this);
      $(window).on('scroll', this.handleScroll);
    },

    willDestroyElement: function willDestroyElement() {
      this._super.apply(this, arguments);
      $(window).off('scroll', this.handleScroll);
    },

    handleScroll: function handleScroll() {
      _ember['default'].run.debounce(this, this.updateQueryParamsAfterScroll, 250);
    },

    updateQueryParamsAfterScroll: function updateQueryParamsAfterScroll() {
      if (!this.element) {
        return null;
      }

      if (this.get('onQueryParamsUpdate')) {
        var $feed = this.$('.ko-timeline__feed');

        var _$feed$offset = $feed.offset();

        var left = _$feed$offset.left;

        var scrollTop = this.get('scroller').scrollTop;
        var $editor = _ember['default'].$('.ko-layout_advanced_editor');
        var editorHeight = $editor.outerHeight(true);
        var editorOffset = $editor.offset();

        var topPoint = editorHeight + editorOffset.top - scrollTop;

        var el = document.elementFromPoint(left + 40, topPoint);

        var $item = _ember['default'].$(el).closest('.ko-feed_item');

        if ($item.length <= 0) {
          // if we where unable to find ko-feed_item its possible, that we are on the absolute border
          if (_ember['default'].$(el).hasClass('ko-feed_activity__border')) {
            $item = $(el).parents('.ko-feed_activity').prevAll('.ko-feed_item:first');
          }
          if ($item.length <= 0) {
            if (!this.get('topPostsAvailable')) {
              this.attrs.onQueryParamsUpdate({ postId: null });
            }
            return null;
          }
        }

        var postId = $item.data('id');

        if (this.get('posts.firstObject.id') === String(postId) && !this.get('topPostsAvailable')) {
          this.attrs.onQueryParamsUpdate({ postId: null });
        } else {
          this.attrs.onQueryParamsUpdate({ postId: postId });
        }
      }
    },

    sortOptions: _ember['default'].computed(function () {
      var intlService = this.get('intl');
      return [{ label: intlService.findTranslationByKey('cases.sort_options.newest_first'), content: 'newest' }, { label: intlService.findTranslationByKey('cases.sort_options.oldest_first'), content: 'oldest' }];
    }),

    filterOptions: _ember['default'].computed(function () {
      var intlService = this.get('intl');
      return [{ label: intlService.findTranslationByKey('cases.filter_options.posts'), content: 'posts' }, { label: intlService.findTranslationByKey('cases.filter_options.all'), content: 'all' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_activities'), content: 'posts,activities' }, { label: intlService.findTranslationByKey('cases.filter_options.posts_events'), content: 'posts,events' }];
    }),

    sortOrderTitle: _ember['default'].computed('sortOrder', function () {
      var option = this.get('sortOptions').findBy('content', this.get('sortOrder'));
      var message = this.get('intl').findTranslationByKey('cases.sort');

      if (option) {
        message += ': ' + option.label;
      }

      return message;
    }),

    sortFilterTitle: _ember['default'].computed('filter', function () {
      var option = this.get('filterOptions').findBy('content', this.get('filter'));
      var message = this.get('intl').findTranslationByKey('cases.filter');

      if (option) {
        message += ': ' + option.label;
      }

      return message;
    }),

    topPost: _ember['default'].computed('posts.[]', function () {
      return this.get('posts').find(function (post) {
        return post.constructor.modelName === 'post';
      });
    }),

    bottomPost: _ember['default'].computed('posts.[]', function () {
      return _npmLodash['default'].findLast(this.get('posts'), function (post) {
        return post.constructor.modelName === 'post';
      });
    }),

    actions: {
      filter: function filter(_filter) {
        this.attrs.onQueryParamsUpdate({ filter: _filter.content });

        this.get('metrics').trackEvent({
          event: 'Case Feed Filter Changed',
          category: 'Case Feed',
          action: _filter.content,
          label: 'filter dropdown'
        });
      },

      sort: function sort(_sort) {
        this.attrs.onQueryParamsUpdate({ sort: _sort.content });

        this.get('metrics').trackEvent({
          event: 'Case Feed Sort Changed',
          category: 'Case Feed',
          action: _sort.content,
          label: 'sort dropdown'
        });
      }
    }
  });
});
define("frontend-cp/components/ko-timeline/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "field.label", ["loc", [null, [11, 10], [11, 25]]]]],
            locals: ["field"],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 8
                },
                "end": {
                  "line": 22,
                  "column": 8
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "field.label", ["loc", [null, [21, 10], [21, 25]]]]],
            locals: ["field"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 24,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-timeline__sort");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-timeline__filter");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["block", "ko-select", [], ["placeholder", ["subexpr", "@mut", [["get", "sortOrderTitle", ["loc", [null, [6, 22], [6, 36]]]]], [], []], "value", ["subexpr", "@mut", [["get", "sortOrder", ["loc", [null, [7, 16], [7, 25]]]]], [], []], "options", ["subexpr", "@mut", [["get", "sortOptions", ["loc", [null, [8, 18], [8, 29]]]]], [], []], "onChange", ["subexpr", "action", ["sort"], [], ["loc", [null, [9, 19], [9, 34]]]]], 0, null, ["loc", [null, [5, 8], [12, 22]]]], ["block", "ko-select", [], ["placeholder", ["subexpr", "@mut", [["get", "sortFilterTitle", ["loc", [null, [16, 22], [16, 37]]]]], [], []], "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [17, 16], [17, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "filterOptions", ["loc", [null, [18, 18], [18, 31]]]]], [], []], "onChange", ["subexpr", "action", ["filter"], [], ["loc", [null, [19, 19], [19, 36]]]]], 1, null, ["loc", [null, [15, 8], [22, 22]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 6
                },
                "end": {
                  "line": 31,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [30, 8], [30, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'onclick');
              morphs[1] = dom.createMorphAt(element1, 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onLoadPostsAbove", ["loc", [null, [32, 28], [32, 44]]]], ["subexpr", "hash", [], ["model", ["get", "model", ["loc", [null, [32, 57], [32, 62]]]], "filter", ["get", "filter", ["loc", [null, [32, 70], [32, 76]]]], "sortOrder", ["get", "sortOrder", ["loc", [null, [32, 87], [32, 96]]]], "postId", ["get", "topPost.id", ["loc", [null, [32, 104], [32, 114]]]]], ["loc", [null, [32, 45], [32, 115]]]]], [], ["loc", [null, [32, 19], [32, 117]]]]], ["inline", "t", ["cases.posts.load_more"], [], ["loc", [null, [32, 118], [32, 147]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-timeline__loader");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "loadingTop", ["loc", [null, [29, 12], [29, 22]]]]], [], 0, 1, ["loc", [null, [29, 6], [33, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 6
                },
                "end": {
                  "line": 47,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-feed/item", [], ["event", ["subexpr", "@mut", [["get", "post", ["loc", [null, [40, 14], [40, 18]]]]], [], []], "parent", ["subexpr", "@mut", [["get", "model", ["loc", [null, [41, 15], [41, 20]]]]], [], []], "isReplyDisabled", ["subexpr", "@mut", [["get", "isReplyDisabled", ["loc", [null, [42, 24], [42, 39]]]]], [], []], "canReplyToPost", ["subexpr", "contains", [["get", "post.sourceChannel", ["loc", [null, [43, 33], [43, 51]]]], ["get", "availableReplyChannels", ["loc", [null, [43, 52], [43, 74]]]]], [], ["loc", [null, [43, 23], [43, 75]]]], "onReplyToPost", ["subexpr", "action", [["get", "onReplyToPost", ["loc", [null, [44, 30], [44, 43]]]], ["get", "post", ["loc", [null, [44, 44], [44, 48]]]]], [], ["loc", [null, [44, 22], [44, 49]]]], "onReplyWithQuote", ["subexpr", "action", [["get", "onReplyWithQuote", ["loc", [null, [45, 33], [45, 49]]]], ["get", "post", ["loc", [null, [45, 50], [45, 54]]]]], [], ["loc", [null, [45, 25], [45, 55]]]]], ["loc", [null, [39, 8], [46, 10]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 48,
                  "column": 6
                },
                "end": {
                  "line": 50,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-feed/activity", [], ["activity", ["subexpr", "@mut", [["get", "post", ["loc", [null, [49, 36], [49, 40]]]]], [], []]], ["loc", [null, [49, 8], [49, 42]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 4
              },
              "end": {
                "line": 51,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [38, 20], [38, 46]]]], "post"], [], ["loc", [null, [38, 16], [38, 54]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [38, 59], [38, 85]]]], "user-note"], [], ["loc", [null, [38, 55], [38, 98]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [38, 103], [38, 129]]]], "organization-note"], [], ["loc", [null, [38, 99], [38, 150]]]]], [], ["loc", [null, [38, 12], [38, 151]]]]], [], 0, null, ["loc", [null, [38, 6], [47, 13]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [48, 20], [48, 46]]]], "activity"], [], ["loc", [null, [48, 16], [48, 58]]]], ["subexpr", "eq", [["get", "post.constructor.modelName", ["loc", [null, [48, 63], [48, 89]]]], "event"], [], ["loc", [null, [48, 59], [48, 98]]]]], [], ["loc", [null, [48, 12], [48, 99]]]]], [], 1, null, ["loc", [null, [48, 6], [50, 13]]]]],
          locals: ["post"],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 53,
                "column": 4
              },
              "end": {
                "line": 56,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "style", "font-style: italic; margin: 20px 0 20px 0;");
            var el2 = dom.createTextNode("showing last 20 notes out of ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "totalNotes", ["loc", [null, [55, 91], [55, 105]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 6
                },
                "end": {
                  "line": 62,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [61, 8], [61, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 62,
                  "column": 6
                },
                "end": {
                  "line": 64,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("a");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'onclick');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onLoadPostsBelow", ["loc", [null, [63, 28], [63, 44]]]], ["subexpr", "hash", [], ["model", ["get", "model", ["loc", [null, [63, 57], [63, 62]]]], "filter", ["get", "filter", ["loc", [null, [63, 70], [63, 76]]]], "sortOrder", ["get", "sortOrder", ["loc", [null, [63, 87], [63, 96]]]], "postId", ["get", "bottomPost.id", ["loc", [null, [63, 104], [63, 117]]]], "including", false], ["loc", [null, [63, 45], [63, 134]]]]], [], ["loc", [null, [63, 19], [63, 136]]]]], ["inline", "t", ["cases.posts.load_more"], [], ["loc", [null, [63, 137], [63, 166]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 2
              },
              "end": {
                "line": 66,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-timeline__loader");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "loadingBottom", ["loc", [null, [60, 12], [60, 25]]]]], [], 0, 1, ["loc", [null, [60, 6], [64, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 67,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-timeline__dropdowns");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-timeline__feed");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [5]);
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(element2, 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "controlsVisible", ["loc", [null, [3, 10], [3, 25]]]]], [], 0, null, ["loc", [null, [3, 4], [24, 11]]]], ["block", "if", [["get", "topPostsAvailable", ["loc", [null, [27, 8], [27, 25]]]]], [], 1, null, ["loc", [null, [27, 2], [35, 9]]]], ["block", "each", [["get", "posts", ["loc", [null, [37, 12], [37, 17]]]]], [], 2, null, ["loc", [null, [37, 4], [51, 13]]]], ["block", "if", [["subexpr", "gt", [["get", "totalNotes", ["loc", [null, [53, 14], [53, 24]]]], 20], [], ["loc", [null, [53, 10], [53, 28]]]]], [], 3, null, ["loc", [null, [53, 4], [56, 11]]]], ["block", "if", [["get", "bottomPostsAvailable", ["loc", [null, [58, 8], [58, 28]]]]], [], 4, null, ["loc", [null, [58, 2], [66, 9]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 68,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-timeline/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "model.isNew", ["loc", [null, [1, 10], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [67, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-toast/component', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  var ALERT_TYPE_INFO = 'info';
  var ALERT_TYPE_WARNING = 'warning';
  var ALERT_TYPE_ERROR = 'error';
  var ALERT_TYPE_SUCCESS = 'success';

  var AUTODISMISS_TIMEOUT = _frontendCpConfigEnvironment['default'].APP.autodismissTimeout;

  exports['default'] = _ember['default'].Component.extend({
    type: null,
    dismissable: false,
    autodismiss: false,
    isClosing: false,

    // HTML
    classNames: ['ko-toast'],

    animateIn: _ember['default'].on('willInsertElement', function () {
      var $componentElement = this.$();
      animate($componentElement, 'ko-toast--add');
    }),

    initAutoDismiss: _ember['default'].on('willInsertElement', function () {
      var _this = this;

      var autodismiss = this.get('autodismiss');
      if (!autodismiss) {
        return;
      }
      _ember['default'].run.later(function () {
        _this.animateOut();
      }, AUTODISMISS_TIMEOUT);
    }),

    iconClass: _ember['default'].computed('type', function () {
      switch (this.get('type')) {
        case ALERT_TYPE_INFO:
          return 'i-info';
        case ALERT_TYPE_WARNING:
          return 'i-caution-solid';
        case ALERT_TYPE_ERROR:
          return 'i-danger-solid';
        case ALERT_TYPE_SUCCESS:
          return 'i-tick';
        default:
          return null;
      }
    }),

    click: function click() {
      var autodismiss = this.get('autodismiss');
      if (autodismiss) {
        this.animateOut();
      }
    },

    animateOut: function animateOut() {
      var _this2 = this;

      var isClosing = this.get('isClosing');
      if (isClosing) {
        return;
      }
      this.set('isClosing', true);

      var $componentElement = this.$();
      var componentHeight = $componentElement.outerHeight();
      animate($componentElement, 'ko-toast--remove', {
        clamp: true
      }).then(function () {
        $componentElement.hide();
        _this2.sendAction('close');
      });
      $componentElement.css('margin-bottom', -componentHeight + 'px');
    },

    actions: {
      onCloseClicked: function onCloseClicked() {
        this.animateOut();
      }
    }
  });

  function animate($element, className) {
    var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

    var _ref$clamp = _ref.clamp;
    var clamp = _ref$clamp === undefined ? false : _ref$clamp;

    return new _ember['default'].RSVP.Promise(function (resolve, reject) {
      $element.addClass(className);
      forceRender($element);
      $element.one('transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd', function () {
        if (!clamp) {
          $element.removeClass(className + ' ' + className + '-active');
        }
        resolve();
      });
      $element.addClass(className + '-active');
    });

    function forceRender($element) {
      $element.outerHeight();
      return $element;
    }
  }
});
define("frontend-cp/components/ko-toast/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-toast/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "ko-toast__close button-naked i-cross-bold");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["onCloseClicked"], [], ["loc", [null, [3, 82], [3, 109]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/components/ko-toast/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("p");
        dom.setAttribute(el2, "class", "ko-toast__title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-toast__body");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createMorphAt(element1, 1, 1);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element1, [5]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element1, [7]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-toast__container ko-toast__container--", ["get", "type", ["loc", [null, [1, 56], [1, 60]]]], ["subexpr", "if", [["get", "body", ["loc", [null, [1, 68], [1, 72]]]], " ko-toast__container--multiline"], [], ["loc", [null, [1, 63], [1, 108]]]], ["subexpr", "if", [["get", "dismissable", ["loc", [null, [1, 113], [1, 124]]]], " ko-toast__container--dismissable"], [], ["loc", [null, [1, 108], [1, 162]]]]]]], ["block", "if", [["get", "dismissable", ["loc", [null, [2, 8], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["attribute", "class", ["concat", ["ko-toast__icon ", ["get", "iconClass", ["loc", [null, [5, 33], [5, 42]]]]]]], ["content", "title", ["loc", [null, [6, 29], [6, 40]]]], ["content", "body", ["loc", [null, [7, 30], [7, 40]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-toggle/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].Component.extend({
    //attributes
    ariaLive: 'assertive',
    tabindex: 0,
    label: '',

    //state
    activated: null,

    setDefaultState: _ember['default'].on('init', function () {
      if (!this.get('activated')) {
        this.set('activated', false);
      }
    }),

    keyDown: function keyDown(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        return false;
      }
    },

    keyUp: function keyUp(e) {
      if (e.keyCode === _frontendCpLibKeycodes.space) {
        this.send('toggleRadio');
      }
      return false;
    },

    actions: {
      toggleRadio: function toggleRadio() {
        if (this.onToggle) {
          this.sendAction('onToggle', !this.get('activated'));
        } else {
          this.toggleProperty('activated');
        }
      }
    }

  });
});
define("frontend-cp/components/ko-toggle/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'for');
          morphs[2] = dom.createAttrMorph(element0, 'onclick');
          morphs[3] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ko-toggle__label u-v-center ", ["subexpr", "if", [["get", "micro", ["loc", [null, [5, 49], [5, 54]]]], "ko-toggle__label--micro"], [], ["loc", [null, [5, 44], [5, 82]]]]]]], ["attribute", "for", ["concat", [["get", "elementId", ["loc", [null, [5, 91], [5, 100]]]], "-toggle"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [5, 119], [5, 143]]]]], ["content", "label", ["loc", [null, [5, 144], [5, 153]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-toggle/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "role", "radio");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'aria-checked');
        morphs[2] = dom.createAttrMorph(element1, 'tabindex');
        morphs[3] = dom.createAttrMorph(element1, 'aria-live');
        morphs[4] = dom.createAttrMorph(element1, 'id');
        morphs[5] = dom.createAttrMorph(element1, 'onclick');
        morphs[6] = dom.createAttrMorph(element2, 'class');
        morphs[7] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ko-toggle__container ", ["subexpr", "if", [["get", "micro", ["loc", [null, [1, 38], [1, 43]]]], "ko-toggle__container--micro"], [], ["loc", [null, [1, 33], [1, 75]]]], " ", ["subexpr", "if", [["get", "activated", ["loc", [null, [1, 81], [1, 90]]]], "ko-toggle__container--activated"], [], ["loc", [null, [1, 76], [1, 126]]]]]]], ["attribute", "aria-checked", ["concat", [["get", "activated", ["loc", [null, [1, 157], [1, 166]]]]]]], ["attribute", "tabindex", ["concat", [["get", "tabindex", ["loc", [null, [1, 182], [1, 190]]]]]]], ["attribute", "aria-live", ["concat", [["get", "ariaLive", ["loc", [null, [1, 207], [1, 215]]]]]]], ["attribute", "id", ["concat", [["get", "elementId", ["loc", [null, [1, 225], [1, 234]]]], "-toggle"]]], ["attribute", "onclick", ["subexpr", "action", ["toggleRadio"], [], ["loc", [null, [1, 253], [1, 277]]]]], ["attribute", "class", ["concat", ["ko-toggle__toggle u-v-center ", ["subexpr", "if", [["get", "micro", ["loc", [null, [2, 48], [2, 53]]]], "ko-toggle__toggle--micro"], [], ["loc", [null, [2, 43], [2, 82]]]], " ", ["subexpr", "if", [["get", "activated", ["loc", [null, [2, 88], [2, 97]]]], "ko-toggle__toggle--activated"], [], ["loc", [null, [2, 83], [2, 130]]]]]]], ["block", "if", [["get", "label", ["loc", [null, [4, 6], [4, 11]]]]], [], 0, null, ["loc", [null, [4, 0], [6, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/components/ko-universal-search/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Attributes
    searchResults: null,
    searchQuery: null,
    onLoadSearchRoute: null,
    onSearchChanged: null,

    // State
    highlightedResult: null,
    isLatestSearchPending: false,
    isMouseHighlight: true,

    // HTML
    classNames: ['ko-universal-search'],

    // Services
    universalSearchService: _ember['default'].inject.service('suggestion/universal'),
    store: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    didChangeSearchingStatus: _ember['default'].on('init', _ember['default'].observer('isSearching', function () {
      this.attrs.onSearchChanged(this.get('isSearching'));
    })),

    onSearchQueryChanged: _ember['default'].observer('searchQuery', function () {
      this.set('isLatestSearchPending', true);
      this.set('highlightedResult', null);
      _ember['default'].run.debounce(this, 'fireSearchAction', 250);
    }),

    isSearching: _ember['default'].computed.bool('searchQuery'),
    isSearchLoading: _ember['default'].computed.and('searchQuery', 'isLatestSearchPending'),

    flattenedResults: _ember['default'].computed('searchResults', function () {
      return this.get('searchResults').reduce(function (results, searchResultGroup) {
        searchResultGroup.results.forEach(function (result) {
          results.pushObject(result);
        });

        return results;
      }, []);
    }),

    adjustScroll: function adjustScroll(highlightIndex) {
      var down = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      var rowHeight = 42;
      var highlight = rowHeight * highlightIndex;
      var element = _ember['default'].$('.universal-search__results');

      if (down) {
        var offsetHeight = 9 * rowHeight;
        if (highlight - element.scrollTop() > offsetHeight) {
          element.scrollTop(highlight - offsetHeight);
        }
      } else {
        if (highlight < element.scrollTop()) {
          element.scrollTop(highlight);
        }
      }
    },

    fireSearchAction: function fireSearchAction() {
      var _this = this;

      var query = this.get('searchQuery');

      if (!query) {
        this.set('searchResults', []);
        this.set('isLatestSearchPending', false);
        return;
      }

      var searchService = this.get('universalSearchService');
      var promise = searchService.search(query);

      this.set('isLatestSearchPending', true);
      promise.then(function (response) {
        var results = response.data;
        if (searchService.isPromiseDiscarded(query)) {
          return;
        }

        _this.set('isLatestSearchPending', false);
        _this.set('searchResults', results);
      }, function () {
        _this.set('isLatestSearchPending', false);
      });
    },

    actions: {
      clearSearch: function clearSearch() {
        this.set('searchQuery', '');
        this.set('searchResults', []);
        this.set('highlightedResult', null);
      },

      highlightResult: function highlightResult(highlightedResult) {
        if (this.get('isMouseHighlight')) {
          this.set('highlightedResult', highlightedResult);
        }
        this.set('isMouseHighlight', true);
      },

      selectHighlightedResult: function selectHighlightedResult(hasModifier) {
        var result = this.get('highlightedResult');

        if (result) {
          this.get('metrics').trackEvent({
            event: 'Sitewide Search Record Clicked',
            category: 'Sitewide Search',
            action: 'click',
            label: result.resource
          });

          if (!hasModifier) {
            this.send('clearSearch');
          }

          switch (result.resource) {
            case 'user':
              this.attrs.onLoadSearchRoute('session.agent.users.user', result.title, result.id, hasModifier);
              break;
            case 'case':
              this.attrs.onLoadSearchRoute('session.agent.cases.case', result.title, result.id, hasModifier);
              break;
            case 'organization':
              this.attrs.onLoadSearchRoute('session.agent.organisations.organisation', result.title, result.id, hasModifier);
              break;
            default:
              break;
          }
        }
      },

      highlightNextResult: function highlightNextResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');

        this.set('isMouseHighlight', false);

        if (!currentlyHighlightedResult) {
          this.set('highlightedResult', results.get('firstObject'));
          return;
        }

        var currentIndex = results.indexOf(currentlyHighlightedResult);
        if (currentIndex < results.length - 1) {
          this.set('highlightedResult', results.objectAt(currentIndex + 1));
          this.adjustScroll(currentIndex + 1, true);
        }
      },

      highlightPreviousResult: function highlightPreviousResult() {
        var currentlyHighlightedResult = this.get('highlightedResult');
        var results = this.get('flattenedResults');
        var currentIndex = results.indexOf(currentlyHighlightedResult);

        this.set('isMouseHighlight', false);

        // back to the start if we try to go below the list
        if (currentIndex > 0) {
          this.set('highlightedResult', results.objectAt(currentIndex - 1));
          this.adjustScroll(currentIndex - 1, false);
        } else {
          this.set('highlightedResult', null);
        }
      }
    }
  });
});
define('frontend-cp/components/ko-universal-search/entry/component', ['exports', 'ember', 'frontend-cp/lib/keycodes'], function (exports, _ember, _frontendCpLibKeycodes) {
  exports['default'] = _ember['default'].TextField.extend({
    onSelectHighlightedResult: null,
    onHighlightNextResult: null,
    onHighlightPreviousResult: null,
    onStopSearch: null,

    // HTML
    classNames: ['ko-universal-search_entry'],

    keyDown: function keyDown(e) {
      switch (e.keyCode) {
        case _frontendCpLibKeycodes.down:
          {
            this.attrs.onHighlightNextResult();
            break;
          }
        case _frontendCpLibKeycodes.up:
          {
            this.attrs.onHighlightPreviousResult();
            break;
          }
        case _frontendCpLibKeycodes.enter:
          {
            this.attrs.onSelectHighlightedResult();
            return false;
          }
        case _frontendCpLibKeycodes.escape:
          {
            this.attrs.onStopSearch();
          }
      }
    }
  });
});
define('frontend-cp/components/ko-universal-search/result/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Parmas:
    result: null,
    isHighlighted: false,
    onSelectHighlightedResult: null,
    onHighlight: null,
    onHighlightPreviousResult: null,
    onStopSearch: null,

    tagName: 'li',
    classNames: ['ko-universal-search_result'],
    classNameBindings: ['isHighlighted:is-active'],

    iconClass: _ember['default'].computed('result', function () {
      return 'i-' + this.get('result.resource');
    }),

    highlight: _ember['default'].on('mouseEnter', function () {
      this.attrs.onHighlight(this.get('result'));
    }),

    click: function click(event) {
      var hasModifier = event.metaKey || event.ctrlKey || event.shiftKey;
      this.attrs.onSelectHighlightedResult(hasModifier);
      if (!hasModifier) {
        this.attrs.onStopSearch();
      }
    }

  });
});
define("frontend-cp/components/ko-universal-search/result/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/result/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search_result__content");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search_result__action");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["universal-search_result__icon ", ["get", "iconClass", ["loc", [null, [1, 42], [1, 51]]]]]]], ["inline", "escape-html", [["get", "result.title", ["loc", [null, [3, 16], [3, 28]]]]], [], ["loc", [null, [3, 2], [3, 30]]]], ["inline", "t", ["generic.search_result_select_instruction"], [], ["loc", [null, [5, 45], [5, 93]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-universal-search/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-universal-search__overlay");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [0]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [3, 12], [3, 36]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 4
            },
            "end": {
              "line": 10,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["class", "ko-universal-search__loader"], ["loc", [null, [9, 6], [9, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 4
            },
            "end": {
              "line": 12,
              "column": 4
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "i-search i-size-18 i-color-grey--dark u-inherit-lh");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 25,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "universal-search__action");
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "i-cross");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'onclick');
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [24, 50], [24, 74]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 6
                },
                "end": {
                  "line": 41,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-universal-search/result", [], ["result", ["subexpr", "@mut", [["get", "result", ["loc", [null, [35, 15], [35, 21]]]]], [], []], "isHighlighted", ["subexpr", "eq", [["get", "result", ["loc", [null, [36, 26], [36, 32]]]], ["get", "highlightedResult", ["loc", [null, [36, 33], [36, 50]]]]], [], ["loc", [null, [36, 22], [36, 51]]]], "onHighlight", ["subexpr", "action", ["highlightResult"], [], ["loc", [null, [37, 20], [37, 46]]]], "onSelectHighlightedResult", ["subexpr", "action", ["selectHighlightedResult"], [], ["loc", [null, [38, 34], [38, 68]]]], "onStopSearch", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [39, 21], [39, 43]]]]], ["loc", [null, [34, 6], [40, 8]]]]],
            locals: ["result"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 44,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "list-bare");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "resultsGroup.results", ["loc", [null, [33, 14], [33, 34]]]]], [], 0, null, ["loc", [null, [33, 6], [41, 15]]]]],
          locals: ["resultsGroup"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 47,
                    "column": 8
                  },
                  "end": {
                    "line": 49,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["search.searching"], [], ["loc", [null, [48, 10], [48, 34]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 49,
                    "column": 8
                  },
                  "end": {
                    "line": 51,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["search.no-results"], [], ["loc", [null, [50, 10], [50, 35]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "u-p");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "isLatestSearchPending", ["loc", [null, [47, 14], [47, 35]]]]], [], 0, 1, ["loc", [null, [47, 8], [51, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 44,
                "column": 4
              },
              "end": {
                "line": 54,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "isSearching", ["loc", [null, [45, 10], [45, 21]]]]], [], 0, null, ["loc", [null, [45, 4], [53, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 0
            },
            "end": {
              "line": 76,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "universal-search__content");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "universal-search__results");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "searchResults", ["loc", [null, [31, 12], [31, 25]]]]], [], 0, 1, ["loc", [null, [31, 4], [54, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 77,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-universal-search/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "universal-search__input");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "universal-search__icon");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(element2, 5, 5);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "searchQuery", ["loc", [null, [1, 6], [1, 17]]]]], [], 0, null, ["loc", [null, [1, 0], [4, 7]]]], ["block", "if", [["get", "isSearchLoading", ["loc", [null, [8, 10], [8, 25]]]]], [], 1, 2, ["loc", [null, [8, 4], [12, 11]]]], ["inline", "ko-universal-search/entry", [], ["type", "text", "onSelectHighlightedResult", ["subexpr", "action", ["selectHighlightedResult"], [], ["loc", [null, [16, 30], [16, 64]]]], "onHighlightNextResult", ["subexpr", "action", ["highlightNextResult"], [], ["loc", [null, [17, 26], [17, 56]]]], "onHighlightPreviousResult", ["subexpr", "action", ["highlightPreviousResult"], [], ["loc", [null, [18, 30], [18, 64]]]], "onStopSearch", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [19, 17], [19, 39]]]], "value", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [20, 10], [20, 21]]]]], [], []], "placeholder", ["subexpr", "t", ["search.placeholder"], [], ["loc", [null, [21, 16], [21, 40]]]]], ["loc", [null, [15, 2], [21, 42]]]], ["block", "if", [["get", "searchQuery", ["loc", [null, [23, 8], [23, 19]]]]], [], 3, null, ["loc", [null, [23, 2], [25, 9]]]], ["block", "if", [["get", "searchQuery", ["loc", [null, [28, 6], [28, 17]]]]], [], 4, null, ["loc", [null, [28, 0], [76, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('frontend-cp/components/ko-user-action-menu/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    //Params
    permissions: null,
    userRoleType: null,
    userModel: null,

    permissionService: _ember['default'].inject.service('permissions'),
    sessionService: _ember['default'].inject.service('session'),

    editSignature: 'editSignature',
    changeUserPassword: 'changeUserPassword',
    deleteUser: 'deleteUser',

    classNameBindings: ['menuActive', 'noItems:u-hidden'],
    menuActive: false,

    noItems: _ember['default'].computed('hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission', function () {
      var _this = this;

      var permissionItems = ['hasChangePasswordEmailPermission', 'hasChangeSignaturePermission', 'hasDeletePermission'];
      return permissionItems.filter(function (item) {
        return _this.get(item);
      }).length === 0;
    }),

    hasChangeSignaturePermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.signature.edit', this.get('userModel'));
    }),

    hasChangePasswordEmailPermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.password.change', this.get('userModel'));
    }),

    hasDeletePermission: _ember['default'].computed('sessionService.permissions', 'userModel.role.roleType', function () {
      return this.get('permissionService').has('app.user.delete', this.get('userModel'));
    }),

    actions: {
      editSignature: function editSignature() {
        this.sendAction('editSignature');
      },
      deleteUser: function deleteUser() {
        this.sendAction('deleteUser');
      },
      changeUserPassword: function changeUserPassword() {
        this.sendAction('changeUserPassword');
      },
      showMenu: function showMenu() {
        this.set('menuActive', true);
      },
      hideMenu: function hideMenu() {
        this.set('menuActive', false);
      }
    }
  });
});
define("frontend-cp/components/ko-user-action-menu/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element2, 'onclick');
            morphs[1] = dom.createMorphAt(element2, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["editSignature"], [], ["loc", [null, [10, 47], [10, 73]]]]], ["inline", "t", ["users.editsignature"], [], ["loc", [null, [11, 6], [11, 33]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'onclick');
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["changeUserPassword"], [], ["loc", [null, [16, 47], [16, 78]]]]], ["inline", "t", ["users.changepassword"], [], ["loc", [null, [17, 6], [17, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            dom.setAttribute(el1, "class", "ko-dropdown_list__item");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'onclick');
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["deleteUser"], [], ["loc", [null, [22, 47], [22, 70]]]]], ["inline", "t", ["users.deleteuser"], [], ["loc", [null, [23, 6], [23, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "ko-dropdown_list__item");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  \n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element3, 'onclick');
          morphs[1] = dom.createMorphAt(element3, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", [["get", "onCreateNewCase", ["loc", [null, [5, 54], [5, 69]]]]], [], ["loc", [null, [5, 45], [5, 71]]]]], ["inline", "t", ["users.create_new_case"], [], ["loc", [null, [6, 4], [6, 33]]]], ["block", "if", [["get", "hasChangeSignaturePermission", ["loc", [null, [9, 8], [9, 36]]]]], [], 0, null, ["loc", [null, [9, 2], [13, 9]]]], ["block", "if", [["get", "hasChangePasswordEmailPermission", ["loc", [null, [15, 8], [15, 40]]]]], [], 1, null, ["loc", [null, [15, 2], [19, 9]]]], ["block", "if", [["get", "hasDeletePermission", ["loc", [null, [21, 8], [21, 27]]]]], [], 2, null, ["loc", [null, [21, 2], [25, 9]]]]],
        locals: ["dropdown"],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "button");
          dom.setAttribute(el1, "class", "button button--default button--dropdown");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "i-chevron-large-down");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-action-menu/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "basic-dropdown", [], ["renderInPlace", true, "horizontalPosition", "left", "class", "ko-user-action-menu__dropdown"], 0, 1, ["loc", [null, [1, 0], [30, 19]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/components/ko-user-content/component', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['ko-user-content'],

    // Params:
    isFollowingSaving: false,
    isStateSaving: false,

    store: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service('store-cache'),
    sessionService: _ember['default'].inject.service('session'),
    permissionService: _ember['default'].inject.service('permissions'),
    notificationService: _ember['default'].inject.service('notification'),
    errorHandler: _ember['default'].inject.service('error-handler'),
    customFieldsList: _ember['default'].inject.service('custom-fields/list'),
    tagService: _ember['default'].inject.service('tags'),
    metrics: _ember['default'].inject.service(),

    intl: _ember['default'].inject.service(),

    errors: [],
    errorMap: null,

    tagSuggestionService: _ember['default'].inject.service('suggestion/tag'),
    organizationSuggestionService: _ember['default'].inject.service('suggestion/organization'),

    teamRecords: [],
    suggestedTeams: [],
    suggestedTags: [],
    editedCustomFields: null,
    editingSignature: null,
    isSaving: false,
    isUserEdited: false,

    signatureModal: false,

    onCreateNewCase: null,

    isEditInProgress: false,

    replyContent: '',
    notes: [],
    totalNotes: 0,

    init: function init() {
      this._super.apply(this, arguments);
      this.set('errorMap', _ember['default'].Object.create());
    },

    initCustomFields: _ember['default'].on('init', function () {
      var _this = this;

      this.set('editedCustomFields', new _ember['default'].Object());
      this.get('model.tags').then(function (newTags) {
        _this.set('cachedTags', newTags.map(function (tag) {
          return tag.get('id');
        }));
      });
    }),

    roles: [],
    initRoles: _ember['default'].on('init', function () {
      var _this2 = this;

      this.get('store').findAll('role').then(function (roles) {
        _this2.set('roles', roles);
      });
    }),

    initTeams: _ember['default'].on('init', function () {
      var _this3 = this;

      this.set('teams', []);
      this.get('storeCache').query('team', { limit: 10000 }).then(function (teams) {
        _this3.set('teams', teams.map(function (team) {
          return team.get('title');
        }));
        _this3.set('teamRecords', teams);
      });
    }),

    organizations: [],
    initOrganizations: _ember['default'].on('init', function () {
      this.set('organizations', this.get('model.organization.id') ? [this.get('model.organization')] : []);
    }),

    didReceiveAttrs: function didReceiveAttrs(_ref) {
      var oldAttrs = _ref.oldAttrs;
      var newAttrs = _ref.newAttrs;

      this._super.apply(this, arguments);

      if (!oldAttrs || newAttrs.model.value !== oldAttrs.model.value) {
        this.set('notes', []);
        this.set('totalNotes', 0);

        this.requestUserNotes();
      }
    },

    isContentEdited: _ember['default'].computed('replyContent', function () {
      return this.get('replyContent').trim() !== '';
    }),

    isEdited: _ember['default'].computed('isContentEdited', 'isUserEdited', function () {
      return this.get('isContentEdited') || this.get('isUserEdited');
    }),

    submitDisabled: _ember['default'].computed('isSaving', 'isEdited', function () {
      return this.get('isSaving') || !this.get('isEdited');
    }),

    agentAccessLevels: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.inherit'),
        value: 'INHERIT-FROM-ROLE'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.self'),
        value: 'SELF'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.teams'),
        value: 'TEAMS'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.agentaccess.all'),
        value: 'ALL'
      })];
    }),

    organizationAccessLevels: _ember['default'].computed(function () {
      return [_ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.organizationaccess.organization'),
        value: 'ORGANIZATION'
      }), _ember['default'].Object.create({
        name: this.get('intl').findTranslationByKey('users.infobar.organizationaccess.requested'),
        value: 'REQUESTED'
      })];
    }),

    recentFeedback: [],
    initRecentFeedback: _ember['default'].on('init', function () {
      var _this4 = this;

      this.get('store').query('rating', { user_id: this.get('model.id') }).then(function (ratings) {
        return _this4.set('recentFeedback', ratings);
      });
    }),

    userDates: _ember['default'].computed('model.createdAt', 'model.updatedAt', 'model.activityAt', function () {
      return [{
        title: this.get('intl').findTranslationByKey('users.metadata.created'),
        value: this.get('model.createdAt'),
        type: 'created'
      }, {
        title: this.get('intl').findTranslationByKey('users.metadata.updated'),
        value: this.get('model.updatedAt'),
        type: 'updated'
      }, {
        title: this.get('intl').findTranslationByKey('users.metadata.lastseen'),
        value: this.get('model.visitedAt'),
        type: 'lastseen'
      }];
    }),

    updatedDate: _ember['default'].computed('userDates.[]', function () {
      return this.get('userDates').findBy('type', 'updated');
    }),

    customFields: _ember['default'].computed('model.customFields', function () {
      return this.get('model.customFields').map(function (field) {
        return field.get('field');
      });
    }),

    requestUserNotes: function requestUserNotes() {
      var _this5 = this;

      var store = this.get('store');
      var user = this.get('model');

      // when we request user note, we convert them to post model
      // that can be used by ko-feed/item component
      store.query('user-note', { parent: user, limit: 20 }).then(function (notes) {
        if (_this5.get('isDestroyed')) {
          return;
        }

        _this5.set('totalNotes', notes.get('meta.total'));

        var notesList = store.peekAll('post').filter(function (post) {
          return post.get('original.parent.id') === user.get('id');
        });

        _this5.set('notes', notesList);
      });
    },

    convertErrorsToMap: function convertErrorsToMap(errors) {
      return (errors || []).filter(function (error) {
        return error.parameter;
      }).reduce(function (errorMap, error) {
        errorMap.set(error.parameter, true);
        return errorMap;
      }, _ember['default'].Object.create({}));
    },

    updateDirtyFieldHash: function updateDirtyFieldHash() {
      var _this6 = this;

      var editedCustomFields = this.get('editedCustomFields');
      this.get('model.customFields').forEach(function (customField) {
        var id = customField.get('field.id');
        var changed = Boolean(customField.changedAttributes().value);
        if (id) {
          editedCustomFields.set(id, changed);
        }
      });

      var fields = ['isTeamsFieldEdited', 'isTagsFieldEdited', 'isTimezoneEdited', 'isOrganisationEdited', 'isRoleEdited', 'isAccessLevelEdited'];
      var systemFieldEdited = fields.any(function (field) {
        return _this6.get(field);
      });
      var sigEdited = this.get('model').hasDirtyAttribute('signature');
      var customEdited = Object.values(editedCustomFields).reduce(function (accum, current) {
        return accum || current;
      }, false);

      this.set('isUserEdited', systemFieldEdited || sigEdited || customEdited);
    },

    resetForm: function resetForm() {
      this.set('errors', []);
      this.set('errorMap', _ember['default'].Object.create());
      this.set('isRoleEdited', false);
      this.set('isOrganisationEdited', false);
      this.set('isTimezoneEdited', false);
      this.set('isTeamsFieldEdited', false);
      this.set('isAccessLevelEdited', false);
      this.set('isFollowingSaving', false);
      this.set('isStateSaving', false);
      this.set('isSaving', false);
      this.set('replyContent', '');
      this.set('isEditInProgress', false);

      this.updateDirtyFieldHash();
    },

    refreshTags: function refreshTags() {
      var _this7 = this;

      this.get('tagService').refreshTagsForUser(this.get('model')).then(function (tags) {
        _this7.set('cachedTags', tags.map(function (tag) {
          return tag.get('id');
        }));
      });
    },

    isTagsFieldEdited: _ember['default'].computed('cachedTags.[]', 'model.tags.@each.id', function () {
      var cachedTagNames = this.get('cachedTags');
      var tags = this.get('model.tags');
      return this.get('tagService').areTagNamesMatchingCache(cachedTagNames, tags);
    }),

    canModifyUserState: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.disable', this.get('model'));
    }),

    canFollowUser: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.follow', this.get('model'));
    }),

    canChangeAgentAccessPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_agent_access_permission', this.get('model'));
    }),

    canChangeOrganizationAccessPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_organization_access_permission', this.get('model'));
    }),

    canChangeUserTeamPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_team_permission', this.get('model'));
    }),

    canViewUserTeamPermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.view_team_permission', this.get('model'));
    }),

    canChangeRolePermission: _ember['default'].computed('model.role', function () {
      return this.get('permissionService').has('app.user.change_role_permission', this.get('model'));
    }),

    isEnabled: _ember['default'].computed.bool('model.isEnabled'),

    customFieldValueHash: _ember['default'].computed('model.customFields.@each.value', function () {
      var values = _ember['default'].Object.create();
      this.get('model.customFields').forEach(function (field) {
        values.set(field.get('field.id'), field.get('value'));
      });
      return values;
    }),

    suggestTagsCallback: function suggestTagsCallback() {
      var _this8 = this;

      var searchTerm = this.get('tagSearchTerm');
      var selectedTags = this.get('model.tags');
      var suggestionService = this.get('tagSuggestionService');
      suggestionService.suggest(searchTerm).then(function (data) {
        if (suggestionService.isPromiseDiscarded(searchTerm)) {
          return;
        }

        data = suggestionService.exclude(data, selectedTags.mapBy('name'));

        _this8.set('suggestedTags', data.map(function (tag) {
          return tag.get('name');
        }));
        suggestionService.flushQueue();
      });
    },

    processOrganizationPayload: function processOrganizationPayload(payload) {
      var organizationId = get(payload, 'id');
      var organization = null;

      if (organizationId) {
        var data = JSON.parse(JSON.stringify(payload));
        this.get('store').pushPayload({ organization: data });
        organization = this.get('store').peekRecord('organization', organizationId);
      }

      var found = this.get('organizations').filter(function (record) {
        return parseInt(get(record, 'id')) === parseInt(organizationId);
      });

      if (!found.length && organization) {
        this.get('organizations').pushObject(organization);
      }

      return organization;
    },

    actions: {
      textEditorFocusStateChange: function textEditorFocusStateChange(state) {
        if (!state) {
          this.set('isEditInProgress', false);
        }
      },

      beginReply: function beginReply() {
        this.set('isEditInProgress', true);

        _ember['default'].run.scheduleOnce('afterRender', function () {
          _ember['default'].$('.ql-editor').focus();
        });
      },

      searchOrganization: function searchOrganization(query) {
        var _this9 = this;

        if (!query) {
          return this.get('organizations');
        }

        var searchService = this.get('organizationSuggestionService');

        return searchService.suggest(query).then(function (response) {
          if (searchService.isPromiseDiscarded(query)) {
            return _this9.get('organizations');
          }

          searchService.flushQueue();

          return response.data;
        });
      },

      toggleUserState: function toggleUserState() {
        var _this10 = this;

        this.set('isStateSaving', true);
        this.toggleProperty('model.isEnabled');
        this.get('model').save().then(function () {
          _this10.get('metrics').trackEvent({
            event: 'User State Changed',
            category: 'User',
            action: _this10.get('model.isEnabled') ? 'enabled' : 'disabled',
            label: 'state button'
          });

          return _this10.resetForm();
        });
      },

      editSignature: function editSignature() {
        this.set('signatureModal', true);
        this.set('editingSignature', this.get('model.signature'));
      },

      closeSignatureModal: function closeSignatureModal() {
        this.set('signatureModal', false);
      },

      deleteUser: function deleteUser() {
        var deleteMsg = this.get('intl').findTranslationByKey('users.confirmdelete');

        if (confirm(deleteMsg)) {
          this.get('model').deleteRecord();
          this.get('model').save();
        }
      },

      updateSignature: function updateSignature() {
        this.set('model.signature', this.get('editingSignature'));
        this.set('signatureModal', false);
        this.updateDirtyFieldHash();

        this.get('metrics').trackEvent({
          event: 'User Signature Updated',
          category: 'User',
          action: 'submit',
          label: 'signature modal'
        });
      },

      roleSelect: function roleSelect(role) {
        this.set('model.role', role);
        this.set('isRoleEdited', this.get('model').hasDirtyBelongsToRelationship('role'));
        this.set('errorMap.role_id', null);
        this.updateDirtyFieldHash();
      },

      organizationSelect: function organizationSelect(org) {
        var _this11 = this;

        if (org) {
          this.set('model.organization', this.processOrganizationPayload(org));
        } else {
          this.set('model.organization', null);
        }

        this.set('errorMap.organization_id', null);
        this.get('model').hasDirtyBelongsToRelationship('organization').then(function (relationshipIsDirty) {
          _this11.set('isOrganisationEdited', relationshipIsDirty);
          _this11.updateDirtyFieldHash();
        });
      },

      agentLevelSelect: function agentLevelSelect(level) {
        this.set('model.agentCaseAccess', level);
        this.set('isAccessLevelEdited', this.get('model').hasDirtyBelongsToRelationship('agentCaseAccess'));
        this.updateDirtyFieldHash();
        this.set('errorMap.agent_case_access', null);
      },

      organizationLevelSelect: function organizationLevelSelect(level) {
        this.set('model.organizationCaseAccess', level);
        this.set('isAccessLevelEdited', this.get('model').hasDirtyBelongsToRelationship('organizationCaseAccess'));
        this.updateDirtyFieldHash();
        this.set('errorMap.organization_case_access', null);
      },

      timezoneSelect: function timezoneSelect(timezone) {
        this.set('model.timeZone', timezone);
        this.set('isTimezoneEdited', this.get('model').hasDirtyAttribute('timeZone'));
        this.updateDirtyFieldHash();
        this.set('errorMap.time_zone', null);
      },

      addTeam: function addTeam(teamName) {
        var team = this.get('teamRecords').findBy('title', teamName);
        if (team) {
          team.set('isNew', true);
          this.get('model.teams').pushObject(team);
          this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
          this.updateDirtyFieldHash();
        }
        this.set('errorMap.team_ids', null);
      },

      removeTeam: function removeTeam(team) {
        this.get('model.teams').removeObject(team);
        this.set('isTeamsFieldEdited', this.get('model').hasDirtyHasManyRelationship('teams'));
        this.updateDirtyFieldHash();
        this.set('errorMap.team_ids', null);
      },

      suggestTeams: function suggestTeams(searchTerm, selectedTeams) {
        var _this12 = this;

        if (!searchTerm) {
          this.set('suggestedTeams', []);
          return;
        }

        var suggestionService = this.get('tagSuggestionService');

        suggestionService.suggestFilter(this.get('teamRecords'), searchTerm, 'title').then(function (data) {
          var suggestedTeams = suggestionService.exclude(data, selectedTeams, 'title');
          _this12.set('suggestedTeams', suggestedTeams.map(function (tag) {
            return tag.get('title');
          }));
        });
      },

      addTag: function addTag(tagName) {
        if (!this.get('model.tags').findBy('name', tagName.trim())) {
          var newTag = this.get('tagService').getTagByName(tagName);
          newTag.set('isNew', true);
          this.get('model.tags').pushObject(newTag);
          this.updateDirtyFieldHash();
        }
      },

      removeTag: function removeTag(tag) {
        this.get('model.tags').removeObject(tag);
        this.updateDirtyFieldHash();
      },

      suggestTags: function suggestTags(searchTerm) {
        if (!searchTerm) {
          this.set('suggestedTags', []);
          return;
        }

        this.set('tagSearchTerm', searchTerm);
        _ember['default'].run.debounce(this, this.suggestTagsCallback, 300);
      },

      changeUserPassword: function changeUserPassword() {
        var _this13 = this;

        var PAYLOAD = { email: this.get('model.primaryEmailAddress') };
        var adapter = this.container.lookup('adapter:application');

        _ember['default'].$.ajax(adapter.namespace + '/base/password/reset', {
          method: 'POST',
          contentType: 'application/json',
          data: JSON.stringify(PAYLOAD),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(function () {
          _this13.get('notificationService').add({
            type: 'success',
            title: _this13.get('intl').findTranslationByKey('users.password_reset_email.success'),
            autodismiss: true
          });

          _this13.get('metrics').trackEvent({
            event: 'User Password Reset',
            category: 'User',
            action: 'click',
            label: 'reset button'
          });
        }, function (response) {
          _this13.get('errorHandler').process(response.responseJSON);

          _this13.get('metrics').trackEvent({
            event: 'User Password Reset Failed',
            category: 'User',
            action: 'click',
            label: 'reset button'
          });
        });
      },

      submit: function submit() {
        var _this14 = this;

        this.set('isSaving', true);

        this.get('model').saveWithNote(this.get('replyContent')).then(function () {
          _this14.get('notificationService').add({
            type: 'success',
            title: _this14.get('intl').findTranslationByKey('users.user.updated'),
            autodismiss: true
          });

          _this14.resetForm();
          _this14.refreshTags();
          _this14.requestUserNotes();

          _this14.get('metrics').trackEvent({
            event: 'User Updated',
            category: 'User',
            action: 'click',
            label: 'submit button'
          });
        }, function (e) {
          e.errors || (e.errors = {});
          _this14.set('errors', e.errors);
          _this14.set('errorMap', _this14.convertErrorsToMap(e.errors));
          _this14.set('isSaving', false);
          _this14.updateDirtyFieldHash();

          _this14.get('metrics').trackEvent({
            event: 'User Update Failed',
            category: 'User',
            action: 'click',
            label: 'submit button'
          });
        });
      },

      fieldUpdated: function fieldUpdated(field, value) {
        this.get('errorMap').set(field.get('key'), false);
        var valueObject = this.get('model.customFields').find(function (value) {
          return value.get('field.id') === field.get('id');
        });

        if (!valueObject) {
          valueObject = this.get('model.customFields').createFragment({
            fieldFragment: this.get('store').createFragment('relationship-fragment', {
              relationshipId: field.id,
              relationshipType: field.type
            })
          });
        }
        valueObject.set('value', value);
        this.updateDirtyFieldHash();
      },

      updatePostContent: function updatePostContent(newContent) {
        this.set('replyContent', newContent);
      }
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/components/ko-user-content/field/timezone-select/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    // Params
    isEdited: false,
    isErrored: false,
    isPusherEdited: false,
    onChangeTimezone: null,
    timezone: null,

    tagName: '',

    timezones: [{ id: 'Pacific/Niue', text: '(GMT-11:00) Niue' }, { id: 'Pacific/Pago_Pago', text: '(GMT-11:00) Pago Pago' }, { id: 'Pacific/Honolulu', text: '(GMT-10:00) Hawaii Time' }, { id: 'Pacific/Rarotonga', text: '(GMT-10:00) Rarotonga' }, { id: 'Pacific/Tahiti', text: '(GMT-10:00) Tahiti' }, { id: 'Pacific/Marquesas', text: '(GMT-09:30) Marquesas' }, { id: 'America/Anchorage', text: '(GMT-09:00) Alaska Time' }, { id: 'Pacific/Gambier', text: '(GMT-09:00) Gambier' }, { id: 'America/Los_Angeles', text: '(GMT-08:00) Pacific Time' }, { id: 'America/Tijuana', text: '(GMT-08:00) Pacific Time - Tijuana' }, { id: 'America/Vancouver', text: '(GMT-08:00) Pacific Time - Vancouver' }, { id: 'America/Whitehorse', text: '(GMT-08:00) Pacific Time - Whitehorse' }, { id: 'Pacific/Pitcairn', text: '(GMT-08:00) Pitcairn' }, { id: 'America/Dawson_Creek', text: '(GMT-07:00) Mountain Time - Dawson Creek' }, { id: 'America/Denver', text: '(GMT-07:00) Mountain Time' }, { id: 'America/Edmonton', text: '(GMT-07:00) Mountain Time - Edmonton' }, { id: 'America/Hermosillo', text: '(GMT-07:00) Mountain Time - Hermosillo' }, { id: 'America/Mazatlan', text: '(GMT-07:00) Mountain Time - Chihuahua, Mazatlan' }, { id: 'America/Phoenix', text: '(GMT-07:00) Mountain Time - Arizona' }, { id: 'America/Yellowknife', text: '(GMT-07:00) Mountain Time - Yellowknife' }, { id: 'America/Belize', text: '(GMT-06:00) Belize' }, { id: 'America/Chicago', text: '(GMT-06:00) Central Time' }, { id: 'America/Costa_Rica', text: '(GMT-06:00) Costa Rica' }, { id: 'America/El_Salvador', text: '(GMT-06:00) El Salvador' }, { id: 'America/Guatemala', text: '(GMT-06:00) Guatemala' }, { id: 'America/Managua', text: '(GMT-06:00) Managua' }, { id: 'America/Mexico_City', text: '(GMT-06:00) Central Time - Mexico City' }, { id: 'America/Regina', text: '(GMT-06:00) Central Time - Regina' }, { id: 'America/Tegucigalpa', text: '(GMT-06:00) Central Time - Tegucigalpa' }, { id: 'America/Winnipeg', text: '(GMT-06:00) Central Time - Winnipeg' }, { id: 'Pacific/Galapagos', text: '(GMT-06:00) Galapagos' }, { id: 'America/Bogota', text: '(GMT-05:00) Bogota' }, { id: 'America/Cancun', text: '(GMT-05:00) America Cancun' }, { id: 'America/Cayman', text: '(GMT-05:00) Cayman' }, { id: 'America/Guayaquil', text: '(GMT-05:00) Guayaquil' }, { id: 'America/Havana', text: '(GMT-05:00) Havana' }, { id: 'America/Iqaluit', text: '(GMT-05:00) Eastern Time - Iqaluit' }, { id: 'America/Jamaica', text: '(GMT-05:00) Jamaica' }, { id: 'America/Lima', text: '(GMT-05:00) Lima' }, { id: 'America/Nassau', text: '(GMT-05:00) Nassau' }, { id: 'America/New_York', text: '(GMT-05:00) Eastern Time' }, { id: 'America/Panama', text: '(GMT-05:00) Panama' }, { id: 'America/Port-au-Prince', text: '(GMT-05:00) Port-au-Prince' }, { id: 'America/Rio_Branco', text: '(GMT-05:00) Rio Branco' }, { id: 'America/Toronto', text: '(GMT-05:00) Eastern Time - Toronto' }, { id: 'Pacific/Easter', text: '(GMT-05:00) Easter Island' }, { id: 'America/Caracas', text: '(GMT-04:30) Caracas' }, { id: 'America/Asuncion', text: '(GMT-03:00) Asuncion' }, { id: 'America/Barbados', text: '(GMT-04:00) Barbados' }, { id: 'America/Boa_Vista', text: '(GMT-04:00) Boa Vista' }, { id: 'America/Campo_Grande', text: '(GMT-03:00) Campo Grande' }, { id: 'America/Cuiaba', text: '(GMT-03:00) Cuiaba' }, { id: 'America/Curacao', text: '(GMT-04:00) Curacao' }, { id: 'America/Grand_Turk', text: '(GMT-04:00) Grand Turk' }, { id: 'America/Guyana', text: '(GMT-04:00) Guyana' }, { id: 'America/Halifax', text: '(GMT-04:00) Atlantic Time - Halifax' }, { id: 'America/La_Paz', text: '(GMT-04:00) La Paz' }, { id: 'America/Manaus', text: '(GMT-04:00) Manaus' }, { id: 'America/Martinique', text: '(GMT-04:00) Martinique' }, { id: 'America/Port_of_Spain', text: '(GMT-04:00) Port of Spain' }, { id: 'America/Porto_Velho', text: '(GMT-04:00) Porto Velho' }, { id: 'America/Puerto_Rico', text: '(GMT-04:00) Puerto Rico' }, { id: 'America/Santo_Domingo', text: '(GMT-04:00) Santo Domingo' }, { id: 'America/Thule', text: '(GMT-04:00) Thule' }, { id: 'Atlantic/Bermuda', text: '(GMT-04:00) Bermuda' }, { id: 'America/St_Johns', text: '(GMT-03:30) Newfoundland Time - St. Johns' }, { id: 'America/Araguaina', text: '(GMT-03:00) Araguaina' }, { id: 'America/Argentina/Buenos_Aires', text: '(GMT-03:00) Buenos Aires' }, { id: 'America/Bahia', text: '(GMT-03:00) Salvador' }, { id: 'America/Belem', text: '(GMT-03:00) Belem' }, { id: 'America/Cayenne', text: '(GMT-03:00) Cayenne' }, { id: 'America/Fortaleza', text: '(GMT-03:00) Fortaleza' }, { id: 'America/Godthab', text: '(GMT-03:00) Godthab' }, { id: 'America/Maceio', text: '(GMT-03:00) Maceio' }, { id: 'America/Miquelon', text: '(GMT-03:00) Miquelon' }, { id: 'America/Montevideo', text: '(GMT-03:00) Montevideo' }, { id: 'America/Paramaribo', text: '(GMT-03:00) Paramaribo' }, { id: 'America/Recife', text: '(GMT-03:00) Recife' }, { id: 'America/Santiago', text: '(GMT-03:00) Santiago' }, { id: 'America/Sao_Paulo', text: '(GMT-02:00) Sao Paulo' }, { id: 'Antarctica/Palmer', text: '(GMT-03:00) Palmer' }, { id: 'Antarctica/Rothera', text: '(GMT-03:00) Rothera' }, { id: 'Atlantic/Stanley', text: '(GMT-03:00) Stanley' }, { id: 'America/Noronha', text: '(GMT-02:00) Noronha' }, { id: 'Atlantic/South_Georgia', text: '(GMT-02:00) South Georgia' }, { id: 'America/Scoresbysund', text: '(GMT-01:00) Scoresbysund' }, { id: 'Atlantic/Azores', text: '(GMT-01:00) Azores' }, { id: 'Atlantic/Cape_Verde', text: '(GMT-01:00) Cape Verde' }, { id: 'Africa/Abidjan', text: '(GMT+00:00) Abidjan' }, { id: 'Africa/Accra', text: '(GMT+00:00) Accra' }, { id: 'Africa/Bissau', text: '(GMT+00:00) Bissau' }, { id: 'Africa/Casablanca', text: '(GMT+00:00) Casablanca' }, { id: 'Africa/El_Aaiun', text: '(GMT+00:00) El Aaiun' }, { id: 'Africa/Monrovia', text: '(GMT+00:00) Monrovia' }, { id: 'America/Danmarkshavn', text: '(GMT+00:00) Danmarkshavn' }, { id: 'Atlantic/Canary', text: '(GMT+00:00) Canary Islands' }, { id: 'Atlantic/Faroe', text: '(GMT+00:00) Faeroe' }, { id: 'Atlantic/Reykjavik', text: '(GMT+00:00) Reykjavik' }, { id: 'Etc/GMT', text: '(GMT+00:00) GMT (no daylight saving)' }, { id: 'Europe/Dublin', text: '(GMT+00:00) Dublin' }, { id: 'Europe/Lisbon', text: '(GMT+00:00) Lisbon' }, { id: 'Europe/London', text: '(GMT+00:00) London' }, { id: 'Africa/Algiers', text: '(GMT+01:00) Algiers' }, { id: 'Africa/Ceuta', text: '(GMT+01:00) Ceuta' }, { id: 'Africa/Lagos', text: '(GMT+01:00) Lagos' }, { id: 'Africa/Ndjamena', text: '(GMT+01:00) Ndjamena' }, { id: 'Africa/Tunis', text: '(GMT+01:00) Tunis' }, { id: 'Africa/Windhoek', text: '(GMT+02:00) Windhoek' }, { id: 'Europe/Amsterdam', text: '(GMT+01:00) Amsterdam' }, { id: 'Europe/Andorra', text: '(GMT+01:00) Andorra' }, { id: 'Europe/Belgrade', text: '(GMT+01:00) Central European Time - Belgrade' }, { id: 'Europe/Berlin', text: '(GMT+01:00) Berlin' }, { id: 'Europe/Brussels', text: '(GMT+01:00) Brussels' }, { id: 'Europe/Budapest', text: '(GMT+01:00) Budapest' }, { id: 'Europe/Copenhagen', text: '(GMT+01:00) Copenhagen' }, { id: 'Europe/Gibraltar', text: '(GMT+01:00) Gibraltar' }, { id: 'Europe/Luxembourg', text: '(GMT+01:00) Luxembourg' }, { id: 'Europe/Madrid', text: '(GMT+01:00) Madrid' }, { id: 'Europe/Malta', text: '(GMT+01:00) Malta' }, { id: 'Europe/Monaco', text: '(GMT+01:00) Monaco' }, { id: 'Europe/Oslo', text: '(GMT+01:00) Oslo' }, { id: 'Europe/Paris', text: '(GMT+01:00) Paris' }, { id: 'Europe/Prague', text: '(GMT+01:00) Central European Time - Prague' }, { id: 'Europe/Rome', text: '(GMT+01:00) Rome' }, { id: 'Europe/Stockholm', text: '(GMT+01:00) Stockholm' }, { id: 'Europe/Tirane', text: '(GMT+01:00) Tirane' }, { id: 'Europe/Vienna', text: '(GMT+01:00) Vienna' }, { id: 'Europe/Warsaw', text: '(GMT+01:00) Warsaw' }, { id: 'Europe/Zurich', text: '(GMT+01:00) Zurich' }, { id: 'Africa/Cairo', text: '(GMT+02:00) Cairo' }, { id: 'Africa/Johannesburg', text: '(GMT+02:00) Johannesburg' }, { id: 'Africa/Maputo', text: '(GMT+02:00) Maputo' }, { id: 'Africa/Tripoli', text: '(GMT+02:00) Tripoli' }, { id: 'Asia/Amman', text: '(GMT+02:00) Amman' }, { id: 'Asia/Beirut', text: '(GMT+02:00) Beirut' }, { id: 'Asia/Damascus', text: '(GMT+02:00) Damascus' }, { id: 'Asia/Gaza', text: '(GMT+02:00) Gaza' }, { id: 'Asia/Jerusalem', text: '(GMT+02:00) Jerusalem' }, { id: 'Asia/Nicosia', text: '(GMT+02:00) Nicosia' }, { id: 'Europe/Athens', text: '(GMT+02:00) Athens' }, { id: 'Europe/Bucharest', text: '(GMT+02:00) Bucharest' }, { id: 'Europe/Chisinau', text: '(GMT+02:00) Chisinau' }, { id: 'Europe/Helsinki', text: '(GMT+02:00) Helsinki' }, { id: 'Europe/Istanbul', text: '(GMT+02:00) Istanbul' }, { id: 'Europe/Kaliningrad', text: '(GMT+02:00) Moscow-01 - Kaliningrad' }, { id: 'Europe/Kiev', text: '(GMT+02:00) Kiev' }, { id: 'Europe/Riga', text: '(GMT+02:00) Riga' }, { id: 'Europe/Sofia', text: '(GMT+02:00) Sofia' }, { id: 'Europe/Tallinn', text: '(GMT+02:00) Tallinn' }, { id: 'Europe/Vilnius', text: '(GMT+02:00) Vilnius' }, { id: 'Africa/Khartoum', text: '(GMT+03:00) Khartoum' }, { id: 'Africa/Nairobi', text: '(GMT+03:00) Nairobi' }, { id: 'Antarctica/Syowa', text: '(GMT+03:00) Syowa' }, { id: 'Asia/Baghdad', text: '(GMT+03:00) Baghdad' }, { id: 'Asia/Qatar', text: '(GMT+03:00) Qatar' }, { id: 'Asia/Riyadh', text: '(GMT+03:00) Riyadh' }, { id: 'Europe/Minsk', text: '(GMT+03:00) Minsk' }, { id: 'Europe/Moscow', text: '(GMT+03:00) Moscow+00 - Moscow' }, { id: 'Asia/Tehran', text: '(GMT+03:30) Tehran' }, { id: 'Asia/Baku', text: '(GMT+04:00) Baku' }, { id: 'Asia/Dubai', text: '(GMT+04:00) Dubai' }, { id: 'Asia/Tbilisi', text: '(GMT+04:00) Tbilisi' }, { id: 'Asia/Yerevan', text: '(GMT+04:00) Yerevan' }, { id: 'Europe/Samara', text: '(GMT+04:00) Moscow+01 - Samara' }, { id: 'Indian/Mahe', text: '(GMT+04:00) Mahe' }, { id: 'Indian/Mauritius', text: '(GMT+04:00) Mauritius' }, { id: 'Indian/Reunion', text: '(GMT+04:00) Reunion' }, { id: 'Asia/Kabul', text: '(GMT+04:30) Kabul' }, { id: 'Antarctica/Mawson', text: '(GMT+05:00) Mawson' }, { id: 'Asia/Aqtau', text: '(GMT+05:00) Aqtau' }, { id: 'Asia/Aqtobe', text: '(GMT+05:00) Aqtobe' }, { id: 'Asia/Ashgabat', text: '(GMT+05:00) Ashgabat' }, { id: 'Asia/Dushanbe', text: '(GMT+05:00) Dushanbe' }, { id: 'Asia/Karachi', text: '(GMT+05:00) Karachi' }, { id: 'Asia/Tashkent', text: '(GMT+05:00) Tashkent' }, { id: 'Asia/Yekaterinburg', text: '(GMT+05:00) Moscow+02 - Yekaterinburg' }, { id: 'Indian/Kerguelen', text: '(GMT+05:00) Kerguelen' }, { id: 'Indian/Maldives', text: '(GMT+05:00) Maldives' }, { id: 'Asia/Kolkata', text: '(GMT+05:30) India Standard Time' }, { id: 'Asia/Colombo', text: '(GMT+05:30) Colombo' }, { id: 'Asia/Katmandu', text: '(GMT+05:45) Katmandu' }, { id: 'Antarctica/Vostok', text: '(GMT+06:00) Vostok' }, { id: 'Asia/Almaty', text: '(GMT+06:00) Almaty' }, { id: 'Asia/Bishkek', text: '(GMT+06:00) Bishkek' }, { id: 'Asia/Dhaka', text: '(GMT+06:00) Dhaka' }, { id: 'Asia/Omsk', text: '(GMT+06:00) Moscow+03 - Omsk, Novosibirsk' }, { id: 'Asia/Thimphu', text: '(GMT+06:00) Thimphu' }, { id: 'Indian/Chagos', text: '(GMT+06:00) Chagos' }, { id: 'Asia/Rangoon', text: '(GMT+06:30) Rangoon' }, { id: 'Indian/Cocos', text: '(GMT+06:30) Cocos' }, { id: 'Antarctica/Davis', text: '(GMT+07:00) Davis' }, { id: 'Asia/Bangkok', text: '(GMT+07:00) Bangkok' }, { id: 'Asia/Hovd', text: '(GMT+07:00) Hovd' }, { id: 'Asia/Jakarta', text: '(GMT+07:00) Jakarta' }, { id: 'Asia/Krasnoyarsk', text: '(GMT+07:00) Moscow+04 - Krasnoyarsk' }, { id: 'Asia/Saigon', text: '(GMT+07:00) Hanoi' }, { id: 'Indian/Christmas', text: '(GMT+07:00) Christmas' }, { id: 'Antarctica/Casey', text: '(GMT+08:00) Casey' }, { id: 'Asia/Brunei', text: '(GMT+08:00) Brunei' }, { id: 'Asia/Choibalsan', text: '(GMT+08:00) Choibalsan' }, { id: 'Asia/Hong_Kong', text: '(GMT+08:00) Hong Kong' }, { id: 'Asia/Irkutsk', text: '(GMT+08:00) Moscow+05 - Irkutsk' }, { id: 'Asia/Kuala_Lumpur', text: '(GMT+08:00) Kuala Lumpur' }, { id: 'Asia/Macau', text: '(GMT+08:00) Macau' }, { id: 'Asia/Makassar', text: '(GMT+08:00) Makassar' }, { id: 'Asia/Manila', text: '(GMT+08:00) Manila' }, { id: 'Asia/Shanghai', text: '(GMT+08:00) China Time - Beijing' }, { id: 'Asia/Singapore', text: '(GMT+08:00) Singapore' }, { id: 'Asia/Taipei', text: '(GMT+08:00) Taipei' }, { id: 'Asia/Ulaanbaatar', text: '(GMT+08:00) Ulaanbaatar' }, { id: 'Australia/Perth', text: '(GMT+08:00) Western Time - Perth' }, { id: 'Asia/Pyongyang', text: '(GMT+08:30) Pyongyang' }, { id: 'Asia/Dili', text: '(GMT+09:00) Dili' }, { id: 'Asia/Jayapura', text: '(GMT+09:00) Jayapura' }, { id: 'Asia/Seoul', text: '(GMT+09:00) Seoul' }, { id: 'Asia/Tokyo', text: '(GMT+09:00) Tokyo' }, { id: 'Asia/Yakutsk', text: '(GMT+09:00) Moscow+06 - Yakutsk' }, { id: 'Pacific/Palau', text: '(GMT+09:00) Palau' }, { id: 'Australia/Adelaide', text: '(GMT+10:30) Central Time - Adelaide' }, { id: 'Australia/Darwin', text: '(GMT+09:30) Central Time - Darwin' }, { id: 'Antarctica/DumontDUrville', text: '(GMT+10:00) Dumont D\'Urville' }, { id: 'Asia/Magadan', text: '(GMT+10:00) Moscow+08 - Magadan' }, { id: 'Asia/Vladivostok', text: '(GMT+10:00) Moscow+07 - Yuzhno-Sakhalinsk' }, { id: 'Australia/Brisbane', text: '(GMT+10:00) Eastern Time - Brisbane' }, { id: 'Australia/Hobart', text: '(GMT+11:00) Eastern Time - Hobart' }, { id: 'Australia/Sydney', text: '(GMT+11:00) Eastern Time - Melbourne, Sydney' }, { id: 'Pacific/Chuuk', text: '(GMT+10:00) Truk' }, { id: 'Pacific/Guam', text: '(GMT+10:00) Guam' }, { id: 'Pacific/Port_Moresby', text: '(GMT+10:00) Port Moresby' }, { id: 'Pacific/Efate', text: '(GMT+11:00) Efate' }, { id: 'Pacific/Guadalcanal', text: '(GMT+11:00) Guadalcanal' }, { id: 'Pacific/Kosrae', text: '(GMT+11:00) Kosrae' }, { id: 'Pacific/Norfolk', text: '(GMT+11:00) Norfolk' }, { id: 'Pacific/Noumea', text: '(GMT+11:00) Noumea' }, { id: 'Pacific/Pohnpei', text: '(GMT+11:00) Ponape' }, { id: 'Asia/Kamchatka', text: '(GMT+12:00) Moscow+09 - Petropavlovsk-Kamchatskiy' }, { id: 'Pacific/Auckland', text: '(GMT+13:00) Auckland' }, { id: 'Pacific/Fiji', text: '(GMT+12:00) Fiji' }, { id: 'Pacific/Funafuti', text: '(GMT+12:00) Funafuti' }, { id: 'Pacific/Kwajalein', text: '(GMT+12:00) Kwajalein' }, { id: 'Pacific/Majuro', text: '(GMT+12:00) Majuro' }, { id: 'Pacific/Nauru', text: '(GMT+12:00) Nauru' }, { id: 'Pacific/Tarawa', text: '(GMT+12:00) Tarawa' }, { id: 'Pacific/Wake', text: '(GMT+12:00) Wake' }, { id: 'Pacific/Wallis', text: '(GMT+12:00) Wallis' }, { id: 'Pacific/Apia', text: '(GMT+14:00) Apia' }, { id: 'Pacific/Enderbury', text: '(GMT+13:00) Enderbury' }, { id: 'Pacific/Fakaofo', text: '(GMT+13:00) Fakaofo' }, { id: 'Pacific/Tongatapu', text: '(GMT+13:00) Tongatapu' }, { id: 'Pacific/Kiritimati', text: '(GMT+14:00) Kiritimati' }]

  });
});
define("frontend-cp/components/ko-user-content/field/timezone-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-content/field/timezone-select/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "timezone", ["loc", [null, [2, 8], [2, 16]]]]], [], []], "options", ["subexpr", "@mut", [["get", "timezones", ["loc", [null, [3, 10], [3, 19]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.timezone"], [], ["loc", [null, [4, 8], [4, 36]]]], "isEdited", ["subexpr", "@mut", [["get", "isEdited", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [6, 12], [6, 21]]]]], [], []], "isPusherEdited", ["subexpr", "@mut", [["get", "isPusherEdited", ["loc", [null, [7, 17], [7, 31]]]]], [], []], "onValueChange", ["subexpr", "action", [["get", "onChangeTimezone", ["loc", [null, [8, 24], [8, 40]]]]], [], ["loc", [null, [8, 16], [8, 41]]]], "idPath", "id", "labelPath", "text"], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/components/ko-user-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 7,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "ko-loader", [], ["class", "ko-layout_advanced__button-loading"], ["loc", [null, [6, 10], [6, 66]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "t", ["cases.submit"], [], ["loc", [null, [8, 10], [8, 30]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element12, 'class');
              morphs[1] = dom.createAttrMorph(element12, 'onclick');
              morphs[2] = dom.createMorphAt(element12, 1, 1);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["button button--primary u-1/1 ", ["subexpr", "if", [["get", "submitDisabled", ["loc", [null, [4, 69], [4, 83]]]], "disabled"], [], ["loc", [null, [4, 64], [4, 96]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["submit"], [], ["loc", [null, [4, 106], [4, 125]]]]], ["block", "if", [["get", "isSaving", ["loc", [null, [5, 14], [5, 22]]]]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-info-bar/item", [], [], 0, null, ["loc", [null, [3, 4], [11, 25]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["users.infobar.accesslevel"], [], ["loc", [null, [29, 12], [29, 43]]]], "options", ["subexpr", "@mut", [["get", "agentAccessLevels", ["loc", [null, [30, 14], [30, 31]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isAccessLevelEdited", ["loc", [null, [31, 15], [31, 34]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.agentCaseAccess", ["loc", [null, [32, 12], [32, 33]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.agent_case_access", ["loc", [null, [33, 16], [33, 42]]]]], [], []], "onValueChange", ["subexpr", "action", ["agentLevelSelect"], [], ["loc", [null, [34, 20], [34, 47]]]], "hasEmptyOption", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [28, 6], [38, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 4
                },
                "end": {
                  "line": 53,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-info-bar/field/select", [], ["title", ["subexpr", "t", ["users.infobar.accesslevel"], [], ["loc", [null, [43, 12], [43, 43]]]], "options", ["subexpr", "@mut", [["get", "organizationAccessLevels", ["loc", [null, [44, 14], [44, 38]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isAccessLevelEdited", ["loc", [null, [45, 15], [45, 34]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.organization_case_access", ["loc", [null, [46, 16], [46, 49]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.organizationCaseAccess", ["loc", [null, [47, 12], [47, 40]]]]], [], []], "onValueChange", ["subexpr", "action", ["organizationLevelSelect"], [], ["loc", [null, [48, 20], [48, 54]]]], "hasEmptyOption", false, "idPath", "value", "labelPath", "name"], ["loc", [null, [42, 6], [52, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 75,
                  "column": 4
                },
                "end": {
                  "line": 90,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.teams"], [], ["loc", [null, [77, 14], [77, 31]]]], "isEdited", ["subexpr", "@mut", [["get", "isTeamsFieldEdited", ["loc", [null, [78, 17], [78, 35]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.team_ids", ["loc", [null, [79, 18], [79, 35]]]]], [], []], "isDisabled", ["subexpr", "not", [["get", "canChangeUserTeamPermission", ["loc", [null, [80, 24], [80, 51]]]]], [], ["loc", [null, [80, 19], [80, 52]]]], "selectedTags", ["subexpr", "@mut", [["get", "model.teams", ["loc", [null, [81, 21], [81, 32]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTeams", ["loc", [null, [82, 22], [82, 36]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newteam"], [], ["loc", [null, [83, 19], [83, 38]]]], "addTagText", ["subexpr", "t", ["users.addteam"], [], ["loc", [null, [84, 19], [84, 38]]]], "forceLowerCase", false, "onTagAddition", ["subexpr", "action", ["addTeam"], [], ["loc", [null, [86, 22], [86, 40]]]], "onTagRemoval", ["subexpr", "action", ["removeTeam"], [], ["loc", [null, [87, 21], [87, 42]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTeams"], [], ["loc", [null, [88, 24], [88, 47]]]]], ["loc", [null, [76, 6], [89, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 106,
                      "column": 8
                    },
                    "end": {
                      "line": 118,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "component", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [107, 33], [107, 62]]]], ["get", "field.fieldType", ["loc", [null, [107, 63], [107, 78]]]]], [], ["loc", [null, [107, 22], [107, 79]]]]], ["value", ["subexpr", "get", [["get", "customFieldValueHash", ["loc", [null, [108, 21], [108, 41]]]], ["get", "field.id", ["loc", [null, [108, 42], [108, 50]]]]], [], ["loc", [null, [108, 16], [108, 51]]]], "options", ["subexpr", "@mut", [["get", "field.options", ["loc", [null, [109, 18], [109, 31]]]]], [], []], "title", ["subexpr", "@mut", [["get", "field.title", ["loc", [null, [110, 16], [110, 27]]]]], [], []], "isErrored", ["subexpr", "get", [["get", "errorMap", ["loc", [null, [111, 25], [111, 33]]]], ["get", "field.key", ["loc", [null, [111, 34], [111, 43]]]]], [], ["loc", [null, [111, 20], [111, 44]]]], "isEdited", ["subexpr", "get", [["get", "editedCustomFields", ["loc", [null, [112, 24], [112, 42]]]], ["get", "field.id", ["loc", [null, [112, 43], [112, 51]]]]], [], ["loc", [null, [112, 19], [112, 52]]]], "onValueChange", ["subexpr", "action", ["fieldUpdated", ["get", "field", ["loc", [null, [113, 47], [113, 52]]]]], [], ["loc", [null, [113, 24], [113, 53]]]], "hasEmptyOption", ["subexpr", "not", [["get", "field.isRequiredForAgents", ["loc", [null, [114, 30], [114, 55]]]]], [], ["loc", [null, [114, 25], [114, 56]]]], "idPath", "id", "labelPath", "value"], ["loc", [null, [107, 10], [117, 12]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 105,
                    "column": 6
                  },
                  "end": {
                    "line": 119,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "field.isEnabled", ["loc", [null, [106, 14], [106, 29]]]]], [], 0, null, ["loc", [null, [106, 8], [118, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 104,
                  "column": 4
                },
                "end": {
                  "line": 120,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "ko-helper", [["get", "customFieldsList.componentFor", ["loc", [null, [105, 23], [105, 52]]]], ["get", "field.fieldType", ["loc", [null, [105, 53], [105, 68]]]]], [], ["loc", [null, [105, 12], [105, 69]]]]], [], 0, null, ["loc", [null, [105, 6], [119, 13]]]]],
            locals: ["field"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 129,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(12);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
            morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
            morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
            morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
            morphs[10] = dom.createMorphAt(fragment, 21, 21, contextualElement);
            morphs[11] = dom.createMorphAt(fragment, 23, 23, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "model.role", ["loc", [null, [16, 12], [16, 22]]]]], [], []], "options", ["subexpr", "@mut", [["get", "roles", ["loc", [null, [17, 14], [17, 19]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.role"], [], ["loc", [null, [18, 12], [18, 36]]]], "isEdited", ["subexpr", "@mut", [["get", "isRoleEdited", ["loc", [null, [19, 15], [19, 27]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.role_id", ["loc", [null, [20, 16], [20, 32]]]]], [], []], "isDisabled", ["subexpr", "not", [["get", "canChangeRolePermission", ["loc", [null, [21, 22], [21, 45]]]]], [], ["loc", [null, [21, 17], [21, 46]]]], "onValueChange", ["subexpr", "action", ["roleSelect"], [], ["loc", [null, [22, 20], [22, 41]]]], "labelPath", "title", "hasEmptyOption", false], ["loc", [null, [15, 4], [25, 6]]]], ["block", "if", [["get", "canChangeAgentAccessPermission", ["loc", [null, [27, 10], [27, 40]]]]], [], 0, null, ["loc", [null, [27, 4], [39, 11]]]], ["block", "if", [["get", "canChangeOrganizationAccessPermission", ["loc", [null, [41, 10], [41, 47]]]]], [], 1, null, ["loc", [null, [41, 4], [53, 11]]]], ["inline", "ko-info-bar/field/select", [], ["value", ["subexpr", "@mut", [["get", "model.organization.content", ["loc", [null, [56, 12], [56, 38]]]]], [], []], "options", ["subexpr", "@mut", [["get", "organizations", ["loc", [null, [57, 14], [57, 27]]]]], [], []], "title", ["subexpr", "t", ["users.infobar.organization"], [], ["loc", [null, [58, 12], [58, 44]]]], "search", ["subexpr", "action", ["searchOrganization"], [], ["loc", [null, [59, 13], [59, 42]]]], "inputPlaceholder", ["subexpr", "t", ["generic.search.start_typing_to_search"], [], ["loc", [null, [60, 23], [60, 66]]]], "loadingMessage", ["subexpr", "t", ["generic.search.searching"], [], ["loc", [null, [61, 21], [61, 51]]]], "isEdited", ["subexpr", "@mut", [["get", "isOrganisationEdited", ["loc", [null, [62, 15], [62, 35]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.organization_id", ["loc", [null, [63, 16], [63, 40]]]]], [], []], "onValueChange", ["subexpr", "action", ["organizationSelect"], [], ["loc", [null, [64, 20], [64, 49]]]], "labelPath", "name"], ["loc", [null, [55, 4], [66, 6]]]], ["inline", "ko-user-content/field/timezone-select", [], ["timezone", ["subexpr", "@mut", [["get", "model.timeZone", ["loc", [null, [69, 15], [69, 29]]]]], [], []], "isEdited", ["subexpr", "@mut", [["get", "isTimezoneEdited", ["loc", [null, [70, 15], [70, 31]]]]], [], []], "isErrored", ["subexpr", "@mut", [["get", "errorMap.time_zone", ["loc", [null, [71, 16], [71, 34]]]]], [], []], "onChangeTimezone", ["subexpr", "action", ["timezoneSelect"], [], ["loc", [null, [72, 23], [72, 48]]]]], ["loc", [null, [68, 4], [73, 6]]]], ["block", "if", [["get", "canViewUserTeamPermission", ["loc", [null, [75, 10], [75, 35]]]]], [], 2, null, ["loc", [null, [75, 4], [90, 11]]]], ["inline", "ko-info-bar/field/tags", [], ["title", ["subexpr", "t", ["users.tags"], [], ["loc", [null, [93, 12], [93, 28]]]], "isEdited", ["subexpr", "@mut", [["get", "isTagsFieldEdited", ["loc", [null, [94, 15], [94, 32]]]]], [], []], "selectedTags", ["subexpr", "@mut", [["get", "model.tags", ["loc", [null, [95, 19], [95, 29]]]]], [], []], "suggestedTags", ["subexpr", "@mut", [["get", "suggestedTags", ["loc", [null, [96, 20], [96, 33]]]]], [], []], "newTagText", ["subexpr", "t", ["users.newtag"], [], ["loc", [null, [97, 17], [97, 35]]]], "addTagText", ["subexpr", "t", ["users.addtag"], [], ["loc", [null, [98, 17], [98, 35]]]], "onTagAddition", ["subexpr", "action", ["addTag"], [], ["loc", [null, [99, 20], [99, 37]]]], "onTagRemoval", ["subexpr", "action", ["removeTag"], [], ["loc", [null, [100, 19], [100, 39]]]], "onTagSuggestion", ["subexpr", "action", ["suggestTags"], [], ["loc", [null, [101, 22], [101, 44]]]]], ["loc", [null, [92, 4], [102, 6]]]], ["block", "each", [["get", "customFields", ["loc", [null, [104, 12], [104, 24]]]]], [], 3, null, ["loc", [null, [104, 4], [120, 13]]]], ["inline", "ko-identities", [], ["parent", ["subexpr", "@mut", [["get", "model", ["loc", [null, [122, 27], [122, 32]]]]], [], []], "separator", false], ["loc", [null, [122, 4], [122, 50]]]], ["inline", "ko-info-bar/metadata", [], ["rows", ["subexpr", "@mut", [["get", "userDates", ["loc", [null, [124, 32], [124, 41]]]]], [], []], "separator", false], ["loc", [null, [124, 4], [124, 59]]]], ["inline", "ko-recent-cases", [], ["title", ["subexpr", "t", ["users.recent_cases"], [], ["loc", [null, [126, 28], [126, 52]]]], "cases", ["subexpr", "@mut", [["get", "model.recentCases", ["loc", [null, [126, 59], [126, 76]]]]], [], []], "separator", false], ["loc", [null, [126, 4], [126, 94]]]], ["inline", "ko-feedback", [], ["title", ["subexpr", "t", ["users.recent_feedback"], [], ["loc", [null, [128, 24], [128, 51]]]], "feedback", ["subexpr", "@mut", [["get", "recentFeedback", ["loc", [null, [128, 61], [128, 75]]]]], [], []], "separator", false], ["loc", [null, [128, 4], [128, 93]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 131,
                "column": 2
              },
              "end": {
                "line": 183,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-layout_advanced_heading");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__left");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ko-layout_advanced_section");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__image");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("img");
            dom.setAttribute(el5, "alt", "");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__img");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("div");
            dom.setAttribute(el4, "class", "ko-layout_advanced_section__body");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("h3");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__subject");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createElement("p");
            dom.setAttribute(el5, "class", "ko-layout_advanced_section__subtitle");
            var el6 = dom.createTextNode("\n              ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode(" ");
            dom.appendChild(el5, el6);
            var el6 = dom.createComment("");
            dom.appendChild(el5, el6);
            var el6 = dom.createTextNode("\n            ");
            dom.appendChild(el5, el6);
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-layout_advanced_heading__right");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("ul");
            dom.setAttribute(el3, "class", "list-inline t-right");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top u-hidden");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("li");
            dom.setAttribute(el4, "class", "u-v-align-top");
            var el5 = dom.createTextNode("\n            ");
            dom.appendChild(el4, el5);
            var el5 = dom.createComment("");
            dom.appendChild(el4, el5);
            var el5 = dom.createTextNode("\n          ");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var element7 = dom.childAt(element6, [1, 1]);
            var element8 = dom.childAt(element7, [1, 1]);
            var element9 = dom.childAt(element7, [3]);
            var element10 = dom.childAt(element9, [3]);
            var element11 = dom.childAt(element6, [3, 1]);
            var morphs = new Array(7);
            morphs[0] = dom.createAttrMorph(element8, 'src');
            morphs[1] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
            morphs[2] = dom.createMorphAt(element10, 1, 1);
            morphs[3] = dom.createMorphAt(element10, 3, 3);
            morphs[4] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
            morphs[5] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
            morphs[6] = dom.createMorphAt(dom.childAt(element11, [5]), 1, 1);
            return morphs;
          },
          statements: [["attribute", "src", ["concat", [["get", "model.avatar", ["loc", [null, [136, 24], [136, 36]]]]]]], ["inline", "ko-editable-text", [], ["class", "ko-layout_advanced_editable-text--readonly", "value", ["subexpr", "@mut", [["get", "model.fullName", ["loc", [null, [140, 90], [140, 104]]]]], [], []], "isDisabled", true], ["loc", [null, [140, 14], [140, 122]]]], ["content", "updatedDate.title", ["loc", [null, [144, 14], [144, 35]]]], ["inline", "ko-datetime-format", [["get", "updatedDate.value", ["loc", [null, [144, 57], [144, 74]]]]], [], ["loc", [null, [144, 36], [144, 76]]]], ["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["users.button.following.active.text"], [], ["loc", [null, [153, 25], [153, 65]]]], "activeHoverText", ["subexpr", "t", ["users.button.following.active.hovertext"], [], ["loc", [null, [154, 30], [154, 75]]]], "inactiveText", ["subexpr", "t", ["users.button.following.inactive.text"], [], ["loc", [null, [155, 27], [155, 69]]]], "inactiveHoverText", ["subexpr", "t", ["users.button.following.inactive.hovertext"], [], ["loc", [null, [156, 32], [156, 79]]]], "isActive", false, "isLoading", ["subexpr", "@mut", [["get", "isFollowingSaving", ["loc", [null, [158, 24], [158, 41]]]]], [], []], "isEnabled", ["subexpr", "@mut", [["get", "canFollowUser", ["loc", [null, [159, 24], [159, 37]]]]], [], []]], ["loc", [null, [152, 12], [159, 39]]]], ["inline", "ko-stateful-button", [], ["activeText", ["subexpr", "t", ["users.button.user.enabled.text"], [], ["loc", [null, [163, 25], [163, 61]]]], "activeHoverText", ["subexpr", "t", ["users.button.user.enabled.hovertext"], [], ["loc", [null, [164, 30], [164, 71]]]], "inactiveText", ["subexpr", "t", ["users.button.user.disabled.text"], [], ["loc", [null, [165, 27], [165, 64]]]], "inactiveHoverText", ["subexpr", "t", ["users.button.user.disabled.hovertext"], [], ["loc", [null, [166, 32], [166, 74]]]], "isActive", ["subexpr", "@mut", [["get", "model.isEnabled", ["loc", [null, [167, 23], [167, 38]]]]], [], []], "isEnabled", ["subexpr", "@mut", [["get", "canModifyUserState", ["loc", [null, [168, 24], [168, 42]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isStateSaving", ["loc", [null, [169, 24], [169, 37]]]]], [], []], "onClick", "toggleUserState"], ["loc", [null, [162, 12], [170, 41]]]], ["inline", "ko-user-action-menu", [], ["permissions", ["subexpr", "@mut", [["get", "sessionService.permissions", ["loc", [null, [174, 26], [174, 52]]]]], [], []], "userRoleType", ["subexpr", "@mut", [["get", "model.role.roleType", ["loc", [null, [175, 27], [175, 46]]]]], [], []], "userModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [176, 24], [176, 29]]]]], [], []], "onCreateNewCase", ["subexpr", "action", [["get", "onCreateNewCase", ["loc", [null, [177, 38], [177, 53]]]], ["get", "model", ["loc", [null, [177, 54], [177, 59]]]]], [], ["loc", [null, [177, 30], [177, 60]]]]], ["loc", [null, [173, 12], [178, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 209,
                        "column": 12
                      },
                      "end": {
                        "line": 213,
                        "column": 12
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "ko-text-editor-header-group__item ko-text-editor-header-group__item--single t-base ko-text-editor-header-group__item__set-note ko-text-editor-header-group__item--active");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["users.notes"], [], ["loc", [null, [211, 16], [211, 35]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 215,
                        "column": 12
                      },
                      "end": {
                        "line": 221,
                        "column": 12
                      }
                    },
                    "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("              ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.setAttribute(el1, "class", "ko-layout_advanced__editor-overlay");
                    var el2 = dom.createTextNode("\n                ");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createElement("div");
                    dom.setAttribute(el2, "class", "ko-layout_advanced__note-reminder");
                    var el3 = dom.createTextNode("\n                  ");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createComment("");
                    dom.appendChild(el2, el3);
                    var el3 = dom.createTextNode("\n                ");
                    dom.appendChild(el2, el3);
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode("\n              ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["generic.texteditor.notes_reminder"], [], ["loc", [null, [218, 18], [218, 59]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 189,
                      "column": 10
                    },
                    "end": {
                      "line": 223,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
                },
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  return morphs;
                },
                statements: [["block", "if", [["get", "editor.isHeader", ["loc", [null, [209, 18], [209, 33]]]]], [], 0, null, ["loc", [null, [209, 12], [213, 19]]]], ["block", "if", [["get", "editor.isInfoMessage", ["loc", [null, [215, 18], [215, 38]]]]], [], 1, null, ["loc", [null, [215, 12], [221, 19]]]]],
                locals: ["editor"],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 187,
                    "column": 6
                  },
                  "end": {
                    "line": 225,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-layout_advanced_editor");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["block", "ko-text-editor", [], ["suggestedPeople", ["subexpr", "@mut", [["get", "suggestedPeople", ["loc", [null, [190, 26], [190, 41]]]]], [], []], "peopleCCd", ["subexpr", "@mut", [["get", "peopleCCd", ["loc", [null, [191, 20], [191, 29]]]]], [], []], "suggestedPeopleTotal", ["subexpr", "@mut", [["get", "suggestedPeopleTotal", ["loc", [null, [192, 31], [192, 51]]]]], [], []], "suggestedPeopleLoading", ["subexpr", "@mut", [["get", "suggestedPeopleLoading", ["loc", [null, [193, 33], [193, 55]]]]], [], []], "isPeopleIconAvailable", ["subexpr", "@mut", [["get", "isPeopleAutoCompleteAvailable", ["loc", [null, [194, 32], [194, 61]]]]], [], []], "isTimerIconAvailable", ["subexpr", "@mut", [["get", "isTimerAvailable", ["loc", [null, [195, 31], [195, 47]]]]], [], []], "onPeopleSuggestion", "onPeopleSuggestion", "onAttachFiles", "onAttachFiles", "placeholder", ["subexpr", "t", ["users.add_a_note"], [], ["loc", [null, [198, 22], [198, 44]]]], "isErrored", ["subexpr", "@mut", [["get", "isErrored", ["loc", [null, [199, 20], [199, 29]]]]], [], []], "showControls", ["subexpr", "@mut", [["get", "isShowingControls", ["loc", [null, [200, 23], [200, 40]]]]], [], []], "textAreaIsSmall", true, "onPersonSelected", ["subexpr", "@mut", [["get", "attrs.addCC", ["loc", [null, [202, 27], [202, 38]]]]], [], []], "onPersonRemoved", ["subexpr", "@mut", [["get", "attrs.removeCC", ["loc", [null, [203, 26], [203, 40]]]]], [], []], "onTextChanged", ["subexpr", "action", ["updatePostContent"], [], ["loc", [null, [204, 24], [204, 52]]]], "value", ["subexpr", "@mut", [["get", "replyContent", ["loc", [null, [205, 16], [205, 28]]]]], [], []], "onFocusStateChange", ["subexpr", "action", ["textEditorFocusStateChange"], [], ["loc", [null, [206, 29], [206, 66]]]]], 0, null, ["loc", [null, [189, 10], [223, 29]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 225,
                    "column": 6
                  },
                  "end": {
                    "line": 229,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-layout_advanced_editor__placeholder");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "ko-layout_advanced_editor__action");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("...\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(element4, [3]);
                var morphs = new Array(4);
                morphs[0] = dom.createElementMorph(element4);
                morphs[1] = dom.createMorphAt(element4, 1, 1);
                morphs[2] = dom.createElementMorph(element5);
                morphs[3] = dom.createMorphAt(element5, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["beginReply"], [], ["loc", [null, [226, 13], [226, 36]]]], ["inline", "t", ["generic.reply.click_to_leave_a"], [], ["loc", [null, [227, 10], [227, 48]]]], ["element", "action", ["beginReply"], [], ["loc", [null, [227, 97], [227, 120]]]], ["inline", "t", ["generic.reply.note"], [], ["loc", [null, [227, 121], [227, 147]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 186,
                  "column": 4
                },
                "end": {
                  "line": 230,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isEditInProgress", ["loc", [null, [187, 12], [187, 28]]]]], [], 0, 1, ["loc", [null, [187, 6], [229, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 185,
                "column": 2
              },
              "end": {
                "line": 231,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [186, 14], [186, 18]]]], "reply-area"], [], ["loc", [null, [186, 10], [186, 32]]]]], [], 0, null, ["loc", [null, [186, 4], [230, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child4 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 233,
                "column": 2
              },
              "end": {
                "line": 241,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-timeline", [], ["controlsVisible", false, "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [236, 12], [236, 17]]]]], [], []], "posts", ["subexpr", "@mut", [["get", "notes", ["loc", [null, [237, 12], [237, 17]]]]], [], []], "totalNotes", ["subexpr", "@mut", [["get", "totalNotes", ["loc", [null, [238, 17], [238, 27]]]]], [], []], "isReplyDisabled", true], ["loc", [null, [234, 4], [240, 6]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 242,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [2, 12], [2, 16]]]], "sidebar-sticky"], [], ["loc", [null, [2, 8], [2, 34]]]]], [], 0, null, ["loc", [null, [2, 2], [12, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [14, 12], [14, 16]]]], "sidebar"], [], ["loc", [null, [14, 8], [14, 27]]]]], [], 1, null, ["loc", [null, [14, 2], [129, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [131, 12], [131, 16]]]], "heading"], [], ["loc", [null, [131, 8], [131, 27]]]]], [], 2, null, ["loc", [null, [131, 2], [183, 9]]]], ["block", "if", [["get", "features.userNote", ["loc", [null, [185, 8], [185, 25]]]]], [], 3, null, ["loc", [null, [185, 2], [231, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "name", ["loc", [null, [233, 12], [233, 16]]]], "timeline-area"], [], ["loc", [null, [233, 8], [233, 33]]]]], [], 4, null, ["loc", [null, [233, 2], [241, 9]]]]],
        locals: ["name"],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 245,
                "column": 2
              },
              "end": {
                "line": 260,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "box layout layout--flush");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "ko-editor-modal__submit-message layout__item u-2/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("\n   ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "layout__item t-right u-1/3");
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("a");
            dom.setAttribute(el3, "class", "ko-editor-modal__cancel t-bad");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("button");
            dom.setAttribute(el3, "class", "button button--primary");
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n        ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n      ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var element1 = dom.childAt(element0, [3]);
            var element2 = dom.childAt(element1, [1]);
            var element3 = dom.childAt(element1, [3]);
            var morphs = new Array(6);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'onclick');
            morphs[3] = dom.createMorphAt(element2, 1, 1);
            morphs[4] = dom.createAttrMorph(element3, 'onclick');
            morphs[5] = dom.createMorphAt(element3, 1, 1);
            return morphs;
          },
          statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "editingSignature", ["loc", [null, [246, 21], [246, 37]]]]], [], []], "class", "text-area--clean"], ["loc", [null, [246, 4], [246, 64]]]], ["inline", "t", ["users.signaturemessage"], [], ["loc", [null, [249, 8], [249, 38]]]], ["attribute", "onclick", ["subexpr", "action", ["closeSignatureModal"], [], ["loc", [null, [252, 19], [252, 51]]]]], ["inline", "t", ["generic.cancel"], [], ["loc", [null, [253, 10], [253, 32]]]], ["attribute", "onclick", ["subexpr", "action", ["updateSignature"], [], ["loc", [null, [255, 55], [255, 83]]]]], ["inline", "t", ["users.update_signature"], [], ["loc", [null, [256, 10], [256, 40]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 244,
              "column": 0
            },
            "end": {
              "line": 261,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-editor-modal", [], ["title", ["subexpr", "t", ["users.editsignature"], [], ["loc", [null, [245, 27], [245, 52]]]]], 0, null, ["loc", [null, [245, 2], [260, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 262,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/components/ko-user-content/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-layout/advanced", [], [], 0, null, ["loc", [null, [1, 0], [242, 23]]]], ["block", "if", [["get", "signatureModal", ["loc", [null, [244, 6], [244, 20]]]]], [], 1, null, ["loc", [null, [244, 0], [261, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("frontend-cp/components/lf-outlet", ["exports", "liquid-fire/ember-internals"], function (exports, _liquidFireEmberInternals) {
  exports["default"] = _liquidFireEmberInternals.StaticOutlet;
});
define('frontend-cp/components/lf-overlay', ['exports', 'ember'], function (exports, _ember) {
  var COUNTER = '__lf-modal-open-counter';

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'span',
    classNames: ['lf-overlay'],

    didInsertElement: function didInsertElement() {
      var body = _ember['default'].$('body');
      var counter = body.data(COUNTER) || 0;
      body.addClass('lf-modal-open');
      body.data(COUNTER, counter + 1);
    },

    willDestroy: function willDestroy() {
      var body = _ember['default'].$('body');
      var counter = body.data(COUNTER) || 0;
      body.data(COUNTER, counter - 1);
      if (counter < 2) {
        body.removeClass('lf-modal-open lf-modal-closing');
      }
    }
  });
});
define('frontend-cp/components/liquid-bind', ['exports', 'ember'], function (exports, _ember) {

  var LiquidBind = _ember['default'].Component.extend({
    tagName: '',
    positionalParams: ['value'] // needed for Ember 1.13.[0-5] and 2.0.0-beta.[1-3] support
  });

  LiquidBind.reopenClass({
    positionalParams: ['value']
  });

  exports['default'] = LiquidBind;
});
define('frontend-cp/components/liquid-child', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['liquid-child'],

    didInsertElement: function didInsertElement() {
      var $container = this.$();
      if ($container) {
        $container.css('visibility', 'hidden');
      }
      this.sendAction('liquidChildDidRender', this);
    }

  });
});
define("frontend-cp/components/liquid-container", ["exports", "ember", "liquid-fire/growable", "frontend-cp/components/liquid-measured"], function (exports, _ember, _liquidFireGrowable, _frontendCpComponentsLiquidMeasured) {
  exports["default"] = _ember["default"].Component.extend(_liquidFireGrowable["default"], {
    classNames: ['liquid-container'],

    lockSize: function lockSize(elt, want) {
      elt.outerWidth(want.width);
      elt.outerHeight(want.height);
    },

    unlockSize: function unlockSize() {
      var _this = this;

      var doUnlock = function doUnlock() {
        _this.updateAnimatingClass(false);
        var elt = _this.$();
        if (elt) {
          elt.css({ width: '', height: '' });
        }
      };
      if (this._scaling) {
        this._scaling.then(doUnlock);
      } else {
        doUnlock();
      }
    },

    // We're doing this manually instead of via classNameBindings
    // because it depends on upward-data-flow, which generates warnings
    // under Glimmer.
    updateAnimatingClass: function updateAnimatingClass(on) {
      if (this.isDestroyed || !this._wasInserted) {
        return;
      }
      if (arguments.length === 0) {
        on = this.get('liquidAnimating');
      } else {
        this.set('liquidAnimating', on);
      }
      if (on) {
        this.$().addClass('liquid-animating');
      } else {
        this.$().removeClass('liquid-animating');
      }
    },

    startMonitoringSize: _ember["default"].on('didInsertElement', function () {
      this._wasInserted = true;
      this.updateAnimatingClass();
    }),

    actions: {

      willTransition: function willTransition(versions) {
        if (!this._wasInserted) {
          return;
        }

        // Remember our own size before anything changes
        var elt = this.$();
        this._cachedSize = (0, _frontendCpComponentsLiquidMeasured.measure)(elt);

        // And make any children absolutely positioned with fixed sizes.
        for (var i = 0; i < versions.length; i++) {
          goAbsolute(versions[i]);
        }

        // Apply '.liquid-animating' to liquid-container allowing
        // any customizable CSS control while an animating is occuring
        this.updateAnimatingClass(true);
      },

      afterChildInsertion: function afterChildInsertion(versions) {
        var elt = this.$();
        var enableGrowth = this.get('enableGrowth') !== false;

        // Measure  children
        var sizes = [];
        for (var i = 0; i < versions.length; i++) {
          if (versions[i].view) {
            sizes[i] = (0, _frontendCpComponentsLiquidMeasured.measure)(versions[i].view.$());
          }
        }

        // Measure ourself again to see how big the new children make
        // us.
        var want = (0, _frontendCpComponentsLiquidMeasured.measure)(elt);
        var have = this._cachedSize || want;

        // Make ourself absolute
        if (enableGrowth) {
          this.lockSize(elt, have);
        } else {
          this.lockSize(elt, {
            height: Math.max(want.height, have.height),
            width: Math.max(want.width, have.width)
          });
        }

        // Make the children absolute and fixed size.
        for (i = 0; i < versions.length; i++) {
          goAbsolute(versions[i], sizes[i]);
        }

        // Kick off our growth animation
        if (enableGrowth) {
          this._scaling = this.animateGrowth(elt, have, want);
        }
      },

      afterTransition: function afterTransition(versions) {
        for (var i = 0; i < versions.length; i++) {
          goStatic(versions[i]);
        }
        this.unlockSize();
      }
    }
  });

  function goAbsolute(version, size) {
    if (!version.view) {
      return;
    }
    var elt = version.view.$();
    var pos = elt.position();
    if (!size) {
      size = (0, _frontendCpComponentsLiquidMeasured.measure)(elt);
    }
    elt.outerWidth(size.width);
    elt.outerHeight(size.height);
    elt.css({
      position: 'absolute',
      top: pos.top,
      left: pos.left
    });
  }

  function goStatic(version) {
    if (version.view && !version.view.isDestroyed) {
      version.view.$().css({ width: '', height: '', position: '' });
    }
  }
});
define('frontend-cp/components/liquid-if', ['exports', 'ember', 'liquid-fire/ember-internals'], function (exports, _ember, _liquidFireEmberInternals) {

  var LiquidIf = _ember['default'].Component.extend({
    positionalParams: ['predicate'], // needed for Ember 1.13.[0-5] and 2.0.0-beta.[1-3] support
    tagName: '',
    helperName: 'liquid-if',
    didReceiveAttrs: function didReceiveAttrs() {
      this._super();
      var predicate = (0, _liquidFireEmberInternals.shouldDisplay)(this.getAttr('predicate'));
      this.set('showFirstBlock', this.inverted ? !predicate : predicate);
    }
  });

  LiquidIf.reopenClass({
    positionalParams: ['predicate']
  });

  exports['default'] = LiquidIf;
});
define("frontend-cp/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (exports, _liquidFireComponentsLiquidMeasured) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidMeasured["default"];
    }
  });
  Object.defineProperty(exports, "measure", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidMeasured.measure;
    }
  });
});
define('frontend-cp/components/liquid-modal', ['exports', 'ember', 'ember-getowner-polyfill'], function (exports, _ember, _emberGetownerPolyfill) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['liquid-modal'],
    currentContext: _ember['default'].computed('owner.modalContexts.lastObject', function () {
      var context = this.get('owner.modalContexts.lastObject');
      if (context) {
        context.view = this.innerView(context);
      }
      return context;
    }),

    owner: _ember['default'].inject.service('liquid-fire-modals'),

    innerView: function innerView(current) {
      var self = this,
          name = current.get('name'),
          owner = (0, _emberGetownerPolyfill['default'])(this),
          component = owner.lookup('component-lookup:main').lookupFactory(name);
      _ember['default'].assert("Tried to render a modal using component '" + name + "', but couldn't find it.", !!component);

      var args = _ember['default'].copy(current.get('params'));

      args.registerMyself = _ember['default'].on('init', function () {
        self.set('innerViewInstance', this);
      });

      // set source so we can bind other params to it
      args._source = _ember['default'].computed(function () {
        return current.get("source");
      });

      var otherParams = current.get("options.otherParams");
      var from, to;
      for (from in otherParams) {
        to = otherParams[from];
        args[to] = _ember['default'].computed.alias("_source." + from);
      }

      var actions = current.get("options.actions") || {};

      // Override sendAction in the modal component so we can intercept and
      // dynamically dispatch to the controller as expected
      args.sendAction = function (name) {
        var actionName = actions[name];
        if (!actionName) {
          this._super.apply(this, Array.prototype.slice.call(arguments));
          return;
        }

        var controller = current.get("source");
        var args = Array.prototype.slice.call(arguments, 1);
        args.unshift(actionName);
        controller.send.apply(controller, args);
      };

      return component.extend(args);
    },

    actions: {
      outsideClick: function outsideClick() {
        if (this.get('currentContext.options.dismissWithOutsideClick')) {
          this.send('dismiss');
        } else {
          proxyToInnerInstance(this, 'outsideClick');
        }
      },
      escape: function escape() {
        if (this.get('currentContext.options.dismissWithEscape')) {
          this.send('dismiss');
        } else {
          proxyToInnerInstance(this, 'escape');
        }
      },
      dismiss: function dismiss() {
        _ember['default'].$('body').addClass('lf-modal-closing');
        var source = this.get('currentContext.source'),
            proto = source.constructor.proto(),
            params = this.get('currentContext.options.withParams'),
            clearThem = {};

        for (var key in params) {
          if (proto[key] instanceof _ember['default'].ComputedProperty) {
            clearThem[key] = undefined;
          } else {
            clearThem[key] = proto[key];
          }
        }
        source.setProperties(clearThem);
      }
    }
  });

  function proxyToInnerInstance(self, message) {
    var vi = self.get('innerViewInstance');
    if (vi) {
      vi.send(message);
    }
  }
});
define('frontend-cp/components/liquid-outlet', ['exports', 'ember'], function (exports, _ember) {

  var LiquidOutlet = _ember['default'].Component.extend({
    positionalParams: ['inputOutletName'], // needed for Ember 1.13.[0-5] and 2.0.0-beta.[1-3] support
    tagName: '',
    didReceiveAttrs: function didReceiveAttrs() {
      this._super();
      this.set('outletName', this.attrs.inputOutletName || 'main');
    }
  });

  LiquidOutlet.reopenClass({
    positionalParams: ['inputOutletName']
  });

  exports['default'] = LiquidOutlet;
});
define("frontend-cp/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (exports, _liquidFireComponentsLiquidSpacer) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidSpacer["default"];
    }
  });
});
define('frontend-cp/components/liquid-unless', ['exports', 'frontend-cp/components/liquid-if'], function (exports, _frontendCpComponentsLiquidIf) {
  exports['default'] = _frontendCpComponentsLiquidIf['default'].extend({
    helperName: 'liquid-unless',
    layoutName: 'components/liquid-if',
    inverted: true
  });
});
define("frontend-cp/components/liquid-versions", ["exports", "ember", "liquid-fire/ember-internals"], function (exports, _ember, _liquidFireEmberInternals) {

  var get = _ember["default"].get;
  var set = _ember["default"].set;

  exports["default"] = _ember["default"].Component.extend({
    tagName: "",
    name: 'liquid-versions',

    transitionMap: _ember["default"].inject.service('liquid-fire-transitions'),

    didReceiveAttrs: function didReceiveAttrs() {
      this._super();
      if (!this.versions || this._lastVersion !== this.getAttr('value')) {
        this.appendVersion();
        this._lastVersion = this.getAttr('value');
      }
    },

    appendVersion: function appendVersion() {
      var versions = this.versions;
      var firstTime = false;
      var newValue = this.getAttr('value');
      var oldValue;

      if (!versions) {
        firstTime = true;
        versions = _ember["default"].A();
      } else {
        oldValue = versions[0];
      }

      // TODO: may need to extend the comparison to do the same kind of
      // key-based diffing that htmlbars is doing.
      if (!firstTime && (!oldValue && !newValue || oldValue === newValue)) {
        return;
      }

      this.notifyContainer('willTransition', versions);
      var newVersion = {
        value: newValue,
        shouldRender: newValue || get(this, 'renderWhenFalse')
      };
      versions.unshiftObject(newVersion);

      this.firstTime = firstTime;
      if (firstTime) {
        set(this, 'versions', versions);
      }

      if (!newVersion.shouldRender && !firstTime) {
        this._transition();
      }
    },

    _transition: function _transition() {
      var _this = this;

      var versions = get(this, 'versions');
      var transition;
      var firstTime = this.firstTime;
      this.firstTime = false;

      this.notifyContainer('afterChildInsertion', versions);

      transition = get(this, 'transitionMap').transitionFor({
        versions: versions,
        parentElement: _ember["default"].$((0, _liquidFireEmberInternals.containingElement)(this)),
        use: get(this, 'use'),
        // Using strings instead of booleans here is an
        // optimization. The constraint system can match them more
        // efficiently, since it treats boolean constraints as generic
        // "match anything truthy/falsy" predicates, whereas string
        // checks are a direct object property lookup.
        firstTime: firstTime ? 'yes' : 'no',
        helperName: get(this, 'name'),
        outletName: get(this, 'outletName')
      });

      if (this._runningTransition) {
        this._runningTransition.interrupt();
      }
      this._runningTransition = transition;

      transition.run().then(function (wasInterrupted) {
        // if we were interrupted, we don't handle the cleanup because
        // another transition has already taken over.
        if (!wasInterrupted) {
          _this.finalizeVersions(versions);
          _this.notifyContainer("afterTransition", versions);
        }
      }, function (err) {
        _this.finalizeVersions(versions);
        _this.notifyContainer("afterTransition", versions);
        throw err;
      });
    },

    finalizeVersions: function finalizeVersions(versions) {
      versions.replace(1, versions.length - 1);
    },

    notifyContainer: function notifyContainer(method, versions) {
      var target = get(this, 'notify');
      if (target) {
        target.send(method, versions);
      }
    },

    actions: {
      childDidRender: function childDidRender(child) {
        var version = get(child, 'version');
        set(version, 'view', child);
        this._transition();
      }
    }

  });
});
define('frontend-cp/components/liquid-with', ['exports', 'ember'], function (exports, _ember) {

  var LiquidWith = _ember['default'].Component.extend({
    name: 'liquid-with',
    positionalParams: ['value'], // needed for Ember 1.13.[0-5] and 2.0.0-beta.[1-3] support
    tagName: '',
    iAmDeprecated: _ember['default'].on('init', function () {
      _ember['default'].deprecate("liquid-with is deprecated, use liquid-bind instead -- it accepts a block now.");
    })
  });

  LiquidWith.reopenClass({
    positionalParams: ['value']
  });

  exports['default'] = LiquidWith;
});
define("frontend-cp/components/lm-container", ["exports", "ember", "liquid-fire/tabbable", "liquid-fire/is-browser"], function (exports, _ember, _liquidFireTabbable, _liquidFireIsBrowser) {

  /**
   * If you do something to move focus outside of the browser (like
   * command+l to go to the address bar) and then tab back into the
   * window, capture it and focus the first tabbable element in an active
   * modal.
   */
  var lastOpenedModal = null;

  if ((0, _liquidFireIsBrowser["default"])()) {
    _ember["default"].$(document).on('focusin', handleTabIntoBrowser);
  }

  function handleTabIntoBrowser() {
    if (lastOpenedModal) {
      lastOpenedModal.focus();
    }
  }

  exports["default"] = _ember["default"].Component.extend({
    classNames: ['lm-container'],
    attributeBindings: ['tabindex'],
    tabindex: 0,

    keyUp: function keyUp(event) {
      // Escape key
      if (event.keyCode === 27) {
        this.sendAction();
      }
    },

    keyDown: function keyDown(event) {
      // Tab key
      if (event.keyCode === 9) {
        this.constrainTabNavigation(event);
      }
    },

    didInsertElement: function didInsertElement() {
      this.focus();
      lastOpenedModal = this;
    },

    willDestroy: function willDestroy() {
      lastOpenedModal = null;
    },

    focus: function focus() {
      if (this.get('element').contains(document.activeElement)) {
        // just let it be if we already contain the activeElement
        return;
      }
      var target = this.$('[autofocus]');
      if (!target.length) {
        target = this.$(':tabbable');
      }

      if (!target.length) {
        target = this.$();
      }

      target[0].focus();
    },

    constrainTabNavigation: function constrainTabNavigation(event) {
      var tabbable = this.$(':tabbable');
      var finalTabbable = tabbable[event.shiftKey ? 'first' : 'last']()[0];
      var leavingFinalTabbable = finalTabbable === document.activeElement ||
      // handle immediate shift+tab after opening with mouse
      this.get('element') === document.activeElement;
      if (!leavingFinalTabbable) {
        return;
      }
      event.preventDefault();
      tabbable[event.shiftKey ? 'last' : 'first']()[0].focus();
    },

    click: function click(event) {
      if (event.target === this.get('element')) {
        this.sendAction('clickAway');
      }
    }
  });
});
/*
   Parts of this file were adapted from ic-modal

   https://github.com/instructure/ic-modal
   Released under The MIT License (MIT)
   Copyright (c) 2014 Instructure, Inc.
*/
define('frontend-cp/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _emberPowerSelectComponentsPowerSelectBeforeOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectBeforeOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _emberPowerSelectComponentsPowerSelectOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select/trigger', ['exports', 'ember-power-select/components/power-select/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple/options', ['exports', 'ember-power-select/components/power-select-multiple/options'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleOptions['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _emberPowerSelectComponentsPowerSelectMultiple) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultiple['default'];
    }
  });
});
define('frontend-cp/components/power-select-typeahead/trigger', ['exports', 'ember-power-select-typeahead/components/power-select-typeahead/trigger'], function (exports, _emberPowerSelectTypeaheadComponentsPowerSelectTypeaheadTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectTypeaheadComponentsPowerSelectTypeaheadTrigger['default'];
    }
  });
});
define('frontend-cp/components/power-select-typeahead', ['exports', 'ember-power-select-typeahead/components/power-select-typeahead'], function (exports, _emberPowerSelectTypeaheadComponentsPowerSelectTypeahead) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectTypeaheadComponentsPowerSelectTypeahead['default'];
    }
  });
});
define('frontend-cp/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _emberPowerSelectComponentsPowerSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelect['default'];
    }
  });
});
define('frontend-cp/components/sortable-group', ['exports', 'ember-sortable/components/sortable-group'], function (exports, _emberSortableComponentsSortableGroup) {
  exports['default'] = _emberSortableComponentsSortableGroup['default'];
});
define('frontend-cp/components/sortable-item', ['exports', 'ember-sortable/components/sortable-item'], function (exports, _emberSortableComponentsSortableItem) {
  exports['default'] = _emberSortableComponentsSortableItem['default'];
});
define('frontend-cp/components/sticky-container', ['exports', 'ember', 'ember-cli-sticky/components/sticky-container'], function (exports, _ember, _emberCliStickyComponentsStickyContainer) {
  exports['default'] = _emberCliStickyComponentsStickyContainer['default'];
});
define('frontend-cp/controllers/array', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define('frontend-cp/controllers/object', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller;
});
define("frontend-cp/features/-main", ["exports", "ember-feature-flags/features", "frontend-cp/config/environment"], function (exports, _emberFeatureFlagsFeatures, _frontendCpConfigEnvironment) {
  exports["default"] = _emberFeatureFlagsFeatures["default"].extend({

    init: function init() {
      this._super.apply(this, arguments);

      if (this.application && !Ember.isNone(this.application.FEATURES)) {
        Ember.deprecate('[ember-feature-flags] Setting feature flags via `APP.FEATURES` is deprecated and will be removed.');
        this.setup(this.application.FEATURES);
      } else if (_frontendCpConfigEnvironment["default"].featureFlags) {
        this.setup(_frontendCpConfigEnvironment["default"].featureFlags);
      }
    }

  });
});
define('frontend-cp/formats', ['exports'], function (exports) {
  exports['default'] = {
    date: {
      month: {
        month: 'long'
      },
      year: {
        year: 'numeric'
      },
      full: {
        month: 'long',
        day: 'numeric',
        year: 'numeric'
      }
    },
    number: {
      filesize: {
        style: 'decimal',
        minimumFractionDigits: 2,
        maximumFractionDigits: 2
      }
    },
    time: {
      time: {
        hour: 'numeric',
        minute: 'numeric'
      }
    }
  };
});
define('frontend-cp/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/contains', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(params, hash) {
      var item = params[0];
      var list = params[1];
      return list && list.length && params[1].contains(item);
    }
  });
});
define('frontend-cp/helpers/ember-power-select-build-selection', ['exports', 'ember-power-select/helpers/ember-power-select-build-selection'], function (exports, _emberPowerSelectHelpersEmberPowerSelectBuildSelection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectBuildSelection', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectBuildSelection.emberPowerSelectBuildSelection;
    }
  });
});
define('frontend-cp/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectHelpersEmberPowerSelectIsSelected) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
define('frontend-cp/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/escape-html', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var value = _ref2[0];
    return value;
  });
});
define('frontend-cp/helpers/format-date', ['exports', 'ember-intl/helpers/format-date'], function (exports, _emberIntlHelpersFormatDate) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatDate['default'];
    }
  });
});
define('frontend-cp/helpers/format-html-message', ['exports', 'ember-intl/helpers/format-html-message'], function (exports, _emberIntlHelpersFormatHtmlMessage) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatHtmlMessage['default'];
    }
  });
});
define('frontend-cp/helpers/format-message', ['exports', 'ember-intl/helpers/format-message'], function (exports, _emberIntlHelpersFormatMessage) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatMessage['default'];
    }
  });
});
define('frontend-cp/helpers/format-number', ['exports', 'ember-intl/helpers/format-number'], function (exports, _emberIntlHelpersFormatNumber) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatNumber['default'];
    }
  });
});
define('frontend-cp/helpers/format-relative', ['exports', 'ember-intl/helpers/format-relative'], function (exports, _emberIntlHelpersFormatRelative) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatRelative['default'];
    }
  });
});
define('frontend-cp/helpers/format-time', ['exports', 'ember-intl/helpers/format-time'], function (exports, _emberIntlHelpersFormatTime) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersFormatTime['default'];
    }
  });
});
define('frontend-cp/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/hash-to-query-params', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var qps = _ref2[0];

      var queryParamsHelper = this.container.lookupFactory('helper:query-params');
      return queryParamsHelper([], qps);
    }
  });
});
define('frontend-cp/helpers/hash', ['exports', 'ember-hash-helper-polyfill/helpers/hash'], function (exports, _emberHashHelperPolyfillHelpersHash) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash['default'];
    }
  });
  Object.defineProperty(exports, 'hash', {
    enumerable: true,
    get: function get() {
      return _emberHashHelperPolyfillHelpersHash.hash;
    }
  });
});
define('frontend-cp/helpers/intl-get', ['exports', 'ember-intl/helpers/intl-get'], function (exports, _emberIntlHelpersIntlGet) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersIntlGet['default'];
    }
  });
});
define('frontend-cp/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/is-last-item-in-list', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var item = _ref2[0];
    var list = _ref2[1];

    var listLength = list.get('length');
    if (listLength === 0) {
      return false;
    }

    return list.objectAt(listLength - 1) === item;
  });
});
define('frontend-cp/helpers/ko-breaklines', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var content = _ref2[0];

    var text = _ember['default'].Handlebars.Utils.escapeExpression(content);
    return new _ember['default'].Handlebars.SafeString(text.replace(/(\r\n|\n|\r)/gm, '<br />'));
  });
});
define('frontend-cp/helpers/ko-contextual-helper', ['exports', 'ember'], function (exports, _ember) {

  /*
   * The same as ko-helper, except one can pass in a context.
   * Use case is a passing the component context through so properties can be
   * got or set
   *
   * See ko-case-content for an example
   *
   * args 0 - the function
   * args 1 - the context
   * args... - arguments to the function
   */
  exports['default'] = _ember['default'].Helper.helper(function (args) {
    return Reflect.apply(args[0], args[1], args.slice(2));
  });
});
define('frontend-cp/helpers/ko-datetime-format', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var dateTime = _ref2[0];

    var date = (0, _moment['default'])(dateTime);

    if (date.isBefore((0, _moment['default'])().subtract('1', 'days'))) {
      return date.format('Do MMMM YYYY hh:mm');
    } else {
      return date.fromNow();
    }
  });
});
define('frontend-cp/helpers/ko-embolden', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var fullString = _ref2[0];
    var emboldenString = _ref2[1];

    if (emboldenString) {
      var regExp = new RegExp(emboldenString.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, '\\$1'), 'gi');
      return _ember['default'].String.htmlSafe((fullString || '').replace(regExp, '<b>$&</b>'));
    } else {
      return fullString;
    }
  });
});
define('frontend-cp/helpers/ko-helper', ['exports', 'ember'], function (exports, _ember) {
  var _this = this;

  exports['default'] = _ember['default'].Helper.helper(function (args) {
    return Reflect.apply(args[0], _this, args.slice(1));
  });
});
define('frontend-cp/helpers/ko-intl-key-for-field-type', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.helper(function (fieldType) {
    if (fieldType.length) {
      return 'admin.casefields.type.' + fieldType[0].toLowerCase() + '.name';
    }
  });
});
define('frontend-cp/helpers/l', ['exports', 'ember-intl/helpers/l'], function (exports, _emberIntlHelpersL) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlHelpersL['default'];
    }
  });
});
define('frontend-cp/helpers/linkify', ['exports', 'ember-linkify/helpers/linkify'], function (exports, _emberLinkifyHelpersLinkify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkifyHelpersLinkify['default'];
    }
  });
  Object.defineProperty(exports, 'linkify', {
    enumerable: true,
    get: function get() {
      return _emberLinkifyHelpersLinkify.linkify;
    }
  });
});
define('frontend-cp/helpers/locale-flag', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var locale = _ref2[0];

    if (!locale) {
      return '';
    }

    var flag = locale;
    if (locale.match('-')) {
      flag = locale.substr(locale.indexOf('-') + 1);
    }

    return 'i-png-flag-' + flag;
  });
});
define('frontend-cp/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('frontend-cp/helpers/moment-format', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalOutputFormat: _ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.outputFormat'),
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/moment-from-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/moment-to-now', ['exports', 'ember', 'frontend-cp/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _frontendCpConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_frontendCpConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('frontend-cp/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('frontend-cp/helpers/qa-cls', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports['default'] = _ember['default'].Helper.helper(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var className = _ref2[0];

    if (_ember['default'].testing) {
      return _ember['default'].String.htmlSafe(className);
    }

    return '';
  });
});
define('frontend-cp/helpers/sanitize-html', ['exports', 'ember-sanitize/utils/sanitize', 'ember'], function (exports, _emberSanitizeUtilsSanitize, _ember) {
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(params) {
      var config = undefined,
          configName = params[1];
      if (configName) {
        //lookup the config
        config = this.container.lookup('sanitizer:' + configName);
      }

      var sanitized = (0, _emberSanitizeUtilsSanitize.sanitize)(params[0], config);
      return new _ember['default'].String.htmlSafe(sanitized);
    }
  });
});
define('frontend-cp/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('frontend-cp/helpers/t', ['exports', 'ember-intl/helpers/t', 'ember'], function (exports, _emberIntlHelpersT, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var warn = _ember['default'].warn;
  exports['default'] = _emberIntlHelpersT['default'].extend({
    compute: function compute(_ref) {
      var _ref2 = _slicedToArray(_ref, 1);

      var key = _ref2[0];

      try {
        return this._super.apply(this, arguments);
      } catch (error) {
        if (error.message === 'format-message helper requires value') {
          warn('Missing translation for \'' + key + '\'. Please ensure it is defined in the translation files.');
          return _ember['default'].String.capitalize(key.split('.').get('lastObject').replace(/_/g, ' '));
        } else {
          throw error;
        }
      }
    }
  });
});
define('frontend-cp/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('frontend-cp/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'frontend-cp/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_frontendCpConfigEnvironment['default'].APP.name, _frontendCpConfigEnvironment['default'].APP.version)
  };
});
define('frontend-cp/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('frontend-cp/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'frontend-cp/config/environment', 'frontend-cp/mirage/config', 'ember-cli-mirage/server'], function (exports, _emberCliMirageUtilsReadModules, _frontendCpConfigEnvironment, _frontendCpMirageConfig, _emberCliMirageServer) {
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }
      var environment = _frontendCpConfigEnvironment['default'].environment;

      if (_shouldUseMirage(environment, _frontendCpConfigEnvironment['default']['ember-cli-mirage'])) {
        var modules = (0, _emberCliMirageUtilsReadModules['default'])(_frontendCpConfigEnvironment['default'].modulePrefix);
        var options = _.assign(modules, { environment: environment, baseConfig: _frontendCpMirageConfig['default'], testConfig: _frontendCpMirageConfig.testConfig });

        new _emberCliMirageServer['default'](options);
      }
    }
  };

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('frontend-cp/initializers/ember-css-modules', ['exports', 'ember-css-modules/initializers/ember-css-modules'], function (exports, _emberCssModulesInitializersEmberCssModules) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCssModulesInitializersEmberCssModules['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberCssModulesInitializersEmberCssModules.initialize;
    }
  });
});
define('frontend-cp/initializers/ember-feature-flags', ['exports', 'frontend-cp/config/environment', 'frontend-cp/features/-main'], function (exports, _frontendCpConfigEnvironment, _frontendCpFeaturesMain) {
  exports.initialize = initialize;

  function initialize(registry, application) {
    var serviceName = _frontendCpConfigEnvironment['default'].featureFlagsService || 'features';
    application.register('features:-main', _frontendCpFeaturesMain['default']);
    application.inject('route', serviceName, 'features:-main');
    application.inject('controller', serviceName, 'features:-main');
    application.inject('component', serviceName, 'features:-main');
    application.inject('features:-main', 'application', 'application:main');
  }

  exports['default'] = {
    name: 'ember-feature-flags',
    initialize: initialize
  };
});
define('frontend-cp/initializers/export-application-global', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_frontendCpConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var value = _frontendCpConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_frontendCpConfigEnvironment['default'].modulePrefix);
      }

      if (!window[globalName]) {
        window[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete window[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('frontend-cp/initializers/intl', ['exports', 'ember-intl/models/translation'], function (exports, _emberIntlModelsTranslation) {

  _emberIntlModelsTranslation['default'].reopen({
    //TODO: talk to Kirill about how and why the frontendcp.universal is managed, if at all?
    //ANSWER: frontendcp (now frontend) is novo's app name, universal (api) is novo's portal. they are static and will rarely change.
    getValue: function getValue(key) {
      return this['frontend.api.' + key];
    }
  });

  exports['default'] = {
    name: 'intl',
    after: 'store',

    initialize: function initialize(registry) {}
  };
});
define("frontend-cp/initializers/liquid-fire", ["exports", "liquid-fire/router-dsl-ext", "liquid-fire/ember-internals"], function (exports, _liquidFireRouterDslExt, _liquidFireEmberInternals) {
  (0, _liquidFireEmberInternals.registerKeywords)();

  exports["default"] = {
    name: 'liquid-fire',
    initialize: function initialize() {}
  };
});
// This initializer exists only to make sure that the following
// imports happen before the app boots.
define('frontend-cp/initializers/metrics', ['exports', 'frontend-cp/config/environment'], function (exports, _frontendCpConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    var _config$metricsAdapters = _frontendCpConfigEnvironment['default'].metricsAdapters;
    var metricsAdapters = _config$metricsAdapters === undefined ? [] : _config$metricsAdapters;
    var _config$environment = _frontendCpConfigEnvironment['default'].environment;
    var environment = _config$environment === undefined ? 'development' : _config$environment;

    var options = { metricsAdapters: metricsAdapters, environment: environment };

    application.register('config:metrics', options, { instantiate: false });
    application.inject('service:metrics', 'options', 'config:metrics');
  }

  exports['default'] = {
    name: 'metrics',
    initialize: initialize
  };
});
define('frontend-cp/initializers/print-git-info', ['exports', 'frontend-cp/config/environment'], function (exports, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'print-git-info',

    initialize: function initialize() {
      if (_frontendCpConfigEnvironment['default'].environment !== 'test') {
        console.log(_frontendCpConfigEnvironment['default'].currentRevision);
      }
    }
  };
});
/* eslint-disable no-console */
define('frontend-cp/initializers/setup-sanitizers', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = {
    name: 'ember-sanitize-setup-sanitizers',

    initialize: function initialize(container) {
      if (container.registerOptionsForType) {
        container.registerOptionsForType('sanitizer', { instantiate: false });
      } else {
        // Ember < 2
        container.optionsForType('sanitizer', { instantiate: false });
      }
    }
  };
});
define('frontend-cp/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('frontend-cp/instance-initializers/ember-intl', ['exports', 'ember-intl/utils/add-locale-data', 'frontend-cp/config/environment'], function (exports, _emberIntlUtilsAddLocaleData, _frontendCpConfigEnvironment) {
  exports.instanceInitializer = instanceInitializer;

  function filterBy(env, type) {
    return Object.keys(requirejs._eak_seen).filter(function (key) {
      return key.indexOf(env.modulePrefix + '/' + type + '/') === 0;
    });
  }

  function instanceInitializer(instance) {
    var container = instance.lookup ? instance : instance.container;
    var service = container.lookup('service:intl');

    filterBy(_frontendCpConfigEnvironment['default'], 'cldrs').forEach(function (key) {
      (0, _emberIntlUtilsAddLocaleData['default'])(require(key, null, null, true)['default']);
    });

    filterBy(_frontendCpConfigEnvironment['default'], 'translations').forEach(function (key) {
      var localeSplit = key.split('\/');
      var locale = localeSplit[localeSplit.length - 1];
      service.createLocale(locale, require(key, null, null, true)['default']);
    });
  }

  exports['default'] = {
    name: 'ember-intl',
    initialize: instanceInitializer
  };
});
/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
define('frontend-cp/instance-initializers/new-relic', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = {
    name: 'new-relic',

    initialize: function initialize() {
      if (!doReporting()) {
        return;
      }

      _ember['default'].onerror = handleError;

      _ember['default'].RSVP.on('error', function (error) {
        if (error.name !== 'TransitionAborted') {
          handleError(error);

          _ember['default'].Logger.assert(false, error);
        }
      });

      _ember['default'].Logger.error = function (message, cause, stack) {
        handleError(generateError(cause, stack));
      };
    }
  };

  function doReporting() {
    return typeof NREUM !== 'undefined' && _frontendCpConfigEnvironment['default'].newRelicErrorReporting;
  }

  function handleError(error) {
    try {
      NREUM.noticeError(error);
    } catch (e) {
      // ignore
    }
    console.error(error.stack);
  }

  function generateError(cause, stack) {
    var error = new Error(cause);
    error.stack = stack;
    return error;
  }
});
/* eslint-disable no-console */
/* eslint-disable no-empty */
/*globals NREUM*/
define('frontend-cp/instance-initializers/pusher', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(instance) {
    var pusher = instance.container.lookup('service:pusher');
    pusher.initialize();
  }
});
define("frontend-cp/lib/keycodes", ["exports"], function (exports) {
  var backspace = 8;
  exports.backspace = backspace;
  var tab = 9;
  exports.tab = tab;
  var enter = 13;
  exports.enter = enter;
  var shift = 16;
  exports.shift = shift;
  var ctrl = 17;
  exports.ctrl = ctrl;
  var alt = 18;
  exports.alt = alt;
  var pause = 19;
  exports.pause = pause;
  var capsLock = 20;
  exports.capsLock = capsLock;
  var escape = 27;
  exports.escape = escape;
  var space = 32;
  exports.space = space;
  var pageUp = 33;
  exports.pageUp = pageUp;
  var pageDown = 34;
  exports.pageDown = pageDown;
  var end = 35;
  exports.end = end;
  var home = 36;
  exports.home = home;
  var left = 37;
  exports.left = left;
  var up = 38;
  exports.up = up;
  var right = 39;
  exports.right = right;
  var down = 40;
  exports.down = down;
  var insert = 45;
  exports.insert = insert;
  var del = 46;
  exports.del = del;
  var zero = 48;
  exports.zero = zero;
  var one = 49;
  exports.one = one;
  var two = 50;
  exports.two = two;
  var three = 51;
  exports.three = three;
  var four = 52;
  exports.four = four;
  var five = 53;
  exports.five = five;
  var six = 54;
  exports.six = six;
  var seven = 55;
  exports.seven = seven;
  var eight = 56;
  exports.eight = eight;
  var nine = 57;
  exports.nine = nine;
  var a = 65;
  exports.a = a;
  var b = 66;
  exports.b = b;
  var c = 67;
  exports.c = c;
  var d = 68;
  exports.d = d;
  var e = 69;
  exports.e = e;
  var f = 70;
  exports.f = f;
  var g = 71;
  exports.g = g;
  var h = 72;
  exports.h = h;
  var i = 73;
  exports.i = i;
  var j = 74;
  exports.j = j;
  var k = 75;
  exports.k = k;
  var l = 76;
  exports.l = l;
  var m = 77;
  exports.m = m;
  var n = 78;
  exports.n = n;
  var o = 79;
  exports.o = o;
  var p = 80;
  exports.p = p;
  var q = 81;
  exports.q = q;
  var r = 82;
  exports.r = r;
  var s = 83;
  exports.s = s;
  var t = 84;
  exports.t = t;
  var u = 85;
  exports.u = u;
  var v = 86;
  exports.v = v;
  var w = 87;
  exports.w = w;
  var x = 88;
  exports.x = x;
  var y = 89;
  exports.y = y;
  var z = 90;
  exports.z = z;
  var leftWindowKey = 91;
  exports.leftWindowKey = leftWindowKey;
  var rightWindowKey = 92;
  exports.rightWindowKey = rightWindowKey;
  var selectKey = 93;
  exports.selectKey = selectKey;
  var numpad0 = 96;
  exports.numpad0 = numpad0;
  var numpad1 = 97;
  exports.numpad1 = numpad1;
  var numpad2 = 98;
  exports.numpad2 = numpad2;
  var numpad3 = 99;
  exports.numpad3 = numpad3;
  var numpad4 = 100;
  exports.numpad4 = numpad4;
  var numpad5 = 101;
  exports.numpad5 = numpad5;
  var numpad6 = 102;
  exports.numpad6 = numpad6;
  var numpad7 = 103;
  exports.numpad7 = numpad7;
  var numpad8 = 104;
  exports.numpad8 = numpad8;
  var numpad9 = 105;
  exports.numpad9 = numpad9;
  var multiply = 106;
  exports.multiply = multiply;
  var add = 107;
  exports.add = add;
  var subtract = 109;
  exports.subtract = subtract;
  var decimalPoint = 110;
  exports.decimalPoint = decimalPoint;
  var divide = 111;
  exports.divide = divide;
  var f1 = 112;
  exports.f1 = f1;
  var f2 = 113;
  exports.f2 = f2;
  var f3 = 114;
  exports.f3 = f3;
  var f4 = 115;
  exports.f4 = f4;
  var f5 = 116;
  exports.f5 = f5;
  var f6 = 117;
  exports.f6 = f6;
  var f7 = 118;
  exports.f7 = f7;
  var f8 = 119;
  exports.f8 = f8;
  var f9 = 120;
  exports.f9 = f9;
  var f10 = 121;
  exports.f10 = f10;
  var f11 = 122;
  exports.f11 = f11;
  var f12 = 123;
  exports.f12 = f12;
  var numLock = 144;
  exports.numLock = numLock;
  var scrollLock = 145;
  exports.scrollLock = scrollLock;
  var semiColon = 186;
  exports.semiColon = semiColon;
  var equalSign = 187;
  exports.equalSign = equalSign;
  var comma = 188;
  exports.comma = comma;
  var dash = 189;
  exports.dash = dash;
  var period = 190;
  exports.period = period;
  var forwardSlash = 191;
  exports.forwardSlash = forwardSlash;
  var graveAccent = 192;
  exports.graveAccent = graveAccent;
  var openBracket = 219;
  exports.openBracket = openBracket;
  var backSlash = 220;
  exports.backSlash = backSlash;
  var closeBracket = 221;
  exports.closeBracket = closeBracket;
  var singleQuote = 222;
  exports.singleQuote = singleQuote;
});
define("frontend-cp/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/locales/en-us/admin", ["exports"], function (exports) {
  exports["default"] = {
    "navigation.apps": "Apps",
    "navigation.manage": "Manage",
    "navigation.people": "People",
    "navigation.channels": "Channels",
    "navigation.automation": "Automation",

    "administration": "Administration",
    "apps": "Apps",
    "endpoints": "Endpoints",

    "views": "Views",
    "views.buttons.add_new": "Add new",
    "views.description": "Ipsum locum dorum somethinum",
    "views.heading.edit": "Case Views / Edit",
    "views.heading.new": "Case Views / New",
    "views.heading.view_details": "View details",
    "views.label.view_title": "View title",
    "views.heading.sharing": "Sharing",
    "views.radio.label.me": "Just myself",
    "views.radio.label.all": "Every agent",
    "views.radio.label.specific": "Specific teams",
    "views.label.sharing": "Make this view available to",
    "views.sharing.ALL": "ALL",
    "views.sharing.SELF": "just myself",
    "views.heading.predicate_builder": "Include cases that match the following in this view",
    "views.heading.configure_layout": "Configure Columns",
    "views.label.configure_layout": "Customize what information is shown in this view by adding, removing and reordering fields below. You can add up to 10 columns in your view",
    "views.heading.sorting": "Sorting",
    "views.label.sorting": "In this view, default to sorting cases by",
    "views.description.sorting": "Descending means largest to smallest, most recent to oldest, highest priority to lowest priority, Z to A.",
    "views.edit.description_on.is_enabled": "View is active",
    "views.edit.description_off.is_enabled": "View is inactive",
    "views.edit.select_columns": "Please specify at least one column in \"Configure Columns\"",
    "views.order_saved.message": "New order of views saved",
    "views.enabled.message": "View enabled successfully",
    "views.disabled.message": "View disabled successfully",
    "views.deleted.message": "View deleted successfully",

    "businesshours": "Business hours",
    "businesshours.info": "Click and drag to toggle your hours",
    "businesshours.holidays": "Holidays",
    "businesshours.holidays.info": "What will your hours be on holidays?",
    "businesshours.headings.index": "Business hours",
    "businesshours.buttons.add": "Add New",
    "businesshours.headings.new": "Business hours / New",
    "businesshours.headings.edit": "Business hours / {title}",
    "businesshours.heading.details": "Details",
    "businesshours.label.title": "Business Hours title",
    "businesshours.holidays.label.title": "Holiday title",
    "businesshours.holidays.addaholiday": "Add a Holiday",
    "businesshours.holidays.saveholiday": "Save Holiday",

    "teams": "Teams",
    "teams.agent": "{numAgents, plural, =1 {agent} other {agents}}",
    "teams.headings.index": "Teams",
    "teams.headings.edit": "Teams / {title}",
    "teams.headings.new": "Teams / New",
    "teams.buttons.add": "Add New",
    "teams.labels.filter_teams": "Filter teams",
    "teams.labels.filter_agents": "Filter agents",
    "teams.labels.delete_team": "Delete team",
    "teams.labels.delete_team_confirmation": "Are you sure you wish to delete this team?",
    "teams.labels.edit.name": "Team name",
    "teams.legend.edit.details": "Team details",
    "teams.info.title": "Team members",
    "teams.info.content": "Click on agents from the list below to add or remove from the team",

    "roles": "Roles and permissions",
    "roles.index.add_new_button": "Add New Role",
    "roles.index.deletion_successful_notification": "Role deleted successfully",

    "fields.type.field_options.add_option": "Add an option",
    "fields.type.field_options.missing_options": "Please provide at least one option",
    "fields.new.heading": "New",
    "fields.edit.heading": "Edit",
    "fields.add_new_field": "Add New Field",

    "organizationfields": "Organization Fields",
    "organizationfields.new.heading": "Organization Fields / New",
    "organizationfields.enabled.success_message": "Organization field enabled successfully",
    "organizationfields.disabled.success_message": "Organization field disabled successfully",
    "organizationfields.delete.success_message": "Organization field deleted successfully",

    "userfields": "User Fields",
    "userfields.buttons.add_new_userfield": "Add New Field",
    "userfields.type.text.name": "Text",
    "userfields.type.text.description": "Capture a small amount of text using a single line text field.",
    "userfields.type.textarea.name": "Multi-line Text",
    "userfields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "userfields.type.regex.name": "Regular expression",
    "userfields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "userfields.type.radio.name": "Radio box (single choice)",
    "userfields.type.radio.description": "Users can select one option from the options you define.",
    "userfields.type.dropdown.name": "Dropdown box (single choice)",
    "userfields.type.dropdown.description": "Users can select one option from the options you define.",
    "userfields.type.numeric.name": "Numeric",
    "userfields.type.numeric.description": "Capture an integer from users using this special text field.",
    "userfields.type.decimal.name": "Decimal",
    "userfields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "userfields.type.file.name": "File",
    "userfields.type.file.description": "Allow users to upload files to this field.",
    "userfields.type.yesno.name": "Yes or no toggle",
    "userfields.type.yesno.description": "Users can select yes or no using a toggle.",
    "userfields.type.date.name": "Date",
    "userfields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "userfields.type.checkbox.name": "Checkbox (multi choice)",
    "userfields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "userfields.type.priority.name": "Priority",
    "userfields.type.team.name": "Team",
    "userfields.type.assignee.name": "Assignee",
    "userfields.type.type.name": "Type",
    "userfields.type.status.name": "Status",
    "userfields.type.subject.name": "Subject",
    "userfields.type.message.name": "Message",
    "userfields.type.select.name": "Select",
    "userfields.type.select.description": "Selecta",
    "userfields.new.heading": "User Fields / New",
    "userfields.edit.heading": "User Fields / Edit",
    "userfields.enabled.success_message": "User field enabled successfully",
    "userfields.disabled.success_message": "User field disabled successfully",
    "userfields.delete.success_message": "User field deleted successfully",

    "caseforms": "Case Forms",
    "caseforms.buttons.add_new_caseform": "Add new form",
    "caseforms.headings.enabled_fields": "Enabled Fields",
    "caseforms.headings.disabled_fields": "Disabled Fields",
    "caseforms.label.system": "(System)",
    "caseforms.heading.customer_settings": "Customers",
    "caseforms.heading.configure_form": "Configure Form",
    "caseforms.new.heading": "Case Forms / New",
    "caseforms.edit.heading": "Case Forms / Edit",
    "caseforms.heading.agent_settings": "Agents",
    "caseforms.label.field_title": "Form title for agents",
    "caseforms.label.is_visible_to_customers": "Customers can see and select this form",
    "caseforms.help.is_visible_to_customers": "When customers can see and select case forms, they will be able to select a case form when submitting a new request in the Help Center. This means that case forms can be used to direct customers to create different types of request and to provide specific pieces of information for that request type.",
    "caseforms.label.customer_form_title": "Form title for customers",
    "caseforms.label.customer_form_description": "Form description for customers",
    "caseforms.help.api_key": "The field key is unique to this form and is used to reference fields using the Kayako API and in search.",
    "caseforms.help.configure_fields": "System fields are included in each case form by default. Add and arrange custom case fields to the case form below. You can manage case fields in the [Case fields] section.",
    "caseforms.label.add_new_field": "Add new field",
    "caseforms.remove_from_form": "Remove from form",
    "caseforms.edit.description_on.is_enabled": "Form is enabled",
    "caseforms.edit.description_off.is_enabled": "Form is disabled",

    "casefields": "Case Fields",
    "casefields.headings.enabled_fields": "Enabled Fields",
    "casefields.headings.disabled_fields": "Disabled Fields",
    "casefields.edit.heading.priorities": "Priorities",
    "casefields.type.text.name": "Text",
    "casefields.type.text.description": "Capture a small amount of text using a single line text field.",
    "casefields.type.textarea.name": "Multi-line Text",
    "casefields.type.textarea.description": "Capture a larger amount of text using a larger text box.",
    "casefields.type.regex.name": "Regular expression",
    "casefields.type.regex.description": "Capture text that has to match a specific format, validated by a regular expression pattern.",
    "casefields.type.radio.name": "Radio box (single choice)",
    "casefields.type.radio.description": "Users can select one option from the options you define.",
    "casefields.type.dropdown.name": "Dropdown box (single choice)",
    "casefields.type.dropdown.description": "Users can select one option from the options you define.",
    "casefields.type.numeric.name": "Numeric",
    "casefields.type.numeric.description": "Capture an integer from users using this special text field.",
    "casefields.type.decimal.name": "Decimal",
    "casefields.type.decimal.description": "Capture an decimal number from users using this special text field.",
    "casefields.type.file.name": "File",
    "casefields.type.file.description": "Allow users to upload files to this field.",
    "casefields.type.yesno.name": "Yes or no toggle",
    "casefields.type.yesno.description": "Users can select yes or no using a toggle.",
    "casefields.type.date.name": "Date",
    "casefields.type.date.description": "Capture a date value in this special date field. Users will be presented with a calendar widget to select a date.",
    "casefields.type.checkbox.name": "Checkbox (multi choice)",
    "casefields.type.checkbox.description": "Users can select multiple options from the options you define.",
    "casefields.type.checkbox.field_options.title": "Option title",
    "casefields.type.checkbox.field_options.tag": "Option tag",
    "casefields.type.priority.name": "Priority",
    "casefields.type.team.name": "Team",
    "casefields.type.assignee.name": "Assignee",
    "casefields.type.type.name": "Type",
    "casefields.type.status.name": "Status",
    "casefields.type.subject.name": "Subject",
    "casefields.type.message.name": "Message",
    "casefields.type.select.name": "Select",
    "casefields.type.select.description": "Selecta",
    "casefields.buttons.add_new_casefield": "Add New Field",
    "casefields.buttons.complete_locale_edit": "Done",
    "casefields.description": "Lorem ipsum dolor sit amet, diam appetere facilisis at pri, his vocibus iudicabit te. Te decore feugiat necessitatibus nec, id eos fugit dicunt. Vis ei ubique blandit, in vidit maiestatis disputationi vix, essent perpetua interesset ei mea. Et mea ubique feugait, ne nam unum clita, no his indoctum conclusionemque. Ad pri aperiri definitionem, nec ei dictas blandit.",
    "casefields.new.heading": "Case Fields / New",
    "casefields.edit.heading": "Case Fields / Edit",
    "casefields.type.cascadingselect.name": "Cascading select",
    "casefields.type.cascadingselect.description": "Allow users to drill down through categories to organize a lot of select options.",
    "casefields.edit.label.field_options": "The drop-down field will contain the options specified below.",
    "casefields.edit.help.types": "Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah. Case types blah blah. Case types blah.",
    "casefields.edit.heading.types": "Types",
    "casefields.edit.add_new_type": "Add a new type",
    "casefields.enabled.success_message": "Case field enabled successfully",
    "casefields.disabled.success_message": "Case field disabled successfully",
    "casefields.delete.success_message": "Case field deleted successfully",

    "casefields.edit.add_new_priority": "Add a priority",

    "case_column_title.caseid": "Case ID",
    "case_column_title.subject": "Subject",
    "case_column_title.assigneeagentid": "Assigned agent",
    "case_column_title.assigneeteamid": "Assigned team",
    "case_column_title.brandid": "Brand",
    "case_column_title.casepriorityid": "Priority",
    "case_column_title.casestatusid": "Status",
    "case_column_title.casetypeid": "Type",
    "case_column_title.channeltype": "Channel type",
    "case_column_title.createdat": "Created at",
    "case_column_title.lastcompletedat": "Completed at",
    "case_column_title.organization": "Organization",
    "case_column_title.requesterid": "Requester",
    "case_column_title.team": "Team",
    "case_column_title.updatedat": "Updated at",

    "casefields.edit.heading.agent_settings": "Agent Settings",
    "casefields.edit.heading.customer_settings": "Customer Settings",
    "casefields.edit.heading.field_options": "Field Options",
    "casefields.edit.heading.field_settings": "Field Settings",
    "casefields.edit.heading.regex": "Regular Expression",

    "casefields.edit.label.is_required_for_agents_when_updating_case": "Creating, replying to or updating a case",
    "casefields.edit.label.is_required_for_agents_when_resolving_case": "Resolving a case",
    "casefields.edit.label.field_title": "Field title",
    "casefields.edit.help.field_title": "This is the title that is displayed to your agents",
    "casefields.edit.label.is_visible_to_customers": "Customers can see this field",
    "casefields.edit.label.is_required_for_agents": "For agents, this field is required when",
    "casefields.edit.label.customer_field_title": "Field title for customers",
    "casefields.edit.label.customer_field_description": "Field description for customers",
    "casefields.edit.help.customer_field_description": "Enter an optional description into this field that will be show to customers in the help center",
    "casefields.edit.label.is_editable_by_customers": "Customers can edit this field",
    "casefields.edit.help.is_editable_by_customers": "Enable this setting to allow your customers to change the value of this field from the Help Center or through the API.",
    "casefields.edit.label.is_required_for_customers": "This field is required for customers",
    "casefields.edit.help.is_required_for_customers": "Enable this setting to require your customers to complete this field when creating or updating a case from the Help Center or through the API.",
    "casefields.edit.label.api_key": "API field key",
    "casefields.edit.help.api_key": "The field key is unique to this field and is used to reference fields using the Kayako API and in search.",
    "casefields.edit.description_on.is_enabled": "Field is enabled",
    "casefields.edit.description_off.is_enabled": "Field is disabled",
    "casefields.edit.help.is_enabled": "Disabled case fields will not be available on cases or case forms, but any existing data will still be searchable and can be referenced in reporting.",
    "casefields.edit.label.priorities": "The order of priorities matter: your priorities should go from highest to lowest. If you remove a priority, all cases using that priority will be set to no priority.",
    "casefields.help.regex": "Enter a regular expression that will be evaluated against your users' input. If the regular expression evaluates to false, the input will be deemed invalid.",
    "casefields.edit.add_new_status": "Add a new custom status",
    "casefields.edit.heading.statuses": "Statuses",
    "casefields.edit.help.statuses.1": "Case statuses typically map to your workflow and how you handle customer requests and conversations. Throughout its life, a case will move through various statuses. There are some default system statuses and you can also create statuses to customize the workflow.",
    "casefields.edit.help.statuses.2": "If SLAs are enabled in Kayako, you can determine whether or not SLA timers will pause on particular statuses. For example, you may not want the time a case spends while set to Pending (while you are waiting for a customer to get back to you) to count towards your SLA targets.",

    "casefields.edit.statuses.label.is_sla_active": "SLA timers active",
    "casefields.edit.statuses.label.is_sla_inactive": "SLA timers inactive",

    "twitter": "Twitter",
    "twitter.description": "Your Twitter accounts are blah. Organize agents into teams for blah. Aenean eu leo quam. Pellentesque ornare sem lacinia quam venenatis vestibulum. Vestibulum id ligula porta felis euismod semper. Aenean lacinia bibendum nulla sed.",
    "twitter.headings.index": "Twitter",
    "twitter.edit.heading": "Twitter / @{screenName}",
    "twitter.buttons.create_account": "Connect new account",
    "twitter.heading.account_settings": "Account settings",
    "twitter.heading.capture_settings": "What to capture",
    "twitter.heading.help_settings": "Help Center",
    "twitter.label.brand": "Brand",
    "twitter.help.brand": "Your channel accounts are linked to specific Brands. When you have multiple Brands set up, Kayako will link any cases created as a result of events over this channel account to this Brand.",
    "twitter.help.capture": "Kayako can capture various events (such as messages) through this channel account into cases. Select which kind of events you want Kayako to capture.",
    "twitter.label.mentions": "Mentions",
    "twitter.description_on.mentions": "Capturing @mentions",
    "twitter.description_off.mentions": "Not capturing @mentions",
    "twitter.label.favourited_tweets": "Favorited Tweets",
    "twitter.description_on.favourited_tweets": "Capturing Favorited Tweets",
    "twitter.description_off.favourited_tweets": "Not capturing Favorited Tweets",
    "twitter.label.direct_messages": "Direct Messages",
    "twitter.description_on.direct_messages": "Capturing Direct Messages",
    "twitter.description_off.direct_messages": "Not capturing Direct Messages",
    "twitter.label.display_public_tweets": "Show latest Tweets from this account in the Help Center",
    "twitter.description_on.display_public_tweets": "Showing latest Tweets",
    "twitter.description_off.display_public_tweets": "Not showing latest Tweets",
    "twitter.help.display_public_tweets": "Kayako can display the latest non-@mention Tweets sent from this account in your Help Center. This is useful if you use this account to keep your customers up to date with news and events.",
    "twitter.connection_lost": "connection lost",
    "twitter.reconnect": "Reconnect",
    "twitter.deleted.message": "Twitter account deleted successfully",

    "predicate_builder.cases.subject": "Case: Subject",
    "predicate_builder.cases.casestatusid": "Case: Status",
    "predicate_builder.cases.casetypeid": "Case: Type",
    "predicate_builder.cases.channeltype": "Case: Channel Type",
    "predicate_builder.cases.casepriorityid": "Case: Priority ID",
    "predicate_builder.cases.state": "Case: State",
    "predicate_builder.cases.brandid": "Case: Brand",
    "predicate_builder.cases.assigneeteamid": "Case: Assigned Agent Team",
    "predicate_builder.cases.assigneeagentid": "Case: Assigned Agent",
    "predicate_builder.cases.requesterid": "Case: Requester",
    "predicate_builder.cases.lastcompletedat": "Case: Last Completed",
    "predicate_builder.cases.updatedat": "Case: Updated At",
    "predicate_builder.cases.createdat": "Case: Created At",
    "predicate_builder.caseslametrics.isbreached": "Case: SLA Breached",
    "predicate_builder.label.addition_of_rule": "+ New Criteria",
    "predicate_builder.tags.name": "Case: Tags",
    "predicate_builder.followers.userid": "Case: Following",
    "predicate_builder.users.organizationid": "Case: Organisation",
    "predicate_builder.cases.postcount": "Case: Number of Posts",
    "predicate_builder.operators.none": "string contains",
    "predicate_builder.operators.string_contains": "string contains",
    "predicate_builder.operators.string_does_not_contain": "string does not contain",
    "predicate_builder.operators.comparison_equalto": "is equal to",
    "predicate_builder.operators.comparison_not_equalto": "is not equal to",
    "predicate_builder.operators.comparison_lessthan": "is less than",
    "predicate_builder.operators.comparison_greaterthan": "is greater than",
    "predicate_builder.operators.collection_contains_insensitive": "string contains (case insensitive)",
    "predicate_builder.operators.collection_does_not_contain_insensitive": "string does not contain (case insensitive)",
    "predicate_builder.operators.collection_contains_any_insensitive": "string contains any (case insensitive)",
    "predicate_builder.operators.date_after": "date after",
    "predicate_builder.operators.date_after_or_on": "date after or on",
    "predicate_builder.operators.date_before": "date before",
    "predicate_builder.operators.date_before_or_on": "date before or on",
    "predicate_builder.operators.date_is": "date is",
    "predicate_builder.operators.date_is_not": "date is not",
    "macros": "Macros",
    "macros.usage_count": "Used {count, plural, =1 {1 time} other {# times}}",
    "macros.last_used_at": "Last used at {date}",
    "macros.new.heading": "Macros / New",
    "macros.edit.heading": "Macros / Edit",
    "macros.heading.details": "Macro details",
    "macros.label.title": "Macro title",
    "macros.heading.sharing": "Sharing",
    "macros.label.visibility_type": "Make this macro available to",
    "macros.radio.label.me": "Just myself",
    "macros.radio.label.all": "Every agent",
    "macros.radio.label.specific": "A specific team",
    "macros.heading.actions": "Do the following:",
    "macros.label.new_action": "Please select an action",
    "macros.label.change_to": "Change to",
    "macros.buttons.add_new_macro": "Add New Macro",
    "macros.actions.reply_type.reply": "Reply",
    "macros.actions.reply_type.note": "Note",
    "macros.actions.reply_contents.label": "Reply Contents",
    "macros.actions.reply_type.label": "Reply Type",
    "macros.actions.type.label": "Type",
    "macros.actions.add_tags.label": "Add Tags",
    "macros.actions.remove_tags.label": "Remove Tags",
    "macros.actions.priority.label": "Priority",
    "macros.actions.priority.increase_one_level": "Increase One",
    "macros.actions.priority.decrease_one_level": "Decrease One",
    "macros.actions.status.label": "Status",
    "macros.actions.assignee.label": "Assignee",
    "macros.errors.actions.required": "Please add at least one action",
    "roles.type.admin": "Administrator",
    "roles.type.agent": "Agent",
    "roles.type.collaborator": "Collaborator",
    "roles.type.customer": "Customer",
    "roles.type.owner": "Owner",
    "roles.agent_case_access_type.self": "Assigned to agent",
    "roles.agent_case_access_type.teams": "Assigned to agent's teams",
    "roles.agent_case_access_type.all": "All",
    "roles.form.new_title": "New",
    "roles.form.role_type_field_help": "Some permissions are enforced by Kayako and are non-configurable. These permissions depend on the <strong>role type</strong> selected here. For example, an 'Admin' role type will grant access to the admin area (and will enable some Admin-specific permissions below).",
    "roles.form.role_type_field_help_link": "Find out more about roles",
    "roles.form.title_field_label": "Role name",
    "roles.form.role_type_field_label": "Role type",
    "roles.form.details_group_legend": "Role details",
    "roles.form.cases_group_legend": "Cases",
    "roles.form.chats_group_legend": "Chat",
    "roles.form.help_center_group_legend": "Help Center",
    "roles.form.user_administration_group_legend": "User administration",
    "roles.form.system_administration_group_legend": "System administration",
    "roles.form.agent_case_access_field_label": "Cases this agent can access",
    "roles.form.agent_case_access_field_help": "This permission can be overridden per-agent, by editing an agent's profile.",
    "roles.form.cases_create_permission_label": "Create new cases",
    "roles.form.cases_reply_permission_label": "Reply to cases",
    "roles.form.cases_add_notes_permission_label": "Add private notes to cases",
    "roles.form.cases_update_permission_label": "Update case properties",
    "roles.form.cases_update_permission_help": "Allows this agent to update the properties of a case, such as change the assignee and change custom case field values.",
    "roles.form.cases_split_and_merge_permission_label": "Split and merge cases",
    "roles.form.cases_split_and_merge_permission_help": "Allows this agent to split cases into new cases, and merge two existing cases into one.",
    "roles.form.cases_trash_permission_label": "Delete cases",
    "roles.form.cases_trash_permission_help": "Allow this agent to delete cases (which moves them to Trash) and individual case replies and notes.",
    "roles.form.chats_accept_permission_label": "Accept new chat requests and invitations",
    "roles.form.chats_accept_permission_help": "Enables the agent to sign in to live chat and make themselves available to accept new chat requests and transfer invitations.",
    "roles.form.users_and_orgs_group_legend": "Users and organizations",
    "roles.form.users_and_orgs_create_permission_label": "Create users and organizations",
    "roles.form.users_and_orgs_update_permission_label": "Update users and organizations",
    "roles.form.users_and_orgs_update_permission_help": "Allows an agent to update user profiles (such as their name, identities and the values of custom user fields). Regardless of this permission, agents can update their own profile.",
    "roles.form.users_and_orgs_delete_permission_label": "Delete users and organizations",
    "roles.form.users_and_orgs_delete_permission_help": "Allows this agent to delete other users. Regardless of this setting, only admin type users can delete other agents and admins, and agent type users can only delete customers.",
    "roles.form.help_center_manage_permission_label": "Manage the Help Center",
    "roles.form.help_center_manage_permission_help": "Allows the agent to manage the structure of the Help Center, including creating and editing categories, sections and permissions. Note that only admin type users with the 'Manage channels' permission are able to change the configuration and look and feel of the Help Center.",
    "roles.form.help_center_manage_articles_permission_label": "Create and edit articles",
    "roles.form.help_center_manage_articles_permission_help": "Allows the agent to create and edit articles in the Help Center. Note: that Collaborators cannot create or edit Help Center content.",
    "roles.form.help_center_publish_articles_permission_label": "Publish articles",
    "roles.form.help_center_publish_articles_permission_help": "Allows the agent to publish Help Center articles (by changing the status of a Help Center article to Published). Note: Collaborators cannot create or edit Help Center content.",
    "roles.form.teams_manage_permission_label": "Manage teams",
    "roles.form.teams_manage_permission_help": "Allows this admin to manage teams and organize other agents into teams.",
    "roles.form.roles_and_permissions_manage_permission_label": "Manage roles and permissions",
    "roles.form.roles_and_permissions_manage_permission_help": "Allows this admin to manage roles and permissions.",
    "roles.form.apps_manage_permission_label": "Manage apps and integrations",
    "roles.form.endpoints_manage_permission_label": "Manage Endpoints",
    "roles.form.channels_manage_permission_label": "Manage channels",
    "roles.form.channels_manage_permission_help": "Allows this admin to manage channels and related settings, such as adding new Mailboxes, the look and feel of the Help Center, connecting new Twitter accounts and API keys.",
    "roles.form.brands_manage_permission_label": "Manage Brands",
    "roles.form.case_views_manage_permission_label": "Manage case views",
    "roles.form.case_macros_manage_permission_label": "Manage case macros",
    "roles.form.business_rules_manage_permission_label": "Manage business rules",
    "roles.form.business_rules_manage_permission_help": "Allows this admin to manage case trigger rules and case monitor rules.",
    "roles.form.slas_and_business_hours_manage_permission_label": "Manage SLAs and business hours",
    "roles.form.slas_and_business_hours_manage_permission_help": "Allows this admin to manage SLAs and business hours.",
    "roles.form.case_fields_manage_permission_label": "Manage case fields",
    "roles.form.case_fields_manage_permission_help": "Allows this admin to create, update and delete custom case fields, and customize system case fields (such as priority, status and type).",
    "roles.form.users_and_organization_fields_manage_permission_label": "Manage custom user and organization fields",
    "roles.form.users_and_organization_fields_manage_permission_help": "Allows this admin to create, update and delete custom user and organization profile fields.",
    "roles.form.settings_manage_permission_label": "Manage system configuration",
    "roles.form.settings_manage_permission_help": "Allows the admin to manage system settings and configuration, such as security settings, authentication options and blacklists."

  };
});
define("frontend-cp/locales/en-us/cases", ["exports"], function (exports) {
  exports["default"] = {
    "activity": "Activity",
    "addparticipant": "Add participant",
    "copy-someone-in.title": "Copy someone in",
    "copy-someone-in.description": "These people will be copied in on your reply.",
    "copy-someone-in.input-placeholder": "Find user or type email address",
    "copy-someone-in.fing-out-more": "Find out more about CC recipients.",
    "copy-someone-in.showing": "Showing {filtered} of {total} users",
    "copy-someone-in.not-found": "No users found.<br/>You could try typing an email address to add it.",
    "copy-someone-in.help-text": "These people will be copied in on your reply. <a href=\"#\">Find out more about CC recipients.</a>",
    "copy-someone-in.email-error": "Please enter a valid email address",
    "contents.placeholder": "Detail the case here...",
    "notes.placeholder": "Type a note...",
    "linkedCasesInline": "Link a case",
    "assignee": "Assignee",
    "assignee.agent": "Assigned agent",
    "assignee.team": "Assigned team",
    "rating": "Rating",
    "assignment-due-at": "Assignment due at",
    "created-at": "Created at",
    "creator": "Creator",
    "team": "Team",
    "brand": "Brand",
    "source": "Source",
    "created": "Created",
    "channeltype": "Channel type",
    "last_completed_at": "Last completed at",

    "case.created": "Case Created",
    "case.updated": "Case Updated",
    "cases.updated": "Cases Updated",

    "requester-language": "Requester Language",
    "organization": "Organization",
    "last-update": "Last update",
    "last-update-by-a-user": "Last update by a user",
    "last-update-by-requester": "Last update by requester",
    "last-update-by-assignee": "Last update by assignee",
    "oldest-update-by-requester": "Oldest update by requester",
    "completed": "Completed",
    "sla-name": "SLA Name",
    "next-breach": "Next breach",
    "resolution-time": "Resolution time",
    "first-reply-time": "First reply time",
    "next-reply-time": "Next reply time",
    "last-replier": "Last replier",
    "reply-due-at": "Reply due at",
    "reply-twitter-message": "Send reply as link to the Help Center.",
    "reply-twitter-tooltip": "Kayako will send a public Tweet to the requester containing a link to this conversation on the Help Center.",
    "resolution-at": "Resolution at",
    "cases": "Cases",
    "due": "Due",
    "lastreplier": "Last replier",
    "lastupdated": "Last updated {time}",
    "metric.total": "{number, number} Total",
    "metric.unresolved": "Unresolved",
    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",
    "note": "Note",
    "priority": "Priority",
    "requester": "Requester",
    "satisfaction-status": "Satisfaction status",
    "status": "Status",
    "subheader": "{time, date, medium} – {time, time, short} {hasChannel, select,\n    true {created via {channel}}\n    false {}\n  } {hasBrand, select,\n    true {, {brand}}\n    false {}\n  }",
    "avatar": "Avatar",
    "subject": "Subject",
    "submit": "Submit",
    "ticketid": "Case ID",
    "type": "Type",
    "macro": "Macro",
    "applymacro": "Apply Macro",
    "applymacroplaceholder": "Type to search macros",
    "channelType.MAILBOX": "email",
    "channelType.TWITTER": "Twitter",
    "channelType.TWITTER_DM": "Twitter",
    "channelType.CHAT": "Chat",
    "channelType.FACEBOOK": "Facebook",
    "channelType.none": "-",
    "channelType.NOTE": "Note",
    "channelType.HELPCENTER": "Helpcenter",
    "new_case": "New case",
    "new_case_subject_placeholder": "Click to set a subject...",
    "new_case_tab_placeholder": "New Case",

    "trash": "Trash case",
    "trashcases": "Trash cases",
    "untrash": "Untrash",
    "trashed": "Trashed",
    "confirm.trash": "Are you sure you want to trash this?",
    "trash.success_message": "Case trashed successfully",
    "trash.restore.success_message": "Case restored successfully",

    "search.request.result_meta": "Showing {numDisplayResults} of {totalResults} users",

    "list.casesnotfound": "There are no cases here.",
    "list.bulkupdate.updatecases": "Update cases",

    "field_title.requester": "Requester",
    "notes": "Notes",
    "form-select": "Case form",

    "sort": "Sort",
    "filter": "Filter",

    "unassigned": "(Unassigned)",

    "sort_options.newest_first": "Newest first",
    "sort_options.oldest_first": "Oldest first",

    "filter_options.all": "All",
    "filter_options.posts": "Posts",
    "filter_options.posts_activities": "Posts and activities",
    "filter_options.posts_events": "Posts and events",
    "posts.load_more": "Load more",
    "suspendedMessages.title": "Suspended messages",
    "suspendedMessages.confirmDeleteAll": "Are you sure that you want to delete these messages. This action can't be undone.",
    "suspendedMessages.table.from": "From",
    "suspendedMessages.table.subject": "Subject",
    "suspendedMessages.table.createdAt": "Received",
    "suspendedMessages.table.suspensionCode": "Suspension reason",
    "suspendedMessages.emptyList": "No suspended messages",
    "suspendedMessage.title": "Suspended message",
    "suspendedMessage.table.from": "From",
    "suspendedMessage.table.subject": "Subject",
    "suspendedMessage.table.createdAt": "Received at",
    "suspendedMessage.table.suspensionCode": "Suspension reason",
    "suspendedMessage.table.to": "Sent to",
    "suspendedMessage.table.html": "HTML Message",
    "suspendedMessage.table.text": "Text Message",
    "suspendedMessage.actions.cancel": "Cancel",
    "suspendedMessage.actions.permanentlyDelete": "Permanently delete",
    "suspendedMessage.actions.allowThrough": "Allow through",
    "sla.title.RESOLUTION_TIME": "Resolution",
    "sla.title.FIRST_REPLY_TIME": "First reply",
    "sla.title.NEXT_REPLY_TIME": "Next reply",

    "reply.click_to_start": "Click to start a",
    "reply.or_leave_a": "or leave a",
    "reply.note": "Note",
    "reply.reply": "Reply"
  };
});
define("frontend-cp/locales/en-us/feed", ["exports"], function (exports) {
  exports["default"] = {
    "replied": "replied to a case",
    "added": "added a note"
  };
});
define("frontend-cp/locales/en-us/generic", ["exports"], function (exports) {
  exports["default"] = {
    "validation_errors": "Please fill in all required fields",
    "next": "Next",
    "close": "close",
    "remove": "Remove",
    "add": "Add",
    "create_link": "Create Link",
    "datepicker.clear": "Clear",
    "datepicker.close": "Close",
    "datepicker.today": "Today",
    "dateselect.placeholder": "Select a date",
    "filesize": "{size} {unit}",
    "drilldown.back": "Back",
    "logout": "Logout",
    "view_your_profile": "View your profile",
    "paginatorof": "of {number, number}",
    "popover.next": "next",
    "popover.previous": "previous",
    "search": "Search helpdesk...",
    "texteditor.attachment": "Attachment",
    "texteditor.authorship": "Authorship",
    "texteditor.cc": "CC",
    "texteditor.billing": "Billing",
    "texteditor.bold": "Bold",
    "texteditor.bullet": "Bullet",
    "texteditor.image": "Image",
    "texteditor.italic": "Italic",
    "texteditor.link": "Link",
    "texteditor.list": "List",
    "texteditor.notes_reminder": "This private note will only be seen by agents",
    "users": "Users",
    "enable": "Enable",
    "enabled": "Enabled",
    "disable": "Disable",
    "disabled": "Disabled",
    "delete": "Delete",
    "edit": "Edit",
    "default": "Default",
    "profile.position": "{position}",
    "profile.place": "{place}",
    "profile.openCases": "{number} Open Cases",
    "profile.time": "Currently, {time}",
    "profile.follow": "Follow",
    "profile.unfollow": "Unfollow",
    "profile.viewProfile": "View Profile",
    "make_default": "Make default",
    "save": "Save",
    "cancel": "Cancel",
    "and": "And",
    "or": "Or",
    "also_viewing": "Also viewing",
    "track_time": "Track time",
    "time_spent": "Time spent",
    "hours_abbreviation": "Hrs",
    "day_abbreviation": "d",
    "hour_abbreviation": "h",
    "minute_abbreviation": "m",
    "SLA": "SLA",
    "select_placeholder": "Select...",
    "search_result_select_instruction": "Press enter",
    "search.no_results": "No results found",
    "search.start_typing_to_search": "Start typing to search",
    "search.searching": "Searching...",
    "shared_with": "Shared with",

    "sort.ASC": "Ascending",
    "sort.DESC": "Descending",

    "uploads.toolarge": "is too large.",
    "uploads.unknown": "upload failed. Please contact support",
    "uploads.wrongtype": "is not allowed. Allowed file types: ",
    "uploads.failed": "There was a problem uploading file(s)",

    "confirm.delete": "Are you sure you want to delete this?",
    "confirm.trashcases": "Are you sure you want to trash these?",
    "confirm.lose_changes": "You have unsaved changes on this page. Are you sure you want to discard these changes?",
    "changes_saved": "Changes saved",
    "casestrashed": "Cases trashed",
    "no_changes": "No Changes",

    "create_user_panel.title": "Create a new user",
    "create_user_panel.name_label": "First and last name",
    "create_user_panel.email_label": "Email address",
    "create_user_panel.name_required": "Name is required",
    "create_user_panel.email_required": "Email address is required",
    "create_user_panel.email_invalid": "Invalid email address",
    "create_user_panel.submit": "Add user",
    "create_user_panel.info": "Other identities can be added once the user has been created.",
    "create_user_panel.cancel": "cancel",
    "create_user_panel.user_exists": "This email already in use.",
    "create_user_panel.user_exists_toast": "This email already belongs to someone",

    "create_organisation_panel.title": "Create a new organization",
    "create_organisation_panel.name_label": "Organization Name",
    "create_organisation_panel.domain_label": "Domain(s):",
    "create_organisation_panel.name_required": "Name is required",
    "create_organisation_panel.domain_required": "Email address is required",
    "create_organisation_panel.domain_invalid": "Invalid email address",
    "create_organisation_panel.submit": "Add Organization",
    "create_organisation_panel.info": "Other details can be added once the organization has been created.",

    "user_logged_out": "You have been logged out",
    "session_expired": "Your session has expired",
    "permissions_denied": "Sorry, you don't have access to perform this action. Please ask for permissions from an admin.",
    "user_credential_expired": "The credential (e.g. password) is valid but has expired",
    "resource_not_found": "Resource does not exist or has been removed",
    "generic_error": "A problem occurred and your request wasn't processed",

    "create_case_panel.title": "Create a new case",
    "create_case_panel.requester_label": "Requester/Recipient",
    "create_case_panel.requester_required": "Required",
    "create_case_panel.loading_label": "Loading users…",
    "create_case_panel.filter_label": "Showing {numFilteredUsers, number} of {numUsers, number}",
    "create_case_panel.info": "Other details can be added after continuing.",
    "create_case_panel.submit": "Create case",
    "create_case_panel.cancel": "cancel",

    "identities.component_title": "IDENTITIES",
    "identities.email_identities_title": "Email",
    "identities.twitter_identities_title": "Twitter",
    "identities.phones_identities_title": "Phone",
    "identities.facebook_identities_title": "Facebook",
    "identities.add_new": "Add new",
    "identities.add_email_identity": "Email",
    "identities.add_phone_identity": "Phone",
    "identities.add_twitter_identity": "Twitter",
    "identities.primary_comment": "(primary)",
    "identities.remove_identity": "Remove identity",
    "identities.validate_identity": "Send verification email",
    "identities.copy_identity": "Copy",
    "identities.make_primary": "Make primary",
    "identities.placeholders.email": "Add email address",
    "identities.placeholders.twitter": "Add twitter handle",
    "identities.placeholders.phone": "Add phone number",
    "identities.errors.invalid_email_format": "Email format invalid",
    "identities.errors.invalid_twitter_handle_format": "Twitter handle format invalid",
    "identities.confirm_remove": "Are you sure you want to remove this identity?",
    "identities.added.success_message": "Identity added successfully",
    "identities.removed.success_message": "Identity removed successfully",

    "error.field_required": "This action requires the field to be specified",
    "error.field_duplicate": "The value of the field is already used for another resource",
    "error.field_empty": "The value of the field cannot be empty",
    "error.field_invalid": "The value of the field is invalid",

    "reply.click_to_leave_a": "Click to leave a",
    "reply.note": "Note",

    "units.kB": "kB",
    "units.MB": "MB",
    "units.GB": "GB",
    "units.B": "B"
  };
});
define("frontend-cp/locales/en-us/login", ["exports"], function (exports) {
  exports["default"] = {
    "back": "« Back",
    "email": "Email",
    "forgot": "Forgot password?",
    "login": "Login",
    "newpassword": "New Password",
    "verificationcode": "Verification Code",
    "password": "Password",
    "repeatpassword": "Password (repeat)",
    "resetpassword": "Reset your password",
    "updatepassword": "Change password",
    "welcome": "Welcome to Kayako",

    "error.invalid_email": "Please enter a valid email address",
    "error.email_not_found": "This email doesn't exist"
  };
});
define("frontend-cp/locales/en-us/organisation", ["exports"], function (exports) {
  exports["default"] = {
    "domains": "Email domains",
    "new_organisation_placeholder": "Click to add a name",
    "delete_organisation": "Delete organisation",
    "organisation.created": "Organisation Created",
    "organisation.updated": "Organisation Updated",
    "infobar.cases.shared.true": "Can see each others' cases",
    "infobar.cases.shared.false": "Cannot see each others' cases",
    "infobar.accesslevel": "Case access"
  };
});
define("frontend-cp/locales/en-us/search", ["exports"], function (exports) {
  exports["default"] = {
    "no-results": "No results found",
    "searching": "Searching...",
    "placeholder": "Search..."
  };
});
define("frontend-cp/locales/en-us/users", ["exports"], function (exports) {
  exports["default"] = {
    "users": "Users",
    "addnewuser": "Add New User",
    "button.following.active.text": "Following",
    "button.following.active.hovertext": "Stop Following",
    "button.following.inactive.text": "Not Following",
    "button.following.inactive.hovertext": "Following",
    "button.user.enabled.text": "User Enabled",
    "button.user.enabled.hovertext": "Disable User",
    "button.user.disabled.text": "User Disabled",
    "button.user.disabled.hovertext": "Enable User",
    "infobar.organization": "Organization",
    "infobar.role": "Role",
    "infobar.timezone": "Timezone",

    "newteam": "New Team",
    "addteam": "Add a team...",
    "teams": "Teams",

    "newtag": "New Tag",
    "addtag": "Add a tag...",
    "tags": "Tags",

    "editsignature": "Edit Signature",
    "create_new_case": "Create New Case",
    "changepassword": "Change password",
    "deleteuser": "Delete user",
    "confirmdelete": "Are you sure you want to delete this user?",

    "user.created": "User Created",
    "user.updated": "User Updated",

    "metadata.created": "Created",
    "metadata.updated": "Updated",
    "metadata.lastseen": "Last seen",
    "infobar.accesslevel": "Case access",

    "infobar.agentaccess.self": "Cases assigned to agent",
    "infobar.agentaccess.teams": "Cases in agent's teams",
    "infobar.agentaccess.inherit": "(Inherit from role)",
    "infobar.agentaccess.all": "All cases",

    "infobar.organizationaccess.organization": "All organization’s cases",
    "infobar.organizationaccess.requested": "Only requested cases",

    "notes": "Notes",
    "add_a_note": "Add a note",
    "password_reset_email.success": "Password reset email has been sent",
    "recent_feedback": "Recent feedback",
    "recent_cases": "Recent cases",
    "no_feedback_available": "No feedback is available from this user",
    "no_recent_cases": "No recent cases from this user",
    "update_signature": "Proceed",
    "signaturemessage": "Please press \"Submit\" on the next page for this to take effect"
  };
});
define('frontend-cp/login/admin/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.admin');
      }, function () {
        _this.controllerFor('login').set('loginType', 'admin');
      });
    }
  });
});
define('frontend-cp/login/agent/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel() {
      var _this = this;

      return this.get('sessionService').getSession().then(function () {
        _this.transitionTo('session.agent');
      }, function () {
        _this.controllerFor('login').set('loginType', 'agent');
      });
    }
  });
});
define('frontend-cp/login/controller', ['exports', 'ember', 'frontend-cp/config/environment', 'frontend-cp/utils/format-validations', 'frontend-cp/mixins/simple-state'], function (exports, _ember, _frontendCpConfigEnvironment, _frontendCpUtilsFormatValidations, _frontendCpMixinsSimpleState) {
  var htmlSafe = _ember['default'].String.htmlSafe;
  exports['default'] = _ember['default'].Controller.extend(_frontendCpMixinsSimpleState['default'], {
    sessionService: _ember['default'].inject.service('session'),
    notificationService: _ember['default'].inject.service('notification'),
    errorHandler: _ember['default'].inject.service('error-handler'),
    intlService: _ember['default'].inject.service('intl'),
    locale: _ember['default'].inject.service(),

    newPassword1: '',
    otp: '',
    newPassword2: '',
    forgotPasswordMessage: '',
    fieldErrors: [],
    avatarBackground: null,
    validAvatar: false,
    isContentDown: false,
    prevLoginState: null,
    topFormSet: null,
    bottomFormSet: null,
    isAnimatingContent: null,
    authToken: null,

    queryParams: ['redirectTo'],
    redirectTo: null,

    init: function init() {
      this.setState('login.password.input');
      this.set('prevLoginState', this.get('currentState'));
      this._super.apply(this, arguments);
    },

    stateMap: {
      login: {
        password: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        otp: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        },
        resetPassword: {
          input: {},
          loading: {},
          confirmed: {},
          error: {}
        }
      },
      forgotPassword: {
        input: {},
        loading: {},
        confirmed: {},
        error: {}
      }
    },

    // Observers
    actionButtonText: _ember['default'].computed('currentState', function () {
      if (this.get('currentState') === 'login.resetPassword.input') {
        return this.get('intlService').findTranslationByKey('login.updatepassword');
      } else {
        return this.get('intlService').findTranslationByKey('login.login');
      }
    }),

    flipAvatar: _ember['default'].computed('validAvatar', 'avatarBackground', function () {
      return this.get('validAvatar') && this.get('avatarBackground');
    }),

    emailValidDidChange: _ember['default'].on('render', _ember['default'].observer('emailValid', function () {
      if (this.get('emailValid')) {
        this.requestAvatar(this.get('model.email'));
      }
    })),

    sessionDidClear: _ember['default'].on('init', _ember['default'].observer('sessionService.session.id', function () {
      if (this.get('sessionService.session.id') === null) {
        this.setState('login.password.input');
      }
    })),

    currentStateDidChange: _ember['default'].on('init', _ember['default'].observer('currentState', function () {
      var _this = this;

      var currentState = this.get('currentState');

      // Ignore anything outside the login root state
      if (!this.isInState('login', currentState)) {
        this.set('prevLoginState', currentState);
        return;
      }

      var stateMeta = {
        password: {
          order: 0,
          component: 'ko-login-password'
        },
        otp: {
          order: 1,
          component: 'ko-login-otp'
        },
        resetPassword: {
          order: 2,
          component: 'ko-login-reset'
        }
      };

      var prevState = this.get('prevLoginState');
      var currentSubState = this.getStateAtLevel(1, currentState);
      var prevSubState = this.getStateAtLevel(1, prevState);
      var currentStateMeta = stateMeta[currentSubState];
      var prevStateMeta = stateMeta[prevSubState];
      var isContentDown = null;

      // Only items within login level 0 state should animate up / down
      if (this.getStateAtLevel(0, prevState) === 'login') {

        /**
         * Determine the direction of movement depending on 'order' of item
         * Eg. moving from password to otp will move down,
         * otp to resetPassword will move down again
         * resetPassword to password will move up (once, we don't want to go 'past' otp)
         */

        // This should explicitly do nothing if the orders are equal
        if (currentStateMeta.order > prevStateMeta.order) {
          isContentDown = true;
        } else if (currentStateMeta.order < prevStateMeta.order) {
          isContentDown = false;
        }

        // Place content area in pre-animation state
        _ember['default'].run(function () {
          // Choose where to place the prev and next components
          _this.setProperties({
            topFormSet: isContentDown ? prevStateMeta.component : currentStateMeta.component,
            bottomFormSet: isContentDown ? currentStateMeta.component : prevStateMeta.component
          });

          // Switch off animation
          _this.set('isAnimatingContent', false);

          if (currentSubState !== prevSubState) {
            // Move content to show the previous component
            _this.set('isContentDown', !isContentDown);
          }
        });

        // In next run loop run the animation
        _ember['default'].run.next(function () {
          // Switch on animation
          _this.set('isAnimatingContent', true);
          _this.set('isContentDown', isContentDown);
        });
      }

      // Store prevState for comparison
      this.set('prevLoginState', currentState);
    })),

    // Computed Properties

    /**
     * Active notifications
     * @return {Object[]} Array of notification objects
     */
    notifications: _ember['default'].computed('notificationService.notifications.[]', function () {
      var notificationService = this.get('notificationService');
      return notificationService.get('notifications');
    }),

    isLogin: _ember['default'].computed('currentState', 'prevLoginState', function () {
      var currentState = this.get('currentState');
      var prevState = this.get('prevLoginState');
      var isInLogin = this.isInState('login', currentState);
      var wasInLogin = this.isInState('login', prevState);
      if (isInLogin !== wasInLogin) {
        this.clearErrors();
      }
      return isInLogin;
    }),

    isLoading: _ember['default'].computed('currentState', function () {
      return this.endsWithSubState('loading', this.get('currentState'));
    }),

    isOtp: _ember['default'].computed('currentState', function () {
      return this.isInState('login.otp', this.get('currentState'));
    }),

    isPassword: _ember['default'].computed('currentState', function () {
      return this.isInState('login.password', this.get('currentState'));
    }),

    isResetPassword: _ember['default'].computed('currentState', function () {
      return this.isInState('login.resetPassword', this.get('currentState'));
    }),

    isError: _ember['default'].computed('currentState', function () {
      return this.endsWithSubState('error', this.get('currentState'));
    }),

    isForgotPasswordEmailSent: _ember['default'].computed('currentState', function () {
      return this.isInState('forgotPassword.confirmed', this.get('currentState'));
    }),

    emailValid: _ember['default'].computed('model.email', function () {
      return (0, _frontendCpUtilsFormatValidations.validateEmailFormat)(this.get('model.email'));
    }),

    passwordValid: _ember['default'].computed('model.password', function () {
      return this.get('model.password').length > 0;
    }),

    canAttemptLogin: _ember['default'].computed('emailValid', 'passwordValid', function () {
      return this.get('emailValid') && this.get('passwordValid');
    }),

    loginButtonDisabled: _ember['default'].computed('canAttemptLogin', 'isLoading', 'newPasswordValid', 'isResetPassword', function () {
      return !this.get('canAttemptLogin') || this.get('isLoading') || !this.get('newPasswordValid') && this.get('isResetPassword');
    }),

    newPasswordValid: _ember['default'].computed('newPassword1', 'newPassword2', function () {
      var password1 = this.get('newPassword1');
      var password2 = this.get('newPassword2');
      return password1 === password2 && !!password1 && password1.length > 7;
    }),

    hasErrorMessages: _ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').length > 0;
    }),

    errorMessages: _ember['default'].computed('fieldErrors.[]', function () {
      return this.get('fieldErrors').map(this.transformMessages.bind(this));
    }),

    transformMessages: function transformMessages(error) {
      if ((error.code === 'FIELD_REQUIRED' || error.code === 'FIELD_INVALID') && error.parameter === 'email') {
        return this.get('intlService').findTranslationByKey('login.error.invalid_email');
      } else if (error.code === 'ASSOCIATE_NOT_FOUND' && error.parameter === 'email') {
        return this.get('intlService').findTranslationByKey('login.error.email_not_found');
      } else {
        return error.message;
      }
    },

    // Methods

    setErrors: function setErrors(errors) {
      this.set('fieldErrors', new _ember['default'].A(errors));
    },

    clearErrors: function clearErrors() {
      this.set('fieldErrors', []);
    },

    resetRequest: function resetRequest(endpoint, params) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'PUT',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: _ember['default'].$.param(params),
          headers: { 'X-Token': _this2.get('authToken') },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    otpRequest: function otpRequest(endpoint, otp) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'GET',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          headers: { 'X-Token': _this3.get('authToken'), 'X-OTP': otp },
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    authRequest: function authRequest(endpoint, params) {
      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _ember['default'].$.ajax({
          type: 'POST',
          url: endpoint,
          contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
          dataType: 'json',
          data: _ember['default'].$.param(params),
          success: function success(data) {
            resolve(data);
          },
          error: function error(xhr) {
            reject(xhr.responseText);
          }
        });
      });
    },

    requestAvatar: function requestAvatar(email) {
      var _this4 = this;

      //This endpoint is won't work for alpha 1 launch
      _ember['default'].$.ajax({
        type: 'POST',
        url: '/admin/index.php?/Base/Avatar/JSON/0/200',
        contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
        dataType: 'json',
        data: _ember['default'].$.param({ email: email }),
        success: function success(response) {
          /**
           * data.is_user dictates whether or not the returned image was gravatars
           * default image or not, if it was, we do not want to flip, treat it as a failed
           * call
           */

          var valid = !!response.data.is_user;

          _this4.set('validAvatar', valid);
          if (valid) {
            _this4.set('avatarBackground', response.data.data);
          }
        },
        error: function error() {
          if (console && console.warn) {
            // eslint-ignore-line
            console.warn('Avatar loading failed'); // eslint-ignore-line
          }
        }
      });
    },

    _onSuccessLogin: function _onSuccessLogin() {
      this.setState('login.password.confirmed');

      if (this.get('redirectTo')) {
        this.transitionToRoute(this.get('redirectTo'));
        return;
      }

      this.transitionToSession();
    },

    login: function login() {
      var _this5 = this;

      var locale = this.get('locale');

      this.setState('login.password.loading');
      this.get('sessionService').requestSession(this.get('model.email'), this.get('model.password')).then(function () {
        var userLocale = _this5.get('sessionService.user.locale');

        if (locale.getLocalLocale() !== userLocale) {
          locale.setup().then(function () {
            locale.persistLocaleToLocalStorage(userLocale);
            _this5._onSuccessLogin();
          });
        } else {
          _this5._onSuccessLogin();
        }
      }, function (error) {
        var errors = error.errors || [];
        var errorCodes = errors.map(function (error) {
          return error.code;
        });

        if (errorCodes.indexOf('AUTHENTICATION_FAILED') > -1) {
          _this5.setState('login.password.input');
        } else if (errorCodes.indexOf('CREDENTIAL_EXPIRED') > -1) {
          var authToken = errors[errorCodes.indexOf('CREDENTIAL_EXPIRED')].authToken;
          _this5.set('authToken', authToken);
          _this5.setState('login.resetPassword.input');
        } else if (errorCodes.indexOf('OTP_EXPECTED') > -1) {
          // User needs to enter one time password for two factor authentication
          var authToken = errors[errorCodes.indexOf('OTP_EXPECTED')].authToken;
          _this5.set('authToken', authToken);
          _this5.setState('login.otp.input');
        } else if (error instanceof _ember['default'].Error) {
          // this should never happen in production, but it might happen
          // on development stage when we have problems with models
          // (or similar)
          _this5.setState('login.password.error');
          _this5.setErrors({ message: 'System error, please contact Customer Support' });
        } else {
          _this5.setState('login.password.error');
        }

        if (console && console.error) {
          console.error(error.message);
        }
      });
    },

    resetPassword: function resetPassword() {
      var _this6 = this;

      this.setState('login.resetPassword.loading');
      this.setErrors([]);

      this.resetRequest('/api/v1/base/profile/password', {
        password: this.get('model.password'),
        new_password: this.get('newPassword1')
      }).then(function (response) {
        _this6.get('notificationService').removeAll();
        if (response.session_id) {
          _this6.set('sessionService.sessionId', response.session_id);
          _this6.transitionToSession();
        } else {
          _this6.setState('login.resetPassword.error');
          _this6.setErrors({ message: 'Session missing' });
        }
      }, function (response) {
        _this6.setState('login.resetPassword.error');
        var data = JSON.parse(response);
        _this6.setErrors(data.notifications);
        _this6.get('errorHandler').accept(data.errors);
        _this6.get('errorHandler').process();
      });
    },

    submitOtp: function submitOtp() {
      var _this7 = this;

      this.setState('login.otp.loading');
      this.setErrors([]);

      this.otpRequest('/api/v1/session', this.get('otp')).then(function (response) {
        _this7.get('notificationService').removeAll();
        if (response.session_id) {
          _this7.setState('login.otp.confirmed');
          _this7.set('sessionService.sessionId', response.session_id);
          _this7.transitionToSession();
        } else {
          _this7.setState('login.otp.error');
          _this7.setErrors([{ message: 'Session missing' }]);
        }
      }, function (response) {
        _this7.setState('login.otp.error');
        var data = JSON.parse(response);
        _this7.setErrors(data.notifications);
        _this7.get('errorHandler').accept(data.errors);
        _this7.get('errorHandler').process();
      });
    },

    transitionToSession: function transitionToSession() {
      var loginType = this.get('loginType');
      this.transitionToRoute('session.' + loginType);
    },

    /**
     * Need to SafeString all bound style attributes
     */

    loginFrontImageStyle: _ember['default'].computed(function () {
      return htmlSafe('background-image: url(\'' + _frontendCpConfigEnvironment['default'].assetRoot + '/images/user/avatar.png\');');
    }),

    loginBackImageStyle: _ember['default'].computed('avatarBackground', function () {
      if (this.get('avatarBackground')) {
        return htmlSafe('background-image: url("' + this.get('avatarBackground') + '");');
      } else {
        return htmlSafe('');
      }
    }),

    actions: {
      login: function login(e) {
        e.preventDefault();
        this.setErrors([]);

        if (!this.isInState('login', this.get('currentState'))) {
          return;
        }

        var funcMap = {
          password: this.login,
          resetPassword: this.resetPassword,
          otp: this.submitOtp
        };

        Reflect.apply(funcMap[this.getStateAtLevel(1)], this, []);
      },

      gotoForgotPassword: function gotoForgotPassword() {
        this.setState('forgotPassword.input');
      },

      gotoLogin: function gotoLogin() {
        this.setState('login.password.input');
      },

      sendForgotPasswordEmail: function sendForgotPasswordEmail(e) {
        var _this8 = this;

        e.preventDefault();
        this.setState('forgotPassword.loading');
        this.setErrors([]);
        this.authRequest('/api/v1/base/password/reset', { email: this.get('model.email') }).then(function () {
          _this8.setState('forgotPassword.confirmed');
          _this8.set('forgotPasswordMessage', 'An email with a reset link has been sent to your inbox');
        }, function (response) {
          var data = JSON.parse(response);
          _this8.setState('forgotPassword.error');
          _this8.setErrors(data.errors);
        });
      },

      onNotificationClosed: function onNotificationClosed(notification) {
        var notificationService = this.get('notificationService');
        notificationService.remove(notification);
      }
    }
  });
});
/* eslint-disable no-console, camelcase */
define('frontend-cp/login/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      this.transitionTo('login.agent');
    }
  });
});
define('frontend-cp/login/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].Object.create({
        email: '',
        password: ''
      });
    }
  });
});
define("frontend-cp/login/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 23,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("h6");
          dom.setAttribute(el2, "class", "t-center t-good");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "forgotPasswordMessage", ["loc", [null, [21, 40], [21, 65]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 12
              },
              "end": {
                "line": 29,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [28, 12], [28, 23]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 10
            },
            "end": {
              "line": 31,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1, "class", "t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [27, 20], [27, 33]]]]], [], 0, null, ["loc", [null, [27, 12], [29, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 41,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "type", "submit");
          dom.setAttribute(el2, "class", "button button--primary u-1/1 u-mt");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'disabled');
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "email", "value", ["subexpr", "@mut", [["get", "model.email", ["loc", [null, [35, 39], [35, 50]]]]], [], []], "name", "forgot-password", "class", "login__input login__input--alone", "placeholder", ["subexpr", "t", ["login.email"], [], ["loc", [null, [35, 127], [35, 144]]]], "disabled", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [35, 154], [35, 163]]]]], [], []]], ["loc", [null, [35, 12], [35, 165]]]], ["attribute", "disabled", ["get", "isLoading", ["loc", [null, [39, 87], [39, 96]]]]], ["inline", "t", ["login.resetpassword"], [], ["loc", [null, [39, 99], [39, 126]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 51,
                "column": 12
              },
              "end": {
                "line": 53,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/login/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n            ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "message", ["loc", [null, [52, 12], [52, 23]]]]],
          locals: ["message"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 54,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h6");
          dom.setAttribute(el1, "class", "t-center t-bad");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [51, 20], [51, 33]]]]], [], 0, null, ["loc", [null, [51, 12], [53, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 58,
              "column": 16
            },
            "end": {
              "line": 60,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "topFormSet", ["loc", [null, [59, 28], [59, 38]]]]], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [59, 45], [59, 50]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [59, 61], [59, 70]]]]], [], []], "otp", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [59, 75], [59, 78]]]]], [], []], "newPassword1", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [59, 92], [59, 104]]]]], [], []], "newPassword2", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [59, 118], [59, 130]]]]], [], []]], ["loc", [null, [59, 16], [59, 132]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 63,
              "column": 16
            },
            "end": {
              "line": 65,
              "column": 16
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("                ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "bottomFormSet", ["loc", [null, [64, 28], [64, 41]]]]], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [64, 48], [64, 53]]]]], [], []], "isLoading", ["subexpr", "@mut", [["get", "isLoading", ["loc", [null, [64, 64], [64, 73]]]]], [], []], "otp", ["subexpr", "@mut", [["get", "otp", ["loc", [null, [64, 78], [64, 81]]]]], [], []], "newPassword1", ["subexpr", "@mut", [["get", "newPassword1", ["loc", [null, [64, 95], [64, 107]]]]], [], []], "newPassword2", ["subexpr", "@mut", [["get", "newPassword2", ["loc", [null, [64, 121], [64, 133]]]]], [], []]], ["loc", [null, [64, 16], [64, 135]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 10
            },
            "end": {
              "line": 77,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/login/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "login-form__wrapper login__actions");
          var el2 = dom.createTextNode("\n            ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["js-slide ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [75, 36], [75, 45]]]], "u-disable-link"], [], ["loc", [null, [75, 31], [75, 64]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["gotoForgotPassword"], [], ["loc", [null, [75, 74], [75, 105]]]]], ["inline", "t", ["login.forgot"], [], ["loc", [null, [75, 106], [75, 126]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/login/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "login");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "login__box");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flipper");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "front");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "back");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login__image");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "login-form");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "class", "login-form__reset-form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6, "class", "login__header login__header--reset t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__wrapper login__actions");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("a");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("form");
        dom.setAttribute(el5, "class", "login-form__form");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("h5");
        dom.setAttribute(el6, "class", "login__header t-center");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__mask");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "login-form__fields-container-top");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n              ");
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("div");
        dom.setAttribute(el8, "class", "login-form__fields-container-bottom");
        var el9 = dom.createTextNode("\n");
        dom.appendChild(el8, el9);
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        var el9 = dom.createTextNode("              ");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n            ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "login-form__wrapper");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("button");
        dom.setAttribute(el7, "type", "submit");
        dom.setAttribute(el7, "class", "button button--primary u-1/1 u-mt");
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1, 1]);
        var element6 = dom.childAt(element4, [3, 1]);
        var element7 = dom.childAt(element2, [3, 1]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(element8, [9, 1]);
        var element10 = dom.childAt(element7, [3]);
        var element11 = dom.childAt(element10, [5, 1]);
        var element12 = dom.childAt(element10, [7, 1]);
        var morphs = new Array(21);
        morphs[0] = dom.createAttrMorph(element3, 'class');
        morphs[1] = dom.createAttrMorph(element5, 'style');
        morphs[2] = dom.createAttrMorph(element6, 'style');
        morphs[3] = dom.createAttrMorph(element7, 'class');
        morphs[4] = dom.createAttrMorph(element8, 'onsubmit');
        morphs[5] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[6] = dom.createMorphAt(element8, 3, 3);
        morphs[7] = dom.createMorphAt(element8, 5, 5);
        morphs[8] = dom.createMorphAt(element8, 7, 7);
        morphs[9] = dom.createAttrMorph(element9, 'class');
        morphs[10] = dom.createAttrMorph(element9, 'onclick');
        morphs[11] = dom.createMorphAt(element9, 0, 0);
        morphs[12] = dom.createAttrMorph(element10, 'onsubmit');
        morphs[13] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element10, 3, 3);
        morphs[15] = dom.createAttrMorph(element11, 'class');
        morphs[16] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [3]), 1, 1);
        morphs[18] = dom.createAttrMorph(element12, 'disabled');
        morphs[19] = dom.createMorphAt(element12, 0, 0);
        morphs[20] = dom.createMorphAt(element10, 9, 9);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["flip-container ", ["subexpr", "if", [["get", "flipAvatar", ["loc", [null, [3, 36], [3, 46]]]], "flip"], [], ["loc", [null, [3, 31], [3, 55]]]], " ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [3, 61], [3, 70]]]], "a-success"], [], ["loc", [null, [3, 56], [3, 84]]]], " ", ["subexpr", "if", [["get", "isError", ["loc", [null, [3, 90], [3, 97]]]], "a-error"], [], ["loc", [null, [3, 85], [3, 109]]]]]]], ["attribute", "style", ["get", "loginFrontImageStyle", ["loc", [null, [6, 44], [6, 64]]]]], ["attribute", "style", ["get", "loginBackImageStyle", ["loc", [null, [9, 44], [9, 63]]]]], ["attribute", "class", ["concat", ["login-form__container ", ["subexpr", "if", [["get", "isLogin", ["loc", [null, [15, 45], [15, 52]]]], "u-slide"], [], ["loc", [null, [15, 40], [15, 64]]]]]]], ["attribute", "onsubmit", ["subexpr", "action", ["sendForgotPasswordEmail"], [], ["loc", [null, [16, 54], [16, 90]]]]], ["inline", "t", ["login.resetpassword"], [], ["loc", [null, [17, 66], [17, 93]]]], ["block", "if", [["get", "isForgotPasswordEmailSent", ["loc", [null, [19, 16], [19, 41]]]]], [], 0, null, ["loc", [null, [19, 10], [23, 17]]]], ["block", "if", [["get", "hasErrorMessages", ["loc", [null, [25, 16], [25, 32]]]]], [], 1, null, ["loc", [null, [25, 10], [31, 17]]]], ["block", "if", [["subexpr", "not", [["get", "isForgotPasswordEmailSent", ["loc", [null, [33, 21], [33, 46]]]]], [], ["loc", [null, [33, 16], [33, 47]]]]], [], 2, null, ["loc", [null, [33, 10], [41, 17]]]], ["attribute", "class", ["concat", ["js-slide ", ["subexpr", "if", [["get", "isLoading", ["loc", [null, [44, 36], [44, 45]]]], "u-disable-link"], [], ["loc", [null, [44, 31], [44, 64]]]]]]], ["attribute", "onclick", ["subexpr", "action", ["gotoLogin"], [], ["loc", [null, [44, 74], [44, 96]]]]], ["inline", "t", ["login.back"], [], ["loc", [null, [44, 97], [44, 115]]]], ["attribute", "onsubmit", ["subexpr", "action", ["login"], [], ["loc", [null, [47, 51], [47, 69]]]]], ["inline", "t", ["login.welcome"], [], ["loc", [null, [48, 45], [48, 66]]]], ["block", "if", [["get", "hasErrorMessages", ["loc", [null, [49, 16], [49, 32]]]]], [], 3, null, ["loc", [null, [49, 10], [54, 17]]]], ["attribute", "class", ["concat", ["login-form__content ", ["subexpr", "if", [["get", "isAnimatingContent", ["loc", [null, [56, 49], [56, 67]]]], "login-form__content--animate"], [], ["loc", [null, [56, 44], [56, 100]]]], " ", ["subexpr", "if", [["get", "isContentDown", ["loc", [null, [56, 106], [56, 119]]]], "login-form__content-down"], [], ["loc", [null, [56, 101], [56, 148]]]]]]], ["block", "if", [["get", "topFormSet", ["loc", [null, [58, 22], [58, 32]]]]], [], 4, null, ["loc", [null, [58, 16], [60, 23]]]], ["block", "if", [["get", "bottomFormSet", ["loc", [null, [63, 22], [63, 35]]]]], [], 5, null, ["loc", [null, [63, 16], [65, 23]]]], ["attribute", "disabled", ["get", "loginButtonDisabled", ["loc", [null, [71, 87], [71, 106]]]]], ["content", "actionButtonText", ["loc", [null, [71, 109], [71, 129]]]], ["block", "if", [["subexpr", "not", [["subexpr", "eq", [["get", "currentState", ["loc", [null, [73, 25], [73, 37]]]], "login.resetPassword.input"], [], ["loc", [null, [73, 21], [73, 66]]]]], [], ["loc", [null, [73, 16], [73, 67]]]]], [], 6, null, ["loc", [null, [73, 10], [77, 17]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6]
    };
  })());
});
define('frontend-cp/mail/model', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    from: _emberData['default'].attr('string'),
    to: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    html: _emberData['default'].attr('string'),
    isSuspended: _emberData['default'].attr('boolean'),
    status: _emberData['default'].attr('string'),
    reason: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    suspensionCode: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/metrics-adapters/base', ['exports', 'ember-metrics/metrics-adapters/base'], function (exports, _emberMetricsMetricsAdaptersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersBase['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/google-analytics', ['exports', 'ember-metrics/metrics-adapters/google-analytics'], function (exports, _emberMetricsMetricsAdaptersGoogleAnalytics) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersGoogleAnalytics['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/google-tag-manager', ['exports', 'ember-metrics/metrics-adapters/google-tag-manager'], function (exports, _emberMetricsMetricsAdaptersGoogleTagManager) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersGoogleTagManager['default'];
    }
  });
});
define('frontend-cp/metrics-adapters/mixpanel', ['exports', 'ember-metrics/metrics-adapters/mixpanel'], function (exports, _emberMetricsMetricsAdaptersMixpanel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsMetricsAdaptersMixpanel['default'];
    }
  });
});
define('frontend-cp/mirage/config', ['exports', 'ember-cli-mirage', 'frontend-cp/mirage/fixtures/en-us-strings', 'moment', 'ember'], function (exports, _emberCliMirage, _frontendCpMirageFixturesEnUsStrings, _moment, _ember) {

  // API Inconsistencies
  //
  // Collections are sometimes arrays and are named with a plural sometimes
  // they are objects with numbered keys and are named singularly.
  //
  // businesshour is one word in teams but two in session resource
  //
  // resources in /view takes an array not an object
  //
  // identityDomain in resources the root of views/:id/cases is an object with numbered keys but
  // when it is nested in organization it is an object in an array
  //

  exports['default'] = function () {
    var _this = this;

    // Helper functions
    function arrayToObjectWithNumberedKeys(source) {
      var indexKey = arguments.length <= 1 || arguments[1] === undefined ? 'id' : arguments[1];

      var object = {};

      if (indexKey) {
        source.forEach(function (item) {
          return object[item[indexKey]] = item;
        });
      } else {
        (function () {
          var pos = 1;
          source.forEach(function (item) {
            object[pos] = item;
            pos++;
          });
        })();
      }

      return object;
    }

    this.passthrough('http://api.segment.io/**');

    // Endpoints
    this.get('/api/v1/locales/1/strings', function (db) {
      return _frontendCpMirageFixturesEnUsStrings['default'][0];
    });

    this.get('/api/v1/locales/1', function () {
      return {
        status: 200,
        data: {
          id: 1,
          locale: 'en-us',
          name: 'English (United States)',
          native_name: 'English (United States)',
          region: 'US',
          native_region: 'United States',
          script: '',
          variant: '',
          direction: 'LTR',
          is_enabled: true,
          created_at: '2015-05-28T14:12:59Z',
          updated_at: '2015-05-28T14:12:59Z',
          resource_type: 'locale'
        },
        resource: 'locale'
      };
    });

    this.get('/api/v1/users/:id/events', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var events = db.events;
      if (since) {
        events = events.filter(function (event) {
          return (0, _moment['default'])(event.created_at).isAfter(_moment['default'].unix(since));
        });
      } else if (until) {
        events = events.filter(function (event) {
          return (0, _moment['default'])(event.created_at).isBefore(_moment['default'].unix(until));
        });
      }
      return {
        data: events,
        resource: 'event',
        status: 200,
        total_count: db.events.length
      };
    });

    this.post('/api/v1/users', function (db, req) {
      var data = JSON.parse(req.requestBody);
      data.resource_type = 'user';
      data.tags = [];
      var user = db.users.insert(data);
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: user,
        resource: user.resource_type
      });
    });

    this.post('/api/v1/identities/emails', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');

      data.resource_type = 'identity_email';
      var user = db.users.find(data.user_id);
      var identity = db['identity-emails'].insert(data);
      db.users.update(user.id, { emails: [identity].concat(user.emails) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/identities/twitter', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');
      data.resource_type = 'identity_twitter';
      var user = db.users.find(req.params.user_id);
      var identity = db['identity-twitters'].insert(data);
      db.users.update(user.id, { twitter: [identity].concat(user.twitter) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });
    this.post('/api/v1/identities/phones', function (db, req) {
      var data = JSON.parse(req.requestBody);
      Reflect.deleteProperty(data, 'parent_id');
      Reflect.deleteProperty(data, 'parentType');
      data.resource_type = 'identity_phone';
      var user = db.users.find(data.user_id);
      var identity = db['identity-phones'].insert(data);
      db.users.update(user.id, { phones: [identity].concat(user.phones) });
      return {
        status: 200,
        data: identity,
        resource: identity.resource_type
      };
    });

    this.put('/api/v1/identities/emails/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-emails'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_email'
      };
    });

    this.put('/api/v1/identities/emails/:id/send_verification_email', function (db, req) {
      return {
        status: 200,
        notifications: [{
          type: 'INFO',
          message: 'An email has been sent to your email id',
          sticky: false
        }]
      };
    });

    this.post('/api/v1/identities/emails/:id/send_validation_email', function () {
      return { status: 200 };
    });

    this.put('/api/v1/identities/twitter/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-twitters'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_twitter'
      };
    });

    this.put('/api/v1/identities/phones/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-phones'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_phone'
      };
    });

    this.put('/api/v1/identities/facebook/:id', function (db, req) {
      var id = req.params.id;
      var attrs = JSON.parse(req.requestBody);
      var record = db['identity-facebooks'].update(id, attrs);

      return {
        status: 200,
        data: record,
        resource: 'identity_facebook'
      };
    });

    this['delete']('/api/v1/identities/emails/:id', function (db, req) {
      db['identity-emails'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/twitter/:id', function (db, req) {
      db['identity-twitters'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/phones/:id', function (db, req) {
      db['identity-phones'].remove(req.params.id);
      return { status: 200 };
    });

    this['delete']('/api/v1/identities/facebook/:id', function (db, req) {
      db['identity-facebooks'].remove(req.params.id);
      return { status: 200 };
    });

    this.get('/api/v1/roles', function (db) {
      return {
        status: 200,
        data: db.roles,
        resource: 'role',
        offset: 0,
        limit: 10,
        total_count: db.roles.length
      };
    });

    this.post('/api/v1/roles', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var role = db.roles.insert(data);

      role = db.roles.update(role.id, {
        id: role.id + 5, // first 5 ids are reserved for system roles
        resource_type: 'role'
      });

      Reflect.deleteProperty(role, 'permissions');

      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: role,
        resource: role.resource_type
      });
    });

    this.put('/api/v1/roles/:id', function (db, req) {
      var data = JSON.parse(req.requestBody);
      data.resource_type = 'role';
      var role = db.roles.update(parseInt(req.params.id, 10), data);
      Reflect.deleteProperty(role, 'permissions');

      return new _emberCliMirage['default'].Response(200, {}, {
        status: 200,
        data: role,
        resource: role.resource_type
      });
    });

    this['delete']('/api/v1/roles/:id', function (db, req) {
      db.roles.remove(parseInt(req.params.id, 10));

      return new _emberCliMirage['default'].Response(200, {}, {
        status: 200
      });
    });

    this.put('/api/v1/roles/:id/permissions', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var role = db.roles.find(parseInt(req.params.id, 10));

      db.permissions.clear();

      Object.keys(data.permission).forEach(function (name) {
        db.permissions.insert({ name: name, role: role, value: data.permission[name] === 1 });
      });

      return new _emberCliMirage['default'].Response(200, {}, {
        status: 200
      });
    });

    this.get('/api/v1/roles/:id', function (db, request) {
      var role = db.roles.find(request.params.id);
      Reflect.deleteProperty(role, 'permissions');

      return {
        status: 200,
        data: role,
        resource: 'role'
      };
    });

    this.get('/api/v1/roles/:id/permissions', function (db) {
      return {
        status: 200,
        data: db.permissions,
        resource: 'permission',
        offset: 0,
        limit: 10,
        total_count: db.permissions.length
      };
    });

    this.post('/admin/index.php', function (db) {
      return {
        status: 200,
        data: {
          is_user: false
        }
      };
    });

    this.get('/api/v1/organizations', function (db) {
      return {
        status: 200,
        data: db.organizations,
        resource: 'organization',
        total_count: db.organizations.length
      };
    });

    this.post('/api/v1/organizations', function (db, req) {
      var data = JSON.parse(req.requestBody);
      data.resource_type = 'organization';
      data.tags = [];
      data.custom_fields = [];
      var domains = [data.domains].map(function (domain) {
        return db['identity-domains'].insert({ domain: domain, resource_type: 'identity_domain', is_primary: true });
      });
      data.domains = domains.mapBy('id');
      var organization = db.organizations.insert(data);
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: organization,
        resource: data.resource_type,
        resources: {
          identity_domain: arrayToObjectWithNumberedKeys(domains)
        }
      });
    });

    this.get('/api/v1/views/:id', function (db, req) {
      var view = db.views.find(req.params.id);

      if (view.columns) {
        view.columns.forEach(function (column) {
          Reflect.deleteProperty(column, 'id');
        });
      }

      var predicateCollections = db['predicate-collections'].find(view.predicate_collections.map(function (e) {
        return e.id;
      })).map(function (e) {
        return { uuid: e.uuid, operator: e.operator, propositions: e.propositions, resource_type: e.resource_type };
      });

      return {
        data: view,
        resource: 'view',
        status: 200,
        resources: {
          predicate_collection: arrayToObjectWithNumberedKeys(predicateCollections, 'uuid')
        }
      };
    });

    this.get('/api/v1/views', function (db) {
      var views = db.views;

      if (views) {
        views.forEach(function (view) {
          if (view.columns) {
            view.columns.forEach(function (column) {
              Reflect.deleteProperty(column, 'id');
            });
          }
        });
      }

      var predicateCollections = db['predicate-collections'].map(function (e) {
        return { uuid: e.uuid, operator: e.operator, propositions: e.propositions, resource_type: e.resource_type };
      });

      return {
        data: views,
        limit: 10,
        offset: 0,
        resource: 'view',
        resources: {
          predicate_collection: arrayToObjectWithNumberedKeys(predicateCollections, 'uuid')
        },
        status: 200,
        total_count: db.views.length
      };
    });

    this.post('/api/v1/views', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var columnsResponseData = [];

      requestData.columns = requestData.columns.forEach(function (column) {
        columnsResponseData.push({
          name: column,
          resource_type: 'column'
        });
      });

      requestData.predicate_collections = requestData.predicate_collections.map(function (collection) {
        var propositions = collection.map(function (proposition) {
          return db.propositions.insert({
            field: proposition.field,
            operator: proposition.operator.key,
            value: proposition.value,
            resource_type: 'proposition'
          });
        });

        var uuid = _emberCliMirage.faker.random.uuid();
        db['predicate-collections'].insert({
          id: uuid,
          operator: 'OR',
          uuid: uuid,
          propositions: propositions,
          resource_type: 'predicate_collection'
        });

        return {
          id: uuid,
          resource_type: 'predicate_collection'
        };
      });

      if (requestData.team_ids) {
        requestData.visibility_to_teams = requestData.team_ids.map(function (id) {
          return { id: id, resource_type: 'team' };
        });
      }
      Reflect.deleteProperty(requestData, 'team_ids');
      requestData.resource_type = 'view';
      var responseData = db.views.insert(requestData);
      var predicateCollections = db['predicate-collections'].map(function (e) {
        return { uuid: e.uuid, operator: e.operator, propositions: e.propositions, resource_type: 'predicate_collection' };
      });

      var payload = {
        status: 201,
        data: responseData,
        resource: 'view',
        resources: {
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          predicate_collection: arrayToObjectWithNumberedKeys(predicateCollections, 'uuid'),
          organization_field: arrayToObjectWithNumberedKeys(db['organization-fields']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/credentials', function () {
      return {
        status: 200,
        data: {
          realtime_app_key: null,
          realtime_chat_app_key: null
        },
        resource: 'credential',
        resources: {}
      };
    });

    this.get('/api/v1/views/definition', function (db) {
      return {
        data: db.definitions,
        resource: 'definition',
        status: 200,
        total_count: db.definitions.length
      };
    });

    this.get('/api/v1/views/columns', function (db) {
      return {
        data: db.columns,
        status: 200,
        resource: 'column',
        total_count: db.columns.length
      };
    });

    this.get('/api/v1/views/counts', function (db) {
      return {
        data: [],
        status: 200,
        resource: 'view-count',
        total_count: 0
      };
    });

    this.put('/api/v1/base/profile/password', function (db, request) {
      var split = request.requestBody.split('=');
      var newPassword = split[2];
      var oldPassword = split[1].split('&')[0];

      if (oldPassword === newPassword) {
        return new _emberCliMirage['default'].Response(400, {}, {
          status: 400,
          errors: [{
            code: 'FIELD_INVALID',
            parameter: 'new_password',
            message: 'The value of the field is invalid',
            more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+FIELD_INVALID'
          }],
          notifications: [{
            type: 'ERROR',
            message: 'You cannot reuse an old password, please specify a new password',
            sticky: false
          }]
        });
      }

      var session = db.sessions[0];
      return {
        status: 200,
        session_id: session.id
      };
    });

    this.get('/api/v1/session', function (db, request) {
      // otp@kayako.com : setup
      if (request.requestHeaders.Authorization === 'Basic b3RwQGtheWFrby5jb206c2V0dXA=') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'OTP_EXPECTED',
            message: 'To complete logging in you need to provide the one-time password'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new _emberCliMirage['default'].Response(403, {}, response);
      }

      // reset@kayako.com : longpass
      if (request.requestHeaders.Authorization === 'Basic cmVzZXRAa2F5YWtvLmNvbTpsb25ncGFzcw==') {
        var response = {
          data: {},
          status: 403,
          errors: [{
            code: 'CREDENTIAL_EXPIRED',
            message: 'The credential (e.g. password) is valid but has expired'
          }],
          auth_token: 'PsAH0Jx27MrhLGiDelvlkGOo8olKL6AyEWdvwK665kjjxuUwMJun6ZyHZ9Z'
        };
        return new _emberCliMirage['default'].Response(403, {}, response);
      }

      var session = db.sessions[0];
      var user = session.user;
      if (request.requestHeaders['X-OTP']) {
        if (request.requestHeaders['X-OTP'] === '666') {
          return new _emberCliMirage['default'].Response(401, {}, {
            status: 401,
            errors: [{
              code: 'AUTHENTICATION_FAILED',
              message: 'Used authentication credentials are invalid or signature verification failed',
              more_info: 'http://wiki.kayako.com/display/DEV/REST+v1+-+AUTHENTICATION_FAILED'
            }]
          });
        }

        return {
          session_id: session.id,
          status: 200
        };
      }

      return {
        status: 200,
        data: session,
        resource: 'session',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(user.emails),
          identity_phone: arrayToObjectWithNumberedKeys(user.phones),
          identity_twitter: arrayToObjectWithNumberedKeys(user.twitter),
          identity_facebook: arrayToObjectWithNumberedKeys(user.facebook),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(user.teams),
          user: arrayToObjectWithNumberedKeys([user]),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/teams', function (db) {
      return {
        status: 200,
        data: db.teams,
        resource: 'team',
        offset: 0,
        limit: 10,
        total_count: db.teams.length
      };
    });

    this.get('/api/v1/teams/:id/members', function () {
      return {
        status: 200,
        data: [],
        resource: 'user',
        offset: 0,
        limit: 10,
        total_count: 0
      };
    });

    this.get('/api/v1/teams/:id', function (db, req) {
      return {
        status: 200,
        data: db.teams.find(req.params.id),
        resource: 'team'
      };
    });

    this.get('/api/v1/users', function (db, req) {
      var offset = parseInt(req.queryParams.offset || 0, 10);
      var limit = parseInt(req.queryParams.limit, 10);
      var users = db.users.slice(offset, offset + limit);

      return {
        status: 200,
        data: users,
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.emails);
          }, [])),
          identity_twitter: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.twitter);
          }, [])),
          identity_phone: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.phones);
          }, [])),
          identity_facebook: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.facebook);
          }, [])),
          role: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat([u.role]);
          }, [])),
          team: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.teams);
          }, [])),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: users.length
      };
    });

    this.get('/api/v1/users/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db.users.find(id),
        resource: 'user',
        limit: 10,
        offset: 0,
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        total_count: db.users.length
      };
    });

    this.get('/api/v1/users/:id/cases', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'case',
        limit: 10,
        offset: 0,
        resources: {},
        total_count: 0
      };
    });

    this.get('/api/v1/users/:id/notes', function (db, request) {
      return {
        status: 200,
        data: [],
        resource: 'note'
      };
    });

    this['delete']('/api/v1/session', function () {
      return {
        status: 200
      };
    });

    this.post('/api/v1/base/password/reset', function () {
      return {
        status: 200,
        auth_token: 'yh5wFffnVzOi5IyYr1aMwojpcRJw0FGid3S9r5iDumvLsPI0fRWBl4VfTEpPkodWwUvLlQXr3zJkfTxC'
      };
    });

    this.get('/api/v1/cases/forms/:id', function (db, request) {
      var id = request.params.id;

      return {
        status: 200,
        data: db['case-forms'].find(id),
        resource: 'case_form',
        resources: {}
      };
    });

    this.get('/api/v1/cases/forms', function (db) {
      return {
        data: db['case-forms'],
        resource: 'case_form',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale: arrayToObjectWithNumberedKeys(db.locales)
        },
        status: 200,
        total_count: db['case-forms'].length
      };
    });

    this.post('/api/v1/cases/forms', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['case-forms'].insert(requestData);
      responseData.is_enabled = true;

      responseData.resource_type = 'case_form';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/cases/forms/default', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var caseForm = db['case-forms'].find(requestData.form_id);
      caseForm.is_default = true;

      var responseData = db['case-forms'].update(requestData.form_id, caseForm);

      responseData.resource_type = 'case_form';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.put('/api/v1/cases/forms/:id', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['case-forms'].update(request.params.id, requestData);

      responseData.resource_type = 'case_form';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_form',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this['delete']('/api/v1/cases/forms/:id', function (db, request) {
      db['case-forms'].remove(request.params.id);

      var payload = {
        status: 200
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.get('/api/v1/cases/channels', function (db, request) {
      return {
        status: 200,
        data: db.channels,
        resource: 'channel',
        resources: {
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes)
        }
      };
    });

    this.get('/api/v1/views/:id/cases', function (db, request) {
      var cases = db.cases;
      var _request$queryParams = request.queryParams;
      var orderByColumn = _request$queryParams.order_by_column;
      var orderBy = _request$queryParams.order_by;
      var limit = _request$queryParams.limit;
      var offset = _request$queryParams.offset;

      limit = parseInt(limit || 1000000, 10);
      offset = parseInt(offset || 0, 10);

      if (orderByColumn === 'caseid') {
        orderByColumn = 'id';
      }

      if (orderBy && orderByColumn) {
        if (orderBy === 'asc') {
          cases = cases.sort(function (a, b) {
            return _ember['default'].compare(a[orderByColumn], b[orderByColumn]);
          });
        } else if (orderBy === 'desc') {
          cases = cases.sort(function (a, b) {
            return -_ember['default'].compare(a[orderByColumn], b[orderByColumn]);
          });
        }
      }
      var paginatedCases = cases.slice(offset, offset + limit);

      return {
        status: 200,
        data: paginatedCases,
        resource: 'case',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          locale: db.locales,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields'])
        },
        offset: offset,
        limit: limit,
        total_count: db.cases.length
      };
    });

    this.get('/api/v1/cases/:id/posts', function (db) {
      return {
        data: db.posts,
        limit: 10,
        resource: 'post',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          attachments: arrayToObjectWithNumberedKeys(db.attachments),
          case_message: arrayToObjectWithNumberedKeys(db['case-messages']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_phone: arrayToObjectWithNumberedKeys(db['identity-phones']),
          locale: arrayToObjectWithNumberedKeys(db.locales),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          message_recipient: arrayToObjectWithNumberedKeys(db['message-recipients']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          role: arrayToObjectWithNumberedKeys(db.roles),
          user: arrayToObjectWithNumberedKeys(db.users)
        },
        status: 200,
        total_count: db.posts.length
      };
    });

    this.get('/api/v1/cases/:case_id/posts/:post_id', function (db, req) {
      var post = db.posts.find(req.params.post_id);

      return {
        status: 200,
        data: post,
        resource: 'post',
        resources: {}
      };
    });

    this.put('/api/v1/cases', function (db, request) {
      return {
        status: 200,
        total_count: 1
      };
    });

    this.post('/api/v1/cases', function (db, request) {
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        resource: 'case',
        data: {
          id: 123,
          resource_type: 'case',
          created_at: '2015-09-28T14:12:59Z',
          updated_at: '2015-09-28T14:12:59Z'
        },
        resources: {}
      });
    });

    this.put('/api/v1/cases/:id/trash', function (db, req) {
      return {
        status: 200,
        resource: 'case',
        data: db.cases.update(req.params.id, { state: 'TRASH' })
      };
    });

    this.put('/api/v1/cases/:id/restore', function (db, req) {
      return {
        status: 200,
        resource: 'case',
        data: db.cases.update(req.params.id, { state: 'ACTIVE' })
      };
    });

    this.put('/api/v1/cases/:id', function (db, req) {
      var body = JSON.parse(req.requestBody);
      var tags = String(body.tags).split(',');
      Reflect.deleteProperty(body, 'tags');
      tags.forEach(function (tag) {
        if (!db.tags.where({ name: tag })[0]) {
          db.tags.insert({ name: tag });
        }
      });
      var targetCase = db.cases.update(req.params.id, body);
      Reflect.deleteProperty(targetCase, 'reply_channels');
      return {
        status: 200,
        resource: 'case',
        data: targetCase
      };
    });

    this.get('/api/v1/cases/:id', function (db, request) {
      if (isNaN(request.params.id)) {
        throw Error('Caught by a wild card!');
      }
      var id = parseInt(request.params.id);
      var theCase = db.cases.find(id);
      return {
        status: 200,
        data: theCase,
        resource: 'case',
        resources: {
          locale: db.locales,
          brand: arrayToObjectWithNumberedKeys(db.brands),
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          channel: arrayToObjectWithNumberedKeys(db.channels),
          role: arrayToObjectWithNumberedKeys(db.roles),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          organization: arrayToObjectWithNumberedKeys(db.organizations),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          user: arrayToObjectWithNumberedKeys(db.users),
          team: arrayToObjectWithNumberedKeys(db.teams),
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          sla: arrayToObjectWithNumberedKeys(db.slas),
          tag: arrayToObjectWithNumberedKeys(db.tags),
          case_field: arrayToObjectWithNumberedKeys(db['case-fields']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/cases/:id/notes', function (db) {
      return db.casesnotes[0];
    });

    this.post('/api/v1/cases/:id/notes', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var targetCase = db.cases.update(req.params.id, { has_notes: true });
      var post = _this.create('post', {
        contents: data.contents,
        'case': targetCase,
        creator: targetCase.creator
      });
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: {
          post: { id: post.id, resource_type: 'post' },
          'case': { id: targetCase.id, resource_type: 'case' },
          resource_type: 'case_note'
        },
        resource: 'case_note',
        resources: {
          post: arrayToObjectWithNumberedKeys([post]),
          'case': arrayToObjectWithNumberedKeys([targetCase])
        }
      });
    });

    this.get('/api/v1/cases/:id/messages', function (db) {
      return {
        data: [],
        limit: 10,
        offset: 0,
        resource: 'case_message',
        status: 200,
        total_count: 0
      };
    });

    this.get('/api/v1/messages/:id', function (db, req) {
      var message = db.messages.find(req.params.id);
      if (message) {
        return { status: 200, data: message, resource: 'case_message' };
      } else {
        return { status: 404 };
      }
    });

    this.get('/api/v1/cases/:id/activities', function (db, request) {
      var since = request.queryParams.since;
      var until = request.queryParams.until;

      var activities = db.activities;
      if (since) {
        activities = activities.filter(function (activity) {
          return (0, _moment['default'])(activity.created_at).isAfter(_moment['default'].unix(since));
        });
      } else if (until) {
        activities = activities.filter(function (activity) {
          return (0, _moment['default'])(activity.created_at).isBefore(_moment['default'].unix(until));
        });
      }
      return {
        data: activities,
        resource: 'activity',
        status: 200,
        total_count: db.activities.length
      };
    });

    this.get('/api/v1/cases/:id/reply/channels', function (db) {
      return {
        data: db.channels,
        resource: 'channel',
        resources: {
          brand: arrayToObjectWithNumberedKeys(db.brands),
          facebook_account: arrayToObjectWithNumberedKeys(db['facebook-accounts']),
          facebook_page: arrayToObjectWithNumberedKeys(db['facebook-pages']),
          locale: db.locales,
          mailbox: arrayToObjectWithNumberedKeys(db.mailboxes),
          twitter_account: arrayToObjectWithNumberedKeys(db['twitter-accounts'])
        },
        status: 200,
        total_count: db.channels.length
      };
    });

    this.post('/api/v1/cases/:id/reply', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var targetCase = db.cases.find(req.params.id);

      var newPost = _this.create('post', { contents: data.contents, 'case': targetCase, creator: targetCase.creator });
      var note = {};
      if (JSON.parse(req.requestBody).channel === 'NOTE') {
        newPost.original = { id: 6, resource_type: 'note' };
        note = {
          6: {
            id: 6,
            body_text: 'test',
            color: 'YELLOW',
            attachments: [],
            download_all: null,
            created_at: '2015-11-26T13:52:27Z',
            updated_at: '2015-11-26T13:52:27Z',
            resource_type: 'note',
            resource_url: 'http://novo/api/v1/cases/1/notes/10'
          }
        };
      }

      var posts = [newPost];
      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: {
          posts: posts.map(function (p) {
            return { id: p.id, resource_type: 'post' };
          }),
          'case': { id: targetCase.id, resource_type: 'case' },
          resource_type: 'case_reply'
        },
        resource: 'case_reply',
        resources: {
          note: note,
          post: arrayToObjectWithNumberedKeys(posts),
          'case': arrayToObjectWithNumberedKeys([targetCase])
        }
      });
    });

    this.get('/api/v1/cases/priorities', function (db) {
      return {
        data: db['case-priorities'],
        resource: 'case_priority',
        resources: {
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        status: 200,
        total_count: db['case-priorities'].length
      };
    });

    this.post('/api/v1/cases/priorities', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.put('/api/v1/cases/priorities/:id', function (db, request) {
      return {};
    });

    this['delete']('/api/v1/cases/priorities/:id', function () {
      return { status: 200 };
    });

    this.get('/api/v1/cases/types', function (db) {
      return {
        data: db['case-types'],
        resource: 'case_type',
        status: 200,
        total_count: db['case-types'].length
      };
    });

    this.post('/api/v1/cases/statuses', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.get('/api/v1/cases/statuses', function (db) {
      return {
        data: db['case-statuses'],
        resource: 'case_status',
        resources: {
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        },
        status: 200,
        total_count: db['case-statuses'].length
      };
    });

    this.get('/api/v1/cases/statuses/:id', function (db, request) {
      return {
        data: db['case-statuses'].find(request.params.id),
        resource: 'case_status',
        status: 200
      };
    });

    this.put('/api/v1/cases/statuses/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var updatedStatus = db['case-statuses'].update(id, requestData);

      return {
        data: updatedStatus,
        resource: 'case_status',
        status: 200
      };
    });

    this['delete']('/api/v1/cases/statuses/:id', function () {
      return { status: 200 };
    });

    this.put('/api/v1/cases/types/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var updatedType = db['case-types'].update(id, requestData);

      return {
        data: updatedType,
        resource: 'case_type',
        status: 200
      };
    });

    this['delete']('/api/v1/cases/types/:id', function () {
      return { status: 200 };
    });

    this.post('/api/v1/cases/types', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.get('/api/v1/cases/reply/channels', function (db) {
      return db.casesreplychannels[0];
    });

    this.get('/api/v1/cases/:id/channels', function (db) {
      return {
        data: [],
        resource: 'channel',
        status: 200
      };
    });

    this.get('/api/v1/autocomplete/emails', function (db, request) {
      return {
        status: 200,
        data: db['identity-autocomplete-emails'],
        resource: 'identity',
        resources: {
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          identity_domain: arrayToObjectWithNumberedKeys(db['identity-domains']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields']),
          organization: arrayToObjectWithNumberedKeys(db.organizations)
        },
        total_count: 10
      };
    });

    this.get('/api/v1/autocomplete/tags', function (db, request) {
      var tagName = request.queryParams.name;
      var tags = db.tags.filter(function (tag) {
        return tag.name.indexOf(tagName) !== -1;
      });
      return {
        status: 200,
        data: tags,
        resource: 'tag',
        total_count: tags.length
      };
    });

    this.get('/api/v1/cases/macros', function (db) {
      return {
        status: 200,
        data: db.macros,
        resource: 'macro',
        resources: {
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: db.macros.length
      };
    });

    this.post('/api/v1/cases/macros', function (db, req) {
      var data = JSON.parse(req.requestBody);
      var macro = db.macros.insert(data);
      macro.resource_type = 'macro';

      return new _emberCliMirage['default'].Response(201, {}, {
        status: 201,
        data: macro,
        id: macro.id,
        resource: macro.resource_type,

        resources: {
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        }
      });
    });

    this.get('/api/v1/cases/macros/:id', function (db, req) {
      var macro = db.macros.find(req.params.id);
      macro.resource_type = 'macro';

      return new _emberCliMirage['default'].Response(200, {}, {
        status: 200,
        id: macro.id,
        data: macro,
        resource: 'macro',

        resources: {
          case_status: arrayToObjectWithNumberedKeys(db['case-statuses']),
          case_priority: arrayToObjectWithNumberedKeys(db['case-priorities']),
          case_type: arrayToObjectWithNumberedKeys(db['case-types']),
          identity_email: arrayToObjectWithNumberedKeys(db['identity-emails']),
          role: arrayToObjectWithNumberedKeys(db.roles),
          team: arrayToObjectWithNumberedKeys(db.teams),
          user: arrayToObjectWithNumberedKeys(db.users),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        }
      });
    });

    this.get('/api/v1/cases/ratings/recent', function (db) {
      return {
        status: 200,
        data: [],
        resource: 'macro',
        total_count: 0
      };
    });

    this.get('/api/v1/autocomplete/users', function (db, request) {
      var queryString = request.queryParams.name.toLowerCase();
      var users = db.users.filter(function (u) {
        return u.full_name.toLowerCase().indexOf(queryString) > -1;
      });

      return {
        status: 200,
        data: users,
        resource: 'user',
        resources: {
          business_hour: arrayToObjectWithNumberedKeys(db['business-hours']),
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          identity_email: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.emails);
          }, [])),
          identity_twitter: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.twitter);
          }, [])),
          identity_phone: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.phones);
          }, [])),
          identity_facebook: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.facebook);
          }, [])),
          role: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat([u.role]);
          }, [])),
          team: arrayToObjectWithNumberedKeys(users.reduce(function (ary, u) {
            return ary.concat(u.teams);
          }, [])),
          user_field: arrayToObjectWithNumberedKeys(db['user-fields'])
        },
        total_count: users.length
      };
    });

    this.get('/api/v1/search', function (db, request) {
      var queryString = request.queryParams.query.toLowerCase();
      var users = db.users.filter(function (u) {
        return u.full_name.toLowerCase().indexOf(queryString) > -1;
      });
      var cases = db.cases.filter(function (c) {
        return c.subject.toLowerCase().indexOf(queryString) > -1;
      });

      var userResults = users.map(function (u) {
        return {
          id: u.id,
          title: u.full_name,
          relevance: 0.089531735,
          resource: 'user',
          snippet: u.full_name.replace(request.queryParams.query, '<em>' + request.queryParams.query + '</em>')
        };
      });

      var caseResults = cases.map(function (c) {
        return {
          id: c.id,
          title: c.subject,
          relevance: 0.089531735,
          resource: 'case'
        };
      });

      return {
        status: 200,
        data: [{
          results: caseResults,
          resource: 'case',
          total_count: caseResults.length
        }, {
          results: userResults,
          resource: 'user',
          total_count: userResults.length
        }],
        resource: 'object',
        total_count: caseResults.length + userResults.length
      };
    });

    this.get('/api/v1/plan', function (db) {
      return {
        status: 200,
        data: db.plans[0],
        resource: 'plan',
        resources: []
      };
    });

    this.get('/api/v1/plans', function (db) {
      return {
        status: 200,
        data: db.plans,
        resource: 'plan',
        resources: []
      };
    });

    this.get('/api/v1/cases/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    this.get('/api/v1/users/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    this.get('/api/v1/organizations/:caseid/tags', function (db) {
      return {
        status: 200,
        data: db.tags,
        resource: 'tag',
        resources: []
      };
    });

    //User Fields
    this.post('/api/v1/users/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      requestData.resource_type = 'user_field';
      var responseData = db['user-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 201,
        data: responseData,
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/users/fields', function (db) {
      return {
        status: 200,
        data: db['user-fields'],
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.get('/api/v1/tags/:id', function (db, req) {
      var tag = db.tags.find(req.params.id);
      return {
        status: 200,
        data: {
          name: tag.name,
          resource_type: 'tag'
        },
        resource: 'tag'
      };
    });

    this.put('/api/v1/users/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      requestData.resource_type = 'user_field';
      var responseData = db['user-fields'].update(id, requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 200,
        data: responseData,
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/users/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['user-fields'].find(request.params.id),
        resource: 'user_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/users/fields/:id', function (db, request) {
      var id = request.params.id;

      db['user-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/users/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/users/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/users/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });
    //User Fields End

    //Case Fields
    this.post('/api/v1/cases/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }
      requestData.resource_type = 'case_field';
      var responseData = db['case-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 201,
        data: responseData,
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/cases/fields', function (db) {
      return {
        status: 200,
        data: db['case-fields'],
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.put('/api/v1/cases/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      requestData.resource_type = 'case_field';
      var responseData = db['case-fields'].update(id, requestData);

      Reflect.deleteProperty(responseData, 'priorities');

      responseData.customer_titles.forEach(function (customerTitle) {
        db['locale-fields'].remove(customerTitle.id);
      });
      responseData.descriptions.forEach(function (description) {
        db['locale-fields'].remove(description.id);
      });
      responseData.options.forEach(function (option) {
        //old locale-fields for the values on this option will be orphaned but
        //not referenced here
        db['field-options'].remove(option.id);
      });

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 200,
        data: responseData,
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/cases/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['case-fields'].find(request.params.id),
        resource: 'case_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/cases/fields/:id', function (db, request) {
      var id = request.params.id;

      db['case-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/cases/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/cases/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/cases/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });

    this.put('api/v1/cases/fields/reorder', function () {
      return { status: 200 };
    });
    //Case Fields End

    //Organisation Fields
    this.post('/api/v1/organizations/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      requestData.resource_type = 'organization_field';
      var responseData = db['organization-fields'].insert(requestData);

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 201,
        data: responseData,
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/organizations/fields', function (db) {
      return {
        status: 200,
        data: db['organization-fields'],
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this.put('/api/v1/organizations/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);

      var newCustomerTitles = [];
      var customerTitles = requestData.customer_titles;
      Reflect.deleteProperty(requestData, 'customer_titles');
      if (customerTitles) {
        customerTitles.forEach(function (customerTitle) {
          var newField = db['locale-fields'].insert(customerTitle);
          newCustomerTitles.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newDescriptions = [];
      var descriptions = requestData.descriptions;
      Reflect.deleteProperty(requestData, 'descriptions');
      if (descriptions) {
        descriptions.forEach(function (description) {
          var newField = db['locale-fields'].insert(description);
          newDescriptions.push({ id: newField.id, resource_type: 'locale_field' });
        });
      }

      var newOptions = [];
      var options = requestData.options;
      Reflect.deleteProperty(requestData, 'options');
      if (options) {
        options.forEach(function (option) {
          var newValues = [];
          option.values.forEach(function (value) {
            var newField = db['locale-fields'].insert(value);
            newValues.push({ id: newField.id, resource_type: 'locale_field' });
          });
          option.values = newValues;
          var newField = db['field-options'].insert(option);
          newOptions.push({ id: newField.id, resource_type: 'field_option' });
        });
      }

      requestData.resource_type = 'organization_field';
      var responseData = db['organization-fields'].update(id, requestData);

      responseData.customer_titles.forEach(function (customerTitle) {
        db['locale-fields'].remove(customerTitle.id);
      });
      responseData.descriptions.forEach(function (description) {
        db['locale-fields'].remove(description.id);
      });
      responseData.options.forEach(function (option) {
        //old locale-fields for the values on this option will be orphaned but
        //not referenced here
        db['field-options'].remove(option.id);
      });

      responseData.customer_titles = newCustomerTitles;
      responseData.descriptions = newDescriptions;
      responseData.options = newOptions;

      var payload = {
        status: 200,
        data: responseData,
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
      return payload;
    });

    this.get('/api/v1/organizations/fields/:id', function (db, request) {
      return {
        status: 200,
        data: db['organization-fields'].find(request.params.id),
        resource: 'organization_field',
        resources: {
          field_option: arrayToObjectWithNumberedKeys(db['field-options']),
          locale_field: arrayToObjectWithNumberedKeys(db['locale-fields'])
        }
      };
    });

    this['delete']('/api/v1/organizations/fields/:id', function (db, request) {
      var id = request.params.id;

      db['organization-fields'].remove(id);

      return {
        status: 200
      };
    });

    this.post('/api/v1/organizations/fields/options', function (db) {
      return new _emberCliMirage['default'].Response(201, {}, '');
    });

    this.post('/api/v1/organizations/fields/:id/options', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].insert(requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.put('/api/v1/organizations/fields/:id/options/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['field-options'].update(id, requestData);

      responseData.resource_type = 'field_option';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'field_option',
        resources: []
      };
      return payload;
    });
    //Organisation Fields End

    this.get('/api/v1/locales', function (db) {
      return {
        status: 200,
        data: db.locales,
        resource: 'locale',
        total_count: db.locales.length
      };
    });

    this.put('/api/v1/locale/fields/:id', function (db, request) {
      var id = request.params.id;
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['locale-fields'].update(id, requestData);

      responseData.resource_type = 'locale_field';
      var payload = {
        status: 200,
        data: responseData,
        resource: 'locale_field',
        resources: []
      };
      return new _emberCliMirage['default'].Response(200, {}, payload);
    });

    this.post('/api/v1/locale/fields', function (db, request) {
      var requestData = JSON.parse(request.requestBody);
      var responseData = db['locale-fields'].insert(requestData);

      responseData.resource_type = 'locale_field';
      var payload = {
        status: 201,
        data: responseData,
        resource: 'locale_field',
        resources: []
      };
      return new _emberCliMirage['default'].Response(201, {}, payload);
    });

    this.get('/api/v1/mails', function (db, req) {
      var _req$queryParams = req.queryParams;
      var limit = _req$queryParams.limit;
      var offset = _req$queryParams.offset;

      limit = parseInt(limit || 1000000, 10);
      offset = parseInt(offset || 0, 10);
      var mails = undefined;

      if (req.queryParams.is_suspended) {
        mails = mails = db.mails.where({ is_suspended: true });
      } else {
        mails = mails = db.mails.where({ is_suspended: false });
      }

      if (req.queryParams.order_by_column) {
        mails = mails.sortBy(req.queryParams.order_by_column);
        if (req.queryParams.order_by === 'desc') {
          mails.reverse();
        }
      }

      var totalCount = mails.length;
      mails = mails.slice(offset, offset + limit);

      return {
        status: 200,
        data: mails,
        resource: 'mail',
        offset: offset,
        limit: limit,
        total_count: totalCount
      };
    });

    this.put('/api/v1/mails/:id', function (db, req) {
      var newState = db.mails.update(req.params.id, JSON.parse(req.requestBody));
      return {
        status: 200,
        data: newState
      };
    });

    this['delete']('/api/v1/mails', function (db, req) {
      db.mails.remove(req.queryParams.ids);
      return { status: 200 };
    });

    this['delete']('/api/v1/mails/:id', function (db, req) {
      db.mails.remove(req.params.id);
      return { status: 200 };
    });

    this.put('/api/v1/cases/statuses/reorder', function (db, req) {
      return { status: 200 };
    });

    this.put('/api/v1/cases/priorities/reorder', function (db, req) {
      return { status: 200 };
    });

    this.post('/api/v1/core/file', function (db) {
      return {
        status: 201,
        data: {
          id: 357070,
          name: 'test-file-name.txt',
          size: 2,
          content_type: 'text/x-php',
          content_url: 'https://support.kayakodev.net/api/v1/files/357070/content',
          created_at: '2016-01-27T13:10:43Z',
          expiry_at: '2016-01-28T01:10:43Z',
          resource_type: 'file',
          resource_url: 'https://support.kayakodev.net/api/v1/files/357070'
        },
        resource: 'file'
      };
    });

    this.get('/api/v1/businesshours', function (db) {
      return {
        status: 200,
        data: db.businesshours,
        resource: 'business_hour',
        resources: {
          businesshour_holiday: {}
        }
      };
    });

    this.get('/api/v1/businesshours/:id', function (db, req) {
      var id = req.params.id;
      return {
        status: 200,
        data: db.businesshours.find(id),
        resource: 'business_hour',
        resources: {}
      };
    });
  };
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/activity', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    actor: null,
    verb: 'create',
    summary: '<@https://brewfictus.kayako.com/user/1|Phoebe Todd> created <https://brewfictus.kayako.com/case/view/1|Atmosphere Coffee, Inc annual maintenance>',
    actions: [],
    object: null,
    object_actor: null,
    location: null,
    place: null,
    target: null,
    result: null,
    in_reply_to: null,
    participant: null,
    portal: 'API',
    weight: 0.8,
    ip_address: null,
    created_at: _emberCliMirage.faker.date.recent,
    resource_type: 'activity'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/assignee', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    team: {}
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/attachment', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    alt: null,
    content_id: null,
    created_at: _emberCliMirage.faker.date.recent,
    height: 494,
    id: function id(i) {
      return i + 1;
    },
    name: function name(i) {
      return 'screenshot_' + (i + 1) + '.png';
    },
    resource_type: 'attachment',
    resource_url: 'http://novo/api/v1/cases/20/messages/33/attachments/3',
    size: 10000 + _emberCliMirage.faker.random.number(10000000),
    thumbnails: [{ url: 'http://fillmurray.com/' + _emberCliMirage.faker.random.arrayElement([100, 200, 300]) + '/' + _emberCliMirage.faker.random.arrayElement([100, 200, 300]) }],
    type: 'image/png',
    url: 'http://fillmurray.com/400/100',
    url_download: 'http://novo/api/v1/cases/20/messages/33/attachments/3/download',
    width: 1220
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/brand', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_enabled: true,
    locale: {},
    name: 'Default',
    resource_type: 'brand',
    created_at: '2015-08-05T06:13:59Z',
    resource_url: 'http://novo/api/index.php?/v1/brands/1',
    updated_at: '2015-08-05T06:13:59Z',
    url: null
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/business-hour', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Default Business Hours',
    zones: {
      monday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      tuesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      wednesday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      thursday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      friday: [9, 10, 11, 12, 13, 14, 15, 16, 17, 18],
      saturday: [],
      sunday: []
    },
    holidays: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'business_hour',
    resource_url: 'http://novo/api/index.php?/v1/businesshours/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/businesshours', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('Normal Guys', 'Tier 2', 'Support', 'Human Resources'),
    zones: {
      monday: [1, 2, 3],
      tuesday: [],
      wednesday: [],
      thursday: [],
      friday: [],
      saturday: [],
      sunday: []
    },
    holidays: [],
    is_default: false,
    created_at: '2012-01-24T22:09:30Z',
    updated_at: '2016-02-03T00:57:01Z',
    resource_type: 'business_hour',
    resource_url: 'https://support.kayakostage.net/api/v1/businesshours/5'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-field-value', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: {},
    value: _emberCliMirage.faker.random.title,
    resource_type: 'case_field_value'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: function fielduuid(i) {
      return 'fake-xxx-' + i;
    },
    type: _emberCliMirage.faker.list.cycle('SUBJECT', 'MESSAGE', 'PRIORITY', 'STATUS', 'TYPE', 'TEAM', 'ASSIGNEE', 'TEXT', 'TEXTAREA', 'CHECKBOX', 'RADIO', 'SELECT', 'DATE', 'NUMERIC'),
    key: _emberCliMirage.faker.list.cycle('subject', 'message', 'priority', 'status', 'type', 'team', 'assignee', 'text', 'textarea', 'checkbox', 'radio', 'select', 'date', 'numeric'),
    title: _emberCliMirage.faker.list.cycle('Subject', 'Message', 'Priority', 'Status', 'Type', 'Team', 'Assignee', 'Text', 'Textarea', 'Checkbox', 'Radio', 'Select', 'Date', 'Numeric'),
    is_required_for_agents: true,
    is_required_on_resolution: true,
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_field',
    resource_url: 'http://novo/api/index.php?/v1/cases/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-form', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Internet Related Issue',
    is_visible_to_customers: true,
    customer_title: 'Internet Related Issue',
    description: null,
    is_enabled: true,
    is_default: false,
    sort_order: 1,
    fields: [],
    brand: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_form',
    resource_url: 'http://novo/api/index.php?/v1/cases/forms/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-message', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: function uuid(i) {
      return 'case-message-' + i;
    },
    subject: function subject(i) {
      return 'Subject ' + i;
    },
    body_text: 'Lorem ipsum dolor sit amet',
    body_html: '<em>Lorem ipsum</em> dolor sit amet',
    recipients: [],
    fullname: 'John Doe',
    email: function email(i) {
      return 'email' + i + '@gmail.com';
    },
    creator: null,
    identity: null,
    mailbox: null,
    attachments: [],
    location: null,

    creation_mode: null,
    locale: null,
    response_time: null,

    // Parent field
    'case': null,

    post_type: 'message',
    resource_type: 'case-message'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-priority', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('Low', 'Normal', 'High', 'Urgent'),
    level: _emberCliMirage.faker.list.cycle(1, 2, 3, 4),
    color: _emberCliMirage.faker.list.cycle('green', 'yellow', 'orange', 'red'),
    locales: [],
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_priority',
    resource_url: 'http://novo/api/index.php?/v1/cases/priorities/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-status', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('New', 'Open', 'Pending', 'Completed', 'Closed'),
    color: null,
    visibility: 'PUBLIC',
    type: _emberCliMirage.faker.list.cycle('NEW', 'OPEN', 'PENDING', 'COMPLETED', 'CLOSED'),
    locales: [],
    is_sla_active: true,
    is_deleted: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_status',
    resource_url: function resource_url(i) {
      return 'http://novo/api/index.php?/v1/cases/statuses/' + i;
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case-type', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    label: _emberCliMirage.faker.list.cycle('Question', 'Task', 'Problem', 'Incident'),
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'case_type',
    resource_url: 'http://novo/api/index.php?/v1/cases/types/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/case', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    subject: function subject(i) {
      return 'ERS Audit ' + (i + 1);
    },
    mask_id: function mask_id(i) {
      return 'DXX-' + (i + 1) + '-' + _emberCliMirage.faker.random.number();
    },
    portal: null,
    source_channel: {},
    requester: {},
    creator: {},
    identity: {},
    assignee: null,
    brand: null,
    status: {},
    priority: null,
    type: null,
    sla: null,
    sla_metrics: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    last_replier: null,
    last_replier_identity: null,
    creation_mode: 'WEB',
    state: 'ACTIVE',
    post_count: 3,
    has_notes: false,
    pinned_notes_count: 0,
    has_attachments: false,
    rating: null,
    rating_status: 'UNOFFERED',
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    last_agent_activity_at: null,
    last_assigned_at: null,
    last_closed_at: null,
    last_opened_at: null,
    last_pending_at: null,
    last_customer_activity_at: '2015-07-09T15:36:10Z',
    resource_type: 'case',
    resource_url: 'http://novo/api/index.php?/v1/cases/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/channel', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: _emberCliMirage.faker.random.uuid,
    account: null,
    type: 'MAILBOX',
    resource_type: 'channel'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/column', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: _emberCliMirage.faker.list.cycle('caseid', 'subject', 'casestatusid', 'assigneeteamid', 'requesterid', 'rating', 'sla', 'priority', 'last_replier', 'updatedat', 'lastcreatedat'),
    resource_type: 'column'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/definition', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: _emberCliMirage.faker.list.cycle('cases.subject', 'cases.casestatusid', 'cases.casetypeid'),
    type: function type(i) {
      if (this.field(i) === 'cases.subject') {
        return 'string';
      } else {
        return 'numeric';
      }
    },
    sub_type: function sub_type(i) {
      return this.type(i) === 'string' ? '' : 'integer';
    },
    operators: function operators(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return ['string_contains', 'string_does_not_contain'];
        case 'cases.casestatusid':
          return ['comparison_equalto', 'comparison_not_equalto', 'comparison_lessthan', 'comparison_greaterthan'];
        case 'cases.casetypeid':
          return ['comparison_equalto', 'comparison_not_equalto'];
      }
    },
    values: function values(i) {
      switch (this.field(i)) {
        case 'cases.subject':
          return '';
        case 'cases.casestatusid':
          return {
            1: 'New',
            2: 'Open',
            3: 'Pending',
            4: 'Completed',
            5: 'Closed'
          };
        case 'cases.casetypeid':
          return {
            1: 'Question',
            2: 'Task',
            3: 'Problem',
            4: 'Incident'
          };
      }
    },
    resource_type: 'definition'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/event', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: function uuid(i) {
      return 'event-' + (i + 1);
    },
    subject: _emberCliMirage.faker.lorem.sentence,
    body: _emberCliMirage.faker.lorem.sentence,
    channel: 'event',
    participants: [],
    avatar_url: '',
    creator: { id: 5, resource_type: 'user' },
    properties: {},
    attachments: [],
    download_all: null,
    triggered_at: '2015-08-27T11:02:47Z',
    resource_type: 'event',
    contents: _emberCliMirage.faker.lorem.sentence,
    created_at: _emberCliMirage.faker.date.recent
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/facebook-account', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    account_id: _emberCliMirage.faker.random.number,
    is_enabled: true,
    resource_type: 'facebook_account',
    resource_url: 'http://novo/api/index.php?/v1/facebook/account/1',
    title: 'John Mathew',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/facebook-page', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: 'fake-XXXX-default',
    is_enabled: true,
    page_id: _emberCliMirage.faker.random.number,
    resource_type: 'facebook_page',
    resource_url: 'http://novo/api/index.php?/v1/facebook/page/1',
    route_messages: true,
    route_posts: true,
    title: 'HelpDesk Management System',
    created_at: '2015-08-05T06:13:59Z',
    updated_at: '2015-08-05T06:13:59Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/feature', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    code: _emberCliMirage.faker.random.number,
    name: 'Collaborators',
    description: 'People who may log in as a team member'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/field-option', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.list.cycle('fake-XXXX-1', 'fake-XXXX-2', 'fake-XXXX-3', 'fake-XXXX-4', 'fake-XXXX-5'),
    values: [],
    tag: _emberCliMirage.faker.list.cycle('internet', 'connectivity', 'yes'),
    sort_order: _emberCliMirage.faker.random.number,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'field_option'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-autocomplete-email', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    identity: {
      id: function id(i) {
        return i + 1;
      },
      resource_type: 'identity_email'
    },
    parent: {
      id: function id(i) {
        return i + 1;
      },
      resource_type: 'user'
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-domain', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_primary: true,
    domain: 'brew.com',
    is_validated: false,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'identity_domain',
    resource_url: 'http://novo/api/index.php?/v1/identities/domains/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-email', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    is_primary: false,
    email: _emberCliMirage.faker.internet.email,
    is_notification_enabled: _emberCliMirage.faker.random.boolean,
    is_validated: _emberCliMirage.faker.random.boolean,
    // created_at: '2015-07-23T13:36:12Z',
    // updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'identity_email',
    resource_url: 'http://novo/api/index.php?/v1/identities/emails/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-facebook', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    facebook_id: _emberCliMirage.faker.random.number,
    user_name: _emberCliMirage.faker.internet.userName,
    full_name: _emberCliMirage.faker.name.findName,
    is_validated: true,
    email: function email(i) {
      return 'email' + i + '@example.com';
    },
    bio: 'Lorem ipsum dolor sit amet',
    birth_date: '03/09/1986',
    website: 'http://foo.bar',
    profile_url: function profile_url(i) {
      return 'http://facebook.com/user' + i;
    },
    locale: 'en',
    resource_type: 'identity_facebook'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-phone', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    created_at: '2015-08-27T11:02:47Z',
    is_primary: false,
    is_validated: false,
    number: function number(i) {
      return '+44 ' + (4928581320 + i);
    },
    resource_type: 'identity_phone',
    resource_url: 'http://novo/api/v1/identities/phones/4',
    type: 'NONE',
    updated_at: '2015-08-27T11:02:47Z'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/identity-twitter', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    twitter_id: _emberCliMirage.faker.random.number,
    full_name: 'Robert J Cole',
    screen_name: _emberCliMirage.faker.internet.userName,
    follower_count: 512,
    description: 'WAT',
    url: function url(i) {
      return 'http://twitter.com/twitterhandler' + i;
    },
    location: 'Denver, CO',
    profile_image_url: 'http://www.fillmurray.com/g/250/250',
    locale: 'en',
    resource_type: 'identity_twitter',
    is_validated: true
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/limit', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'Collaborators',
    limit: _emberCliMirage.faker.random.number
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/locale-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    locale: _emberCliMirage.faker.list.cycle('en-us', 'de', 'en-gb'),
    translation: 'locale specific text here',
    created_at: _emberCliMirage.faker.date.recent,
    updated_at: _emberCliMirage.faker.date.recent,
    resource_type: 'locale_field',
    resource_url: 'https://brewfictus.kayako.com/api/v1/cases/fields/1/locales/2'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/locale', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    id: function id(i) {
      return i + 1;
    },
    locale: 'en-us',
    name: 'English',
    native_name: 'English',
    region: '',
    nativeRegion: '',
    script: '',
    variant: '',
    direction: 'LTR',
    is_enabled: true,
    is_public: true,
    is_localised: true,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'locale',
    resource_url: 'http://novo/api/index.php?/v1/locales/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro-assignee', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    type: null,
    team: null,
    agent: null,
    resource_type: 'macro_assignee'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro-visibility', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    type: 'ALL',
    team: null,
    resource_type: 'macro_visibility'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/macro', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: '00 Support \\ 00 Welcome',
    reply_type: null,
    reply_contents: 'Hello, thank you for contacting Kayako.',
    agent: {},
    assignee: {},
    properties: {},
    visibility: {},
    tags: [],
    usage_count: 0,
    last_used_at: null,
    created_at: null,
    updated_at: null,
    type: null,
    resource_type: 'macro',
    resource_url: 'http://support.kayakodev.net/api/v1/cases/macros/499'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/mail', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    from: _emberCliMirage.faker.internet.email,
    to: _emberCliMirage.faker.internet.email,
    sender: null, // is this mandatory?
    subject: _emberCliMirage.faker.lorem.sentence,
    source: null, // I don't know what this field means
    text: _emberCliMirage.faker.lorem.paragraphs,
    html: _emberCliMirage.faker.lorem.paragraphs,
    is_suspended: false,
    status: 'RECEIVED',
    suspension_code: null,
    reason: null, // I don't know what this field means
    message_id: null, // I don't know what this field means
    size: '123', // I don't know that this field means
    mailbox: null, // I don't know that this field means
    'case': null, // I don't know that this field means
    case_post: null, // I don't know that this field means
    time_taken: null, // I don't know that this field means
    completed_at: null, // I don't know that this field means
    created_at: function created_at() {
      return new Date().toISOString();
    },
    resource_type: 'mail'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/mailbox', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    uuid: '02a60873-8118-453c-8258-8f44029e657d',
    service: 'STANDARD',
    encryption: 'NONE',
    address: 'support@brewfictus.com',
    prefix: null,
    smtp_type: null,
    host: null,
    port: null,
    username: null,
    preserve_mails: false,
    brand: null, // polymorphic belongsTo
    is_default: false,
    is_enabled: true,
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'mailbox',
    resource_url: 'http://novo/api/index.php?/v1/mailboxes/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/message-recipient', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    identity: { id: 2, resource_type: 'identity_email' },
    name: 'Caryn Pryor',
    resource_type: 'message_recipient',
    type: 'TO'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/metadata', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    custom: null,
    system: null,
    resource_type: 'metadata'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/organization-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.random.uuid,
    type: _emberCliMirage.faker.list.cycle('TEXT', 'TEXTAREA', 'CHECKBOX'),
    key: function key(i) {
      return 'key ' + i;
    },
    title: 'title here',
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'organization_field',
    resource_url: 'http://novo/api/index.php?/v1/organization/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/organization', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'Brew',
    is_shared: false,
    domains: [],
    phone: [],
    notes: [],
    pinned_notes_count: 0,
    tags: [],
    custom_fields: [],
    followers: [],
    metadata: {},
    created_at: '2015-07-09T15:36:10Z',
    updated_at: '2015-07-09T15:36:10Z',
    resource_type: 'organization',
    resource_url: 'http://novo/api/index.php?/v1/organizations/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/permission', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: 'admin.random',
    value: true,
    resource_type: 'permission'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/plan', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    seat_count: 15,
    expiry_at: _emberCliMirage.faker.date.future,
    limits: [],
    features: [],
    resource_type: 'plan'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    attachments: [],
    contents: _emberCliMirage.faker.lorem.sentence,
    created_at: _emberCliMirage.faker.date.recent,
    creator: { id: 5, resource_type: 'user' },
    download_all: null,
    identity: { id: 5, resource_type: 'identity_email' },
    original: null,
    resource_type: 'post',
    resource_url: 'http://novo/api/v1/cases/1/posts/1',
    sequence: function sequence(i) {
      return i + 1;
    }, // Sequence needs to be contiguous, used for sorting infinite scroll
    subject: 'Atmosphere Coffee, Inc annual maintenance',
    updated_at: '2015-08-27T11:02:47Z',
    uuid: function uuid(i) {
      return 'post-' + (i + 1);
    },
    'case': null
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/predicate-collection', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {

  var lastSequence = undefined,
      lastUUID = undefined;
  function uniqueUUIDPerModel(sequence) {
    if (lastSequence !== sequence) {
      lastUUID = _emberCliMirage.faker.random.uuid();
      lastSequence = sequence;
    }
    return lastUUID;
  }

  exports['default'] = _emberCliMirage['default'].Factory.extend({
    id: uniqueUUIDPerModel,
    uuid: uniqueUUIDPerModel,
    operator: 'OR',
    propositions: [],
    resource_type: 'predicate_collection'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/proposition', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: 'cases.assigneeteamid',
    operator: 'comparison_equalto',
    resource_type: 'proposition',
    value: function value(i) {
      return 'value' + i;
    }
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Administrator',
    type: 'ADMIN', // Can be either ADMIN, AGENT, COLLABORATOR or CUSTOMER.
    ip_restriction: null,
    password_expires_in_days: _emberCliMirage.faker.random.number,
    is_two_factor_required: false,
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'role',
    resource_url: 'http://novo/api/index.php?/v1/roles/1',
    is_system: true
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/session', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    id: 'pPW6tnOyJG6TmWCVea175d1bfc5dbf073a89ffeb6a2a198c61aae941Aqc7ahmzw8a',
    portal: 'API',
    ip_address: _emberCliMirage.faker.internet.ip,
    user_agent: _emberCliMirage.faker.internet.userAgent,
    user: {},
    status: 'ONLINE',
    created_at: '2015-07-23T16:32:01Z',
    last_activity_at: '2015-07-23T16:32:22Z',
    resource_type: 'session'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/sla-metric', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('FIRST_REPLY_TIME', 'RESOLUTION_TIME', 'NEXT_REPLY_TIME'),
    state: _emberCliMirage.faker.list.cycle('ACTIVE', 'COMPLETED'),
    is_breached: _emberCliMirage.faker.random.boolean,
    target_in_seconds: _emberCliMirage.faker.random.number
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/sla', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: 'Regular support and sales tickets',
    resource_type: 'sla'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    name: _emberCliMirage.faker.list.cycle('solution', 'status'),
    resource_type: 'tag'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/team', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    title: _emberCliMirage.faker.list.cycle('Sales', 'Support', 'Finance', 'Human Resources'),
    businesshour: {},
    followers: [],
    created_at: '2015-07-23T13:36:12Z',
    updated_at: '2015-07-23T13:36:12Z',
    resource_type: 'team',
    resource_url: 'http://novo/api/index.php?/v1/teams/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/twitter-account', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    account_id: '3155953718',
    brand: {},
    created_at: '2015-08-05T06:13:59Z',
    is_enabled: true,
    is_public: true,
    resource_type: 'twitter_account',
    resource_url: 'http://novo/api/index.php?/v1/twitter/account/1',
    route_favorites: true,
    route_mentions: true,
    route_messages: true,
    screen_name: 'englisha938',
    updated_at: '2015-08-05T06:13:59Z',
    uuid: 'b63e731d-c88d-4d4a-ab1c-566f5c9edf7d'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/type', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    resource_type: 'case_type'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user-field-value', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    field: {
      id: _emberCliMirage.faker.random.number,
      resource_type: 'user_field'
    },
    value: '',
    resource_type: 'user_field_value'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user-field', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    fielduuid: _emberCliMirage.faker.random.uuid,
    type: _emberCliMirage.faker.list.cycle('TEXT', 'TEXTAREA', 'CHECKBOX'),
    key: function key(i) {
      return 'key ' + i;
    },
    title: 'title here',
    is_visible_to_customers: true,
    customer_titles: [],
    is_customer_editable: true,
    is_required_for_customers: true,
    descriptions: [],
    is_enabled: true,
    regular_expression: null,
    sort_order: 1,
    is_system: true,
    options: [],
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T12:09:20Z',
    resource_type: 'user_field',
    resource_url: 'http://novo/api/index.php?/v1/users/fields/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    full_name: function full_name() {
      return _emberCliMirage.faker.name.firstName() + ' Murray';
    },
    designation: null,
    is_enabled: _emberCliMirage.faker.random.boolean,
    role: null, // Note: This is a mandatory field fo being able to log in with a user
    // avatar: 'http://novo/index.php?/avatar/get/5dadfafe-ef84-5db9-91f5-d617d0f4e58b',
    avatar: 'http://fillmurray.com/100/100',
    teams: [],
    emails: [],
    phones: [],
    twitter: [],
    facebook: [],
    external_identities: [],
    custom_fields: [],
    metadata: {},
    tags: [],
    notes: [],
    pinned_notes_count: 0,
    followers: [],
    locale: 'en-us',
    time_zone: null,
    time_zone_offset: null,
    greeting: null,
    signature: null,
    status_message: null,
    access_level: null,
    password_updated_at: '2015-07-23T12:09:20Z',
    avatar_updated_at: null,
    activity_at: '2015-07-23T16:32:01Z',
    visited_at: '2015-07-23T16:32:01Z',
    created_at: '2015-07-23T12:09:20Z',
    updated_at: '2015-07-23T16:32:01Z',
    resource_type: 'user',
    resource_url: 'http://novo/api/index.php?/v1/users/1'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/factories/view', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage['default'].Factory.extend({
    agent: null,
    case_count: -1,
    case_count_accuracy: 'UNKNOWN',
    columns: [],
    created_at: '2015-07-21T14:24:09Z',
    is_default: true,
    is_enabled: true,
    order_by: 'ASC',
    order_by_column: 'id',
    predicate_collections: [],
    resource_type: 'view',
    resource_url: 'http://novo/api/index.php?/v1/views/1',
    title: 'Inbox',
    updated_at: '2015-07-21T14:24:09Z',
    visibility_to_teams: [],
    visibility_type: 'ALL'
  });
});
/*eslint-disable camelcase*/
define('frontend-cp/mirage/fixtures/en-us-strings', ['exports', 'npm:lodash', 'frontend-cp/locales/en-us/admin', 'frontend-cp/locales/en-us/cases', 'frontend-cp/locales/en-us/feed', 'frontend-cp/locales/en-us/generic', 'frontend-cp/locales/en-us/login', 'frontend-cp/locales/en-us/organisation', 'frontend-cp/locales/en-us/search', 'frontend-cp/locales/en-us/users'], function (exports, _npmLodash, _frontendCpLocalesEnUsAdmin, _frontendCpLocalesEnUsCases, _frontendCpLocalesEnUsFeed, _frontendCpLocalesEnUsGeneric, _frontendCpLocalesEnUsLogin, _frontendCpLocalesEnUsOrganisation, _frontendCpLocalesEnUsSearch, _frontendCpLocalesEnUsUsers) {

  var locales = {
    admin: _frontendCpLocalesEnUsAdmin['default'],
    cases: _frontendCpLocalesEnUsCases['default'],
    feed: _frontendCpLocalesEnUsFeed['default'],
    generic: _frontendCpLocalesEnUsGeneric['default'],
    login: _frontendCpLocalesEnUsLogin['default'],
    organisation: _frontendCpLocalesEnUsOrganisation['default'],
    search: _frontendCpLocalesEnUsSearch['default'],
    users: _frontendCpLocalesEnUsUsers['default']
  };

  exports['default'] = [{
    status: 200,
    data: _npmLodash['default'].flatten(Object.keys(locales).map(function (fileKey) {
      return Object.keys(locales[fileKey]).map(function (stringKey) {
        return {
          id: 'frontend.api.' + fileKey + '.' + stringKey,
          value: locales[fileKey][stringKey],
          resource_type: 'locale_string'
        };
      });
    })),
    resource: 'locale_string'
  }];
});
/* eslint-disable camelcase */
define('frontend-cp/mirage/scenarios/default', ['exports'], function (exports) {
  /*eslint-disable camelcase*/

  exports['default'] = function (server) {
    var businesshour = server.create('business-hour', { title: 'Default Business Hours' });
    var teams = server.createList('team', 4, { businesshour: businesshour });
    var roles = [server.create('role', { title: 'Admin', type: 'ADMIN', id: 1 }), server.create('role', { title: 'Agent', type: 'AGENT', id: 2 }), server.create('role', { title: 'Collaborator', type: 'COLLABORATOR', id: 3 }), server.create('role', { title: 'Customer', type: 'CUSTOMER', id: 4 })];
    var role = roles[0];

    var emails = [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { email: 'altenative@gmail.com', is_validated: true }), server.create('identity-email', { email: 'newemail@example.com', is_validated: false })];
    var phones = [server.create('identity-phone', { is_primary: true }), server.create('identity-phone')];
    var twitter = [server.create('identity-twitter', { is_primary: true }), server.create('identity-twitter')];
    var facebook = [server.create('identity-facebook', { is_primary: true }), server.create('identity-facebook')];
    var custom_fields = server.createList('user-field-value', 3);
    var metadata = server.create('metadata');
    var defaultUser = server.create('user', {
      custom_fields: custom_fields,
      role: role,
      teams: teams,
      emails: emails,
      phones: phones,
      twitter: twitter,
      facebook: facebook,
      metadata: metadata
    });

    server.create('session', { user: defaultUser });

    server.create('permission', { name: 'admin.team.userfields.view' });
    server.create('permission', { name: 'admin.team.view' });

    server.create('user', {
      role: role,
      emails: [server.create('identity-email', { is_primary: true, is_validated: true }), server.create('identity-email', { is_primary: false, is_validated: false })],
      phones: [
        // server.create('identity-phone', { is_primary: true }),
        // server.create('identity-phone')
      ],
      twitter: [
        // server.create('identity-twitter', { is_primary: true }),
        // server.create('identity-twitter')
      ],
      facebook: [
        // server.create('identity-facebook', { is_primary: true }),
        // server.create('identity-facebook')
      ]
    });

    var identityEmail = server.create('identity-email');

    var textFieldTitle = 'text field';
    var textAreaFieldTitle = 'text area field';
    var radioFieldTitle = 'radio field';
    var normalSelectFieldTitle = 'normal select field';
    var checkboxFieldTitle = 'checkbox field';
    var numericFieldTitle = 'numeric field';
    var decimalFieldTitle = 'decimal field';
    var fileFieldTitle = 'file field';
    var yesNoFieldTitle = 'yes no field';
    var cascadingSelectFieldTitle = 'cascading select field';
    var dateFieldTitle = 'date field';
    var regexFieldTitle = 'regex field';

    //CASE FIELDS
    var textCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var radioCaseOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: radioCaseOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var selectCaseOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: selectCaseOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var checkboxCaseOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxCaseOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectCaseOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });
    server.create('case-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectCaseOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleCaseField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleCaseField = server.create('locale-field', { locale: 'en-us' });
    server.create('case-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleCaseField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleCaseField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //CASE FIELDS END

    //USER FIELDS
    var textCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var radioUserOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: radioUserOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var selectUserOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: selectUserOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var checkboxUserOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxUserOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectUserOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleUserField.id, resource_type: 'locale_field' }]
    });
    server.create('user-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectUserOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleUserField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleUserField = server.create('locale-field', { locale: 'en-us' });
    server.create('user-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleUserField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleUserField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //USER FIELDS END

    //ORGANIZATION FIELDS
    var textCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var textDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: textFieldTitle,
      type: 'TEXT',
      customer_titles: [{ id: textCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var textAreaCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var textAreaDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: textAreaFieldTitle,
      type: 'TEXTAREA',
      customer_titles: [{ id: textAreaCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: textAreaDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var radioCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var radioOrganizationOption = server.create('field-option', {
      values: [{ id: radioOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: radioFieldTitle,
      type: 'RADIO',
      customer_titles: [{ id: radioCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: radioDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: radioOrganizationOption.id, resource_type: 'field_option' }]
    });

    var selectCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var selectOrganizationOption = server.create('field-option', {
      values: [{ id: selectOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: normalSelectFieldTitle,
      type: 'SELECT',
      customer_titles: [{ id: selectCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: selectDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: selectOrganizationOption.id, resource_type: 'field_option' }]
    });

    var checkboxCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var checkboxOrganizationOption = server.create('field-option', {
      values: [{ id: checkboxOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: checkboxFieldTitle,
      type: 'CHECKBOX',
      customer_titles: [{ id: checkboxCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: checkboxDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: checkboxOrganizationOption.id, resource_type: 'field_option' }]
    });

    var numericCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var numericDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: numericFieldTitle,
      type: 'NUMERIC',
      customer_titles: [{ id: numericCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: numericDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var decimalCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var decimalDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: decimalFieldTitle,
      type: 'DECIMAL',
      customer_titles: [{ id: decimalCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: decimalDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var fileCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var fileDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: fileFieldTitle,
      type: 'FILE',
      customer_titles: [{ id: fileCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: fileDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var yesNoCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var yesNoDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: yesNoFieldTitle,
      type: 'YESNO',
      customer_titles: [{ id: yesNoCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: yesNoDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var cascadingSelectCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var cascadingSelectOrganizationOption = server.create('field-option', {
      values: [{ id: cascadingSelectOptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });
    server.create('organization-field', {
      title: cascadingSelectFieldTitle,
      type: 'CASCADINGSELECT',
      customer_titles: [{ id: cascadingSelectCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: cascadingSelectDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      options: [{ id: cascadingSelectOrganizationOption.id, resource_type: 'field_option' }]
    });

    var dateCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var dateDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: dateFieldTitle,
      type: 'DATE',
      customer_titles: [{ id: dateCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: dateDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }]
    });

    var regexCustomerTitleLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    var regexDescriptionLocaleOrganizationField = server.create('locale-field', { locale: 'en-us' });
    server.create('organization-field', {
      title: regexFieldTitle,
      type: 'REGEX',
      customer_titles: [{ id: regexCustomerTitleLocaleOrganizationField.id, resource_type: 'locale_field' }],
      descriptions: [{ id: regexDescriptionLocaleOrganizationField.id, resource_type: 'locale_field' }],
      regular_expression: '^(.*)'
    });
    //ORGANIZATION FIELDS END

    //ids have to match the predicate_collection ids.
    //Current ids are cycling and must match in
    //both predicate_collections and predicate_collection.
    //They are uuids in real life but i have changed them to integers
    //to make things easier.
    var columns = server.createList('column', 5);
    var propositions = server.createList('proposition', 2);
    var predicateCollections = server.createList('predicate-collection', 2, { propositions: propositions });

    server.create('view', {
      is_default: true,
      columns: columns,
      predicate_collections: predicateCollections
    });

    server.createList('definition', 3);

    var sourceChannel = server.create('channel');
    var assigneeAgent = defaultUser;
    var assigneeTeam = teams[0];
    var locale = server.create('locale', {
      id: 1,
      locale: 'en-us'
    });
    server.create('locale', {
      id: 2,
      locale: 'fr-ca'
    });
    server.create('locale', {
      id: 3,
      locale: 'de'
    });
    var brand = server.create('brand', { locale: locale });
    var statuses = server.createList('case-status', 5);
    var status = statuses[0];
    var priority = server.create('case-priority');
    var type = server.create('type');
    var sla = server.create('sla');
    var slaMetrics = server.createList('sla-metric', 3);
    var tags = server.createList('tag', 2);

    var caseFields = server.createList('case-field', 14);

    // TODO make mirage work with relationships embedded into model fragments
    // const customFields = server.createList('case-field-value', 2, { field: caseFields[0], value: '' });
    var customFields = [];
    server.createList('case', 4, {
      source_channel: sourceChannel,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    // Case with a non-default status
    server.create('case', {
      id: 5,
      source_channel: sourceChannel,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: statuses[3],
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    server.createList('case', 1, {
      source_channel: null,
      requester: defaultUser,
      creator: defaultUser,
      identity: identityEmail,
      assignee_agent: assigneeAgent,
      assignee_team: assigneeTeam,
      brand: brand,
      status: status,
      priority: priority,
      type: type,
      sla: sla,
      sla_metrics: slaMetrics,
      tags: tags,
      custom_fields: customFields,
      metadata: metadata,
      last_replier: defaultUser,
      last_replier_identity: identityEmail
    });

    var mailbox = server.create('mailbox', { brand: brand });
    server.create('channel', {
      uuid: 1,
      account: mailbox
    });
    server.create('channel', {
      uuid: 2,
      type: 'TWITTER',
      account: server.create('mailbox', {
        uuid: 2,
        screen_name: 'testman',
        address: 'twittertest',
        brand: brand,
        account_id: 123
      })
    });
    server.create('channel', {
      uuid: 3,
      type: 'NOTE'
    });

    var identityDomain = server.create('identity-domain');
    server.create('organization', {
      domains: [identityDomain],
      metadata: metadata
    });

    server.createList('identity-email', 10);
    server.createList('case-priority', 3);
    server.createList('case-type', 4, {
      resource_url: function resource_url(i) {
        return 'http://novo/api/index.php?/v1/cases/types/' + ++i;
      }
    });
    server.create('case-form', {
      fields: caseFields,
      brand: brand
    });

    server.create('facebook-account');
    server.create('twitter-account', {
      brand: brand
    });

    // If possible this endpoint should implement pagination (plus limit) in order to behave
    // as it would in the real world app, to be able to use infinite scroll
    server.createList('post', 30, { creator: defaultUser, identity: identityEmail });
    var attachments = [{
      id: 1,
      resource_type: 'attachment'
    }, {
      id: 2,
      resource_type: 'attachment'
    }];
    server.createList('post', 1, { creator: defaultUser, identity: identityEmail, attachments: attachments });

    server.createList('attachment', 3);

    server.createList('event', 5);
    server.createList('activity', 5);

    server.create('identity-phone');

    server.create('message-recipient', {
      identity: identityEmail
    });

    var userModels = server.createList('user', 20, {
      role: role,
      teams: teams,
      emails: emails,
      custom_fields: custom_fields,
      metadata: metadata
    });

    var identityEmailModels = server.createList('identity-email', 10, {
      email: function email(i) {
        return 'random-email-' + i + '@kayako-unreal.com';
      }
    });

    for (var i = 0; i < 10; i++) {
      server.create('identity-autocomplete-email', {
        identity: {
          id: identityEmailModels[i].id,
          resource_type: 'identity_email'
        },
        parent: {
          id: userModels[i].id,
          resource_type: 'user'
        }
      });
    }

    var limit = server.create('limit', {
      name: 'collaborators',
      limit: 10
    });

    var feature = server.create('feature', {
      code: 3232,
      name: 'collaborators',
      description: 'People who may log in as a team member'
    });

    server.create('plan', {
      limits: [limit],
      features: [feature]
    });

    var macroAssignee = server.create('macro-assignee');
    var macroVisibility = server.create('macro-visibility');

    server.create('macro', {
      agent: defaultUser,
      assignee: macroAssignee,
      visibility: macroVisibility
    });

    server.createList('mail', 5, { status: 'RECEIVED' });
    server.createList('mail', 12, { is_suspended: true, status: 'SUSPENDED', suspension_code: 'SPAM' });

    server.createList('businesshours', 10);
  };
});
define('frontend-cp/mixins/autofocus', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    autofocusFirstField: _ember['default'].on('willInsertElement', function () {
      this.$('input,select,textarea,button,[tabindex]').not('[tabindex="-1"],[disabled]').eq(0).focus();
    })
  });
});
define('frontend-cp/mixins/change-aware-model', ['exports', 'ember', 'npm:lodash', 'ember-data'], function (exports, _ember, _npmLodash, _emberData) {
  var run = _ember['default'].run;

  /*
   * TODO:
   *  - update hasDirtyChanges to use hasDirtyBelongsToRelationship and hasDirtyHasManyRelationship
   *  - hasDirtyHasManyRelationship does not work with async relationships
   *  - create wrapper function for belongTo and hasMany to check the relationship type internally
   *  - Handle recursive checking of fragment arrays
   */

  /*
   * Change Aware Model
   *
   * One place to ask a model if it has changed, or if any of it's relationships have changed
   *
   * public functions:
   *  - cacheRelationships :  used to build a list of relationships whever a model is
   *                          saved/loaded. Normally, you don't have to call this but if
   *                          you make changes to a model but don;t wish to mark it as dirty
   *                          (i.e. setting some defaults), re-calling this function will save
   *                          defaults as initial values
   *
   *  - hasDirtyChanges    :  returns true or false depending on weather or not the model is
   *                          dirty. Includes attributes and relationships and runs recursively down
   *                          through relationships (providing they are have this mixin
   *
   *  - hasDirtyBelongsToRelationship : checks to see if a belongsTo relationship has changed. This is
   *                                    not recursive. If you are checking an async relationship, a promise
   *                                    is returned which resolves to true/false. If it's a synch relationship
   *                                    then true/false is returned immediately
   *
   *  - has DirtyHasManyRelationship  : checks to see if a hasMany relationship has changed. Is fired if any of the
   *                                    relationships are new/deleted/changed. Is not recursive
   *
   *
   *  OPTIONS
   *  Some of our API calls are write only. Some async relationships it doesn't make sense to cache
   *  This can be solved by adding  `noCache: true` to the relationship options definition, e.g.
   *
   *    reply: DS.hasMany('case-reply', { async: true, child: true, noCache: true }),
   */

  exports['default'] = _ember['default'].Mixin.create({
    initialRelationships: {},

    // Lifecycle hooks
    ready: function ready() {
      var _this = this;

      this._super.apply(this, arguments);
      this.readyTimer = run.next(function () {
        //TODO: Try to discover why this must be in a run loop
        // Without the run.next, the async promise resolves to null
        // With run.next, everything resolves perfectly.
        // there's some private API stuff `_updatingRecordArraysLater: true` which might be something?
        _this.cacheRelationships();
        _this.cacheAttrs();
      });
    },

    didUpdate: function didUpdate() {
      run(this, this.cacheRelationships);
    },

    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);
      run.cancel(this.readyTimer);
    },

    // Methods

    // build an array of all relationships whenever the model is loaded
    // so we can check against them to see if any have been added or removed
    getRelationships: function getRelationships() {
      var _this2 = this;

      var relationships = {};
      this.eachRelationship(function (name, meta) {
        if (meta.options.noCache) {
          return;
        }
        var relationship = _this2.get(name);
        relationships[name] = null;

        if (relationship) {
          if (typeof relationship.forEach === 'function') {
            relationships[name] = [];
            relationship.forEach(function (relatedObject) {
              relationships[name].pushObject(relatedObject);
            });
          } else {
            relationships[name] = relationship;
          }
        }
      });
      return relationships;
    },

    cacheRelationships: function cacheRelationships() {
      this.set('initialRelationships', this.getRelationships());
    },

    getAttrs: function getAttrs() {
      var _this3 = this;

      var attrs = {};
      this.eachAttribute(function (name, meta) {
        attrs[name] = _this3.get(name);
      });
      return attrs;
    },

    cacheAttrs: function cacheAttrs() {
      this.set('initialAttrs', this.getAttrs());
    },

    /*
     * Returns a promise if the relationship is async
     */
    hasDirtyBelongsToRelationship: function hasDirtyBelongsToRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];
      var currentRelationship = this.get(relationshipKey);

      if (currentRelationship && typeof currentRelationship.then === 'function') {
        // relationship is async - get both, wait for them to resolve and then compare
        return _ember['default'].RSVP.hash({
          currentRelationship: currentRelationship,
          initialRelationship: initialRelationship
        }).then(function (relationshipHash) {
          return relationshipHash.initialRelationship !== relationshipHash.currentRelationship;
        });
      }

      // undefined and null are equivalent in terms of dirty tracking
      return initialRelationship != currentRelationship; // eslint-disable-line eqeqeq
    },

    hasDirtyHasManyRelationship: function hasDirtyHasManyRelationship(relationshipKey) {
      var initialRelationships = this.get('initialRelationships');
      var initialRelationship = initialRelationships[relationshipKey];

      var currentRelationship = this.get(relationshipKey);

      if (!initialRelationship && currentRelationship) {
        return true;
      }

      if (initialRelationship.length !== currentRelationship.get('length')) {
        return true;
      }

      return currentRelationship.any(function (relationship, index) {
        return relationship !== initialRelationship[index];
      });
    },

    hasDirtyAttribute: function hasDirtyAttribute(attributeName) {
      var changedAttributes = Object.keys(this.changedAttributes());
      return changedAttributes.indexOf(attributeName) !== -1;
    },

    /*
     * Checks model for changed attributes, then
     * checks all model relationships for dirty attributes
     */
    hasDirtyChanges: function hasDirtyChanges() {
      return this.hasChangesToSelf() || this.hasNewOrDirtyRelations() || this.hasDeletedRelationships();
    },

    hasChangesToSelf: function hasChangesToSelf() {
      var _this4 = this;

      var changes = this.changedAttributes();

      // if there is no ID, and the only change is to a sort
      // order, we never want to mark this as dirty
      if (!this.get('id') && changes.sortOrder) {
        Reflect.deleteProperty(changes, 'sortOrder');
      }

      Object.keys(changes).forEach(function (changedAttributeName) {
        var changedAttribute = _this4.get(changedAttributeName);
        var diff = changes[changedAttributeName];

        // Fragment Arrays are not "relationships" so we have to check for equality here
        if (changedAttribute && changedAttribute._isFragment) {
          if (!_this4.get(changedAttributeName).get('hasDirtyAttributes')) {
            Reflect.deleteProperty(changes, changedAttributeName);
            return;
          }
        }

        // undefined/null is equal to "" when editing forms etc.
        if (Array.isArray(diff) && !diff[0] && !diff[1]) {
          Reflect.deleteProperty(changes, changedAttributeName);
          return;
        }
      });

      return !_npmLodash['default'].isEmpty(changes);
    },

    hasNewOrDirtyRelations: function hasNewOrDirtyRelations() {
      var _this5 = this;

      var initialRelationships = this.get('initialRelationships');
      var hasChanges = false;

      this.eachRelationship(function (name, descriptor) {
        if (descriptor.options.noCache) {
          return;
        }
        var relationshipObject = _this5.get(descriptor.key);

        if (descriptor.kind === 'hasMany') {
          relationshipObject.forEach(function (relationshipObj) {
            // only check if the relationship model has the change-aware mixin
            if (relationshipObject && typeof relationshipObj.hasDirtyChanges === 'function' && relationshipObj.hasDirtyChanges()) {
              hasChanges = true;
            }

            //check relation isn't a new addition
            if (initialRelationships[descriptor.key].indexOf(relationshipObj) === -1) {
              hasChanges = true;
            }
          });
        } else if (descriptor.kind === 'belongsTo') {
          var _relationshipObject = _this5.get(descriptor.key);

          // only check if the relationship model has the change-aware mixin
          if (_relationshipObject && typeof _relationshipObject.hasDirtyChanges === 'function') {
            if (_relationshipObject.hasDirtyChanges()) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    },

    hasDeletedRelationships: function hasDeletedRelationships() {
      var _this6 = this;

      var hasChanges = false;
      var initialRelationships = this.get('initialRelationships');

      Object.keys(initialRelationships).forEach(function (relationshipName) {
        if (hasChanges) {
          // we only need one change - exit early if we've found one
          return;
        }

        var currentRelatedObjects = _this6.get(relationshipName);

        if (currentRelatedObjects && typeof currentRelatedObjects.forEach === 'function') {
          // hasMany relationship
          initialRelationships[relationshipName].forEach(function (relatedObject) {
            if (currentRelatedObjects.indexOf(relatedObject) === -1) {
              hasChanges = true;
            }
          });
        } else {
          //belongsTo relationship
          if (currentRelatedObjects instanceof _emberData['default'].PromiseObject) {
            if (currentRelatedObjects.get('content') !== initialRelationships[relationshipName].get('content')) {
              hasChanges = true;
            }
          } else {
            if (currentRelatedObjects !== initialRelationships[relationshipName]) {
              hasChanges = true;
            }
          }
        }
      });

      return hasChanges;
    }
  });
});
define('frontend-cp/mixins/custom-field-serialization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    serializeCustomFields: function serializeCustomFields(customFields, form) {
      var fieldValues = {};
      var formFields = form ? form.hasMany('fields').map(function (field) {
        return field.attr('key');
      }) : [];

      if (!customFields) {
        return fieldValues;
      }

      customFields.forEach(function (customField) {
        var key = customField.record.get('field.key');
        if (!form || formFields.indexOf(key) > -1) {
          // For some reason its possible for the API to get to a state where
          // the resources of the /api/v1/users contains user_fields that aren't
          // present in /api/v1/users/fields, in that case field.key is undefined
          if (key) {
            fieldValues[key] = customField.attr('value');
          } else {
            /*eslint-disable no-console */
            if (console && console.warn) {
              console.warn('Missing custom field key');
            }
            /*eslint-enable no-console */
          }
        }
      });

      return fieldValues;
    }
  });
});
define('frontend-cp/mixins/dirty-aware/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    routeNameOnCancel: null,

    actions: {
      cancel: function cancel() {
        this.transitionToRoute(this.get('routeNameOnCancel'));
      }
    }
  });
});
define('frontend-cp/mixins/dirty-aware/route', ['exports', 'ember'], function (exports, _ember) {
  var isPresent = _ember['default'].isPresent;
  exports['default'] = _ember['default'].Mixin.create({
    rollbackChanges: function rollbackChanges(model) {
      if (model.get('isNew')) {
        model.unloadRecord();
      } else {
        model.rollbackAttributes();
      }
    },

    actions: {
      willTransition: function willTransition(transition) {
        var model = this.controller.get('model');

        if (model.get('hasDirtyAttributes') && isPresent(Object.keys(model.changedAttributes()))) {
          var intl = this.container.lookup('service:intl');
          var translatedConfirmationMessage = intl.findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.rollbackChanges(model);
          } else {
            transition.abort();
          }
        } else if (model.get('isNew')) {
          model.unloadRecord();
        }
      }
    }
  });
});
define('frontend-cp/mixins/remember-route', ['exports', 'ember'], function (exports, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Mixin.create({
    sectionsHistory: service(),
    activate: function activate() {
      this._super.apply(this, arguments);
      this.get('sectionsHistory').store(this.routeName, this.modelFor(this.routeName));
    }
  });
});
define('frontend-cp/mixins/simple-state', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    /**
     * An object tree representing all possible
     * states and their parent/child relationships
     * @type {Object}
     */
    stateMap: null,

    /**
     * The current state as a dot separated list
     * representing the state hierarchy
     * @type {String}
     */
    _currentState: '',

    /**
     * Read-only current state property
     * For most use cases use isInState, used mostly as a property
     * in computed properties to observe when state changes
     * @return {String} current state as a dot separated list representing the state hierarchy
     */
    currentState: _ember['default'].computed('_currentState', function () {
      return this.get('_currentState');
    }),

    /**
     * Sets the current state as a dot separated
     * list representing the desired state hierarchy
     * eg. 'root.session.foo'
     * Throws an error if the state is not available
     * in the stateMap object tree
     * @param {String} state Dot separated string of state hierarchy
     */
    setState: function setState(state) {
      if (this.get('stateMap.' + state)) {
        this.set('_currentState', state);
      } else {
        throw new Error('Invalid state: ' + state);
      }
    },

    /**
     * Returns true if you are in the current state, you must specify the currentState
     * in order force a call to this.get('currentState') in computed properties,
     * otherwise the computed property will not be called.
     * or any of its parent states
     * @param  {String}  state Dot separated string of state hierarchy
     * @param  {String}  currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    isInState: function isInState(state, currentState) {
      if (typeof currentState === 'undefined') {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(state) === 0;
    },

    /**
     * Returns true if the last substate in the state string
     * is the leafState/s
     * @param  {String}  subState     Dot separated string of sub-state
     * @param  {String}  currentState currentState Dot separated string of state hierarchy
     * @return {Boolean}
     */
    endsWithSubState: function endsWithSubState(subState, currentState) {
      if (typeof currentState === 'undefined') {
        throw new Error('currentState is not defined');
      }
      return currentState.indexOf(subState) === currentState.length - subState.length;
    },

    getStateAtLevel: function getStateAtLevel(level, currentState) {
      currentState = currentState || this.get('_currentState');
      return currentState.split('.')[level];
    }
  });
});
define('frontend-cp/models/access-log', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    user: _emberData['default'].belongsTo('user', { async: true }),
    action: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/account', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/action', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    action: _emberData['default'].attr('string'),
    field: _emberData['default'].attr('string'),
    oldValue: _emberData['default'].attr('string'),
    newValue: _emberData['default'].attr('string'),
    oldObject: _emberData['default'].attr(),
    newObject: _emberData['default'].attr()
  });
});
define('frontend-cp/models/activity-location', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    city: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    regionCode: _emberData['default'].attr('string'),
    areaCode: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    netSpeed: _emberData['default'].attr('string'),
    country: _emberData['default'].attr('string'),
    countryCode: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'),
    latitude: _emberData['default'].attr('string'),
    longitude: _emberData['default'].attr('string'),
    metroCode: _emberData['default'].attr('string'),
    isp: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/activity-object', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    prefix: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    fullTitle: _emberData['default'].attr('string'),
    image: _emberData['default'].attr('string'),
    preposition: _emberData['default'].attr('string'),

    // TODO fix when relationship support lands to ember-data.model-fragments
    // original: DS.belongsTo('any', { async: true }),
    originalFragment: _modelFragments['default'].fragment('relationship-fragment'),
    original: _ember['default'].computed('originalFragment.relationshipId', function () {
      return this.store.peekRecord(this.get('originalFragment.relationshipType'), this.get('originalFragment.relationshipId'));
    })
  });
});
define('frontend-cp/models/activity', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    actor: _modelFragments['default'].fragment('activity-object'),
    verb: _emberData['default'].attr('string'),
    summary: _emberData['default'].attr('string'),
    actions: _emberData['default'].hasMany('action'),
    object: _modelFragments['default'].fragment('activity-object'),
    objectActor: _modelFragments['default'].fragment('activity-object'),
    location: _modelFragments['default'].fragment('activity-location'),
    place: _modelFragments['default'].fragment('activity-object'),
    target: _modelFragments['default'].fragment('activity-object'),
    result: _modelFragments['default'].fragment('activity-object'),
    inReplyTo: _modelFragments['default'].fragment('activity-object'),
    participant: _modelFragments['default'].fragment('activity-object'),
    portal: _emberData['default'].attr('string'),
    weight: _emberData['default'].attr('number'),
    ipAddress: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),

    'case': _emberData['default'].belongsTo('case', { async: true }),

    plainTextSummary: _ember['default'].computed('summary', function () {
      return this.get('summary').replace(/<.*?\|(.*?)>/g, '$1');
    })
  });
});
define('frontend-cp/models/any', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/app', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    version: _emberData['default'].attr('string'),
    author: _emberData['default'].attr('string'),
    authorEmail: _emberData['default'].attr('string'),
    shortDescription: _emberData['default'].attr('string'),
    longDescription: _emberData['default'].attr('string'),
    visibility: _emberData['default'].attr('string'),
    installable: _emberData['default'].attr('boolean'),
    installed: _emberData['default'].attr('boolean'),
    smallIcon: _emberData['default'].attr('string'),
    largeIcon: _emberData['default'].attr('string'),
    // categories: TODO what they are?
    defaultLocale: _emberData['default'].attr('string'),
    productVersion: _emberData['default'].attr('string')

    // TODO action: install
    // TODO action: upgrade
    // TODO action: uninstall
  });
});
define('frontend-cp/models/attachment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    width: _emberData['default'].attr('number'), // TODO should exist on attachment within posts/:id
    height: _emberData['default'].attr('number'), // TODO should exist on attachment within posts/:id
    type: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    url: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    urlDownload: _emberData['default'].attr('string'), // TODO should exist on attachment within posts/:id
    thumbnails: _modelFragments['default'].fragmentArray('thumbnail'),
    createdAt: _emberData['default'].attr('date'), // TODO should exist on attachment within posts/:id

    // Virtual parent field
    message: _emberData['default'].belongsTo('case-message', { async: true })
  });
});
define('frontend-cp/models/brand', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    locale: _emberData['default'].belongsTo('locale', { async: false }),
    isEnabled: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/business-hour', ['exports', 'ember-data', 'npm:lodash'], function (exports, _emberData, _npmLodash) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string', { async: false }),
    zones: _emberData['default'].attr({ defaultValue: function defaultValue() {
        return [];
      } }),
    holidays: _emberData['default'].hasMany('businesshour-holiday', { async: false }),
    teams: _emberData['default'].hasMany('team', { async: false }),
    isDefault: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date', { async: false }),
    updatedAt: _emberData['default'].attr('date', { async: false }),

    hasChanges: function hasChanges() {
      var changedAttributes = this.changedAttributes();
      var changedHolidays = this.get('holidays').map(function (h) {
        return h.changedAttributes();
      });
      var zonesChanged = false;
      var holidayChanged = false;

      if (changedAttributes.zones && changedAttributes.zones.length > 1) {
        zonesChanged = !_npmLodash['default'].isEqual(changedAttributes.zones[0], changedAttributes.zones[1]);
        Reflect.deleteProperty(changedAttributes, 'zones');
      }

      changedHolidays.forEach(function (changes) {
        if (changes.openHours && changes.openHours.length > 1) {
          if (!_npmLodash['default'].isEqual(changes.openHours[0], changes.openHours[1])) {
            holidayChanged = true;
          }
          Reflect.deleteProperty(changes, 'openHours');
          if (Object.keys(changes).length > 0) {
            holidayChanged = true;
          }
        }
      });

      return holidayChanged || zonesChanged || Object.keys(changedAttributes).length > 0;
    }
  });
});
define('frontend-cp/models/businesshour-holiday', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('string'),
    openHours: _emberData['default'].attr({ defaultValue: function defaultValue() {
        return [];
      } })
  });
});
define('frontend-cp/models/case-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('case-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('case-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/case-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    fielduuid: _emberData['default'].attr('string'),
    fieldType: _emberData['default'].attr('string'),
    key: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    isRequiredForAgents: _emberData['default'].attr('boolean'),
    isRequiredOnResolution: _emberData['default'].attr('boolean'),

    isCustomerEditable: _emberData['default'].attr('boolean'),
    isRequiredForCustomers: _emberData['default'].attr('boolean'),
    isSystem: _emberData['default'].attr('boolean'),
    priorities: _emberData['default'].hasMany('case-priority', { async: true, noCache: true }),
    statuses: _emberData['default'].hasMany('case-status', { async: true, noCache: true }),
    types: _emberData['default'].hasMany('case-type', { async: true, noCache: true }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/case-form', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model', 'ember'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel, _ember) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    title: _emberData['default'].attr('string'),
    customerTitle: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    isVisibleToCustomers: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean'),
    isDefault: _emberData['default'].attr('boolean'),
    sortOrder: _emberData['default'].attr('number'),
    fields: _emberData['default'].hasMany('case-field', { async: false }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    canBeDisabled: _ember['default'].computed('id', 'isDefault', function () {
      return _ember['default'].isPresent(this.get('id')) && !this.get('isDefault');
    }),

    canBeMadeDefault: _ember['default'].computed.not('isDefault'),
    canBeDeleted: _ember['default'].computed.not('isDefault')
  });
});
define('frontend-cp/models/case-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    fullname: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    creationMode: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),
    responseTime: _emberData['default'].attr('number'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    // Relations
    'case': _emberData['default'].belongsTo('case', { async: true }),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    mailbox: _emberData['default'].belongsTo('mailbox', { async: false }),
    location: _emberData['default'].belongsTo('location', { async: false }),

    recipients: _emberData['default'].hasMany('message-recipient', { async: false }),
    attachments: _emberData['default'].hasMany('attachment', { async: false }),

    postType: 'message'
  });
});
define('frontend-cp/models/case-note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),
    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    'case': _emberData['default'].belongsTo('case', { async: false }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true })
  });
});
define('frontend-cp/models/case-priority', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    level: _emberData['default'].attr('number'),
    color: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    parent: _emberData['default'].belongsTo('case-field', { async: true, noCache: true })
  });
});
define('frontend-cp/models/case-reply-options', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    cc: _emberData['default'].attr('array')
  });
});
define('frontend-cp/models/case-reply', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    contents: _emberData['default'].attr('string'),
    channelType: _emberData['default'].attr('string'),
    channel: _emberData['default'].belongsTo('account', { async: false }),
    inReplyToUuid: _emberData['default'].attr('string'),
    options: _modelFragments['default'].fragment('case-reply-options'),
    status: _emberData['default'].belongsTo('case-status', { async: false }),
    priority: _emberData['default'].belongsTo('case-priority', { async: false }),
    caseType: _emberData['default'].belongsTo('case-type', { async: false }),
    assigneeTeam: _emberData['default'].belongsTo('team', { async: false }),
    assigneeAgent: _emberData['default'].belongsTo('user', { async: false }),
    tags: _emberData['default'].attr('string'),
    fieldValues: _modelFragments['default'].fragmentArray('case-field-value'),
    // _filename: DS.belongsTo('?'),

    form: _emberData['default'].belongsTo('case-form', { async: false }),

    attachmentFileIds: _emberData['default'].attr('string'),

    'case': _emberData['default'].belongsTo('case', { async: true }),
    posts: _emberData['default'].hasMany('post', { async: true })
  });
});
define('frontend-cp/models/case-status', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    label: _emberData['default'].attr('string'),
    color: _emberData['default'].attr('string'),
    statusType: _emberData['default'].attr('string'),
    visibility: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    sortOrder: _emberData['default'].attr('number'),
    isSlaActive: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/case-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    type: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/case', ['exports', 'ember-data', 'model-fragments', 'frontend-cp/models/has-posts'], function (exports, _emberData, _modelFragments, _frontendCpModelsHasPosts) {
  exports['default'] = _frontendCpModelsHasPosts['default'].extend({
    assigneeTeam: _emberData['default'].belongsTo('team', { async: false }),
    assigneeAgent: _emberData['default'].belongsTo('user', { async: false }),
    subject: _emberData['default'].attr('string', { defaultValue: '' }),
    portal: _emberData['default'].attr('string'),
    sourceChannel: _emberData['default'].belongsTo('channel', { async: false }),
    requester: _emberData['default'].belongsTo('user', { async: false }),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { polymorphic: true, async: false }),
    sla: _emberData['default'].belongsTo('sla', { async: false }),
    slaMetrics: _modelFragments['default'].fragmentArray('sla-metric', { defaultValue: [] }),
    lastAssignedBy: _emberData['default'].belongsTo('user', { async: false }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    status: _emberData['default'].belongsTo('case-status', { async: false }),
    priority: _emberData['default'].belongsTo('case-priority', { async: false }),
    caseType: _emberData['default'].belongsTo('case-type', { async: false }),
    form: _emberData['default'].belongsTo('case-form', { async: false }),
    customFields: _modelFragments['default'].fragmentArray('case-field-value', { defaultValue: [] }),
    // metadata // TODO nested json
    lastReplier: _emberData['default'].belongsTo('user', { async: false }),
    lastReplierIdentity: _emberData['default'].belongsTo('identity', { async: false }),
    lastPublicChannel: _emberData['default'].belongsTo('channel', { async: false }),
    creationMode: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    hasNotes: _emberData['default'].attr('boolean'),
    hasAttachments: _emberData['default'].attr('boolean'),
    rating: _emberData['default'].attr('number'),
    ratingStatus: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    lastAgentActivityAt: _emberData['default'].attr('date'),
    lastCustomerActivityAt: _emberData['default'].attr('date'),
    lastCompletedAt: _emberData['default'].attr('date'),
    realtimeChannel: _emberData['default'].attr('string'),
    attachmentFileIds: _emberData['default'].attr('string'),

    // Children fields
    messages: _emberData['default'].hasMany('case-message', { async: true, noCache: true }),
    posts: _emberData['default'].hasMany('post', { async: true, noCache: true }),
    channels: _emberData['default'].hasMany('channel', { async: true, noCache: true }),
    activities: _emberData['default'].hasMany('activity', { async: true, noCache: true }),
    replyChannels: _emberData['default'].hasMany('channel', { async: true, noCache: true }),
    reply: _emberData['default'].hasMany('case-reply', { async: true, noCache: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, noCache: true }),

    // Parent field
    view: _emberData['default'].belongsTo('view', { async: true }),

    // Creation Fields
    contents: _emberData['default'].attr('string'),
    channel: _emberData['default'].attr('string'),
    channelId: _emberData['default'].attr('number'),

    // used in the creation steps
    creationTimestamp: null,

    saveWithPost: function saveWithPost(contents, channel, attachmentIds, replyOptions, inReplyToUuid) {
      var _this = this;

      var account = channel.get('account');
      var channelType = channel.get('channelType');
      var reply = this.get('store').createRecord('case-reply', {
        'case': this,
        channel: account,
        assigneeTeam: this.get('assigneeTeam'),
        assigneeAgent: this.get('assigneeAgent'),
        channelType: channelType,
        contents: contents,
        inReplyToUuid: inReplyToUuid,
        options: replyOptions.copy(),
        status: this.get('status'),
        caseType: this.get('caseType'),
        priority: this.get('priority'),
        form: this.get('form'),
        fieldValues: [],
        tags: this.get('tags').map(function (tag) {
          return tag.get('name');
        }).join(','),
        attachmentFileIds: attachmentIds
      });

      reply.get('case.customFields').forEach(function (customField) {
        reply.get('fieldValues').createFragment({
          fieldFragment: _this.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value')
        });
      });

      return reply.save();
    }
  });
});
define('frontend-cp/models/channel', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    channelType: _emberData['default'].attr('string'),
    characterLimit: _emberData['default'].attr('number'),
    account: _emberData['default'].belongsTo('account', { polymorphic: true, async: false }),

    isChannelTypeMailbox: _ember['default'].computed('channelType', function () {
      return this.get('channelType') === 'MAILBOX';
    }),

    iconClass: _ember['default'].computed('channelType', function () {
      var channelType = this.get('channelType');

      switch (channelType) {
        case 'MAILBOX':
          {
            return 'i-inbox';
          }
        case 'FACEBOOK':
          {
            return 'i-facebook';
          }
        case 'TWITTER':
          {
            return 'i-twitter';
          }
      }
    }),

    handle: _ember['default'].computed('channelType', function () {
      var channelType = this.get('channelType');
      switch (channelType) {
        case 'MAILBOX':
          {
            return this.get('account.address');
          }
        case 'FACEBOOK':
          {
            return this.get('account.title');
          }
        case 'TWITTER':
          {
            return this.get('account.screenName') + ' - Tweet';
          }
        case 'TWITTER_DM':
          {
            return this.get('account.screenName') + ' - DM';
          }
      }
    })
  });
});
define('frontend-cp/models/chat-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    event: _emberData['default'].attr('string'),

    // Relations
    'case': _emberData['default'].belongsTo('case', { async: true }),
    from: _emberData['default'].belongsTo('user-minimal', { async: false }),
    attachments: _emberData['default'].hasMany('attachment', { async: false }),

    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    postType: 'chat'
  });
});
define('frontend-cp/models/chat', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    agent: _emberData['default'].belongsTo('user', { async: true }),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    creator: _emberData['default'].belongsTo('user', { async: true }),
    email: _emberData['default'].attr('string'),
    isProactive: _emberData['default'].attr('boolean'),
    lastactivityAt: _emberData['default'].attr('date'),
    name: _emberData['default'].attr('string'),
    startedAt: _emberData['default'].attr('date'),
    status: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    team: _emberData['default'].belongsTo('team', { async: true }),
    token: _emberData['default'].attr('string'),
    uuid: _emberData['default'].attr('string'),
    waitTime: _emberData['default'].attr('number')
  });
});
define('frontend-cp/models/column-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/column', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _ember['default'].computed.alias('id')
  });
});
define('frontend-cp/models/contact-address', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean', { defaultValue: false }),
    address1: _emberData['default'].attr('string'),
    address2: _emberData['default'].attr('string'),
    city: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'), // TODO maybe integer?
    country: _emberData['default'].attr('string'), // TODO should be country code
    type: _emberData['default'].attr('string', { defaultValue: 'OTHER' }),

    parent: _emberData['default'].belongsTo('has-addresses', { async: true, polymorphic: true, parent: true })
  });
});
define('frontend-cp/models/contact-website', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean', { defaultValue: false }),
    url: _emberData['default'].attr('string'),

    parent: _emberData['default'].belongsTo('has-websites', { async: true, polymorphic: true, parent: true })
  });
});
define('frontend-cp/models/credential', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    realtimeAppKey: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/definition-value-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    value: _emberData['default'].attr(),
    string: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/definition', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    definitionType: _emberData['default'].attr('string'),
    inputType: _emberData['default'].attr('string'),
    subType: _emberData['default'].attr('string'),
    operators: _emberData['default'].attr('array'),

    // Can be one of the following things:
    // * an empty string
    // * an object with keys as value and properties as text
    // * a unicorn
    values: _modelFragments['default'].fragmentArray('definition-value-fragment')
  });
});
define('frontend-cp/models/event', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    subject: _emberData['default'].attr('string'),
    body: _emberData['default'].attr('string'),
    channel: _emberData['default'].attr('string'),
    participants: _emberData['default'].hasMany('users'),
    avatarUrl: _emberData['default'].attr('string'),
    creator: _emberData['default'].belongsTo('user'),
    // properties: [],
    attachments: _emberData['default'].hasMany('attachment'),
    downloadAll: _emberData['default'].attr('string'),
    triggeredAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/facebook-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    accountId: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean', { defaultValue: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/facebook-comment', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookComment'
  });
});
define('frontend-cp/models/facebook-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookMessage'
  });
});
define('frontend-cp/models/facebook-page', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    title: _emberData['default'].attr('string'),
    account: _emberData['default'].belongsTo('facebook-account')
  });
});
define('frontend-cp/models/facebook-post', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'facebookPost'
  });
});
define('frontend-cp/models/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    enabled: _emberData['default'].attr('boolean', { defaultValue: false })
  });
});
define('frontend-cp/models/feature', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    code: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/field-option', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    fielduuid: _emberData['default'].attr('string'),
    values: _emberData['default'].hasMany('locale-field', { async: false }),
    tag: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number', { 'default': 1 }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    parent: _emberData['default'].belongsTo('field', { polymorphic: true, async: true, noCache: true }),

    markedForDeletion: _emberData['default'].attr('boolean', { defaultValue: false }),

    value: _ember['default'].computed('values', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var values = this.get('values');

        var valueLocale = values.find(function (v) {
          return v.get('locale') === currentLocale;
        });

        if (valueLocale) {
          return valueLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var values = this.get('values');

        var valueLocale = values.find(function (v) {
          return v.get('locale') === currentLocale;
        });

        if (valueLocale) {
          valueLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/field', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    fielduuid: _emberData['default'].attr('string'),
    fieldType: _emberData['default'].attr('string'),
    key: _emberData['default'].attr('string'),
    title: _emberData['default'].attr('string', { defaultValue: '' }),
    customerTitle: _emberData['default'].attr('string', { defaultValue: '' }),
    description: _emberData['default'].attr('string', { defaultValue: '' }),

    isVisibleToCustomers: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean', { defaultValue: true }),
    isRequired: _emberData['default'].attr('boolean'),

    regularExpression: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    isChoiceField: _ember['default'].computed('fieldType', function () {
      switch (this.get('fieldType')) {
        case 'RADIO':
        case 'CHECKBOX':
        case 'CASCADINGSELECT':
        case 'SELECT':
          return true;

        default:
          return false;
      }
    }),

    options: _emberData['default'].hasMany('field-option', { async: false })
  });
});
define('frontend-cp/models/has-posts', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    posts: _emberData['default'].hasMany('post', { async: true, polymorphic: true })
  });
});
define('frontend-cp/models/identity-autocomplete-email', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    identity: _emberData['default'].belongsTo('identity-email'),

    user: _emberData['default'].belongsTo('user', { async: true })
  });
});
define('frontend-cp/models/identity-domain', ['exports', 'ember-data', 'ember', 'frontend-cp/models/identity'], function (exports, _emberData, _ember, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    domain: _emberData['default'].attr('string'),

    name: _ember['default'].computed.alias('domain'),

    user: _emberData['default'].belongsTo('user', { async: true }),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('frontend-cp/models/identity-email', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    email: _emberData['default'].attr('string'),
    isNotificationEnabled: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true })
  });
});
define('frontend-cp/models/identity-facebook', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    facebookId: _emberData['default'].attr('string'),
    userName: _emberData['default'].attr('string'),
    fullName: _emberData['default'].attr('string'),
    email: _emberData['default'].attr('string'),
    bio: _emberData['default'].attr('string'),
    birthDate: _emberData['default'].attr('date'),
    website: _emberData['default'].attr('string'),
    profileUrl: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),

    // CPs
    canBeValidated: false
  });
});
define('frontend-cp/models/identity-phone', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    number: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),
    organization: _emberData['default'].belongsTo('organization', { async: true })
  });
});
define('frontend-cp/models/identity-token', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    token: _emberData['default'].attr('string'),
    lastUsedAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/identity-twitter', ['exports', 'ember-data', 'frontend-cp/models/identity'], function (exports, _emberData, _frontendCpModelsIdentity) {
  exports['default'] = _frontendCpModelsIdentity['default'].extend({
    twitterId: _emberData['default'].attr('string'),
    fullName: _emberData['default'].attr('string'),
    screenName: _emberData['default'].attr('string'),
    followerCount: _emberData['default'].attr('number'),
    description: _emberData['default'].attr('string'),
    url: _emberData['default'].attr('string'),
    location: _emberData['default'].attr('string'),
    profileImageUrl: _emberData['default'].attr('string'),
    locale: _emberData['default'].attr('string'),

    // Relations
    user: _emberData['default'].belongsTo('user', { async: true }),

    // CPs
    canBeValidated: false
  });
});
define('frontend-cp/models/identity', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var computed = _ember['default'].computed;
  exports['default'] = _emberData['default'].Model.extend({
    isPrimary: _emberData['default'].attr('boolean'),
    isValidated: _emberData['default'].attr('boolean'),

    // CPs
    canBeRemoved: computed.not('isPrimary'),
    canBeValidated: computed.not('isValidated'),
    canBeModified: computed.or('canBeValidated', 'canBeRemoved', 'canBePrimarized'),
    canBePrimarized: computed('isPrimary', 'isValidated', function () {
      return !this.get('isPrimary') && this.get('isValidated');
    })
  });
});
define('frontend-cp/models/limit', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    limit: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/link', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    label: _emberData['default'].attr('string'),
    object: _emberData['default'].belongsTo('object', { polymorphic: true, async: false })
  });
});
define('frontend-cp/models/locale-field', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    locale: _emberData['default'].attr('string'),
    translation: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/locale-string', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    value: _emberData['default'].attr('string'),

    locale: _emberData['default'].belongsTo('locale', { async: true })
  });
});
define('frontend-cp/models/locale', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    locale: _emberData['default'].attr('string'),
    name: _emberData['default'].attr('string'),
    nativeName: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    nativeRegion: _emberData['default'].attr('string'),
    script: _emberData['default'].attr('string'),
    variant: _emberData['default'].attr('string'),
    direction: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    isPublic: _emberData['default'].attr('boolean'),
    isLocalised: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    strings: _emberData['default'].hasMany('locale-string', { async: true })
  });
});
define('frontend-cp/models/location', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    city: _emberData['default'].attr('string'),
    region: _emberData['default'].attr('string'),
    regionCode: _emberData['default'].attr('string'),
    areaCode: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    organization: _emberData['default'].attr('string'),
    netSpeed: _emberData['default'].attr('string'),
    country: _emberData['default'].attr('string'),
    countryCode: _emberData['default'].attr('string'),
    postalCode: _emberData['default'].attr('string'),
    latitude: _emberData['default'].attr('string'),
    longitude: _emberData['default'].attr('string'),
    metroCode: _emberData['default'].attr('string'),
    isp: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/macro-tag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    type: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/macro-visibility', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    type: _emberData['default'].attr('string') // ALL, TEAM, PRIVATE
  });
});
define('frontend-cp/models/macro', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    usageCount: _emberData['default'].attr('number'),
    lastUsedAt: _emberData['default'].attr('date'),
    visibilityType: _emberData['default'].attr('string', { defaultValue: 'PRIVATE' }),
    replyType: _emberData['default'].attr('string'),
    replyContents: _emberData['default'].attr('string'),
    assigneeType: _emberData['default'].attr('string'),
    priorityAction: _emberData['default'].attr('string'),
    addTags: _emberData['default'].attr({ defaultValue: function defaultValue() {
        return [];
      } }),
    removeTags: _emberData['default'].attr({ defaultValue: function defaultValue() {
        return [];
      } }),

    // Relationships
    visibleToTeam: _emberData['default'].belongsTo('team', { async: true }),
    assigneeTeam: _emberData['default'].belongsTo('team', { async: false }),
    assigneeAgent: _emberData['default'].belongsTo('user', { async: false }),
    priority: _emberData['default'].belongsTo('case-priority', { async: false }),
    status: _emberData['default'].belongsTo('case-status', { async: false }),
    agent: _emberData['default'].belongsTo('user', { async: false }),
    caseType: _emberData['default'].belongsTo('case-type', { async: false }),
    tags: _emberData['default'].hasMany('macro-tag', { async: false }),

    // read only
    visibility: _modelFragments['default'].fragment('macro-visibility')
  });
});
define('frontend-cp/models/mailbox', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    uuid: _emberData['default'].attr('string'),
    service: _emberData['default'].attr('string'),
    encryption: _emberData['default'].attr('string'),
    address: _emberData['default'].attr('string'),
    prefix: _emberData['default'].attr('string'),
    smtpType: _emberData['default'].attr('string'),
    host: _emberData['default'].attr('string'),
    port: _emberData['default'].attr('number'),
    username: _emberData['default'].attr('string'),
    preserveMails: _emberData['default'].attr('boolean'),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    isDefault: _emberData['default'].attr('boolean'),
    isEnabled: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/message-recipient', ['exports', 'ember-data', 'ember'], function (exports, _emberData, _ember) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    messageRecipientType: _emberData['default'].attr('string'),
    identity: _emberData['default'].belongsTo('identity', { async: false }),

    isCC: _ember['default'].computed.equal('messageRecipientType', 'CC')
  });
});
define('frontend-cp/models/note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    isPinned: _emberData['default'].attr('boolean'),

    user: _emberData['default'].belongsTo('user', { async: false }),
    parent: _emberData['default'].belongsTo('case', { async: true, polymorphic: true }),

    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    postType: 'note'
  });
});
define('frontend-cp/models/oauth-link', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/object', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    icon: _emberData['default'].hasMany('attachment', { async: false }),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/organization-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('organization-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('organization-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/organization-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/organization-note', ['exports', 'ember-data', 'frontend-cp/models/postable', 'ember'], function (exports, _emberData, _frontendCpModelsPostable, _ember) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),

    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    organization: _emberData['default'].belongsTo('organization', { async: false, inverse: 'notes' }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true }),

    domains: _ember['default'].computed.alias('organization.domains'),

    postType: 'note'
  });
});
define('frontend-cp/models/organization', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model', 'model-fragments', 'frontend-cp/models/has-posts'], function (exports, _emberData, _ember, _frontendCpMixinsChangeAwareModel, _modelFragments, _frontendCpModelsHasPosts) {
  exports['default'] = _frontendCpModelsHasPosts['default'].extend(_frontendCpMixinsChangeAwareModel['default'], _ember['default'].Evented, {
    name: _emberData['default'].attr('string'),
    isShared: _emberData['default'].attr('boolean'),
    brand: _emberData['default'].belongsTo('brand', { async: true }),
    pinned: _emberData['default'].attr('number'),
    customFields: _modelFragments['default'].fragmentArray('organization-field-value'),
    fieldValues: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }), // write only
    followers: _emberData['default'].hasMany('user', { async: true, inverse: null, noCache: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    domains: _emberData['default'].hasMany('identity-domain', { async: true }),
    phones: _emberData['default'].hasMany('identity-phone', { async: true }),

    // Shadow children fields
    notes: _emberData['default'].hasMany('organization-note', { async: true, noCache: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, noCache: true }),
    posts: _emberData['default'].hasMany('post', { async: true, noCache: true }),

    saveWithNote: function saveWithNote(contents) {
      var _this = this;

      var attachmentIds = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (contents) {
        var _ret = (function () {
          var note = _this.get('store').createRecord('organization-note', {
            contents: contents,
            attachmentFileIds: attachmentIds,
            organization: _this
          });

          return {
            v: _this.save().then(function () {
              return note.save();
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        return this.save();
      }
    }
  });
});
define('frontend-cp/models/permission', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    name: _emberData['default'].attr('string'),
    value: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/plan', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    features: _modelFragments['default'].fragmentArray('feature', { async: false }),
    limits: _modelFragments['default'].fragmentArray('limit', { async: false })
  });
});
define('frontend-cp/models/post', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    uuid: _emberData['default'].attr('string'),
    sequence: _emberData['default'].attr('number'),
    subject: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),
    creator: _emberData['default'].belongsTo('user', { async: false }),
    sourceChannel: _emberData['default'].belongsTo('channel', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    attachments: _emberData['default'].hasMany('attachment', { async: true }),
    downloadAll: _emberData['default'].attr('string'),
    original: _emberData['default'].belongsTo('postable', { async: true, polymorphic: true }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    // Virtual parent field
    parent: _emberData['default'].belongsTo('has-posts', { async: true, polymorphic: true })
  });
});
define('frontend-cp/models/postable', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/models/predicate-collection', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _emberData['default'].Model.extend({
    operator: _emberData['default'].attr('string', { 'default': 'OR' }),
    propositions: _modelFragments['default'].fragmentArray('proposition')
  });
});
define('frontend-cp/models/proposition', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    field: _emberData['default'].attr('string'),
    operator: _emberData['default'].attr('string'),
    value: _emberData['default'].attr()
  });
});
define('frontend-cp/models/rating', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    score: _emberData['default'].attr('string'),
    comment: _emberData['default'].attr('string'),
    'case': _emberData['default'].belongsTo('case'),
    creator: _emberData['default'].belongsTo('user'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/relationship-fragment', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    relationshipId: _emberData['default'].attr('string'),
    relationshipType: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/role', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    roleType: _emberData['default'].attr('string', { defaultValue: 'AGENT' }),
    agentCaseAccess: _emberData['default'].attr('string', { defaultValue: 'ALL' }),
    permissions: _emberData['default'].hasMany('permission', { async: true }),
    isSystem: _emberData['default'].attr('boolean')
  });
});
define('frontend-cp/models/search-result', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    objectId: _emberData['default'].attr('number'),
    title: _emberData['default'].attr('string'),
    snippet: _emberData['default'].attr('string'),
    resource: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/session', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    portal: _emberData['default'].attr('string'),
    ipAddress: _emberData['default'].attr('string'),
    userAgent: _emberData['default'].attr('string'),
    user: _emberData['default'].belongsTo('user', { async: false }),
    status: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date'),
    lastActivityAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/sla-metric', ['exports', 'ember', 'ember-data', 'moment', 'model-fragments'], function (exports, _ember, _emberData, _moment, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    title: _emberData['default'].attr('string'),
    state: _emberData['default'].attr('string'), //COMPLETED | PAUSED | ACTIVE
    isBreached: _emberData['default'].attr('boolean'),
    remainingSeconds: _emberData['default'].attr('number'),
    totalSeconds: _emberData['default'].attr('number'),
    timeTakenSeconds: _emberData['default'].attr('number'),

    status: _ember['default'].computed('isBreached', 'isCompleted', 'hasLessThan20PercentRemaining', function () {
      // OK | OPEN | WARNING | BREACHED
      if (this.get('isBreached')) {
        return 'BAD';
      }
      if (this.get('isCompleted')) {
        return 'GOOD';
      }
      if (this.get('hasLessThan20PercentRemaining')) {
        return 'WARNING';
      }
      return 'OPEN';
    }),

    isCompleted: _ember['default'].computed('state', function () {
      return this.get('state') === 'COMPLETED';
    }),

    hasLessThan20PercentRemaining: _ember['default'].computed('remainingSeconds', 'totalSeconds', function () {
      var percentageLeft = 100 * this.get('remainingSeconds') / this.get('totalSeconds');
      return percentageLeft < 20;
    }),

    numberOfWholeDaysRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').days());
    }),

    numberOfWholeHoursRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').hours());
    }),

    numberOfWholeMinutesRemaining: _ember['default'].computed('remainingSeconds', 'isCompleted', 'timeTakenSeconds', function () {
      var timeInSeconds = this.get('isCompleted') ? this.get('timeTakenSeconds') : this.get('remainingSeconds');
      return Math.abs(_moment['default'].duration(timeInSeconds, 'seconds').minutes());
    })
  });
});
define('frontend-cp/models/sla', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    title: _emberData['default'].attr('string'),
    description: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/tab', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({

    /**
     * Tab base URL
     * Path to the tab's 'home' page.
     * This is used to check whether a page falls within this tab's remit.
     * @type {[type]}
     */
    baseUrl: null,

    /**
     * Tab URL
     * Path to the page that's currently displayed in the tab.
     * This will either be the `baseUrl` or one of its descendant URLs.
     * @type {string}
     */
    url: null,

    /**
     * Tab label
     * @type {string}
     */
    label: null,

    /**
     * Whether the tab is currently selected
     * @type {boolean}
     */
    selected: false,

    /**
     * UI state object
     * Ember object containing UI state related to this tab
     * @type {Object}
     */
    state: null
  });
});
define('frontend-cp/models/tag', ['exports', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    name: _emberData['default'].attr('string'),

    isNew: false
  });
});
define('frontend-cp/models/team', ['exports', 'ember-data', 'ember', 'frontend-cp/mixins/change-aware-model'], function (exports, _emberData, _ember, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    title: _emberData['default'].attr('string'),
    memberCount: _emberData['default'].attr('number'),
    businesshour: _emberData['default'].belongsTo('business-hour', { async: false }),
    followers: _emberData['default'].hasMany('user', { async: false, noCache: true }),
    members: _emberData['default'].hasMany('user', { async: true, inverse: 'teams', noCache: true }),

    isNew: false,

    // team pills component looks for name on the model
    name: _ember['default'].computed.alias('title')
  });
});
define('frontend-cp/models/thumbnail', ['exports', 'ember-data', 'model-fragments'], function (exports, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    name: _emberData['default'].attr('string'),
    size: _emberData['default'].attr('number'),
    width: _emberData['default'].attr('number'),
    height: _emberData['default'].attr('number'),
    url: _emberData['default'].attr('string'),
    createdAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/twitter-account-callback', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    oauthToken: _emberData['default'].attr('string'),
    oauthVerifier: _emberData['default'].attr('string'),

    account: _emberData['default'].belongsTo('twitter-account')
  });
});
define('frontend-cp/models/twitter-account', ['exports', 'ember-data', 'frontend-cp/models/account'], function (exports, _emberData, _frontendCpModelsAccount) {
  exports['default'] = _frontendCpModelsAccount['default'].extend({
    twitterId: _emberData['default'].attr('string'),
    screenName: _emberData['default'].attr('string'),
    brand: _emberData['default'].belongsTo('brand', { async: false }),
    routeMentions: _emberData['default'].attr('boolean'),
    routeMessages: _emberData['default'].attr('boolean'),
    routeFavorites: _emberData['default'].attr('boolean'),
    showInHelpCenter: _emberData['default'].attr('boolean'),
    status: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/twitter-message', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'twitterMessage'
  });
});
define('frontend-cp/models/twitter-tweet', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    postType: 'twitterTweet'
  });
});
define('frontend-cp/models/user-field-value', ['exports', 'ember', 'ember-data', 'model-fragments'], function (exports, _ember, _emberData, _modelFragments) {
  exports['default'] = _modelFragments['default'].Fragment.extend({
    // TODO fix when relationship support lands to ember-data.model-fragments
    // field: DS.belongsTo('user-field', { async: true }),
    fieldFragment: _modelFragments['default'].fragment('relationship-fragment'),
    field: _ember['default'].computed('fieldFragment.relationshipId', function () {
      return this.store.peekRecord('user-field', this.get('fieldFragment.relationshipId'));
    }),

    value: _emberData['default'].attr('string')
  });
});
define('frontend-cp/models/user-field', ['exports', 'ember', 'ember-data', 'frontend-cp/models/field'], function (exports, _ember, _emberData, _frontendCpModelsField) {
  exports['default'] = _frontendCpModelsField['default'].extend({
    isCustomerEditable: _emberData['default'].attr('boolean'),
    title: _emberData['default'].attr('string'),
    customerTitles: _emberData['default'].hasMany('locale-field', { async: false }),
    descriptions: _emberData['default'].hasMany('locale-field', { async: false }),

    customerTitle: _ember['default'].computed('customerTitles', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          return customerTitleLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var customerTitles = this.get('customerTitles');

        var customerTitleLocale = customerTitles.find(function (t) {
          return t.get('locale') === currentLocale;
        });

        if (customerTitleLocale) {
          customerTitleLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    }),

    description: _ember['default'].computed('descriptions', {
      get: function get() {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          return descriptionLocale.get('translation');
        } else {
          return null;
        }
      },
      set: function set(key, translation) {
        var currentLocale = this.store.peekAll('locale').get('firstObject.locale');
        var descriptions = this.get('descriptions');

        var descriptionLocale = descriptions.find(function (d) {
          return d.get('locale') === currentLocale;
        });

        if (descriptionLocale) {
          descriptionLocale.set('translation', translation);
          return translation;
        } else {
          return null;
        }
      }
    })
  });
});
define('frontend-cp/models/user-minimal', ['exports', 'frontend-cp/models/user'], function (exports, _frontendCpModelsUser) {
  exports['default'] = _frontendCpModelsUser['default'].extend();
});
define('frontend-cp/models/user-note', ['exports', 'ember-data', 'frontend-cp/models/postable'], function (exports, _emberData, _frontendCpModelsPostable) {
  exports['default'] = _frontendCpModelsPostable['default'].extend({
    uuid: _emberData['default'].attr('string'),
    subject: _emberData['default'].attr('string'),
    bodyText: _emberData['default'].attr('string'),
    bodyHtml: _emberData['default'].attr('string'),
    contents: _emberData['default'].attr('string'),

    isPinned: _emberData['default'].attr('boolean'),
    color: _emberData['default'].attr('string', { defaultValue: 'YELLOW' }), // TODO enum YELLOW, RED, GREEN, BLUE, ORANGE, PURPLE
    creator: _emberData['default'].belongsTo('user', { async: false }),
    identity: _emberData['default'].belongsTo('identity', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    user: _emberData['default'].belongsTo('user', { async: false, inverse: 'notes' }),
    note: _emberData['default'].belongsTo('note', { async: false }),
    post: _emberData['default'].belongsTo('post', { async: true }),

    postType: 'note'
  });
});
define('frontend-cp/models/user', ['exports', 'ember-data', 'model-fragments', 'ember', 'frontend-cp/mixins/change-aware-model', 'frontend-cp/models/has-posts'], function (exports, _emberData, _modelFragments, _ember, _frontendCpMixinsChangeAwareModel, _frontendCpModelsHasPosts) {
  exports['default'] = _frontendCpModelsHasPosts['default'].extend(_frontendCpMixinsChangeAwareModel['default'], {
    fullName: _emberData['default'].attr('string'),
    designation: _emberData['default'].attr('string'),
    alias: _emberData['default'].attr('string'),
    isEnabled: _emberData['default'].attr('boolean'),
    role: _emberData['default'].belongsTo('role', { async: false }),
    avatar: _emberData['default'].attr('string'),
    organization: _emberData['default'].belongsTo('organization', { async: true }),
    teams: _emberData['default'].hasMany('team', { async: false }),
    customFields: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }),
    fieldValues: _modelFragments['default'].fragmentArray('user-field-value', { defaultValue: [] }), // write only
    locale: _emberData['default'].attr('string'),
    timeZone: _emberData['default'].attr('string'),
    timeZoneOffset: _emberData['default'].attr('number'),
    greeting: _emberData['default'].attr('string'),
    signature: _emberData['default'].attr('string'),
    statusMessage: _emberData['default'].attr('string'),
    passwordUpdateAt: _emberData['default'].attr('date'),
    avatarUpdateAt: _emberData['default'].attr('date'),
    activityAt: _emberData['default'].attr('date'),
    visitedAt: _emberData['default'].attr('date'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),

    agentCaseAccess: _emberData['default'].attr('string', { defaultValue: 'ALL' }),
    organizationCaseAccess: _emberData['default'].attr('string', { defaultValue: 'REQUESTED' }),

    // Shadow children fields
    accesslogs: _emberData['default'].hasMany('access-log', { async: true, noCache: true }),
    recentCases: _emberData['default'].hasMany('case', { async: true, inverse: null, noCache: true }),
    events: _emberData['default'].hasMany('event', { async: true, inverse: 'creator', noCache: true }),
    tags: _emberData['default'].hasMany('tag', { async: true, noCache: true }),
    notes: _emberData['default'].hasMany('user-note', { async: true, noCache: true }),

    emails: _emberData['default'].hasMany('identity-email', { async: false }),
    phones: _emberData['default'].hasMany('identity-phone', { async: false }),
    twitter: _emberData['default'].hasMany('identity-twitter', { async: false }),
    facebook: _emberData['default'].hasMany('identity-facebook', { async: false }),

    saveWithNote: function saveWithNote(contents) {
      var _this = this;

      var attachmentIds = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

      if (contents) {
        var _ret = (function () {
          var note = _this.get('store').createRecord('user-note', {
            contents: contents,
            attachmentFileIds: attachmentIds,
            user: _this
          });

          return {
            v: _this.save().then(function () {
              return note.save();
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      } else {
        return this.save();
      }
    },

    save: function save() {
      var _this2 = this;

      this.get('customFields').forEach(function (customField) {
        _this2.get('fieldValues').createFragment({
          fieldFragment: _this2.get('store').createFragment('relationship-fragment', {
            relationshipId: customField.get('field.id'),
            relationshipType: customField.get('field.type')
          }),
          value: customField.get('value') === '' ? null : customField.get('value')
        });
      });

      return this._super().then(function () {
        _this2.get('teams').forEach(function (team) {
          team.set('isNew', false);
        });
        return _this2;
      });
    },

    primaryEmail: _ember['default'].computed('emails.@each.isPrimary', function () {
      var emails = this.get('emails');
      var primaryEmail = emails.filter(function (email) {
        return email.get('isPrimary');
      }).get('firstObject');

      return primaryEmail ? primaryEmail : emails.get('firstObject');
    }),

    primaryEmailAddress: _ember['default'].computed('primaryEmail', function () {
      return this.get('primaryEmail.email');
    })
  });
});
define('frontend-cp/models/view-count', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  var computed = _ember['default'].computed;
  exports['default'] = _emberData['default'].Model.extend({
    view: _emberData['default'].belongsTo('view'),
    count: _emberData['default'].attr('number'),
    countAccuracy: _emberData['default'].attr('string'),
    realtimeChannel: _emberData['default'].attr('string'),

    // CPs
    hasKnownAccuracy: computed('countAccuracy', function () {
      return this.get('countAccuracy') !== 'UNKNOWN';
    }),

    hasRelativeAccuracy: computed.equal('countAccuracy', 'RELATIVE')
  });
});
define('frontend-cp/models/view', ['exports', 'ember', 'ember-data', 'frontend-cp/mixins/change-aware-model'], function (exports, _ember, _emberData, _frontendCpMixinsChangeAwareModel) {
  exports['default'] = _emberData['default'].Model.extend(_frontendCpMixinsChangeAwareModel['default'], {
    intl: _ember['default'].inject.service(),

    title: _emberData['default'].attr('string'),
    visibilityType: _emberData['default'].attr('string'), // ALL | TEAM
    orderByColumn: _emberData['default'].attr('string', { defaultValue: null }),
    orderBy: _emberData['default'].attr('string'),
    sortOrder: _emberData['default'].attr('number'),
    isEnabled: _emberData['default'].attr('boolean'),
    isDefault: _emberData['default'].attr('boolean'),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date'),
    viewType: _emberData['default'].attr('string'),

    // Relations
    agent: _emberData['default'].belongsTo('user', { async: false }),
    visibilityToTeams: _emberData['default'].hasMany('team', { async: false }),
    columns: _emberData['default'].hasMany('column', { async: false }),
    predicateCollections: _emberData['default'].hasMany('predicate-collection', { defaultValue: [], async: false }),
    viewCount: _emberData['default'].belongsTo('view-count', { async: true }),
    cases: _emberData['default'].hasMany('case', { async: true, noCache: true }),

    visibilityString: _ember['default'].computed('visibilityType', 'visibilityToTeams', function () {
      var trans = 'admin.views.sharing.' + this.get('visibilityType');
      var visibilityString = this.get('intl').findTranslationByKey(trans);
      if (visibilityString) {
        return visibilityString;
      }
      return this.get('visibilityToTeams').map(function (team) {
        return team.get('title');
      }).join(', ');
    })
  });
});
define('frontend-cp/models/vote', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({
    type: _emberData['default'].attr('string'),
    user: _emberData['default'].belongsTo('user', { async: false }),
    createdAt: _emberData['default'].attr('date'),
    updatedAt: _emberData['default'].attr('date')
  });
});
define('frontend-cp/models/zone', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Model.extend({});
});
define('frontend-cp/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('frontend-cp/router', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  // Make current URL available in url-service to allow observing changes
  _ember['default'].Router.reopen({
    urlDidChange: _ember['default'].on('didTransition', function () {
      var urlService = this.get('container').lookup('service:url');
      urlService.set('currentUrl', this.get('url'));
    })
  });

  var Router = _ember['default'].Router.extend({
    location: _frontendCpConfigEnvironment['default'].locationType,
    metrics: _ember['default'].inject.service(),

    didTransition: function didTransition() {
      this._super.apply(this, arguments);
      this._trackPage();
    },

    _trackPage: function _trackPage() {
      var _this = this;

      _ember['default'].run.scheduleOnce('afterRender', this, function () {
        var page = document.location.pathname;
        var title = _this.getWithDefault('currentRouteName', 'unknown');

        _ember['default'].get(_this, 'metrics').trackPage({ page: page, title: title });
      });
    }
  });

  Router.map(function () {
    // path has to stay '/' otherwise everything will break — similar path
    // is already defined by the session. Looks like the router doesn't
    // rely on NFA...
    this.route('login', { path: '/' }, function () {
      this.route('agent', { path: '/agent/login' });
      this.route('admin', { path: '/admin/login' });
    });

    this.route('session', { path: '' }, function () {
      this.route('test', { path: '/test' }, function () {
        this.route('entry', { path: '/:entry_id' });
      });

      this.route('agent', function () {
        this.route('cases', { path: '/cases' }, function () {
          this.route('new', { path: '/new/:timestamp' }, function () {
            this.route('user');
            this.route('organisation');
          });
          this.route('case', { path: '/:case_id' }, function () {
            this.route('notes');
            this.route('organisation');
            this.route('user');
          });

          this.route('index', { path: '' }, function () {
            this.route('view', { path: '/view/:view_id' });
            this.route('suspended-messages', function () {
              this.route('show', { path: ':id' });
            });
          });
        });
        this.route('users', { path: '/users' }, function () {
          this.route('user', { path: '/:user_id' }, function () {
            this.route('organisation');
          });
        });
        this.route('organisations', { path: '/organisations' }, function () {
          this.route('organisation', { path: '/:organisation_id' }, function () {});
        });
      });

      this.route('admin', function () {
        this.route('manage', function () {
          this.route('views', function () {
            this.route('edit', { path: '/:view_id' });
            this.route('new', { path: '/new' });
          });
          this.route('case-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:case_field_id' });
          });

          this.route('case-forms', function () {
            this.route('new');
            this.route('edit', { path: '/:case_form_id' });
          });

          this.route('macros', function () {
            this.route('new');
            this.route('edit', { path: '/:macro_id' });
          });
        });

        this.route('people', function () {
          this.route('teams', function () {
            this.route('new');
            this.route('edit', { path: '/:team_id' });
          });

          this.route('user-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:user_field_id' });
          });

          this.route('organization-fields', function () {
            this.route('select-type', { path: '/select-type' });
            this.route('new', { path: '/new/:type' });
            this.route('edit', { path: '/:organization_field_id' });
          });

          this.route('roles', function () {
            this.route('new', { path: '/new' });
            this.route('edit', { path: '/:role_id' });
          });
        });

        this.route('automation', function () {
          this.route('businesshours', function () {
            this.route('new', { path: '/new' });
            this.route('edit', { path: '/:businesshour_id' });
          });
        });

        this.route('channels', function () {
          this.route('twitter', function () {
            this.route('edit', { path: '/:account_id' });
            this.route('link');
            this.route('reauthorize');
          });
        });
      });
    });
  });

  exports['default'] = Router;
});
define('frontend-cp/routes/abstract/tabbed-route-child', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    // Actions
    actions: {
      // When a child route of a tabbed route is activated it updates the routeName
      // of the tab to point to it.
      didTransition: function didTransition() {
        this.send('subrouteDidRender', this.routeName);
        this.send('restoreScroll');
      }
    }
  });
});
define('frontend-cp/routes/abstract/tabbed-route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    tabStore: _ember['default'].inject.service(),

    setupController: function setupController() {
      this._super.apply(this, arguments);
      this.controller.set('tab', this.tab);
    },

    activate: function activate() {
      this.handleScroll = this.handleScroll.bind(this);
      $(window).on('scroll', this.handleScroll);
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      this.get('tabStore').leave(this.tab);
      $(window).off('scroll', this.handleScroll);
    },

    // Methods
    handleScroll: function handleScroll() {
      _ember['default'].run.debounce(this, this.updateTabStateAfterScroll, 250);
    },

    updateTabStateAfterScroll: function updateTabStateAfterScroll() {
      this.send('updateTabState', { scroll: this.get('scroller').scrollTop });
    },

    // CPs
    scroller: _ember['default'].computed(function () {
      return document.querySelector(this.container.lookup('application:main').rootElement);
    }),

    // Actions
    actions: {
      updateTabName: function updateTabName(label) {
        this.get('tabStore').update(this.tab, { label: label });
      },

      updateTabState: function updateTabState(state) {
        this.get('tabStore').updateState(this.tab, state);
      },

      updateNonPersistedTabState: function updateNonPersistedTabState(state) {
        this.get('tabStore').updateNonPersistedState(this.tab, state);
      },

      subrouteDidRender: function subrouteDidRender(routeName) {
        this.get('tabStore').update(this.tab, { routeName: routeName });
      },

      restoreScroll: function restoreScroll() {
        _ember['default'].run.schedule('afterRender', this, function () {
          if (this.tab.state && typeof this.tab.state.scroll !== 'undefined') {
            this.get('scroller').scrollTop = this.tab.state.scroll;
          }
        });
      }
    }
  });
});
define('frontend-cp/sanitizers/bold', ['exports'], function (exports) {
  exports['default'] = {
    elements: ['b']
  };
});
define('frontend-cp/serializers/application', ['exports', 'ember', 'ember-data', 'npm:lodash'], function (exports, _ember, _emberData, _npmLodash) {
  var merge = _ember['default'].merge;
  var inject = _ember['default'].inject;
  var _Ember$String = _ember['default'].String;
  var pluralize = _Ember$String.pluralize;
  var underscore = _Ember$String.underscore;

  var errorCodes = ['FIELD_REQUIRED', 'FIELD_DUPLICATE', 'FIELD_EMPTY', 'FIELD_INVALID'];
  var errorMessages = _npmLodash['default'].zipObject(errorCodes.map(function (e) {
    return [e, 'generic.error.' + e.toLowerCase()];
  }));
  var isValidationError = function isValidationError(e) {
    return errorCodes.includes(e.code);
  };

  exports['default'] = _emberData['default'].RESTSerializer.extend({
    isNewSerializerAPI: true,

    intlService: inject.service('intl'),

    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      this.removeBacklistedSideloadedResources(payload.resources);
      payload[pluralize(payload.resource)] = _ember['default'].makeArray(payload.data);
      Reflect.deleteProperty(payload, 'status');
      Reflect.deleteProperty(payload, 'resource');
      Reflect.deleteProperty(payload, 'logs');

      Object.keys(payload.resources || {}).forEach(function (modelType) {
        payload[pluralize(modelType)] = Object.values(payload.resources[modelType]);
      });

      Reflect.deleteProperty(payload, 'resources');
      Reflect.deleteProperty(payload, 'data');
      Object.keys(payload).forEach(function (key) {
        var value = payload[key];
        if (Array.isArray(value)) {
          value.forEach(function (resource) {
            if (resource.hasOwnProperty('resource_type')) {
              if (resource.hasOwnProperty('type')) {
                resource[resource.resource_type + '_type'] = resource.type;
              }
              resource.type = resource.resource_type;
              Reflect.deleteProperty(resource, 'resource_type');
            }
          });
        }
      });
      var hasMeta = false;
      var meta = ['total_count', 'offset', 'next_url', 'limit'].reduce(function (meta, attrName) {
        if (payload.hasOwnProperty(attrName)) {
          meta[attrName] = payload[attrName];
          Reflect.deleteProperty(payload, attrName);
          hasMeta = true;
        }
        return meta;
      }, {});
      if (hasMeta) {
        payload.meta = meta;
      }
      return this._super.apply(this, arguments);
    },

    keyForAttribute: function keyForAttribute(key /*, method*/) {
      return _ember['default'].String.underscore(key);
    },

    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      modelClass.eachRelationship(function (name, relationship) {
        var underscoredName = underscore(name);
        if (resourceHash[underscoredName]) {
          if (relationship.kind === 'belongsTo') {
            var data = resourceHash[underscoredName];
            if (!data.hasOwnProperty('id') || !data.hasOwnProperty('type') || Object.keys(data).length !== 2) {
              resourceHash[underscoredName] = { id: data.id, type: data.resource_type };
            }
          } else {
            // has many
            resourceHash[underscoredName].forEach(function (entry) {
              entry.type = entry.resource_type;
              Reflect.deleteProperty(entry, 'resource_type');
            });
          }
        }
      });
      return this._super.apply(this, arguments);
    },

    extractMeta: function extractMeta(store, typeClass, payload) {
      if (payload.meta) {
        if (typeof payload.meta.total_count !== 'undefined') {
          payload.meta.total = payload.meta.total_count;
          Reflect.deleteProperty(payload.meta, 'total_count');
        }
        if (typeof payload.meta.next_url !== 'undefined') {
          payload.meta.next = payload.meta.next_url;
          Reflect.deleteProperty(payload.meta, 'next_url');
        }
        if (typeof payload.meta.offset !== 'undefined') {
          payload.meta.offset = payload.meta.offset;
          Reflect.deleteProperty(payload.meta, 'offset');
        }
        if (typeof payload.meta.limit !== 'undefined') {
          payload.meta.limit = payload.meta.limit;
          Reflect.deleteProperty(payload.meta, 'limit');
        }
      }
      return this._super.apply(this, arguments);
    },

    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        return underscore(key) + (relationship === 'belongsTo' ? '_id' : '');
      } else {
        return underscore(key);
      }
    },

    serializeIntoHash: function serializeIntoHash(hash, type, snapshot, options) {
      merge(hash, this.serialize(snapshot, options));
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super.apply(this, arguments);
      var customTypePropertyName = underscore(snapshot.modelName) + '_type';

      if (json.hasOwnProperty(customTypePropertyName)) {
        json.type = json[customTypePropertyName];
        Reflect.deleteProperty(json, customTypePropertyName);
      }
      return json;
    },

    extractErrors: function extractErrors(store, typeClass, payload, id) {
      var _this = this;

      if (payload && typeof payload === 'object' && payload.errors) {
        (function () {
          var messageForError = function messageForError(e) {
            return _this.get('intlService').findTranslationByKey(errorMessages[e.code]);
          };
          var errors = {};
          payload.errors.forEach(function (error) {
            if (isValidationError(error)) {
              errors[error.parameter] = errors[error.parameter] || [];
              errors[error.parameter].push(messageForError(error));
            }
          });
        })();
      }
      return this._super.apply(this, arguments);
    },

    /*
    This method removes from the `resources` key in the payload any model
    we want to ignore.
    */
    removeBacklistedSideloadedResources: function removeBacklistedSideloadedResources(resources) {
      if (!resources) {
        return;
      }
      Reflect.deleteProperty(resources, 'user_minimal');
      Reflect.deleteProperty(resources, 'team_minimal');
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/avatar', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      base64Data: { key: 'data' },
      avatarType: { key: 'type' },
      url: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/business-hour', ['exports', 'ember-data', 'frontend-cp/serializers/application'], function (exports, _emberData, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      holidays: { embedded: 'always' }
    },
    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.zones = JSON.stringify(json.zones);
      return json;
    }
  });
});
define('frontend-cp/serializers/case-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/case-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      field_fragment: { key: 'field' }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/case-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    },

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.case_field_type) {
        resourceHash.field_type = resourceHash.case_field_type;
        Reflect.deleteProperty(resourceHash, 'case_field_type');
      }
      return this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var payload = this._super.apply(this, arguments);
      payload.type = payload.field_type;
      Reflect.deleteProperty(payload, 'field_type');
      return payload;
    },

    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = {
        priorities: '/api/v1/cases/priorities',
        statuses: '/api/v1/cases/statuses',
        types: '/api/v1/cases/types'
      };
      return this._super.apply(this, arguments);
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/case-form', ['exports', 'ember', 'frontend-cp/serializers/application'], function (exports, _ember, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    keyForRelationship: function keyForRelationship(key, relationship, method) {
      if (!method || method === 'serialize') {
        if (relationship === 'belongsTo') {
          return _ember['default'].String.underscore(key) + '_id';
        }
        if (relationship === 'hasMany' && key === 'fields') {
          //TODO: make generic and move back into application serializers
          return 'case_field_ids';
        }
      }

      return _ember['default'].String.underscore(key);
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super.apply(this, arguments);

      /*
       * Pull case field ids, ordered by sort order as a comma separated list
       */
      json.case_field_ids = snapshot.hasMany('fields') //eslint-disable-line camelcase
      .sort(function (snapshotA, snapshotB) {
        return snapshotA.attr('sortOrder') - snapshotB.attr('sortOrder');
      }).map(function (e) {
        return e.id;
      }).join(',');
      return json;
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/case-reply', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      channelType: { key: 'channel' },
      caseType: { key: 'type_id' },
      'case': { serialize: false },
      posts: { serialize: false }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      var form = snapshot.belongsTo('case').belongsTo('form');
      json.field_values = this.serializeCustomFields(snapshot.attr('fieldValues'), form); //eslint-disable-line camelcase
      json.options.cc = snapshot.attr('options').attr('cc').toString();

      if (json.channel === 'NOTE') {
        Reflect.deleteProperty(json, 'options');
      }

      return json;
    },

    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      store.peekRecord(payload.data['case'].resource_type, payload.data['case'].id).rollbackAttributes();
      return this._super(store, primaryModelClass, payload, id, requestType);
    }
  });
});
define('frontend-cp/serializers/case-status', ['exports', 'frontend-cp/serializers/application', 'ember'], function (exports, _frontendCpSerializersApplication, _ember) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.case_status_type) {
        resourceHash.status_type = resourceHash.case_status_type;
        Reflect.deleteProperty(resourceHash, 'case_status_type');
      }
      return this._super.apply(this, arguments);
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      var key = relationship.key;
      json[key] = _ember['default'].get(snapshot, key).map(function (obj) {
        return obj.serialize({ includeId: false });
      });

      if (json[key].length === 0) {
        Reflect.deleteProperty(json, key);
      }

      return json;
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/case-type', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      var attrs = this._super.apply(this, arguments);
      attrs.type = resourceHash.case_type_type;
      Reflect.deleteProperty(resourceHash, 'case_type_type');
      return attrs;
    }
  });
});
define('frontend-cp/serializers/case', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      portal: { serialize: false },
      slaMetrics: { serialize: false },
      creationMode: { serialize: false },
      hasNotes: { serialize: false },
      hasAttachments: { serialize: false },
      rating: { serialize: false },
      ratingStatus: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      lastAgentActivityAt: { serialize: false },
      lastCustomerActivityAt: { serialize: false },
      lastCompletedAt: { serialize: false },
      sourceChannel: { serialize: false },
      view: { serialize: false },
      replyChannels: { serialize: false },
      lastReplier: { serialize: false },
      lastReplierIdentity: { serialize: false },
      brand: { serialize: false },
      lastAssignedBy: { serialize: false },
      sla: { serialize: false, key: 'slaVersion' },
      identity: { serialize: false },
      realtimeChannel: { serialize: false },
      creator: { serialize: false },
      channels: { serialize: false },
      creationTimestamp: { serialize: false },
      state: { serialize: false }
    },

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.brand && !Object.keys(resourceHash.brand).length) {
        Reflect.deleteProperty(resourceHash, 'brand');
      }

      return this._super.apply(this, arguments);
    },

    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = {
        messages: 'messages',
        posts: 'posts',
        channels: 'channels',
        activities: 'activities',
        replyChannels: 'reply/channels',
        tags: 'tags'
      };
      var agent = resourceHash.assignee && resourceHash.assignee.agent;
      var team = resourceHash.assignee && resourceHash.assignee.team;
      resourceHash.assignee_agent = agent && { id: agent.id, type: agent.resource_type };
      resourceHash.assignee_team = team && { id: team.id, type: team.resource_type };
      Reflect.deleteProperty(resourceHash, 'assignee');
      return this._super.apply(this, arguments);
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      if (relationship.key === 'tags') {
        json.tags = (snapshot.hasMany('tags') || []).map(function (snapshot) {
          return snapshot.attr('name');
        }).join(',');
      } else {
        this._super.apply(this, arguments);
      }
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super(snapshot, options);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields'), snapshot.belongsTo('form')); //eslint-disable-line camelcase
      Reflect.deleteProperty(json, 'custom_fields');

      json.type_id = json.case_type_id && parseInt(json.case_type_id, 10); // eslint-disable-line camelcase
      Reflect.deleteProperty(json, 'case_type_id');

      return json;
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/channel', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'uuid'
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/column', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'name'
  });
});
define('frontend-cp/serializers/credential', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      payload.data.id = 1;
      return this._super(store, primaryModelClass, payload, id, requestType);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/definition', ['exports', 'frontend-cp/serializers/application', 'npm:lodash'], function (exports, _frontendCpSerializersApplication, _npmLodash) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'field',

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      resourceHash.values = _npmLodash['default'].map(resourceHash.values, function (val, id) {
        return {
          value: id,
          string: val
        };
      });
      return this._super.apply(this, arguments);
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/event', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'uuid'
  });
});
define('frontend-cp/serializers/facebook-account', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      accountId: { serialize: false },
      title: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/feature-flag', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].LSSerializer.extend();
});
define('frontend-cp/serializers/field-option', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      markedForDeletion: { serialize: false },
      values: { embedded: 'always' }
    }
  });
});
define('frontend-cp/serializers/identity-autocomplete-email', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (!payload.data) {
        return this._super.apply(this, arguments);
      }

      // set parent model for identity record
      payload.data.forEach(function (record) {
        var type = record.identity.resource_type;
        var id = record.identity.id;

        var item = payload.resources[type][id];

        item.parent = {
          id: record.parent.id,
          resource_type: record.parent.resource_type
        };
        record.id = id;
        record.resource_type = 'identity_autocomplete_email';
      });

      payload.identity_autocomplete_email = payload.data;
      return this._super.apply(this, arguments);
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/locale', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = {
        strings: 'strings'
      };
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/serializers/macro', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      var agent = resourceHash.assignee && resourceHash.assignee.agent;
      var team = resourceHash.assignee && resourceHash.assignee.team;
      var caseType = resourceHash.macro_type;
      if (agent) {
        resourceHash.assignee_agent = { id: agent.id, type: agent.resource_type }; // eslint-disable-line camelcase
      }
      if (team) {
        resourceHash.assignee_team = { id: team.id, type: team.resource_type }; // eslint-disable-line camelcase
      }
      if (caseType) {
        resourceHash.case_type = { id: caseType.id, type: caseType.resource_type }; // eslint-disable-line camelcase
      }
      Reflect.deleteProperty(resourceHash, 'type');
      return this._super.apply(this, arguments);
    },

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.assignee) {
        resourceHash.assignee_type = resourceHash.assignee.type; // eslint-disable-line camelcase
      }
      return this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super.apply(this, arguments);
      if (!json.assignee_type) {
        Reflect.deleteProperty(json, 'assignee_type');
      }

      var caseType = snapshot.belongsTo('caseType');
      if (caseType) {
        json.type_id = caseType.id; // eslint-disable-line camelcase
      }
      return json;
    }
  });
});
define('frontend-cp/serializers/note', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      uuid: { serialize: false },
      subject: { serialize: false },
      creator: { serialize: false },
      identity: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      'case': { serialize: false }
    }
  });
});
define('frontend-cp/serializers/oauth-link', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'link'
  });
});
define('frontend-cp/serializers/organization-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/organization-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      field_fragment: { key: 'field' }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/organization-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    },

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.organization_field_type) {
        resourceHash.field_type = resourceHash.organization_field_type;
        Reflect.deleteProperty(resourceHash, 'organization_field_type');
      }
      return this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var payload = this._super.apply(this, arguments);
      payload.type = payload.field_type;
      Reflect.deleteProperty(payload, 'field_type');
      return payload;
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/organization-note', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (!payload.data || !Array.isArray(payload.data)) {
        return this._super.apply(this, arguments);
      }

      var originalData = payload.data;
      payload.resources = payload.resources || {};
      payload.resources.notes = payload.data.reduce(function (accum, note) {
        accum[note.id] = note;
        return accum;
      }, {});
      payload.data = [];
      payload.resource = 'organization_note';

      if (!originalData[0]) {
        return this._super.apply(this, arguments);
      }

      payload.resources.post = [];
      payload.data.forEach(function (record, i) {
        payload.resources.post.push({
          id: new Date().getTime() + '' + i,
          uuid: new Date().getTime() + '' + i,
          sequence: i,
          contents: record.body_text,
          creator: record.user,
          attachments: record.attachments,
          original: {
            id: record.id,
            resource_type: 'note'
          },
          createdAt: record.created_at,
          updatedAt: record.updated_at,
          resource_type: 'post',
          resource_url: record.resource_url
        });
      });

      return this._super.apply(this, arguments);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/organization', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      emails: { serialize: false },
      phones: { serialize: false },
      twitter: { serialize: false },
      facebook: { serialize: false },
      notes: { serialize: false },
      customFields: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    },

    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = {
        notes: 'notes'
      };
      return this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var json = this._super.apply(this, arguments);
      json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase
      return json;
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      if (relationship.key === 'tags') {
        json.tags = (snapshot.hasMany('tags') || []).map(function (snapshot) {
          return snapshot.attr('name');
        }).toString();
      } else if (relationship.key === 'domains') {
        json.domains = (snapshot.hasMany('domains') || []).map(function (snapshot) {
          return snapshot.attr('name');
        }).uniq().toString();
      } else {
        this._super.apply(this, arguments);
      }
    }
  });
});
define('frontend-cp/serializers/plan', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      payload.data.id = 1;
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/serializers/predicate-collection', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    primaryKey: 'uuid',

    serialize: function serialize(snapshot) {
      // For some reason we don't need to submit either UUID or operator properties
      var json = this._super.apply(this, arguments);
      return json.propositions;
    }
  });
});
define('frontend-cp/serializers/rating', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      var originalData = payload.data;
      payload.resources = payload.resources || {};
      payload.resources.macros = payload.data.reduce(function (accum, macro) {
        accum[macro.id] = macro;
        return accum;
      }, {});
      payload.data = [];
      payload.resource = 'rating';

      if (!originalData[0]) {
        return this._super.apply(this, arguments);
      }
      return this._super.apply(this, arguments);
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/relationship-fragment', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      resourceHash.relationship_id = resourceHash.id;
      resourceHash.relationship_type = resourceHash.resource_type;
      Reflect.deleteProperty(resourceHash, 'id');
      Reflect.deleteProperty(resourceHash, 'resource_type');
      return this._super.apply(this, arguments);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/role', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = { permissions: 'permissions' };
      return this._super.apply(this, arguments);
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/search-result', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      objectId: { key: 'id' }
    }
  });
});
define('frontend-cp/serializers/thumbnail', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({});
});
define('frontend-cp/serializers/twitter-account-callback', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      account: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/twitter-account', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      twitterId: { serialize: false },
      screenName: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false }
    }
  });
});
define('frontend-cp/serializers/user-field-type', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].JSONSerializer.extend({});
});
define('frontend-cp/serializers/user-field-value', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    attrs: {
      field_fragment: { key: 'field' }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/user-field', ['exports', 'frontend-cp/serializers/application', 'ember-data'], function (exports, _frontendCpSerializersApplication, _emberData) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      customerTitles: { embedded: 'always' },
      descriptions: { embedded: 'always' },
      options: { embedded: 'always' }
    },

    extractAttributes: function extractAttributes(modelClass, resourceHash) {
      if (resourceHash.user_field_type) {
        resourceHash.field_type = resourceHash.user_field_type;
        Reflect.deleteProperty(resourceHash, 'user_field_type');
      }
      return this._super.apply(this, arguments);
    },

    serialize: function serialize(snapshot, options) {
      var payload = this._super.apply(this, arguments);
      payload.type = payload.field_type;
      Reflect.deleteProperty(payload, 'field_type');
      return payload;
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/user-note', ['exports', 'frontend-cp/serializers/application'], function (exports, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend({
    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload, id, requestType) {
      if (!payload.data || !Array.isArray(payload.data)) {
        return this._super.apply(this, arguments);
      }

      var originalData = payload.data;
      payload.resources = payload.resources || {};
      payload.resources.notes = payload.data.reduce(function (accum, note) {
        accum[note.id] = note;
        return accum;
      }, {});
      payload.data = [];
      payload.resource = 'user_note';

      if (!originalData[0]) {
        return this._super.apply(this, arguments);
      }

      payload.resources.post = [];
      payload.data.forEach(function (record, i) {
        payload.resources.post.push({
          id: new Date().getTime() + '' + i,
          uuid: new Date().getTime() + '' + i,
          sequence: i,
          contents: record.body_text,
          creator: record.user,
          attachments: record.attachments,
          original: {
            id: record.id,
            resource_type: 'note'
          },
          createdAt: record.created_at,
          updatedAt: record.updated_at,
          resource_type: 'post',
          resource_url: record.resource_url
        });
      });

      return this._super.apply(this, arguments);
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/serializers/user', ['exports', 'frontend-cp/serializers/application', 'frontend-cp/mixins/custom-field-serialization'], function (exports, _frontendCpSerializersApplication, _frontendCpMixinsCustomFieldSerialization) {

  function getPrimaryEmailAddress(snapshot) {
    return snapshot.hasMany('emails').filter(function (identityEmail) {
      return identityEmail.attr('isPrimary');
    }).map(function (identityEmail) {
      return identityEmail.attr('email');
    })[0] || null;
  }

  exports['default'] = _frontendCpSerializersApplication['default'].extend(_frontendCpMixinsCustomFieldSerialization['default'], {
    attrs: {
      avatar: { serialize: false },
      phones: { serialize: false },
      twitter: { serialize: false },
      facebook: { serialize: false },
      customFields: { serialize: false },
      notes: { serialize: false },
      passwordUpdateAt: { serialize: false },
      avatarUpdateAt: { serialize: false },
      activityAt: { serialize: false },
      visitedAt: { serialize: false },
      createdAt: { serialize: false },
      updatedAt: { serialize: false },
      teams: { serialize: false }
    },

    extractRelationships: function extractRelationships(modelClass, resourceHash) {
      resourceHash.links = {
        notes: 'notes'
      };
      return this._super.apply(this, arguments);
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      if (relationship.key === 'teams') {
        if (json.role_id !== '4') {
          json.team_ids = (snapshot.hasMany('teams') || []).map(function (snapshot) {
            return snapshot.id;
          }).join(',');
        }
      } else if (relationship.key === 'tags') {
        json.tags = (snapshot.hasMany('tags') || []).map(function (snapshot) {
          return snapshot.attr('name');
        }).join(',');
      } else if (relationship.key === 'emails') {
        json.email = getPrimaryEmailAddress(snapshot);
      } else {
        this._super.apply(this, arguments);
      }
    },

    serializeAttribute: function serializeAttribute(snapshot, json, key, attribute) {
      if (key === 'agentCaseAccess') {
        if (json.role_id !== '4' && !json.agent_case_access) {
          json.agent_case_access = 'ALL';
        }
      } else if (key === 'organizationCaseAccess') {
        if (json.role_id === '4' && !json.organization_case_access) {
          json.organization_case_access = 'REQUESTED';
        }
      } else if (key === 'fieldValues') {
        json.field_values = this.serializeCustomFields(snapshot.attr('customFields')); //eslint-disable-line camelcase
        if (Object.keys(json.field_values).length === 0) {
          Reflect.deleteProperty(json, 'field_values');
        }
      } else {
        this._super.apply(this, arguments);
      }
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/serializers/view', ['exports', 'ember-data', 'frontend-cp/serializers/application'], function (exports, _emberData, _frontendCpSerializersApplication) {
  exports['default'] = _frontendCpSerializersApplication['default'].extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {
      updatedAt: { serialize: false },
      createdAt: { serialize: false },
      columns: { serialize: 'ids', deserialize: 'records' },
      predicateCollections: { serialize: 'records' }
    },

    serializeHasMany: function serializeHasMany(snapshot, json, relationship) {
      if (relationship.key === 'visibilityToTeams') {
        if (snapshot.attr('visibilityType') !== 'TEAM') {
          return;
        }
        json.team_ids = snapshot.hasMany('visibilityToTeams').mapBy('id');
      } else {
        this._super.apply(this, arguments);
      }
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('frontend-cp/services/analytics', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    metrics: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),

    setup: function setup() {
      var user = this.get('session.session.user');

      this.get('metrics').identify({
        distinctId: user.get('id'),
        name: user.get('fullName'),
        email: user.get('greeting'),
        locale: user.get('locale')
      });

      _ember['default'].set(this, 'metrics.context.userName', user.get('fullName'));
      _ember['default'].set(this, 'metrics.context.userId', user.get('id'));
      _ember['default'].set(this, 'metrics.context.userEmail', user.get('greeting'));
      _ember['default'].set(this, 'metrics.context.userLocale', user.get('locale'));
    }
  });
});
define('frontend-cp/services/api-adapter', ['exports', 'ember'], function (exports, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Service.extend({
    // Services
    store: service('store'),

    trashCase: function trashCase(caseId) {
      var _this = this;

      var adapter = this.container.lookup('adapter:case');
      var url = adapter.namespace + '/cases/' + caseId + '/trash';
      return adapter.ajax(url, 'put').then(function (response) {
        var store = _this.get('store');
        var state = response.data.state;
        store.update('case', { id: caseId, state: state });
      });
    },

    restoreCase: function restoreCase(caseId) {
      var _this2 = this;

      var adapter = this.container.lookup('adapter:case');
      var url = adapter.namespace + '/cases/' + caseId + '/restore';
      return adapter.ajax(url, 'put').then(function (response) {
        var store = _this2.get('store');
        var state = response.data.state;
        store.update('case', { id: caseId, state: state });
      });
    }
  });
});
/**
 * Wrapper for a collection of methods that make requests to the API that
 * cannot be readily modelled in an EmberData way
 */
define('frontend-cp/services/case-bulk-update', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({

    trashCases: function trashCases(caseIds) {
      var adapter = this.container.lookup('adapter:application');
      var adapterNamespace = adapter.get('namespace');
      var url = adapterNamespace + '/cases/trash?ids=' + caseIds.toString();

      return adapter.ajax(url, 'PUT', { data: { state: 'TRASH' } });
    },

    updateCases: function updateCases(caseIds, options) {
      var adapter = this.container.lookup('adapter:application');
      var adapterNamespace = adapter.get('namespace');
      var url = adapterNamespace + '/cases?ids=' + caseIds.toString();
      var payload = {};

      if (!Object.keys(options) || !Object.keys(options).length) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          return resolve();
        });
      } else {
        /*eslint-disable camelcase*/
        if (typeof options.assigneeTeam !== 'undefined') {
          payload.assignee_team_id = options.assigneeTeam.id;
        }
        if (typeof options.assigneeAgent !== 'undefined') {
          payload.assignee_agent_id = options.assigneeAgent.id;
        }
        if (typeof options.caseStatus !== 'undefined') {
          payload.status_id = options.caseStatus.id;
        }
        if (typeof options.casePriority !== 'undefined') {
          if (options.casePriority) {
            payload.priority_id = options.casePriority.id;
          } else {
            payload.priority_id = options.casePriority;
          }
        }
        if (typeof options.caseType !== 'undefined') {
          if (options.caseType) {
            payload.type_id = options.caseType.id;
          } else {
            payload.type_id = options.caseType;
          }
        }
        if (typeof options.tags !== 'undefined' && options.tags.length > 0) {
          payload.tags = options.tags.map(function (tag) {
            return tag.name;
          }).toString();
        }
        /*eslint-enable camelcase*/

        return adapter.ajax(url, 'PUT', { data: payload });
      }
    }
  });
});
define('frontend-cp/services/case-tab', ['exports', 'ember', 'npm:lodash', 'frontend-cp/utils/object'], function (exports, _ember, _npmLodash, _frontendCpUtilsObject) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  var getProperties = _ember['default'].getProperties;
  var merge = _ember['default'].merge;

  var getEditedTags = function getEditedTags(caseModel) {
    return caseModel.get('tags').map(function (tag) {
      return _ember['default'].Object.create({
        name: tag.get('name'),
        isPusherEdited: false,
        isNew: false
      });
    });
  };

  var getCustomFields = function getCustomFields(caseModel) {
    return caseModel.get('customFields').map(function (field) {
      return _ember['default'].Object.create({
        field: field.get('field'),
        value: field.get('value')
      });
    });
  };

  var copyCase = function copyCase(caseModel) {
    return _ember['default'].Object.create({
      subject: caseModel.get('subject'),
      assigneeTeam: caseModel.get('assigneeTeam'),
      assigneeAgent: caseModel.get('assigneeAgent'),
      requester: caseModel.get('requester'),
      status: caseModel.get('status'),
      caseType: caseModel.get('caseType'),
      priority: caseModel.get('priority'),
      form: caseModel.get('form')
    });
  };

  var convertErrorsToMap = function convertErrorsToMap(errors) {
    return (errors || []).filter(function (error) {
      return error.parameter;
    }).reduce(function (errorMap, error) {
      errorMap.set(error.parameter, true);
      return errorMap;
    }, _ember['default'].Object.create({}));
  };

  var rollbackCase = function rollbackCase(model, original, tags, fields) {
    model.get('errors').clear();
    model.setProperties({
      subject: original.get('subject'),
      assigneeTeam: original.get('assigneeTeam'),
      assigneeAgent: original.get('assigneeAgent'),
      requester: original.get('requester'),
      status: original.get('status'),
      caseType: original.get('caseType'),
      priority: original.get('priority'),
      form: original.get('form'),
      tags: tags,
      customFields: fields
    });
  };

  exports['default'] = _ember['default'].Service.extend({
    intl: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),
    timeline: _ember['default'].inject.service('timeline'),
    store: _ember['default'].inject.service(),
    tabStore: _ember['default'].inject.service(),
    tagService: _ember['default'].inject.service('tags'),

    initState: function initState(tabId, model, replyChannel) {
      var existingState = this.getState(tabId);
      // We want to create a new state object only once
      if (existingState.stateLoaded) {
        return;
      }

      var editedCase = copyCase(model);

      var initialState = _ember['default'].Object.create({
        stateLoaded: true,
        channelId: replyChannel ? replyChannel.get('id') : null,
        lastReplyChannelId: replyChannel ? replyChannel.get('id') : null,
        postContent: '',
        attachedPostFiles: [],
        loadingTop: false,
        loadingBottom: false,
        bottomPostsAvailable: true,
        posts: [],
        topPostsAvailable: false,
        errorMap: _ember['default'].Object.create(),
        isSaving: false,
        inReplyToUuid: null,
        suggestedPeople: null,
        suggestedPeopleTotal: 0,
        suggestedPeopleLoading: false,
        editedCase: editedCase,
        editedTags: getEditedTags(model),
        localCustomFields: getCustomFields(model),
        replyOptions: this.get('store').createFragment('case-reply-options', {
          cc: []
        }),
        propertiesChangeViaPusher: _ember['default'].Object.create({
          customFields: _ember['default'].Object.create()
        })
      });

      var state = merge(initialState, existingState);
      var caseStatus = state.get('editedCase.status');

      if (!model.get('isNew') && caseStatus.get('statusType') === 'NEW') {
        var statuses = this.get('store').peekAll('case-status');
        var pendingStatus = statuses.find(function (status) {
          return status.get('statusType') === 'OPEN';
        });
        state.set('editedCase.status', pendingStatus);
      }

      this.replaceState(tabId, state);
    },

    replaceState: function replaceState(tabId, state) {
      var tab = this.get('tabStore').getTab(tabId);
      var persistedState = getProperties(state, 'postContent', 'channelId', 'lastReplyChannelId', 'attachedPostFiles', 'isEditInProgress');

      this.get('tabStore').updateNonPersistedState(tab, { 'case': state });
      this.get('tabStore').updateState(tab, { 'case': persistedState });
    },

    getState: function getState(tabId) {
      var tab = this.get('tabStore').getTab(tabId);
      var nonPersistedState = tab.nonPersistedState;

      if (!nonPersistedState['case']) {
        nonPersistedState['case'] = _ember['default'].Object.create((0, _frontendCpUtilsObject.jsonToObject)(tab.state['case'] || {}));
      }

      return nonPersistedState['case'];
    },

    resetState: function resetState(tabId) {
      var state = this.getState(tabId);
      state.set('attachedPostFiles', []);
      state.set('propertiesChangeViaPusher', _ember['default'].Object.create({
        customFields: _ember['default'].Object.create()
      }));
      state.set('isSaving', false);
      state.set('inReplyToUuid', null);
      state.set('postContent', '');
      state.set('replyOptions.cc', []);

      this.persistTabState(tabId);
    },

    loadPosts: function loadPosts(tabId, _ref) {
      var model = _ref.model;
      var filter = _ref.filter;
      var sortOrder = _ref.sortOrder;
      var postId = _ref.postId;

      var state = this.getState(tabId);
      state.set('posts', []);
      state.set('bottomPostsAvailable', true);
      state.set('topPostsAvailable', Boolean(postId));
      this.loadPostsBelow(tabId, { model: model, filter: filter, sortOrder: sortOrder, postId: postId || null, including: true });
    },

    loadPostsAbove: function loadPostsAbove(tabId, _ref2) {
      var model = _ref2.model;
      var filter = _ref2.filter;
      var sortOrder = _ref2.sortOrder;
      var postId = _ref2.postId;

      var state = this.getState(tabId);
      this.get('timeline').loadPostsAbove(state, { model: model, filter: filter, sortOrder: sortOrder, postId: postId });
    },

    loadPostsBelow: function loadPostsBelow(tabId, _ref3) {
      var model = _ref3.model;
      var filter = _ref3.filter;
      var sortOrder = _ref3.sortOrder;
      var postId = _ref3.postId;
      var including = _ref3.including;

      var state = this.getState(tabId);
      this.get('timeline').loadPostsBelow(state, { model: model, filter: filter, sortOrder: sortOrder, postId: postId, including: including });
    },

    refreshTags: function refreshTags(model) {
      // @TODO this is modifying the case under the hood, needs to stop
      this.get('tagService').refreshTagsForCase(model);
    },

    addPostFromReply: function addPostFromReply(tabId, model, post, sortOrder) {
      var state = this.getState(tabId);
      this.get('timeline').addPost(model, post);

      if (sortOrder === 'newest' && !state.get('topPostsAvailable')) {
        state.get('posts').unshiftObject(post);
      } else if (sortOrder === 'oldest' && !state.get('bottomPostsAvailable')) {
        state.get('posts').pushObject(post);
      }
    },

    persistTabState: function persistTabState(tabId) {
      this.replaceState(tabId, this.getState(tabId));
    },

    cancelAttachment: function cancelAttachment(tabId, attachment) {
      var state = this.getState(tabId);
      var attachments = state.get('attachedPostFiles').filter(function (u) {
        return u.get('status') !== 'CANCELLED';
      });
      state.set('attachedPostFiles', attachments);
      this.persistTabState(tabId);
    },

    setInReplyTo: function setInReplyTo(tabId, replyToUUID) {
      this.getState(tabId).set('inReplyToUuid', replyToUUID);
      this.persistTabState(tabId);
    },

    setChannel: function setChannel(tabId, channel) {
      var state = this.getState(tabId);
      var channelId = undefined;
      if (channel && channel.get('id')) {
        channelId = channel.get('id');
      } else {
        var lastReplyChannelId = state.get('lastReplyChannelId');
        channelId = lastReplyChannelId ? lastReplyChannelId : null;
      }

      state.set('channelId', channelId);
      state.set('lastReplyChannelId', channelId);

      this.get('metrics').trackEvent({
        event: 'Case Reply Channel Changed',
        category: 'Case',
        action: 'click',
        label: 'channel dropdown'
      });
      this.persistTabState(tabId);
    },

    setNote: function setNote(tabId, channels) {
      this.getState(tabId).set('channelId', channels.findBy('channelType', 'NOTE').get('id'));
      this.persistTabState(tabId);
    },

    setEditInProgress: function setEditInProgress(tabId, state) {
      this.getState(tabId).set('isEditInProgress', state);
      this.persistTabState(tabId);
    },

    addCC: function addCC(tabId, email) {
      this.getState(tabId).get('replyOptions.cc').pushObject(email);
      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'CC Participant Added',
        category: 'Case CC',
        action: 'click',
        label: 'add button'
      });
    },

    setCCs: function setCCs(tabId, emails) {
      this.getState(tabId).set('replyOptions.cc', emails);
      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'CC Participants Set',
        category: 'Case CC',
        action: 'click',
        label: 'add button'
      });
    },

    removeCC: function removeCC(tabId, email) {
      this.getState(tabId).get('replyOptions.cc').removeObject(email);
      this.persistTabState(tabId);
      this.get('metrics').trackEvent({
        event: 'CC Participant Removed',
        category: 'Case CC',
        action: 'click',
        label: 'x button'
      });
    },

    getAssigneeFromMacro: function getAssigneeFromMacro(user, macro) {
      switch (macro.get('assignee.type')) {
        case 'UNASSIGNED':
          return [null, null];
        case 'CURRENT_AGENT':
          return [user.get('teams.firstObject'), user];
        case 'TEAM':
          return [macro.get('assignee.team'), macro.get('assignee.agent')];
        case 'AGENT':
          return [macro.get('assignee.team'), macro.get('assignee.agent')];
      }
    },

    applyMacro: function applyMacro(tabId, model, user, channels, macro) {
      var _this = this;

      var replyType = macro.get('replyType');
      var state = this.getState(tabId);

      if (replyType) {
        if (replyType === 'REPLY') {
          this.setChannel(tabId);
        } else {
          this.setNote(tabId, channels);
        }
      }

      var contentsToAdd = macro.get('replyContents');

      if (contentsToAdd) {
        var postContent = state.get('postContent');
        if (postContent.trim()) {
          state.set('postContent', postContent + '\n' + contentsToAdd);
        } else {
          state.set('postContent', contentsToAdd);
        }

        state.set('isEditInProgress', true);
      }

      var newStatus = macro.get('status');

      if (newStatus) {
        this.setStatus(tabId, newStatus);
      }

      var newPriority = macro.get('priority');

      if (newPriority) {
        this.setPriority(tabId, newPriority);
      }

      var priorityAction = macro.get('priorityAction');

      if (priorityAction) {
        (function () {
          var currentCase = state.get('editedCase');
          var newPriorityLevel = undefined;

          if (priorityAction === 'INCREASE_ONE_LEVEL') {
            newPriorityLevel = currentCase.get('priority.level') + 1;
          } else {
            newPriorityLevel = Math.max(1, currentCase.get('priority.level') - 1);
          }

          var newPriority = _this.get('store').peekAll('case-priority').filter(function (priority) {
            return priority.get('level') === newPriorityLevel;
          }).get('firstObject');

          if (newPriority) {
            _this.setPriority(tabId, newPriority);
          }
        })();
      }

      var newType = macro.get('caseType');

      if (newType) {
        this.setType(tabId, newType);
      }

      var newAssignee = this.getAssigneeFromMacro(user, macro);

      if (newAssignee) {
        this.setAssignee.apply(this, [tabId].concat(_toConsumableArray(newAssignee)));
      }

      macro.get('addTags').forEach(function (name) {
        _this.addTag(tabId, model, name);
      });

      macro.get('removeTags').forEach(function (name) {
        _this.removeTag(tabId, _this.get('tagService').getTagByName(name));
      });

      this.persistTabState(tabId);

      this.get('metrics').trackEvent({
        event: 'Macro Applied',
        category: 'Case',
        action: 'click',
        label: 'macro dropdown'
      });
    },

    addTag: function addTag(tabId, model, tagName) {
      var state = this.getState(tabId);
      var editedTags = state.get('editedTags');
      if (editedTags.find(function (tag) {
        return tag.get('name') === tagName;
      })) {
        return;
      }
      var pusherChangedTags = state.get('propertiesChangeViaPusher.tags');
      var newTag = _ember['default'].Object.create({
        name: tagName,
        isPusherEdited: pusherChangedTags ? pusherChangedTags.get(tagName) : false,
        isNew: !model.get('tags').find(function (tag) {
          return tag.get('name') === tagName;
        })
      });
      editedTags.pushObject(newTag);
      state.set('errorMap.tags', false);
    },

    removeTag: function removeTag(tabId, tag) {
      var state = this.getState(tabId);
      var tags = state.get('editedTags').rejectBy('name', tag.get('name'));
      state.set('editedTags', tags);
      state.set('errorMap.tags', false);
      this.persistTabState(tabId);
    },

    setPostContent: function setPostContent(tabId, newContent) {
      var state = this.getState(tabId);
      state.set('postContent', newContent);
      state.set('errorMap.contents', false);
      this.persistTabState(tabId);
    },

    setSubject: function setSubject(tabId, subject) {
      var state = this.getState(tabId);
      state.set('editedCase.subject', subject);
      state.set('errorMap.subject', false);
      this.persistTabState(tabId);
    },

    setRequester: function setRequester(tabId, requester) {
      var state = this.getState(tabId);
      state.set('editedCase.requester', requester);
      state.set('errorMap.requester_id', false);
    },

    setAssignee: function setAssignee(tabId, team, agent) {
      var state = this.getState(tabId);
      state.set('editedCase.assigneeAgent', agent);
      state.set('editedCase.assigneeTeam', team);
      state.set('errorMap.assignee_agent_id', false);
      state.set('errorMap.assignee_team_id', false);
      this.persistTabState(tabId);
    },

    setStatus: function setStatus(tabId, status) {
      var state = this.getState(tabId);
      state.set('editedCase.status', status);
      state.set('errorMap.status_id', false);
    },

    setType: function setType(tabId, type) {
      var state = this.getState(tabId);
      state.set('editedCase.caseType', type);
      state.set('errorMap.type_id', false);
      this.persistTabState(tabId);
    },

    setPriority: function setPriority(tabId, priority) {
      var state = this.getState(tabId);
      state.set('editedCase.priority', priority);
      state.set('errorMap.priority_id', false);
    },

    setForm: function setForm(tabId, form) {
      var state = this.getState(tabId);
      state.set('editedCase.form', form);
      state.set('errorMap.form_id', false);
    },

    setCustomField: function setCustomField(tabId, field, value) {
      var state = this.getState(tabId);
      var localCustomFields = state.get('localCustomFields');
      var valueObject = localCustomFields.find(function (value) {
        return value.get('field.id') === field.get('id');
      });
      if (!valueObject) {
        valueObject = _ember['default'].Object.create({ field: field, value: value });
        localCustomFields.pushObject(valueObject);
      }
      valueObject.set('value', value);
      state.get('errorMap').set(field.get('key'), false);
      this.persistTabState(tabId);
    },

    updateModel: function updateModel(model, state) {
      var _this2 = this;

      var editedCase = state.get('editedCase');

      model.setProperties({
        subject: editedCase.get('subject'),
        assigneeTeam: editedCase.get('assigneeTeam'),
        assigneeAgent: editedCase.get('assigneeAgent'),
        requester: editedCase.get('requester'),
        status: editedCase.get('status'),
        caseType: editedCase.get('caseType'),
        priority: editedCase.get('priority'),
        form: editedCase.get('form'),
        tags: state.get('editedTags').map(function (tag) {
          return _this2.get('tagService').getTagByName(tag.get('name'));
        }),
        customFields: state.get('localCustomFields').map(function (customField) {
          return _this2.get('store').createFragment('case-field-value', {
            fieldFragment: _this2.get('store').createFragment('relationship-fragment', {
              relationshipId: customField.get('field.id'),
              relationshipType: customField.get('field.type')
            }),
            value: customField.get('value')
          });
        })
      });
    },

    updateTabTitle: function updateTabTitle(tabId, label) {
      var tab = this.get('tabStore').getTab(tabId);
      this.get('tabStore').update(tab, { label: label });
    },

    update: function update(tabId, model, channel) {
      var _this3 = this;

      // we are just updating the case -- don't create a case-reply
      // UPDATE - No reply
      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var state = this.getState(tabId);

      this.updateModel(model, state);
      state.set('isSaving', true);

      return model.save().then(function () {
        _this3.resetState(tabId); // RESET STATE
        _this3.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        state.set('isEditInProgress', false);

        _this3.updateTabTitle(tabId, model.get('subject'));

        _this3.get('metrics').trackEvent({
          event: 'Case Updated',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this3.get('metrics').trackEvent({
          event: 'Case Update Failed',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    create: function create(tabId, model, channel) {
      var _this4 = this;

      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var state = this.getState(tabId);
      var uploads = state.get('attachedPostFiles');
      var attachmentIds = uploads.mapBy('attachmentId').compact();

      this.updateModel(model, state);

      model.set('contents', state.get('postContent'));
      model.set('channel', channel.get('channelType'));
      model.set('channelId', channel.get('account.id'));
      model.set('attachmentFileIds', attachmentIds);

      state.set('isSaving', true);

      return model.save().then(function () {
        _this4.resetState(tabId); // RESET STATE
        _this4.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        state.set('isEditInProgress', false);

        _this4.updateTabTitle(tabId, model.get('subject'));

        _this4.get('metrics').trackEvent({
          event: 'Case Created',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this4.get('metrics').trackEvent({
          event: 'Case Create Failed',
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    reply: function reply(tabId, model, channel, sortOrder) {
      var _this5 = this;

      var state = this.getState(tabId);
      var originalCase = copyCase(model);
      var originalTags = model.get('tags').map(function (tag) {
        return tag;
      });
      var originalCustomFields = model.get('customFields').map(function (field) {
        return field;
      });
      var uploads = state.get('attachedPostFiles');
      var attachmentIds = uploads.mapBy('attachmentId').compact();
      var replyOptions = state.get('replyOptions');
      var inReplyToUuid = state.get('inReplyToUuid');
      var post = state.get('postContent').trim();

      state.set('isSaving', true);
      this.updateModel(model, state);

      return model.saveWithPost(post, channel, attachmentIds, replyOptions, inReplyToUuid).then(function (caseReply) {
        caseReply.get('posts').forEach(function (post) {
          _this5.addPostFromReply(tabId, model, post, sortOrder);
        });

        _this5.resetState(tabId); // RESET STATE
        _this5.refreshTags(model);

        state.set('editedTags', getEditedTags(model));
        state.set('localCustomFields', getCustomFields(model));
        state.set('isEditInProgress', false);

        _this5.updateTabTitle(tabId, model.get('subject'));

        _this5.get('metrics').trackEvent({
          event: 'Case Replied' + (channel.get('channelType') === 'NOTE' ? ' (with note)' : ''),
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });

        if (attachmentIds.length) {
          _this5.get('metrics').trackEvent({
            event: 'Case Attachments Added',
            category: 'Case',
            action: 'click',
            label: 'submit button',
            value: attachmentIds.length
          });
        }
      }, function (e) {
        rollbackCase(model, originalCase, originalTags, originalCustomFields);
        state.set('errorMap', convertErrorsToMap(e.errors));
        state.set('isSaving', false);

        _this5.get('metrics').trackEvent({
          event: 'Case Reply Failed' + (channel.get('channelType') === 'NOTE' ? ' (with note)' : ''),
          category: 'Case',
          action: 'click',
          label: 'submit button'
        });
        throw e;
      });
    },

    hasReply: function hasReply(tabId) {
      var state = this.getState(tabId);
      var attachmentIds = state.get('attachedPostFiles').mapBy('attachmentId').compact();
      return state.get('postContent').trim() !== '' || attachmentIds.length > 0;
    },

    isUploadInProgress: function isUploadInProgress(tabId) {
      // @TODO we need to do something better here, UI wise.
      var uploads = this.getState(tabId).get('attachedPostFiles');
      return uploads.any(function (u) {
        return u.get('status') === 'PROGRESS';
      });
    },

    updateCaseFromPusher: function updateCaseFromPusher(serverData, tabId, caseId) {
      var _this6 = this;

      var state = this.getState(tabId);
      var caseModel = this.get('store').peekRecord('case', caseId);

      var propertiesChangeViaPusher = state.get('propertiesChangeViaPusher');
      var original = copyCase(caseModel);
      var originalTags = caseModel.get('tags').toArray().slice(0);
      var originalCustomFieldsHash = {};
      caseModel.get('customFields').forEach(function (caseField) {
        originalCustomFieldsHash[caseField.get('field.id')] = caseField.get('value');
      });
      var editedCase = state.get('editedCase');
      var localCustomFields = state.get('localCustomFields');
      var errorMap = state.get('errorMap');

      if (caseModel.get('isSaving')) {
        return;
      }

      caseModel.reload().then(function () {
        if (original.get('assigneeTeam') !== caseModel.get('assigneeTeam') || original.get('assigneeAgent') !== caseModel.get('assigneeAgent')) {
          editedCase.set('assigneeTeam', caseModel.get('assigneeTeam'));
          editedCase.set('assigneeAgent', caseModel.get('assigneeAgent'));
          errorMap.set('assignee_agent_id', false);
          errorMap.set('assignee_team_id', false);
          propertiesChangeViaPusher.set('assignee', true);
        }

        var properties = ['subject', 'requester', 'status', 'caseType', 'priority', 'form'];
        properties.forEach(function (property) {
          if (original.get(property) !== caseModel.get(property)) {
            editedCase.set(property, caseModel.get(property));
            errorMap.set(property, false);
            propertiesChangeViaPusher.set(property, true);
          }
        });

        _this6.get('store').peekAll('case-field').forEach(function (field) {
          var fieldPredicate = function fieldPredicate(fieldValue) {
            return fieldValue.get('field.id') === field.get('id');
          };
          var updatedField = caseModel.get('customFields').find(fieldPredicate);
          var userModifiedField = localCustomFields.find(fieldPredicate);

          var originalValue = originalCustomFieldsHash[field.get('id')];
          var updatedValue = updatedField ? updatedField.get('value') : undefined; // eslint-disable-line no-undefined
          var userModifiedValue = userModifiedField ? userModifiedField.get('value') : undefined; // eslint-disable-line no-undefined

          if (originalValue !== updatedValue) {
            // if the missing value was replaced with an empty string or vice versa, we won't mark it
            // as changed via pusher (given that the local value was also falsish)
            var isFalsish = function isFalsish(val) {
              return val === undefined || val === '';
            }; // eslint-disable-line no-undefined
            var sameish = _npmLodash['default'].every([userModifiedValue, originalValue, updatedValue], isFalsish);
            if (!sameish) {
              propertiesChangeViaPusher.get('customFields').set(field.get('id'), true);
            }
            errorMap.set(field.get('key'), false);
            if (updatedField) {
              if (userModifiedField) {
                userModifiedField.set('value', updatedValue);
              } else {
                var value = updatedField.get('value');
                var newField = _ember['default'].Object.create({ field: field, value: value });
                localCustomFields.pushObject(newField);
              }
            } else {
              localCustomFields.removeObject(userModifiedField);
            }
          }
        });

        _this6.get('tagService').refreshTagsForCase(caseModel).then(function (serverTags) {
          var editedTags = state.get('editedTags');

          var serverTagNames = serverTags.map(function (tag) {
            return tag.get('name');
          });
          var originalTagNames = originalTags.map(function (tag) {
            return tag.get('name');
          });
          var tagsWereModified = serverTagNames.length !== originalTagNames.length || _npmLodash['default'].difference(serverTagNames, originalTagNames).length > 0;

          if (tagsWereModified) {
            errorMap.set('tags', false);
            propertiesChangeViaPusher.set('tags', _ember['default'].Object.create());
          }

          // Tags aded by the server
          serverTagNames.forEach(function (tagName) {
            if (originalTagNames.indexOf(tagName) === -1) {
              propertiesChangeViaPusher.get('tags').set(tagName, true);
              var tag = editedTags.find(function (tag) {
                return tag.get('name') === tagName;
              });
              if (!tag) {
                tag = _ember['default'].Object.create({
                  name: tagName
                });
                editedTags.pushObject(tag);
              }
              tag.set('isPusherEdited', true);
              tag.set('isNew', false);
            }
          });

          // Tags removed by the server
          originalTagNames.forEach(function (tagName) {
            if (serverTagNames.indexOf(tagName) === -1) {
              propertiesChangeViaPusher.get('tags').set(tagName, true);
              var tag = editedTags.find(function (tag) {
                return tag.get('name') === tagName;
              });
              if (tag) {
                editedTags.removeObject(tag);
              }
            }
          });

          _this6.persistTabState(tabId);
        });
      });
    }
  });
});
define('frontend-cp/services/custom-fields/list', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    componentFor: function componentFor(fieldType) {
      switch (fieldType) {
        case 'TEXT':
          return 'ko-info-bar/field/text';
        case 'TEXTAREA':
          return 'ko-info-bar/field/multiline-text';
        case 'CHECKBOX':
          return 'ko-info-bar/field/checkbox';
        case 'SELECT':
          return 'ko-info-bar/field/select';
        case 'CASCADINGSELECT':
          return 'ko-info-bar/field/cascadingselect';
        case 'RADIO':
          return 'ko-info-bar/field/radio';
        case 'NUMERIC':
          return 'ko-info-bar/field/numeric';
        case 'DECIMAL':
          return 'ko-info-bar/field/decimal';
        case 'FILE':
          return 'ko-info-bar/field/file';
        case 'YESNO':
          return 'ko-info-bar/field/yesno';
        case 'DATE':
          return 'ko-info-bar/field/date';
        case 'REGEX':
          return 'ko-info-bar/field/regex';
        default:
          return '';
      }
    }
  });
});
define('frontend-cp/services/custom-fields/options', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    optionsToBeDeleted: [],

    save: function save(options) {
      var promises = [];

      options.forEach(function (option) {
        option.get('values').forEach(function (value) {
          promises.push(value.save());
        });
        promises.push(option.save());
      });

      return promises;
    },

    create: function create() {
      var store = this.get('store');
      var locales = store.peekAll('locale');

      var newFieldOption = store.createRecord('field-option');
      locales.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        newFieldOption.get('values').pushObject(localeField);
      });

      return newFieldOption;
    },

    add: function add(options) {
      var maxSortOrder = Reflect.apply(Math.max, Math, options.map(function (option) {
        return option.get('sortOrder');
      }));

      // maxSortOrder can be +Infinity, if options are empty
      if (maxSortOrder < 0) {
        maxSortOrder = 0;
      }

      var newFieldOption = this.create();
      newFieldOption.set('sortOrder', maxSortOrder + 1);

      options.pushObject(newFieldOption);
    },

    remove: function remove(option) {
      if (option.get('isNew')) {
        option.rollbackAttributes();
      } else if (!option.get('isDeleted')) {
        option.set('markedForDeletion', true);
      }

      this.get('optionsToBeDeleted').pushObject(option);
    },

    clear: function clear(options) {
      var promises = [];
      // saving the model will re-add all the options
      // we have marked for deletion - remove them again
      this.get('optionsToBeDeleted').forEach(function (option) {
        if (!option.get('isDeleted')) {
          option.get('values').forEach(function (value) {
            value.deleteRecord();
          });
          option.deleteRecord();
        }

        option.get('values').forEach(function (value) {
          promises.push(value.save());
        });

        promises.push(option.save());

        options.removeObject(option);
      });

      this.get('optionsToBeDeleted').clear();

      return promises;
    },

    rollbackAttributes: function rollbackAttributes(options) {
      if (!options.get('length')) {
        return;
      }

      options.toArray().forEach(function (option) {
        option.get('values').toArray().forEach(function (value) {
          if (value) {
            value.rollbackAttributes();
          }
        });
        option.rollbackAttributes();
      });
    },

    saveByFieldType: function saveByFieldType(modelPrefix, fieldType) {
      var promises = [];

      switch (fieldType) {
        case 'PRIORITY':
          this.get('store').peekAll(modelPrefix + 'priority').forEach(function (priority) {
            promises.push(priority.save());
          });
          break;

        case 'STATUS':
          this.get('store').peekAll(modelPrefix + 'status').forEach(function (status) {
            if (status.get('statusType') === 'CUSTOM') {
              promises.push(status.save());
            }
          });
          break;

        case 'TYPE':
          this.get('store').peekAll(modelPrefix + 'type').forEach(function (type) {
            promises.push(type.save());
          });
          break;
      }

      return promises;
    }
  });
});
define('frontend-cp/services/custom-fields/types', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    availableTypes: [{ name: 'TEXT', nameIntlKey: 'admin.casefields.type.text.name', descriptionIntlKey: 'admin.casefields.type.text.description' }, { name: 'TEXTAREA', nameIntlKey: 'admin.casefields.type.textarea.name', descriptionIntlKey: 'admin.casefields.type.textarea.description' }, { name: 'RADIO', nameIntlKey: 'admin.casefields.type.radio.name', descriptionIntlKey: 'admin.casefields.type.radio.description' }, { name: 'SELECT', nameIntlKey: 'admin.casefields.type.dropdown.name', descriptionIntlKey: 'admin.casefields.type.dropdown.description' }, { name: 'CHECKBOX', nameIntlKey: 'admin.casefields.type.checkbox.name', descriptionIntlKey: 'admin.casefields.type.checkbox.description' }, { name: 'NUMERIC', nameIntlKey: 'admin.casefields.type.numeric.name', descriptionIntlKey: 'admin.casefields.type.numeric.description' }, { name: 'DECIMAL', nameIntlKey: 'admin.casefields.type.decimal.name', descriptionIntlKey: 'admin.casefields.type.decimal.description' }, { name: 'FILE', nameIntlKey: 'admin.casefields.type.file.name', descriptionIntlKey: 'admin.casefields.type.file.description' }, { name: 'YESNO', nameIntlKey: 'admin.casefields.type.yesno.name', descriptionIntlKey: 'admin.casefields.type.yesno.description' }, { name: 'CASCADINGSELECT', nameIntlKey: 'admin.casefields.type.cascadingselect.name', descriptionIntlKey: 'admin.casefields.type.cascadingselect.description' }, { name: 'DATE', nameIntlKey: 'admin.casefields.type.date.name', descriptionIntlKey: 'admin.casefields.type.date.description' }, { name: 'REGEX', nameIntlKey: 'admin.casefields.type.regex.name', descriptionIntlKey: 'admin.casefields.type.regex.description' }],

    getTypeByName: function getTypeByName(name) {
      var matched = this.get('availableTypes').filter(function (record) {
        return record.name === name;
      });

      return matched.length ? matched[0] : {};
    }
  });
});
define('frontend-cp/services/custom-fields', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    store: _ember['default'].inject.service('store'),
    customFieldsOptions: _ember['default'].inject.service('custom-fields/options'),
    customFieldsTypes: _ember['default'].inject.service('custom-fields/types'),
    sorter: _ember['default'].inject.service('sorter'),

    getTitleBreadcrumbs: function getTitleBreadcrumbs(model) {
      var title = [];
      var type = this.get('customFieldsTypes').getTypeByName(model.get('fieldType'));
      var stateModifier = model.get('isNew') ? 'new' : 'edit';

      title.push(this._getTranslation(this._getTranslationPrefix(model.constructor.modelName)));

      if (model.get('title')) {
        title.push(model.get('title'));
      } else {
        title.push(this._getTranslation(type.nameIntlKey));
        title.push(this._getTranslation('admin.fields.' + stateModifier + '.heading'));
      }

      return title.join(' / ');
    },

    create: function create(model) {
      var store = this.get('store');
      var locales = store.peekAll('locale');

      model.set('is_system', false);

      locales.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        model.get('customerTitles').pushObject(localeField);
      });
      locales.forEach(function (element) {
        var localeField = store.createRecord('locale-field', {
          locale: element.get('locale')
        });
        model.get('descriptions').pushObject(localeField);
      });

      if (model.get('isChoiceField') && model.get('options.length') === 0) {
        var newFieldOption = this.get('customFieldsOptions').create();

        model.get('options').pushObject(newFieldOption);
      }

      return model;
    },

    save: function save(model) {
      var _this = this;

      return model.save().then(function () {
        _this.rollback(model);
        model.cacheRelationships();

        return _ember['default'].RSVP.Promise.resolve();
      });
    },

    hasChangedOptions: function hasChangedOptions(options) {
      // Locale is always changed when we create a new record, need to omit
      // cases where the only change is setting the default locales
      var localeChanges = _npmLodash['default'].flatten(options.map(function (opt) {
        return _npmLodash['default'].flatten(opt.get('values').map(function (val) {
          return Object.keys(val.changedAttributes());
        }));
      }));

      var optionChanges = _npmLodash['default'].flatten(options.map(function (opt) {
        return Object.keys(opt.changedAttributes());
      }));

      return !_npmLodash['default'].every(localeChanges, function (c) {
        return c === 'locale';
      }) || optionChanges.length > 0;
    },

    rollback: function rollback(model) {
      this.get('customFieldsOptions').rollbackAttributes(model.get('options'));

      model.get('customerTitles').toArray().forEach(function (locale) {
        locale.rollbackAttributes();
      });
      model.get('descriptions').toArray().forEach(function (locale) {
        locale.rollbackAttributes();
      });
      model.get('options').toArray().forEach(function (option) {
        option.get('values').toArray().forEach(function (value) {
          value.rollbackAttributes();
        });
      });
      model.rollbackAttributes();
    },

    reorder: function reorder(_, models) {
      this.get('sorter').sort(models);
    },

    _saveReorder: function _saveReorder(url, options) {
      var adapter = this.container.lookup('adapter:application');
      adapter.ajax(url, 'PUT', options);
    },

    toggleEnabled: function toggleEnabled(field) {
      field.toggleProperty('isEnabled');
      return field.save();
    },

    destroyRecord: function destroyRecord(field) {
      return field.destroyRecord();
    },

    addOption: function addOption(model) {
      this.get('customFieldsOptions').add(model.get('options'));
    },

    removeOption: function removeOption(option) {
      this.get('customFieldsOptions').remove(option);
    },

    validateTransition: function validateTransition(controller, transition) {
      var changedAttributes = controller.getChangedAttributes();
      var hasChangedOptions = controller.hasChangedOptions();
      var onlyFieldTypeChanged = Object.keys(changedAttributes).length === 1 && changedAttributes.fieldType;

      if (hasChangedOptions || !onlyFieldTypeChanged) {
        if (controller.userHasChangedModel()) {
          if (confirm(this._getTranslation('generic.confirm.lose_changes'))) {
            // eslint-disable-line
            controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
            return false;
          }
        }
      }

      // edge case - we created an empty model, so don't ask
      // a user to to confirm anything here; it's empty, so
      // just delete it
      if (controller.get('model.isNew')) {
        controller.send('rollBackModel');
      }
    },

    baseTypeKeyForFieldType: function baseTypeKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
        case 'TEXT':
          return 'admin.casefields.type.text.name';

        case 'MESSAGE':
        case 'TEXTAREA':
          return 'admin.casefields.type.textarea.name';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
        case 'SELECT':
        case 'DROPDOWN':
          return 'admin.casefields.type.dropdown.name';

        case 'RADIO':
          return 'admin.casefields.type.radio.name';
        case 'CHECKBOX':
          return 'admin.casefields.type.checkbox.name';
        case 'NUMERIC':
          return 'admin.casefields.type.numeric.name';
        case 'DECIMAL':
          return 'admin.casefields.type.decimal.name';
        case 'FILE':
          return 'admin.casefields.type.file.name';
        case 'YESNO':
          return 'admin.casefields.type.yesno.name';
        case 'CASCADINGSELECT':
          return 'admin.casefields.type.cascadingselect.name';
        case 'DATE':
          return 'admin.casefields.type.date.name';
        case 'REGEX':
          return 'admin.casefields.type.regex.name';
      }
    },

    baseKeyForFieldType: function baseKeyForFieldType(fieldType) {
      switch (fieldType) {
        case 'SUBJECT':
          return 'TEXT';

        case 'MESSAGE':
          return 'TEXTAREA';

        case 'PRIORITY':
        case 'STATUS':
        case 'TYPE':
        case 'ASSIGNEE':
        case 'TEAM':
          return 'SELECT';
        default:
          return fieldType;
      }
    },

    _getOptionPromises: function _getOptionPromises(options, typeKey, fieldType) {
      var fieldOptions = this.get('customFieldsOptions');
      var promises = [];

      promises = promises.concat(fieldOptions.clear(options));
      promises = promises.concat(fieldOptions.save(options));
      promises = promises.concat(fieldOptions.saveByFieldType(typeKey, fieldType));

      return promises;
    },

    _addNotification: function _addNotification(translationKey) {
      var type = arguments.length <= 1 || arguments[1] === undefined ? 'error' : arguments[1];

      this.get('notification').add({
        type: type,
        dismissable: true,
        autodismiss: true,
        title: this._getTranslation(translationKey),
        body: null
      });
    },

    _getModelPrefix: function _getModelPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'case-';
      } else if (typeKey === 'user-field') {
        return 'user-';
      } else if (typeKey === 'organization-field') {
        return 'organization-';
      }
    },

    _getUrlPrefix: function _getUrlPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'cases';
      } else if (typeKey === 'user-field') {
        return 'users';
      } else if (typeKey === 'organization-field') {
        return 'organizations';
      }
    },

    _getTranslationPrefix: function _getTranslationPrefix(typeKey) {
      if (typeKey === 'case-field') {
        return 'admin.casefields';
      } else if (typeKey === 'user-field') {
        return 'admin.userfields';
      } else if (typeKey === 'organization-field') {
        return 'admin.organizationfields';
      }
    },

    _getTranslation: function _getTranslation(key) {
      return this.get('intl').findTranslationByKey(key);
    }
  });
});
define('frontend-cp/services/error-handler/credential-expired-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.user_credential_expired'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/form-invalid-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.validation_errors'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/generic-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.generic_error'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/notification-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    processAll: function processAll(records) {
      this.records = records || [];
      this.process();
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var _this = this;

      var recordsCount = this.records.length;

      if (recordsCount) {
        this.records.forEach(function (notification) {
          _this.get('notification').add({
            type: notification.type.toLowerCase(),
            title: notification.message,
            autodismiss: !notification.sticky,
            dismissable: true
          });
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/permissions-denied-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    intl: _ember['default'].inject.service('intl'),
    notification: _ember['default'].inject.service('notification'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    transitionTo: function transitionTo(path) {
      this.container.lookup('router:main').router.transitionTo(path);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.permissions_denied'),
          autodismiss: true,
          dismissable: true
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/resource-not-found-strategy', ['exports', 'ember', 'frontend-cp/utils/base-path'], function (exports, _ember, _frontendCpUtilsBasePath) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    transitionTo: function transitionTo(path) {
      this.container.lookup('router:main').router.transitionTo(path);
    },

    process: function process() {
      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('notification').add({
          type: 'error',
          title: this.get('intl').findTranslationByKey('generic.resource_not_found'),
          autodismiss: true,
          dismissable: true
        });
        var path = (0, _frontendCpUtilsBasePath.getBasePath)();
        var pathname = location.pathname;
        if (pathname !== path) {
          this.transitionTo(path);
        }

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler/session-loading-failed-strategy', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service('session'),

    init: function init() {
      this._super.apply(this, arguments);
      this.records = [];
    },

    accept: function accept(record) {
      this.records.push(record);
    },

    process: function process() {
      var _this = this;

      var recordsCount = this.records.length;

      if (recordsCount) {
        this.get('session').logout().then(function () {
          _this.get('notification').add({
            type: 'error',
            title: _this.get('intl').findTranslationByKey('generic.user_logged_out'),
            body: _this.get('intl').findTranslationByKey('generic.session_expired'),
            autodismiss: true
          });
        });

        this.records = [];
      }

      return recordsCount;
    }
  });
});
define('frontend-cp/services/error-handler', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    sessionLoadingFailedStrategy: _ember['default'].inject.service('error-handler/session-loading-failed-strategy'),
    notificationStrategy: _ember['default'].inject.service('error-handler/notification-strategy'),
    permissionDeniedStrategy: _ember['default'].inject.service('error-handler/permissions-denied-strategy'),
    resourceNotFoundStrategy: _ember['default'].inject.service('error-handler/resource-not-found-strategy'),
    credentialExpiredStrategy: _ember['default'].inject.service('error-handler/credential-expired-strategy'),
    formInvalidStrategy: _ember['default'].inject.service('error-handler/form-invalid-strategy'),
    genericStrategy: _ember['default'].inject.service('error-handler/generic-strategy'),

    enabled: true,

    init: function init() {
      this._super.apply(this, arguments);

      var strategies = _ember['default'].Object.create({
        FIELD_INVALID: this.get('formInvalidStrategy'),
        FIELD_REDUNDANT: null,
        FIELD_REQUIRED: this.get('formInvalidStrategy'),
        FIELD_EMPTY: this.get('formInvalidStrategy'),
        AUTHENTICATION_FAILED: null,
        SESSION_LOADING_FAILED: this.get('sessionLoadingFailedStrategy'),
        NOTIFICATION: this.get('notificationStrategy'),
        PERMISSIONS_DENIED: this.get('permissionDeniedStrategy'),
        RESOURCE_NOT_FOUND: this.get('resourceNotFoundStrategy'),
        CREDENTIAL_EXPIRED: this.get('credentialExpiredStrategy'),
        PARAMETERS_INCONSISTENT: this.get('sessionLoadingFailedStrategy'),
        ANY_FIELD_REQUIRED: null,
        _GENERIC: this.get('genericStrategy')
      });

      this.set('strategies', strategies);
    },

    process: function process(error) {
      var _this = this;

      if (!this.get('enabled')) {
        return false;
      }

      var strategies = this.get('strategies');

      if (error && error.errors) {
        error.errors.forEach(function (record) {
          var strategy = _this.getStrategy('_GENERIC');

          if (_this.hasStrategy(record.code)) {
            strategy = _this.getStrategy(record.code);
          }

          if (strategy) {
            strategy.accept(record);
          }
        });

        Object.keys(strategies).forEach(function (key) {
          _this.processStrategy(key);
        });
      }

      // we have to throw error to reject Promise
      throw error;
    },

    hasStrategy: function hasStrategy(code) {
      var strategies = this.get('strategies');
      return strategies[code] || strategies[code] === null;
    },

    getStrategy: function getStrategy(code) {
      var strategies = this.get('strategies');
      return strategies[code];
    },

    processStrategy: function processStrategy(key) {
      var strategies = this.get('strategies');
      if (strategies[key]) {
        return strategies[key].process();
      }

      return 0;
    }
  });
});
define('frontend-cp/services/feature-flags', ['exports', 'ember'], function (exports, _ember) {

  // TODO: Current problem: when we have any feature disabled in
  // environment, it is persisted into local storage.
  // When after some time, we've decided to enable it,
  // and change it state in environment, this feature won't be
  // enabled for users, because they have locally cached version
  // in local storage wich is disabled.
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    setup: function setup() {
      // TODO improvement required to support changes in config
      // const store = this.get('store');
      // let defaultFlags = this.features._flags;
      //
      // store.findAll('feature-flag').then((savedFeatureFlags) => {
      //   Object.keys(defaultFlags).forEach((defaultFlagName) => {
      //     let savedFeatureFlag = savedFeatureFlags.findBy('name', defaultFlagName);
      //
      //     if (typeof savedFeatureFlag !== 'undefined' && savedFeatureFlag !== null) {
      //       if (savedFeatureFlag.get('enabled')) {
      //         this.features.enable(savedFeatureFlag.get('name'));
      //       } else {
      //         this.features.disable(savedFeatureFlag.get('name'));
      //       }
      //     } else {
      //       store.createRecord('feature-flag', {
      //         name: defaultFlagName, enabled: defaultFlags[defaultFlagName]
      //       }).save();
      //     }
      //   });
      // });
    }
  });
});
define('frontend-cp/services/file-upload', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {

  var UploadFile = _ember['default'].Object.extend({
    progress: 0,
    name: null,
    attachmentId: null,
    contentUrl: null,
    size: null,
    failed: false,
    error: '',
    xhr: null,
    status: 'PROGRESS',

    cancel: function cancel() {
      if (this.get('xhr')) {
        this.get('xhr').abort();
      }
      this.set('status', 'CANCELLED');
      this.set('attachmentId', null);
    }
  });

  exports['default'] = _ember['default'].Service.extend({
    sessionService: _ember['default'].inject.service('session'),

    headers: _ember['default'].computed('sessionService.sessionId', function () {
      var headers = {};
      var sessionId = this.get('sessionService.sessionId');
      if (sessionId) {
        headers['X-Session-ID'] = sessionId;
      }
      return headers;
    }),

    uploadFile: function uploadFile(file) {
      this._super();
      var formData = new FormData();
      var uploadFile = UploadFile.create({ name: file.name, size: file.size });

      formData.append('name', file.name);
      formData.append('content', file);

      _jquery['default'].ajax({
        url: '/api/v1/core/file',
        type: 'POST',
        headers: this.get('headers'),
        //Ajax events
        success: function success(response) {
          uploadFile.set('progress', 100);
          uploadFile.set('status', 'SUCCESS');
          uploadFile.set('contentUrl', response.data.content_url);
          uploadFile.set('size', response.data.size);
          uploadFile.set('attachmentId', response.data.id);
        },
        error: function error(response) {
          uploadFile.set('status', 'ERROR');

          if (response.status === 413) {
            uploadFile.set('error', 'TOO_LARGE');
          }

          if (response.status === 500) {
            uploadFile.set('error', 'UNKNOWN');
          }
        },
        xhr: function xhr(XMLHttpRequest) {
          var xhr = new window.XMLHttpRequest();

          //Upload progress
          xhr.upload.addEventListener('progress', function (evt) {
            uploadFile.set('status', 'PROGRESS');
            uploadFile.set('progress', evt.loaded * 100 / evt.total);
          }, false);

          uploadFile.set('xhr', xhr);

          return xhr;
        },
        // Form data
        data: formData,
        //Options to tell jQuery not to process data or worry about content-type.
        cache: false,
        contentType: false,
        processData: false
      });
      return uploadFile;
    }

  });
});
define('frontend-cp/services/intl', ['exports', 'ember-intl/services/intl'], function (exports, _emberIntlServicesIntl) {
  /**
   * Copyright 2015, Yahoo! Inc.
   * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
   */

  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberIntlServicesIntl['default'];
    }
  });
});
define("frontend-cp/services/liquid-fire-modals", ["exports", "liquid-fire/modals"], function (exports, _liquidFireModals) {
  exports["default"] = _liquidFireModals["default"];
});
define("frontend-cp/services/liquid-fire-transitions", ["exports", "liquid-fire/transition-map"], function (exports, _liquidFireTransitionMap) {
  exports["default"] = _liquidFireTransitionMap["default"];
});
define('frontend-cp/services/local-store', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    _namespacePrefix: 'ko:',

    /**
     * Setup namespace for service usage
     *
     * @param {String} namespace Namespace
     * @param {String} key Key to concatenate with namespace
     * @returns {string}
     */
    _getKeyWithNamespace: function _getKeyWithNamespace(namespace, key) {
      return this._namespacePrefix + namespace + ':' + key;
    },

    /**
     * Retrieve an item from the store by key
     *
     * Items are stored as JSON strings
     *
     * @param  {string} namespace - Namespace in local storage
     * @param  {string} key - Key to retrieve
     * @param {Boolean} options.persist Use local storage instead of session storage
     * @return {*} Stored object
     */
    getItem: function getItem(namespace, key) {
      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref$persist = _ref.persist;
      var persist = _ref$persist === undefined ? false : _ref$persist;

      key = this._getKeyWithNamespace(namespace, key);

      var store = persist ? localStorage : sessionStorage;
      var item = store.getItem(key);

      // Note: stringified undefined will return 'undefined'
      if (item !== null && item !== 'undefined') {
        return JSON.parse(item);
      } else {
        return null;
      }
    },

    /**
     * Place item in the store as a JSON string.
     *
     * Note: only plain objects can be stored.
     *
     * @param {string}  namespace [description]
     * @param {string}  key       [description]
     * @param {mixed}  item      [description]
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    setItem: function setItem(namespace, key, item) {
      var _ref2 = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

      var _ref2$persist = _ref2.persist;
      var persist = _ref2$persist === undefined ? false : _ref2$persist;

      key = this._getKeyWithNamespace(namespace, key);

      // using typeof for strict undefined check
      if (typeof item !== 'undefined') {
        var store = persist ? localStorage : sessionStorage;
        store.setItem(key, JSON.stringify(item));
      }
    },

    /**
     * Remove item from the store.
     *
     * @param {string}  namespace [description]
     * @param {[type]}  key       key of item to be removed
     * @param {Boolean} options.persist Use local storage instead of session storage
     */
    removeItem: function removeItem(namespace, key) {
      var _ref3 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref3$persist = _ref3.persist;
      var persist = _ref3$persist === undefined ? false : _ref3$persist;

      key = this._getKeyWithNamespace(namespace, key);

      var store = persist ? localStorage : sessionStorage;
      store.removeItem(key);
    },

    /**
     * Clear local and session storage by namespace
     *
     * @param {String} namespace Namespace to clear
     */
    clearAllByNamespace: function clearAllByNamespace(namespace) {
      var nsRegexp = new RegExp('^' + this._namespacePrefix + namespace + ':', 'i');

      if (typeof localStorage !== 'undefined') {
        for (var i = 0; i < localStorage.length; i++) {
          var key = localStorage.key(i);

          if (nsRegexp.test(key)) {
            localStorage.removeItem(key);
          }
        }
      }

      if (typeof sessionStorage !== 'undefined') {
        // Session Storage should be wiped out on logout
        sessionStorage.clear();
      }
    },

    /**
     * Clear everything in the store
     */
    clearAll: function clearAll() {
      localStorage.clear();
      sessionStorage.clear();
    }
  });
});
define('frontend-cp/services/locale', ['exports', 'ember', 'moment', 'frontend-cp/config/environment'], function (exports, _ember, _moment, _frontendCpConfigEnvironment) {

  var USER_LOCALE_KEY = 'user-locale-v2';

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    session: _ember['default'].inject.service(),
    localStore: _ember['default'].inject.service(),

    userLocale: _ember['default'].computed('session.user', function () {
      return this.get('session.user.locale');
    }),

    setup: function setup() {
      var _this = this;

      var store = this.get('store');
      this.get('intl').set('adapterType', 'intl');

      return store.findAll('locale').then(function (locales) {
        var currentLocale = _this.getCurrentLocale(locales);

        if (currentLocale) {
          return _this._populateTranslations(currentLocale);
        } else {
          _this.persistLocaleToLocalStorage(_frontendCpConfigEnvironment['default'].defaultLocale);
          return store.findRecord('locale', _frontendCpConfigEnvironment['default'].defaultLocale);
        }
      });
    },

    _requestLocaleStrings: function _requestLocaleStrings(locale) {
      var adapter = this.container.lookup('adapter:application');
      return adapter.ajax(adapter.namespace + '/locales/' + locale + '/strings', 'GET');
    },

    _populateTranslations: function _populateTranslations(locale) {
      var intl = this.get('intl');
      var translations = {};

      var localeCode = locale.get('locale');

      intl.createLocale(localeCode, {});
      intl.setLocale(localeCode);

      _moment['default'].locale(localeCode);

      return this._requestLocaleStrings(locale.id).then(function (strings) {
        strings.data.forEach(function (string) {
          translations[string.id] = string.value;
        });
        intl.addTranslations(localeCode, translations);
      });
    },

    getCurrentLocale: function getCurrentLocale(locales) {
      var _this2 = this;

      var userLocale = this.get('userLocale');

      if (!userLocale) {
        var _ret = (function () {
          var localLocale = _this2.getLocalLocale();
          var currentLocale = localLocale ? localLocale : _frontendCpConfigEnvironment['default'].defaultLocale;

          return {
            v: locales.toArray().find(function (locale) {
              return String(locale.get('locale')) === String(currentLocale) || String(locale.get('id')) === String(currentLocale);
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      }

      return locales.toArray().find(function (locale) {
        return String(locale.get('locale')) === String(userLocale) || String(locale.get('id')) === String(userLocale);
      });
    },

    getLocalLocale: function getLocalLocale() {
      return this.get('localStore').getItem('locale', USER_LOCALE_KEY, { persist: true });
    },

    persistLocaleToLocalStorage: function persistLocaleToLocalStorage(locale) {
      return this.get('localStore').setItem('locale', USER_LOCALE_KEY, locale, { persist: true });
    }
  });
});
define('frontend-cp/services/macro-fetcher', ['exports', 'ember'], function (exports, _ember) {

  var OFFSET = 0;
  var LIMIT = 250;

  /*
   * Recursively request all macros via pagination
   *
   *  - Fetching 300+ macros is too much work for API
   *  - Querys are not cached via ember data
   *  - Loop through macros 20 at a time, and ensure that we only ever
   *    do this once when we hit the agent root
   */

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    hasRequestedMacros: false,

    fetchMacros: function fetchMacros() {
      if (this.get('hasRequestedMacros')) {
        return;
      }
      this.set('hasRequestedMacros', true);

      this._fetchMacroRange(OFFSET, LIMIT);
    },

    _fetchMacroRange: function _fetchMacroRange(offset, limit) {
      var _this = this;

      this.get('store').query('macro', { offset: offset, limit: limit }).then(function (newMacros) {
        var total = newMacros.meta.total;
        var currentMax = offset + limit;

        if (total && total > currentMax) {
          _this._fetchMacroRange(currentMax, limit);
        }
      });
    }
  });
});
define('frontend-cp/services/metrics', ['exports', 'ember-metrics/services/metrics'], function (exports, _emberMetricsServicesMetrics) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsServicesMetrics['default'];
    }
  });
});
define('frontend-cp/services/moment', ['exports', 'ember', 'moment'], function (exports, _ember, _moment2) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Service.extend({
    _locale: null,
    _timeZone: null,

    locale: computed({
      get: function get() {
        return this.get('_locale');
      },
      set: function set(propertyKey, locale) {
        this.set('_locale', locale);
        return locale;
      }
    }),

    timeZone: computed({
      get: function get() {
        return this.get('_timeZone');
      },
      set: function set(propertyKey, timeZone) {
        if (_moment2['default'].tz) {
          this.set('_timeZone', timeZone);
          return timeZone;
        } else {
          _ember['default'].Logger.warn('[ember-moment] attempted to set timezone, but moment-timezone unavailable.');
        }
      }
    }),

    changeLocale: function changeLocale(locale) {
      this.set('locale', locale);
    },

    changeTimeZone: function changeTimeZone(timeZone) {
      this.set('timeZone', timeZone);
    },

    moment: function moment() {
      var time = _moment2['default'].apply(undefined, arguments);
      var locale = this.get('locale');
      var timeZone = this.get('timeZone');

      if (locale) {
        time = time.locale(locale);
      }

      if (timeZone && time.tz) {
        time = time.tz(timeZone);
      }

      return time;
    }
  });
});
define('frontend-cp/services/notification', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    notifications: null,

    init: function init() {
      this._super();
      this.set('notifications', this.get('notifications') || []);
    },

    /**
     * Add a notification
     * @param {object} notification Notification object
     * @param {string} notification.type Notification type (allowed values: 'info', 'warning', 'error', 'success')
     * @param {string} notification.title Notification title text
     * @param {string} [notification.body=null] Notification body text
     * @param {boolean} [notification.dismissable=false] Whether to allow the user to close the notification
     * @param {boolean} [notification.autodismiss=false] Whether to automatically dismiss the message after a timeout
     */
    add: function add(notification) {
      var notifications = this.get('notifications');
      notifications.pushObject(notification);
    },

    success: function success(message) {
      var notifications = this.get('notifications');
      notifications.pushObject({
        type: 'success',
        title: message,
        autodismiss: true
      });
    },

    removeAll: function removeAll() {
      this.get('notifications').clear();
    },

    /**
     * Remove a notification
     * @param {object} notification Notification that has previously been added
     */
    remove: function remove(notification) {
      var notifications = this.get('notifications');
      notifications.removeObject(notification);
    }
  });
});
define('frontend-cp/services/permissions', ['exports', 'ember'], function (exports, _ember) {

  var roleTypes = {
    OWNER: {
      rank: 5,
      permissions: []
    },
    ADMIN: {
      rank: 4,
      permissions: []
    },
    AGENT: {
      rank: 3,
      permissions: []
    },
    COLLABORATOR: {
      rank: 2,
      permissions: []
    },
    CUSTOMER: {
      rank: 1,
      permissions: []
    }
  };

  /**
   * Assign the appropriate actions to each users `permissions` list.
   * permissions Cascade so an AGENT = CUSTOMER + COLLABORATOR + AGENT
   */
  roleTypes.CUSTOMER.permissions = [];

  roleTypes.COLLABORATOR.permissions = roleTypes.CUSTOMER.permissions.concat(['app.user.view_team_permission']);

  roleTypes.AGENT.permissions = roleTypes.COLLABORATOR.permissions.concat(['app.user.disable', 'app.user.signature.edit', 'app.user.password.change', 'app.organisation.delete', 'app.case.trash', 'app.case.untrash']);

  roleTypes.ADMIN.permissions = roleTypes.AGENT.permissions.concat(['app.user.delete', 'app.user.change_agent_access_permission', 'app.user.change_organization_access_permission', 'app.user.change_team_permission', 'app.user.change_role_permission', 'app.admin.access']);

  roleTypes.OWNER.permissions = roleTypes.ADMIN.permissions.concat([]);

  var adminOrAgentToCustomer = function adminOrAgentToCustomer(roleType, targetRoleType) {
    if (roleType.rank === roleTypes.AGENT.rank) {
      return roleTypes.CUSTOMER.rank === targetRoleType.rank;
    }

    return roleType.rank >= roleTypes.ADMIN.rank;
  };

  /*
   * A map of system actions to a function that checks if the roleType provided
   * has the ability to carry out this action.
   * The actions should match values in `permissions` list for a given roleType
   *
   * The 1st argument of the function will always be the roleType of the current
   * logged in user. Any other arguments passed to the helper are provided as
   * a list.
   *
   * The function allows us to perform additional checks on top of the existence
   * of the permission e.g. 'app.delete.user' requires that the roleType.rank of
   * the logged in user be greater than that of the user they are trying to
   * delete.
   */
  var applicationActions = {
    'app.user.signature.edit': function appUserSignatureEdit(myRoleType, me, target) {
      var targetRoleType = roleTypes[target.get('role').get('roleType')];

      // I can change my own signature
      if (me && target && me === target) {
        return true;
      }

      // If I'm a higher rank and they are not a CUSTOMER
      return myRoleType.rank > targetRoleType.rank && targetRoleType.rank !== roleTypes.CUSTOMER.rank;
    },
    // ADMIN can disable all, AGENT only CUSTOMER
    'app.user.disable': function appUserDisable(roleType, subject, user) {
      var userRoleType = user.get('role.roleType');

      // I cannot disable myself!
      if (subject && user && subject === user) {
        return false;
      }
      return adminOrAgentToCustomer(roleType, roleTypes[userRoleType]);
    },
    'app.user.password.change': function appUserPasswordChange(roleType, user, target) {
      // I can change my own password:
      if (user && target && user === target) {
        return true;
      }

      var userRoleType = user.get('role.roleType');
      return adminOrAgentToCustomer(roleType, userRoleType) && target.get('emails').toArray().length;
    },
    'app.organisation.delete': function appOrganisationDelete(roleType, user, organisation) {
      return roleType.rank >= roleTypes.AGENT.rank;
    },
    'app.user.delete': function appUserDelete(roleType, user, target) {
      // I can't delete myself
      if (user && target && user === target) {
        return false;
      }
      var targetRoleType = roleTypes[target.get('role').get('roleType')];
      return roleType.rank >= roleTypes.ADMIN.rank && (targetRoleType.rank === roleTypes.AGENT.rank || targetRoleType.rank === roleTypes.COLLABORATOR.rank);
    },
    'app.user.change_agent_access_permission': function appUserChange_agent_access_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank >= roleTypes.ADMIN.rank;
    },
    'app.user.change_organization_access_permission': function appUserChange_organization_access_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') === 'CUSTOMER' && myRoleType.rank >= roleTypes.ADMIN.rank;
    },
    'app.user.change_team_permission': function appUserChange_team_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank >= roleTypes.ADMIN.rank;
    },
    'app.user.view_team_permission': function appUserView_team_permission(myRoleType, me, targetUser) {
      return targetUser.get('role.roleType') !== 'CUSTOMER' && myRoleType.rank >= roleTypes.COLLABORATOR.rank;
    },
    'app.user.change_role_permission': function appUserChange_role_permission(myRoleType, me, target) {
      // Cannot change myself
      if (me && target && me === target) {
        return false;
      }
      var myRank = myRoleType.rank;
      var targetRank = roleTypes[target.get('role').get('roleType')].rank;
      return myRank >= roleTypes.ADMIN.rank && myRank >= targetRank;
    },
    'app.admin.access': function appAdminAccess(myRoleType) {
      return myRoleType.rank >= roleTypes.ADMIN.rank;
    },
    'app.case.trash': function appCaseTrash(myRoleType) {
      return myRoleType.rank >= roleTypes.AGENT.rank;
    },
    'app.case.untrash': function appCaseUntrash(myRoleType) {
      return myRoleType.rank >= roleTypes.AGENT.rank;
    }
  };

  exports['default'] = _ember['default'].Service.extend({
    sessionService: _ember['default'].inject.service('session'),
    notificationService: _ember['default'].inject.service('notification'),
    intlService: _ember['default'].inject.service('intl'),
    notificationHandler: _ember['default'].inject.service('error-handler/notification-strategy'),

    showError: function showError() {
      this.get('notificationHandler').processAll([{
        type: 'error',
        message: this.get('intlService').findTranslationByKey('generic.permissions_denied'),
        sticky: false
      }]);
    },

    has: function has(action, target) {
      var role = this.get('sessionService.user.role');
      var subjectRoleType = roleTypes[role.get('roleType')];
      var permissions = this.get('sessionService.permissions');

      // First check the permission exists
      if (subjectRoleType && subjectRoleType.permissions.indexOf(action) > -1) {
        // Then allow the permission function to run
        return applicationActions[action](subjectRoleType, this.get('sessionService.user'), target);
      }

      var roleRegex = new RegExp('(customer|collaborator|agent|admin|owner)\.', 'i');

      // Check role permissions
      return permissions.filter(function (perm) {
        // this is required as we want to compare only real permission name
        // excluding role type in the beginning of the string
        var permissionName = perm.get('name').replace(roleRegex, '');
        var actionName = action.replace(roleRegex, '');
        return permissionName === actionName && perm.get('value');
      }).length > 0;
    }
  });
});
define('frontend-cp/services/plan', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    features: new _ember['default'].A(),
    limits: new _ember['default'].A(),

    limitFor: function limitFor(name) {
      var limits = this.get('limits');
      var filteredLimits = limits.filterBy('name', name);
      return filteredLimits.length < 1 ? 0 : filteredLimits.get('firstObject').get('limit');
    },

    has: function has(name) {
      var features = this.get('features');
      return features.isAny('name', name);
    },

    fetchPlan: function fetchPlan() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var store = _this.get('store');

        store.unloadAll('plan');
        store.queryRecord('plan', {}).then(function (plan) {
          _this.set('limits', plan.get('limits'));
          _this.set('features', plan.get('features'));
          resolve();
        });
      });
    }
  });
});
define('frontend-cp/services/pusher', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  exports['default'] = _ember['default'].Service.extend({
    channelBindings: _ember['default'].Object.create({}),
    options: _frontendCpConfigEnvironment['default'].APP.PUSHER_OPTIONS,

    sessionService: _ember['default'].inject.service('session'),
    tagService: _ember['default'].inject.service('tags'),
    store: _ember['default'].inject.service(),

    initialize: function initialize() {
      if (this.options.logEvents) {
        Pusher.log = function (message) {
          if (window.console && window.console.log) {
            // eslint-disable-line
            window.console.debug(message); // eslint-disable-line
          }
        };
      }

      this.authorize();
    },

    authorize: _ember['default'].observer('sessionService.sessionId', function () {
      var _this = this;

      if (this.options.disabled) {
        // for tests etc, we don't ever want to start pusher
        return;
      }

      this.get('store').findAll('credential').then(function (credentials) {
        if (!_this.get('sessionService.sessionId')) {
          return;
        }

        var key = credentials.get('firstObject.realtimeAppKey');

        if (key) {
          _this.set('pusher', new Pusher(key, {
            encrypted: _this.options.encrypted,
            authEndpoint: _this.options.authEndpoint,
            wsHost: _this.options.wsHost,
            httpHost: _this.options.httpHost,
            auth: {
              headers: {
                'X-Session-ID': _this.get('sessionService.sessionId')
              }
            }
          }));
        }
      });
    }),

    subscribeTo: function subscribeTo(channelName, event, context, func) {
      for (var _len = arguments.length, localData = Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {
        localData[_key - 4] = arguments[_key];
      }

      if (!this.get('pusher')) {
        if (console && console.warn) {
          // eslint-disable-line
          console.warn('Unable to subscribe via pusher - realtime updates will not be available'); // eslint-disable-line
        }
        return;
      }
      if (!channelName) {
        return;
      }
      var channel = this.subscribeToChannel(channelName);
      var handler = function handler(data) {
        Reflect.apply(func, context, [data].concat(localData));
      };
      this.get('channelBindings')[channelName][func] = handler;
      channel.bind(event, handler);
    },

    unsubscribeTo: function unsubscribeTo(channelName, eventName, func) {
      var channelBindings = this.get('channelBindings');
      var channel = channelBindings.get(channelName);
      if (channel) {
        if (func) {
          var handler = channel.channel[func];
          channel.channel.unbind(eventName, handler);
        } else {
          channel.channel.unbind(eventName);
        }
      }
    },

    subscribeToChannel: function subscribeToChannel(channelName) {
      var channelBindings = this.get('channelBindings');

      var channelInfo = channelBindings.get(channelName);
      if (!channelInfo) {
        var channel = this.get('pusher').subscribe(channelName);
        channelBindings.set(channelName, { channel: channel });
        return channel;
      }

      return channelInfo.channel;
    }
  });
});
/* global Pusher */
define('frontend-cp/services/roles', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Service.extend({
    intl: inject.service(),

    editableSystemTypes: computed('allTypes', function () {
      var _this = this;

      return ['ADMIN', 'AGENT'].map(function (typeId) {
        return _this.get('allTypes').findBy('id', typeId);
      });
    }),

    allTypes: computed('intl.locale', function () {
      var _this2 = this;

      return ['ADMIN', 'AGENT', 'COLLABORATOR', 'CUSTOMER', 'OWNER'].map(function (typeId) {
        return _ember['default'].Object.create({
          id: typeId,

          label: _this2.get('intl').findTranslationByKey('admin.roles.type.' + typeId.toLowerCase())
        });
      });
    }),

    availableTypes: computed('allTypes', function () {
      return this.get('allTypes').filter(function (type) {
        return ['ADMIN', 'AGENT', 'COLLABORATOR'].contains(type.get('id'));
      });
    }),

    availableAgentCaseAccessTypes: computed('intl.locale', function () {
      var _this3 = this;

      return ['ALL', 'TEAMS', 'SELF'].map(function (agentCaseAccessTypeId) {
        return _ember['default'].Object.create({
          id: agentCaseAccessTypeId,

          label: _this3.get('intl').findTranslationByKey('admin.roles.agent_case_access_type.' + agentCaseAccessTypeId.toLowerCase())
        });
      });
    })
  });
});
define('frontend-cp/services/sections-history', ['exports', 'ember', 'ember-data'], function (exports, _ember, _emberData) {
  exports['default'] = _ember['default'].Service.extend({
    history: {
      admin: { routeName: 'session.admin' },
      agent: { routeName: 'session.agent' }
    },
    store: function store(routeName, model) {
      // TODO: Add support for query params??
      var sectionName = routeName.split('.')[1];
      var data = { routeName: routeName };

      // TODO: model.get('id') check could be removed after PDM-1398 is fixed
      if (model && !_ember['default'].isArray(model) && model instanceof _emberData['default'].Model && !model.get('isNew') && model.get('id')) {
        data.model = model;
      }
      _ember['default'].set(this.history, sectionName, data);
    }
  });
});
define('frontend-cp/services/session', ['exports', 'ember', 'frontend-cp/utils/base-path', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpUtilsBasePath, _frontendCpConfigEnvironment) {

  var sessionIdCookieName = _frontendCpConfigEnvironment['default'].sessionIdCookieName;
  var domainParts = window.location.hostname.split('.');
  // Top-level domains, such as novo or localhost, won't work, so we need to set this to the empty string
  var sessionIdCookieDomain = domainParts.length > 1 ? '.' + domainParts.join('.') : '';

  exports['default'] = _ember['default'].Service.extend({

    /**
     * Property for use in computed properties and observers
     * Ember automatically converts this to an ember array.
     * @type {Array}
     */
    session: null,
    user: null,

    permissions: [],

    planService: _ember['default'].inject.service('plan'),
    localStoreService: _ember['default'].inject.service('localStore'),
    store: _ember['default'].inject.service(),
    tabStore: _ember['default'].inject.service(),
    locale: _ember['default'].inject.service(),

    // CPs
    sessionId: _ember['default'].computed({
      get: function get() {
        return this._getSessionIdCookie();
      },
      set: function set(key, v) {
        if (!v) {
          this._removeSessionIdCookie();
        } else {
          this._setSessionIdCookie(v);
        }

        return v;
      }
    }),
    // Methods

    getSession: function getSession() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        // Session exists
        var session = _this.get('session');
        if (session) {
          return resolve(session);
        }
        // sessionId saved in local storage
        if (_this.get('sessionId')) {
          return _this._getSession().then(resolve)['catch'](function (e) {
            _this.set('sessionId', null);
            _this.set('session', null);
            _this.set('user', null);
            return reject(e);
          });
          // No session information available
        } else {
            return reject(new Error('No session ID'));
          }
      });
    },

    getPermissions: function getPermissions() {
      var _this2 = this;

      return this.get('user.role.permissions').then(function (perms) {
        _this2.set('permissions', perms);
        return perms;
      });
    },

    _getSessionIdCookie: function _getSessionIdCookie() {
      var name = sessionIdCookieName + '=';
      var cookies = document.cookie.split(';').map(function (entry) {
        return entry.trim();
      }).filter(function (entry) {
        return entry.startsWith(name);
      });
      if (cookies.length) {
        return cookies[0].substring(name.length);
      }
    },

    _setSessionIdCookie: function _setSessionIdCookie(sessionId) {
      document.cookie = sessionIdCookieName + '=' + sessionId + '; domain=' + sessionIdCookieDomain + '; path=/';
    },

    _removeSessionIdCookie: function _removeSessionIdCookie() {
      document.cookie = sessionIdCookieName + '=; expires=0; domain=' + sessionIdCookieDomain + '; path=/';
    },

    _getSession: function _getSession() {
      var _this3 = this;

      return this.get('store').queryRecord('session', {}).then(function (session) {
        _this3.set('session', session);
        _this3.set('sessionId', session.get('id'));
        _this3.set('user', session.get('user'));
        _this3.get('planService').fetchPlan();
        return _this3.getPermissions();
      });
    },

    /**
     * Removes sessionId from store and from local variable.
     * @param {boolean} Set redirection parameter on logout
     * @return {Promise} Ember.RSVP.Promise resolving when logout is complete
     */
    logout: function logout() {
      var _this4 = this;

      var doRedirect = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      // Short circuit if we're on a login page
      if (location.pathname.endsWith('/login')) {
        return _ember['default'].RSVP.resolve();
      }

      var session = this.get('session');
      var transition = this.container.lookup('router:main').get('router.activeTransition');
      var redirect = (0, _frontendCpUtilsBasePath.getLoginPath)();

      if (doRedirect) {
        // We only do this when we have a transition, with a name that is not
        // the first in the sequence (e.g. a page refresh)
        if (transition && transition.targetName && transition.sequence) {
          var path = transition.router.generate(transition.targetName);
          redirect += '?redirectTo=' + path;
        } else {
          redirect += '?redirectTo=' + location.pathname;
        }
      }

      var userLocale = this.get('user.locale');
      if (userLocale) {
        this.get('locale').persistLocaleToLocalStorage(userLocale);
      }

      this.get('tabStore').clearAll();
      this.get('localStoreService').clearAllByNamespace(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace);

      if (!session) {
        this.set('sessionId', null);
        // if we have no session, reset session id
        // so ember knows that we want to show login again
        window.location = redirect;
        return _ember['default'].RSVP.Promise.resolve();
      }

      return session.destroyRecord().then(function () {
        _this4.set('session', null);
        _this4.set('sessionId', null);
        window.location = redirect;
      })['catch'](function () {
        _this4.set('session', null);
        _this4.set('sessionId', null);
        // catch the error - we don't care it it's already deleted etc.
        window.location = redirect;
      });
    },

    /**
     * Sends email and password to backend for authentication.
     * @param  {string} email - email
     * @param  {string} password - password
     * @return {Promise} Ember.RSVP.Promise containing session
     */
    requestSession: function requestSession(email, password) {
      var _this5 = this;

      var unset = function unset() {
        _this5.set('email', null);
        _this5.set('password', null);
      };

      this.set('email', email);
      this.set('password', password);
      return this._getSession().then(unset, function (e) {
        unset();
        throw e;
      });
    }
  });
});
define('frontend-cp/services/sorter', ['exports', 'ember'], function (exports, _ember) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Service = _ember['default'].Service;
  var isEmpty = _ember['default'].isEmpty;
  exports['default'] = Service.extend({
    sort: function sort(models) {
      var _this = this;

      if (isEmpty(models)) {
        return;
      }

      var adapter = this.container.lookup('adapter:application');
      var modelName = models.get('firstObject').constructor.modelName;
      var adapterNamespace = adapter.get('namespace');
      var modelNamespace = this._modelNamespaceFor(modelName);

      models.forEach(function (model, index) {
        model.set(_this._sortingFieldFor(modelName), index);
      });

      adapter.ajax(adapterNamespace + '/' + modelNamespace + '/reorder', 'PUT', {
        data: _defineProperty({}, this._idsKeyFor(modelName), models.mapBy('id').join(','))
      });
    },

    _sortingFieldFor: function _sortingFieldFor(name) {
      switch (name) {
        case 'case-priority':
          return 'level';
        default:
          return 'sortOrder';
      }
    },

    _modelNamespaceFor: function _modelNamespaceFor(name) {
      switch (name) {
        case 'case-priority':
          return 'cases/priorities';
        case 'case-status':
          return 'cases/statuses';
        case 'case-field':
          return 'cases/fields';
        case 'user-field':
          return 'users/fields';
        case 'organization-field':
          return 'organizations/fields';
      }
    },

    _idsKeyFor: function _idsKeyFor(name) {
      switch (name) {
        case 'case-priority':
          return 'priority_ids';
        case 'case-status':
          return 'status_ids';
        case 'case-field':
          return 'field_ids';
        case 'user-field':
          return 'field_ids';
        case 'organization-field':
          return 'field_ids';
      }
    }
  });
});
define('frontend-cp/services/store-cache', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    allCache: null,
    queryCache: null,

    initCache: _ember['default'].on('init', function () {
      this.set('allCache', {});
      this.set('queryCache', {});
    }),

    findAll: function findAll(type) {
      var _this = this;

      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref$reload = _ref.reload;
      var reload = _ref$reload === undefined ? false : _ref$reload;

      if (!reload && this.get('allCache.' + type)) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this.get('allCache.' + type));
        });
      } else {
        return this.get('store').findAll(type).then(function (data) {
          _this.set('allCache.' + type, data);
          return data;
        });
      }
    },

    query: function query(type, _query) {
      var _this2 = this;

      var _ref2 = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref2$reload = _ref2.reload;
      var reload = _ref2$reload === undefined ? false : _ref2$reload;

      var serializedQuery = type + ':' + _npmLodash['default'].map(_query, function (value, key) {
        return key + ':' + value;
      }).sort().join(':');

      if (!reload && this.get('allCache')[serializedQuery]) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          resolve(_this2.get('allCache')[serializedQuery]);
        });
      } else {
        return this.get('store').query(type, _query).then(function (data) {
          _this2.get('allCache')[serializedQuery] = data;
          return data;
        });
      }
    }
  });
});
define('frontend-cp/services/suggestion/organization', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {
  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm) {
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/autocomplete/organizations';
      var options = {
        data: {
          name: searchTerm
        }
      };
      var promise = adapter.ajax(url, 'GET', options);

      this.promiseQueue.push(searchTerm, promise);

      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/suggestion/people', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {

  /**
   * Work with people suggestions via cached service.
   */
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm, exclude) {
      var promise = this.get('store').query('identity-autocomplete-email', {
        address: searchTerm,
        exclude: exclude || []
      });

      this.promiseQueue.push(searchTerm, promise);

      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/suggestion/tag', ['exports', 'ember', 'frontend-cp/utils/exclusion', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsExclusion, _frontendCpUtilsPromiseQueue) {
  var Promise = _ember['default'].RSVP.Promise;
  exports['default'] = _ember['default'].Service.extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    suggest: function suggest(searchTerm) {
      var promise = this.get('storeCache').query('tag', {
        name: searchTerm
      });

      this.promiseQueue.push(searchTerm, promise);
      return promise;
    },

    suggestFilter: function suggestFilter(records, searchTerm, key) {
      var regexp = new RegExp(searchTerm, 'i');

      return Promise.resolve(records.filter(function (team) {
        return regexp.test(team.get(key));
      }));
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    },

    exclude: function exclude(data, exclusions) {
      var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

      return (0, _frontendCpUtilsExclusion.exclude)(data, exclusions, key);
    }
  });
});
define('frontend-cp/services/suggestion/universal', ['exports', 'ember', 'frontend-cp/utils/promise-queue'], function (exports, _ember, _frontendCpUtilsPromiseQueue) {

  /**
   * Work with the universal search via cached service.
   */
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    init: function init() {
      this._super.apply(this, arguments);
      this.promiseQueue = new _frontendCpUtilsPromiseQueue['default']();
    },

    search: function search(searchTerm) {
      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/search';
      var options = {
        data: {
          query: searchTerm
        }
      };
      var promise = adapter.ajax(url, 'GET', options);

      this.promiseQueue.push(searchTerm, promise);
      return promise;
    },

    isPromiseDiscarded: function isPromiseDiscarded(searchTerm) {
      return this.promiseQueue.isDiscarded(searchTerm);
    },

    flushQueue: function flushQueue() {
      this.promiseQueue.flush();
    }
  });
});
define('frontend-cp/services/tab-store', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  var run = _ember['default'].run;
  var inject = _ember['default'].inject;
  var setProperties = _ember['default'].setProperties;
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Service.extend({
    routing: inject.service('-routing'),
    localStore: inject.service('localStore'),

    // Controls .nav-tab--disabled class, ad-hoc fix for FT-411
    isEnabled: true,

    casesViewId: null,
    caseState: null,

    tabs: computed(function () {
      var tabs = this.get('localStore').getItem(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace, 'tabs') || [];

      tabs.forEach(function (tab) {
        tab.state = tab.state || {};
        tab.nonPersistedState = tab.nonPersistedState || {};
      });

      return tabs;
    }),

    setCasesViewId: function setCasesViewId(viewId) {
      this.set('casesViewId', viewId);
    },

    open: function open(transition, label) {
      var _decomposeTransition = this.decomposeTransition(transition);

      var basePath = _decomposeTransition.basePath;
      var routeName = _decomposeTransition.routeName;
      var dynamicSegments = _decomposeTransition.dynamicSegments;
      var queryParams = _decomposeTransition.queryParams;

      var tabs = this.get('tabs');

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _tab = _step.value;

          if (_tab.basePath === basePath) {
            this.set('activeTab', _tab);
            return _tab;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      var tab = { basePath: basePath, routeName: routeName, dynamicSegments: dynamicSegments, queryParams: queryParams, label: label, state: {}, nonPersistedState: {} };
      this.get('tabs').addObject(tab);
      this.set('activeTab', tab);
      run.debounce(this, 'persistTabs', 100);
      return tab;
    },

    createTab: function createTab(routeName, label, model) {
      var dynamicSegments = [model];
      var basePath = this.get('routing').generateURL(routeName, dynamicSegments);
      var tabs = this.get('tabs');

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = tabs[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _tab2 = _step2.value;

          if (_tab2.basePath === basePath) {
            return _tab2;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      var tab = {
        queryParams: {},
        nonPersistedState: {},
        state: {},
        basePath: basePath,
        routeName: routeName,
        label: label,
        dynamicSegments: dynamicSegments
      };
      this.get('tabs').addObject(tab);
      run.debounce(this, 'persistTabs', 100);
      return tab;
    },

    getTab: function getTab(basePath) {
      return this.get('tabs').findBy('basePath', basePath);
    },

    close: function close(tab) {
      var routing = this.get('routing');
      var tabs = this.get('tabs');
      if (this.get('activeTab') !== tab) {
        tabs.removeObject(tab);
      } else {
        var index = tabs.indexOf(tab);
        var nextTab = tabs.objectAt(index + (index === 0 ? 1 : -1));
        tabs.removeObject(tab);
        if (nextTab) {
          routing.transitionTo(nextTab.routeName, nextTab.dynamicSegments, nextTab.queryParams);
        } else {
          if (this.get('casesViewId')) {
            routing.transitionTo('session.agent.cases.index.view', [this.get('casesViewId')]);
          } else {
            routing.transitionTo('session.agent.cases.index');
          }
        }
      }
      run.debounce(this, 'persistTabs', 100);
    },

    leave: function leave(tab) {
      if (this.get('activeTab') === tab) {
        this.set('activeTab', null);
      }
    },

    update: function update(tab, changes) {
      setProperties(tab, changes);
      run.debounce(this, 'persistTabs', 100);
    },

    updateNonPersistedState: function updateNonPersistedState(tab, newState) {
      tab.nonPersistedState = Object.assign(tab.nonPersistedState || {}, newState);
    },

    updateState: function updateState(tab, newState) {
      tab.state = Object.assign(tab.state || {}, newState);
      run.debounce(this, 'persistTabs', 100);
    },

    // Methods
    clearAll: function clearAll() {
      this.get('tabs').clear();
      this.persistTabs();
    },

    persistTabs: function persistTabs() {
      var tabs = this.get('tabs') || [];

      this.get('localStore').setItem(_frontendCpConfigEnvironment['default'].localStore.defaultNamespace, 'tabs', tabs.map(this.serializeTab));
    },

    decomposeTransition: function decomposeTransition(transition) {
      var routeName = transition.handlerInfos[transition.resolveIndex].name;
      var queryParams = Object.keys(transition.queryParams).length > 0 ? transition.queryParams : null;
      // The dynamic segments are wrong. It should include all the dynamic segments
      // of all parent routes, not only the ones of this one.
      var dynamicSegments = transition.intent.contexts;
      if (!dynamicSegments) {
        dynamicSegments = Object.keys(transition.params).reduce(function (ary, k) {
          var params = transition.params[k];
          if (Object.keys(params).length > 0) {
            return ary.concat(Object.keys(params).map(function (k) {
              return params[k];
            }));
          } else {
            return ary;
          }
        }, []);
      }
      var url = this.get('routing').generateURL(routeName, dynamicSegments, queryParams || {});

      var _url$split = url.split('?');

      var _url$split2 = _slicedToArray(_url$split, 1);

      var basePath = _url$split2[0];

      return { basePath: basePath, routeName: routeName, dynamicSegments: dynamicSegments, queryParams: queryParams };
    },

    serializeTab: function serializeTab(tab) {
      return {
        basePath: tab.basePath,
        routeName: tab.routeName,
        dynamicSegments: tab.dynamicSegments.map(function (ds) {
          return typeof ds === 'object' ? ds.id : ds;
        }),
        queryParams: tab.queryParams,
        label: tab.label,
        state: tab.state
      };
    }
  });
});
define('frontend-cp/services/tags', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service('store'),

    getTagByName: function getTagByName(tagName) {
      var tag = this.get('store').peekAll('tag').find(function (tag) {
        return tag.get('name') === tagName;
      });
      return tag ? tag : this.get('store').createRecord('tag', { name: tagName });
    },

    refreshTagsForCase: function refreshTagsForCase(updatedCase) {
      return this._refreshTags({ caseId: updatedCase.get('id') }, updatedCase);
    },

    refreshTagsForUser: function refreshTagsForUser(user) {
      return this._refreshTags({ userId: user.get('id') }, user);
    },

    refreshTagsForOrganization: function refreshTagsForOrganization(organization) {
      return this._refreshTags({ organizationId: organization.get('id') }, organization);
    },

    _refreshTags: function _refreshTags(queryParams, parentModel) {
      return this.get('store').query('tag', queryParams).then(function (newTags) {
        newTags.forEach(function (tag) {
          return tag.set('isNew', false);
        });
        parentModel.get('tags').clear();
        parentModel.get('tags').pushObjects(newTags);
        return newTags;
      });
    },

    areTagNamesMatchingCache: function areTagNamesMatchingCache(cachedTagNames, tags) {
      if (!cachedTagNames) {
        //we haven't got tags yet!
        return false;
      }

      if (cachedTagNames.get('length') !== tags.get('length')) {
        return true;
      }

      return tags.any(function (tag) {
        return cachedTagNames.indexOf(tag.get('name')) === -1;
      });
    }

  });
});
define('frontend-cp/services/timeline', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var Promise = _ember['default'].RSVP.Promise;
  var defaultPostCount = 10;

  var includeActivities = function includeActivities(filter) {
    return filter === 'all' || filter === 'posts,activities';
  };
  var includeEvents = function includeEvents(filter) {
    return filter === 'all' || filter === 'posts,events';
  };

  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),

    cache: null,

    initCache: _ember['default'].on('init', function () {
      this.set('cache', {});
    }),

    /**
     * Return cache object for a given parent model
     *
     * @private
     * @param {DS.Model} model model
     * @return {*} cache object
     */
    _getCache: function _getCache(model) {
      var cacheKey = model.constructor.modelName + '_' + model.get('id');

      var cache = this.get('cache')[cacheKey];
      if (!cache) {
        cache = this.get('cache')[cacheKey] = {
          posts: {},
          newestPost: null,
          oldestPost: null,
          total: null,
          activities: [],
          firstActivityTimestamp: null,
          lastActivityTimestamp: null
        };
      }
      return cache;
    },

    /**
     * Return the most recent post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} model model
     * @return {Promise} post
     */
    _getNewestPost: function _getNewestPost(model) {
      var _this = this;

      return this._fetchPosts(model).then(function () {
        return _this._getCache(model).newestPost;
      });
    },

    /**
     * Add post to the cache.
     *
     * @param {DS.Model} model model
     * @param {DS.Model} post post
     */
    addPost: function addPost(model, post) {
      var cache = this._getCache(model);
      cache.posts[post.get('sequence')] = post;
      cache.total += 1;
      var previousPost = cache.newestPost;
      if (!previousPost || previousPost.get('sequence') < post.get('sequence')) {
        cache.newestPost = post;
      }
    },

    /**
     * Return the oldest post, or null if no posts. Result is wrapped
     * in a Promise.
     *
     * @private
     * @param {DS.Model} model model
     * @return {Promise<DS.Model>} post
     */
    _getOldestPost: function _getOldestPost(model) {
      var cache = this._getCache(model);
      if (cache.oldestPost) {
        return Promise.resolve(cache.oldestPost);
      } else if (cache.total === 0) {
        return Promise.resolve(null);
      } else {
        return this._fetchPosts(model, { beforeId: 0 }).then(function () {
          return cache.oldestPost;
        });
      }
    },

    /**
     * Get a single post.
     *
     * @private
     * @param {DS.Model} model model
     * @param {Number} postId post id
     * @return {Promise<DS.Model>} post
     */
    _getSinglePost: function _getSinglePost(model, postId) {
      var post = this.get('store').peekRecord('post', postId);
      if (post) {
        if (post.get('isReloading')) {
          return post.reload();
        } else {
          return Promise.resolve(post);
        }
      } else {
        post = this.get('store').createRecord('post', { id: postId });
        post.set('parent', model);
        return post.reload();
      }
    },

    /**
     * Return posts for a given parent model.
     *
     * @param {DS.Model} model model
     * @param {Number} postId reference post id
     * @param {[String]} options.direction whether to request 'older' or 'newer' posts
     * @param {[Number]} options.count post count
     * @param {[Number]} options.including whether to include the post with specified id
     * @return {Promise} posts
     */
    getPosts: function getPosts(model, postId) {
      var _this2 = this;

      var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

      var _ref$direction = _ref.direction;
      var direction = _ref$direction === undefined ? 'older' : _ref$direction;
      var _ref$count = _ref.count;
      var count = _ref$count === undefined ? defaultPostCount : _ref$count;
      var _ref$includeActivities = _ref.includeActivities;
      var includeActivities = _ref$includeActivities === undefined ? true : _ref$includeActivities;
      var _ref$includeEvents = _ref.includeEvents;
      var includeEvents = _ref$includeEvents === undefined ? true : _ref$includeEvents;
      var _ref$including = _ref.including;
      var including = _ref$including === undefined ? false : _ref$including;

      var post = undefined;

      if (postId) {
        post = this._getSinglePost(model, postId);
      } else {
        post = direction === 'older' ? this._getNewestPost(model) : this._getOldestPost(model);
      }

      return post.then(function (post) {
        if (!post) {
          return { posts: [], morePostsAvailable: false };
        }
        return _this2._getPostsRecursive(model, post, direction, including ? count - 1 : count).then(function (posts) {
          return [post].concat(posts);
        })
        // Load activities
        .then(function (posts) {
          return Promise.all([includeActivities ? _this2._getActivitiesForPosts(model, posts, direction, 'activity') : [], includeEvents ? _this2._getActivitiesForPosts(model, posts, direction, 'event') : [], posts]);
        }).then(function (_ref2) {
          var _ref22 = _slicedToArray(_ref2, 3);

          var activities = _ref22[0];
          var events = _ref22[1];
          var posts = _ref22[2];

          var cache = _this2._getCache(model);
          var morePostsAvailable = undefined;
          if (direction === 'older') {
            morePostsAvailable = posts.get('lastObject.sequence') !== 1;
          } else {
            morePostsAvailable = posts.get('lastObject.sequence') !== cache.total;
          }

          // Merge events, activities and posts
          var all = _this2._mergeTwoTimelines(_this2._mergeTwoTimelines(activities, events, direction), posts, direction);
          // Finally, remove initial post if it's not required
          all = including ? all : all.filter(function (p) {
            return p !== post;
          });
          return { posts: all, morePostsAvailable: morePostsAvailable };
        });
      });
    },

    loadPostsAbove: function loadPostsAbove(state, _ref3) {
      var model = _ref3.model;
      var filter = _ref3.filter;
      var sortOrder = _ref3.sortOrder;
      var postId = _ref3.postId;

      if (state.get('loadingTop') || model.get('isNew')) {
        return;
      }

      state.set('loadingTop', true);

      this.getPosts(model, postId, {
        direction: sortOrder === 'newest' ? 'newer' : 'older',
        includeActivities: includeActivities(filter),
        includeEvents: includeEvents(filter)
      }).then(function (_ref4) {
        var posts = _ref4.posts;
        var morePostsAvailable = _ref4.morePostsAvailable;

        state.get('posts').unshiftObjects(posts.reverse());
        state.set('loadingTop', false);
        state.set('topPostsAvailable', morePostsAvailable);
      });
    },

    loadPostsBelow: function loadPostsBelow(state, _ref5) {
      var model = _ref5.model;
      var filter = _ref5.filter;
      var sortOrder = _ref5.sortOrder;
      var postId = _ref5.postId;
      var including = _ref5.including;

      if (state.get('loadingBottom') || model.get('isNew')) {
        return;
      }

      state.set('loadingBottom', true);

      this.getPosts(model, postId, {
        direction: sortOrder === 'newest' ? 'older' : 'newer',
        including: including,
        includeActivities: includeActivities(filter),
        includeEvents: includeEvents(filter)
      }).then(function (_ref6) {
        var posts = _ref6.posts;
        var morePostsAvailable = _ref6.morePostsAvailable;

        state.get('posts').pushObjects(posts);
        state.set('loadingBottom', false);
        state.set('bottomPostsAvailable', morePostsAvailable);
      });
    },

    /**
     * Perform merge by timestamp.
     * When same-date conflicts occur, the first timeline objects will be
     * considered to be newer.
     *
     * @private
     * @param {Array<DS.Model>} activities 1st timeline
     * @param {Array<DS.Model>} posts 2nd timeline
     * @param {String} direction older or newer
     * @return {Array<DS.Model>} merged timeline
     */
    _mergeTwoTimelines: function _mergeTwoTimelines(activities, posts, direction) {
      var postsWithActivities = [];
      while (posts.length !== 0 || activities.length !== 0) {
        var topPost = posts[0];
        var topActivity = activities[0];

        if (!topPost) {
          postsWithActivities.push(topActivity);
          activities.splice(0, 1);
          continue;
        }

        if (!topActivity) {
          postsWithActivities.push(topPost);
          posts.splice(0, 1);
          continue;
        }

        var postDate = topPost.get('createdAt');
        var activityDate = topActivity.get('createdAt');

        if (direction === 'newer') {
          if (activityDate.getTime() < postDate.getTime()) {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          } else {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          }
        } else if (direction === 'older') {
          if (postDate.getTime() > activityDate.getTime()) {
            postsWithActivities.push(topPost);
            posts.splice(0, 1);
          } else {
            postsWithActivities.push(topActivity);
            activities.splice(0, 1);
          }
        }
      }
      return postsWithActivities;
    },

    /**
     * Get all activites for a range of posts.
     *
     * @private
     * @param {DS.Model} model model
     * @param {Array<DS.Model>} posts posts
     * @param {String} direction older or newer
     * @param {String} type activity or event
     * @return {Promise<Array<DS.Model>>} activities
     */
    _getActivitiesForPosts: function _getActivitiesForPosts(model, posts, direction, type) {
      var _this3 = this;

      var cache = this._getCache(model);

      var parseNextUrl = function parseNextUrl(nextUrl) {
        return _npmLodash['default'].zipObject(nextUrl.split('&').map(function (segment) {
          return segment.split('=');
        }));
      };

      // Fetch all activities or events between two points in time (inclusive).
      var fetchActivities = function fetchActivities(timestamps, end, direction) {
        return _this3.get('store').query(type, {
          parent: type === 'activity' ? model : model.get('requester'),
          // since and until are exclusive
          since: timestamps.since,
          until: timestamps.until,
          sort_order: direction === 'newer' ? 'ASC' : 'DESC',
          limit: 10
        }).then(function (result) {
          var isActivityNotCreatedBeforeLastRecord = function isActivityNotCreatedBeforeLastRecord(activity) {
            return activity.get('createdAt').getTime() >= end.getTime();
          };
          var isActivityNotCreatedAfterLastRecord = function isActivityNotCreatedAfterLastRecord(activity) {
            return activity.get('createdAt').getTime() <= end.getTime();
          };
          var filteringFunction = undefined;
          if (!end) {
            filteringFunction = function () {
              return true;
            };
          } else if (direction === 'older') {
            filteringFunction = isActivityNotCreatedBeforeLastRecord;
          } else {
            filteringFunction = isActivityNotCreatedAfterLastRecord;
          }

          var activities = _npmLodash['default'].filter(result.toArray(), filteringFunction);
          if (activities.length < 10) {
            return activities;
          } else {
            var nextUrl = _this3.get('store').metadataFor('activity').next;
            return fetchActivities(parseNextUrl(nextUrl), end, direction).then(function (moreActivities) {
              return activities.concat(moreActivities);
            });
          }
        });
      };

      var getActivitiesBetweenPosts = function getActivitiesBetweenPosts(from, to, direction) {
        var newer = direction === 'newer';
        var isBounded = !to || (newer ? to.get('sequence') === cache.total : to.get('sequence') === 1);
        var start = new Date(from.get('createdAt').getTime() - (newer ? 0 : 1000));
        var end = !isBounded ? new Date(to.get('createdAt').getTime() - (newer ? 1000 : 0)) : null;
        var timestamps = {
          since: direction === 'newer' ? Math.floor((start.getTime() - 1000) / 1000) : null,
          until: direction === 'older' ? Math.floor((start.getTime() + 1000) / 1000) : null
        };
        return fetchActivities(timestamps, end, direction);
      };

      var from = posts[0];
      var to = posts.length === 1 ? null : posts[posts.length - 1];

      return getActivitiesBetweenPosts(from, to, direction);
    },

    /**
     * Recursive function used by getPosts
     *
     * @private
     * @param {DS.Model} model model
     * @param {DS.Model} post post
     * @param {String} direction 'older' or 'newer'
     * @param {Number} [count] count
     * @return {Promise} posts
     */
    _getPostsRecursive: function _getPostsRecursive(model, post, direction) {
      var _this4 = this;

      var count = arguments.length <= 3 || arguments[3] === undefined ? defaultPostCount : arguments[3];

      if (count === 0) {
        return Promise.resolve([]);
      }

      var cache = this._getCache(model);

      var nextSequence = post.get('sequence') + (direction === 'older' ? -1 : 1);
      if (cache.total !== null && nextSequence === 0) {
        return Promise.resolve([]);
      }

      var nextPost = cache.posts[nextSequence];
      var queryParamName = direction === 'older' ? 'afterId' : 'beforeId';

      return (nextPost ? Promise.resolve(nextPost) : this._fetchPosts(model, _defineProperty({}, queryParamName, post.get('id'))).then(function () {
        return cache.posts[nextSequence];
      })).then(function (post) {
        if (!post) {
          return [];
        } else {
          return _this4._getPostsRecursive(model, post, direction, count - 1).then(function (posts) {
            return [post].concat(posts);
          });
        }
      });
    },

    /**
     * Retrieves posts from the server. Returns a promise which resolves when
     * fetch is successful
     *
     * @private
     * @param {DS.Model} model model
     * @param {[Number]} options.beforeId id of the post
     * @param {[Number]} options.afterId id of the post
     * @return {Promise} promise
     */
    _fetchPosts: function _fetchPosts(model) {
      var _ref7 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      var _ref7$beforeId = _ref7.beforeId;
      var beforeId = _ref7$beforeId === undefined ? null : _ref7$beforeId;
      var _ref7$afterId = _ref7.afterId;
      var afterId = _ref7$afterId === undefined ? null : _ref7$afterId;

      var cache = this._getCache(model);
      var params = { parent: model };
      if (beforeId !== null) {
        params.before_id = beforeId; // eslint-disable-line camelcase
      }
      if (afterId !== null) {
        params.after_id = afterId; // eslint-disable-line camelcase
      }

      return this.get('store').query('post', params).then(function (newPosts) {
        cache.total = newPosts.get('meta').total;
        newPosts.forEach(function (post) {
          cache.posts[post.get('sequence')] = post;
          if (post.get('sequence') === cache.total) {
            cache.newestPost = post;
          }
          if (post.get('sequence') === 1) {
            cache.oldestPost = post;
          }
        });
      });
    }
  });
});
/* eslint-disable camelcase */
define('frontend-cp/services/url', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    currentUrl: null
  });
});
define('frontend-cp/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Object.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define('frontend-cp/session/admin/automation/businesshours/edit/route', ['exports', 'ember'], function (exports, _ember) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend({
    intl: inject.service(),
    controllerName: 'session.admin.automation.businesshours.new',

    model: function model(params) {
      return this.store.findRecord('business-hour', params.businesshour_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/automation/businesshours/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/automation/businesshours/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/businesshours/edit", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [3, 12], [3, 30]]]], "onCancel", ["subexpr", "action", ["cancelled"], [], ["loc", [null, [4, 11], [4, 31]]]], "title", ["subexpr", "t", ["admin.businesshours.headings.edit"], ["title", ["get", "model.title", ["loc", [null, [5, 53], [5, 64]]]]], ["loc", [null, [5, 8], [5, 65]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/automation/businesshours/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    store: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),

    actions: {
      transitionToAddNewBusinessHour: function transitionToAddNewBusinessHour() {
        this.transitionToRoute('session.admin.automation.businesshours.new');
      },
      editBusinessHour: function editBusinessHour(businessHour) {
        this.transitionToRoute('session.admin.automation.businesshours.edit', businessHour);
      },
      makeDefault: function makeDefault(businessHour, event) {
        var _this = this;

        event.stopPropagation();
        var prevDefault = this.get('store').peekAll('business-hour').findBy('isDefault', true);
        prevDefault.set('isDefault', false);

        businessHour.set('isDefault', true);
        businessHour.save().then(function () {
          _this.get('metrics').trackEvent({
            event: 'Admin Business Hour Make Default',
            category: 'Admin Business Hours',
            action: 'click',
            label: 'make default'
          });

          prevDefault.reload();
        }, function () {
          _this.get('metrics').trackEvent({
            event: 'Admin Business Hour Make Default Failed',
            category: 'Admin Business Hours',
            action: 'click',
            label: 'make default'
          });

          businessHour.rollbackAttributes();
        });
      },

      deleteBusinessHour: function deleteBusinessHour(businessHour, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          businessHour.deleteRecord();
          businessHour.save();

          this.get('metrics').trackEvent({
            event: 'Admin Business Hour Delete',
            category: 'Admin Business Hours',
            action: 'click',
            label: 'delete'
          });
        }
      }
    }
  });
});
define('frontend-cp/session/admin/automation/businesshours/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend(_frontendCpMixinsRememberRoute['default'], {
    storeCache: inject.service('store-cache'),
    store: inject.service(),

    beforeModel: function beforeModel() {},

    model: function model() {
      return this.get('store').query('business-hour', { limit: 10000 });
    }
  });
});
define("frontend-cp/session/admin/automation/businesshours/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 8
                    },
                    "end": {
                      "line": 14,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode(" (");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(")");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.default"], [], ["loc", [null, [13, 39], [13, 62]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 15,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "businessHour.title", ["loc", [null, [11, 29], [11, 51]]]], ["block", "if", [["get", "businessHour.isDefault", ["loc", [null, [12, 14], [12, 36]]]]], [], 0, null, ["loc", [null, [12, 8], [14, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 8
                    },
                    "end": {
                      "line": 20,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode("|");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element1, 'onclick');
                  morphs[1] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makeDefault", ["get", "businessHour", ["loc", [null, [18, 42], [18, 54]]]]], [], ["loc", [null, [18, 19], [18, 56]]]]], ["inline", "t", ["generic.make_default"], [], ["loc", [null, [18, 57], [18, 85]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 25,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode("|");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [3]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["deleteBusinessHour", ["get", "businessHour", ["loc", [null, [24, 49], [24, 61]]]]], [], ["loc", [null, [24, 19], [24, 63]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [24, 64], [24, 86]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [2]);
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createAttrMorph(element2, 'onclick');
                morphs[2] = dom.createMorphAt(element2, 0, 0);
                morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["subexpr", "not", [["get", "businessHour.isDefault", ["loc", [null, [17, 19], [17, 41]]]]], [], ["loc", [null, [17, 14], [17, 42]]]]], [], 0, null, ["loc", [null, [17, 8], [20, 15]]]], ["attribute", "onclick", ["subexpr", "action", ["editBusinessHour", ["get", "businessHour", ["loc", [null, [21, 47], [21, 59]]]]], [], ["loc", [null, [21, 19], [21, 61]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [21, 62], [21, 82]]]], ["block", "if", [["subexpr", "not", [["get", "businessHour.isDefault", ["loc", [null, [22, 19], [22, 41]]]]], [], ["loc", [null, [22, 14], [22, 42]]]]], [], 1, null, ["loc", [null, [22, 8], [25, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [10, 6], [15, 30]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [16, 6], [26, 33]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editBusinessHour", ["get", "businessHour", ["loc", [null, [9, 61], [9, 73]]]]], [], ["loc", [null, [9, 34], [9, 74]]]]], 0, null, ["loc", [null, [9, 4], [27, 27]]]]],
          locals: ["businessHour"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "model", ["loc", [null, [8, 10], [8, 15]]]]], [], 0, null, ["loc", [null, [8, 2], [28, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/automation/businesshours/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.businesshours.headings.index"], [], ["loc", [null, [2, 8], [2, 48]]]], "buttonText", ["subexpr", "t", ["admin.businesshours.buttons.add"], [], ["loc", [null, [3, 13], [3, 50]]]], "onSave", ["subexpr", "action", ["transitionToAddNewBusinessHour"], [], ["loc", [null, [4, 9], [4, 50]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [7, 0], [29, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/automation/businesshours/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service(),
    intl: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.automation.businesshours.index');
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasChanges();
    },

    actions: {
      saved: function saved() {
        this.get('metrics').trackEvent({
          event: 'Admin Business Hour Created',
          category: 'Admin Business Hours',
          action: 'click',
          label: 'save button'
        });
        this.successAction();
      },
      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Business Hour Updated',
          category: 'Admin Business Hours',
          action: 'click',
          label: 'save button'
        });
        this.successAction();
      },
      cancelled: function cancelled() {
        this.get('metrics').trackEvent({
          event: 'Admin Business Hour Cancelled',
          category: 'Admin Business Hours',
          action: 'click',
          label: 'cancel button'
        });
        this.transitionToRoute('session.admin.automation.businesshours.index');
      },
      rollbackModel: function rollbackModel() {
        this.get('model').rollbackAttributes();
        this.get('model.holidays').forEach(function (holiday) {
          holiday.rollbackAttributes();
        });
      }
    }
  });
});
define('frontend-cp/session/admin/automation/businesshours/new/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return this.store.createRecord('business-hour', {
        zones: {
          monday: [],
          tuesday: [],
          wednesday: [],
          thursday: [],
          friday: [],
          saturday: [],
          sunday: []
        }
      });
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/automation/businesshours/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/automation/businesshours/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/businesshours/edit", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "onSuccess", ["subexpr", "action", ["saved"], [], ["loc", [null, [3, 12], [3, 28]]]], "onCancel", ["subexpr", "action", ["cancelled"], [], ["loc", [null, [4, 11], [4, 31]]]], "title", ["subexpr", "t", ["admin.businesshours.headings.new"], [], ["loc", [null, [5, 8], [5, 46]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/edit/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    actions: {
      transitionToIndexRoute: function transitionToIndexRoute() {
        this.transitionToRoute('session.admin.channels.twitter.index');
      },

      saveTwitterAccount: function saveTwitterAccount() {
        return this.get('model').save();
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.transitionToRoute('session.admin.channels.twitter.index');
      }
    }
  });
});
define('frontend-cp/session/admin/channels/twitter/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {

    intlService: _ember['default'].inject.service('intl'),
    model: function model(params) {
      return this.store.findRecord('twitter-account', params.account_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {

          var translatedConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/channels/twitter/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/twitter/edit", [], ["account", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 10], [2, 15]]]]], [], []], "onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [3, 11], [3, 44]]]], "onSave", ["subexpr", "action", ["saveTwitterAccount"], [], ["loc", [null, [4, 9], [4, 38]]]], "onSuccess", ["subexpr", "action", ["success"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var inject = _ember['default'].inject;
  var computed = _ember['default'].computed;
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    intl: inject.service('intl'),
    notifications: inject.service('notification'),

    enabledAccounts: computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') === true;
      });
    }),
    disabledAccounts: computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (account) {
        return account.get('isEnabled') !== true;
      });
    }),

    actions: {
      toggleEnabledProperty: function toggleEnabledProperty(account, e) {
        e.stopPropagation();
        account.toggleProperty('isEnabled');
        account.save();
      },
      editAccount: function editAccount(account, event) {
        if (event && _ember['default'].$(event.target).hasClass('js-admin_channels_twitter__delete-button')) {
          return;
        }

        this.transitionToRoute('session.admin.channels.twitter.edit', account);
      },

      showDeleteConfirmation: function showDeleteConfirmation(account) {
        var _this = this;

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          account.destroyRecord().then(function () {
            _this.get('notifications').success(_this.get('intl').findTranslationByKey('admin.twitter.deleted.message'));
          });
        }
      },
      redirectToTwitterAuthenticationEndpoint: function redirectToTwitterAuthenticationEndpoint(e) {
        e.stopPropagation();
        this.store.queryRecord('oauth-link', { callback: '/admin/channels/twitter/link' }).then(function (link) {
          window.location.href = link.get('id');
        });
      },

      redirectToTwitterAuthenticationForReauthorize: function redirectToTwitterAuthenticationForReauthorize() {
        this.store.queryRecord('oauth-link', { callback: '/admin/channels/twitter/reauthorize' }).then(function (link) {
          window.location.href = link.get('id');
        });
      }
    }
  });
});
define('frontend-cp/session/admin/channels/twitter/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {

    model: function model() {
      return this.store.findAll('twitter-account');
    }

  });
});
define("frontend-cp/session/admin/channels/twitter/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 20,
                        "column": 12
                      },
                      "end": {
                        "line": 20,
                        "column": 96
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode(" ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-caption");
                    var el2 = dom.createTextNode(" (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(") ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                    return morphs;
                  },
                  statements: [["content", "account.brand.name", ["loc", [null, [20, 65], [20, 87]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 21,
                        "column": 12
                      },
                      "end": {
                        "line": 21,
                        "column": 123
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "t-bad");
                    var el2 = dom.createTextNode(" (");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    var el2 = dom.createTextNode(") ");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                    return morphs;
                  },
                  statements: [["inline", "t", ["admin.twitter.connection_lost"], [], ["loc", [null, [21, 77], [21, 114]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 8
                    },
                    "end": {
                      "line": 23,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "t-bold");
                  var el3 = dom.createTextNode("@");
                  dom.appendChild(el2, el3);
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n            ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element5 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(element5, 3, 3);
                  morphs[2] = dom.createMorphAt(element5, 5, 5);
                  return morphs;
                },
                statements: [["content", "account.screenName", ["loc", [null, [19, 34], [19, 56]]]], ["block", "if", [["get", "account.brand.name", ["loc", [null, [20, 18], [20, 36]]]]], [], 0, null, ["loc", [null, [20, 12], [20, 103]]]], ["block", "unless", [["subexpr", "eq", [["get", "account.status", ["loc", [null, [21, 26], [21, 40]]]], "AVAILABLE"], [], ["loc", [null, [21, 22], [21, 53]]]]], [], 1, null, ["loc", [null, [21, 12], [21, 134]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 26,
                        "column": 10
                      },
                      "end": {
                        "line": 26,
                        "column": 88
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["inline", "t", ["generic.edit"], [], ["loc", [null, [26, 68], [26, 88]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 24,
                      "column": 8
                    },
                    "end": {
                      "line": 29,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "js-admin_channels_twitter__delete-button");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var element3 = dom.childAt(fragment, [5]);
                  var element4 = dom.childAt(fragment, [7]);
                  var morphs = new Array(7);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2, 0, 0);
                  morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  morphs[3] = dom.createAttrMorph(element3, 'onclick');
                  morphs[4] = dom.createMorphAt(element3, 0, 0);
                  morphs[5] = dom.createAttrMorph(element4, 'onclick');
                  morphs[6] = dom.createMorphAt(element4, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["redirectToTwitterAuthenticationForReauthorize", ["get", "account", ["loc", [null, [25, 78], [25, 85]]]]], [], ["loc", [null, [25, 21], [25, 87]]]]], ["inline", "t", ["admin.twitter.reconnect"], [], ["loc", [null, [25, 88], [25, 119]]]], ["block", "link-to", ["session.admin.channels.twitter.edit", ["get", "account", ["loc", [null, [26, 59], [26, 66]]]]], [], 0, null, ["loc", [null, [26, 10], [26, 100]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledProperty", ["get", "account", ["loc", [null, [27, 54], [27, 61]]]]], [], ["loc", [null, [27, 21], [27, 63]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [27, 64], [27, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "account", ["loc", [null, [28, 104], [28, 111]]]]], [], ["loc", [null, [28, 70], [28, 113]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [28, 114], [28, 136]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 6
                  },
                  "end": {
                    "line": 30,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [17, 8], [23, 32]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [24, 8], [29, 35]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editAccount", ["get", "account", ["loc", [null, [16, 58], [16, 65]]]]], [], ["loc", [null, [16, 36], [16, 66]]]]], 0, null, ["loc", [null, [16, 6], [30, 29]]]]],
            locals: ["account"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [11, 6], [11, 29]]]], ["block", "each", [["get", "enabledAccounts", ["loc", [null, [15, 12], [15, 27]]]]], [], 0, null, ["loc", [null, [15, 4], [32, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [9, 2], [33, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 44,
                      "column": 10
                    },
                    "end": {
                      "line": 46,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-bold");
                  var el2 = dom.createTextNode("@");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                  return morphs;
                },
                statements: [["content", "account.screenName", ["loc", [null, [45, 34], [45, 56]]]], ["content", "account.brand.title", ["loc", [null, [45, 88], [45, 111]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 47,
                      "column": 10
                    },
                    "end": {
                      "line": 50,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  dom.setAttribute(el1, "class", "js-admin_channels_twitter__delete-button");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledProperty", ["get", "account", ["loc", [null, [48, 58], [48, 65]]]]], [], ["loc", [null, [48, 25], [48, 67]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [48, 68], [48, 90]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "account", ["loc", [null, [49, 108], [49, 115]]]]], [], ["loc", [null, [49, 74], [49, 117]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [49, 118], [49, 140]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [44, 10], [46, 34]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [47, 10], [50, 37]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], [], 0, null, ["loc", [null, [43, 6], [51, 29]]]]],
            locals: ["account"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 37,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [39, 6], [39, 30]]]], ["block", "each", [["get", "disabledAccounts", ["loc", [null, [42, 12], [42, 28]]]]], [], 0, null, ["loc", [null, [42, 4], [52, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [37, 2], [53, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/channels/twitter/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.twitter.headings.index"], [], ["loc", [null, [2, 8], [2, 42]]]], "buttonText", ["subexpr", "t", ["admin.twitter.buttons.create_account"], [], ["loc", [null, [3, 13], [3, 55]]]], "onSave", ["subexpr", "action", ["redirectToTwitterAuthenticationEndpoint"], [], ["loc", [null, [4, 9], [4, 59]]]], "pageCopy", ["subexpr", "t", ["admin.twitter.description"], [], ["loc", [null, [5, 11], [5, 42]]]]], ["loc", [null, [1, 0], [6, 2]]]], ["block", "if", [["get", "enabledAccounts.length", ["loc", [null, [8, 6], [8, 28]]]]], [], 0, null, ["loc", [null, [8, 0], [34, 7]]]], ["block", "if", [["get", "disabledAccounts.length", ["loc", [null, [36, 6], [36, 29]]]]], [], 1, null, ["loc", [null, [36, 0], [54, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/session/admin/channels/twitter/link/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    queryParams: ['oauth_token', 'oauth_verifier'],

    oauth_token: null,
    oauth_verifier: null,

    updateBackendWithTwitterInfo: function updateBackendWithTwitterInfo() {
      var _this = this;

      if (this.get('oauth_token') && this.get('oauth_verifier')) {
        this.store.createRecord('twitter-account-callback', {
          oauthToken: this.get('oauth_token'),
          oauthVerifier: this.get('oauth_verifier')
        }).save().then(function () {
          _this.get('notification').add({
            type: 'success',
            title: _this.get('intl').findTranslationByKey('generic.changes_saved'),
            autodismiss: true
          });

          _this.transitionToRoute('session.admin.channels.twitter.index');
        })['catch'](function () {
          _this.transitionToRoute('session.admin.channels.twitter.index');
        });
      }
    }

  });
});
/* eslint-disable camelcase */
define('frontend-cp/session/admin/channels/twitter/link/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {

    setupController: function setupController() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._super(args);
      this.controller.updateBackendWithTwitterInfo();
    }

  });
});
define('frontend-cp/session/admin/channels/twitter/reauthorize/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),

    queryParams: ['oauth_token', 'oauth_verifier'],

    oauth_token: null,
    oauth_verifier: null,

    updateBackendWithTwitterInfo: function updateBackendWithTwitterInfo() {
      var _this = this;

      var adapter = this.container.lookup('adapter:application');
      var url = adapter.namespace + '/twitter/account/reauthorize';

      if (this.get('oauth_token') && this.get('oauth_verifier')) {

        var options = {
          data: {
            oauthToken: this.get('oauth_token'),
            oauthVerifier: this.get('oauth_verifier')
          }
        };

        adapter.ajax(url, 'PUT', options).then(function () {
          _this.get('notification').add({
            type: 'success',
            title: _this.get('intl').findTranslationByKey('generic.changes_saved'),
            autodismiss: true
          });
        })['finally'](function () {
          _this.transitionToRoute('session.admin.channels.twitter.index');
        });
      }
    }

  });
});
/* eslint-disable camelcase */
define('frontend-cp/session/admin/channels/twitter/reauthorize/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {

    setupController: function setupController() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this._super(args);
      this.controller.updateBackendWithTwitterInfo();
    }

  });
});
define('frontend-cp/session/admin/manage/case-fields/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.manage.case-fields.new',

    model: function model(params) {
      return this.store.findRecord('case-field', params.case_field_id);
    },

    setupController: function setupController(controller, model) {
      model.cacheRelationships();
      this._super(controller, model);
    },

    afterModel: function afterModel(model) {
      var fieldType = model.get('fieldType');

      switch (fieldType) {
        case 'PRIORITY':
          return model.get('priorities');
        case 'STATUS':
          return model.get('statuses');
        case 'TYPE':
          return model.get('types');
      }
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["agentCaseSettings", true, "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [5, 19], [5, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [6, 18], [6, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [7, 11], [7, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [8, 9], [8, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [9, 12], [9, 30]]]]], ["loc", [null, [1, 0], [10, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      transitionToNewCaseFieldRoute: function transitionToNewCaseFieldRoute() {
        this.transitionToRoute('session.admin.manage.case-fields.select-type');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.findAll('case-field');
    }
  });
});
define("frontend-cp/session/admin/manage/case-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.casefields"], [], ["loc", [null, [2, 8], [2, 30]]]], "buttonText", ["subexpr", "t", ["admin.casefields.buttons.add_new_casefield"], [], ["loc", [null, [3, 13], [3, 61]]]], "onSave", ["subexpr", "action", ["transitionToNewCaseFieldRoute"], [], ["loc", [null, [4, 9], [4, 49]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["inline", "ko-admin/case-fields/index", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 35], [7, 40]]]]], [], []]], ["loc", [null, [7, 0], [7, 42]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),
    customFields: _ember['default'].inject.service('custom-fields'),

    queryParams: ['caseFieldType'],
    caseFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    hasChangedOptions: function hasChangedOptions() {
      return this.get('customFields').hasChangedOptions(this.get('model.options'));
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.manage.case-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.set('model.fieldType', caseFieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin Case Field Save Failed',
            category: 'Admin Case Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Fields Edit Canceled',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-fields.index');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Field Created',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Field Updated',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('case-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["agentCaseSettings", true, "title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [5, 19], [5, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [6, 18], [6, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [7, 11], [7, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [8, 9], [8, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [9, 12], [9, 30]]]], "isApiFieldKeyAvailable", false, "isStatusKeyAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      setCaseFieldType: function setCaseFieldType(caseFieldType) {
        this.transitionToRoute('session.admin.manage.case-fields.new', caseFieldType);
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Fields Edit Canceled',
          category: 'Admin Case Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/case-fields/select-type/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default']);
});
define("frontend-cp/session/admin/manage/case-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.casefields.new.heading"], [], ["loc", [null, [1, 29], [1, 63]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [1, 73], [1, 92]]]]], ["loc", [null, [1, 0], [1, 94]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setCaseFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [3, 32], [3, 51]]]]], ["loc", [null, [3, 0], [3, 53]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    intl: service(),

    controllerName: 'session.admin.manage.case-forms.new',

    model: function model(params) {
      return this.store.findRecord('case-form', params.case_form_id);
    },

    setupController: function setupController(controller, model) {
      model.cacheRelationships();
      this._super(controller, model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollBackModel');
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-forms/edit", [], ["title", ["subexpr", "t", ["admin.caseforms.edit.heading"], [], ["loc", [null, [2, 8], [2, 42]]]], "caseForm", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 11], [3, 16]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    session: _ember['default'].inject.service(),
    intlService: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    enabledForms: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (form) {
        return form.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    disabledForms: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (form) {
        return !form.get('isEnabled');
      });
    }),

    actions: {
      makeDefault: function makeDefault(caseform, e) {
        e.stopPropagation();
        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/cases/forms/default';

        this.store.peekAll('case-form').forEach(function (caseform) {
          caseform.set('isDefault', false);
        });
        caseform.set('isDefault', true);
        //TODO: this model is left dirty - it is not an issue,
        //but ideally we would mark this as clean.

        var options = {
          data: { form_id: caseform.get('id') }
        };

        adapter.ajax(url, 'PUT', options);

        this.get('metrics').trackEvent({
          event: 'Admin Case Form Default Changed',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'default button'
        });
      },

      reorderForms: function reorderForms(orderedForms) {
        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/cases/forms/reorder';

        var startingSortOrderNumber = 1;
        var orderedIds = orderedForms.map(function (form) {
          return form.id;
        });

        var sortOrder = startingSortOrderNumber;
        orderedForms.forEach(function (form) {
          form.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var options = {
          data: { form_ids: orderedIds.toString() }
        };

        adapter.ajax(url, 'PUT', options);

        this.get('metrics').trackEvent({
          event: 'Admin Case Forms Reorder',
          category: 'Admin Case Forms',
          action: 'reorder',
          label: 'reorder icon'
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(caseform, e) {
        e.stopPropagation();
        caseform.toggleProperty('isEnabled');
        caseform.save();

        this.get('metrics').trackEvent({
          event: 'Admin Case Form State Changed',
          category: 'Admin Case Forms',
          action: caseform.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      transitionToNewCaseFormRoute: function transitionToNewCaseFormRoute() {
        this.transitionToRoute('session.admin.manage.case-forms.new');
      },
      editForm: function editForm(form) {
        this.transitionToRoute('session.admin.manage.case-forms.edit', form);
      },

      showDeleteConfirmation: function showDeleteConfirmation(form, e) {
        e.stopPropagation();
        var deleteConfirmationMessage = this.get('intlService').findTranslationByKey('generic.confirm.delete');

        if (confirm(deleteConfirmationMessage)) {
          this.send('deleteField', form);
        }
      },
      deleteField: function deleteField(form) {
        form.destroyRecord();

        this.get('metrics').trackEvent({
          event: 'Admin Case Form Remove',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'delete link'
        });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/admin/manage/case-forms/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.findAll('case-form');
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 52
                    },
                    "end": {
                      "line": 17,
                      "column": 131
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode(" (");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(")");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.default"], [], ["loc", [null, [17, 100], [17, 123]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "t-bold");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(element5, 2, 2);
                return morphs;
              },
              statements: [["content", "form.title", ["loc", [null, [17, 31], [17, 45]]]], ["block", "if", [["get", "form.isDefault", ["loc", [null, [17, 58], [17, 72]]]]], [], 0, null, ["loc", [null, [17, 52], [17, 138]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 22,
                      "column": 8
                    },
                    "end": {
                      "line": 24,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element3, 'onclick');
                  morphs[1] = dom.createMorphAt(element3, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "form", ["loc", [null, [23, 54], [23, 58]]]]], [], ["loc", [null, [23, 23], [23, 60]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [23, 61], [23, 84]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 25,
                      "column": 8
                    },
                    "end": {
                      "line": 27,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element2, 'onclick');
                  morphs[1] = dom.createMorphAt(element2, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["makeDefault", ["get", "form", ["loc", [null, [26, 46], [26, 50]]]]], [], ["loc", [null, [26, 23], [26, 52]]]]], ["inline", "t", ["generic.make_default"], [], ["loc", [null, [26, 53], [26, 81]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 28,
                      "column": 8
                    },
                    "end": {
                      "line": 30,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          | ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element1, 'onclick');
                  morphs[1] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "form", ["loc", [null, [29, 57], [29, 61]]]]], [], ["loc", [null, [29, 23], [29, 63]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [29, 64], [29, 86]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 31,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var morphs = new Array(5);
                morphs[0] = dom.createAttrMorph(element4, 'onclick');
                morphs[1] = dom.createMorphAt(element4, 0, 0);
                morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
                morphs[4] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editForm", ["get", "form", ["loc", [null, [21, 39], [21, 43]]]]], [], ["loc", [null, [21, 19], [21, 45]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [21, 46], [21, 66]]]], ["block", "if", [["get", "form.canBeDisabled", ["loc", [null, [22, 14], [22, 32]]]]], [], 0, null, ["loc", [null, [22, 8], [24, 15]]]], ["block", "if", [["get", "form.canBeMadeDefault", ["loc", [null, [25, 14], [25, 35]]]]], [], 1, null, ["loc", [null, [25, 8], [27, 15]]]], ["block", "if", [["get", "form.canBeDeleted", ["loc", [null, [28, 14], [28, 31]]]]], [], 2, null, ["loc", [null, [28, 8], [30, 15]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [15, 6], [19, 30]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [20, 6], [31, 33]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editForm", ["get", "form", ["loc", [null, [14, 53], [14, 57]]]]], [], ["loc", [null, [14, 34], [14, 58]]]], "class", ["subexpr", "qa-cls", ["qa-admin_case-forms__list-row"], [], ["loc", [null, [14, 65], [14, 105]]]]], 0, null, ["loc", [null, [14, 4], [32, 27]]]]],
          locals: ["form"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [11, 4], [11, 27]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderForms"], [], ["loc", [null, [13, 35], [13, 58]]]], "items", ["subexpr", "@mut", [["get", "enabledForms", ["loc", [null, [13, 65], [13, 77]]]]], [], []]], 0, null, ["loc", [null, [13, 2], [33, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 44,
                      "column": 6
                    },
                    "end": {
                      "line": 46,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "form.title", ["loc", [null, [45, 39], [45, 53]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 47,
                      "column": 6
                    },
                    "end": {
                      "line": 49,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "form", ["loc", [null, [48, 50], [48, 54]]]]], [], ["loc", [null, [48, 19], [48, 56]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [48, 57], [48, 79]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 4
                  },
                  "end": {
                    "line": 50,
                    "column": 4
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [44, 6], [46, 30]]]], ["block", "ko-simple-list/actions", [], [], 1, null, ["loc", [null, [47, 6], [49, 33]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 42,
                  "column": 2
                },
                "end": {
                  "line": 51,
                  "column": 2
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", [" qa-admin_case-forms__list-row"], [], ["loc", [null, [43, 32], [43, 73]]]]], 0, null, ["loc", [null, [43, 4], [50, 27]]]]],
            locals: ["form"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 0
              },
              "end": {
                "line": 52,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [40, 4], [40, 28]]]], ["block", "each", [["get", "disabledForms", ["loc", [null, [42, 10], [42, 23]]]]], [], 0, null, ["loc", [null, [42, 2], [51, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 0
            },
            "end": {
              "line": 53,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms__disabled-list"], [], ["loc", [null, [38, 24], [38, 69]]]]], 0, null, ["loc", [null, [38, 0], [52, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.caseforms"], [], ["loc", [null, [2, 8], [2, 29]]]], "buttonText", ["subexpr", "t", ["admin.caseforms.buttons.add_new_caseform"], [], ["loc", [null, [3, 13], [3, 59]]]], "buttonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__new-button"], [], ["loc", [null, [4, 14], [4, 56]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_case-forms__cancel-button"], [], ["loc", [null, [5, 20], [5, 65]]]], "onSave", ["subexpr", "action", ["transitionToNewCaseFormRoute"], [], ["loc", [null, [6, 9], [6, 48]]]]], ["loc", [null, [1, 0], [7, 2]]]], ["block", "ko-simple-list", [], ["class", ["subexpr", "qa-cls", ["qa-admin_case-forms__enabled-list"], [], ["loc", [null, [9, 24], [9, 68]]]]], 0, null, ["loc", [null, [9, 0], [34, 19]]]], ["block", "if", [["get", "disabledForms", ["loc", [null, [37, 6], [37, 19]]]]], [], 1, null, ["loc", [null, [37, 0], [53, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/session/admin/manage/case-forms/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    wasSaved: false,

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.manage.case-forms.index');
    },

    init: function init() {
      this.set('wasSaved', false);
      this._super.apply(this, arguments);
    },

    actions: {
      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Forms Edit Canceled',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.case-forms.index');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Form Created',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'save button'
        });

        this.set('wasSaved', true);

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Case Form Updated',
          category: 'Admin Case Forms',
          action: 'click',
          label: 'save button'
        });

        this.set('wasSaved', true);

        this.successAction();
      },

      rollBackModel: function rollBackModel() {
        // rollbackAttributes() roll backs changes to a model attributes
        // reload() resets relationships from server, and this model will
        // have correct relationships set, even if they are changes on
        // server
        this.get('model').rollbackAttributes();

        if (this.get('model.id') && !this.get('wasSaved')) {
          this.get('model').reload();
        }
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });
});
define('frontend-cp/session/admin/manage/case-forms/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    intl: service(),

    model: function model() {
      var caseForm = this.store.createRecord('case-form');
      this.store.findAll('case-field').then(function (caseFields) {
        caseFields.forEach(function (field) {
          if (field.get('isSystem')) {
            caseForm.get('fields').pushObject(field);
          }
        });
        // rebuild relationship cache
        // because these changes are made by default
        caseForm.cacheRelationships();
      });

      return caseForm;
    },
    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });
});
define("frontend-cp/session/admin/manage/case-forms/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/case-forms/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-forms/edit", [], ["title", ["subexpr", "t", ["admin.caseforms.new.heading"], [], ["loc", [null, [2, 8], [2, 41]]]], "caseForm", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 11], [3, 16]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [5, 12], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/macros/edit/controller', ['exports', 'ember', 'frontend-cp/mixins/dirty-aware/controller'], function (exports, _ember, _frontendCpMixinsDirtyAwareController) {
  exports['default'] = _ember['default'].Controller.extend(_frontendCpMixinsDirtyAwareController['default'], {
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service(),
    routeNameOnCancel: 'session.admin.manage.macros.index',

    actions: {
      update: function update() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.transitionToRoute('session.admin.manage.macros.index');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/macros/edit/route', ['exports', 'ember', 'frontend-cp/mixins/dirty-aware/route', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsDirtyAwareRoute, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], _frontendCpMixinsDirtyAwareRoute['default'], {
    intl: _ember['default'].inject.service(),

    model: function model(params) {
      return this.store.findRecord('macro', params.macro_id);
    }
  });
});
define("frontend-cp/session/admin/manage/macros/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/macros/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/macros/edit", [], ["title", ["subexpr", "t", ["admin.macros.edit.heading"], [], ["loc", [null, [2, 8], [2, 39]]]], "macro", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onCancel", ["subexpr", "action", ["cancel"], [], ["loc", [null, [4, 11], [4, 28]]]], "onSuccess", ["subexpr", "action", ["update"], [], ["loc", [null, [5, 12], [5, 29]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/macros/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    intl: _ember['default'].inject.service(),

    actions: {
      transitionToNewMacroRoute: function transitionToNewMacroRoute() {
        this.transitionToRoute('session.admin.manage.macros.new');
      },

      editMacro: function editMacro(macro) {
        this.transitionToRoute('session.admin.manage.macros.edit', macro.get('id'));
      },

      deleteMacro: function deleteMacro(macro, e) {
        e.stopPropagation();

        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          macro.destroyRecord();
        }
      }
    }
  });
});
define('frontend-cp/session/admin/manage/macros/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.query('macro', { limit: 500 });
    }
  });
});
define("frontend-cp/session/admin/manage/macros/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold qa-admin_macros__title");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "macro.title", ["loc", [null, [13, 54], [13, 69]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 18,
                      "column": 8
                    },
                    "end": {
                      "line": 20,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  var el2 = dom.createTextNode(", ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                  return morphs;
                },
                statements: [["inline", "t", ["admin.macros.last_used_at"], ["date", ["subexpr", "moment-from-now", [["get", "macro.lastUsedAt", ["loc", [null, [19, 72], [19, 88]]]]], [], ["loc", [null, [19, 55], [19, 89]]]]], ["loc", [null, [19, 18], [19, 91]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 21,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "t", ["admin.macros.usage_count"], ["count", ["subexpr", "@mut", [["get", "macro.usageCount", ["loc", [null, [16, 69], [16, 85]]]]], [], []]], ["loc", [null, [16, 32], [16, 87]]]], ["block", "if", [["get", "macro.lastUsedAt", ["loc", [null, [18, 14], [18, 30]]]]], [], 0, null, ["loc", [null, [18, 8], [20, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 22,
                    "column": 6
                  },
                  "end": {
                    "line": 27,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "ko-simple-list__actions t-right");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          | ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("a");
                var el3 = dom.createComment("");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var element1 = dom.childAt(element0, [1]);
                var element2 = dom.childAt(element0, [3]);
                var morphs = new Array(4);
                morphs[0] = dom.createAttrMorph(element1, 'onclick');
                morphs[1] = dom.createMorphAt(element1, 0, 0);
                morphs[2] = dom.createAttrMorph(element2, 'onclick');
                morphs[3] = dom.createMorphAt(element2, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editMacro", ["get", "macro", ["loc", [null, [24, 42], [24, 47]]]]], [], ["loc", [null, [24, 21], [24, 49]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [24, 50], [24, 70]]]], ["attribute", "onclick", ["subexpr", "action", ["deleteMacro", ["get", "macro", ["loc", [null, [25, 46], [25, 51]]]]], [], ["loc", [null, [25, 23], [25, 53]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [25, 54], [25, 76]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 28,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [12, 6], [14, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [15, 6], [21, 30]]]], ["block", "ko-simple-list/cell", [], [], 2, null, ["loc", [null, [22, 6], [27, 30]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editMacro", ["get", "macro", ["loc", [null, [11, 54], [11, 59]]]]], [], ["loc", [null, [11, 34], [11, 60]]]], "content", ["subexpr", "@mut", [["get", "macro", ["loc", [null, [11, 69], [11, 74]]]]], [], []]], 0, null, ["loc", [null, [11, 4], [28, 27]]]]],
          locals: ["macro"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "model", ["loc", [null, [10, 10], [10, 15]]]]], [], 0, null, ["loc", [null, [10, 2], [29, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/macros/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.macros"], [], ["loc", [null, [2, 8], [2, 26]]]], "buttonText", ["subexpr", "t", ["admin.macros.buttons.add_new_macro"], [], ["loc", [null, [3, 13], [3, 53]]]], "buttonClass", ["subexpr", "qa-cls", ["qa-admin_macros__new-button"], [], ["loc", [null, [4, 14], [4, 52]]]], "cancelButtonClass", ["subexpr", "qa-cls", ["qa-admin_macros__cancel-button"], [], ["loc", [null, [5, 20], [5, 61]]]], "onSave", ["subexpr", "action", ["transitionToNewMacroRoute"], [], ["loc", [null, [6, 9], [6, 45]]]]], ["loc", [null, [1, 0], [7, 2]]]], ["block", "ko-simple-list", [], ["class", ["subexpr", "qa-cls", ["qa-admin_macros__enabled-list"], [], ["loc", [null, [9, 24], [9, 64]]]]], 0, null, ["loc", [null, [9, 0], [30, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/manage/macros/new/controller', ['exports', 'ember', 'frontend-cp/mixins/dirty-aware/controller'], function (exports, _ember, _frontendCpMixinsDirtyAwareController) {
  exports['default'] = _ember['default'].Controller.extend(_frontendCpMixinsDirtyAwareController['default'], {
    intl: _ember['default'].inject.service(),
    notification: _ember['default'].inject.service(),
    routeNameOnCancel: 'session.admin.manage.macros.index',

    actions: {
      create: function create() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.transitionToRoute('session.admin.manage.macros.index');
      }
    }
  });
});
define('frontend-cp/session/admin/manage/macros/new/route', ['exports', 'ember', 'frontend-cp/mixins/dirty-aware/route', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsDirtyAwareRoute, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], _frontendCpMixinsDirtyAwareRoute['default'], {
    model: function model() {
      return this.store.createRecord('macro');
    }
  });
});
define("frontend-cp/session/admin/manage/macros/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/macros/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/macros/edit", [], ["title", ["subexpr", "t", ["admin.macros.new.heading"], [], ["loc", [null, [2, 8], [2, 38]]]], "macro", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 8], [3, 13]]]]], [], []], "onCancel", ["subexpr", "action", ["cancel"], [], ["loc", [null, [4, 11], [4, 28]]]], "onSuccess", ["subexpr", "action", ["create"], [], ["loc", [null, [5, 12], [5, 29]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/views/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    controllerName: 'session.admin.manage.views.new',
    intl: _ember['default'].inject.service(),

    model: function model(params) {
      return this.store.findRecord('view', params.view_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
          this.controller.send('rollBackModel');
        }
      }
    }
  });
});
define("frontend-cp/session/admin/manage/views/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/views/edit", [], ["currentView", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 14], [2, 19]]]]], [], []], "title", ["subexpr", "t", ["admin.views.heading.edit"], [], ["loc", [null, [3, 8], [3, 38]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [4, 12], [4, 30]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [5, 11], [5, 30]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/manage/views/index/controller', ['exports', 'ember'], function (exports, _ember) {

  var INBOX_VIEW_ID = 1;

  exports['default'] = _ember['default'].Controller.extend({
    intl: _ember['default'].inject.service(),
    sessionService: _ember['default'].inject.service('session'),
    notifications: _ember['default'].inject.service('notification'),
    metrics: _ember['default'].inject.service(),

    inboxView: _ember['default'].computed('model.[]', function () {
      return this.get('model').find(function (caseView) {
        return parseInt(caseView.get('id')) === INBOX_VIEW_ID;
      });
    }),

    trashView: _ember['default'].computed('model.[]', function () {
      return this.get('model').find(function (caseView) {
        return caseView.get('viewType') === 'TRASH';
      });
    }),

    enabledViews: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      var _this = this;

      return this.get('model').filter(function (view) {
        return view.get('isEnabled') && ![_this.get('inboxView'), _this.get('trashView')].includes(view);
      }).sortBy('sortOrder');
    }),

    disabledViews: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (view) {
        return !view.get('isEnabled');
      }).sortBy('sortOrder');
    }),

    actions: {
      transitionToNewViewRoute: function transitionToNewViewRoute() {
        this.transitionToRoute('session.admin.manage.views.new');
      },
      editView: function editView(view) {
        this.transitionToRoute('session.admin.manage.views.edit', view);
      },

      reorderViews: function reorderViews(orderedViews) {
        var _this2 = this;

        var adapter = this.container.lookup('adapter:application');
        var url = adapter.namespace + '/views/reorder';

        var startingSortOrderNumber = 2; // The inbox is always frst

        var orderedIds = orderedViews.getEach('id');

        var sortOrder = startingSortOrderNumber;
        orderedViews.forEach(function (customView) {
          customView.set('sortOrder', sortOrder);
          sortOrder++;
        });

        var options = {
          data: {
            view_ids: orderedIds.toString() // eslint-disable-line camelcase
          }
        };

        adapter.ajax(url, 'PUT', options).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.views.order_saved.message'));
        });

        this.get('metrics').trackEvent({
          event: 'Admin Views Reorder',
          category: 'Admin Views',
          action: 'reorder',
          label: 'reorder icon'
        });
      },

      toggleEnabledStatus: function toggleEnabledStatus(view, e) {
        var _this3 = this;

        e.stopPropagation();
        view.toggleProperty('isEnabled');
        view.save().then(function () {
          var notificationMessage = undefined;
          if (view.get('isEnabled')) {
            notificationMessage = _this3.get('intl').findTranslationByKey('admin.views.enabled.message');
          } else {
            notificationMessage = _this3.get('intl').findTranslationByKey('admin.views.disabled.message');
          }

          _this3.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin View Status Update',
          category: 'Admin Views',
          action: view.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'status link'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(view, e) {
        var _this4 = this;

        e.stopPropagation();
        var locales = this.get('intl.locales');
        var deleteConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.delete', locales);

        if (confirm(deleteConfirmationMessage)) {
          // eslint-disable-line
          view.destroyRecord().then(function () {
            _this4.get('notifications').success(_this4.get('intl').findTranslationByKey('admin.views.deleted.message'));
          });

          this.get('metrics').trackEvent({
            event: 'Admin View Remove',
            category: 'Admin Views',
            action: 'click',
            label: 'delete link'
          });
        }
        return false;
      }
    }
  });
});
define('frontend-cp/session/admin/manage/views/index/route', ['exports', 'ember', 'frontend-cp/config/environment', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpConfigEnvironment, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.query('view', { limit: _frontendCpConfigEnvironment['default'].APP.views.maxLimit });
    }
  });
});
define("frontend-cp/session/admin/manage/views/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-caption");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element12, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "inboxView.title", ["loc", [null, [11, 29], [11, 48]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [12, 32], [12, 68]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element11 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element11, 1, 1);
              morphs[1] = dom.createMorphAt(element11, 3, 3);
              return morphs;
            },
            statements: [["inline", "t", ["generic.shared_with"], [], ["loc", [null, [17, 8], [17, 35]]]], ["content", "inboxView.visibilityString", ["loc", [null, [17, 36], [17, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [9, 4], [14, 28]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [15, 4], [19, 28]]]], ["content", "ko-simple-list/cell", ["loc", [null, [20, 4], [20, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["content", "enabledView.title", ["loc", [null, [27, 10], [27, 31]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 30,
                    "column": 6
                  },
                  "end": {
                    "line": 34,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode(" ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element10 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(element10, 1, 1);
                morphs[1] = dom.createMorphAt(element10, 3, 3);
                return morphs;
              },
              statements: [["inline", "t", ["generic.shared_with"], [], ["loc", [null, [32, 10], [32, 37]]]], ["content", "enabledView.visibilityString", ["loc", [null, [32, 38], [32, 70]]]]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createTextNode("|");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-caption");
                var el2 = dom.createTextNode("|");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var element8 = dom.childAt(fragment, [5]);
                var element9 = dom.childAt(fragment, [9]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element7, 'onclick');
                morphs[1] = dom.createMorphAt(element7, 0, 0);
                morphs[2] = dom.createAttrMorph(element8, 'onclick');
                morphs[3] = dom.createMorphAt(element8, 0, 0);
                morphs[4] = dom.createAttrMorph(element9, 'onclick');
                morphs[5] = dom.createMorphAt(element9, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editView", ["get", "enabledView", ["loc", [null, [36, 39], [36, 50]]]]], [], ["loc", [null, [36, 19], [36, 52]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [36, 53], [36, 73]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "enabledView", ["loc", [null, [38, 50], [38, 61]]]]], [], ["loc", [null, [38, 19], [38, 63]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [38, 64], [38, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "enabledView", ["loc", [null, [40, 53], [40, 64]]]]], [], ["loc", [null, [40, 19], [40, 67]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [40, 68], [40, 90]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 4
                },
                "end": {
                  "line": 42,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [25, 6], [29, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [30, 6], [34, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [35, 6], [41, 33]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 2
              },
              "end": {
                "line": 43,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", [" qa-view-list-active--title"], [], ["loc", [null, [24, 32], [24, 70]]]], "onClick", ["subexpr", "action", ["editView", ["get", "enabledView", ["loc", [null, [24, 98], [24, 109]]]]], [], ["loc", [null, [24, 79], [24, 110]]]]], 0, null, ["loc", [null, [24, 4], [42, 27]]]]],
          locals: ["enabledView"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 46,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-caption");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element6 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.title"], [], ["loc", [null, [48, 29], [48, 66]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [49, 32], [49, 68]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 56,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element5, 1, 1);
              morphs[1] = dom.createMorphAt(element5, 3, 3);
              return morphs;
            },
            statements: [["inline", "t", ["generic.shared_with"], [], ["loc", [null, [54, 8], [54, 35]]]], ["content", "trashView.visibilityString", ["loc", [null, [54, 36], [54, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 45,
                "column": 2
              },
              "end": {
                "line": 58,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [46, 4], [51, 28]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [52, 4], [56, 28]]]], ["content", "ko-simple-list/cell", ["loc", [null, [57, 4], [57, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 61,
                  "column": 4
                },
                "end": {
                  "line": 66,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-bold");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              dom.setAttribute(el2, "class", "t-caption");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element4 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
              morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
              return morphs;
            },
            statements: [["content", "trashView.title", ["loc", [null, [63, 29], [63, 48]]]], ["inline", "t", ["admin.caseforms.label.system"], [], ["loc", [null, [64, 32], [64, 68]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 67,
                  "column": 4
                },
                "end": {
                  "line": 71,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("span");
              dom.setAttribute(el1, "class", "t-caption");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element3, 1, 1);
              morphs[1] = dom.createMorphAt(element3, 3, 3);
              return morphs;
            },
            statements: [["inline", "t", ["generic.shared_with"], [], ["loc", [null, [69, 8], [69, 35]]]], ["content", "trashView.visibilityString", ["loc", [null, [69, 36], [69, 66]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 60,
                "column": 2
              },
              "end": {
                "line": 73,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [61, 4], [66, 28]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [67, 4], [71, 28]]]], ["content", "ko-simple-list/cell", ["loc", [null, [72, 4], [72, 27]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 74,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(5);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [5, 4], [5, 27]]]], ["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-view-list-active--title"], [], ["loc", [null, [8, 30], [8, 67]]]]], 0, null, ["loc", [null, [8, 2], [21, 25]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderViews"], [], ["loc", [null, [23, 35], [23, 58]]]], "items", ["subexpr", "@mut", [["get", "enabledViews", ["loc", [null, [23, 65], [23, 77]]]]], [], []]], 1, null, ["loc", [null, [23, 2], [43, 26]]]], ["block", "ko-simple-list/row", [], [], 2, null, ["loc", [null, [45, 2], [58, 25]]]], ["block", "ko-simple-list/row", [], [], 3, null, ["loc", [null, [60, 2], [73, 25]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 83,
                      "column": 6
                    },
                    "end": {
                      "line": 85,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-bold t-caption");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledView.title", ["loc", [null, [84, 39], [84, 61]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 86,
                      "column": 6
                    },
                    "end": {
                      "line": 88,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode(" ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element2, 0, 0);
                  morphs[1] = dom.createMorphAt(element2, 2, 2);
                  return morphs;
                },
                statements: [["inline", "t", ["generic.shared_with"], [], ["loc", [null, [87, 32], [87, 59]]]], ["content", "disabledView.visibilityString", ["loc", [null, [87, 60], [87, 93]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 89,
                      "column": 6
                    },
                    "end": {
                      "line": 92,
                      "column": 6
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption");
                  var el2 = dom.createTextNode("|");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [5]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledView", ["loc", [null, [90, 50], [90, 62]]]]], [], ["loc", [null, [90, 19], [90, 64]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [90, 65], [90, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledView", ["loc", [null, [91, 86], [91, 98]]]]], [], ["loc", [null, [91, 52], [91, 100]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [91, 101], [91, 123]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 82,
                    "column": 6
                  },
                  "end": {
                    "line": 93,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [83, 6], [85, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [86, 6], [88, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [89, 6], [92, 33]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 81,
                  "column": 4
                },
                "end": {
                  "line": 94,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["class", ["subexpr", "qa-cls", ["qa-view-list-inactive--title"], [], ["loc", [null, [82, 34], [82, 73]]]]], 0, null, ["loc", [null, [82, 6], [93, 29]]]]],
            locals: ["disabledView"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 77,
                "column": 2
              },
              "end": {
                "line": 95,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [79, 6], [79, 30]]]], ["block", "each", [["get", "disabledViews", ["loc", [null, [81, 12], [81, 25]]]]], [], 0, null, ["loc", [null, [81, 4], [94, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 76,
              "column": 0
            },
            "end": {
              "line": 96,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [77, 2], [95, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 97,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.views"], [], ["loc", [null, [1, 29], [1, 46]]]], "buttonText", ["subexpr", "t", ["admin.views.buttons.add_new"], [], ["loc", [null, [1, 58], [1, 91]]]], "onSave", ["subexpr", "action", ["transitionToNewViewRoute"], [], ["loc", [null, [1, 99], [1, 134]]]]], ["loc", [null, [1, 0], [1, 136]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [3, 0], [74, 19]]]], ["block", "if", [["get", "disabledViews.length", ["loc", [null, [76, 6], [76, 26]]]]], [], 1, null, ["loc", [null, [76, 0], [96, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/session/admin/manage/views/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('model').rollbackAttributes();
      },

      saved: function saved() {
        this.get('notification').success(this.get('intl').findTranslationByKey('generic.changes_saved'));

        this.get('metrics').trackEvent({
          event: 'Admin View Created',
          category: 'Admin Views',
          action: 'click',
          label: 'save button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      },

      updated: function updated() {
        this.get('notification').success(this.get('intl').findTranslationByKey('generic.changes_saved'));

        this.get('metrics').trackEvent({
          event: 'Admin View Updated',
          category: 'Admin Views',
          action: 'click',
          label: 'save button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin View Creation Canceled',
          category: 'Admin Views',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.manage.views.index');
      }
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    }
  });
});
define('frontend-cp/session/admin/manage/views/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    intl: _ember['default'].inject.service(),

    model: function model() {
      var newView = this.store.createRecord('view');

      /* Setup defaults and recache the relationships */
      var firstProposition = this.store.createRecord('proposition', {});
      //let firstCollection = this.store.createRecord('predicate-collection', {
      //  propositions: [firstProposition]
      //});

      newView.get('predicateCollections').createRecord({
        propositions: [firstProposition]
      });

      this.store.findAll('column').then(function (columns) {
        var defaults = ['caseid', 'subject', 'casestatusid', 'assigneeagentid', 'updatedat', 'requesterid'];
        var filtered = columns.filter(function (column) {
          return defaults.indexOf(column.get('id')) > -1;
        });
        newView.get('columns').pushObjects(filtered);
      });

      newView.set('orderBy', 'ASC');
      newView.set('orderByColumn', 'updatedat');

      newView.cacheRelationships();
      return newView;
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (!shouldRollBackModel) {
            transition.abort();
            return;
          }
        }
        this.controller.send('rollBackModel');
      }
    }
  });
});
define("frontend-cp/session/admin/manage/views/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/manage/views/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/views/edit", [], ["currentView", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 14], [2, 19]]]]], [], []], "title", ["subexpr", "t", ["admin.views.heading.new"], [], ["loc", [null, [3, 8], [3, 37]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["saved"], [], ["loc", [null, [5, 12], [5, 28]]]]], ["loc", [null, [1, 0], [6, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.organization-fields.new',

    model: function model(params) {
      return this.store.findRecord('organization-field', params.organization_field_id);
    },

    setupController: function setupController(controller, model) {
      model.cacheRelationships();
      this._super(controller, model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/organization-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isCustomerEditAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewFieldRoute: function transitionToNewFieldRoute() {
        this.transitionToRoute('session.admin.people.organization-fields.select-type');
      },

      toggleEnabledStatus: function toggleEnabledStatus(field, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(field).then(function () {
          var notificationMessage = undefined;
          if (field.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.organizationfields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.organizationfields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field State Changed',
          category: 'Admin Organization Fields',
          action: field.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Remove',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.organizationfields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.organization-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Reorder',
          category: 'Admin Organization Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.findAll('organization-field');
    }
  });
});
define("frontend-cp/session/admin/people/organization-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [11, 29], [11, 50]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 8
                    },
                    "end": {
                      "line": 16,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(1);
                  morphs[0] = dom.createAttrMorph(element7, 'class');
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [15, 79], [15, 111]]]], ["get", "customfield.fieldType", ["loc", [null, [15, 112], [15, 133]]]]], [], ["loc", [null, [15, 67], [15, 135]]]]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  dom.setAttribute(el1, "class", "t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [17, 43], [17, 79]]]], ["get", "customfield.fieldType", ["loc", [null, [17, 80], [17, 101]]]]], [], ["loc", [null, [17, 32], [17, 102]]]]], [], ["loc", [null, [17, 28], [17, 104]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [14, 8], [18, 20]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(fragment, [3]);
                var element6 = dom.childAt(fragment, [5]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element4, 'onclick');
                morphs[1] = dom.createMorphAt(element4, 0, 0);
                morphs[2] = dom.createAttrMorph(element5, 'onclick');
                morphs[3] = dom.createMorphAt(element5, 0, 0);
                morphs[4] = dom.createAttrMorph(element6, 'onclick');
                morphs[5] = dom.createMorphAt(element6, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [21, 40], [21, 51]]]]], [], ["loc", [null, [21, 19], [21, 53]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [21, 54], [21, 74]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [22, 50], [22, 61]]]]], [], ["loc", [null, [22, 19], [22, 63]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [22, 64], [22, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [23, 53], [23, 64]]]]], [], ["loc", [null, [23, 19], [23, 66]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [23, 67], [23, 89]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [10, 6], [12, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [13, 6], [19, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [20, 6], [24, 33]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [9, 54], [9, 65]]]]], [], ["loc", [null, [9, 34], [9, 66]]]]], 0, null, ["loc", [null, [9, 4], [25, 27]]]]],
          locals: ["customfield"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [5, 4], [5, 27]]]], ["block", "ko-reorderable-list", [], ["onReorder", ["subexpr", "action", ["reorderCustomFields"], [], ["loc", [null, [8, 35], [8, 65]]]], "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [8, 72], [8, 84]]]]], [], []]], 0, null, ["loc", [null, [8, 2], [26, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 36,
                      "column": 8
                    },
                    "end": {
                      "line": 38,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [37, 41], [37, 64]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 40,
                        "column": 10
                      },
                      "end": {
                        "line": 42,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element3, 'class');
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [41, 81], [41, 113]]]], ["get", "disabledfield.fieldType", ["loc", [null, [41, 114], [41, 137]]]]], [], ["loc", [null, [41, 69], [41, 139]]]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 42,
                        "column": 10
                      },
                      "end": {
                        "line": 44,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "t-caption");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [43, 48], [43, 84]]]], ["get", "disabledfield.fieldType", ["loc", [null, [43, 85], [43, 108]]]]], [], ["loc", [null, [43, 37], [43, 109]]]]], [], ["loc", [null, [43, 33], [43, 111]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 39,
                      "column": 8
                    },
                    "end": {
                      "line": 45,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [40, 10], [44, 22]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 46,
                      "column": 8
                    },
                    "end": {
                      "line": 50,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var element2 = dom.childAt(fragment, [5]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  morphs[4] = dom.createAttrMorph(element2, 'onclick');
                  morphs[5] = dom.createMorphAt(element2, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [47, 42], [47, 55]]]]], [], ["loc", [null, [47, 21], [47, 57]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [47, 58], [47, 78]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [48, 52], [48, 65]]]]], [], ["loc", [null, [48, 21], [48, 67]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [48, 68], [48, 90]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [49, 55], [49, 68]]]]], [], ["loc", [null, [49, 21], [49, 70]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [49, 71], [49, 93]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [36, 8], [38, 32]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [39, 8], [45, 32]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [46, 8], [50, 35]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [35, 56], [35, 69]]]]], [], ["loc", [null, [35, 36], [35, 70]]]]], 0, null, ["loc", [null, [35, 6], [51, 29]]]]],
            locals: ["disabledfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [32, 6], [32, 30]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [34, 12], [34, 26]]]]], [], 0, null, ["loc", [null, [34, 4], [52, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [30, 2], [53, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.organizationfields"], [], ["loc", [null, [1, 29], [1, 59]]]], "buttonText", ["subexpr", "t", ["admin.fields.add_new_field"], [], ["loc", [null, [1, 71], [1, 103]]]], "onSave", ["subexpr", "action", ["transitionToNewFieldRoute"], [], ["loc", [null, [1, 111], [1, 147]]]]], ["loc", [null, [1, 0], [1, 149]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [3, 0], [27, 19]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [29, 6], [29, 27]]]]], [], 1, null, ["loc", [null, [29, 0], [54, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    customFields: _ember['default'].inject.service('custom-fields'),
    metrics: _ember['default'].inject.service(),

    queryParams: ['organizationFieldType'],
    organizationFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    hasChangedOptions: function hasChangedOptions() {
      return this.get('customFields').hasChangedOptions(this.get('model.options'));
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.organization-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin Organization Field Save Failed',
            category: 'Admin Organization Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      success: function success() {
        this.get('notification').add({
          type: 'success',
          title: this.get('intl').findTranslationByKey('generic.changes_saved'),
          autodismiss: true
        });

        this.send('transitionToIndexRoute');
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Created',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Field Updated',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Fields Edit Canceled',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.organization-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('organization-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/organization-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isStatusKeyAvailable", false, "isCustomerEditAvailable", false], ["loc", [null, [1, 0], [13, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/organization-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      setUserFieldType: function setUserFieldType(fieldType) {
        this.transitionToRoute('session.admin.people.organization-fields.new', fieldType);
      },

      transitionToIndexRoute: function transitionToIndexRoute() {
        this.get('metrics').trackEvent({
          event: 'Admin Organization Fields Edit Canceled',
          category: 'Admin Organization Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.people.organization-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/organization-fields/select-type/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default']);
});
define("frontend-cp/session/admin/people/organization-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 67
          }
        },
        "moduleName": "frontend-cp/session/admin/people/organization-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.organizationfields.new.heading"], [], ["loc", [null, [1, 29], [1, 71]]]], "onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [1, 81], [1, 114]]]]], ["loc", [null, [1, 0], [1, 116]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setUserFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["transitionToIndexRoute"], [], ["loc", [null, [3, 32], [3, 65]]]]], ["loc", [null, [3, 0], [3, 67]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/roles/edit/route', ['exports', 'frontend-cp/session/admin/people/roles/form/route'], function (exports, _frontendCpSessionAdminPeopleRolesFormRoute) {
  exports['default'] = _frontendCpSessionAdminPeopleRolesFormRoute['default'].extend({
    model: function model(params) {
      return this.store.findRecord('role', params.role_id);
    }
  });
});
define('frontend-cp/session/admin/people/roles/form/controller', ['exports', 'ember', 'frontend-cp/mixins/dirty-aware/controller'], function (exports, _ember, _frontendCpMixinsDirtyAwareController) {
  var inject = _ember['default'].inject;
  exports['default'] = _ember['default'].Controller.extend(_frontendCpMixinsDirtyAwareController['default'], {
    intl: inject.service(),
    routeNameOnCancel: 'session.admin.people.roles.index',

    actions: {
      transitionToIndex: function transitionToIndex() {
        this.transitionToRoute('session.admin.people.roles.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/roles/form/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route', 'frontend-cp/mixins/dirty-aware/route'], function (exports, _ember, _frontendCpMixinsRememberRoute, _frontendCpMixinsDirtyAwareRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsDirtyAwareRoute['default'], _frontendCpMixinsRememberRoute['default'], {
    controllerName: 'session.admin.people.roles.form',
    templateName: 'session.admin.people.roles.form'
  });
});
define("frontend-cp/session/admin/people/roles/form/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/roles/form/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/roles/form", [], ["role", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 7], [2, 12]]]]], [], []], "onSave", ["subexpr", "action", ["transitionToIndex"], [], ["loc", [null, [3, 9], [3, 37]]]], "onCancel", ["subexpr", "action", ["cancel"], [], ["loc", [null, [4, 11], [4, 28]]]]], ["loc", [null, [1, 0], [4, 30]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/roles/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  exports['default'] = _ember['default'].Controller.extend({
    arrangedModel: computed.sort('model', 'modelSorting'),
    modelSorting: ['title'],

    actions: {
      transitionToNew: function transitionToNew() {
        this.transitionToRoute('session.admin.people.roles.new');
      },

      transitionToEdit: function transitionToEdit(role) {
        this.transitionToRoute('session.admin.people.roles.edit', role.get('id'));
      }
    }
  });
});
define('frontend-cp/session/admin/people/roles/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.findAll('role');
    }
  });
});
define("frontend-cp/session/admin/people/roles/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/roles/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-admin/roles/list-item", [], ["class", ["subexpr", "qa-cls", ["qa-ko-admin_roles__list-item"], [], ["loc", [null, [9, 12], [9, 51]]]], "role", ["subexpr", "@mut", [["get", "role", ["loc", [null, [10, 11], [10, 15]]]]], [], []], "onEdit", ["subexpr", "action", ["transitionToEdit"], [], ["loc", [null, [11, 13], [11, 40]]]]], ["loc", [null, [8, 4], [11, 42]]]]],
          locals: ["role"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/roles/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "arrangedModel", ["loc", [null, [7, 10], [7, 23]]]]], [], 0, null, ["loc", [null, [7, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/roles/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.roles"], [], ["loc", [null, [2, 8], [2, 25]]]], "buttonText", ["subexpr", "t", ["admin.roles.index.add_new_button"], [], ["loc", [null, [3, 13], [3, 51]]]], "onSave", ["subexpr", "action", ["transitionToNew"], [], ["loc", [null, [4, 9], [4, 35]]]]], ["loc", [null, [1, 0], [4, 37]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [6, 0], [13, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/people/roles/new/route', ['exports', 'frontend-cp/session/admin/people/roles/form/route'], function (exports, _frontendCpSessionAdminPeopleRolesFormRoute) {
  exports['default'] = _frontendCpSessionAdminPeopleRolesFormRoute['default'].extend({
    model: function model() {
      return this.store.createRecord('role');
    }
  });
});
define('frontend-cp/session/admin/people/teams/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend(_frontendCpMixinsRememberRoute['default'], {
    intl: inject.service(),
    controllerName: 'session.admin.people.teams.new',

    model: function model(params) {
      return this.store.findRecord('team', params.team_id);
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage); // eslint-disable-line

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
          }
        }
      }
    }
  });
});
define("frontend-cp/session/admin/people/teams/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/team", [], ["title", ["subexpr", "t", ["admin.teams.headings.edit"], ["title", ["get", "model.title", ["loc", [null, [2, 45], [2, 56]]]]], ["loc", [null, [2, 8], [2, 57]]]], "team", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 7], [3, 12]]]]], [], []], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [4, 12], [4, 30]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [5, 11], [5, 30]]]], "injectIntoParent", ["subexpr", "action", [["subexpr", "mut", [["get", "teamComponent", ["loc", [null, [6, 32], [6, 45]]]]], [], ["loc", [null, [6, 27], [6, 46]]]]], [], ["loc", [null, [6, 19], [6, 47]]]]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/teams/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    storeCache: inject.service('store-cache'),

    // prime agents cache - makes loading team pages faster
    primeAgentCache: _ember['default'].on('init', function () {
      this.get('storeCache').query('user', { role: 'AGENT' });
    }),

    filter: '',
    filteredResults: computed('model.[]', 'filter', function () {
      var teams = this.get('model');
      var filter = this.get('filter');
      var regEx = new RegExp(filter, 'i');
      if (filter === '') {
        return teams;
      } else {
        return teams.filter(function (team) {
          return regEx.test(team.get('title'));
        });
      }
    }),

    actions: {
      transitionToAddNewTeam: function transitionToAddNewTeam() {
        this.transitionToRoute('session.admin.people.teams.new');
      }
    }
  });
});
define('frontend-cp/session/admin/people/teams/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend(_frontendCpMixinsRememberRoute['default'], {
    permissionService: inject.service('permissions'),
    permissionName: 'admin.team.view',

    storeCache: inject.service('store-cache'),
    store: inject.service(),

    beforeModel: function beforeModel() {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.admin');
      }
    },

    model: function model() {
      return this.get('store').query('team', { limit: 10000 });
    }
  });
});
define("frontend-cp/session/admin/people/teams/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 107
            }
          },
          "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "layout__item u-1/2");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["inline", "ko-admin-card-team", [], ["team", ["subexpr", "@mut", [["get", "team", ["loc", [null, [18, 95], [18, 99]]]]], [], []]], ["loc", [null, [18, 69], [18, 101]]]]],
        locals: ["team"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout u-mb");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "input--search t-right");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "i-search i-color-grey--light");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2, 1, 1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.teams.headings.index"], [], ["loc", [null, [2, 8], [2, 40]]]], "buttonText", ["subexpr", "t", ["admin.teams.buttons.add"], [], ["loc", [null, [3, 13], [3, 42]]]], "onSave", ["subexpr", "action", ["transitionToAddNewTeam"], [], ["loc", [null, [4, 9], [4, 42]]]]], ["loc", [null, [1, 0], [5, 2]]]], ["inline", "input", [], ["class", "input-text input-text--search", "type", "text", "value", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [10, 70], [10, 76]]]]], [], []], "placeholder", ["subexpr", "t", ["admin.teams.labels.filter_teams"], [], ["loc", [null, [10, 89], [10, 126]]]]], ["loc", [null, [10, 6], [10, 128]]]], ["block", "each", [["get", "filteredResults", ["loc", [null, [18, 10], [18, 25]]]]], [], 0, null, ["loc", [null, [18, 2], [18, 116]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/admin/people/teams/new/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    metrics: _ember['default'].inject.service(),

    userHasChangedModel: function userHasChangedModel() {
      /*
       * Passing membersToAdd and membersToRemove up from team component as a hack
       * until routable components - we need these variables from transitionTo hook
       */
      var hasMembersToAdd = Boolean(this.get('teamComponent.membersToAdd.length'));
      var hasMembersToRemove = Boolean(this.get('teamComponent.membersToRemove.length'));
      return this.get('model').hasChangesToSelf() || hasMembersToAdd || hasMembersToRemove;
    },

    modelIsNew: function modelIsNew() {
      return !this.get('model.id');
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.teams.index');
    },

    actions: {
      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Created',
          category: 'Admin Teams',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Updated',
          category: 'Admin Teams',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin Team Edit Canceled',
          category: 'Admin Teams',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.teams.index');
      },

      rollbackModel: function rollbackModel() {
        this.get('model').rollbackAttributes();
      }
    }
  });
});
define('frontend-cp/session/admin/people/teams/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  var Route = _ember['default'].Route;
  var inject = _ember['default'].inject;
  exports['default'] = Route.extend(_frontendCpMixinsRememberRoute['default'], {
    intl: inject.service(),
    model: function model() {
      return this.store.createRecord('team');
    },

    actions: {
      willTransition: function willTransition(transition) {
        if (this.controller.userHasChangedModel()) {
          var translatedConfirmationMessage = this.get('intl').findTranslationByKey('generic.confirm.lose_changes');
          var shouldRollBackModel = confirm(translatedConfirmationMessage);

          if (shouldRollBackModel) {
            this.controller.send('rollbackModel');
            return true;
          } else {
            transition.abort();
            return false;
          }
        } else if (this.controller.modelIsNew()) {
          // new model, without changes - we should get rid of it!
          this.controller.send('rollbackModel');
          return true;
        }
      }
    }
  });
});
/* eslint-disable no-alert */
define("frontend-cp/session/admin/people/teams/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/teams/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/team", [], ["title", ["subexpr", "t", ["admin.teams.headings.new"], [], ["loc", [null, [2, 8], [2, 38]]]], "team", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 7], [3, 12]]]]], [], []], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [4, 11], [4, 30]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [5, 12], [5, 30]]]], "injectIntoParent", ["subexpr", "action", [["subexpr", "mut", [["get", "teamComponent", ["loc", [null, [6, 32], [6, 45]]]]], [], ["loc", [null, [6, 27], [6, 46]]]]], [], ["loc", [null, [6, 19], [6, 47]]]]], ["loc", [null, [1, 0], [7, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/edit/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),
    controllerName: 'session.admin.people.user-fields.new',

    model: function model(params) {
      return this.store.findRecord('user-field', params.user_field_id);
    },

    setupController: function setupController(controller, model) {
      model.cacheRelationships();
      this._super(controller, model);
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/edit/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["updated"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false], ["loc", [null, [1, 0], [11, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    customFields: _ember['default'].inject.service('custom-fields'),
    notifications: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    session: _ember['default'].inject.service(),
    metrics: _ember['default'].inject.service(),

    customfields: _ember['default'].computed('model.@each.isEnabled', 'model.@each.sortOrder', function () {
      return this.get('model').filter(function (field) {
        return field.get('isEnabled') && !field.get('isSystem');
      }).sortBy('sortOrder');
    }),

    disabledfields: _ember['default'].computed('model.@each.isEnabled', function () {
      return this.get('model').filter(function (field) {
        return !field.get('isEnabled');
      });
    }),

    actions: {
      transitionToNewUserFieldRoute: function transitionToNewUserFieldRoute() {
        this.transitionToRoute('session.admin.people.user-fields.select-type');
      },

      toggleEnabledStatus: function toggleEnabledStatus(field, e) {
        var _this = this;

        e.stopPropagation();
        this.get('customFields').toggleEnabled(field).then(function () {
          var notificationMessage = undefined;
          if (field.get('isEnabled')) {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.userfields.enabled.success_message');
          } else {
            notificationMessage = _this.get('intl').findTranslationByKey('admin.userfields.disabled.success_message');
          }

          _this.get('notifications').success(notificationMessage);
        });

        this.get('metrics').trackEvent({
          event: 'Admin User Field State Changed',
          category: 'Admin User Fields',
          action: field.get('isEnabled') ? 'enabled' : 'disabled',
          label: 'state button'
        });
      },

      showDeleteConfirmation: function showDeleteConfirmation(field, e) {
        e.stopPropagation();
        if (confirm(this.get('intl').findTranslationByKey('generic.confirm.delete'))) {
          this.send('deleteField', field);
        }
      },

      deleteField: function deleteField(field) {
        var _this2 = this;

        this.get('metrics').trackEvent({
          event: 'Admin User Field Remove',
          category: 'Admin User Fields',
          action: 'click',
          label: 'delete link'
        });

        this.get('customFields').destroyRecord(field).then(function () {
          _this2.get('notifications').success(_this2.get('intl').findTranslationByKey('admin.userfields.delete.success_message'));
        });
      },

      editField: function editField(field) {
        this.transitionToRoute('session.admin.people.user-fields.edit', field);
      },

      reorderCustomFields: function reorderCustomFields(orderedCustomFields) {
        this.get('customFields').reorder(this.get('model'), orderedCustomFields, this.get('session.sessionId'));

        this.get('metrics').trackEvent({
          event: 'Admin User Fields Reorder',
          category: 'Admin User Fields',
          action: 'reorder',
          label: 'reorder icon'
        });
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/index/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    model: function model() {
      return this.store.findAll('user-field');
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                dom.setAttribute(el1, "class", "t-bold");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "customfield.title", ["loc", [null, [11, 29], [11, 50]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 14,
                      "column": 8
                    },
                    "end": {
                      "line": 16,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element7 = dom.childAt(fragment, [1]);
                  var morphs = new Array(1);
                  morphs[0] = dom.createAttrMorph(element7, 'class');
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [15, 79], [15, 111]]]], ["get", "customfield.fieldType", ["loc", [null, [15, 112], [15, 133]]]]], [], ["loc", [null, [15, 67], [15, 135]]]]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 18,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("p");
                  dom.setAttribute(el1, "class", "t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [17, 43], [17, 79]]]], ["get", "customfield.fieldType", ["loc", [null, [17, 80], [17, 101]]]]], [], ["loc", [null, [17, 32], [17, 102]]]]], [], ["loc", [null, [17, 28], [17, 104]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [14, 8], [18, 20]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 6
                  },
                  "end": {
                    "line": 24,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode(" |\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element4 = dom.childAt(fragment, [1]);
                var element5 = dom.childAt(fragment, [3]);
                var element6 = dom.childAt(fragment, [5]);
                var morphs = new Array(6);
                morphs[0] = dom.createAttrMorph(element4, 'onclick');
                morphs[1] = dom.createMorphAt(element4, 0, 0);
                morphs[2] = dom.createAttrMorph(element5, 'onclick');
                morphs[3] = dom.createMorphAt(element5, 0, 0);
                morphs[4] = dom.createAttrMorph(element6, 'onclick');
                morphs[5] = dom.createMorphAt(element6, 0, 0);
                return morphs;
              },
              statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [21, 40], [21, 51]]]]], [], ["loc", [null, [21, 19], [21, 53]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [21, 54], [21, 74]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "customfield", ["loc", [null, [22, 50], [22, 61]]]]], [], ["loc", [null, [22, 19], [22, 63]]]]], ["inline", "t", ["generic.disable"], [], ["loc", [null, [22, 64], [22, 87]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "customfield", ["loc", [null, [23, 53], [23, 64]]]]], [], ["loc", [null, [23, 19], [23, 66]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [23, 67], [23, 89]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 25,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [10, 6], [12, 30]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [13, 6], [19, 30]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [20, 6], [24, 33]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "customfield", ["loc", [null, [9, 54], [9, 65]]]]], [], ["loc", [null, [9, 34], [9, 66]]]]], 0, null, ["loc", [null, [9, 4], [25, 27]]]]],
          locals: ["customfield"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-simple-list__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["generic.enabled"], [], ["loc", [null, [5, 4], [5, 27]]]], ["block", "ko-reorderable-list", [], ["reorderedListAction", "reorderCustomFields", "items", ["subexpr", "@mut", [["get", "customfields", ["loc", [null, [8, 73], [8, 85]]]]], [], []]], 0, null, ["loc", [null, [8, 2], [26, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 36,
                      "column": 8
                    },
                    "end": {
                      "line": 38,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("span");
                  dom.setAttribute(el1, "class", "t-caption t-bold");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "disabledfield.title", ["loc", [null, [37, 41], [37, 64]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 40,
                        "column": 10
                      },
                      "end": {
                        "line": 42,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("div");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var element3 = dom.childAt(fragment, [1]);
                    var morphs = new Array(1);
                    morphs[0] = dom.createAttrMorph(element3, 'class');
                    return morphs;
                  },
                  statements: [["attribute", "class", ["concat", ["ko-admin_case-fields_select-type__icon i-png-", ["subexpr", "ko-helper", [["get", "customFields.baseKeyForFieldType", ["loc", [null, [41, 81], [41, 113]]]], ["get", "disabledfield.fieldType", ["loc", [null, [41, 114], [41, 137]]]]], [], ["loc", [null, [41, 69], [41, 139]]]]]]]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.0.3",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 42,
                        "column": 10
                      },
                      "end": {
                        "line": 44,
                        "column": 10
                      }
                    },
                    "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                  },
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createElement("p");
                    dom.setAttribute(el1, "class", "t-caption");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                    return morphs;
                  },
                  statements: [["inline", "t", [["subexpr", "ko-helper", [["get", "customFields.baseTypeKeyForFieldType", ["loc", [null, [43, 48], [43, 84]]]], ["get", "disabledfield.fieldType", ["loc", [null, [43, 85], [43, 108]]]]], [], ["loc", [null, [43, 37], [43, 109]]]]], [], ["loc", [null, [43, 33], [43, 111]]]]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 39,
                      "column": 8
                    },
                    "end": {
                      "line": 45,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "ko-flag", [], [], 0, 1, ["loc", [null, [40, 10], [44, 22]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 46,
                      "column": 8
                    },
                    "end": {
                      "line": 50,
                      "column": 8
                    }
                  },
                  "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode(" |\n          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("a");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(fragment, [3]);
                  var element2 = dom.childAt(fragment, [5]);
                  var morphs = new Array(6);
                  morphs[0] = dom.createAttrMorph(element0, 'onclick');
                  morphs[1] = dom.createMorphAt(element0, 0, 0);
                  morphs[2] = dom.createAttrMorph(element1, 'onclick');
                  morphs[3] = dom.createMorphAt(element1, 0, 0);
                  morphs[4] = dom.createAttrMorph(element2, 'onclick');
                  morphs[5] = dom.createMorphAt(element2, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "onclick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [47, 42], [47, 55]]]]], [], ["loc", [null, [47, 21], [47, 57]]]]], ["inline", "t", ["generic.edit"], [], ["loc", [null, [47, 58], [47, 78]]]], ["attribute", "onclick", ["subexpr", "action", ["toggleEnabledStatus", ["get", "disabledfield", ["loc", [null, [48, 52], [48, 65]]]]], [], ["loc", [null, [48, 21], [48, 67]]]]], ["inline", "t", ["generic.enable"], [], ["loc", [null, [48, 68], [48, 90]]]], ["attribute", "onclick", ["subexpr", "action", ["showDeleteConfirmation", ["get", "disabledfield", ["loc", [null, [49, 55], [49, 68]]]]], [], ["loc", [null, [49, 21], [49, 70]]]]], ["inline", "t", ["generic.delete"], [], ["loc", [null, [49, 71], [49, 93]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 35,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-simple-list/cell", [], [], 0, null, ["loc", [null, [36, 8], [38, 32]]]], ["block", "ko-simple-list/cell", [], [], 1, null, ["loc", [null, [39, 8], [45, 32]]]], ["block", "ko-simple-list/actions", [], [], 2, null, ["loc", [null, [46, 8], [50, 35]]]]],
              locals: [],
              templates: [child0, child1, child2]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-simple-list/row", [], ["onClick", ["subexpr", "action", ["editField", ["get", "disabledfield", ["loc", [null, [35, 56], [35, 69]]]]], [], ["loc", [null, [35, 36], [35, 70]]]]], 0, null, ["loc", [null, [35, 6], [51, 29]]]]],
            locals: ["disabledfield"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ko-simple-list__header");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["generic.disabled"], [], ["loc", [null, [32, 6], [32, 30]]]], ["block", "each", [["get", "disabledfields", ["loc", [null, [34, 12], [34, 26]]]]], [], 0, null, ["loc", [null, [34, 4], [52, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [30, 2], [53, 21]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", "User Fields", "buttonText", ["subexpr", "t", ["admin.userfields.buttons.add_new_userfield"], [], ["loc", [null, [1, 54], [1, 102]]]], "onSave", ["subexpr", "action", ["transitionToNewUserFieldRoute"], [], ["loc", [null, [1, 110], [1, 150]]]]], ["loc", [null, [1, 0], [1, 152]]]], ["block", "ko-simple-list", [], [], 0, null, ["loc", [null, [3, 0], [27, 19]]]], ["block", "if", [["get", "disabledfields.length", ["loc", [null, [29, 6], [29, 27]]]]], [], 1, null, ["loc", [null, [29, 0], [54, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/new/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    notification: _ember['default'].inject.service('notification'),
    intl: _ember['default'].inject.service('intl'),
    customFields: _ember['default'].inject.service('custom-fields'),
    metrics: _ember['default'].inject.service(),

    queryParams: ['userFieldType'],
    userFieldType: null,

    title: _ember['default'].computed('model', function () {
      return this.get('customFields').getTitleBreadcrumbs(this.get('model'));
    }),

    getChangedAttributes: function getChangedAttributes() {
      return this.get('model').changedAttributes();
    },

    userHasChangedModel: function userHasChangedModel() {
      return this.get('model').hasDirtyChanges();
    },

    hasChangedOptions: function hasChangedOptions() {
      return this.get('customFields').hasChangedOptions(this.get('model.options'));
    },

    successAction: function successAction() {
      this.get('notification').add({
        type: 'success',
        title: this.get('intl').findTranslationByKey('generic.changes_saved'),
        autodismiss: true
      });

      this.transitionToRoute('session.admin.people.user-fields.index');
    },

    actions: {
      rollBackModel: function rollBackModel() {
        this.get('customFields').rollback(this.get('model'));
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Edit Canceled',
          category: 'Admin User Fields',
          action: 'click',
          label: 'cancel button'
        });

        this.transitionToRoute('session.admin.people.user-fields.index');
      },

      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.set('model.fieldType', fieldType);
        this.set('canDisplaySelectTypeSection', false);
      },

      addNewOption: function addNewOption() {
        this.get('customFields').addOption(this.get('model'));
      },

      removeOption: function removeOption(option) {
        this.get('customFields').removeOption(option);
      },

      saveField: function saveField() {
        var _this = this;

        return this.get('customFields').save(this.get('model'))['catch'](function (error) {
          _this.get('metrics').trackEvent({
            event: 'Admin User Field Save Failed',
            category: 'Admin User Fields',
            action: 'click',
            label: 'save button'
          });
          throw error;
        });
      },

      updated: function updated() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Updated',
          category: 'Admin User Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      },

      created: function created() {
        this.get('metrics').trackEvent({
          event: 'Admin User Field Created',
          category: 'Admin User Fields',
          action: 'click',
          label: 'save button'
        });

        this.successAction();
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/new/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default'], {
    customFields: _ember['default'].inject.service('custom-fields'),

    model: function model(params) {
      return this.store.createRecord('user-field', { fieldType: params.type });
    },

    setupController: function setupController(controller, model) {
      controller.set('model', this.get('customFields').create(model));
    },

    actions: {
      willTransition: function willTransition(transition) {
        this.get('customFields').validateTransition(this.controller, transition);
      }
    }
  });
});
define("frontend-cp/session/admin/people/user-fields/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 2
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/case-fields/edit", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "caseField", ["subexpr", "@mut", [["get", "model", ["loc", [null, [3, 12], [3, 17]]]]], [], []], "onOptionAddition", ["subexpr", "action", ["addNewOption"], [], ["loc", [null, [4, 19], [4, 42]]]], "onOptionRemoval", ["subexpr", "action", ["removeOption"], [], ["loc", [null, [5, 18], [5, 41]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [6, 11], [6, 30]]]], "onSave", ["subexpr", "action", ["saveField"], [], ["loc", [null, [7, 9], [7, 29]]]], "onSuccess", ["subexpr", "action", ["created"], [], ["loc", [null, [8, 12], [8, 30]]]], "isApiFieldKeyAvailable", false, "isAgentCaseFieldAvailable", false, "isStatusKeyAvailable", false], ["loc", [null, [1, 0], [12, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/people/user-fields/select-type/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    metrics: _ember['default'].inject.service(),

    actions: {
      // TODO: make this action to be generic across cases & users.
      setCaseFieldType: function setCaseFieldType(fieldType) {
        this.transitionToRoute('session.admin.people.user-fields.new', fieldType);
      },

      canceled: function canceled() {
        this.get('metrics').trackEvent({
          event: 'Admin User Fields Edit Canceled',
          category: 'Admin User Fields',
          action: 'click',
          label: 'select-type cancel button'
        });

        this.transitionToRoute('session.admin.people.user-fields.index');
      }
    }
  });
});
define('frontend-cp/session/admin/people/user-fields/select-type/route', ['exports', 'ember', 'frontend-cp/mixins/remember-route'], function (exports, _ember, _frontendCpMixinsRememberRoute) {
  exports['default'] = _ember['default'].Route.extend(_frontendCpMixinsRememberRoute['default']);
});
define("frontend-cp/session/admin/people/user-fields/select-type/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 53
          }
        },
        "moduleName": "frontend-cp/session/admin/people/user-fields/select-type/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-admin/page-header", [], ["title", ["subexpr", "t", ["admin.userfields.new.heading"], [], ["loc", [null, [1, 29], [1, 63]]]], "onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [1, 73], [1, 92]]]]], ["loc", [null, [1, 0], [1, 94]]]], ["inline", "ko-admin/case-fields/select-type", [], ["onFieldTypeSelect", ["subexpr", "action", ["setCaseFieldType"], [], ["loc", [null, [2, 53], [2, 80]]]]], ["loc", [null, [2, 0], [2, 82]]]], ["inline", "ko-admin/page-footer", [], ["onCancel", ["subexpr", "action", ["canceled"], [], ["loc", [null, [3, 32], [3, 51]]]]], ["loc", [null, [3, 0], [3, 53]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/admin/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    active: false,

    permissionName: 'app.admin.access',
    permissionService: _ember['default'].inject.service('permissions'),

    beforeModel: _ember['default'].on('beforeModel', function () {
      if (!this.get('permissionService').has(this.get('permissionName'))) {
        this.get('permissionService').showError();
        this.transitionTo('session.agent');
      }
      var store = this.get('store');
      return store.findAll('locale');
    }),

    activate: _ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: _ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    actions: {
      didTransition: function didTransition() {
        window.scrollTo(0, 0);
      }
    }
  });
});
define("frontend-cp/session/admin/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/admin/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "ko-admin/page-container", ["loc", [null, [1, 0], [1, 27]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    intl: inject.service(),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User>Case
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: computed('model.requester.organization.id', 'model.requester.id', function () {
      var hasOrganisation = this.get('model.requester.organization.id');
      var hasUser = this.get('model.requester.id');

      var caseCrumb = {
        id: 'case',
        label: 'Case ' + this.get('model.id'),
        routeName: 'session.agent.cases.case.index',
        dynamicSegments: []
      };

      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.requester.organization.name'),
          routeName: 'session.agent.cases.case.organisation',
          dynamicSegments: []
        });
      }

      if (hasUser) {
        crumbs.push({
          id: 'user',
          label: this.get('model.requester.fullName'),
          routeName: 'session.agent.cases.case.user',
          dynamicSegments: []
        });
      }

      crumbs.push(caseCrumb);

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/cases/case/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  var getProperties = _ember['default'].getProperties;
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['postId', 'filter', 'sort'],
    filter: 'posts',
    sort: 'newest',
    postId: null,

    // Actions
    actions: {
      updateQueryParams: function updateQueryParams(changes) {
        this.setProperties(changes);
        return true;
      },

      updateTabName: function updateTabName() {
        var _target;

        (_target = this.target).send.apply(_target, ['updateTabName'].concat(_slice.call(arguments)));
      },

      updateTabState: function updateTabState(state) {
        var persistedState = getProperties(state, 'postContent', 'channelId', 'attachedPostFiles');
        this.send('updateNonPersistedTabState', { index: state });
        this.target.send('updateTabState', { index: persistedState });
        this.set('tabState', state);
      }
    }
  });
});
define('frontend-cp/session/agent/cases/case/index/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    tabStore: _ember['default'].inject.service(),
    storeCache: _ember['default'].inject.service('store-cache'),
    intlService: _ember['default'].inject.service('intl'),

    queryParams: {
      postId: { replace: true },
      filter: { replace: true },
      sort: { replace: true }
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        'case': this.modelFor('session.agent.cases.case'),
        priorities: this.get('storeCache').findAll('case-priority'),
        statuses: this.get('storeCache').findAll('case-status'),
        types: this.get('storeCache').findAll('case-type'),
        caseFields: this.get('storeCache').findAll('case-field')
      }).then(function (model) {
        model.tags = model['case'].get('tags');
        model.replyChannel = model['case'].get('replyChannels');
        return _ember['default'].RSVP.hash(model);
      });
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      var parentController = this.controllerFor('session.agent.cases.case');
      controller.set('tabId', parentController.get('tab.basePath'));

      controller.setProperties(model);
    },

    // Actions
    actions: {
      updateQueryParams: function updateQueryParams(changes) {
        var tabs = this.get('tabStore');
        var activeTab = tabs.get('activeTab');
        var defaultQPs = { postId: null, filter: 'post', sort: 'newest' };
        var newQueryParams = Object.assign({}, defaultQPs, activeTab.queryParams || {}, changes);
        tabs.update(activeTab, { queryParams: newQueryParams });
      }
    }
  });
});
define("frontend-cp/session/agent/cases/case/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-case-content", [], ["case", ["subexpr", "@mut", [["get", "case", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "postId", ["subexpr", "@mut", [["get", "postId", ["loc", [null, [3, 9], [3, 15]]]]], [], []], "sortOrder", ["subexpr", "@mut", [["get", "sort", ["loc", [null, [4, 12], [4, 16]]]]], [], []], "filter", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [5, 9], [5, 15]]]]], [], []], "caseFields", ["subexpr", "@mut", [["get", "caseFields", ["loc", [null, [6, 13], [6, 23]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [7, 13], [7, 23]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [9, 8], [9, 13]]]]], [], []], "onTabNameUpdate", ["subexpr", "action", ["updateTabName"], [], ["loc", [null, [10, 18], [10, 42]]]], "onStateUpdate", ["subexpr", "action", ["updateTabState"], [], ["loc", [null, [11, 16], [11, 41]]]], "onQueryParamsUpdate", ["subexpr", "action", ["updateQueryParams"], [], ["loc", [null, [12, 22], [12, 50]]]], "tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [13, 8], [13, 13]]]]], [], []]], ["loc", [null, [1, 0], [14, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/session/agent/cases/case/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/cases/case/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    cleanUpDeletedOrganizationFromUI: function cleanUpDeletedOrganizationFromUI() {
      this.modelFor('session.agent.cases.case').set('requester.organization', null);
    },

    model: function model(params) {
      this.get('storeCache').findAll('organization-field');
      var parentModel = this.modelFor('session.agent.cases.case').get('requester');
      return parentModel ? parentModel.get('organization') : {};
    },

    activate: function activate() {
      this.modelFor(this.routeName).on('didDelete', this, this.cleanUpDeletedOrganizationFromUI);
    },

    deactivate: function deactivate() {
      this.modelFor(this.routeName).off('didDelete', this, this.cleanUpDeletedOrganizationFromUI);
    }
  });
});
define("frontend-cp/session/agent/cases/case/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route', 'ember'], function (exports, _frontendCpRoutesAbstractTabbedRoute, _ember) {
  var service = _ember['default'].inject.service;
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    intl: service(),

    model: function model(params) {
      return this.store.findRecord('case', params.case_id);
    },

    beforeModel: function beforeModel() {
      this.get('tabStore').set('isEnabled', false);
      this._super.apply(this, arguments);
    },

    afterModel: function afterModel(model, transition) {
      this.tab = this.get('tabStore').open(transition, model.get('subject'));
      this.get('tabStore').set('isEnabled', true);
      this._super.apply(this, arguments);
    }
  });
});
define("frontend-cp/session/agent/cases/case/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/case/user/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/case/user/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      this.get('storeCache').findAll('user-field');
      return this.modelFor('session.agent.cases.case').get('requester');
    }
  });
});
define("frontend-cp/session/agent/cases/case/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/case/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    casesController: _ember['default'].inject.controller('session.agent.cases.index.view'),

    actions: {
      clearSelectedCaseIds: function clearSelectedCaseIds() {
        this.get('casesController').send('setSelectedCaseIds', []);
      },

      reloadCases: function reloadCases() {
        this.send('refreshCaseList');
      }
    }
  });
});
define('frontend-cp/session/agent/cases/index/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      // Redirect to the first view.
      var views = this.modelFor('session.agent.cases.index').views;
      var inbox = views.findBy('isDefault');
      this.transitionTo('session.agent.cases.index.view', inbox.id);
    }
  });
});
define('frontend-cp/session/agent/cases/index/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var run = _ember['default'].run;
  var RSVP = _ember['default'].RSVP;

  var casePageLimit = _frontendCpConfigEnvironment['default'].casesPageSize;
  var caseViewLimit = _frontendCpConfigEnvironment['default'].APP.views.maxLimit;
  var viewsPollingInterval = _frontendCpConfigEnvironment['default'].APP.views.viewsPollingInterval * 1000;
  var isViewsPollingEnabled = _frontendCpConfigEnvironment['default'].APP.views.isPollingEnabled;

  exports['default'] = _ember['default'].Route.extend({
    metrics: _ember['default'].inject.service(),
    pusher: _ember['default'].inject.service(),
    pollingCountsEnabled: false,

    model: function model() {
      return RSVP.hash({
        viewCounts: this.store.findAll('view-count', { reload: true }),
        views: this.store.query('view', { limit: caseViewLimit }, { reload: true })
      });
    },

    setupController: function setupController(controller, _ref) {
      var views = _ref.views;

      var inbox = views.findBy('isDefault');
      controller.setProperties({ inboxView: inbox, childRoutePage: 1, showPagination: true });
      this._super(controller, views.filter(function (v) {
        return v.id !== inbox.id && v.get('isEnabled');
      }));
    },

    activate: function activate() {
      this._super.apply(this, arguments);
      if (isViewsPollingEnabled) {
        this.viewsCountPollingTimer = run.later(this, this._pollCurrentViewCounts, viewsPollingInterval);
      }
      this._subscribeToViewCountUpdates();
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      if (this.viewsCountPollingTimer) {
        run.cancel(this.viewsCountPollingTimer);
      }
      this._unsubscribeToViewCountUpdates();
    },

    actions: {
      willTransition: function willTransition() {
        this.set('pollingCountsEnabled', false);
      },

      updatePagination: function updatePagination(params, meta) {
        this.get('metrics').trackEvent({
          event: 'Case View Page Changed',
          category: 'Case Views',
          action: 'click',
          label: params.page
        });

        this.controller.setProperties({
          childRoutePage: params.page,
          childRouteTotalPages: Math.ceil(meta.total / casePageLimit)
        });
      },

      refreshCaseList: function refreshCaseList() {
        this.refresh();
      }
    },

    // Methods
    _pollCurrentViewCounts: function _pollCurrentViewCounts() {
      this.model(this.paramsFor(this.routeName));
      this.viewsCountPollingTimer = run.later(this, this._pollCurrentViewCounts, viewsPollingInterval);
    },

    _subscribeToViewCountUpdates: function _subscribeToViewCountUpdates() {
      var _this = this;

      var viewCounts = this.store.peekAll('view-count');
      var pusher = this.get('pusher');
      viewCounts.forEach(function (viewCount) {
        var realtimeChannel = viewCount.get('realtimeChannel');
        pusher.subscribeTo(realtimeChannel, 'CHANGE', _this, _this._updateCounterHandler);
      });
    },

    _unsubscribeToViewCountUpdates: function _unsubscribeToViewCountUpdates() {
      var viewCounts = this.store.peekAll('view-count');
      var pusher = this.get('pusher');
      viewCounts.forEach(function (viewCount) {
        var realtimeChannel = viewCount.get('realtimeChannel');
        pusher.unsubscribeTo(realtimeChannel, 'CHANGE');
      });
    },

    _updateCounterHandler: function _updateCounterHandler(data) {
      this.store.push({
        id: data.resource_id,
        type: _ember['default'].String.dasherize(data.resource_type),
        attributes: data.changed_properties
      });
    }
  });
});
define('frontend-cp/session/agent/cases/index/suspended-messages/controller', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['page', 'view'],
    page: 1,
    columns: ['from', 'subject', 'createdAt', 'suspensionCode'],
    intl: inject.service(),

    // CPs
    suspendedMails: computed.filterBy('model', 'isSuspended', true),

    // Actions
    actions: {
      showMail: function showMail(mail) {
        this.target.send('showMail', mail);
      },

      permanentlyDeleteSelectedMails: function permanentlyDeleteSelectedMails() {
        var _this = this;

        var message = this.get('intl').findTranslationByKey('cases.suspendedMessages.confirmDeleteAll');
        if (confirm(message)) {
          (function () {
            var mails = _this.get('selectedMails');
            var ids = mails.mapBy('id');
            var adapter = _this.container.lookup('adapter:application');
            var url = adapter.namespace + '/mails?' + _ember['default'].$.param({ ids: ids });
            adapter.ajax(url, 'DELETE').then(function () {
              mails.forEach(function (m) {
                return m.unloadRecord();
              });
              _this.set('selectedMails', []);
            });
          })();
        }
      },

      tableSorted: function tableSorted(column, order) {
        this.setProperties({ orderBy: order, orderByColumn: column });
      }
    }
  });
});
/* eslint-disable no-alert */
define('frontend-cp/session/agent/cases/index/suspended-messages/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {

  var limit = _frontendCpConfigEnvironment['default'].casesPageSize;

  exports['default'] = _ember['default'].Route.extend({
    queryParams: {
      page: { refreshModel: true }
    },

    model: function model(_ref) {
      var page = _ref.page;

      var offset = (parseInt(page, 10) - 1) * limit;
      return this.store.query('mail', { is_suspended: true, offset: offset, limit: limit });
    },

    setupController: function setupController(controller, mails) {
      this._super.apply(this, arguments);
      this.send('updatePagination', this.paramsFor(this.routeName), mails.get('meta'));
    },

    // Actions
    actions: {
      showMail: function showMail(mail) {
        this.transitionTo('session.agent.cases.index.suspended-messages.show', mail);
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/index/suspended-messages/show/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model(_ref) {
      var id = _ref.id;

      return this.modelFor('session.agent.cases.index.suspended-messages').findBy('id', id);
    },

    renderTemplate: function renderTemplate() {
      this.render({ outlet: 'modals', into: 'application' });
    },

    actions: {
      permanentlyDelete: function permanentlyDelete() {
        var _this = this;

        this.modelFor(this.routeName).destroyRecord().then(function () {
          return _this.transitionTo('session.agent.cases.index.suspended-messages');
        });
      },

      allowThrough: function allowThrough() {
        var _this2 = this;

        var mail = this.modelFor(this.routeName);
        mail.set('isSuspended', false);
        mail.save().then(function () {
          return _this2.transitionTo('session.agent.cases.index.suspended-messages');
        });
      }
    }
  });
});
define("frontend-cp/session/agent/cases/index/suspended-messages/show/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 12
              },
              "end": {
                "line": 33,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "model.text", ["loc", [null, [32, 14], [32, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 14
                },
                "end": {
                  "line": 36,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "model.source", ["loc", [null, [35, 16], [35, 32]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 14
                },
                "end": {
                  "line": 38,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "model.html", ["loc", [null, [37, 16], [37, 30]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 12
              },
              "end": {
                "line": 39,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "model.source", ["loc", [null, [34, 20], [34, 32]]]]], [], 0, 1, ["loc", [null, [34, 14], [38, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 50,
                "column": 4
              },
              "end": {
                "line": 50,
                "column": 108
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["cases.suspendedMessage.actions.cancel"], [], ["loc", [null, [50, 63], [50, 108]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "suspended-message-modal__header-text");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__main");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("table");
          dom.setAttribute(el2, "class", "suspended-message-modal__table");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("tr");
          dom.setAttribute(el3, "class", "suspended-message-modal__table-row");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createElement("strong");
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode(":");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("td");
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "suspended-message-modal__text");
          var el6 = dom.createTextNode("\n");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("          ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-modal__content__footer suspended-message-modal__footer");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "button button--alert suspended-message-modal__button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "button button--primary suspended-message-modal__button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [3, 1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var element3 = dom.childAt(element0, [5]);
          var element4 = dom.childAt(element0, [7]);
          var element5 = dom.childAt(element0, [9]);
          var element6 = dom.childAt(element0, [11]);
          var element7 = dom.childAt(fragment, [5]);
          var element8 = dom.childAt(element7, [3]);
          var element9 = dom.childAt(element7, [5]);
          var morphs = new Array(18);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(element1, [1, 0]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
          morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 0]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [1, 0]), 0, 0);
          morphs[6] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
          morphs[7] = dom.createMorphAt(dom.childAt(element4, [1, 0]), 0, 0);
          morphs[8] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
          morphs[9] = dom.createMorphAt(dom.childAt(element5, [1, 0]), 0, 0);
          morphs[10] = dom.createMorphAt(dom.childAt(element5, [3]), 0, 0);
          morphs[11] = dom.createMorphAt(dom.childAt(element6, [1, 0]), 0, 0);
          morphs[12] = dom.createMorphAt(dom.childAt(element6, [3, 1]), 1, 1);
          morphs[13] = dom.createMorphAt(element7, 1, 1);
          morphs[14] = dom.createElementMorph(element8);
          morphs[15] = dom.createMorphAt(element8, 0, 0);
          morphs[16] = dom.createElementMorph(element9);
          morphs[17] = dom.createMorphAt(element9, 0, 0);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessage.title"], [], ["loc", [null, [3, 54], [3, 90]]]], ["inline", "t", ["cases.suspendedMessage.table.from"], [], ["loc", [null, [8, 20], [8, 61]]]], ["content", "model.from", ["loc", [null, [9, 12], [9, 26]]]], ["inline", "t", ["cases.suspendedMessage.table.subject"], [], ["loc", [null, [12, 20], [12, 64]]]], ["content", "model.subject", ["loc", [null, [13, 12], [13, 29]]]], ["inline", "t", ["cases.suspendedMessage.table.suspensionCode"], [], ["loc", [null, [16, 20], [16, 71]]]], ["content", "model.suspensionCode", ["loc", [null, [17, 12], [17, 36]]]], ["inline", "t", ["cases.suspendedMessage.table.createdAt"], [], ["loc", [null, [20, 20], [20, 66]]]], ["content", "model.createdAt", ["loc", [null, [21, 12], [21, 31]]]], ["inline", "t", ["cases.suspendedMessage.table.to"], [], ["loc", [null, [24, 20], [24, 59]]]], ["content", "model.to", ["loc", [null, [25, 12], [25, 24]]]], ["inline", "t", ["cases.suspendedMessage.table.text"], [], ["loc", [null, [28, 20], [28, 61]]]], ["block", "if", [["get", "model.text", ["loc", [null, [31, 18], [31, 28]]]]], [], 0, 1, ["loc", [null, [31, 12], [39, 19]]]], ["block", "link-to", ["session.agent.cases.index.suspended-messages"], [], 2, null, ["loc", [null, [50, 4], [50, 120]]]], ["element", "action", ["permanentlyDelete"], [], ["loc", [null, [51, 73], [51, 103]]]], ["inline", "t", ["cases.suspendedMessage.actions.permanentlyDelete"], [], ["loc", [null, [51, 104], [51, 160]]]], ["element", "action", ["allowThrough"], [], ["loc", [null, [52, 75], [52, 100]]]], ["inline", "t", ["cases.suspendedMessage.actions.allowThrough"], [], ["loc", [null, [52, 101], [52, 152]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 13
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/show/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-modal", [], ["class", "suspended-message-modal"], 0, null, ["loc", [null, [1, 0], [54, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/session/agent/cases/index/suspended-messages/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 6
            },
            "end": {
              "line": 10,
              "column": 6
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "button button--alert suspended-messages-section__delete-all");
          var el2 = dom.createTextNode("Permanently delete");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["permanentlyDeleteSelectedMails"], [], ["loc", [null, [9, 84], [9, 127]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 6
                },
                "end": {
                  "line": 18,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.from"], [], ["loc", [null, [17, 8], [17, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 21,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.subject"], [], ["loc", [null, [20, 8], [20, 53]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 22,
                  "column": 6
                },
                "end": {
                  "line": 24,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.createdAt"], [], ["loc", [null, [23, 8], [23, 55]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 6
                },
                "end": {
                  "line": 27,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", ["cases.suspendedMessages.table.suspensionCode"], [], ["loc", [null, [26, 8], [26, 60]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "ko-table/column", [], ["class", "ko-cases-list__table-column ko-table__header--defualt-width", "column", "from"], 0, null, ["loc", [null, [16, 6], [18, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column", "column", "subject"], 1, null, ["loc", [null, [19, 6], [21, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column ko-table__header--defualt-width", "column", "createdAt"], 2, null, ["loc", [null, [22, 6], [24, 26]]]], ["block", "ko-table/column", [], ["class", "ko-cases-list__table-column ko-table__header--defualt-width", "column", "suspensionCode"], 3, null, ["loc", [null, [25, 6], [27, 26]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 10
                    },
                    "end": {
                      "line": 34,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "ko-table_cell--ellipsis");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "mail.from", ["loc", [null, [33, 49], [33, 62]]]]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 35,
                      "column": 10
                    },
                    "end": {
                      "line": 37,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "ko-table_cell--ellipsis");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "mail.subject", ["loc", [null, [36, 49], [36, 65]]]]],
                locals: [],
                templates: []
              };
            })();
            var child2 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 10
                    },
                    "end": {
                      "line": 40,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "ko-table_cell--ellipsis");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["inline", "moment-from-now", [["get", "mail.createdAt", ["loc", [null, [39, 67], [39, 81]]]]], [], ["loc", [null, [39, 49], [39, 83]]]]],
                locals: [],
                templates: []
              };
            })();
            var child3 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 41,
                      "column": 10
                    },
                    "end": {
                      "line": 43,
                      "column": 10
                    }
                  },
                  "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "ko-table_cell--ellipsis");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  return morphs;
                },
                statements: [["content", "mail.suspensionCode", ["loc", [null, [42, 49], [42, 72]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 8
                  },
                  "end": {
                    "line": 44,
                    "column": 8
                  }
                },
                "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "ko-table/cell", [], ["class", "ko-table_cell--ellipsis"], 0, null, ["loc", [null, [32, 10], [34, 28]]]], ["block", "ko-table/cell", [], ["class", "ko-table_cell--ellipsis"], 1, null, ["loc", [null, [35, 10], [37, 28]]]], ["block", "ko-table/cell", [], ["class", "ko-table_cell--ellipsis"], 2, null, ["loc", [null, [38, 10], [40, 28]]]], ["block", "ko-table/cell", [], ["class", "ko-table_cell--ellipsis"], 3, null, ["loc", [null, [41, 10], [43, 28]]]]],
              locals: [],
              templates: [child0, child1, child2, child3]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "ko-table/row", [], ["table", ["subexpr", "@mut", [["get", "table", ["loc", [null, [31, 30], [31, 35]]]]], [], []], "clickable", true, "rowContext", ["subexpr", "@mut", [["get", "mail", ["loc", [null, [31, 62], [31, 66]]]]], [], []], "onClick", ["subexpr", "action", ["showMail", ["get", "mail", ["loc", [null, [31, 94], [31, 98]]]]], [], ["loc", [null, [31, 75], [31, 99]]]], "onSelectChange", ["subexpr", "action", [["get", "table.actions.rowSelectionChanged", ["loc", [null, [31, 123], [31, 156]]]]], [], ["loc", [null, [31, 115], [31, 157]]]]], 0, null, ["loc", [null, [31, 8], [44, 25]]]]],
            locals: ["mail"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 46,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "suspendedMails", ["loc", [null, [30, 14], [30, 28]]]]], [], 0, null, ["loc", [null, [30, 6], [45, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 47,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-table/header", [], [], 0, null, ["loc", [null, [15, 4], [28, 24]]]], ["block", "ko-table/body", [], [], 1, null, ["loc", [null, [29, 4], [46, 22]]]]],
        locals: ["table"],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 2
            },
            "end": {
              "line": 53,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "u-mt");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "t", ["cases.suspendedMessages.emptyList"], [], ["loc", [null, [51, 6], [51, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/suspended-messages/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "suspended-messages-section u-mh");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout u-mv");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "layout__item");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("h4");
        dom.setAttribute(el4, "class", "ko-cases-list__heading");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "i-chevron-large-down i-color-grey--dark");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(element1, [1, 1]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element2, 3, 3);
        morphs[2] = dom.createMorphAt(element1, 3, 3);
        morphs[3] = dom.createMorphAt(element1, 5, 5);
        morphs[4] = dom.createMorphAt(element1, 7, 7);
        return morphs;
      },
      statements: [["inline", "t", ["cases.suspendedMessages.title"], [], ["loc", [null, [5, 8], [5, 45]]]], ["block", "if", [["get", "selectedMails.length", ["loc", [null, [8, 12], [8, 32]]]]], [], 0, null, ["loc", [null, [8, 6], [10, 13]]]], ["block", "ko-table", [], ["selectable", true, "onSelectionChange", ["subexpr", "action", [["subexpr", "mut", [["get", "selectedMails", ["loc", [null, [14, 61], [14, 74]]]]], [], ["loc", [null, [14, 56], [14, 75]]]]], [], ["loc", [null, [14, 48], [14, 76]]]], "class", "suspended-messages-section__table"], 1, null, ["loc", [null, [14, 2], [47, 15]]]], ["block", "unless", [["get", "model.length", ["loc", [null, [49, 12], [49, 24]]]]], [], 2, null, ["loc", [null, [49, 2], [53, 13]]]], ["content", "outlet", ["loc", [null, [55, 2], [55, 12]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("frontend-cp/session/agent/cases/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-sidebar", [], ["class", "ko-sidebar--no-border", "inboxView", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [4, 59], [4, 68]]]]], [], []], "customViews", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 81], [4, 86]]]]], [], []]], ["loc", [null, [4, 6], [4, 88]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ko-bulk-sidebar", [], ["selectedCaseIds", ["subexpr", "@mut", [["get", "casesController.selectedCaseIds", ["loc", [null, [7, 24], [7, 55]]]]], [], []], "onBulkUpdateCases", ["subexpr", "action", ["reloadCases"], [], ["loc", [null, [8, 26], [8, 48]]]], "onCancel", ["subexpr", "action", ["clearSelectedCaseIds"], [], ["loc", [null, [9, 17], [9, 48]]]]], ["loc", [null, [6, 6], [10, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-if", [["get", "showPagination", ["loc", [null, [3, 17], [3, 31]]]]], ["class", "leftHandSideBarAnimation ko-session-agent-cases-index__sidebar"], 0, 1, ["loc", [null, [3, 4], [11, 18]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ko-session-agent-cases-index__sidebar");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "ko-sidebar", [], ["class", "ko-sidebar--no-border", "inboxView", ["subexpr", "@mut", [["get", "inboxView", ["loc", [null, [15, 18], [15, 27]]]]], [], []], "customViews", ["subexpr", "@mut", [["get", "model", ["loc", [null, [16, 20], [16, 25]]]]], [], []]], ["loc", [null, [14, 6], [16, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 6
                },
                "end": {
                  "line": 26,
                  "column": 45
                }
              },
              "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 4
              },
              "end": {
                "line": 27,
                "column": 4
              }
            },
            "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", [["subexpr", "query-params", [], ["page", ["get", "number", ["loc", [null, [26, 36], [26, 42]]]]], ["loc", [null, [26, 17], [26, 43]]]]], [], 0, null, ["loc", [null, [26, 6], [26, 57]]]]],
          locals: ["number"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "ko-pagination", [], ["currentPage", ["subexpr", "@mut", [["get", "childRoutePage", ["loc", [null, [25, 33], [25, 47]]]]], [], []], "loadingPage", ["subexpr", "@mut", [["get", "childRouteLoadingPage", ["loc", [null, [25, 60], [25, 81]]]]], [], []], "pageCount", ["subexpr", "@mut", [["get", "childRouteTotalPages", ["loc", [null, [25, 92], [25, 112]]]]], [], []]], 0, null, ["loc", [null, [25, 4], [27, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ko-session-agent-cases-index");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-agent-cases-index__content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ko-session-agent-cases-index__pagination");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [5]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "features.bulkUpdate", ["loc", [null, [2, 8], [2, 27]]]]], [], 0, 1, ["loc", [null, [2, 2], [18, 9]]]], ["content", "outlet", ["loc", [null, [20, 4], [20, 14]]]], ["block", "if", [["get", "showPagination", ["loc", [null, [24, 8], [24, 22]]]]], [], 2, null, ["loc", [null, [24, 2], [28, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('frontend-cp/session/agent/cases/index/view/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    queryParams: ['page', 'view', 'orderBy', 'orderByColumn'],
    page: 1,
    metrics: _ember['default'].inject.service(),

    parentController: _ember['default'].inject.controller('session.agent.cases.index'),
    tabStore: _ember['default'].inject.service(),

    isPollingEnabled: true,

    isTrash: _ember['default'].computed('activeView.viewType', function () {
      return this.get('activeView.viewType') === 'TRASH';
    }),

    // Actions
    actions: {
      transitionToCase: function transitionToCase(caseContext, hasModifier) {
        var route = 'session.agent.cases.case';
        if (hasModifier) {
          this.get('tabStore').createTab(route, caseContext.get('subject'), caseContext);
        } else {
          this.transitionToRoute(route, caseContext);
        }
      },

      sortCaseList: function sortCaseList(column, order) {
        this.get('metrics').trackEvent({
          event: 'Case View Sorted',
          category: 'Case Views',
          action: 'click',
          label: (column && column.get('name')) + '-' + order
        });

        this.setProperties({
          orderBy: order,
          orderByColumn: column && column.get('name')
        });
      },

      setSelectedCaseIds: function setSelectedCaseIds(checkedRows) {
        this.set('selectedCaseIds', checkedRows);
        var hasChecked = checkedRows.length > 0;

        this.set('isPollingEnabled', !hasChecked);
        this.get('parentController').set('showPagination', !hasChecked);
      },

      trashCases: function trashCases() {
        this.send('reloadCases');
      }
    }
  });
});
define('frontend-cp/session/agent/cases/index/view/route', ['exports', 'ember', 'frontend-cp/config/environment'], function (exports, _ember, _frontendCpConfigEnvironment) {
  var run = _ember['default'].run;

  var casesPollingInterval = _frontendCpConfigEnvironment['default'].APP.views.casesPollingInterval * 1000;
  var isCasesPollingEnabled = _frontendCpConfigEnvironment['default'].APP.views.isPollingEnabled;
  var limit = _frontendCpConfigEnvironment['default'].casesPageSize;

  exports['default'] = _ember['default'].Route.extend({
    tabStore: _ember['default'].inject.service(),

    queryParams: {
      page: { refreshModel: true },
      view: { refreshModel: true },
      orderByColumn: { refreshModel: true },
      orderBy: { refreshModel: true }
    },

    model: function model(_ref) {
      var view_id = _ref.view_id;

      var model = this.modelFor('session.agent.cases.index').views.findBy('id', view_id);
      if (!model) {
        this.transitionTo('session.agent.cases.index');
      }
      return model;
    },

    activate: function activate() {
      this._super.apply(this, arguments);
      if (isCasesPollingEnabled) {
        this.pollViewTimer = run.later(this, this._pollView, casesPollingInterval);
      }
    },

    _initSelectedCaseIds: function _initSelectedCaseIds(cases) {
      this.controller.setProperties({
        selectedCaseIds: []
      });
    },

    deactivate: function deactivate() {
      this._super.apply(this, arguments);
      if (this.pollViewTimer) {
        run.cancel(this.pollViewTimer);
      }
    },

    _pollView: function _pollView() {
      var _this = this;

      if (this.controller.get('isPollingEnabled')) {
        var _paramsFor = this.paramsFor(this.routeName);

        var view_id = _paramsFor.view_id;

        var view = this.modelFor('session.agent.cases.index').views.findBy('id', view_id);
        this._refreshCases(view).then(function (cases) {
          _this.controller.set('model', cases);
          _this.send('updatePagination', _this.paramsFor(_this.routeName), cases.get('meta'));
          _this.pollViewTimer = run.later(_this, _this._pollView, casesPollingInterval);
        });
      }
    },

    afterModel: function afterModel(view) {
      var _this2 = this;

      if (view) {
        this.get('tabStore').setCasesViewId(view.get('id'));
      }
      return this._refreshCases(view).then(function (cases) {
        view.set('casesQuery', cases);
      }, function (error) {
        if (error.errors && error.errors.findBy('code', 'PERMISSIONS_DENIED')) {
          _this2.transitionTo('session.agent.cases.index');
        } else {
          console.error(error); // eslint-disable-line
        }
      });
    },

    _refreshCases: function _refreshCases(view) {
      var _paramsFor2 = this.paramsFor(this.routeName);

      var orderBy = _paramsFor2.orderBy;
      var orderByColumn = _paramsFor2.orderByColumn;
      var _paramsFor2$page = _paramsFor2.page;
      var page = _paramsFor2$page === undefined ? 1 : _paramsFor2$page;

      return this.store.query('case', {
        limit: limit,
        parent: view,
        offset: (parseInt(page, 10) - 1) * limit,
        order_by: orderBy,
        order_by_column: orderByColumn
      });
    },

    setupController: function setupController(controller, view) {
      var cases = view.get('casesQuery');
      this._super(controller, cases);
      controller.set('activeView', view);
      this.send('updatePagination', this.paramsFor(this.routeName), cases.get('meta'));
      this._initSelectedCaseIds(cases);
    },

    actions: {
      clearSelectedCaseIds: function clearSelectedCaseIds() {
        this._initSelectedCaseIds(this.controller.get('model'));
      },

      reloadCases: function reloadCases() {
        this.refresh();
      }
    }
  });
});
/*eslint-disable camelcase */
define("frontend-cp/session/agent/cases/index/view/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/view/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-cases-list", [], ["cases", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "onCaseListSort", "sortCaseList", "onClick", ["subexpr", "action", ["transitionToCase"], [], ["loc", [null, [4, 10], [4, 37]]]], "columns", ["subexpr", "@mut", [["get", "activeView.columns", ["loc", [null, [5, 10], [5, 28]]]]], [], []], "title", ["subexpr", "@mut", [["get", "activeView.title", ["loc", [null, [6, 8], [6, 24]]]]], [], []], "orderBy", ["subexpr", "@mut", [["get", "orderBy", ["loc", [null, [7, 10], [7, 17]]]]], [], []], "onSetSelectedCaseIds", ["subexpr", "action", ["setSelectedCaseIds"], [], ["loc", [null, [8, 23], [8, 52]]]], "onTrashCases", ["subexpr", "action", ["trashCases"], [], ["loc", [null, [9, 15], [9, 36]]]], "trashable", ["subexpr", "not", [["get", "isTrash", ["loc", [null, [10, 17], [10, 24]]]]], [], ["loc", [null, [10, 12], [10, 25]]]], "selectedCaseIds", ["subexpr", "@mut", [["get", "selectedCaseIds", ["loc", [null, [11, 18], [11, 33]]]]], [], []], "orderByColumn", ["subexpr", "@mut", [["get", "orderByColumn", ["loc", [null, [12, 16], [12, 29]]]]], [], []]], ["loc", [null, [1, 0], [12, 31]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/session/agent/cases/index/view-loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/index/view-loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/index/view-loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/session/agent/cases/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/cases/new/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var computed = _ember['default'].computed;
  var inject = _ember['default'].inject;
  exports['default'] = Controller.extend({
    intl: inject.service(),
    queryParams: ['requester_id'],

    breadcrumbs: computed('model.case.creator.organization.id', 'model.creator.id', function () {
      var hasOrganisation = this.get('model.case.requester.organization.id');
      var hasUser = this.get('model.case.requester.id');

      var caseCrumb = {
        id: 'case',
        label: this.get('intl').findTranslationByKey('cases.new_case'),
        routeName: 'session.agent.cases.new.index',
        dynamicSegments: [],
        queryParams: null
      };

      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.case.requester.organization.name'),
          routeName: 'session.agent.cases.new.organisation',
          dynamicSegments: [],
          queryParams: null
        });
      }

      if (hasUser) {
        crumbs.push({
          id: 'user',
          label: this.get('model.case.requester.fullName'),
          routeName: 'session.agent.cases.new.user',
          dynamicSegments: [],
          queryParams: null
        });
      }

      crumbs.push(caseCrumb);

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/cases/new/index/controller', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  var Controller = _ember['default'].Controller;
  exports['default'] = Controller.extend({
    actions: {
      transitionToNewlyCreatedCase: function transitionToNewlyCreatedCase() {
        var _target;

        (_target = this.target).send.apply(_target, ['transitionToNewlyCreatedCase'].concat(_slice.call(arguments)));
      },

      updateTabName: function updateTabName() {
        var _target2;

        (_target2 = this.target).send.apply(_target2, ['updateTabName'].concat(_slice.call(arguments)));
      },

      updateTabState: function updateTabState(state) {
        this.target.send('updateNonPersistedTabState', { index: state });
        this.set('tabState', state);
      }
    }
  });
});
define('frontend-cp/session/agent/cases/new/index/route', ['exports', 'ember'], function (exports, _ember) {
  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports['default'] = _ember['default'].Route.extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      var parentModel = this.modelFor('session.agent.cases.new');

      return _ember['default'].RSVP.hash(_extends({
        priorities: this.get('storeCache').findAll('case-priority'),
        statuses: this.get('storeCache').findAll('case-status'),
        types: this.get('storeCache').findAll('case-type')
      }, parentModel));
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model['case']);
      var parentController = this.controllerFor('session.agent.cases.new');
      controller.set('tabId', parentController.get('tab.basePath'));
      controller.setProperties(model);
    }
  });
});
define("frontend-cp/session/agent/cases/new/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-case-content", [], ["case", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 7], [2, 12]]]]], [], []], "postId", ["subexpr", "@mut", [["get", "postId", ["loc", [null, [3, 9], [3, 15]]]]], [], []], "sortOrder", ["subexpr", "@mut", [["get", "sortOrder", ["loc", [null, [4, 12], [4, 21]]]]], [], []], "onCaseCreate", ["subexpr", "action", ["transitionToNewlyCreatedCase"], [], ["loc", [null, [5, 15], [5, 54]]]], "onStateUpdate", ["subexpr", "action", ["updateTabState"], [], ["loc", [null, [6, 16], [6, 41]]]], "onTabNameUpdate", ["subexpr", "action", ["updateTabName"], [], ["loc", [null, [7, 18], [7, 42]]]], "filter", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [8, 9], [8, 15]]]]], [], []], "caseFields", ["subexpr", "@mut", [["get", "caseFields", ["loc", [null, [9, 13], [9, 23]]]]], [], []], "priorities", ["subexpr", "@mut", [["get", "priorities", ["loc", [null, [10, 13], [10, 23]]]]], [], []], "statuses", ["subexpr", "@mut", [["get", "statuses", ["loc", [null, [11, 11], [11, 19]]]]], [], []], "types", ["subexpr", "@mut", [["get", "types", ["loc", [null, [12, 8], [12, 13]]]]], [], []], "tabId", ["subexpr", "@mut", [["get", "tabId", ["loc", [null, [13, 8], [13, 13]]]]], [], []]], ["loc", [null, [1, 0], [14, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/organisation/route', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Route.extend({
    model: function model(params) {
      var requester = get(this.modelFor('session.agent.cases.new'), 'case.requester');
      return requester ? requester.get('organization') : {};
    }
  });
});
define("frontend-cp/session/agent/cases/new/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  var RSVP = _ember['default'].RSVP;
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(_ref) {
      var _this = this;

      var requester_id = _ref.requester_id;
      var timestamp = _ref.timestamp;

      var requester = this.store.findRecord('user', requester_id);
      var statuses = this.get('storeCache').findAll('case-status');
      var channels = this.store.query('channel', { user_id: requester_id });
      var sourceChannel = channels.then(function (channelModels) {
        return channelModels.objectAt(0);
      });
      var form = this.store.findAll('case-form').then(function (caseForms) {
        return caseForms.find(function (caseForm) {
          return caseForm.get('isDefault') === true;
        });
      });
      var caseFields = this.get('storeCache').findAll('case-field'); // TODO: This only concerns to the component? Remove it from here?

      return RSVP.hash({ requester: requester, channels: channels, sourceChannel: sourceChannel, statuses: statuses, form: form }).then(function (_ref2) {
        var requester = _ref2.requester;
        var channels = _ref2.channels;
        var sourceChannel = _ref2.sourceChannel;
        var form = _ref2.form;
        var statuses = _ref2.statuses;

        var newCase = _this.store.peekAll('case').findBy('creationTimestamp', timestamp);

        if (newCase) {
          return {
            'case': newCase,
            caseFields: caseFields
          };
        } else {
          return RSVP.hash({
            'case': _this.store.createRecord('case', {
              requester: requester, channels: channels, sourceChannel: sourceChannel, form: form,
              status: _this.store.peekAll('case-status').find(function (model) {
                return model.get('statusType') === 'NEW';
              }),
              creationTimestamp: timestamp
            }), caseFields: caseFields
          });
        }
      });
    },

    afterModel: function afterModel(_, transition) {
      this.tab = this.get('tabStore').open(transition, 'New case');
    },

    actions: {
      transitionToNewlyCreatedCase: function transitionToNewlyCreatedCase(newCase) {
        var tabStore = this.get('tabStore');
        tabStore.leave(this.tab);
        tabStore.close(this.tab);
        this.transitionTo('session.agent.cases.case.index', newCase.get('id'));
      }
    }
  });
});
/* eslint-disable camelcase */
define("frontend-cp/session/agent/cases/new/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/cases/new/user/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/cases/new/user/route', ['exports', 'ember'], function (exports, _ember) {
  var get = _ember['default'].get;
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return get(this.modelFor('session.agent.cases.new'), 'case.requester');
    }
  });
});
define("frontend-cp/session/agent/cases/new/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 72
          }
        },
        "moduleName": "frontend-cp/session/agent/cases/new/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/organisations/organisation/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    /**
     * Returns a breadcrumb containing the Organisation
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: _ember['default'].computed('model.organization.id', function () {
      return [{
        id: 'organisation',
        label: this.get('model.name'),
        routeName: 'session.agent.organisations.organisation',
        dynamicSegments: []
      }];
    })

  });
});
define('frontend-cp/session/agent/organisations/organisation/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    actions: {
      closeTab: function closeTab() {
        this.target.send('closeTab');
      }
    }
  });
});
define('frontend-cp/session/agent/organisations/organisation/index/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({});
});
define("frontend-cp/session/agent/organisations/organisation/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []], "canDelete", true, "closeTab", ["subexpr", "action", ["closeTab"], [], ["loc", [null, [1, 62], [1, 81]]]]], ["loc", [null, [1, 0], [1, 83]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/organisations/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(params) {
      this.get('storeCache').findAll('organization-field');
      return this.store.findRecord('organization', params.organisation_id);
    },

    afterModel: function afterModel(model, transition) {
      this.tab = this.get('tabStore').open(transition, model.get('name'));
    },

    actions: {
      willTransition: function willTransition() {
        var model = this.modelFor(this.routeName);
        if (model && model.get('isDeleted')) {
          this.get('tabStore').leave(this.tab);
          this.get('tabStore').close(this.tab);
        }
        this._super.apply(this, arguments);
      },

      closeTab: function closeTab() {
        this.get('tabStore').close(this.tab);
      }
    }
  });
});
define("frontend-cp/session/agent/organisations/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/organisations/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    active: false,

    macroFetcher: _ember['default'].inject.service('macro-fetcher'),

    activate: _ember['default'].on('activate', function () {
      this.set('active', true);
    }),

    deactivate: _ember['default'].on('deactivate', function () {
      this.set('active', false);
    }),

    afterModel: function afterModel() {
      this.get('macroFetcher').fetchMacros();
      return this._super.apply(this, arguments);
    }
  });
});
define('frontend-cp/session/agent/users/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    page: 1,
    limit: 5,
    offset: 0,

    queryParams: {
      page: {
        refreshModel: true
      }
    },

    model: function model(params) {
      if (params.page) {
        var page = params.page;
        this.set('page', isNaN(page) ? 1 : Math.floor(Math.abs(page)));
      }
      this.set('offset', (this.get('page') - 1) * this.get('limit'));

      return this.store.query('user', {
        offset: this.get('offset'),
        limit: this.get('limit')
      });
    },

    setupController: function setupController(controller, model) {
      controller.set('users', model);
      controller.setProperties({
        page: this.get('page'),
        totalPages: Math.ceil(model.get('meta.total') / this.get('limit'))
      });
    }
  });
});
define("frontend-cp/session/agent/users/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 7
              },
              "end": {
                "line": 5,
                "column": 68
              }
            },
            "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "user.fullName", ["loc", [null, [5, 51], [5, 68]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  	");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.users.user", ["get", "user", ["loc", [null, [5, 45], [5, 49]]]]], [], 0, null, ["loc", [null, [5, 7], [5, 80]]]]],
        locals: ["user"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 6
          }
        },
        "moduleName": "frontend-cp/session/agent/users/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "container");
        var el2 = dom.createTextNode("\n  List of users\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "users", ["loc", [null, [4, 10], [4, 15]]]]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/agent/users/user/controller', ['exports', 'ember'], function (exports, _ember) {
  var computed = _ember['default'].computed;
  var service = _ember['default'].inject.service;
  exports['default'] = _ember['default'].Controller.extend({
    intl: service(),

    /**
     * Returns a breadcrumb hash depending on what
     * data is available. Should hierarchical:
     * Organisation>User
     * @return {Object} Breadcrumb data hash
     */
    breadcrumbs: computed('model.organization.name', function () {
      var hasOrganisation = this.get('model.organization.name');
      var crumbs = [];

      if (hasOrganisation) {
        crumbs.push({
          id: 'organisation',
          label: this.get('model.organization.name'),
          routeName: 'session.agent.users.user.organisation',
          dynamicSegments: []
        });
      }

      crumbs.push({
        id: 'user',
        label: this.get('model.fullName'),
        routeName: 'session.agent.users.user.index',
        dynamicSegments: []
      });

      return crumbs;
    })
  });
});
define('frontend-cp/session/agent/users/user/index/controller', ['exports', 'ember', 'moment'], function (exports, _ember, _moment) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      createNewCase: function createNewCase(user) {
        this.transitionToRoute('session.agent.cases.new', (0, _moment['default'])().format('YYYY-MM-DD-hh-mm-ss'), { queryParams: { requester_id: user.id } });
      }
    }
  });
});
/*eslint-disable camelcase */
define('frontend-cp/session/agent/users/user/index/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({});
});
define("frontend-cp/session/agent/users/user/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/index/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-user-content", [], ["onCreateNewCase", ["subexpr", "action", ["createNewCase"], [], ["loc", [null, [1, 34], [1, 58]]]], "model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 65], [1, 70]]]]], [], []]], ["loc", [null, [1, 0], [1, 72]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/users/user/organisation/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route-child'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRouteChild) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRouteChild['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model() {
      this.get('storeCache').findAll('organization-field');
      var parentModel = this.modelFor('session.agent.users.user');
      return parentModel ? parentModel.get('organization') : {};
    }
  });
});
define("frontend-cp/session/agent/users/user/organisation/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/organisation/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ko-organisation-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [1, 32], [1, 37]]]]], [], []]], ["loc", [null, [1, 0], [1, 39]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/agent/users/user/route', ['exports', 'ember', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _ember, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    storeCache: _ember['default'].inject.service('store-cache'),

    model: function model(params) {
      this.get('storeCache').findAll('user-field');
      return this.store.findRecord('user', params.user_id);
    },

    afterModel: function afterModel(model, transition) {
      this.set('tab', this.get('tabStore').open(transition, model.get('fullName')));
    }
  });
});
define("frontend-cp/session/agent/users/user/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/agent/users/user/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "layout--flush");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "layout__item u-1/1");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        return morphs;
      },
      statements: [["inline", "ko-breadcrumbs", [], ["breadcrumbs", ["subexpr", "@mut", [["get", "breadcrumbs", ["loc", [null, [3, 33], [3, 44]]]]], [], []]], ["loc", [null, [3, 4], [3, 46]]]], ["content", "outlet", ["loc", [null, [5, 2], [5, 12]]]]],
      locals: [],
      templates: []
    };
  })());
});
define('frontend-cp/session/controller', ['exports', 'ember'], function (exports, _ember) {
  var Controller = _ember['default'].Controller;
  var service = _ember['default'].inject.service;
  exports['default'] = Controller.extend({
    urlService: service('url'),
    tabStore: service(),
    sectionsHistory: service(),
    session: service(),
    searchResults: null,
    isSearching: false,
    hideSessionWidgets: false,
    hasModifier: false,

    /**
     * Add an event listener which will be automatically removed once this controller is destroyed
     * @param {Evented} subject Event emitter
     * @param {string} event Event name to listen to
     * @param {function} handler Listener handler function
     */
    addDisposableListener: function addDisposableListener(subject, event, handler) {
      // Add the listener
      subject.on(event, handler);
      this.get('disposableListeners').push({ subject: subject, event: event, handler: handler });
    },

    /**
     * Array of listeners which will be automatically removed once this controller is destroyed
     * @type {Object[]}
     */
    disposableListeners: null,

    /**
     * Initialise the array of disposable listeners
     */
    initDisposableListeners: _ember['default'].on('init', function () {
      this.set('disposableListeners', []);
    }),

    /**
     * Remove the disposable listeners once the controller is destroyed
     */
    willDestroy: function willDestroy() {
      this._super();
      this.get('disposableListeners').forEach(function (listener) {
        var subject = listener.subject;
        var event = listener.event;
        var handler = listener.handler;

        subject.off(event, handler);
      });
    },

    actions: {
      searchingChanged: function searchingChanged(isSearching) {
        this.set('hideSessionWidgets', isSearching);
      },

      loadSearchRoute: function loadSearchRoute(routeName, label, targetObjectId, hasModifier) {
        if (hasModifier) {
          this.get('tabStore').createTab(routeName, label, targetObjectId);
        } else {
          this.transitionToRoute(routeName, targetObjectId);
        }
      },

      close: function close(tab, e) {
        e.stopPropagation();
        e.preventDefault();
        this.get('tabStore').close(tab);
      }
    }
  });
});
define('frontend-cp/session/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),

    beforeModel: function beforeModel(transition) {
      this.transitionTo('session.agent');
    }
  });
});
define("frontend-cp/session/loading/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 1,
              "column": 38
            }
          },
          "moduleName": "frontend-cp/session/loading/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "ko-loader", [], ["large", true], ["loc", [null, [1, 14], [1, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 52
          }
        },
        "moduleName": "frontend-cp/session/loading/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ko-center", [], [], 0, null, ["loc", [null, [1, 0], [1, 52]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('frontend-cp/session/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    sessionService: _ember['default'].inject.service('session'),
    analyticsService: _ember['default'].inject.service('analytics'),

    beforeModel: function beforeModel(transition) {
      var _this = this;

      return _ember['default'].RSVP.all([this.get('sessionService').getSession()]).then(function () {
        _this.get('analyticsService').setup();
      }, function () {
        transition.abort();
      });
    },

    actions: {
      willTransition: function willTransition() {
        this.controller.set('searchResults', null);
        this.controller.set('searchQuery', null);
      },

      transitionToRoute: function transitionToRoute() {
        this.transitionTo.apply(this, arguments);
      }
    }
  });
});
/**
 * SessionRoute
 *
 * This route is resposible for checking the session exists for all its
 * child routes. Since a parent route loads before all its children, no
 * child route will load if the session id is not available.
 *
 * Note that the application route is not a child of this one so the
 * application route needs to check for the session independently.
 *
 * This route also loads all data shared by all its children
 */
define("frontend-cp/session/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 12
              },
              "end": {
                "line": 8,
                "column": 133
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 10
            },
            "end": {
              "line": 9,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.index.view", ["get", "tabStore.casesViewId", ["loc", [null, [8, 56], [8, 76]]]]], ["title", ["subexpr", "t", ["cases.cases"], [], ["loc", [null, [8, 83], [8, 100]]]], "class", "nav-main__item i-inbox"], 0, null, ["loc", [null, [8, 12], [8, 145]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 12
              },
              "end": {
                "line": 10,
                "column": 107
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 10
            },
            "end": {
              "line": 11,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.cases.index"], ["title", ["subexpr", "t", ["cases.cases"], [], ["loc", [null, [10, 57], [10, 74]]]], "class", "nav-main__item i-inbox"], 0, null, ["loc", [null, [10, 12], [10, 119]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 14
                },
                "end": {
                  "line": 14,
                  "column": 165
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 12
              },
              "end": {
                "line": 15,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "sectionsHistory.history.admin.routeName", ["loc", [null, [14, 25], [14, 64]]]], ["get", "sectionsHistory.history.admin.model", ["loc", [null, [14, 65], [14, 100]]]]], ["title", ["subexpr", "t", ["admin.administration"], [], ["loc", [null, [14, 107], [14, 133]]]], "class", "nav-main__item i-gear"], 0, null, ["loc", [null, [14, 14], [14, 177]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 14
                },
                "end": {
                  "line": 16,
                  "column": 129
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 15,
                "column": 12
              },
              "end": {
                "line": 17,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", [["get", "sectionsHistory.history.admin.routeName", ["loc", [null, [16, 25], [16, 64]]]]], ["title", ["subexpr", "t", ["admin.administration"], [], ["loc", [null, [16, 71], [16, 97]]]], "class", "nav-main__item i-gear"], 0, null, ["loc", [null, [16, 14], [16, 141]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 10
            },
            "end": {
              "line": 18,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "sectionsHistory.history.admin.model", ["loc", [null, [13, 18], [13, 53]]]]], [], 0, 1, ["loc", [null, [13, 12], [17, 19]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 12
              },
              "end": {
                "line": 20,
                "column": 108
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 21,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("            ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "link-to", ["session.agent.users.index"], ["title", ["subexpr", "t", ["users.users"], [], ["loc", [null, [20, 57], [20, 74]]]], "class", "nav-main__item i-person"], 0, null, ["loc", [null, [20, 12], [20, 120]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 34,
                    "column": 16
                  },
                  "end": {
                    "line": 36,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__label");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__close");
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element5 = dom.childAt(fragment, [2]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element5, 'onclick');
                return morphs;
              },
              statements: [["content", "tab.label", ["loc", [null, [35, 47], [35, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [35, 120], [35, 123]]]]], [], ["loc", [null, [35, 103], [35, 125]]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 14
                },
                "end": {
                  "line": 37,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [34, 27], [34, 40]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [34, 63], [34, 78]]]]], [], ["loc", [null, [34, 41], [34, 79]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [34, 16], [36, 28]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 38,
                      "column": 16
                    },
                    "end": {
                      "line": 40,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element4, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [39, 47], [39, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [39, 120], [39, 123]]]]], [], ["loc", [null, [39, 103], [39, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 14
                  },
                  "end": {
                    "line": 41,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [38, 27], [38, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [38, 41], [38, 72]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [38, 95], [38, 110]]]]], [], ["loc", [null, [38, 73], [38, 111]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [38, 16], [40, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 42,
                      "column": 16
                    },
                    "end": {
                      "line": 44,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element3, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [43, 47], [43, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [43, 120], [43, 123]]]]], [], ["loc", [null, [43, 103], [43, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 14
                  },
                  "end": {
                    "line": 45,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [42, 27], [42, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [42, 41], [42, 72]]]], ["get", "tab.dynamicSegments.lastObject", ["loc", [null, [42, 73], [42, 103]]]], ["subexpr", "hash-to-query-params", [["get", "tab.queryParams", ["loc", [null, [42, 126], [42, 141]]]]], [], ["loc", [null, [42, 104], [42, 142]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [42, 16], [44, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 14
                },
                "end": {
                  "line": 45,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [37, 28], [37, 54]]]], 1], [], ["loc", [null, [37, 24], [37, 57]]]]], [], 0, 1, ["loc", [null, [37, 14], [45, 14]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 12
              },
              "end": {
                "line": 46,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [33, 24], [33, 50]]]], 0], [], ["loc", [null, [33, 20], [33, 53]]]]], [], 0, 1, ["loc", [null, [33, 14], [45, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 48,
                    "column": 16
                  },
                  "end": {
                    "line": 50,
                    "column": 16
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                  ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__label");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "nav-tabs__close");
                var el2 = dom.createElement("span");
                dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element2 = dom.childAt(fragment, [2]);
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createAttrMorph(element2, 'onclick');
                return morphs;
              },
              statements: [["content", "tab.label", ["loc", [null, [49, 47], [49, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [49, 120], [49, 123]]]]], [], ["loc", [null, [49, 103], [49, 125]]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 47,
                  "column": 14
                },
                "end": {
                  "line": 51,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [48, 27], [48, 40]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [48, 16], [50, 28]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 52,
                      "column": 16
                    },
                    "end": {
                      "line": 54,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element1, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [53, 47], [53, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [53, 120], [53, 123]]]]], [], ["loc", [null, [53, 103], [53, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 51,
                    "column": 14
                  },
                  "end": {
                    "line": 55,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [52, 27], [52, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [52, 41], [52, 72]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [52, 16], [54, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.0.3",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 56,
                      "column": 16
                    },
                    "end": {
                      "line": 58,
                      "column": 16
                    }
                  },
                  "moduleName": "frontend-cp/session/template.hbs"
                },
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__label");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "nav-tabs__close");
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "i-cross i-size-20 i-inherit-lh");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [2]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                  morphs[1] = dom.createAttrMorph(element0, 'onclick');
                  return morphs;
                },
                statements: [["content", "tab.label", ["loc", [null, [57, 47], [57, 60]]]], ["attribute", "onclick", ["subexpr", "action", ["close", ["get", "tab", ["loc", [null, [57, 120], [57, 123]]]]], [], ["loc", [null, [57, 103], [57, 125]]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 14
                  },
                  "end": {
                    "line": 59,
                    "column": 14
                  }
                },
                "moduleName": "frontend-cp/session/template.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode(" ");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "tab.routeName", ["loc", [null, [56, 27], [56, 40]]]], ["get", "tab.dynamicSegments.firstObject", ["loc", [null, [56, 41], [56, 72]]]], ["get", "tab.dynamicSegments.lastObject", ["loc", [null, [56, 73], [56, 103]]]]], ["class", "nav-tabs__item"], 0, null, ["loc", [null, [56, 16], [58, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 51,
                  "column": 14
                },
                "end": {
                  "line": 59,
                  "column": 14
                }
              },
              "moduleName": "frontend-cp/session/template.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [51, 28], [51, 54]]]], 1], [], ["loc", [null, [51, 24], [51, 57]]]]], [], 0, 1, ["loc", [null, [51, 14], [59, 14]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 46,
                "column": 12
              },
              "end": {
                "line": 60,
                "column": 12
              }
            },
            "moduleName": "frontend-cp/session/template.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "eq", [["get", "tab.dynamicSegments.length", ["loc", [null, [47, 24], [47, 50]]]], 0], [], ["loc", [null, [47, 20], [47, 53]]]]], [], 0, 1, ["loc", [null, [47, 14], [59, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 10
            },
            "end": {
              "line": 61,
              "column": 10
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "tab.queryParams", ["loc", [null, [27, 18], [27, 33]]]]], [], 0, 1, ["loc", [null, [27, 12], [60, 19]]]]],
        locals: ["tab"],
        templates: [child0, child1]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 12
            },
            "end": {
              "line": 79,
              "column": 12
            }
          },
          "moduleName": "frontend-cp/session/template.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("              ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "ko-session-widgets", ["loc", [null, [78, 14], [78, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("header");
        dom.setAttribute(el1, "class", "header");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "nav__image");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5, "class", "nav-main");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("\n   ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "u-inline-block");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("nav");
        dom.setAttribute(el5, "class", "nav-tabs");
        var el6 = dom.createTextNode("\n");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "nav-secondary");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "nav-secondary__container");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "nav-secondary__content");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        var el7 = dom.createTextNode("\n");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "session_outlet-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [0, 1]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element7, [3, 1]);
        var element9 = dom.childAt(element6, [3, 1, 1]);
        var element10 = dom.childAt(element9, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element6, 'class');
        morphs[1] = dom.createMorphAt(element8, 1, 1);
        morphs[2] = dom.createMorphAt(element8, 2, 2);
        morphs[3] = dom.createMorphAt(element8, 3, 3);
        morphs[4] = dom.createMorphAt(dom.childAt(element7, [5, 1]), 1, 1);
        morphs[5] = dom.createMorphAt(element7, 7, 7);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
        morphs[7] = dom.createAttrMorph(element10, 'class');
        morphs[8] = dom.createMorphAt(element10, 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["nav ", ["subexpr", "if", [["subexpr", "not", [["get", "tabStore.isEnabled", ["loc", [null, [2, 28], [2, 46]]]]], [], ["loc", [null, [2, 23], [2, 47]]]], "nav--disabled"], [], ["loc", [null, [2, 18], [2, 65]]]]]]], ["block", "if", [["get", "tabStore.casesViewId", ["loc", [null, [7, 16], [7, 36]]]]], [], 0, 1, ["loc", [null, [7, 10], [11, 17]]]], ["block", "if", [["subexpr", "or", [["subexpr", "eq", [["get", "session.user.role.roleType", ["loc", [null, [12, 24], [12, 50]]]], "ADMIN"], [], ["loc", [null, [12, 20], [12, 59]]]], ["subexpr", "eq", [["get", "session.user.role.roleType", ["loc", [null, [12, 64], [12, 90]]]], "OWNER"], [], ["loc", [null, [12, 60], [12, 99]]]]], [], ["loc", [null, [12, 16], [12, 100]]]]], [], 2, null, ["loc", [null, [12, 10], [18, 17]]]], ["block", "if", [["get", "features.userTab", ["loc", [null, [19, 16], [19, 32]]]]], [], 3, null, ["loc", [null, [19, 10], [21, 17]]]], ["block", "each", [["get", "tabStore.tabs", ["loc", [null, [26, 18], [26, 31]]]]], [], 4, null, ["loc", [null, [26, 10], [61, 19]]]], ["content", "ko-agent-dropdown", ["loc", [null, [64, 6], [64, 27]]]], ["inline", "ko-universal-search", [], ["searchResults", ["subexpr", "@mut", [["get", "searchResults", ["loc", [null, [71, 28], [71, 41]]]]], [], []], "searchQuery", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [72, 26], [72, 37]]]]], [], []], "onLoadSearchRoute", ["subexpr", "action", ["loadSearchRoute"], [], ["loc", [null, [73, 32], [73, 58]]]], "onSearchChanged", ["subexpr", "action", ["searchingChanged"], [], ["loc", [null, [74, 30], [74, 57]]]]], ["loc", [null, [70, 12], [74, 59]]]], ["attribute", "class", ["concat", ["nav-secondary__sidebar ", ["subexpr", "if", [["get", "hideSessionWidgets", ["loc", [null, [76, 50], [76, 68]]]], "nav-secondary__sidebar--hidden"], [], ["loc", [null, [76, 45], [76, 103]]]]]]], ["block", "unless", [["get", "hideSessionWidgets", ["loc", [null, [77, 22], [77, 40]]]]], [], 5, null, ["loc", [null, [77, 12], [79, 23]]]], ["content", "outlet", ["loc", [null, [87, 2], [87, 12]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define('frontend-cp/session/test/entry/route', ['exports', 'frontend-cp/routes/abstract/tabbed-route'], function (exports, _frontendCpRoutesAbstractTabbedRoute) {
  exports['default'] = _frontendCpRoutesAbstractTabbedRoute['default'].extend({
    model: function model() {
      return {};
    },

    afterModel: function afterModel(_, transition) {
      this.tab = this.get('tabStore').open(transition, 'Test');
    },

    actions: {
      didRender: function didRender() {
        this.send('restoreScroll');
      }
    }
  });
});
define("frontend-cp/session/test/entry/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/session/test/entry/template.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "style", "height: 5000px");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/styles/application/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "application__notifications": "_application__notifications_n7hqf2"
  };
});
define("frontend-cp/styles/components/ko-admin/businesshours/edit/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_businesshours__grid-title": "_ko-admin_businesshours__grid-title_pzxwew",
    "ko-admin_businesshours__add-holiday": "_ko-admin_businesshours__add-holiday_pzxwew"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/edit/options/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-reorderable-crud-list-actions": "_ko-reorderable-crud-list-actions_1cgwmd",
    "ko-reorderable-crud-list-item": "_ko-reorderable-crud-list-item_1cgwmd",
    "ko-reorderable-crud-list-item__values": "_ko-reorderable-crud-list-item__values_1cgwmd",
    "ko-admin_case-fields_edit_options__actions": "_ko-admin_case-fields_edit_options__actions_1cgwmd"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/edit/priorities/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "priorities__add-priority-message": "_priorities__add-priority-message_1314wl"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/edit/statuses/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "statuses__add-status-message": "_statuses__add-status-message_67mbzc",
    "statuses__is-sla-active": "_statuses__is-sla-active_67mbzc"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/edit/types/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_case-fields_edit_types__add-type-message": "_ko-admin_case-fields_edit_types__add-type-message_44dfk1",
    "types__add-type-message": "_types__add-type-message_44dfk1"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/select-type/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_case-fields_select-type": "_ko-admin_case-fields_select-type_15cvki",
    "ko-admin_case-fields_select-type__icon": "_ko-admin_case-fields_select-type__icon_15cvki",
    "ko-admin_case-fields_select-type__action": "_ko-admin_case-fields_select-type__action_15cvki"
  };
});
define("frontend-cp/styles/components/ko-admin/case-fields/type-icon/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_case-fields_type-icon": "_ko-admin_case-fields_type-icon_12943e",
    "TEXT": "_TEXT_12943e"
  };
});
define("frontend-cp/styles/components/ko-admin/case-forms/edit/fields/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_case-forms_edit_fields__action": "_ko-admin_case-forms_edit_fields__action_6e3p4f"
  };
});
define("frontend-cp/styles/components/ko-admin/forms/group/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-forms-group": "_ko-admin-forms-group_1n25yf",
    "ko-admin-form-group__legend": "_ko-admin-form-group__legend_1n25yf"
  };
});
define("frontend-cp/styles/components/ko-admin/holidays/edit/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_holidays_edit": "_ko-admin_holidays_edit_1o8til",
    "ko-admin_holidays_edit__title": "_ko-admin_holidays_edit__title_1o8til",
    "error": "_error_1o8til"
  };
});
define("frontend-cp/styles/components/ko-admin/inline-locale-edit/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_inline-locale-edit": "_ko-admin_inline-locale-edit_e0royr",
    "ko-admin_inline-locale-edit--text-area": "_ko-admin_inline-locale-edit--text-area_e0royr",
    "ko-admin_inline-locale-edit__container": "_ko-admin_inline-locale-edit__container_e0royr",
    "ko-admin_inline-locale-edit__modal-button": "_ko-admin_inline-locale-edit__modal-button_e0royr",
    "ko-admin_inline-locale-edit__modal-button--is-edited": "_ko-admin_inline-locale-edit__modal-button--is-edited_e0royr",
    "ko-admin_inline-locale-edit__text": "_ko-admin_inline-locale-edit__text_e0royr",
    "ko-admin_inline-locale-edit__popover": "_ko-admin_inline-locale-edit__popover_e0royr"
  };
});
define("frontend-cp/styles/components/ko-admin/macros/action/reply-contents/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_macros_action_reply-contents": "_ko-admin_macros_action_reply-contents_1gluzt",
    "ko-admin-macros-action": "_ko-admin-macros-action_1gluzt",
    "ko-admin-macros-action__content": "_ko-admin-macros-action__content_1gluzt",
    "ko-admin-macros-action__form": "_ko-admin-macros-action__form_1gluzt",
    "ko-admin-macros-action__label": "_ko-admin-macros-action__label_1gluzt",
    "ko-admin-macros-action-reply-contents__textarea": "_ko-admin-macros-action-reply-contents__textarea_1gluzt"
  };
});
define("frontend-cp/styles/components/ko-admin/macros/action/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-macros-action": "_ko-admin-macros-action_kgw3la",
    "ko-admin-macros-action__remove": "_ko-admin-macros-action__remove_kgw3la",
    "ember-power-select": "_ember-power-select_kgw3la",
    "ember-power-select-trigger": "_ember-power-select-trigger_kgw3la",
    "ko-admin-macros-action__content": "_ko-admin-macros-action__content_kgw3la",
    "ko-admin-macros-action__form": "_ko-admin-macros-action__form_kgw3la",
    "ko-admin-macros-action__types": "_ko-admin-macros-action__types_kgw3la",
    "ko-admin-macros-action__label": "_ko-admin-macros-action__label_kgw3la"
  };
});
define("frontend-cp/styles/components/ko-admin/macros/edit/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_macros_edit__team-selector": "_ko-admin_macros_edit__team-selector_1ky7hn",
    "ko-admin_macros_edit__actions-selector": "_ko-admin_macros_edit__actions-selector_1ky7hn"
  };
});
define("frontend-cp/styles/components/ko-admin/page-container/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-session-admin-index": "_ko-session-admin-index_xkbmuf",
    "ko-session-admin-index__sidebar": "_ko-session-admin-index__sidebar_xkbmuf",
    "ko-session-admin-index__pagination": "_ko-session-admin-index__pagination_xkbmuf",
    "ko-session-admin-index__content": "_ko-session-admin-index__content_xkbmuf",
    "ko-admin-content": "_ko-admin-content_xkbmuf"
  };
});
define("frontend-cp/styles/components/ko-admin/page-footer/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_page-footer": "_ko-admin_page-footer_1qh3np"
  };
});
define("frontend-cp/styles/components/ko-admin/page-header/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_page-header": "_ko-admin_page-header_1hjhif",
    "ko-admin-header": "_ko-admin-header_1hjhif",
    "ko-admin-header__title": "_ko-admin-header__title_1hjhif",
    "ko-admin-header__spacer": "_ko-admin-header__spacer_1hjhif",
    "ko-admin-header__content": "_ko-admin-header__content_1hjhif"
  };
});
define("frontend-cp/styles/components/ko-admin/team/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-card-user--small": "_ko-admin-card-user--small_1czwjf",
    "ko-admin-card-user__loader": "_ko-admin-card-user__loader_1czwjf",
    "ko-admin_team__businesshours": "_ko-admin_team__businesshours_1czwjf"
  };
});
define("frontend-cp/styles/components/ko-admin/views/edit/columns/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-views-column": "_ko-views-column_1mjmbn",
    "ko-views-column__item": "_ko-views-column__item_1mjmbn",
    "ko-views-column__action": "_ko-views-column__action_1mjmbn",
    "ko-views-column__content": "_ko-views-column__content_1mjmbn"
  };
});
define("frontend-cp/styles/components/ko-admin/views/edit/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_views_edit_predicate-header": "_ko-admin_views_edit_predicate-header_yj3brn",
    "ko-admin_views_edit_team-selector": "_ko-admin_views_edit_team-selector_yj3brn",
    "ember-power-select-trigger": "_ember-power-select-trigger_yj3brn",
    "ember-power-select-multiple-option": "_ember-power-select-multiple-option_yj3brn",
    "ember-power-select-trigger-multiple-input": "_ember-power-select-trigger-multiple-input_yj3brn"
  };
});
define("frontend-cp/styles/components/ko-admin-card-team/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-card-team": "_ko-admin-card-team_u3jlk",
    "ko-admin-card-team__header": "_ko-admin-card-team__header_u3jlk",
    "ko-admin-card-team__title": "_ko-admin-card-team__title_u3jlk",
    "ko-admin-card-team__content": "_ko-admin-card-team__content_u3jlk",
    "ko-admin-card-team-members": "_ko-admin-card-team-members_u3jlk",
    "ko-admin-card-team-members__item": "_ko-admin-card-team-members__item_u3jlk"
  };
});
define("frontend-cp/styles/components/ko-admin-card-user/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-card-user": "_ko-admin-card-user_1yd5lj"
  };
});
define("frontend-cp/styles/components/ko-admin-selectable-card/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin-selectable-card": "_ko-admin-selectable-card_1vtqol",
    "ko-admin-selectable-card--selected": "_ko-admin-selectable-card--selected_1vtqol",
    "ko-admin-selectable-card__content": "_ko-admin-selectable-card__content_1vtqol",
    "ko-admin-selectable-card__checkbox": "_ko-admin-selectable-card__checkbox_1vtqol"
  };
});
define("frontend-cp/styles/components/ko-agent-dropdown/create-case/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-agent-dropdown_create-case": "_ko-agent-dropdown_create-case_1tb74d",
    "rotating": "_rotating_1tb74d",
    "ember-power-select-typeahead": "_ember-power-select-typeahead_1tb74d",
    "ember-power-select-trigger": "_ember-power-select-trigger_1tb74d",
    "ember-power-select-typeahead-input": "_ember-power-select-typeahead-input_1tb74d",
    "ember-power-select-typeahead-loading-indicator": "_ember-power-select-typeahead-loading-indicator_1tb74d",
    "ko-agent-dropdown-create-case__dropdown-user": "_ko-agent-dropdown-create-case__dropdown-user_1tb74d",
    "ko-agent-dropdown-create-case__dropdown-user-image": "_ko-agent-dropdown-create-case__dropdown-user-image_1tb74d",
    "ember-power-select-option": "_ember-power-select-option_1tb74d",
    "t-caption": "_t-caption_1tb74d"
  };
});
define("frontend-cp/styles/components/ko-agent-dropdown/create-organisation/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-agent-dropdown-create-organisation__tags-input": "_ko-agent-dropdown-create-organisation__tags-input_gmvf8l"
  };
});
define("frontend-cp/styles/components/ko-agent-dropdown/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-agent-dropdown": "_ko-agent-dropdown_1ht47t",
    "ko-agent-dropdown__icon-square": "_ko-agent-dropdown__icon-square_1ht47t",
    "ko-agent-dropdown__add-icon": "_ko-agent-dropdown__add-icon_1ht47t",
    "ko-agent-dropdown__trigger": "_ko-agent-dropdown__trigger_1ht47t",
    "ko-agent-dropdown__drop": "_ko-agent-dropdown__drop_1ht47t",
    "ko-agent-dropdown__nav-items": "_ko-agent-dropdown__nav-items_1ht47t",
    "ko-agent-dropdown__nav-item": "_ko-agent-dropdown__nav-item_1ht47t",
    "ko-agent-dropdown__nav-item-img": "_ko-agent-dropdown__nav-item-img_1ht47t",
    "ko-agent-dropdown__header": "_ko-agent-dropdown__header_1ht47t",
    "ko-agent-dropdown__title": "_ko-agent-dropdown__title_1ht47t",
    "ko-agent-dropdown__footer": "_ko-agent-dropdown__footer_1ht47t"
  };
});
define("frontend-cp/styles/components/ko-breadcrumbs/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "breadcrumbs": "_breadcrumbs_1k9qaa",
    "breadcrumbs__item": "_breadcrumbs__item_1k9qaa",
    "active": "_active_1k9qaa",
    "breadcrumbs__action": "_breadcrumbs__action_1k9qaa"
  };
});
define("frontend-cp/styles/components/ko-bulk-sidebar/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-bulk-sidebar": "_ko-bulk-sidebar_1pja0w",
    "ko-bulk-sidebar__title": "_ko-bulk-sidebar__title_1pja0w",
    "fields": "_fields_1pja0w",
    "ko-bulk-sidebar__button-bar": "_ko-bulk-sidebar__button-bar_1pja0w"
  };
});
define("frontend-cp/styles/components/ko-case/macro-selector/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case_macro-selector": "_ko-case_macro-selector_1mxml5",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_1mxml5",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_1mxml5",
    "ember-power-select-search": "_ember-power-select-search_1mxml5"
  };
});
define("frontend-cp/styles/components/ko-case/sla-sidebar/metric/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case_sla-sidebar__label": "_ko-case_sla-sidebar__label_vm7dkn",
    "ko-case_sla-sidebar__data": "_ko-case_sla-sidebar__data_vm7dkn",
    "ko-case_sla-sidebar__data--good": "_ko-case_sla-sidebar__data--good_vm7dkn",
    "ko-case_sla-sidebar__data--bad": "_ko-case_sla-sidebar__data--bad_vm7dkn",
    "ko-case_sla-sidebar__data--warning": "_ko-case_sla-sidebar__data--warning_vm7dkn",
    "ko-case_sla-sidebar__data--open": "_ko-case_sla-sidebar__data--open_vm7dkn"
  };
});
define("frontend-cp/styles/components/ko-case/sla-sidebar/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case_sla-sidebar": "_ko-case_sla-sidebar_ce7lq4",
    "ko-case_sla-sidebar__table": "_ko-case_sla-sidebar__table_ce7lq4"
  };
});
define("frontend-cp/styles/components/ko-case-action-menu/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case-action-menu__dropdown": "_ko-case-action-menu__dropdown_zuq3yf",
    "button--dropdown": "_button--dropdown_zuq3yf",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_zuq3yf",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_zuq3yf"
  };
});
define("frontend-cp/styles/components/ko-case-content/dropdown/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case-content_dropdown": "_ko-case-content_dropdown_1qalsl",
    "ko-case-content_dropdown__label": "_ko-case-content_dropdown__label_1qalsl",
    "ko-case-content_dropdown__current-value": "_ko-case-content_dropdown__current-value_1qalsl"
  };
});
define("frontend-cp/styles/components/ko-case-content/field/forms/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-case-content_field_forms": "_ko-case-content_field_forms_188lxp"
  };
});
define("frontend-cp/styles/components/ko-case-content/field/post/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-text-editor--note": "_ko-text-editor--note_1dzldt",
    "ko-text-editor__dropzone-and-editor-container": "_ko-text-editor__dropzone-and-editor-container_1dzldt",
    "ko-text-editor--reply": "_ko-text-editor--reply_1dzldt",
    "text-editor--small": "_text-editor--small_1dzldt",
    "ko-case-content_field_post--note-reminder": "_ko-case-content_field_post--note-reminder_1dzldt",
    "ko-case-content_field_post--twitter-message": "_ko-case-content_field_post--twitter-message_1dzldt",
    "ko-case-content_field_post__icon": "_ko-case-content_field_post__icon_1dzldt",
    "ko-case-content_field_post__tooltip": "_ko-case-content_field_post__tooltip_1dzldt",
    "ko-case-content_field_post--editor-overlay": "_ko-case-content_field_post--editor-overlay_1dzldt",
    "arrow": "_arrow_1dzldt"
  };
});
define("frontend-cp/styles/components/ko-cases-list/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-cases-list": "_ko-cases-list_fyrf4m",
    "ko-cases-list__title": "_ko-cases-list__title_fyrf4m",
    "ko-cases-list__table-th": "_ko-cases-list__table-th_fyrf4m",
    "ko-cases-list__header--id": "_ko-cases-list__header--id_fyrf4m",
    "ko-cases-list__header--avatar": "_ko-cases-list__header--avatar_fyrf4m",
    "ko-cases-list__header--caseid": "_ko-cases-list__header--caseid_fyrf4m",
    "ko-cases-list__header--casestatusid": "_ko-cases-list__header--casestatusid_fyrf4m",
    "ko-cases-list__header--casepriorityid": "_ko-cases-list__header--casepriorityid_fyrf4m",
    "ko-cases-list__header--brandid": "_ko-cases-list__header--brandid_fyrf4m",
    "ko-cases-list__header--casetypeid": "_ko-cases-list__header--casetypeid_fyrf4m",
    "ko-cases-list__header--assigneeagentid": "_ko-cases-list__header--assigneeagentid_fyrf4m",
    "ko-cases-list__header--assigneeteamid": "_ko-cases-list__header--assigneeteamid_fyrf4m",
    "ko-cases-list__header--requesterid": "_ko-cases-list__header--requesterid_fyrf4m",
    "ko-cases-list__header--channeltype": "_ko-cases-list__header--channeltype_fyrf4m",
    "ko-cases-list__header--createdat": "_ko-cases-list__header--createdat_fyrf4m",
    "ko-cases-list__header--updatedat": "_ko-cases-list__header--updatedat_fyrf4m",
    "ko-cases-list__header--lastcompletedat": "_ko-cases-list__header--lastcompletedat_fyrf4m",
    "ko-cases-list__header--last-update": "_ko-cases-list__header--last-update_fyrf4m",
    "ko-cases-list__header--last-update-by-a-user": "_ko-cases-list__header--last-update-by-a-user_fyrf4m",
    "ko-cases-list__header--last-update-by-requester": "_ko-cases-list__header--last-update-by-requester_fyrf4m",
    "ko-cases-list__header--last-update-by-assignee": "_ko-cases-list__header--last-update-by-assignee_fyrf4m",
    "ko-cases-list__header--oldest-update-by-requester": "_ko-cases-list__header--oldest-update-by-requester_fyrf4m",
    "ko-cases-list__header--sla-name": "_ko-cases-list__header--sla-name_fyrf4m",
    "ko-cases-list__row": "_ko-cases-list__row_fyrf4m",
    "ko-cases-list__row--trashed": "_ko-cases-list__row--trashed_fyrf4m",
    "ko-cases-list__action-button": "_ko-cases-list__action-button_fyrf4m"
  };
});
define("frontend-cp/styles/components/ko-center/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-center": "_ko-center_hiyad",
    "ko-center__contents": "_ko-center__contents_hiyad"
  };
});
define("frontend-cp/styles/components/ko-channel-selector/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-channel-selector": "_ko-channel-selector_1dyy4h",
    "ember-power-select": "_ember-power-select_1dyy4h",
    "ember-power-select-trigger": "_ember-power-select-trigger_1dyy4h",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_1dyy4h",
    "ember-power-select-option": "_ember-power-select-option_1dyy4h",
    "opened": "_opened_1dyy4h",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_1dyy4h"
  };
});
define("frontend-cp/styles/components/ko-checkbox/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-checkbox": "_ko-checkbox_19ae5q",
    "t-caption": "_t-caption_19ae5q",
    "ko-checkbox__checkbox": "_ko-checkbox__checkbox_19ae5q",
    "ko-checkbox__checkbox--large": "_ko-checkbox__checkbox--large_19ae5q",
    "ko-checkbox__checkbox--disabled": "_ko-checkbox__checkbox--disabled_19ae5q",
    "ko-checkbox__tick": "_ko-checkbox__tick_19ae5q",
    "ko-checkbox__tick--large": "_ko-checkbox__tick--large_19ae5q",
    "ko-checkbox__label": "_ko-checkbox__label_19ae5q",
    "ko-checkbox__label--disabled": "_ko-checkbox__label--disabled_19ae5q"
  };
});
define("frontend-cp/styles/components/ko-context-modal/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-context-modal__dropdown": "_ko-context-modal__dropdown_xzrcp3",
    "ko-context-modal__container": "_ko-context-modal__container_xzrcp3",
    "ko-context-modal__action": "_ko-context-modal__action_xzrcp3",
    "ko-context-modal__content": "_ko-context-modal__content_xzrcp3",
    "ko-context-modal__header": "_ko-context-modal__header_xzrcp3",
    "ko-context-modal-list": "_ko-context-modal-list_xzrcp3",
    "ko-context-modal-list__item": "_ko-context-modal-list__item_xzrcp3",
    "is-active": "_is-active_xzrcp3",
    "ko-context-modal-list__image": "_ko-context-modal-list__image_xzrcp3"
  };
});
define("frontend-cp/styles/components/ko-date-select/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-date-select__content": "_ko-date-select__content_mru0y7",
    "ember-basic-dropdown--above": "_ember-basic-dropdown--above_mru0y7",
    "ko-date-select__trigger": "_ko-date-select__trigger_mru0y7",
    "ko-date-select__trigger-icon": "_ko-date-select__trigger-icon_mru0y7",
    "ko-date-select__dropdown": "_ko-date-select__dropdown_mru0y7"
  };
});
define("frontend-cp/styles/components/ko-datepicker/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-datepicker": "_ko-datepicker_pcdglo"
  };
});
define("frontend-cp/styles/components/ko-draggable-dropzone/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-draggable-dropzone": "_ko-draggable-dropzone_1et6d3",
    "ko-draggable-dropzone__border": "_ko-draggable-dropzone__border_1et6d3"
  };
});
define("frontend-cp/styles/components/ko-dropdown/container/button/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown_container_button": "_ko-dropdown_container_button_1t1wgx"
  };
});
define("frontend-cp/styles/components/ko-dropdown/container/content/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown-container-content": "_ko-dropdown-container-content_1j2cbw"
  };
});
define("frontend-cp/styles/components/ko-dropdown/container/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown-container": "_ko-dropdown-container_1y6hvv",
    "ko-dropdown__item-chevron": "_ko-dropdown__item-chevron_1y6hvv",
    "focused": "_focused_1y6hvv"
  };
});
define("frontend-cp/styles/components/ko-dropdown/drill-down/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown_drill-down": "_ko-dropdown_drill-down_14yn5c",
    "ember-power-select-trigger": "_ember-power-select-trigger_14yn5c",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_14yn5c",
    "i-chevron-large-left": "_i-chevron-large-left_14yn5c",
    "i-chevron-large-right": "_i-chevron-large-right_14yn5c",
    "ember-power-select-option": "_ember-power-select-option_14yn5c"
  };
});
define("frontend-cp/styles/components/ko-dropdown/list/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown_list": "_ko-dropdown_list_t78gyw",
    "ko-dropdown_list__item": "_ko-dropdown_list__item_t78gyw",
    "t-caption": "_t-caption_t78gyw"
  };
});
define("frontend-cp/styles/components/ko-dropdown/select/button/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-dropdown_select_button": "_ko-dropdown_select_button_debhsr",
    "ko-dropdown-select__icon": "_ko-dropdown-select__icon_debhsr"
  };
});
define("frontend-cp/styles/components/ko-editable-text/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "editable-text": "_editable-text_1y120m",
    "error": "_error_1y120m",
    "editable-text__input-field": "_editable-text__input-field_1y120m",
    "editable-text__input": "_editable-text__input_1y120m",
    "editable-text__text": "_editable-text__text_1y120m",
    "editable-text__pencil": "_editable-text__pencil_1y120m",
    "editable-text__text--pusher-edited": "_editable-text__text--pusher-edited_1y120m",
    "editable-text__text--edited": "_editable-text__text--edited_1y120m",
    "editable-text__text--disabled": "_editable-text__text--disabled_1y120m",
    "editable-text--empty": "_editable-text--empty_1y120m"
  };
});
define("frontend-cp/styles/components/ko-editor-modal/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-editor-modal": "_ko-editor-modal_bkeaop",
    "ko-editor-modal__modal": "_ko-editor-modal__modal_bkeaop",
    "ko-editor-modal__title": "_ko-editor-modal__title_bkeaop",
    "ko-editor-modal__overlay": "_ko-editor-modal__overlay_bkeaop",
    "ko-editor-modal__cancel": "_ko-editor-modal__cancel_bkeaop",
    "text-area--clean": "_text-area--clean_bkeaop",
    "box": "_box_bkeaop",
    "ko-editor-modal__submit-message": "_ko-editor-modal__submit-message_bkeaop"
  };
});
define("frontend-cp/styles/components/ko-feed/activity/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-feed_activity": "_ko-feed_activity_l78mv2",
    "ko-feed_activity__border": "_ko-feed_activity__border_l78mv2",
    "ko-feed_activity__contents": "_ko-feed_activity__contents_l78mv2",
    "ko-feed_activity__summary": "_ko-feed_activity__summary_l78mv2"
  };
});
define("frontend-cp/styles/components/ko-feed/item/menu/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-feed_item_menu": "_ko-feed_item_menu_ab8cm2",
    "ko-feed-item_menu__item": "_ko-feed-item_menu__item_ab8cm2"
  };
});
define("frontend-cp/styles/components/ko-feed/item/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-feed_item": "_ko-feed_item_w4pl52",
    "ko-feed_item__image": "_ko-feed_item__image_w4pl52",
    "ko-feed_item__border": "_ko-feed_item__border_w4pl52",
    "ko-feed_item--note": "_ko-feed_item--note_w4pl52",
    "ko-feed_item--post": "_ko-feed_item--post_w4pl52",
    "ko-feed_item__title": "_ko-feed_item__title_w4pl52",
    "ko-feed_item__title--small": "_ko-feed_item__title--small_w4pl52",
    "ko-feed_item__time-ago": "_ko-feed_item__time-ago_w4pl52",
    "ko-feed_item__details": "_ko-feed_item__details_w4pl52",
    "ko-feed_item__attachment": "_ko-feed_item__attachment_w4pl52",
    "ko-feed_item__attachment-name": "_ko-feed_item__attachment-name_w4pl52",
    "ko-feed_item__attachment-size": "_ko-feed_item__attachment-size_w4pl52",
    "ko-feed_item__content": "_ko-feed_item__content_w4pl52",
    "ko-feed_item__cc": "_ko-feed_item__cc_w4pl52",
    "ko-feed_item__cc--collapsed": "_ko-feed_item__cc--collapsed_w4pl52"
  };
});
define("frontend-cp/styles/components/ko-feedback/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-feedback": "_ko-feedback_1ohn3d",
    "ko-feedback__metric": "_ko-feedback__metric_1ohn3d",
    "ko-feedback__caption": "_ko-feedback__caption_1ohn3d"
  };
});
define("frontend-cp/styles/components/ko-file-upload/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-file-upload": "_ko-file-upload_1uhufc"
  };
});
define("frontend-cp/styles/components/ko-file-upload/upload-item/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "upload-item": "_upload-item_elc0de",
    "upload-item__action": "_upload-item__action_elc0de",
    "upload-item__name": "_upload-item__name_elc0de",
    "upload-item__size": "_upload-item__size_elc0de"
  };
});
define("frontend-cp/styles/components/ko-form/buttons/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-form_buttons__loader": "_ko-form_buttons__loader_jj4znm"
  };
});
define("frontend-cp/styles/components/ko-form/field/errors/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-form_field_errors__error": "_ko-form_field_errors__error_gg68ht"
  };
});
define("frontend-cp/styles/components/ko-form/field/help/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-form_field_help": "_ko-form_field_help_w062ez"
  };
});
define("frontend-cp/styles/components/ko-form/field/label/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-form_field_label": "_ko-form_field_label_1h5inq"
  };
});
define("frontend-cp/styles/components/ko-form/field/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-form_field": "_ko-form_field_t1sw1x",
    "ko-form_field--gap": "_ko-form_field--gap_t1sw1x",
    "ko-form_field__error": "_ko-form_field__error_t1sw1x"
  };
});
define("frontend-cp/styles/components/ko-grid-picker/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-grid-picker": "_ko-grid-picker_1vjl2v",
    "ko-grid-picker__cell": "_ko-grid-picker__cell_1vjl2v",
    "selected": "_selected_1vjl2v",
    "ko-grid-picker__row": "_ko-grid-picker__row_1vjl2v",
    "ko-grid-picker__legend": "_ko-grid-picker__legend_1vjl2v",
    "ko-grid-picker__legend-cell": "_ko-grid-picker__legend-cell_1vjl2v"
  };
});
define("frontend-cp/styles/components/ko-identities/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-identities": "_ko-identities_hpf52m",
    "ko-identities__list": "_ko-identities__list_hpf52m",
    "ko-dropdown_list__item-wrapper": "_ko-dropdown_list__item-wrapper_hpf52m",
    "ko-identities__list-item": "_ko-identities__list-item_hpf52m",
    "identities-dropdown_item": "_identities-dropdown_item_hpf52m",
    "i-caution": "_i-caution_hpf52m",
    "ko-identities__create-dropdown": "_ko-identities__create-dropdown_hpf52m",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_hpf52m",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_hpf52m",
    "ember-basic-dropdown": "_ember-basic-dropdown_hpf52m",
    "i-chevron-large-down": "_i-chevron-large-down_hpf52m"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/checkbox/styles.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/components/ko-info-bar/field/date/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_date": "_ko-info-bar_field_date_ids8q",
    "ko-info-bar_field_date__icon": "_ko-info-bar_field_date__icon_ids8q",
    "ko-info-bar_field_date__focus": "_ko-info-bar_field_date__focus_ids8q"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/drill-down/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_drill-down": "_ko-info-bar_field_drill-down_1b2912",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_1b2912"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/drill-down/trigger/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_drill-down": "_ko-info-bar_field_drill-down_1dzxr5",
    "ko-info-bar_field_drill-down_trigger__input": "_ko-info-bar_field_drill-down_trigger__input_1dzxr5",
    "ko-info-bar_field_drill-down__placeholder": "_ko-info-bar_field_drill-down__placeholder_1dzxr5",
    "ko-info-bar_field_drill-down_trigger__icon": "_ko-info-bar_field_drill-down_trigger__icon_1dzxr5"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/file/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-field-file__input": "_ko-field-file__input_1hl0qz"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/multiline-text/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_multiline-text": "_ko-info-bar_multiline-text_or0o9l",
    "ko-field-text__multiline-text": "_ko-field-text__multiline-text_or0o9l"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/search/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_search": "_ko-info-bar_field_search_1nnfhh",
    "ko-info-bar_field_search__loader-icon": "_ko-info-bar_field_search__loader-icon_1nnfhh",
    "ko-info-bar_field_search__icon": "_ko-info-bar_field_search__icon_1nnfhh",
    "dropdown": "_dropdown_1nnfhh",
    "dropdown-menu__item": "_dropdown-menu__item_1nnfhh",
    "dropdown-menu": "_dropdown-menu_1nnfhh",
    "ko-info-bar_field_search__input": "_ko-info-bar_field_search__input_1nnfhh"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/select/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_select": "_ko-info-bar_field_select_e9vorq",
    "ko-info-bar_item--active": "_ko-info-bar_item--active_e9vorq",
    "ember-power-select-trigger": "_ember-power-select-trigger_e9vorq",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_e9vorq",
    "ember-power-select-option": "_ember-power-select-option_e9vorq",
    "ko-info-bar_field_select__arrow": "_ko-info-bar_field_select__arrow_e9vorq",
    "ko-info-bar_field_select__arrow-inset": "_ko-info-bar_field_select__arrow-inset_e9vorq"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/select/trigger/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_select_trigger": "_ko-info-bar_field_select_trigger_18ckof",
    "ko-info-bar_field_select_trigger-input": "_ko-info-bar_field_select_trigger-input_18ckof",
    "ko-info-bar_field_select__placeholder": "_ko-info-bar_field_select__placeholder_18ckof",
    "ko-info-bar_field_select__icon": "_ko-info-bar_field_select__icon_18ckof"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/tags/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_tags": "_ko-info-bar_field_tags_kda81b"
  };
});
define("frontend-cp/styles/components/ko-info-bar/field/text/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_field_text": "_ko-info-bar_field_text_1qitd3",
    "ko-field-text__input": "_ko-field-text__input_1qitd3"
  };
});
define("frontend-cp/styles/components/ko-info-bar/item/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_item": "_ko-info-bar_item_a3c0ye",
    "ko-info-bar_item--no-hover": "_ko-info-bar_item--no-hover_a3c0ye",
    "ko-info-bar_item--no-separator": "_ko-info-bar_item--no-separator_a3c0ye",
    "ko-info-bar_item--active": "_ko-info-bar_item--active_a3c0ye",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_a3c0ye",
    "ko-info-bar_item--edited": "_ko-info-bar_item--edited_a3c0ye",
    "ko-info-bar_item--pusher-edited": "_ko-info-bar_item--pusher-edited_a3c0ye",
    "ko-info-bar_item--error": "_ko-info-bar_item--error_a3c0ye",
    "ko-info-bar_item--disabled": "_ko-info-bar_item--disabled_a3c0ye",
    "ko-info-bar_item__header": "_ko-info-bar_item__header_a3c0ye",
    "ko-info-bar_item__content": "_ko-info-bar_item__content_a3c0ye",
    "is-sticky": "_is-sticky_a3c0ye"
  };
});
define("frontend-cp/styles/components/ko-info-bar/metadata/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-info-bar_metadata": "_ko-info-bar_metadata_1nyhck"
  };
});
define("frontend-cp/styles/components/ko-info-bar/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "info-bar": "_info-bar_1ylhd6",
    "sticky": "_sticky_1ylhd6",
    "info-bar__heading": "_info-bar__heading_1ylhd6"
  };
});
define("frontend-cp/styles/components/ko-layout/advanced/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-layout_advanced": "_ko-layout_advanced_106wmq",
    "ko-layout_advanced__heading": "_ko-layout_advanced__heading_106wmq",
    "ko-layout_advanced__content": "_ko-layout_advanced__content_106wmq",
    "ko-layout_advanced__main": "_ko-layout_advanced__main_106wmq",
    "ko-layout_advanced__sidebar": "_ko-layout_advanced__sidebar_106wmq",
    "ko-layout_advanced__reply-area": "_ko-layout_advanced__reply-area_106wmq",
    "ko-layout_advanced__timeline-area": "_ko-layout_advanced__timeline-area_106wmq",
    "ko-layout_advanced_heading": "_ko-layout_advanced_heading_106wmq",
    "ko-layout_advanced_heading__left": "_ko-layout_advanced_heading__left_106wmq",
    "ko-layout_advanced_heading__right": "_ko-layout_advanced_heading__right_106wmq",
    "ko-layout_advanced_section": "_ko-layout_advanced_section_106wmq",
    "ko-layout_advanced_section__image": "_ko-layout_advanced_section__image_106wmq",
    "ko-layout_advanced_section__img": "_ko-layout_advanced_section__img_106wmq",
    "ko-layout_advanced_section__body": "_ko-layout_advanced_section__body_106wmq",
    "ko-layout_advanced_section__subject": "_ko-layout_advanced_section__subject_106wmq",
    "ko-layout_advanced_section__subtitle": "_ko-layout_advanced_section__subtitle_106wmq",
    "ko-layout_advanced_editor": "_ko-layout_advanced_editor_106wmq",
    "ko-layout_advanced_editor__placeholder": "_ko-layout_advanced_editor__placeholder_106wmq",
    "ko-layout_advanced_editor__action": "_ko-layout_advanced_editor__action_106wmq",
    "ko-layout_advanced__button-loading": "_ko-layout_advanced__button-loading_106wmq",
    "ko-layout_advanced__editor-overlay": "_ko-layout_advanced__editor-overlay_106wmq",
    "ko-layout_advanced__note-reminder": "_ko-layout_advanced__note-reminder_106wmq",
    "ko-layout_advanced_editable-text--readonly": "_ko-layout_advanced_editable-text--readonly_106wmq",
    "editable-text__text--disabled": "_editable-text__text--disabled_106wmq",
    "ko-layout_advanced--is-new": "_ko-layout_advanced--is-new_106wmq",
    "ko-text-editor--reply": "_ko-text-editor--reply_106wmq",
    "ko-text-editor--note": "_ko-text-editor--note_106wmq"
  };
});
define("frontend-cp/styles/components/ko-loader/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-loader": "_ko-loader_125ert",
    "ko-loader__item": "_ko-loader__item_125ert",
    "ko-loader__state1": "_ko-loader__state1_125ert",
    "ko-loader__state2": "_ko-loader__state2_125ert",
    "ko-loader__state3": "_ko-loader__state3_125ert",
    "ko-loader--large": "_ko-loader--large_125ert"
  };
});
define("frontend-cp/styles/components/ko-modal/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-modal__overlay": "_ko-modal__overlay_15c5qc",
    "ko-modal__content": "_ko-modal__content_15c5qc",
    "ko-modal__content__main": "_ko-modal__content__main_15c5qc",
    "ko-modal__content__header": "_ko-modal__content__header_15c5qc",
    "ko-modal__content__footer": "_ko-modal__content__footer_15c5qc"
  };
});
define("frontend-cp/styles/components/ko-notification-badge/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-notification-badge": "_ko-notification-badge_1xy6ry"
  };
});
define("frontend-cp/styles/components/ko-organisation-action-menu/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-organisation-action-menu": "_ko-organisation-action-menu_15xj0c",
    "ko-dropdown-select__content": "_ko-dropdown-select__content_15xj0c",
    "menu-active": "_menu-active_15xj0c",
    "button--dropdown": "_button--dropdown_15xj0c"
  };
});
define("frontend-cp/styles/components/ko-pagination/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-pagination": "_ko-pagination_1qbale",
    "ko-pagination__container": "_ko-pagination__container_1qbale",
    "ko-pagination__pageNumber": "_ko-pagination__pageNumber_1qbale",
    "ko-pagination__pageCount": "_ko-pagination__pageCount_1qbale",
    "ko-pagination__first": "_ko-pagination__first_1qbale",
    "ko-pagination__last": "_ko-pagination__last_1qbale",
    "ko-pagination__next": "_ko-pagination__next_1qbale",
    "ko-pagination__previous": "_ko-pagination__previous_1qbale",
    "ko-pagination__first--available": "_ko-pagination__first--available_1qbale",
    "ko-pagination__last--available": "_ko-pagination__last--available_1qbale",
    "ko-pagination__previous--available": "_ko-pagination__previous--available_1qbale",
    "ko-pagination__next--available": "_ko-pagination__next--available_1qbale"
  };
});
define("frontend-cp/styles/components/ko-people-popover/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-people-popover__input-error": "_ko-people-popover__input-error_19i5a0",
    "ko-people-popover__selected-list": "_ko-people-popover__selected-list_19i5a0",
    "ko-people-popover__selected-list-item": "_ko-people-popover__selected-list-item_19i5a0",
    "ko-people-popover__cross": "_ko-people-popover__cross_19i5a0",
    "ko-people-popover__caption": "_ko-people-popover__caption_19i5a0",
    "ko-people-popover__org-caption": "_ko-people-popover__org-caption_19i5a0",
    "ko-people-popover__email-caption": "_ko-people-popover__email-caption_19i5a0",
    "ko-people-popover__filtered-list": "_ko-people-popover__filtered-list_19i5a0",
    "ko-people-popover__filtered-list-item": "_ko-people-popover__filtered-list-item_19i5a0",
    "ko-people-popover__not-found": "_ko-people-popover__not-found_19i5a0",
    "ko-people-popover__image": "_ko-people-popover__image_19i5a0",
    "ko-people-popover__input": "_ko-people-popover__input_19i5a0",
    "ko-people-popover__button-space": "_ko-people-popover__button-space_19i5a0",
    "ko-people-popover__button": "_ko-people-popover__button_19i5a0",
    "ko-people-popover__subtitle": "_ko-people-popover__subtitle_19i5a0",
    "ko-people-popover__loader-block": "_ko-people-popover__loader-block_19i5a0",
    "ko-people-popover__loader": "_ko-people-popover__loader_19i5a0",
    "ko-people-popover__selected-item-name": "_ko-people-popover__selected-item-name_19i5a0"
  };
});
define("frontend-cp/styles/components/ko-predicate-builder/rule/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-predicate-builder_rule": "_ko-predicate-builder_rule_1bzmu0",
    "ko-predicate-builder_rule__remove": "_ko-predicate-builder_rule__remove_1bzmu0",
    "ko-predicate-builder_rule__label": "_ko-predicate-builder_rule__label_1bzmu0",
    "ko-predicate-builder__tags-input": "_ko-predicate-builder__tags-input_1bzmu0",
    "ko-tags": "_ko-tags_1bzmu0",
    "ko-tags__input": "_ko-tags__input_1bzmu0",
    "ko-tags__item": "_ko-tags__item_1bzmu0",
    "ko-tags__action": "_ko-tags__action_1bzmu0",
    "ko-predicate-builder_rule__item": "_ko-predicate-builder_rule__item_1bzmu0",
    "ko-predicate-builder_rule__input": "_ko-predicate-builder_rule__input_1bzmu0",
    "ko-predicate-builder_rule__actions": "_ko-predicate-builder_rule__actions_1bzmu0"
  };
});
define("frontend-cp/styles/components/ko-predicate-builder/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-predicate-builder": "_ko-predicate-builder_sjf0gb",
    "ko-predicate-builder__label": "_ko-predicate-builder__label_sjf0gb",
    "ko-predicate-builder__remove": "_ko-predicate-builder__remove_sjf0gb",
    "ko-predicate-builder__add": "_ko-predicate-builder__add_sjf0gb",
    "ko-predicate-builder__new": "_ko-predicate-builder__new_sjf0gb"
  };
});
define("frontend-cp/styles/components/ko-radio/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-radio": "_ko-radio_1xo6ef",
    "ko-radio__container": "_ko-radio__container_1xo6ef",
    "ko-radio__radio": "_ko-radio__radio_1xo6ef",
    "ko-radio__label": "_ko-radio__label_1xo6ef"
  };
});
define("frontend-cp/styles/components/ko-recent-cases/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-recent-cases": "_ko-recent-cases_12fzrz",
    "ko-recent-cases__heading": "_ko-recent-cases__heading_12fzrz",
    "ko-recent-cases__item": "_ko-recent-cases__item_12fzrz",
    "ko-recent-case__missing": "_ko-recent-case__missing_12fzrz"
  };
});
define("frontend-cp/styles/components/ko-reorderable-crud-list/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-reorderable-crud-list__item": "_ko-reorderable-crud-list__item_15wmaj",
    "ko-reorderable-crud-list-actions": "_ko-reorderable-crud-list-actions_15wmaj",
    "ko-reorderable-crud-list-actions__item": "_ko-reorderable-crud-list-actions__item_15wmaj"
  };
});
define("frontend-cp/styles/components/ko-reorderable-list/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-reorderable-list": "_ko-reorderable-list_ol7rc2",
    "ko-reorderable-list-item": "_ko-reorderable-list-item_ol7rc2",
    "sortable-item": "_sortable-item_ol7rc2",
    "is-dragging": "_is-dragging_ol7rc2",
    "ko-reorderable-list_item_handle": "_ko-reorderable-list_item_handle_ol7rc2",
    "ember-testing": "_ember-testing_ol7rc2"
  };
});
define("frontend-cp/styles/components/ko-select/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-select": "_ko-select_1wbafr",
    "ko-select--medium": "_ko-select--medium_1wbafr",
    "ko-select__select": "_ko-select__select_1wbafr",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_1wbafr",
    "ember-power-select-placeholder": "_ember-power-select-placeholder_1wbafr",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_1wbafr",
    "ember-power-select-options": "_ember-power-select-options_1wbafr",
    "ember-power-select-option": "_ember-power-select-option_1wbafr",
    "ember-power-select-status-icon": "_ember-power-select-status-icon_1wbafr",
    "ko-select__select-trigger": "_ko-select__select-trigger_1wbafr"
  };
});
define("frontend-cp/styles/components/ko-session-widgets/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-session-widgets": "_ko-session-widgets_1qt7sd",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_1qt7sd",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_1qt7sd",
    "i-chevron-large-down": "_i-chevron-large-down_1qt7sd",
    "ko-session-widgets__avatar-container": "_ko-session-widgets__avatar-container_1qt7sd",
    "ko-session-widget_user-name": "_ko-session-widget_user-name_1qt7sd",
    "ko-session-widgets_user-dropdown": "_ko-session-widgets_user-dropdown_1qt7sd"
  };
});
define("frontend-cp/styles/components/ko-sidebar/item/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "sidebar__title": "_sidebar__title_wnofvy"
  };
});
define("frontend-cp/styles/components/ko-sidebar/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-sidebar": "_ko-sidebar_215wyc",
    "ko-sidebar--no-border": "_ko-sidebar--no-border_215wyc",
    "sidebar__link": "_sidebar__link_215wyc",
    "disabled": "_disabled_215wyc",
    "sidebar__value": "_sidebar__value_215wyc",
    "active": "_active_215wyc",
    "ember-transitioning-out": "_ember-transitioning-out_215wyc",
    "ember-transitioning-in": "_ember-transitioning-in_215wyc",
    "sidebar__icon": "_sidebar__icon_215wyc",
    "sidebar__title": "_sidebar__title_215wyc",
    "sidebar__separator": "_sidebar__separator_215wyc",
    "sidebar__first-item": "_sidebar__first-item_215wyc"
  };
});
define("frontend-cp/styles/components/ko-simple-box-row/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-simple-box-row": "_ko-simple-box-row_me48y7"
  };
});
define("frontend-cp/styles/components/ko-simple-list/cell/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-simple-list_cell": "_ko-simple-list_cell_ivy246"
  };
});
define("frontend-cp/styles/components/ko-simple-list/row/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-simple-list_row": "_ko-simple-list_row_115cpi",
    "ko-simple-list__actions": "_ko-simple-list__actions_115cpi",
    "ko-simple-list--actionable": "_ko-simple-list--actionable_115cpi"
  };
});
define("frontend-cp/styles/components/ko-simple-list/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-simple-list": "_ko-simple-list_14gd1b",
    "ko-simple-list__header": "_ko-simple-list__header_14gd1b"
  };
});
define("frontend-cp/styles/components/ko-sla/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-sla": "_ko-sla_1cdyjx",
    "ko-sla--good": "_ko-sla--good_1cdyjx",
    "ko-sla--bad": "_ko-sla--bad_1cdyjx",
    "ko-sla--warning": "_ko-sla--warning_1cdyjx",
    "ko-sla__i": "_ko-sla__i_1cdyjx",
    "ko-sla__metric": "_ko-sla__metric_1cdyjx",
    "ko-sla--open": "_ko-sla--open_1cdyjx",
    "ko-sla__container": "_ko-sla__container_1cdyjx",
    "ko-sla__icon": "_ko-sla__icon_1cdyjx"
  };
});
define("frontend-cp/styles/components/ko-stateful-button/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-stateful-button": "_ko-stateful-button_1v8se3",
    "ko-stateful-button__button-text": "_ko-stateful-button__button-text_1v8se3",
    "ko-stateful-button__button-text--hover": "_ko-stateful-button__button-text--hover_1v8se3",
    "is-active": "_is-active_1v8se3",
    "ko-stateful-button__button-loading": "_ko-stateful-button__button-loading_1v8se3"
  };
});
define("frontend-cp/styles/components/ko-suggest/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-suggest__input": "_ko-suggest__input_17joqv"
  };
});
define("frontend-cp/styles/components/ko-table/cell/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-table_cell": "_ko-table_cell_1i3e8u",
    "ko-table_cell--ellipsis": "_ko-table_cell--ellipsis_1i3e8u"
  };
});
define("frontend-cp/styles/components/ko-table/column/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-table_column": "_ko-table_column_15kgnn",
    "ko-table_column--wrapper": "_ko-table_column--wrapper_15kgnn",
    "ko-table_column--selected": "_ko-table_column--selected_15kgnn"
  };
});
define("frontend-cp/styles/components/ko-table/header/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-table__header": "_ko-table__header_eydoog",
    "ko-table__header__column--selectable": "_ko-table__header__column--selectable_eydoog",
    "ko-table__header__column--avatar": "_ko-table__header__column--avatar_eydoog"
  };
});
define("frontend-cp/styles/components/ko-table/row/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-table_row": "_ko-table_row_1bj5cb",
    "selected": "_selected_1bj5cb"
  };
});
define("frontend-cp/styles/components/ko-table/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-table": "_ko-table_158vw0",
    "ko-table__header__column--selectable": "_ko-table__header__column--selectable_158vw0",
    "ko-table__header--defualt-width": "_ko-table__header--defualt-width_158vw0"
  };
});
define("frontend-cp/styles/components/ko-tags/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-tags": "_ko-tags_1h65cq",
    "ko-tags__root": "_ko-tags__root_1h65cq",
    "dropdown-menu": "_dropdown-menu_1h65cq",
    "ko-tags__item": "_ko-tags__item_1h65cq",
    "ko-tags__item--new": "_ko-tags__item--new_1h65cq",
    "ko-tags__item--pusher": "_ko-tags__item--pusher_1h65cq",
    "ko-tags__item--disabled": "_ko-tags__item--disabled_1h65cq",
    "ko-tags__input": "_ko-tags__input_1h65cq",
    "ko-tags__action": "_ko-tags__action_1h65cq",
    "ko-tags__new": "_ko-tags__new_1h65cq",
    "ko-tags__new-label": "_ko-tags__new-label_1h65cq"
  };
});
define("frontend-cp/styles/components/ko-tags-input/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-tags-input": "_ko-tags-input_8yhgkk",
    "ko-tags": "_ko-tags_8yhgkk",
    "ko-tags__input": "_ko-tags__input_8yhgkk",
    "ko-tags__item": "_ko-tags__item_8yhgkk",
    "ko-tags__title": "_ko-tags__title_8yhgkk",
    "ko-tags__action": "_ko-tags__action_8yhgkk"
  };
});
define("frontend-cp/styles/components/ko-text-editor/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-text-editor": "_ko-text-editor_1mxvia",
    "is-errored": "_is-errored_1mxvia",
    "ko-text-editor__placeholder": "_ko-text-editor__placeholder_1mxvia",
    "ko-text-editor-header": "_ko-text-editor-header_1mxvia",
    "ko-text-editor-header-group": "_ko-text-editor-header-group_1mxvia",
    "ember-power-select-trigger": "_ember-power-select-trigger_1mxvia",
    "ember-power-select": "_ember-power-select_1mxvia",
    "ko-text-editor-header-group--single": "_ko-text-editor-header-group--single_1mxvia",
    "ko-text-editor-header__spacer": "_ko-text-editor-header__spacer_1mxvia",
    "ko-text-editor-header-group__item": "_ko-text-editor-header-group__item_1mxvia",
    "ko-text-editor-header-group__item--single": "_ko-text-editor-header-group__item--single_1mxvia",
    "ko-text-editor__right-group": "_ko-text-editor__right-group_1mxvia",
    "ko-text-editor__right-group-item": "_ko-text-editor__right-group-item_1mxvia",
    "ko-text-editor__right-group-item-icon": "_ko-text-editor__right-group-item-icon_1mxvia",
    "ko-text-editor-header-group__item-text": "_ko-text-editor-header-group__item-text_1mxvia",
    "ko-text-editor-header-group__users-item--active": "_ko-text-editor-header-group__users-item--active_1mxvia",
    "ko-dropdown-container": "_ko-dropdown-container_1mxvia",
    "ko-text-editor__dropzone-and-editor-container": "_ko-text-editor__dropzone-and-editor-container_1mxvia",
    "ko-text-editor__dropzone-and-editor-container--small": "_ko-text-editor__dropzone-and-editor-container--small_1mxvia",
    "ko-text-editor__image-upload": "_ko-text-editor__image-upload_1mxvia",
    "ko-text-editor__file-upload": "_ko-text-editor__file-upload_1mxvia",
    "ko-text-editor__text-area": "_ko-text-editor__text-area_1mxvia",
    "text-area--clean": "_text-area--clean_1mxvia",
    "ql-editor": "_ql-editor_1mxvia",
    "ko-text-editor__text-area--small": "_ko-text-editor__text-area--small_1mxvia",
    "ko-text-editor-header-group__item--active": "_ko-text-editor-header-group__item--active_1mxvia",
    "ql-image-tooltip": "_ql-image-tooltip_1mxvia",
    "input": "_input_1mxvia",
    "preview": "_preview_1mxvia",
    "ql-link-tooltip": "_ql-link-tooltip_1mxvia",
    "done": "_done_1mxvia",
    "change": "_change_1mxvia",
    "editing": "_editing_1mxvia",
    "url": "_url_1mxvia",
    "remove": "_remove_1mxvia",
    "ql-multi-cursor": "_ql-multi-cursor_1mxvia",
    "cursor": "_cursor_1mxvia",
    "cursor-flag": "_cursor-flag_1mxvia",
    "cursor-name": "_cursor-name_1mxvia",
    "cursor-caret": "_cursor-caret_1mxvia",
    "hidden": "_hidden_1mxvia",
    "top": "_top_1mxvia",
    "right": "_right_1mxvia",
    "ql-paste-manager": "_ql-paste-manager_1mxvia",
    "ql-toolbar": "_ql-toolbar_1mxvia",
    "ql-tooltip": "_ql-tooltip_1mxvia",
    "ql-container": "_ql-container_1mxvia",
    "ql-ie-9": "_ql-ie-9_1mxvia",
    "ql-ie-10": "_ql-ie-10_1mxvia",
    "ql-snow": "_ql-snow_1mxvia",
    "insert": "_insert_1mxvia",
    "cursor-triangle": "_cursor-triangle_1mxvia",
    "left": "_left_1mxvia",
    "bottom": "_bottom_1mxvia",
    "ql-format-group": "_ql-format-group_1mxvia",
    "ql-format-separator": "_ql-format-separator_1mxvia",
    "ql-format-button": "_ql-format-button_1mxvia",
    "ql-picker": "_ql-picker_1mxvia",
    "ql-picker-label": "_ql-picker-label_1mxvia",
    "ql-active": "_ql-active_1mxvia",
    "ql-picker-options": "_ql-picker-options_1mxvia",
    "ql-picker-item": "_ql-picker-item_1mxvia",
    "ql-selected": "_ql-selected_1mxvia",
    "ql-expanded": "_ql-expanded_1mxvia",
    "ql-color-picker": "_ql-color-picker_1mxvia",
    "ql-primary-color": "_ql-primary-color_1mxvia",
    "ql-font": "_ql-font_1mxvia",
    "ql-size": "_ql-size_1mxvia",
    "ql-align": "_ql-align_1mxvia",
    "ios": "_ios_1mxvia",
    "ql-bold": "_ql-bold_1mxvia",
    "ql-italic": "_ql-italic_1mxvia",
    "ql-link": "_ql-link_1mxvia",
    "ql-image": "_ql-image_1mxvia",
    "ql-attachment": "_ql-attachment_1mxvia",
    "ql-cc": "_ql-cc_1mxvia",
    "ql-billing": "_ql-billing_1mxvia",
    "ql-list": "_ql-list_1mxvia",
    "ql-bullet": "_ql-bullet_1mxvia",
    "ql-authorship": "_ql-authorship_1mxvia"
  };
});
define("frontend-cp/styles/components/ko-timeline/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-timeline__dropdowns": "_ko-timeline__dropdowns_plxxgl",
    "ko-timeline__sort": "_ko-timeline__sort_plxxgl",
    "ko-timeline__filter": "_ko-timeline__filter_plxxgl",
    "ko-timeline__loader": "_ko-timeline__loader_plxxgl",
    "ko-timeline__feed": "_ko-timeline__feed_plxxgl"
  };
});
define("frontend-cp/styles/components/ko-toast/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-toast": "_ko-toast_1708i8",
    "ko-toast__container": "_ko-toast__container_1708i8",
    "ko-toast__container--dismissable": "_ko-toast__container--dismissable_1708i8",
    "ko-toast__container--multiline": "_ko-toast__container--multiline_1708i8",
    "ko-toast__container--error": "_ko-toast__container--error_1708i8",
    "ko-toast__container--warning": "_ko-toast__container--warning_1708i8",
    "ko-toast__container--info": "_ko-toast__container--info_1708i8",
    "ko-toast__container--success": "_ko-toast__container--success_1708i8",
    "ko-toast--add": "_ko-toast--add_1708i8",
    "ko-toast--add-active": "_ko-toast--add-active_1708i8",
    "ko-toast--remove": "_ko-toast--remove_1708i8",
    "ko-toast--remove-active": "_ko-toast--remove-active_1708i8",
    "ko-toast__close": "_ko-toast__close_1708i8",
    "ko-toast__icon": "_ko-toast__icon_1708i8",
    "ko-toast__title": "_ko-toast__title_1708i8",
    "ko-toast__body": "_ko-toast__body_1708i8"
  };
});
define("frontend-cp/styles/components/ko-toggle/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-toggle__container": "_ko-toggle__container_1rik4f",
    "ko-toggle__toggle": "_ko-toggle__toggle_1rik4f",
    "ko-toggle__toggle--activated": "_ko-toggle__toggle--activated_1rik4f",
    "ko-toggle__toggle--micro": "_ko-toggle__toggle--micro_1rik4f",
    "ko-toggle__label": "_ko-toggle__label_1rik4f"
  };
});
define("frontend-cp/styles/components/ko-universal-search/entry/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-universal-search_entry": "_ko-universal-search_entry_17tgd8"
  };
});
define("frontend-cp/styles/components/ko-universal-search/result/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-universal-search_result": "_ko-universal-search_result_1ti20m",
    "is-active": "_is-active_1ti20m",
    "universal-search_result__icon": "_universal-search_result__icon_1ti20m",
    "universal-search_result__action": "_universal-search_result__action_1ti20m",
    "universal-search_result__content": "_universal-search_result__content_1ti20m"
  };
});
define("frontend-cp/styles/components/ko-universal-search/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-universal-search": "_ko-universal-search_3orawg",
    "ko-universal-search__overlay": "_ko-universal-search__overlay_3orawg",
    "ko-universal-search__loader": "_ko-universal-search__loader_3orawg",
    "universal-search__action": "_universal-search__action_3orawg",
    "universal-search__icon": "_universal-search__icon_3orawg",
    "universal-search__input": "_universal-search__input_3orawg",
    "universal-search__content": "_universal-search__content_3orawg",
    "universal-search__results": "_universal-search__results_3orawg",
    "universal-search__preview": "_universal-search__preview_3orawg"
  };
});
define("frontend-cp/styles/components/ko-user-action-menu/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-user-action-menu__dropdown": "_ko-user-action-menu__dropdown_168lze",
    "button--dropdown": "_button--dropdown_168lze",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_168lze",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_168lze"
  };
});
define("frontend-cp/styles/login/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "login": "_login_rpo5s7",
    "login__box": "_login__box_rpo5s7",
    "login__header": "_login__header_rpo5s7",
    "login__header--reset": "_login__header--reset_rpo5s7",
    "login__image": "_login__image_rpo5s7",
    "login__input": "_login__input_rpo5s7",
    "login__actions": "_login__actions_rpo5s7",
    "login-form": "_login-form_rpo5s7",
    "login-form__mask": "_login-form__mask_rpo5s7",
    "login-form__content": "_login-form__content_rpo5s7",
    "login-form__fields-container-top": "_login-form__fields-container-top_rpo5s7",
    "login-form__fields-container-bottom": "_login-form__fields-container-bottom_rpo5s7",
    "login-form__wrapper": "_login-form__wrapper_rpo5s7",
    "login-form__container": "_login-form__container_rpo5s7",
    "u-slide": "_u-slide_rpo5s7",
    "login-form__form": "_login-form__form_rpo5s7",
    "login-form__reset-form": "_login-form__reset-form_rpo5s7",
    "session__notifications": "_session__notifications_rpo5s7",
    "login-form__content--animate": "_login-form__content--animate_rpo5s7",
    "login-form__content-down": "_login-form__content-down_rpo5s7"
  };
});
define("frontend-cp/styles/session/admin/manage/case-fields/index/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-admin_case-fields_select-type__icon": "_ko-admin_case-fields_select-type__icon_10dyfz"
  };
});
define("frontend-cp/styles/session/admin/styles.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/session/agent/cases/index/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ko-session-agent-cases-index": "_ko-session-agent-cases-index_153d84",
    "ko-session-agent-cases-index__sidebar": "_ko-session-agent-cases-index__sidebar_153d84",
    "liquid-child": "_liquid-child_153d84",
    "ko-session-agent-cases-index__content": "_ko-session-agent-cases-index__content_153d84",
    "ko-session-agent-cases-index__pagination": "_ko-session-agent-cases-index__pagination_153d84",
    "suspended-messages-section__delete-all": "_suspended-messages-section__delete-all_153d84",
    "suspended-message-modal__header-text": "_suspended-message-modal__header-text_153d84",
    "suspended-message-modal__footer": "_suspended-message-modal__footer_153d84",
    "suspended-message-modal__button": "_suspended-message-modal__button_153d84",
    "suspended-message-modal__table": "_suspended-message-modal__table_153d84",
    "suspended-message-modal__text": "_suspended-message-modal__text_153d84"
  };
});
define("frontend-cp/styles/session/styles.scss", ["exports"], function (exports) {
  exports["default"] = {
    "session_outlet-container": "_session_outlet-container_qkvl5m"
  };
});
define("frontend-cp/styles/styles/_base.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/app/styles/app.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/app.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ember-power-select-search": "_ember-power-select-search_1exswg"
  };
});
define("frontend-cp/styles/styles/development/_environment.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/elements/_button.scss", ["exports"], function (exports) {
  exports["default"] = {
    "button": "_button_1cebuu",
    "disabled": "_disabled_1cebuu",
    "button--default": "_button--default_1cebuu",
    "button--action": "_button--action_1cebuu",
    "button--primary": "_button--primary_1cebuu",
    "button--highlight": "_button--highlight_1cebuu",
    "button--alert": "_button--alert_1cebuu",
    "button--twitter": "_button--twitter_1cebuu",
    "button--facebook": "_button--facebook_1cebuu",
    "button-split": "_button-split_1cebuu",
    "button-split__action": "_button-split__action_1cebuu",
    "button-group": "_button-group_1cebuu",
    "button-group__item": "_button-group__item_1cebuu",
    "is-active": "_is-active_1cebuu",
    "button-naked": "_button-naked_1cebuu"
  };
});
define("frontend-cp/styles/styles/elements/ember-cli-sticky.scss", ["exports"], function (exports) {
  exports["default"] = {
    "sticky": "_sticky_2s141u"
  };
});
define("frontend-cp/styles/styles/elements/ember-power-select.scss", ["exports"], function (exports) {
  exports["default"] = {
    "ember-power-select-wrapper--ko": "_ember-power-select-wrapper--ko_smjy6k",
    "ember-basic-dropdown-trigger": "_ember-basic-dropdown-trigger_smjy6k",
    "ember-power-select-placeholder": "_ember-power-select-placeholder_smjy6k",
    "ember-power-select-dropdown": "_ember-power-select-dropdown_smjy6k",
    "ember-basic-dropdown-content": "_ember-basic-dropdown-content_smjy6k",
    "ember-power-select-options": "_ember-power-select-options_smjy6k",
    "ember-power-select-status-icon": "_ember-power-select-status-icon_smjy6k",
    "ember-power-select-wrapper--size-medium": "_ember-power-select-wrapper--size-medium_smjy6k",
    "ember-power-select": "_ember-power-select_smjy6k"
  };
});
define("frontend-cp/styles/styles/elements/form/_input.scss", ["exports"], function (exports) {
  exports["default"] = {
    "error": "_error_1i0qz1",
    "has-icon": "_has-icon_1i0qz1"
  };
});
define("frontend-cp/styles/styles/elements/form/_text-area.scss", ["exports"], function (exports) {
  exports["default"] = {
    "text-area": "_text-area_7nmsg7",
    "text-area--clean": "_text-area--clean_7nmsg7",
    "text-area__counter": "_text-area__counter_7nmsg7"
  };
});
define("frontend-cp/styles/styles/elements/form/_text.scss", ["exports"], function (exports) {
  exports["default"] = {
    "input": "_input_18gogp",
    "input-text": "_input-text_18gogp",
    "input-text-area-wrapper": "_input-text-area-wrapper_18gogp",
    "input-text--alone": "_input-text--alone_18gogp",
    "input-text--full": "_input-text--full_18gogp"
  };
});
define("frontend-cp/styles/styles/modules/_header.scss", ["exports"], function (exports) {
  exports["default"] = {
    "header": "_header_44so2q",
    "header__title": "_header__title_44so2q",
    "header__subtitle": "_header__subtitle_44so2q",
    "header__image": "_header__image_44so2q"
  };
});
define("frontend-cp/styles/styles/modules/_nav.scss", ["exports"], function (exports) {
  exports["default"] = {
    "nav": "_nav_nh8uec",
    "nav--disabled": "_nav--disabled_nh8uec",
    "nav__items": "_nav__items_nh8uec",
    "nav__item": "_nav__item_nh8uec",
    "active": "_active_nh8uec",
    "nav__image": "_nav__image_nh8uec",
    "nav-main": "_nav-main_nh8uec",
    "nav-main__item": "_nav-main__item_nh8uec",
    "nav-secondary": "_nav-secondary_nh8uec",
    "nav-secondary__container": "_nav-secondary__container_nh8uec",
    "nav-secondary__content": "_nav-secondary__content_nh8uec",
    "nav-secondary__sidebar": "_nav-secondary__sidebar_nh8uec",
    "nav-secondary__sidebar--hidden": "_nav-secondary__sidebar--hidden_nh8uec",
    "nav-tabs": "_nav-tabs_nh8uec",
    "nav-tabs__item": "_nav-tabs__item_nh8uec",
    "nav-tabs__label": "_nav-tabs__label_nh8uec",
    "nav-tabs__close": "_nav-tabs__close_nh8uec"
  };
});
define("frontend-cp/styles/styles/objects/_arrow.scss", ["exports"], function (exports) {
  exports["default"] = {
    "arrow": "_arrow_vj61kb"
  };
});
define("frontend-cp/styles/styles/objects/_box.scss", ["exports"], function (exports) {
  exports["default"] = {
    "box": "_box_1x8p61",
    "box-container": "_box-container_1x8p61"
  };
});
define("frontend-cp/styles/styles/objects/_content.scss", ["exports"], function (exports) {
  exports["default"] = {
    "content__main": "_content__main_w59yez"
  };
});
define("frontend-cp/styles/styles/objects/_dropdown-menu.scss", ["exports"], function (exports) {
  exports["default"] = {
    "dropdown": "_dropdown_1ufeus",
    "dropdown-menu": "_dropdown-menu_1ufeus",
    "dropdown-menu__item": "_dropdown-menu__item_1ufeus"
  };
});
define("frontend-cp/styles/styles/objects/_headings.scss", ["exports"], function (exports) {
  exports["default"] = {
    "heading": "_heading_3vr1qh",
    "subheading": "_subheading_3vr1qh"
  };
});
define("frontend-cp/styles/styles/partials/_animation.scss", ["exports"], function (exports) {
  exports["default"] = {
    "a-error": "_a-error_etnxia",
    "a-success": "_a-success_etnxia",
    "a-fade-in-out": "_a-fade-in-out_etnxia"
  };
});
define("frontend-cp/styles/styles/partials/_container.scss", ["exports"], function (exports) {
  exports["default"] = {
    "container": "_container_11roft"
  };
});
define("frontend-cp/styles/styles/partials/_cursors.scss", ["exports"], function (exports) {
  exports["default"] = {
    "u-pointer": "_u-pointer_4u5bn1"
  };
});
define("frontend-cp/styles/styles/partials/_flipper.scss", ["exports"], function (exports) {
  exports["default"] = {
    "flip-container": "_flip-container_1om6bi",
    "flip": "_flip_1om6bi",
    "flipper": "_flipper_1om6bi",
    "front": "_front_1om6bi",
    "back": "_back_1om6bi"
  };
});
define("frontend-cp/styles/styles/partials/_icon.scss", ["exports"], function (exports) {
  exports["default"] = {
    "i-after": "_i-after_11qqbb",
    "i-center": "_i-center_11qqbb",
    "i-inherit-lh": "_i-inherit-lh_11qqbb",
    "i-color-grey": "_i-color-grey_11qqbb",
    "i-color-grey--dark": "_i-color-grey--dark_11qqbb",
    "i-color-grey--light": "_i-color-grey--light_11qqbb",
    "i-size-18": "_i-size-18_11qqbb",
    "i-size-20": "_i-size-20_11qqbb",
    "i-size-14": "_i-size-14_11qqbb",
    "i-size-11": "_i-size-11_11qqbb",
    "i-danger-solid": "_i-danger-solid_11qqbb",
    "i-png-TEXT": "_i-png-TEXT_11qqbb",
    "i-png-TEXTAREA": "_i-png-TEXTAREA_11qqbb",
    "i-png-RADIO": "_i-png-RADIO_11qqbb",
    "i-png-SELECT": "_i-png-SELECT_11qqbb",
    "i-png-CHECKBOX": "_i-png-CHECKBOX_11qqbb",
    "i-png-NUMERIC": "_i-png-NUMERIC_11qqbb",
    "i-png-DECIMAL": "_i-png-DECIMAL_11qqbb",
    "i-png-FILE": "_i-png-FILE_11qqbb",
    "i-png-YESNO": "_i-png-YESNO_11qqbb",
    "i-png-CASCADINGSELECT": "_i-png-CASCADINGSELECT_11qqbb",
    "i-png-DATE": "_i-png-DATE_11qqbb",
    "i-png-REGEX": "_i-png-REGEX_11qqbb",
    "i-png-flag-": "_i-png-flag-_11qqbb"
  };
});
define("frontend-cp/styles/styles/partials/_overlay.scss", ["exports"], function (exports) {
  exports["default"] = {
    "overlay": "_overlay_rrm7ta"
  };
});
define("frontend-cp/styles/styles/partials/_typography.scss", ["exports"], function (exports) {
  exports["default"] = {
    "t-caption": "_t-caption_1kzg80",
    "is-active": "_is-active_1kzg80",
    "typography": "_typography_1kzg80"
  };
});
define("frontend-cp/styles/styles/production/_environment.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_brand.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_colors.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_defaults.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_layout.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_spacing.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_tables.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_typography.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/settings/_z-index.scss", ["exports"], function (exports) {
  exports["default"] = {};
});
define("frontend-cp/styles/styles/utilities/_indicators.scss", ["exports"], function (exports) {
  exports["default"] = {
    "u-typing": "_u-typing_zi3c2o",
    "u-typing__item": "_u-typing__item_zi3c2o",
    "u-is-typing": "_u-is-typing_zi3c2o",
    "u-was-typing": "_u-was-typing_zi3c2o",
    "u-is-inactive": "_u-is-inactive_zi3c2o"
  };
});
define("frontend-cp/styles/styles/utilities/_layout.scss", ["exports"], function (exports) {
  exports["default"] = {
    "u-inline-block": "_u-inline-block_gluyug",
    "u-hidden": "_u-hidden_gluyug",
    "u-invisible": "_u-invisible_gluyug",
    "u-visible": "_u-visible_gluyug",
    "u-disable-link": "_u-disable-link_gluyug",
    "u-no-bottom-border": "_u-no-bottom-border_gluyug",
    "u-pos-rel": "_u-pos-rel_gluyug",
    "u-pos-abs": "_u-pos-abs_gluyug",
    "u-v-center": "_u-v-center_gluyug",
    "u-h-center": "_u-h-center_gluyug",
    "u-center": "_u-center_gluyug",
    "u-v-align": "_u-v-align_gluyug",
    "u-v-align-top": "_u-v-align-top_gluyug",
    "u-reset-lh": "_u-reset-lh_gluyug",
    "u-inherit-lh": "_u-inherit-lh_gluyug",
    "u-overflow-scroll": "_u-overflow-scroll_gluyug"
  };
});
define("frontend-cp/styles/styles/utilities/_typography.scss", ["exports"], function (exports) {
  exports["default"] = {
    "t-": "_t-_121pt9",
    "t-small": "_t-small_121pt9",
    "t-base": "_t-base_121pt9",
    "t-naked-link": "_t-naked-link_121pt9",
    "t-bold": "_t-bold_121pt9",
    "t-italic": "_t-italic_121pt9"
  };
});
define("frontend-cp/templates/components/liquid-bind", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "version", ["loc", [null, [6, 15], [6, 22]]]]], [], ["loc", [null, [6, 6], [6, 26]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 9,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["content", "version", ["loc", [null, [8, 6], [8, 20]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 0
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [5, 11], [5, 19]]]]], [], 0, 1, ["loc", [null, [5, 4], [9, 12]]]]],
          locals: ["version"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "attrs.value", ["loc", [null, [2, 28], [2, 39]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [2, 44], [2, 47]]]]], [], []], "outletName", ["subexpr", "@mut", [["get", "attrs.outletName", ["loc", [null, [3, 32], [3, 48]]]]], [], []], "name", "liquid-bind", "renderWhenFalse", true, "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [4, 67], [4, 72]]]]], [], []]], 0, null, ["loc", [null, [2, 2], [11, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 25,
                    "column": 6
                  },
                  "end": {
                    "line": 27,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "yield", [["get", "version", ["loc", [null, [26, 17], [26, 24]]]]], [], ["loc", [null, [26, 8], [26, 28]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["content", "version", ["loc", [null, [28, 8], [28, 22]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [25, 13], [25, 21]]]]], [], 0, 1, ["loc", [null, [25, 6], [29, 14]]]]],
            locals: ["version"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 32,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "attrs.value", ["loc", [null, [21, 30], [21, 41]]]]], [], []], "notify", ["subexpr", "@mut", [["get", "container", ["loc", [null, [21, 49], [21, 58]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [21, 63], [21, 66]]]]], [], []], "outletName", ["subexpr", "@mut", [["get", "attrs.outletName", ["loc", [null, [22, 34], [22, 50]]]]], [], []], "name", "liquid-bind", "renderWhenFalse", true], 0, null, ["loc", [null, [21, 4], [31, 26]]]]],
          locals: ["container"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-container", [], ["id", ["subexpr", "@mut", [["get", "id", ["loc", [null, [14, 9], [14, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [15, 12], [15, 17]]]]], [], []], "growDuration", ["subexpr", "@mut", [["get", "growDuration", ["loc", [null, [16, 19], [16, 31]]]]], [], []], "growPixelsPerSecond", ["subexpr", "@mut", [["get", "growPixelsPerSecond", ["loc", [null, [17, 26], [17, 45]]]]], [], []], "growEasing", ["subexpr", "@mut", [["get", "growEasing", ["loc", [null, [18, 17], [18, 27]]]]], [], []], "enableGrowth", ["subexpr", "@mut", [["get", "enableGrowth", ["loc", [null, [19, 19], [19, 31]]]]], [], []]], 0, null, ["loc", [null, [13, 2], [32, 25]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 34,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-bind.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "containerless", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, 1, ["loc", [null, [1, 0], [33, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("frontend-cp/templates/components/liquid-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 14
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-container.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "yield", [["get", "this", ["loc", [null, [1, 8], [1, 12]]]]], [], ["loc", [null, [1, 0], [1, 14]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("frontend-cp/templates/components/liquid-if", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [5, 6], [5, 15]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "yield", [], ["to", "inverse"], ["loc", [null, [7, 6], [7, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "valueVersion", ["loc", [null, [4, 10], [4, 22]]]]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
          locals: ["valueVersion"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "showFirstBlock", ["loc", [null, [2, 27], [2, 41]]]]], [], []], "name", ["subexpr", "@mut", [["get", "helperName", ["loc", [null, [2, 47], [2, 57]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [3, 27], [3, 30]]]]], [], []], "renderWhenFalse", ["subexpr", "hasBlock", ["inverse"], [], ["loc", [null, [3, 47], [3, 67]]]], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [3, 74], [3, 79]]]]], [], []]], 0, null, ["loc", [null, [2, 2], [9, 22]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["content", "yield", ["loc", [null, [22, 8], [22, 17]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.0.3",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 6
                  },
                  "end": {
                    "line": 25,
                    "column": 6
                  }
                },
                "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
              },
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "yield", [], ["to", "inverse"], ["loc", [null, [24, 8], [24, 30]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 26,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "valueVersion", ["loc", [null, [21, 12], [21, 24]]]]], [], 0, 1, ["loc", [null, [21, 6], [25, 13]]]]],
            locals: ["valueVersion"],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 27,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "showFirstBlock", ["loc", [null, [19, 29], [19, 43]]]]], [], []], "notify", ["subexpr", "@mut", [["get", "container", ["loc", [null, [19, 51], [19, 60]]]]], [], []], "name", ["subexpr", "@mut", [["get", "helperName", ["loc", [null, [19, 66], [19, 76]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [20, 8], [20, 11]]]]], [], []], "renderWhenFalse", ["subexpr", "hasBlock", ["inverse"], [], ["loc", [null, [20, 28], [20, 48]]]]], 0, null, ["loc", [null, [19, 4], [26, 24]]]]],
          locals: ["container"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 28,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-container", [], ["id", ["subexpr", "@mut", [["get", "id", ["loc", [null, [12, 9], [12, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [13, 12], [13, 17]]]]], [], []], "growDuration", ["subexpr", "@mut", [["get", "growDuration", ["loc", [null, [14, 19], [14, 31]]]]], [], []], "growPixelsPerSecond", ["subexpr", "@mut", [["get", "growPixelsPerSecond", ["loc", [null, [15, 26], [15, 45]]]]], [], []], "growEasing", ["subexpr", "@mut", [["get", "growEasing", ["loc", [null, [16, 17], [16, 27]]]]], [], []], "enableGrowth", ["subexpr", "@mut", [["get", "enableGrowth", ["loc", [null, [17, 19], [17, 31]]]]], [], []]], 0, null, ["loc", [null, [11, 2], [27, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-if.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "containerless", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, 1, ["loc", [null, [1, 0], [28, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("frontend-cp/templates/components/liquid-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-modal.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "role", "dialog");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createAttrMorph(element0, 'aria-labelledby');
            morphs[2] = dom.createAttrMorph(element0, 'aria-label');
            morphs[3] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["lf-dialog ", ["get", "cc.options.dialogClass", ["loc", [null, [3, 28], [3, 50]]]]]]], ["attribute", "aria-labelledby", ["get", "cc.options.ariaLabelledBy", ["loc", [null, [3, 86], [3, 111]]]]], ["attribute", "aria-label", ["get", "cc.options.ariaLabel", ["loc", [null, [3, 127], [3, 147]]]]], ["inline", "lf-vue", [["get", "cc.view", ["loc", [null, [4, 15], [4, 22]]]]], ["dismiss", "dismiss"], ["loc", [null, [4, 6], [4, 42]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-modal.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "lm-container", [], ["action", "escape", "clickAway", "outsideClick"], 0, null, ["loc", [null, [2, 2], [6, 19]]]], ["content", "lf-overlay", ["loc", [null, [7, 2], [7, 16]]]]],
        locals: ["cc"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-modal.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "liquid-versions", [], ["name", "liquid-modal", "value", ["subexpr", "@mut", [["get", "currentContext", ["loc", [null, [1, 45], [1, 59]]]]], [], []], "renderWhenFalse", false], 0, null, ["loc", [null, [1, 0], [8, 20]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/templates/components/liquid-outlet", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 6
                },
                "end": {
                  "line": 17,
                  "column": 6
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-outlet.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "outlet", [["get", "outletName", ["loc", [null, [16, 17], [16, 27]]]]], [], ["loc", [null, [16, 8], [16, 29]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 19,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-outlet.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "set-outlet-state", [["get", "outletName", ["loc", [null, [15, 26], [15, 36]]]], ["get", "version.outletState", ["loc", [null, [15, 37], [15, 56]]]]], [], 0, null, ["loc", [null, [15, 6], [17, 28]]]]],
          locals: ["version"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-outlet.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-bind", [["get", "outletState", ["loc", [null, [2, 17], [2, 28]]]]], ["id", ["subexpr", "@mut", [["get", "id", ["loc", [null, [3, 9], [3, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [5, 10], [5, 13]]]]], [], []], "name", "liquid-outlet", "outletName", ["subexpr", "@mut", [["get", "outletName", ["loc", [null, [7, 17], [7, 27]]]]], [], []], "containerless", ["subexpr", "@mut", [["get", "containerless", ["loc", [null, [8, 20], [8, 33]]]]], [], []], "growDuration", ["subexpr", "@mut", [["get", "growDuration", ["loc", [null, [9, 19], [9, 31]]]]], [], []], "growPixelsPerSecond", ["subexpr", "@mut", [["get", "growPixelsPerSecond", ["loc", [null, [10, 26], [10, 45]]]]], [], []], "growEasing", ["subexpr", "@mut", [["get", "growEasing", ["loc", [null, [11, 17], [11, 27]]]]], [], []], "enableGrowth", ["subexpr", "@mut", [["get", "enableGrowth", ["loc", [null, [12, 19], [12, 31]]]]], [], []]], 0, null, ["loc", [null, [2, 2], [19, 20]]]]],
        locals: ["outletState"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 21,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-outlet.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "get-outlet-state", [["get", "outletName", ["loc", [null, [1, 21], [1, 31]]]]], [], 0, null, ["loc", [null, [1, 0], [20, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/templates/components/liquid-versions", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 5,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-versions.hbs"
            },
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "version.value", ["loc", [null, [4, 14], [4, 27]]]]], [], ["loc", [null, [4, 6], [4, 31]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-versions.hbs"
          },
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "liquid-child", [], ["version", ["subexpr", "@mut", [["get", "version", ["loc", [null, [3, 28], [3, 35]]]]], [], []], "liquidChildDidRender", "childDidRender", "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [3, 80], [3, 85]]]]], [], []]], 0, null, ["loc", [null, [3, 4], [5, 21]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-versions.hbs"
        },
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "version.shouldRender", ["loc", [null, [2, 8], [2, 28]]]]], [], 0, null, ["loc", [null, [2, 2], [6, 9]]]]],
        locals: ["version"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-versions.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "versions", ["loc", [null, [1, 8], [1, 16]]]]], ["key", "@identity"], 0, null, ["loc", [null, [1, 0], [7, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("frontend-cp/templates/components/liquid-with", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "yield", [["get", "version", ["loc", [null, [3, 13], [3, 20]]]]], [], ["loc", [null, [3, 4], [3, 24]]]]],
          locals: ["version"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "attrs.value", ["loc", [null, [2, 28], [2, 39]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [2, 44], [2, 47]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [2, 53], [2, 57]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [2, 64], [2, 69]]]]], [], []]], 0, null, ["loc", [null, [2, 2], [4, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.0.3",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 4
                }
              },
              "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
            },
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "yield", [["get", "version", ["loc", [null, [15, 15], [15, 22]]]]], [], ["loc", [null, [15, 6], [15, 26]]]]],
            locals: ["version"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.0.3",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 2
              },
              "end": {
                "line": 17,
                "column": 2
              }
            },
            "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
          },
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "liquid-versions", [], ["value", ["subexpr", "@mut", [["get", "attrs.value", ["loc", [null, [14, 30], [14, 41]]]]], [], []], "notify", ["subexpr", "@mut", [["get", "container", ["loc", [null, [14, 49], [14, 58]]]]], [], []], "use", ["subexpr", "@mut", [["get", "use", ["loc", [null, [14, 63], [14, 66]]]]], [], []], "name", ["subexpr", "@mut", [["get", "name", ["loc", [null, [14, 72], [14, 76]]]]], [], []]], 0, null, ["loc", [null, [14, 4], [16, 25]]]]],
          locals: ["container"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.0.3",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 18,
              "column": 0
            }
          },
          "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
        },
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "liquid-container", [], ["id", ["subexpr", "@mut", [["get", "id", ["loc", [null, [7, 9], [7, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "class", ["loc", [null, [8, 12], [8, 17]]]]], [], []], "growDuration", ["subexpr", "@mut", [["get", "growDuration", ["loc", [null, [9, 19], [9, 31]]]]], [], []], "growPixelsPerSecond", ["subexpr", "@mut", [["get", "growPixelsPerSecond", ["loc", [null, [10, 26], [10, 45]]]]], [], []], "growEasing", ["subexpr", "@mut", [["get", "growEasing", ["loc", [null, [11, 17], [11, 27]]]]], [], []], "enableGrowth", ["subexpr", "@mut", [["get", "enableGrowth", ["loc", [null, [12, 19], [12, 31]]]]], [], []]], 0, null, ["loc", [null, [6, 2], [17, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.0.3",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "frontend-cp/templates/components/liquid-with.hbs"
      },
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "containerless", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, 1, ["loc", [null, [1, 0], [18, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('frontend-cp/transforms/array', ['exports', 'ember-data'], function (exports, _emberData) {
  exports['default'] = _emberData['default'].Transform.extend({
    deserialize: function deserialize(serialized) {
      return serialized;
    },

    serialize: function serialize(deserialized) {
      return deserialized;
    }
  });
});
define("frontend-cp/transforms/fragment-array", ["exports"], function (exports) {
  exports["default"] = MF.FragmentArrayTransform;
});
define("frontend-cp/transforms/fragment", ["exports"], function (exports) {
  exports["default"] = MF.FragmentTransform;
});
define("frontend-cp/transitions/cross-fade", ["exports", "liquid-fire"], function (exports, _liquidFire) {
  exports["default"] = crossFade;

  function crossFade() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    (0, _liquidFire.stop)(this.oldElement);
    return _liquidFire.Promise.all([(0, _liquidFire.animate)(this.oldElement, { opacity: 0 }, opts), (0, _liquidFire.animate)(this.newElement, { opacity: [opts.maxOpacity || 1, 0] }, opts)]);
  }

  // END-SNIPPET
});
// BEGIN-SNIPPET cross-fade-definition
define("frontend-cp/transitions/default", ["exports", "liquid-fire"], function (exports, _liquidFire) {
  exports["default"] = defaultTransition;

  // This is what we run when no animation is asked for. It just sets
  // the newly-added element to visible (because we always start them
  // out invisible so that transitions can control their initial
  // appearance).

  function defaultTransition() {
    if (this.newElement) {
      this.newElement.css({ visibility: '' });
    }
    return _liquidFire.Promise.resolve();
  }
});
define("frontend-cp/transitions/explode", ["exports", "ember", "liquid-fire"], function (exports, _ember, _liquidFire) {
  exports["default"] = explode;

  // Explode is not, by itself, an animation. It exists to pull apart
  // other elements so that each of the pieces can be targeted by
  // animations.

  function explode() {
    var _this = this;

    var seenElements = {};
    var sawBackgroundPiece = false;

    for (var _len = arguments.length, pieces = Array(_len), _key = 0; _key < _len; _key++) {
      pieces[_key] = arguments[_key];
    }

    var promises = pieces.map(function (piece) {
      if (piece.matchBy) {
        return matchAndExplode(_this, piece, seenElements);
      } else if (piece.pick || piece.pickOld || piece.pickNew) {
        return explodePiece(_this, piece, seenElements);
      } else {
        sawBackgroundPiece = true;
        return runAnimation(_this, piece);
      }
    });
    if (!sawBackgroundPiece) {
      if (this.newElement) {
        this.newElement.css({ visibility: '' });
      }
      if (this.oldElement) {
        this.oldElement.css({ visibility: 'hidden' });
      }
    }
    return _liquidFire.Promise.all(promises);
  }

  function explodePiece(context, piece, seen) {
    var childContext = _ember["default"].copy(context);
    var selectors = [piece.pickOld || piece.pick, piece.pickNew || piece.pick];
    var cleanupOld, cleanupNew;

    if (selectors[0] || selectors[1]) {
      cleanupOld = _explodePart(context, 'oldElement', childContext, selectors[0], seen);
      cleanupNew = _explodePart(context, 'newElement', childContext, selectors[1], seen);
      if (!cleanupOld && !cleanupNew) {
        return _liquidFire.Promise.resolve();
      }
    }

    return runAnimation(childContext, piece)["finally"](function () {
      if (cleanupOld) {
        cleanupOld();
      }
      if (cleanupNew) {
        cleanupNew();
      }
    });
  }

  function _explodePart(context, field, childContext, selector, seen) {
    var child, childOffset, width, height, newChild;
    var elt = context[field];

    childContext[field] = null;
    if (elt && selector) {
      child = elt.find(selector).filter(function () {
        var guid = _ember["default"].guidFor(this);
        if (!seen[guid]) {
          seen[guid] = true;
          return true;
        }
      });
      if (child.length > 0) {
        childOffset = child.offset();
        width = child.outerWidth();
        height = child.outerHeight();
        newChild = child.clone();

        // Hide the original element
        child.css({ visibility: 'hidden' });

        // If the original element's parent was hidden, hide our clone
        // too.
        if (elt.css('visibility') === 'hidden') {
          newChild.css({ visibility: 'hidden' });
        }
        newChild.appendTo(elt.parent());
        newChild.outerWidth(width);
        newChild.outerHeight(height);
        var newParentOffset = newChild.offsetParent().offset();
        newChild.css({
          position: 'absolute',
          top: childOffset.top - newParentOffset.top,
          left: childOffset.left - newParentOffset.left,
          margin: 0
        });

        // Pass the clone to the next animation
        childContext[field] = newChild;
        return function cleanup() {
          newChild.remove();
          child.css({ visibility: '' });
        };
      }
    }
  }

  function animationFor(context, piece) {
    var name, args, func;
    if (!piece.use) {
      throw new Error("every argument to the 'explode' animation must include a followup animation to 'use'");
    }
    if (_ember["default"].isArray(piece.use)) {
      name = piece.use[0];
      args = piece.use.slice(1);
    } else {
      name = piece.use;
      args = [];
    }
    if (typeof name === 'function') {
      func = name;
    } else {
      func = context.lookup(name);
    }
    return function () {
      return _liquidFire.Promise.resolve(func.apply(this, args));
    };
  }

  function runAnimation(context, piece) {
    return new _liquidFire.Promise(function (resolve, reject) {
      animationFor(context, piece).apply(context).then(resolve, reject);
    });
  }

  function matchAndExplode(context, piece, seen) {
    if (!context.oldElement || !context.newElement) {
      return _liquidFire.Promise.resolve();
    }

    // reduce the matchBy scope
    if (piece.pick) {
      context.oldElement = context.oldElement.find(piece.pick);
      context.newElement = context.newElement.find(piece.pick);
    }

    if (piece.pickOld) {
      context.oldElement = context.oldElement.find(piece.pickOld);
    }

    if (piece.pickNew) {
      context.newElement = context.newElement.find(piece.pickNew);
    }

    // use the fastest selector available
    var selector;

    if (piece.matchBy === 'id') {
      selector = function (attrValue) {
        return "#" + attrValue;
      };
    } else if (piece.matchBy === 'class') {
      selector = function (attrValue) {
        return "." + attrValue;
      };
    } else {
      selector = function (attrValue) {
        var escapedAttrValue = attrValue.replace(/'/g, "\\'");
        return "[" + piece.matchBy + "='" + escapedAttrValue + "']";
      };
    }

    var hits = _ember["default"].A(context.oldElement.find("[" + piece.matchBy + "]").toArray());
    return _liquidFire.Promise.all(hits.map(function (elt) {
      var attrValue = _ember["default"].$(elt).attr(piece.matchBy);

      // if there is no match for a particular item just skip it
      if (attrValue === "" || context.newElement.find(selector(attrValue)).length === 0) {
        return _liquidFire.Promise.resolve();
      }

      return explodePiece(context, {
        pick: selector(attrValue),
        use: piece.use
      }, seen);
    }));
  }
});
define('frontend-cp/transitions/fade', ['exports', 'liquid-fire'], function (exports, _liquidFire) {
  exports['default'] = fade;

  function fade() {
    var _this = this;

    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    var firstStep;
    var outOpts = opts;
    var fadingElement = findFadingElement(this);

    if (fadingElement) {
      // We still have some older version that is in the process of
      // fading out, so out first step is waiting for it to finish.
      firstStep = (0, _liquidFire.finish)(fadingElement, 'fade-out');
    } else {
      if ((0, _liquidFire.isAnimating)(this.oldElement, 'fade-in')) {
        // if the previous view is partially faded in, scale its
        // fade-out duration appropriately.
        outOpts = { duration: (0, _liquidFire.timeSpent)(this.oldElement, 'fade-in') };
      }
      (0, _liquidFire.stop)(this.oldElement);
      firstStep = (0, _liquidFire.animate)(this.oldElement, { opacity: 0 }, outOpts, 'fade-out');
    }
    return firstStep.then(function () {
      return (0, _liquidFire.animate)(_this.newElement, { opacity: [opts.maxOpacity || 1, 0] }, opts, 'fade-in');
    });
  }

  function findFadingElement(context) {
    for (var i = 0; i < context.older.length; i++) {
      var entry = context.older[i];
      if ((0, _liquidFire.isAnimating)(entry.element, 'fade-out')) {
        return entry.element;
      }
    }
    if ((0, _liquidFire.isAnimating)(context.oldElement, 'fade-out')) {
      return context.oldElement;
    }
  }
  // END-SNIPPET
});
// BEGIN-SNIPPET fade-definition
define('frontend-cp/transitions/flex-grow', ['exports', 'liquid-fire'], function (exports, _liquidFire) {
  exports['default'] = flexGrow;

  function flexGrow(opts) {
    (0, _liquidFire.stop)(this.oldElement);
    return _liquidFire.Promise.all([(0, _liquidFire.animate)(this.oldElement, { 'flex-grow': 0 }, opts), (0, _liquidFire.animate)(this.newElement, { 'flex-grow': [1, 0] }, opts)]);
  }
});
define('frontend-cp/transitions/fly-to', ['exports', 'liquid-fire'], function (exports, _liquidFire) {
  exports['default'] = flyTo;

  function flyTo() {
    var _this = this;

    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    if (!this.newElement) {
      return _liquidFire.Promise.resolve();
    } else if (!this.oldElement) {
      this.newElement.css({ visibility: '' });
      return _liquidFire.Promise.resolve();
    }

    var oldOffset = this.oldElement.offset();
    var newOffset = this.newElement.offset();

    if (opts.movingSide === 'new') {
      var motion = {
        translateX: [0, oldOffset.left - newOffset.left],
        translateY: [0, oldOffset.top - newOffset.top],
        outerWidth: [this.newElement.outerWidth(), this.oldElement.outerWidth()],
        outerHeight: [this.newElement.outerHeight(), this.oldElement.outerHeight()]
      };
      this.oldElement.css({ visibility: 'hidden' });
      return (0, _liquidFire.animate)(this.newElement, motion, opts);
    } else {
      var motion = {
        translateX: newOffset.left - oldOffset.left,
        translateY: newOffset.top - oldOffset.top,
        outerWidth: this.newElement.outerWidth(),
        outerHeight: this.newElement.outerHeight()
      };
      this.newElement.css({ visibility: 'hidden' });
      return (0, _liquidFire.animate)(this.oldElement, motion, opts).then(function () {
        _this.newElement.css({ visibility: '' });
      });
    }
  }
});
define('frontend-cp/transitions/move-over', ['exports', 'liquid-fire'], function (exports, _liquidFire) {
  exports['default'] = moveOver;

  function moveOver(dimension, direction, opts) {
    var _this = this;

    var oldParams = {},
        newParams = {},
        firstStep,
        property,
        measure;

    if (dimension.toLowerCase() === 'x') {
      property = 'translateX';
      measure = 'width';
    } else {
      property = 'translateY';
      measure = 'height';
    }

    if ((0, _liquidFire.isAnimating)(this.oldElement, 'moving-in')) {
      firstStep = (0, _liquidFire.finish)(this.oldElement, 'moving-in');
    } else {
      (0, _liquidFire.stop)(this.oldElement);
      firstStep = _liquidFire.Promise.resolve();
    }

    return firstStep.then(function () {
      var bigger = biggestSize(_this, measure);
      oldParams[property] = bigger * direction + 'px';
      newParams[property] = ["0px", -1 * bigger * direction + 'px'];

      return _liquidFire.Promise.all([(0, _liquidFire.animate)(_this.oldElement, oldParams, opts), (0, _liquidFire.animate)(_this.newElement, newParams, opts, 'moving-in')]);
    });
  }

  function biggestSize(context, dimension) {
    var sizes = [];
    if (context.newElement) {
      sizes.push(parseInt(context.newElement.css(dimension), 10));
      sizes.push(parseInt(context.newElement.parent().css(dimension), 10));
    }
    if (context.oldElement) {
      sizes.push(parseInt(context.oldElement.css(dimension), 10));
      sizes.push(parseInt(context.oldElement.parent().css(dimension), 10));
    }
    return Math.max.apply(null, sizes);
  }
});
define("frontend-cp/transitions/scale", ["exports", "liquid-fire"], function (exports, _liquidFire) {
  exports["default"] = scale;

  function scale() {
    var _this = this;

    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    return (0, _liquidFire.animate)(this.oldElement, { scale: [0.2, 1] }, opts).then(function () {
      return (0, _liquidFire.animate)(_this.newElement, { scale: [1, 0.2] }, opts);
    });
  }
});
define("frontend-cp/transitions/scroll-then", ["exports", "ember", "liquid-fire/is-browser"], function (exports, _ember, _liquidFireIsBrowser) {
  exports["default"] = function (nextTransitionName, options) {
    for (var _len = arguments.length, rest = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      rest[_key - 2] = arguments[_key];
    }

    var _this = this;

    if ((0, _liquidFireIsBrowser["default"])()) {
      _ember["default"].assert("You must provide a transition name as the first argument to scrollThen. Example: this.use('scrollThen', 'toLeft')", 'string' === typeof nextTransitionName);

      var el = document.getElementsByTagName('html');
      var nextTransition = this.lookup(nextTransitionName);
      if (!options) {
        options = {};
      }

      _ember["default"].assert("The second argument to scrollThen is passed to Velocity's scroll function and must be an object", 'object' === typeof options);

      // set scroll options via: this.use('scrollThen', 'ToLeft', {easing: 'spring'})
      options = _ember["default"].merge({ duration: 500, offset: 0 }, options);

      // additional args can be passed through after the scroll options object
      // like so: this.use('scrollThen', 'moveOver', {duration: 100}, 'x', -1);

      return window.$.Velocity(el, 'scroll', options).then(function () {
        nextTransition.apply(_this, rest);
      });
    }
  };
});
define("frontend-cp/transitions/to-down", ["exports", "frontend-cp/transitions/move-over"], function (exports, _frontendCpTransitionsMoveOver) {
  exports["default"] = function (opts) {
    return _frontendCpTransitionsMoveOver["default"].call(this, 'y', 1, opts);
  };
});
define("frontend-cp/transitions/to-left", ["exports", "frontend-cp/transitions/move-over"], function (exports, _frontendCpTransitionsMoveOver) {
  exports["default"] = function (opts) {
    return _frontendCpTransitionsMoveOver["default"].call(this, 'x', -1, opts);
  };
});
define("frontend-cp/transitions/to-right", ["exports", "frontend-cp/transitions/move-over"], function (exports, _frontendCpTransitionsMoveOver) {
  exports["default"] = function (opts) {
    return _frontendCpTransitionsMoveOver["default"].call(this, 'x', 1, opts);
  };
});
define("frontend-cp/transitions/to-up", ["exports", "frontend-cp/transitions/move-over"], function (exports, _frontendCpTransitionsMoveOver) {
  exports["default"] = function (opts) {
    return _frontendCpTransitionsMoveOver["default"].call(this, 'y', -1, opts);
  };
});
define('frontend-cp/transitions/wait', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = function (ms) {
    var _this = this;

    var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    return new _ember['default'].RSVP.Promise(function (resolve) {
      setTimeout(function () {
        resolve(_this.lookup(opts.then || 'default').call(_this));
      }, ms);
    });
  };
});
define('frontend-cp/transitions', ['exports'], function (exports) {
  exports['default'] = function () {
    this.transition(this.hasClass('leftHandSideBarAnimation'), this.toValue(true), this.use('toLeft', { duration: 250 }), this.reverse('toRight', { duration: 250 }));
  };
});
define('frontend-cp/utils/base-path', ['exports'], function (exports) {
  exports.getBasePath = getBasePath;
  exports.getLoginPath = getLoginPath;

  function getBasePath() {
    var path = '/agent';
    var pathname = location.pathname;

    // If we are at a deeplink inside admin, redirect back to admin
    // If we have errored at '/admin' leave path='/agent'
    if (pathname.startsWith('/admin') && pathname !== '/admin') {
      path = '/admin';
    }
    // If we're coming from a login path just redirect the user back there.
    // Without this a user could end up in a redirect loop
    if (pathname.endsWith('/login')) {
      path = pathname;
    }
    return path;
  }

  function getLoginPath() {
    var pathname = location.pathname;

    if (pathname.startsWith('/admin')) {
      return '/admin/login';
    } else {
      return '/agent/login';
    }
  }
});
define('frontend-cp/utils/can-use-dom', ['exports', 'ember-metrics/utils/can-use-dom'], function (exports, _emberMetricsUtilsCanUseDom) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsUtilsCanUseDom['default'];
    }
  });
});
define('frontend-cp/utils/exclusion', ['exports'], function (exports) {
  exports.exclude = exclude;

  function exclude(data, exclusions) {
    var key = arguments.length <= 2 || arguments[2] === undefined ? 'name' : arguments[2];

    return (data || []).filter(function (element) {
      return (exclusions || []).indexOf(element.get(key)) === -1;
    });
  }
});
define("frontend-cp/utils/format-validations", ["exports"], function (exports) {
  exports.validateEmailFormat = validateEmailFormat;
  exports.validateTwitterHandleFormat = validateTwitterHandleFormat;
  var EMAIL_REGEX = /^[^@]+@([^@\.]+\.)+[^@\.]{2,}$/;
  var TWITTER_REGEX = /(^|[^@\w])@(\w{1,15})\b$/;

  function validateEmailFormat(email) {
    return EMAIL_REGEX.test(email);
  }

  function validateTwitterHandleFormat(email) {
    return TWITTER_REGEX.test(email);
  }
});
define('frontend-cp/utils/object-transforms', ['exports', 'ember-metrics/utils/object-transforms'], function (exports, _emberMetricsUtilsObjectTransforms) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMetricsUtilsObjectTransforms['default'];
    }
  });
});
define('frontend-cp/utils/object', ['exports', 'ember', 'npm:lodash'], function (exports, _ember, _npmLodash) {
  exports.jsonToObject = jsonToObject;

  function convertValue(value) {
    if (_npmLodash['default'].isArray(value)) {
      return convertArray(value);
    } else if (_npmLodash['default'].isObject(value)) {
      return jsonToObject(value);
    } else {
      return value;
    }
  }

  function convertArray(array) {
    return array.map(convertValue);
  }

  function jsonToObject(object) {
    return _ember['default'].Object.create(_npmLodash['default'].mapValues(object, convertValue));
  }
});
define("frontend-cp/utils/promise-queue", ["exports"], function (exports) {
  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  var PromiseQueue = (function () {
    function PromiseQueue() {
      _classCallCheck(this, PromiseQueue);

      this.queue = [];
    }

    //Queue is required, to prevent several promises to be
    //resolved in random order. For example, someone writes
    //"d" and after de-bounce (150ms), writes "demo".
    //"d" will return results, but "demo" won't. But as
    //server responds faster to the empty result, on "demo"
    //string we will get wrong result.

    _createClass(PromiseQueue, [{
      key: "push",
      value: function push(term, promise) {
        var queue = this.queue;

        queue.push({
          term: term,
          promise: promise
        });
      }
    }, {
      key: "isDiscarded",
      value: function isDiscarded(term) {
        var queue = this.queue;
        var lastPromiseLength = queue.length;
        var queuedPromise = queue[lastPromiseLength - 1];

        return (queuedPromise || {}).term !== term;
      }
    }, {
      key: "flush",
      value: function flush() {
        if (this.queue.length) {
          this.queue.clear();
        }
      }
    }]);

    return PromiseQueue;
  })();

  exports["default"] = PromiseQueue;
});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('frontend-cp/config/environment', ['ember'], function(Ember) {
  var prefix = 'frontend-cp';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */
if (!runningTests) {
  require("frontend-cp/app")["default"].create({"autodismissTimeout":3000,"PUSHER_OPTIONS":{"disabled":false,"logEvents":true,"encrypted":true,"authEndpoint":"/api/v1/realtime/auth","wsHost":"ws.realtime.kayako.com","httpHost":"sockjs.realtime.kayako.com"},"views":{"maxLimit":999,"viewsPollingInterval":30,"casesPollingInterval":30,"isPollingEnabled":true},"name":"frontend-cp","version":"0.0.0+fe66a27e"});
}
/* jshint ignore:end */
